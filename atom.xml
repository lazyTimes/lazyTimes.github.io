<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LazyTimes的博客</title>
  
  <subtitle>生死有命，富贵在天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://whitestore.top/"/>
  <updated>2021-03-28T07:08:59.540Z</updated>
  <id>https://whitestore.top/</id>
  
  <author>
    <name>阿东</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《小王子》读书笔记</title>
    <link href="https://whitestore.top/2021/03/28/xiaowangzi/"/>
    <id>https://whitestore.top/2021/03/28/xiaowangzi/</id>
    <published>2021-03-28T07:07:06.000Z</published>
    <updated>2021-03-28T07:08:59.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《小王子》读书笔记"><a href="#《小王子》读书笔记" class="headerlink" title="《小王子》读书笔记"></a>《小王子》读书笔记</h1><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210328131426.png" alt=""></p><p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    《小王子》这本书应该有不少人看过了，以前一直听说过他的名号，然而到了现在才来看，这本书也会我少有的看了两遍的的的书，每看一遍心理的感受都不相同。《小王子》个人阅读的版本是李继宏翻译的版本，个人认为翻译的非常棒，下面就来展开说一下这次读小王子这本书的感受。</p><a id="more"></a><h1 id="在读书之前"><a href="#在读书之前" class="headerlink" title="在读书之前"></a>在读书之前</h1><p>​    这本虽然只有短短100多页，去掉配图和前面的序并没有多少内容，在阅读正文之前，前面关于序的部分是值得仔细推敲的，了解作者的生平对于看懂这部作品比较有帮助，同时作者的经历也比较传奇，在他的作品走向巅峰的时候却突然离奇失踪，虽然已经被证实是被二战德国纳粹士兵击落，但是依然不减传奇的色彩。这个作者并不像很多伟人一般有很多名人事迹，而是通过自己当飞行员的经历和过往生活，写下来自己的作品，可能是许多名人里面经历最为“普通”的一个。</p><p>​    所以在读这本书之前，建议先了解一下作者的经历。</p><h1 id="推荐程度"><a href="#推荐程度" class="headerlink" title="推荐程度"></a>推荐程度</h1><p>​    <strong>5星</strong>：这本书是完全可以和《老人与海》媲美的一本书，将丰富的哲学和人生道理蕴含在小小的童话之中，不同的年龄段有不同的感触，每读一遍，都会有不同的想法。</p><p>​    这本书最关键的部分无非关乎狐狸和玫瑰，但是我更关注泉水和奇怪的人。</p><p>​    </p><h1 id="内容摘要"><a href="#内容摘要" class="headerlink" title="内容摘要"></a>内容摘要</h1><p>​    这本书让我印象深刻的部分有下面几个点：</p><pre><code>+ 我与小王子的相遇+ 玫瑰与庭院+ 小王子和奇怪的人+ 小王子和狐狸+ 沙漠中的泉水</code></pre><p>从整体上来看是一个非常质朴的故事，但是书中的每一段对话，每一幅画都有他深刻的含义。每看一遍都回味无穷。</p><h2 id="我与小王子的相遇"><a href="#我与小王子的相遇" class="headerlink" title="我与小王子的相遇"></a>我与小王子的相遇</h2><p>​    “我”在一次飞行任务当中出现飞行事故，迫降在非洲的沙哈拉沙漠，在沙漠当中遇到了小王子。小王子要求“我”画一只绵羊给他，我献给了“帽子”，然而却惊奇王子说不要“蛇吞象”。“我”很高兴有人可以看懂“我”的画。而我与小王子的见面引出了整个童话故事的前奏。</p><p>​    我与小王子相遇能互相理解，个人认为是作者“超我”的一种论述，用自己和自己对话的方式，用故事来讲述自己的“过去”。这种不着痕迹的隐喻是非常厉害的写作方式。</p><h2 id="玫瑰与庭院"><a href="#玫瑰与庭院" class="headerlink" title="玫瑰与庭院"></a>玫瑰与庭院</h2><p>​    在小王子懵懂无知的时候，遇到了玫瑰，玫瑰虽然美丽但是是带刺的，而玫瑰欺骗小王子说自己是世界上独一无二的花朵，虽然玫瑰欺骗了王子，但是玫瑰本意却是善良温柔的。就像小王子所说的：他为我散发芬芳，我却不懂背后的事情，在小王子不懂得爱的时候，他遇到了玫瑰，但是他和玫瑰之间是不合的，因为青涩与懵懂，小王子和玫瑰之前并不是互相理解。但是小王子和玫瑰</p><p>​    每个人在青春懵懂的时候，或明恋或暗恋都应该遇到自己的玫瑰，虽然都知道玫瑰非常美好，但是都很害怕被玫瑰的刺伤到。而玫瑰虽然和花园里万千的玫瑰并没有什么不同，但是因为为他浇过水，施过肥，除过虫，所以这朵玫瑰对于你来说就是独一无二的存在。但是当互相无法理解的感情硬扭在一起的时候，结果好像注定是分离，这样的事情在学生时代几乎是见怪不怪了。</p><p>​    但是，多少人遇到了对的玫瑰呢？</p><h2 id="小王子和奇怪的人"><a href="#小王子和奇怪的人" class="headerlink" title="小王子和奇怪的人"></a>小王子和奇怪的人</h2><p>​    小王子离开自己的星球，前往了6个星球并且拜访了下面的人：国王、虚荣的人、爱喝酒的人、做生意的人、地理学家和点灯的人。在所有人中小王子认为点灯的人是最不奇怪的，因为点灯的人照亮的是他人，也是默默奉献的人，而其他的人代表了拥有权利，荣耀，富贵，名声等形形色色的人。</p><p>​    小王子觉得星球上的人都很奇怪，并且感到无法理解。对于这一段的理解，作者批判了世俗的欲望，并且通过小王子指出这都是空虚的东西，同时也是`不重要的。但是点灯的人却不同，点灯的人默默奉献自己，是受到了作者正面肯定的。</p><p>​    </p><h2 id="小王子和狐狸"><a href="#小王子和狐狸" class="headerlink" title="小王子和狐狸"></a>小王子和狐狸</h2><p>​    小王子在看到遍地玫瑰的时候，认为自己的玫瑰欺骗了他，就在小王子迷茫无知的时候，他遇到了狐狸，狐狸希望小王子驯化他，并且作为交换分享自己的秘密，他告诉了小王子什么是爱，爱是责任和包容，爱是承担，既然选择爱上一朵玫瑰，就要为玫瑰一直负责。</p><p>​    “狐狸”曾经也是“玫瑰”，然而狐狸受过伤，害怕人类，狐狸需要隐藏和伪装自己，他是孤独和寂寞的，狐狸不被任何人需要，所以他想要朋友，想要人类驯化他，当有人驯化他，对于狐狸和驯化他的人来说，彼此都是需要的。</p><p>​    小王子和狐狸是许多人印象深刻的点。但是虽然我遇到过玫瑰，但是没有见到过狐狸，这里就不做论述的了。。。。</p><h2 id="沙漠中的泉水"><a href="#沙漠中的泉水" class="headerlink" title="沙漠中的泉水"></a>沙漠中的泉水</h2><p>​    在小王子给“我”讲述完他的故事之后，小王子打算离开回到自己的星球，在此之前，他们发现了沙漠的水井。他们一直在寻找的东西就在一汪清泉当中。他们需要的只不过是水而已。他们晚上一起看星星，并且企图找到自己的花朵所在的星星。</p><p>​    这一段富含哲理，沙漠中的泉水大致是指人类美好的心灵和纯真，然而沙漠当中要找到泉水是非常困难的，所以小王子和“我”都为找到泉水而十分的兴奋而高兴。</p><h1 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h1><p>​    可能我是单身狗并且是非常非常感性的人，我并没有非常看懂《小王子》，同时也对狐狸和玫瑰没有非常深的感触，所以我<strong>并没有读懂这本书</strong>。不知道这是一件好事还是坏事。在我看来，在高等教育不断普及并且个体的发展不断突出的现代，很难在找到纯粹的感情，当年龄不断增长，爱情也不断的变得物质，爱情的代价也不断的变大，很多人寻找“玫瑰”最后找到的却是“狐狸”。</p><p>​    对于作者来说，当飞行员飞上蓝天就是作者毕生的梦，所以他的经历也如同富有了传奇的色彩。无论如何，当你对某个东西付诸了心血，你既要对自己付诸心血的东西负责，时至今日，对于我们来说看不见的东西有回忆，有知识，有经历和成长。随着年龄的增长，每个人生命的厚度不断增长，每个人都在追寻生命的意义。</p><p>​    另外，书中通过沙漠的背景，以及奇怪的人，泉水等，讽刺了人类自以为很强大，但是在高空翱翔的视角来看，又是那样的渺小和脆弱，</p><p>​    <strong>看东西要用心才能看清楚，重要的东西是眼睛看不见的</strong>。爱是责任和担当，爱是成熟和稳重。</p><p>​    最后，这本书这也让我想起了小狗钱钱的甜甜圈。外在的圆圈是看的见得，每个人都应该充实外在的圆圈，但是真正重要的东西是内在的圆环，这决定了你能走多远。最重要的东西往往是看不见的。所以很多人只相信眼睛看见的东西。当然在拥有看不见的重要东西之前，我们依然需要追寻物质生活。这大概是成长的悲哀，也是人生世俗的规则。</p><p>​    </p><h1 id="精句摘录"><a href="#精句摘录" class="headerlink" title="精句摘录"></a>精句摘录</h1><pre><code>+ 看东西要用心才能看清楚，重要的东西是眼睛看不见的+ 人类自以为占据了很多空间，认为自己像猴面包树一般重要。+ 他们要寻找的东西或许就在一汪清泉当中。+ 当你爱上一朵在某颗星球上的花，当你抬头仰望星空的时候，你会很甜蜜，仿佛所有的星星都开满了鲜花。+ 如果美国是中午，那么法国就是黄昏，若果能在一分钟内达到法国，那么就可以看到日落+ 在看到第四十四次日落的时候，你是否会感到悲伤。+ **对我来说，你无非是个孩子，和其他成千上万的孩子没有区别，我不需要你，你不需要我，对你来说，我无法是只狐狸，但如果你驯化我，我们就会彼此需要。你对我来说是独一无二的，我对你来说也是独一无二的**</code></pre><h1 id="豆瓣精选书评"><a href="#豆瓣精选书评" class="headerlink" title="豆瓣精选书评"></a>豆瓣精选书评</h1><p>这里截取了一条个人十分有感触的豆瓣书评。</p><blockquote><p>小的时候有一阵心血来潮很爱读名著，于是买了这本。中英文对照版，有漂亮的插画，优雅的排版，可惜懵懵懂懂的看了一遍，并没有看懂，有点索然无味。<br>很多年后突然翻出这本书，突然发现自己能了解作者在说什么了。关于那座玫瑰花砌成的房子和那条吞了大象的蛇。还有小王子旅行的星球和那只狐狸。关于驯养和被驯养。一瞬间我看得泪流满面。<br>原来好像书的扉页所写的那样，献给曾经是孩子的大人。所有的大人都曾经是孩子，只是很少有人记得罢了。<br>可惜我也变成了那些大人中的一个。看着看着觉得自己是那样的可悲。<br>当你能读懂这样一本书的时候，你已经不再是个孩子了。现实的世界将你打磨的那么好，不管你心里究竟愿不愿意——<strong>你无可奈何的，毫无选择的被长大了。</strong><br>如今这本书是我心中的经典，没有别的可以取代。关于人生的一切哲理，你都可以在这本书里找到答案。但是我劝你不要去用它，只会让你在这个分外现实的世界里显得愈发格格不入。<br>大人还是要有大人的游戏规则。那些固执的游戏，早已过了可以任性的年纪。<br>想起李宗盛的歌：<strong>想得却不可得，你耐人生何。岁月你别催，该来的我不推。该还的还，该给的我给。</strong><br>我们就这样，一路跌跌撞撞，向前走着。<br>但愿我的孩子将来读这本书时，能像当时的我那样觉得—-这本书简直是莫名其妙</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​    童话就让他成为童话吧。或许得不到的才是最好的，想象永远要多于实际体验，我们不断的成长，终究看不到“蛇吞象”，终究只能看到一顶帽子。</p><p>​    重要的东西是眼睛看不见的。希望若干年后我再次捧起书能让我看懂。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      小王子的读书笔记
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>《乌合之众》读书笔记</title>
    <link href="https://whitestore.top/2021/03/28/wuhezhizong/"/>
    <id>https://whitestore.top/2021/03/28/wuhezhizong/</id>
    <published>2021-03-28T07:05:52.000Z</published>
    <updated>2021-03-28T07:06:47.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《乌合之众》读书笔记"><a href="#《乌合之众》读书笔记" class="headerlink" title="《乌合之众》读书笔记"></a>《乌合之众》读书笔记</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    这本书是为了试验多多平台的书籍质量买的，也就5块钱，书本的内容大致也是扫读的，基本没有太过细看，《乌合之众》这本书是具有时代背景的局限性的，在法国大革命的背景下，作者的对于群众进行了一系列的批判，包括群众弱化个人贡献，群众降低个人能力，以及群众的盲目性等等。同时作者带有女性的各种歧视也可以从书本当中看到。我不太明白这本书为什么在国内如此推崇，所以这篇读书笔记将记录我的个人看法。</p><a id="more"></a><h1 id="推荐程度"><a href="#推荐程度" class="headerlink" title="推荐程度"></a>推荐程度</h1><p>​    <strong>2星</strong>：由于作者存在一定的<strong>精英主义</strong>和<strong>种族歧视</strong>，个人并不推荐看这本书，看这本书只要抱着提高自我认知和在群体中保持清醒认知就算是从书中多少学到点有用的东西了。</p><p>​    另外我是实在不懂为什么这本书如此被推崇，看完感到非常失望。</p><p>​    </p><h1 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h1><p>​    下面根据零碎的读书笔记进行阅读：</p><pre><code>+ 群体在智力上总是低于个人+ 群体因环境比个人更差或者更好</code></pre><ul><li>群体的情感和道德观<ul><li>冲动暴躁并且易怒<ul><li>自我控制力差</li><li>s容易受到轻信和暗示</li></ul></li></ul></li><li>个人崇拜：一个人把自己一切的思想资源，一切自愿服从行为，同时发自肺腑的进妄想。<ul><li>概括：不顾一切奉献一个事业或者个人的才是一个虔诚的人。</li><li>教育不会使人更道德，也不会使人更幸福</li><li>作者认为生活更能培养优秀的人，而不是理论化的学校教育</li><li>只要是人聚集的地方，必然会有一个头领</li><li>领袖使用不断重复的断言传染给其他人</li><li>名望可以产生多么无耻的陈词滥调</li></ul></li></ul><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>这里需要说明的一点是<strong>人以群分，物以类聚</strong>，如果你是什么样的人，通常你就会待在什么样的群体当中。这点基本算是毋庸置疑的，同时由于个人在群体中受到了平均化，群体容易受到风向的导向而失去理智。这些例子在生活中多的数不胜数。</p><p>​    二战的纳粹正是利用了群众的希望和盲从无知，并且说明了一个群体的领导对于一个群体会造成多大的改变！但是在现代的各种精英团队之下，群众又迸发出无与伦比的力量。</p><p>​    关于个人崇拜的部分，中国历史上也有不少，由于怕被请去喝茶这里就不一一列举了，可以自行查找资料（可以看看拿破仑的事迹，在他的带领下，士兵对于拿破仑英雄的个人崇拜），贝多芬曾经也因为个人崇拜而十分后悔。</p><p>​    一个好的团队可能会有好的领导，也有可能是一个坏的领导，这并没有很好的定式，但是作者更加倾向贬低群体当中的领导。在一个群体当中一定要有清晰的认知和定位，同时不要<strong>同流合污</strong>。众人皆浊我独清，众人皆醉我独醒的状态是最好不过的。</p><p>​    最后讲领袖是如何利用断言和情报传播流言的，集团通过不断释放良好的一面，所以在一个群体当中保持时刻保持清醒是十分难得的一件事情，如果集团不管灌输一个理念，那么群众或多或少都会有人相信。</p><p>​    最后还是需要强调一句这本书并不是完全一无是处，看完可以基本了解到为什么产品很烂却依然有很多的关注，明明看起来完全不能火的东西，却有很多人追捧。这一切都是乌合之众的影响。</p><h1 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h1><p>​    这本书无时不刻不在说明一些我们都会认同的道理，但是我并不认为多数人都认为正确的事情就一定是合理的。</p><p>​    从书本当中可以看出作者并不是完全中立的角度去看待的问题，在字里行间存在着一些“嘲讽”的意味，部分论断甚至不具备科学依据的解释，</p><p>​    这本书只要记住让独立思考保持自己的清醒，同时不要被他人的意见轻易左右，一定要有自己的观点和看法，这样才不容易被利用。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​    乌合之众在生活之中无处不在，我们需要避开乌合之众，寻找优秀的群体，即跟对人，做对事。</p><p>​    最后，多多的书如果没有过多要求还是可以买来看看的，当然纸质是那种复印纸，但是价钱十分的便宜。但是这本书真的没有吹嘘的那么厉害。</p><p>​    最后借用豆瓣的话：完这本书还可以去看看《群体的智慧》，从另一个角度来解释群体性的特性，正好跟这本书互相补充</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      如何看待乌合之众
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>《如何有效读一本书》读书笔记</title>
    <link href="https://whitestore.top/2021/03/28/readbookok/"/>
    <id>https://whitestore.top/2021/03/28/readbookok/</id>
    <published>2021-03-28T07:04:26.000Z</published>
    <updated>2021-03-28T07:05:30.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《如何有效读一本书》读书笔记"><a href="#《如何有效读一本书》读书笔记" class="headerlink" title="《如何有效读一本书》读书笔记"></a>《如何有效读一本书》读书笔记</h1><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210326094736.png" alt=""></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    这段时间由于搬家和布置家具，基本没怎么看书，安顿好之后，又重新开启了读书计划，这次看的一本书讲的是读书方法相关的内容，个人从中还是有不少的成长的，并且书中作者的某些做法竟然自己也在做，这本书是一本比较有意思的书。需要注意的是作者是个日本人，有些章节的参考价值不大，所以只挑选了符合“国情”的一些内容作为笔记。</p><a id="more"></a><h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>​    这本书是一本实用方面的书，主要讲作者的阅读习惯，以及读书笔记的记录方法，从挑选图书到读书，最后从书中提取笔记并且产出自己的思想，通过各种举证像读者“安利”自己的读书和学习方式，同时利用循序渐进的方式，像读者介绍了如何从零开始爱上编写读书笔记。在作者的观念当中，有效读书的核心就是 <strong>读书日记</strong>。通过日记不仅可以节省重读的时间，并且每看一遍笔记都会有新的收获。</p><h1 id="推荐指数"><a href="#推荐指数" class="headerlink" title="推荐指数"></a>推荐指数</h1><p><strong>3星</strong>：如果你喜欢纸质书，那这本书很值得参考，但是如果平时喜欢手机看书，或者只喜欢电子书，这本书的意义和价值不大，作者是个日本人，所以很多习惯和国人不一样，看书的时候请理解一下。</p><p>另外，如果你像我一样喜欢买二手书，也是不是特别推荐看的。因为这本书推荐的方式基本都是要对原来的书一样“动手脚”</p><h1 id="内容摘要"><a href="#内容摘要" class="headerlink" title="内容摘要"></a>内容摘要</h1><p>​    这本书个人的笔记方式：</p><pre><code>- 边看边使用便利贴的方式进行比较，记录自己感兴趣的话语- 第二遍回顾自己的便利贴，结合贴上的页码，回忆内容- 写下这篇文章，归档自己学习的内容和读书感想。形成自己的读书笔记</code></pre><p>经过了上面的步骤之后，就有了下面的思维导图笔记，下面是思维导图的部分笔记，讲真思维导图还是蛮香的，能快速构建自己的知识笔记的网络，虽然我并不讨厌码字，但是思维导图更加促进思考。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210325230246.png" alt=""></p><p>思维导图连接：<span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvSm5vMVp2MDFFbA==" title="https://share.mubu.com/doc/Jno1Zv01El">思维导图<i class="fa fa-external-link"></i></span></p><blockquote><p> 无法访问的试试直接访问URL：<span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvSm5vMVp2MDFFbA==" title="https://share.mubu.com/doc/Jno1Zv01El">https://share.mubu.com/doc/Jno1Zv01El<i class="fa fa-external-link"></i></span></p></blockquote><p>下面的部分是根据这本书的各个章节说下个人的感想</p><h2 id="有效读书"><a href="#有效读书" class="headerlink" title="有效读书"></a>有效读书</h2><p>​    在这本书的最开头，使用“有效读书”的话题，通过各种例证说明一个读书笔记的重要性，同时对于读书来说，最重要的不是看什么书和看书的收获，最重要的是<strong>看书的目标和想要从书中学到多少有用的内容</strong>。这样才是最重要的，同时重读读书笔记也是很重要的一件事，好好写好一份读书笔记就更加重要了。</p><p>​    对于书本当中提到的读书的五个步骤，个人大致归纳为：<code>选 -&gt; 购 -&gt; 读 -&gt; 记 -&gt; 活</code>。从最开始的选出一本适合自己的好书到最后活用书中的知识，形成自己的理解。</p><p>​    值得注意的是，人的大脑是一块不定时格式化的磁盘，所以对于重要的事情，个人非常推荐买一个小本子带在身上，在上面记录重要和紧急的事情非常有用。同时不需要注意格式，类似随身携带的草稿纸，写满一本之后，找一个鞋盒收进去，塞到床底下，等哪天想起来翻开看看，肯定会对当时记笔记的自己唏嘘不已。</p><h2 id="购书清单"><a href="#购书清单" class="headerlink" title="购书清单"></a>购书清单</h2><p>​    个人的购书清单通常在<strong>别人的博客推荐</strong>上，或者通过豆瓣上高评价的作品，这样大概率都不会踩坑。这里也要说一句一本书的起名太重要了，很多好书其实本身是由于一个不太“好听”的名字而没有知名度。个人还倾向于按照封面去选书，一个好看封面的实体书会增加我阅读的兴趣。</p><p>​    购书清单这部分个人建议跳读，因为基本上喜欢读书的人都有自己的一套购书习惯，没有必要去照着作者的思路去完成，个人对这一部分保持中立的态度，购书完全看自己。</p><p>​    同时这一个章节也是跳读的，这部分的内容个人认为更加适合日本的生活习惯。日本现在还有保留阅读报纸习惯，而国内现在读书却越来越趋近于网络看书，所以购书清单个人保持中立的意见，书中提到的冲动买书个人经常做，不过个人现在通常都是买的二手书，低价买入然后再卖回去，循环利用，这样我的书架永远都有很多书但是永远都只有那么多书，这里还是要说一句二手书还是很香的存在。</p><p>​    近几年来有些声音是讨论纸质书的必要性，我认为还是有必要的，这种情景总是让我想起《三体》最后部分罗辑把人类文明刻在石头上才得以流传，这真的是一个文明的悲哀！</p><blockquote><p>这里有一个值得学习的点就是学习报纸的排版方式，虽然报纸上密密麻麻的写满了文字，但是基本上没有多少人会反感报纸的排版方式，报纸的排版是一个十分值得学习的学问，对于喜欢纸质笔记的人来说，学习报纸的排版方式算是比较推崇的。</p></blockquote><h2 id="火锅式读书法"><a href="#火锅式读书法" class="headerlink" title="火锅式读书法"></a>火锅式读书法</h2><p>​    书中的火锅式是一个生僻字，懒得记忆的我直接叫了火锅式读书法。</p><p>​    关于火锅记忆法，简单理解就是形成自己的标记模式，创建自己的标记习惯，比如作者习惯一本书读三遍并且给书折角并且对于段落进行标记。<strong>我不太喜欢这种方式</strong>，我虽然不是特别爱惜书的人，但是我拿到的书基本不会让他脏乱，如果书出现折痕，我也会比较心疼。折角对于我来说，并不能形成强烈的提醒作用。因为有时候会出现误折角，所以在我的个人观点来看，作者的读书方式对我来说<strong>参考意义不大</strong>。关于火锅式读书法的另一个特点就是重读，重读可以是段落，笔记，也可以是全文，根据当时的心情重读也有可能，我是比较懒得，对于一本书能一遍看懂就一遍看懂，看不懂也之后很长时间之后偶尔翻一翻，所以我喜欢 <strong>一遍读懂一本书</strong>。这种想法或许会受到很多人的反对，但是长久的读书习惯。让我不再想起读一遍已经读过的书。（当然技术书籍和专业书籍除外，这类书籍我会反复去看）</p><p>​    火锅式读书法对于读者来说能吸收多少完全看个人，这本书在前言部分也说了，作者是个日本人，必然有日本人的思维习惯和生活习惯。很多读书方法在中国其实是走不通的。</p><h2 id="广告部分"><a href="#广告部分" class="headerlink" title="广告部分"></a>广告部分</h2><p>​    这本书让我比较在意的部分最后一个点就是作者的广告部分，作者居然用了十多种的笔来做笔记，在我看来不是很能理解。所以对于这部分的感受，个人在思维导图列举的部分是个人<strong>可能会有意向</strong>购买的辅助工具，也算是吃到了安利。</p><ul><li>便携阅读架：个人有一个nice202d 的阅读架，实际体验非常棒，架在桌子上加一个台灯很有读书的氛围。当然也比较贵。同时比较沉，适合放家里。买一个便携阅读架是看书之后才有的想法，因为有时候拿出书本记笔记的时候，书会自己合上非常恼火，一个夹书的工具对我来说很有必要</li><li>玻璃镇纸：压书神器</li><li>票夹：让书摊开最简单的工具，对于书本的伤害也是最大的</li><li>钢笔：虽然我字丑，但是我比较喜欢钢笔的外观以及写字的感受。</li><li>便利贴：便利贴挺好的，不过淘宝买的便利贴老是自己掉，下次买国誉的试一试</li><li>三菱彩色铅笔：做笔记感觉不错，各种颜色很醒目。当然也比较贵</li></ul><blockquote><p>不得不说，文具这一块日本完全是霸主的地位，国内还需要好好努力。</p></blockquote><h1 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h1><p>​    这本书准确来说就是作者的经验之谈，作者在反复强调调用兴趣和简单记录来让自己坚持写读书笔记，并且一次次的“安利”读书笔记的妙用。我的有效读书手段是无时无刻把书摆到离自己最近的位置。让自己可以随时碰到，同时只要是休息时间就拿出来翻一翻，这样可以激起我的兴趣。书中关于重读这部分是个人需要改进的部分，因为我发现自己很少去回顾以前的内容，总是在需要的时候着急找，这样挺不好的，后续会制定个人的复习计划，”重读”自己以前的记录。</p><p>​    个人比较认同的部分是作者对于为什么要写读书笔记，讲到了<strong>人连昨天吃的饭都会忘记，不要指望人可以融入多少知识</strong>，写的非常真实，因为很多人甚至连刚刚想起的事情都会马上忘记。另外个人还比较认同作者的信息一元化的观念，我的观念也是信息一元化，个人不擅长整理，同时比较自由放荡（家里很乱就可以看出）。所以我的方式基本也是按照时间轴的顺序记录，这种记录方式对我的作用一方面是可以很快的查找，因为一个月一个月翻，总能翻到想要的内容。这种简单快速的方式，不仅让我只需要关注每一个月该干什么，同时可以关注到每一个月干了什么。比如这个月搬家找房子浪费了很多时间，产出少了，从月份记录中明显就可以看出。</p><p>​    最后说下我对有效读书的看法，所谓有效读书最基本的还是要调动兴趣，个人观念认为很多人其实不适合看书，更适合有人讲书中的内容给他听，至于为什么有的人读书想睡觉，其实这其中有一定的科学依据，以前翻资料的时候有过了解，但是后来忘了，总之就是对于由于大脑的思考释放的休息信号。这里其实简单想象一下为什么很多人喜欢看各种网文和小说，一方面生活的压力之下很难集中精神，上班拥挤的公交地铁上，网文正好既可以补充这段空档，所以很多人喜欢看网文，但是遇到需要大脑思考的内容，大脑会因为保护机制释放休息信号，从而造成催眠的效果。</p><p>​    总之，不管形式如何，有效读书的最终法则还是形成个人记录和感悟。如果想要知道我的读书观念和习惯，可以看看往期读书方法论的文章，希望对你有帮助：</p><blockquote><p>文章链接：</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTM2MjgzNC0xLTEuaHRtbA==" title="https://www.52pojie.cn/thread-1362834-1-1.html">读书方法论（一）<i class="fa fa-external-link"></i></span></p></blockquote><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>​    我的读书笔记比较自由，没有什么条条框框和格式，只要是记录本身就会让我很开心，虽然质量可能不如人意，哈哈，但是真心建议每一位读者好好思考下你的工作和人生经历留下了多少回忆，我个人喜欢用照片去回忆，喜欢每天记录自己的生活去回忆，可以看到过去那个“傻傻”的自己，后续打算看看小王子和时间管理方面的书籍，不知不觉21年过去4分之一，时间过得太快了，搬家之后，要多多读书和充实自己，今天的读书笔记分享就到这了。</p><blockquote><p>另外，这次搬家搬了20多本书，下决心买了一块大的墨水屏幕，Ireader smart2，为了防止有人说我安利，我这里直接截个图：</p><p>（不要问为什么要花1800大洋去买一个“电子垃圾”，买Ipad它不香么这种话。我只想说：谁用谁知道）</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/lADPBFDk-NZ-GifNBQDNA8A_960_1280.jpg" alt=""></p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      如何正确的对待读书笔记，如何有效读书
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://whitestore.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一次大数据文件处理日记</title>
    <link href="https://whitestore.top/2021/03/28/bigdatacompile/"/>
    <id>https://whitestore.top/2021/03/28/bigdatacompile/</id>
    <published>2021-03-28T07:02:44.000Z</published>
    <updated>2021-03-28T07:04:00.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一次大数据文件处理日记"><a href="#一次大数据文件处理日记" class="headerlink" title="一次大数据文件处理日记"></a>一次大数据文件处理日记</h1><h1 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h1><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvX0dTcS1VWG5EaGdHNmswcUhxTS02QQ==" title="https://mp.weixin.qq.com/s/_GSq-UXnDhgG6k0qHqM-6A">https://mp.weixin.qq.com/s/_GSq-UXnDhgG6k0qHqM-6A<i class="fa fa-external-link"></i></span></p><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>​    最近在做业务功能的时候，拿到一个非常”简单”的需求，把一个 <strong>30万行</strong>的数据文件按照特定的格式进行入库，文件格式和字段的内容都有对应的规定。这种需求其实还算比较常见，通常这一类需求不管系统配置多么强悍，都不可能无脑的读取插入。趁着这个需求搜集了一下几种常见的做法。下面就来介绍一下解决这种大数据文件的常用套路。</p><a id="more"></a><h1 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h1><ol><li>在JAVA中如何安全的将一份超大文件进行安全入库处理方式。</li><li>大文件读写可能产生的性能问题和瓶颈分析</li><li>关于分析大文件读写的常见套路<ol><li>使用单线程还是多线程</li><li>多线程的相关问题讨论</li></ol></li></ol><h1 id="文件内容分析"><a href="#文件内容分析" class="headerlink" title="文件内容分析"></a>文件内容分析</h1><p>​    由于实际的情况复杂多变，在做具体的编码之前，需要先梳理有可能存在的情况，下面简单列举系统有可能的存在的问题，和一些常见的注意事项：</p><ul><li>系统硬件水平，服务器是否会因为读写大量的数据文件占用大量资源<ul><li>内存问题：加载大数据最容易出的问题那就是爆内存，建议至少使用<strong>缓冲流</strong>进行读写</li><li>硬盘问题：读写的限制另一种体现就是硬盘的好坏，固态优于机械的读写.</li></ul></li><li>文件的读写方式，JAVA的IO比较复杂，这里简化为三种也就是常见的BIO、NIO、和AIO（具体代表含义请自行百度）。<ul><li>异步IO虽然看起来很美，但是需要考虑顺序入库的问题。</li><li>多线程异步读写比较考验机器性能，请谨慎使用。</li><li>顺序读写永远是硬盘最快捷的一种方式</li></ul></li><li>完成一次完整的操作时间估量，既然是大文件，就必然需要考虑整个操作的执行时间，一份几十万的数据跑一轮下来不管如何优化肯定需要不少的时间，所以操作的时间消耗需要考虑在可接受的范围</li><li>大数据文件读写的时间选择<ul><li>通常比较重和累的活都放大半夜去干</li><li>估量整个任务的执行时间消耗</li></ul></li></ul><p>这些分析只是一些最基本的要求，不同的业务场景会有更多的细节考量，文章不可能面面俱到，这些分析更多的是帮助个人提高警惕性，只有考虑到所有可能想到的细节，这样的大文件读写才可能是安全可靠的，同时可以保证突发情况可以及时的反应。</p><p>最后，这类开销比较大的操作，对于<strong>日志打印和记录</strong>的计算需要额外小心，最好在一次较大操作中记录操作成功失败记录数，同时在整个记录完成之后通过日志持久化整个操作的结果。</p><h1 id="大文件读写的常见套路"><a href="#大文件读写的常见套路" class="headerlink" title="大文件读写的常见套路"></a>大文件读写的常见套路</h1><p>​    其实这些套路网上多看看资料基本都可以有自己的一套方案，下面给出的建议可能不是最好的方式，有些可能在实际业务场景下走不通。（完全有可能）但是借着这些套路希望可以给读者一些启发，下面我们直接进入主题。</p><h2 id="分批入库"><a href="#分批入库" class="headerlink" title="分批入库"></a>分批入库</h2><p>​    分批入库是最容易想到的方式，也是最保险最稳妥的方式，这里包含了一个隐式的条件，就是数据都是<strong>增量不改动</strong>数据，大致意思就是不会改动的固定数据库数据。</p><p>​    现在我们来看下分批入库是如何处理的，分批的意思就是说每N条进行一次操作，防止数据库突然收到一个巨量的Insert请求导致锁表并且影响业务（弱一点的服务器直接满载），下面根据一段案例代码来说明做法：</p><blockquote><p>个人公司的电脑是一块SATA的固态硬盘，在开启批量操作之后，经常100%读写占用系统假死，所以如果要进行试验，建议先设置一个很小的值慢慢加量，否则你的电脑可能会卡的动不了。</p></blockquote><ul><li>首先需要编写一个批量插入的sql语句，网上对应案例的语句如下（如果是mybatis，需要使用<foreach>标签标记需要循环的对象内容）：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table ( &quot;clo1&quot;, &quot;col2&quot;, &quot;col3&quot;, &quot;col4&quot;, &quot;col5&quot; )</span><br><span class="line">VALUES</span><br><span class="line">( 1, 10, NULL, &#39;2019-12-19 13:38:35&#39;, &#39;新年活动16张卡券&#39;),</span><br><span class="line">( 2, 11, NULL, &#39;2019-12-19 15:05:13&#39;, &#39;圣诞活动11张卡券&#39;),</span><br><span class="line">( 3, 12, NULL, &#39;2019-12-19 15:05:13&#39;, &#39;圣诞活动12张卡券&#39;),</span><br><span class="line">( 4, 13, NULL, &#39;2019-12-19 15:05:13&#39;, &#39;圣诞活动13张卡券&#39;);</span><br></pre></td></tr></table></figure><ul><li>下面是分批操作的JAVA代码，大致逻辑是打开一个文件，然后将一行数据转为一个对象，同时塞入到一个集合当中，当集合的内容超过限制的时候，进行一次入库的操作。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">private void insert2DbByBatchList(Config config, String line) throws IOException &#123;</span><br><span class="line">        List&lt;VisaNewBinVo&gt; insertList &#x3D; new ArrayList&lt;&gt;(1000);</span><br><span class="line">        Map configValue &#x3D; readConfigValue();</span><br><span class="line">        while (StringUtils.isNotEmpty(line)) &#123;</span><br><span class="line">            Timestamp timestamp &#x3D; new Timestamp(System.currentTimeMillis());</span><br><span class="line">            VisaNewBin visaNewBin &#x3D; new VisaNewBin();</span><br><span class="line">            configValue.forEach((key, value) -&gt; &#123;</span><br><span class="line">                Map&lt;String, Object&gt; visaBinField &#x3D; (Map&lt;String, Object&gt;) value;</span><br><span class="line">                Integer endInex &#x3D; (Integer) visaBinField.get(&quot;endInex&quot;);</span><br><span class="line">                Integer startIndex &#x3D; (Integer) visaBinField.get(&quot;startIndex&quot;);</span><br><span class="line">                if (startIndex &lt; line.length() &amp;&amp; endInex &lt; line.length()) &#123;</span><br><span class="line">                    String substring &#x3D; line.substring(startIndex, endInex);</span><br><span class="line">                    FieldReflectionUtil.setFieldValueByFieldName(visaNewBin, key.toString(), substring);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            VisaNewBinVo visaNewBinVo &#x3D; new VisaNewBinVo();</span><br><span class="line">            BeanUtils.copyProperties(visaNewBin, visaNewBinVo);</span><br><span class="line">            visaNewBinVo.setBinId(UUID.randomUUID().toString());</span><br><span class="line">            visaNewBinVo.setBatchNo(getVisaNewCardBinDecAfterFileName(config));</span><br><span class="line">            visaNewBinVo.setCreateTime(timestamp);</span><br><span class="line">            insertList.add(visaNewBinVo);</span><br><span class="line">            &#x2F;&#x2F; 限制部分</span><br><span class="line">            if (rechLimitValue(insertList)) &#123;</span><br><span class="line">                int count &#x3D; visaNewBinMapper.batchInsertNewBins(insertList);</span><br><span class="line">                logger.info(&quot;当前批次数据为：&#123;&#125; 条，成功入库: &#123;&#125; 条数据&quot;, insertList.size(), count);</span><br><span class="line">                insertList.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#x2F;&#x2F; 存在纰漏，在最后一批不足的情况下，需要把剩下的数据入库</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean rechLimitValue(List insertList) &#123;</span><br><span class="line">        return insertList.size() % 500 &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：很多人可能会认为可以用<code>Thread.sleep(1000)</code>类似的线程休眠的方式让计算机“冷静”一下，给数据库一些缓冲时间，但是其实从大文件读写的角度来看，<strong>没有太大的意义</strong>，因为我们的文件读写要么需要开一条“河流”，要么就像新的方式直接开一条“矿道”（底层IO）。我们一旦打开流或者开通矿道就是在占用系统资源。用这种休眠的方式无非就是拉长了整个工作的时间，其实并没有太大的实际意义。</p><p>​    当然这种形式并不是完全没有任何作用，有些情况下比如之前个人曾经做过关于一个百度的分析接口存在<strong>QPS个位数限制</strong>的情况下，这种时候最简单的方法就是使用线程休眠来限制调用。</p><p>​    当然这种形式在编码里面比价丑陋，可以使用JDK的工具类<code>TimeUtil</code>来更加优雅的细粒度控制线程休眠时间控制。</p></blockquote><blockquote><p>这里有个八股文的面试题<code>Thread.sleep(0)</code>的含义。</p></blockquote><h3 id="分批入库存在的问题"><a href="#分批入库存在的问题" class="headerlink" title="分批入库存在的问题"></a>分批入库存在的问题</h3><p>​    分批入库虽然是最无脑的一种方式，但是这里其实是存在限制的，一般会存在下面这些问题：</p><ul><li>数据库对于preSql的占位符限制：<strong>比如postgreSql 的限制为Short类型的最大值</strong>，即<strong>32747</strong>，超过这个值就会抛出如下的异常：</li></ul><blockquote><p><strong>Tried to send an out-of-range integer as a 2-byte value</strong></p><p>github上面有人提过这个issue，里面还有一些老外的吐槽，挺有意思的，文章连接：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BnamRiYy9wZ2pkYmMvaXNzdWVzLzEzMTE=" title="https://github.com/pgjdbc/pgjdbc/issues/1311">https://github.com/pgjdbc/pgjdbc/issues/1311<i class="fa fa-external-link"></i></span> <code>如何解决&quot;尝试将超范围整数发送为 2 个按次值&quot;的错误#1311</code></p><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjc2MzkyMzkvcG9zdGdyZXNxbC1lcnJvci1pbnNlcnQtaGFzLW1vcmUtdGFyZ2V0LWNvbHVtbnMtdGhhbi1leHByZXNzaW9ucy13aGVuLWl0LWRvZXNu77yI6ZyA6KaB6Ieq5aSH5bel5YW377yJ" title="https://stackoverflow.com/questions/27639239/postgresql-error-insert-has-more-target-columns-than-expressions-when-it-doesn（需要自备工具）">https://stackoverflow.com/questions/27639239/postgresql-error-insert-has-more-target-columns-than-expressions-when-it-doesn（需要自备工具）<i class="fa fa-external-link"></i></span> <code>PostgreSQL ERROR: INSERT has more target columns than expressions, when it doesn&#39;t</code></p><p>如果想要绕开这个问题，可以自己手写一个实现类进行替换。还有一种办法就是减少占位符，增加批次然后减少每次批次的插入数据量。</p></blockquote><ul><li>硬件水平的限制：这里主要说的是硬盘上的限制，一块差点的硬盘即使是分批操作也会卡死，需要注意分批之后不是高枕无忧了</li></ul><blockquote><p>硬件问题不能完全作为无法解决问题的借口。</p></blockquote><ul><li>程序中断的影响：分批的方式比较常见的一个问题是处理入库过程中 <strong>程序异常</strong>，<strong>断电</strong>，<strong>系统故障（蓝屏）</strong>。</li></ul><blockquote><p>一种推荐的解决方式是数据库设置唯一校验字段，每次入库之前检查是否存在标记，可以使用redis进行辅助。（布隆过滤器）</p></blockquote><h2 id="多线程读写"><a href="#多线程读写" class="headerlink" title="多线程读写"></a>多线程读写</h2><p>多线程的处理方式也比较容易理解，既然一个人读写吃力，那就把文件“劈”成很多份，比如文件的第1条到1万条为线程1，第10001条到20000条为线程2， 依次类推，这种方式需要提前计算数据行的总量，然后开启线程将数据行分配给多个线程，由于个人处理的时候，被禁止使用多线程的处理方式，这里的代码为一些案例作用。</p><p>（建议PC端查看）</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwMTQ5Mzk1" title="https://www.zhihu.com/question/20149395">java读取大文件，采用多线程处理对提高效率可有帮助？<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zNzM4MjMxOS9hcnRpY2xlL2RldGFpbHMvMTA0NzIzNDIx" title="https://blog.csdn.net/github_37382319/article/details/104723421">使用多线程会加快文件读取速度吗？<i class="fa fa-external-link"></i></span></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>​    通过这次的小需求整理了一下大数据问题的处理经验，也算是对个人的一点提升。比较关键的是掌握多线程写入文件，需要考虑的内容还不少。不过网上的资料并不是特别多，还需要花更多的时间去研究。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      如何对于一个巨型文件进行分批处理
    
    </summary>
    
    
      <category term="日常" scheme="https://whitestore.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="实用" scheme="https://whitestore.top/tags/%E5%AE%9E%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何实现update select 语句</title>
    <link href="https://whitestore.top/2021/03/28/updateselect/"/>
    <id>https://whitestore.top/2021/03/28/updateselect/</id>
    <published>2021-03-28T07:01:30.000Z</published>
    <updated>2021-03-28T07:02:22.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何实现update-select-语句"><a href="#如何实现update-select-语句" class="headerlink" title="如何实现update select 语句"></a>如何实现update select 语句</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    有些时候我们会遇到如下情况，我们需要依赖一张表的查询结果来更新另一张表，比如我们存在一张主表和一张关联表，我们需要把关联表的部分字段数据同步到主表的里面。</p><p>​    这次的文章出现也是因为这样一个类似的需求，个人需要把一个<strong>30万行</strong>（后续会发文介绍常见的处理手段）的数据文件入库，同时需要将部分字段迁移到另一张表，两个表之间通过<strong>两个字段</strong>进行and匹配。下面画一下结构图：</p><p>​    <img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210315133417.png" alt=""></p><p>​    处理方式也比较简单，直接使用sql就可以完成，这篇文章针对这个小需求，总结一下update select 的几种实现方式。</p><a id="more"></a><h1 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h1><ol><li>实现update select 的几种常见方法<ol><li>join</li><li>merge</li><li>子查询</li></ol></li><li>merge的踩坑和问题</li></ol><h1 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h1><p>​    为了更好的进行实际操作，这里构建两张简单的表来模拟场景。直接复制下面的db即可，由于不同数据库sql不同，这里使用的是<strong>postgreSql</strong> 数据库。</p><h2 id="旧表"><a href="#旧表" class="headerlink" title="旧表"></a>旧表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"public"</span>.<span class="string">"olddb"</span> (</span><br><span class="line">  <span class="string">"id"</span> int4 <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">"relevance1"</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> <span class="string">"pg_catalog"</span>.<span class="string">"default"</span>,</span><br><span class="line">  <span class="string">"relevance2"</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> <span class="string">"pg_catalog"</span>.<span class="string">"default"</span>,</span><br><span class="line">  <span class="string">"new_field"</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> <span class="string">"pg_catalog"</span>.<span class="string">"default"</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">"olddb_pkey"</span> PRIMARY <span class="keyword">KEY</span> (<span class="string">"id"</span>)</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">"public"</span>.<span class="string">"olddb"</span> </span><br><span class="line">  OWNER <span class="keyword">TO</span> <span class="string">"postgres"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"public"</span>.<span class="string">"olddb"</span>.<span class="string">"id"</span> <span class="keyword">IS</span> <span class="string">'主键'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"public"</span>.<span class="string">"olddb"</span>.<span class="string">"relevance1"</span> <span class="keyword">IS</span> <span class="string">'关联字段1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"public"</span>.<span class="string">"olddb"</span>.<span class="string">"relevance2"</span> <span class="keyword">IS</span> <span class="string">'关联字段2'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"public"</span>.<span class="string">"olddb"</span>.<span class="string">"new_field"</span> <span class="keyword">IS</span> <span class="string">'新字段，需要由关联表同步'</span>;</span><br></pre></td></tr></table></figure><p>表成功创建之后，在内部加入一些简单的数据：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210315134419.png" alt=""></p><h2 id="新表"><a href="#新表" class="headerlink" title="新表"></a>新表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"public"</span>.<span class="string">"newdb"</span> (</span><br><span class="line">  <span class="string">"id"</span> int4 <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">"relevance1"</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> <span class="string">"pg_catalog"</span>.<span class="string">"default"</span>,</span><br><span class="line">  <span class="string">"relevance2"</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> <span class="string">"pg_catalog"</span>.<span class="string">"default"</span>,</span><br><span class="line">  <span class="string">"new_field"</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> <span class="string">"pg_catalog"</span>.<span class="string">"default"</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">"newdb_pkey"</span> PRIMARY <span class="keyword">KEY</span> (<span class="string">"id"</span>)</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">"public"</span>.<span class="string">"newdb"</span> </span><br><span class="line">  OWNER <span class="keyword">TO</span> <span class="string">"postgres"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"public"</span>.<span class="string">"newdb"</span>.<span class="string">"id"</span> <span class="keyword">IS</span> <span class="string">'主键'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"public"</span>.<span class="string">"newdb"</span>.<span class="string">"relevance1"</span> <span class="keyword">IS</span> <span class="string">'关联字段1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"public"</span>.<span class="string">"newdb"</span>.<span class="string">"relevance2"</span> <span class="keyword">IS</span> <span class="string">'关联字段2'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"public"</span>.<span class="string">"newdb"</span>.<span class="string">"new_field"</span> <span class="keyword">IS</span> <span class="string">'新字段，需要同步到旧表'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>提醒：注意数据库是<strong>postgresql</strong>，其他数据库可能存在字段等差别而无法成功 </p></blockquote><p>表成功创建之后，在内部加入一些简单的数据：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210315134505.png" alt=""></p><h1 id="实现方式汇总"><a href="#实现方式汇总" class="headerlink" title="实现方式汇总"></a>实现方式汇总</h1><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>​    第一种的连接方式使用的是连接表的<code>join</code>方法，我们通过关联字段查出对应的关联记录，同时在关联之后将关联新字段的数据更新到旧表，这样就实现了每关联一条记录就更新一条记录数据：</p><p>​    实现方式也比较简单，只需要使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UPDATE olddb aa</span><br><span class="line">SET new_field &#x3D; bb.new_field</span><br><span class="line">FROM</span><br><span class="line"> newdb bb where aa.relevance1 &#x3D; bb.relevance1 </span><br><span class="line">AND aa.relevance2 &#x3D; bb.relevance2</span><br></pre></td></tr></table></figure><p>他的执行结果如下：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210315143721.png" alt=""></p><blockquote><p>下面的下方是错的，这时候sql会抛出一个错误。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> olddb <span class="keyword">ALIAS</span> </span><br><span class="line"><span class="keyword">SET</span> ( new_field ) = (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">( bb.new_field ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">olddb aa</span><br><span class="line"><span class="keyword">JOIN</span> newdb bb <span class="keyword">ON</span> aa.relevance2 = bb.relevance2 </span><br><span class="line"><span class="keyword">AND</span> aa.relevance1 = bb.relevance1 </span><br><span class="line">)</span><br></pre></td></tr></table></figure></blockquote><h2 id="Merge（未验证）"><a href="#Merge（未验证）" class="headerlink" title="Merge（未验证）"></a>Merge（未验证）</h2><p>第二种方式可能比较陌生，因为<code>merge</code>算是对于insert以及update的一个统合，粗略了解了一下发现能干不少事情，下面说下。</p><p>注意下面的方法在postgresql <strong>报错</strong>，原因是是我的postgresql<strong>版本太低</strong>，但是个人在升级过后还不能支持使用merge方法 ，所以这里保存了sql，可以改动后尝试到其它的数据库语言进行使用。</p><blockquote><p>ERROR:  syntax error at or near “MERGE” </p><p>很头疼，在stackflow也没用找到答案。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">merge</span> <span class="keyword">into</span> olddb <span class="keyword">as</span> olds</span><br><span class="line"><span class="keyword">using</span> newdb news <span class="keyword">on</span> olds.new_field = news.new_field</span><br><span class="line"><span class="keyword">when</span> <span class="keyword">matched</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">set</span> </span><br><span class="line">olds.new_field = news.new_field</span><br></pre></td></tr></table></figure><p>需要注意的是不同的数据库对于merge的特性是不一致的，建议查看当前安装数据库的版本以及文档进行确认比较稳妥。</p><p>下面是 <strong>postgresql</strong> 的<code>merge</code>使用案例，注意一般建议版本为<code>11</code>以上再使用<code>merge</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MERGE INTO wines </span><br><span class="line">USING (VALUES(&#39;Chateau Lafite 2003&#39;, &#39;24&#39;)) v</span><br><span class="line">ON v.column1 &#x3D; w.winename</span><br><span class="line">WHEN NOT MATCHED </span><br><span class="line">  INSERT VALUES(v.column1, v.column2)</span><br><span class="line">WHEN MATCHED</span><br><span class="line">  UPDATE SET stock &#x3D; stock + v.column2;</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>​    子查询是最简单也是最容易想到的一种方式，不过子查询有一个明显的缺点就是数据量较大的情况下通常性能都比较差， 这种操作通常适合数据量比较小的情况，下面是对应的案例语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> olddb </span><br><span class="line"><span class="keyword">SET</span> new_field = ( <span class="keyword">SELECT</span> newdb.new_field <span class="keyword">FROM</span> newdb <span class="keyword">WHERE</span> olddb.relevance1 = newdb.relevance1 <span class="keyword">AND</span> olddb.relevance2 = newdb.relevance2 )</span><br></pre></td></tr></table></figure><p>下面是子查询需要注意的点：</p><ul><li>如果子查询无法找到任何匹配的行，则更新后的值将被更改为NULL</li><li>如果子查询找到多个匹配的行，update查询将返回一个错误。</li></ul><blockquote><p>错误的信息如下：</p><p><code>&gt; ERROR:  more than one row returned by a subquery used as an expression</code></p><p>(&gt;错误:作为表达式使用的子查询返回多行)</p></blockquote><ul><li>多数情况下子查询的性能较差，尽量避免使用</li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>​    由于merge个人使用经验不足，花了较多时间依然没有解决，所以文章标题进行了标记，后续使用了其他的方式避开问题。</p><p>​    update select的实现实际情况复杂多变，这里只列举了最简单的使用情况。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      一个数据库的使用经验技巧
    
    </summary>
    
    
      <category term="数据库" scheme="https://whitestore.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="实用" scheme="https://whitestore.top/tags/%E5%AE%9E%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Navicat如何复制数据库</title>
    <link href="https://whitestore.top/2021/03/28/navicatcopy/"/>
    <id>https://whitestore.top/2021/03/28/navicatcopy/</id>
    <published>2021-03-28T06:34:25.000Z</published>
    <updated>2021-03-28T07:01:11.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Navicat如何复制数据库"><a href="#Navicat如何复制数据库" class="headerlink" title="Navicat如何复制数据库"></a>Navicat如何复制数据库</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    这篇文章简单记录一下如何通过navicat备份一整个数据库留个记录，节省后面百度的时间。</p><p>​    注意，这里依照<code>postgres</code>数据库作为案例。</p><h2 id="第一步：备份数据库"><a href="#第一步：备份数据库" class="headerlink" title="第一步：备份数据库"></a>第一步：备份数据库</h2><p>​    首先我们选择任意想要复制的数据库，选择备份按钮。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210311155316.png" alt=""></p><p>​    接着，我们可以在常规里面进行基本的配置，，可以在对象选择里面进行基本的配置。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210311155453.png" alt=""></p><p>​    点击备份之后，我们可以看到信息日志，navicat正在为我们备份整改数据库的内容。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210311155534.png" alt=""></p><p>​    备份完成之后，在备份的列表里面，可以看到生成对应的日期时间戳生成的对应db文件。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210311155721.png" alt=""></p><p>​    <strong>关键的地方来了，到了这一步，说明整个库的数据和结构我们都备份好了，现在我们需要将其提取到sql里面，用做新的数据库导入</strong>。右击需要导出sql文件的备份，点击<code>提取SQL</code>。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210311161408.png" alt=""></p><p>​    接着我们选择<code>提取sql</code>，然后指定一个目录的位置，确定之后，navicat就开始将整个备份导出到sql。同样耐心等待信息日志。</p><blockquote><p>这个过程可能会很长，请耐心等待</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210311161528.png" alt=""></p><h2 id="第二步：新建需要复制的数据"><a href="#第二步：新建需要复制的数据" class="headerlink" title="第二步：新建需要复制的数据"></a>第二步：新建需要复制的数据</h2><p>​    这个操作应该简单的不能再简单了，就是新建一个新的数据库。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210311155906.png" alt=""></p><h2 id="第三步：导入备份数据库"><a href="#第三步：导入备份数据库" class="headerlink" title="第三步：导入备份数据库"></a>第三步：导入备份数据库</h2><p>​    这一步也是非常简单的，右击选择数据库，，选择<code>运行sql文件</code>，找到刚刚提取出来的sql文件导入，然后耐心等待即可。</p><blockquote><p>这个过程比较长，数据库大的话几分钟，甚至小时都是有可能的，这时候可以去干干别的事情，<strong>进度条不动不一定是死机了，可能是数据过大没有加载进度条</strong></p></blockquote><p>​    <img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210311161722.png" alt=""></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>​    这次简单记录的一下如何快速的复制一个数据库，当然更快的方式是使用<code>pq_dump</code>(针对不同数据库有不同的备份命令)。速度要比navicat 快上好几倍。但是通常情况下我们连接数据库的服务器或者客户端都不在本地，这种方式备份和复制整个库是十分方便的。</p><p>​    同时养成良好的备份习惯有助于严重失误的时候进行回溯。</p><p>​    </p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      Navicat如何复制数据库一次实战笔记
    
    </summary>
    
    
      <category term="数据库" scheme="https://whitestore.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="实用" scheme="https://whitestore.top/tags/%E5%AE%9E%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>《洛丽塔》读书笔记</title>
    <link href="https://whitestore.top/2021/03/07/luolita/"/>
    <id>https://whitestore.top/2021/03/07/luolita/</id>
    <published>2021-03-07T09:04:28.000Z</published>
    <updated>2021-03-07T11:27:44.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《洛丽塔》读书笔记"><a href="#《洛丽塔》读书笔记" class="headerlink" title="《洛丽塔》读书笔记"></a>《洛丽塔》读书笔记</h1><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>​    首先说明一下，个人看的版本是主万翻译的版本，这本书我只<strong>看了一半</strong>之后实在看不下去了（原因下文会进行说明），就跑去看了97版本的电影，62版本的黑白电影也看了一部分片段，这本书是之前看B站某UP主直播从弹幕看到有人强烈推荐这本书，本着好奇去搜了一下，没想要作者是个王者，惭愧。这次的读书笔记注定只是片段。</p><a id="more"></a><h1 id="文章目的"><a href="#文章目的" class="headerlink" title="文章目的"></a>文章目的</h1><p>​    简略的介绍一下个人的读书笔记感受。</p><p>​    留坑，后续看其他翻译版本进行补完。</p><h1 id="推荐指数："><a href="#推荐指数：" class="headerlink" title="推荐指数："></a>推荐指数：</h1><p>​    不做评价，个人不会推荐一本自己都没有看完的书。</p><p>​    但是主观上还是不建议看到评论就单纯的当一本那方面的书去看的。</p><p>​    推荐看看电影，注意是<strong>97版本</strong>的，拍的很不错，基本把这本书所要表达的含义表达出来了。</p><h1 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h1><p>​    这本书牵扯的话题比较敏感，算是一本禁书，里面更多的细节个人也不做过多的介绍，仅仅表达下我对这本书的一本看法。</p><h2 id="从翻译的角度来说"><a href="#从翻译的角度来说" class="headerlink" title="从翻译的角度来说"></a>从翻译的角度来说</h2><p>​    从翻译本身来看，主万这个版本在我看来翻译的不太行，很多句子读不通，网上网友对比一下各种翻译版本资料差距发现还是挺大的，看了一部分英文原版简单几句就可以看出文学的功底不一般，所以有兴趣的读者建议去看下英文原版。</p><h2 id="男女主角的看法"><a href="#男女主角的看法" class="headerlink" title="男女主角的看法"></a>男女主角的看法</h2><p>​    说实话我很不擅长记忆外国人的人名，包括日本四个字的人名我有时候记两个字都记不住=-=，但是对于整个剧情的记忆却比较擅长。</p><p>​    关于这本书的男主亨伯特，实体书背后的一段文字可以看到亨伯特算是有精神相关的疾病的（书中也有描述住了一段时间精神病院），亨伯特因为初恋因病去世导致对于女性的追求停留在一个很特殊的年纪，所以整本书他对洛丽塔所有的爱都是不正常的，拥有洛丽塔的爱对于亨伯特来说就是毕生的梦想，但是在道德的层面让男主不断的进行抉择，而得到洛丽塔之后失去洛丽塔的亨伯特也注定悲惨的命运。</p><p>​    再来说下女主，女主洛丽塔是在最特殊的年纪遇到了最不该遇见的人，因为家庭的关系缺少父爱，导致在青春期没有受到很好的教育和引导，对于男主的各种诱惑是在完全不自觉的情况下进行的，如果洛丽塔没有遇到亨伯特，并且母亲也能进行很好的教导，相信洛丽塔会有完全不同的人生。</p><p>​    整本书是一个彻头彻尾的悲剧，但是我认为悲剧并不能完全算是男主一手造成的，从电影可以看到，影片中有一段学校校长和主任找男主说洛丽塔比同龄人早熟，并且希望男主注意性这一方面教育让我有比较深的印象，其实对于性教育这一块国外一直都比较开放，但是学校注意到却不加引导，完全推给亨伯特，然而亨伯特是最不该干涉的那一个人，可以看出洛丽塔的悲剧也有社会环境的一面。</p><h2 id="作者以及这本书"><a href="#作者以及这本书" class="headerlink" title="作者以及这本书"></a>作者以及这本书</h2><p>​    作者的经历和亨伯特有相似之处，作者在美国经历了美国的从盛转衰，或许洛丽塔后来变为“枯叶”，但是亨伯特只要看上一眼就会觉得无比的幸福，感觉温馨而美好，</p><p>​    这种情感不是不能理解，或许这就是回忆吧，不管他在现实如何的扭曲或者痛苦，人总是会对这一段回忆不断的怀念。</p><h2 id="整本书的感受"><a href="#整本书的感受" class="headerlink" title="整本书的感受"></a>整本书的感受</h2><p>​    说实话这本书看了一部分还是比较<strong>后悔</strong>的，看完电影的想法更是如此，翻译让我对这本书的印象大打折扣，这本书的翻译总是让我想起《JAVA编程思想》的那种翻译，本来一本不算薄的书带上渣翻译对于作品本身的品质就是一种大打折扣，还是建议有想法看这本书的不要选 <strong>主万</strong>翻译的版本，不然看书会很痛苦（确实很痛苦）。书中的有些句子真的很美，可以看到文学的集大成作品，虽然作品存在很多的辞藻堆砌，但是看完不会觉得是废话，这是需要很深的文学功底的。</p><p>​    这本书是富含浪漫主义和现实批判的一本书，这本书承载的内容要比文字本身要重很多，或许每一个人的心理都有一个洛丽塔，不管如何改变，只要看上一眼心中就会无比的温暖。</p><p>​    </p><h1 id="精句摘录"><a href="#精句摘录" class="headerlink" title="精句摘录"></a>精句摘录</h1><ul><li><strong>人生多奇怪啊，我们不断摆脱我们所追求的命运</strong></li><li><code>Lotila, light of my life, fire of my lions. My sin, my soul. Lo-lee-ta: the tip of hte tongue taking a trip of three steps down the palate to tap, at three, on the teeth. Lo. Lee. Ta.</code></li><li><strong>人有三样东西是无法隐瞒的，咳嗽、穷困和爱；你想隐瞒越欲盖弥彰。人有三样东西是不该挥霍的，身体、金钱和爱；你想挥霍却得不偿失。人有三样东西是无法挽留的，时间、生命和爱；你想挽留却渐行渐远。人有三样东西是不该回忆的，灾难、死亡和爱；你想回忆却苦不堪言。</strong> ——《洛丽塔》</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​    本着对书的尊重，我还是打算去网上找找其他的译本坚持读完，或许会有不同的感受（看到网友推荐于晓丹版本），这本书算是告一段落了，个人的这次读书笔记也算是一个警告，买外国翻译书之前先去评论看下翻译质量，否则不但影响阅读体验，还容易导致错误的认知。</p><p>​    现在看来，想要读一本好书确实不容易！</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      洛丽塔和读书笔记
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈设计模式 - 模板方法（十）</title>
    <link href="https://whitestore.top/2021/03/07/templatemethod/"/>
    <id>https://whitestore.top/2021/03/07/templatemethod/</id>
    <published>2021-03-07T09:04:19.000Z</published>
    <updated>2021-03-07T11:26:35.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈设计模式-模板方法（十）"><a href="#浅谈设计模式-模板方法（十）" class="headerlink" title="浅谈设计模式 - 模板方法（十）"></a>浅谈设计模式 - 模板方法（十）</h1><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>​    模板方法模式在JAVA当中最为熟知的就是<code>spring</code>的<code>template</code>对象，模板方法和策略这两个模式需要小心的区分，关于模板方法模式只需要重点记忆一句话：<strong>模板方法的模式定义了算法的骨架</strong>。同时针对模板方法的的一项设计原则<strong>好莱坞原则</strong>也是对 <strong>依赖倒转</strong>原则一种很好的补充和扩展。</p><a id="more"></a><h1 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h1><ol><li>了解模板方法，同时了解模板方法是如何体现好莱坞原则的。</li><li>模板方法与策略模式的对比，以及模板方法灵活运用钩子函数。</li><li>模板方法的简单案例，以及在spring框架当中的具体体现。</li></ol><h1 id="什么是模板方法"><a href="#什么是模板方法" class="headerlink" title="什么是模板方法"></a>什么是模板方法</h1><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><p>定义：在一个方法当中定义了算法的骨架，而将具体的实现延迟到子类当中。模板方法在不改变算法结构的情况下，重构算法的某些步骤。</p><h2 id="从现实看模板方法"><a href="#从现实看模板方法" class="headerlink" title="从现实看模板方法"></a>从现实看模板方法</h2><p>​    我们都知道现代各式各样的蛋糕都是使用模具做成的，而同一个形状的蛋糕却可以使用不同的配料，此时模具便是模板方法的骨架，通过定义具体的配料细节对应了“算法”的细节。</p><h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><p>​    钩子函数是一种编程上比较常用的技巧，在框架设计当中十分常见，什么是钩子呢？从个人的理解来看，钩子像是可以延迟定义的匿名函数，钩子可以“勾”住某个算法的中间过程，让外部环境可以干涉内部算法实现的同时，又能让内部的函数进行自由控制钩子的使用。</p><p>​    钩子函数一般实现方式为抽象类或者不做任何动作的函数。</p><p>​    钩子函数在脚本语言里面经常被用作回调函数。包括java的许多框架也用钩子让用户可以干涉一些算法的细节。但是需要注意的是，钩子这个东西很容易破坏代码的可阅读性，所以不建议经常使用这种函数，可以用组合以及其他的设计模式对于结构进行优化。</p><h2 id="模板方法的结构图"><a href="#模板方法的结构图" class="headerlink" title="模板方法的结构图"></a>模板方法的结构图</h2><p>​    下面是模板方法的结构图，模板方法对比其他设计模式应该算是最简单的一个结构图了，比较容易理解：</p><p>​    模板方法的模式定义了算法的骨架，那么什么是定义算法的骨架，从下面的图表很好的看到，父类定义为抽象类，定义模板的算法方法和抽象的算法细节。</p><p>这里要实现算法需要由子类实现具体的算法业务</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210305225616.png" alt="模板方法结构图"></p><h2 id="模板方法的优缺点"><a href="#模板方法的优缺点" class="headerlink" title="模板方法的优缺点"></a>模板方法的优缺点</h2><p>优点：</p><ul><li>模板方法可以让算法的细节掩盖在子类，同时抽取公共的算法，提高代码复用程度</li><li>模板方法可以让修改控制在子类，而父类方法不需要进行改动，符合开放关闭原则。</li></ul><p>缺点：</p><ul><li>模板方法类的改动对于所有的算法实现子类都会产生影响，同时模板父类改动违背“开放-关闭”原则</li><li>模板方法由于利用钩子控制父类方法，会导致反向控制代码，对于代码的阅读不是十分友好。</li></ul><h2 id="模板方法与好莱坞原则"><a href="#模板方法与好莱坞原则" class="headerlink" title="模板方法与好莱坞原则"></a>模板方法与好莱坞原则</h2><p>什么是好莱坞原则？</p><pre><code>首先需要了解一下什么是好莱坞原则：**让我们调用你们，而不是让你们调用我**。</code></pre><p>和依赖倒转原则有什么关联？</p><p>​    好莱坞原则更像是对于依赖倒转的一种扩展技巧。依赖倒转更加关注的是如何在设计中避免面向实现编程，而好莱坞则是将实现的调用在低层的结构进行隐藏。</p><p>为什么不建议低层组件调用高层组件？</p><p>​    为了防止环形依赖，在高层组件里面调用了抽象方法，而抽象方法又调用高层组件的方法。</p><h2 id="策略模式和模板方法对比"><a href="#策略模式和模板方法对比" class="headerlink" title="策略模式和模板方法对比"></a>策略模式和模板方法对比</h2><p>策略模式和模板方法模式的对比</p><ol><li>策略是定义一整个算法，使用组合的形式实现不同的对象切换</li><li>模板方法的是定义一个超类，在超类中通过高层调用底层实现的具体方法的实现，来实现方法的延迟功能</li></ol><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>​    这次的案例以个人小时候做过的一件事情举例，以前外婆兼职从厂里拿来一堆玩具零件的成品，而工作就是把成品进行“反转”（就是把做好的玩具翻面），还非常清楚的记得大概是一分钱一个，靠着帮忙那时候还拿了一些零花钱，每天放学做完作业之后就是帮外婆做“兼职”。这种重复性劳动，在代码的构建很容易想到模板方法的模式，由于各种玩具的形状不同，所以翻面的方式以及效率和速度都不同，我们将重复劳动的部分定义为顶层的模板，而具体的玩具构建细节，需要根据不同的玩具进行不同的操作，下面定义这个工作的大致流程：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210307112758.png" alt="玩具构建流程图"></p><p>下面是根据结构图绘制一个基本的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 玩具制造模板类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateWorkFlow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productToy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        takeToy();</span><br><span class="line">        reverseToy();</span><br><span class="line">        putBasket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putBasket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把玩具放到玩具篮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeToy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拿起玩具"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">reverseToy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AntlersToyWorkFlow</span> <span class="keyword">extends</span> <span class="title">TemplateWorkFlow</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseToy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把主干翻面"</span>);</span><br><span class="line">        System.out.println(<span class="string">"把鹿角的分叉翻页"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChristmasHatWorkFlow</span> <span class="keyword">extends</span> <span class="title">TemplateWorkFlow</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseToy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"圣诞帽反转"</span>);</span><br><span class="line">        System.out.println(<span class="string">"圣诞帽帽子顶部的小秋顶出去"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TemplateWorkFlow templateWorkFlow = <span class="keyword">new</span> ChristmasHatWorkFlow();</span><br><span class="line">        TemplateWorkFlow templateWorkFlow1 = <span class="keyword">new</span> AntlersToyWorkFlow();</span><br><span class="line">        templateWorkFlow.productToy();</span><br><span class="line">        templateWorkFlow1.productToy();</span><br><span class="line">    &#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment">    拿起玩具</span></span><br><span class="line"><span class="comment">    圣诞帽反转</span></span><br><span class="line"><span class="comment">    圣诞帽帽子顶部的小秋顶出去</span></span><br><span class="line"><span class="comment">    把玩具放到玩具篮</span></span><br><span class="line"><span class="comment">    拿起玩具</span></span><br><span class="line"><span class="comment">    把主干翻面</span></span><br><span class="line"><span class="comment">    把鹿角的分叉翻页</span></span><br><span class="line"><span class="comment">    把玩具放到玩具篮</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用设计模式，他大致的设计代码如下，可以看到很多方法都干了相似的事情，这些方法可能本质上只是一两行代码甚至只是取名不一样，当然现代的编译器都很“聪明”，会发现重复的点，所以最最基本的要求，是编写出编译器都无法发现的重复代码，当然仅仅凭借这一点显然要求有点低</p><p>​    下面看下不使用模板方法的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChristmasHatWorkFlow</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productToy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        takeToy();</span><br><span class="line">        reverseToy();</span><br><span class="line">        putBasket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putBasket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把玩具放到玩具篮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeToy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拿起玩具"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseToy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"圣诞帽反转"</span>);</span><br><span class="line">        System.out.println(<span class="string">"圣诞帽帽子顶部的小秋顶出去"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AntlersToyWorkFlow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productToy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        takeToy();</span><br><span class="line">        reverseToy();</span><br><span class="line">        putBasket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putBasket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把玩具放到玩具篮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeToy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拿起玩具"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseToy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"把主干翻面"</span>);</span><br><span class="line">        System.out.println(<span class="string">"把鹿角的分叉翻页"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AntlersToyWorkFlow antlersToyWorkFlow = <span class="keyword">new</span> AntlersToyWorkFlow();</span><br><span class="line">        antlersToyWorkFlow.productToy();</span><br><span class="line">        ChristmasHatWorkFlow christmasHatWorkFlow = <span class="keyword">new</span> ChristmasHatWorkFlow();</span><br><span class="line">        christmasHatWorkFlow.productToy();</span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment">    拿起玩具</span></span><br><span class="line"><span class="comment">    把主干翻面</span></span><br><span class="line"><span class="comment">    把鹿角的分叉翻页</span></span><br><span class="line"><span class="comment">    把玩具放到玩具篮</span></span><br><span class="line"><span class="comment">    拿起玩具</span></span><br><span class="line"><span class="comment">    圣诞帽反转</span></span><br><span class="line"><span class="comment">    圣诞帽帽子顶部的小秋顶出去</span></span><br><span class="line"><span class="comment">    把玩具放到玩具篮</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring当中的模板方法"><a href="#spring当中的模板方法" class="headerlink" title="spring当中的模板方法"></a>spring当中的模板方法</h2><p>spring最为典型的案例便是<code>Tempalte</code>框架，但是需要注意spring多数情况下并没有使用经典的模板方法结构，而是使用了<code>CallBack函数</code>的形式，避开了继承结构的同时，每个类可以单独实现自己的具体功能：</p><p>我们看一下<code>RedisTempalte</code>当中的<code>StringRedisTemplate</code>，这里调用父类的<code>afterPropertiesSet()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRedisTemplate</span> <span class="keyword">extends</span> <span class="title">RedisTemplate</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Constructs a new &lt;code&gt;StringRedisTemplate&lt;/code&gt; instance ready to be used.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> connectionFactory connection factory for creating new connections</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">StringRedisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>();</span><br><span class="line">      setConnectionFactory(connectionFactory);</span><br><span class="line">      afterPropertiesSet();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> RedisConnection <span class="title">preProcessConnection</span><span class="params">(RedisConnection connection, <span class="keyword">boolean</span> existingConnection)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DefaultStringRedisConnection(connection);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父类同样继承的手段，在如下方法当中调用了<code>afterProperteisSet()</code>，通过super引用父类的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">   <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">boolean</span> defaultUsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (defaultSerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">      defaultSerializer = <span class="keyword">new</span> JdkSerializationRedisSerializer(</span><br><span class="line">            classLoader != <span class="keyword">null</span> ? classLoader : <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (enableDefaultSerializer) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (keySerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">         keySerializer = defaultSerializer;</span><br><span class="line">         defaultUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (valueSerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">         valueSerializer = defaultSerializer;</span><br><span class="line">         defaultUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (hashKeySerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">         hashKeySerializer = defaultSerializer;</span><br><span class="line">         defaultUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (hashValueSerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">         hashValueSerializer = defaultSerializer;</span><br><span class="line">         defaultUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (enableDefaultSerializer &amp;&amp; defaultUsed) &#123;</span><br><span class="line">      Assert.notNull(defaultSerializer, <span class="string">"default serializer null and not all serializers initialized"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (scriptExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.scriptExecutor = <span class="keyword">new</span> DefaultScriptExecutor&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   initialized = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面引用父类<code>RedisAccesor</code>类当中的<code>afterPropertiesSet()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Assert.state(getConnectionFactory() != <span class="keyword">null</span>, <span class="string">"RedisConnectionFactory is required"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过定义<code>getConnectionFactory()</code>方法，子类可以自由的配置连接工厂，也可以直接沿用父类的默认实现。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​    模板方法是一个比较重要的设计模式，他可以从结构上帮助程序员构建一个良好的抽象概念，同时模板方法提供的钩子函数，通过定义抽象方法延迟到子类实现这一技巧非常符合“开放-关闭”原则，灵活运用模板方法模式有利于构建更加灵活的软件骨架，同时可以定义各种多变的算法体系。但是需要注意的是传统的模板方法这种继承的结构 <strong>并不推崇</strong>，因为我们都知道继承对于所有子类都会产生影响。</p><p>​    另外模板方法这个模式对于阅读代码的体验不是很好，经常需要各个类之间不断切换，有时候甚至会莫名其妙为什么突然跑到另一个方法里面，模板方法有时候比较影响阅读体验。</p><p>​    另外设计模式最大的目的就是 <strong>减少重复代码</strong> 以及 <strong>用最小的代价进行扩展</strong>，个人认为如果代码符合这两个点基本就是一个好代码，然而这个点确实日常工作最难实现的。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      模板方法提取公共方法，并且延迟算法到子类实现
    
    </summary>
    
    
      <category term="设计模式" scheme="https://whitestore.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://whitestore.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈设计模式 - 外观模式（九）</title>
    <link href="https://whitestore.top/2021/03/07/outward/"/>
    <id>https://whitestore.top/2021/03/07/outward/</id>
    <published>2021-03-07T09:04:08.000Z</published>
    <updated>2021-03-07T11:25:06.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈设计模式-外观模式（九）"><a href="#浅谈设计模式-外观模式（九）" class="headerlink" title="浅谈设计模式 - 外观模式（九）"></a>浅谈设计模式 - 外观模式（九）</h1><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>外观模式可以说是最容易理解，也是最容易掌握的一个设计模式了，概念比较简单，主要作用是将一堆复杂的接口和功能进行简化设计，让接口的功能更加简单，从另一个角度来看，外观是对原有的旧系统提供了一个门户，当其他所有的系统接入旧系统的时候，不需要纠结旧接口的功能实现，而只要关心和外观对象打交道，而外观模式很好的将两个系统之间构建沟通的桥梁。</p><a id="more"></a><h1 id="文章目的"><a href="#文章目的" class="headerlink" title="文章目的"></a>文章目的</h1><ol><li>了解什么是外观模式</li><li>外观模式和迪米特法则</li><li>外观模式的一些实际应用场景</li></ol><h1 id="什么是外观模式？"><a href="#什么是外观模式？" class="headerlink" title="什么是外观模式？"></a>什么是外观模式？</h1><p>定义：定义一个统一的接口，访问子系统当中的一群接口，外部定义高层接口简化接口的调用，对于复杂系统的功能只提供最少的接口对外调用，隐藏大量实现类的实现细节。外观模式更像是构建一个统一门户，让子系统复杂错综的方法进行整合，当一个系统依赖许多子系统的方法的时候，外观模式将会派上用处。</p><p>外观是一种<strong>结构型模式</strong>，他让子系统和外部系统之间建立一层门户接口。</p><h2 id="外观模式结构图"><a href="#外观模式结构图" class="headerlink" title="外观模式结构图"></a>外观模式结构图</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210303223258.png" alt=""></p><h2 id="生活当中的模式理解："><a href="#生活当中的模式理解：" class="headerlink" title="生活当中的模式理解："></a>生活当中的模式理解：</h2><p>如果用生活的案例比喻的话，我们最为常见的网上购物便是一个很好的例子，我们在网络上进行网上购物的时候，通常是由购物平台与我们交互，当我们下订单并且要求商家发货之后，商家会联系仓库打包，银行扣款，送货员配送，物流运输…..这中间的所有步骤都与客户无关，客户需要关心什么时候会配送，以及需要支付多少钱即可。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210303230136.png" alt="购物平台案例"></p><blockquote><p>从上面这个案例也可以看到，对于客户来说，最关心的门面这一块，如果购物平台崩溃，那么就直接无法交互，但是对于门面这一边来说，事情就比较复杂了，可以看到任何一个环节出错都有可能造成无法满足客户的要求，门面几乎是与所有的子系统连在了一起**。</p></blockquote><h2 id="外观模式的优缺点："><a href="#外观模式的优缺点：" class="headerlink" title="外观模式的优缺点："></a>外观模式的优缺点：</h2><p>优点：</p><ol><li>让接口方法更加简单，将子系统与外界交互的任务进行聚合</li><li>统一子系统，提供门户并且整合子系统的方法</li></ol><p>缺点：</p><ol><li>子系统的任意改动加直接影响外观接口的行为，同时外观的接口方法变动也可能出现意想不到的情况</li><li>外观类的接口修改对于程序的影响较大，同时不符合“开放-关闭”的原则</li></ol><h2 id="外观模式的特点："><a href="#外观模式的特点：" class="headerlink" title="外观模式的特点："></a>外观模式的特点：</h2><ul><li>外观模式通常只需要一个 <strong>单例</strong>的类就足够了，因为在遵从迪米特</li><li>外观更像是与所有子系统绑定的顶层系统</li></ul><h2 id="外观模式和适配器模式的关系"><a href="#外观模式和适配器模式的关系" class="headerlink" title="外观模式和适配器模式的关系"></a>外观模式和适配器模式的关系</h2><pre><code>外观模式和适配器模式有点儿像，但是实际上两者侧重点是完全不一样的，**外观的意图是包装接口，而适配器的意图是转换大量的接口**</code></pre><h2 id="外观模式和迪米特原则"><a href="#外观模式和迪米特原则" class="headerlink" title="外观模式和迪米特原则"></a>外观模式和迪米特原则</h2><h3 id="什么是迪米特原则？"><a href="#什么是迪米特原则？" class="headerlink" title="什么是迪米特原则？"></a>什么是迪米特原则？</h3><p>一个类应该只知道最少的事情。意味着接口的职责应该越简单越好。</p><h3 id="外观模式是对迪米特法则最好应用"><a href="#外观模式是对迪米特法则最好应用" class="headerlink" title="外观模式是对迪米特法则最好应用"></a>外观模式是对迪米特法则最好应用</h3><p>由于外观模式将子系统当中大量复杂的类和方法进行整合，将所有的子系统功能结合到了自己的门面当中对外使用。所以外观模式是最能体现迪米特法则的一种设计模式。</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="外观模式另一种使用方式："><a href="#外观模式另一种使用方式：" class="headerlink" title="外观模式另一种使用方式："></a>外观模式另一种使用方式：</h2><pre><code>下面的内容来自《How tomcat work》这本书的一个章节，我们忽略关于`HttpRequest`和`HttpResponse`以及处理http请求的所有细节部分。来看看外观模式的一种巧妙的用法这次的案例比较特殊，我们直接从servlet开始。（一）我们先从servlet入手，我们先来看一下`servlet`这个接口的定义，我们重点关注`service`这个方法：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重点关注</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>（二）接着我们依照上面这个接口方法的要求，动手实现一个我们自己的`HttpRequest`和`HttpResponse`，对于下面的两个类，我们不需要关注细节，只需要大概看一眼一些方法和实现。</code></pre><p>HttpRequest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpRequest</span> <span class="keyword">implements</span> <span class="title">ServletRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓冲区的大小为 1M</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_COUNT = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> InputStream inputStream;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpRequest</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.inputStream = inputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析inputstream 对于内容进行解析</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 字符串缓冲池</span></span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(BUFFER_COUNT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] byteBuffer = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_COUNT];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (inputStream == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"未找到套接字"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取数据到byte数组</span></span><br><span class="line">            read = inputStream.read(byteBuffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读取byte数组的数据进入到stringbuffer</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; read; i++) &#123;</span><br><span class="line">            stringBuffer.append((<span class="keyword">char</span>)byteBuffer[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印stringbuffer</span></span><br><span class="line">        System.err.println(stringBuffer.toString());</span><br><span class="line">        <span class="comment">// 获取uri</span></span><br><span class="line">        uri = parseUri(stringBuffer.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析请求，获取请求Uri</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestString 需要处理的uri</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parseUri</span><span class="params">(String requestString)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 建立index1 和 2</span></span><br><span class="line">        <span class="keyword">int</span> index1, index2;</span><br><span class="line">        <span class="comment">// 获取到第一个空行</span></span><br><span class="line">        index1 = requestString.indexOf(<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">if</span>(index1 != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 从index1 开始找</span></span><br><span class="line">            index2 = requestString.indexOf(<span class="string">' '</span>, index1 + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(index2 &gt; index1)&#123;</span><br><span class="line">                <span class="comment">// 获取请求路径</span></span><br><span class="line">                <span class="keyword">return</span> requestString.substring(index1 + <span class="number">1</span>, index2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处省略大量覆写方法</span></span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpResponse.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpResponse</span> <span class="keyword">implements</span> <span class="title">ServletResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组合httprequest</span></span><br><span class="line"><span class="comment">     * 根据request返回对应到信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> HttpRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> OutputStream outputStream;</span><br><span class="line"></span><br><span class="line">    PrintWriter writer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓冲区大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_COUNT = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpResponse</span><span class="params">(OutputStream outputStream)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.outputStream = outputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResource</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String errMsg = <span class="string">"404 msg"</span>;</span><br><span class="line">        <span class="comment">// 字节缓存区</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_COUNT];</span><br><span class="line">        <span class="comment">// 读取静态资源</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(Constants.WEBROOT, request.getUri());</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="comment">// 文件流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">                <span class="comment">// 读取字节</span></span><br><span class="line">                <span class="keyword">int</span> ch = fileInputStream.read(bytes, <span class="number">0</span>, BUFFER_COUNT);</span><br><span class="line">                <span class="comment">// 输出</span></span><br><span class="line">                <span class="keyword">while</span> (ch != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 写入流</span></span><br><span class="line">                    outputStream.write(bytes, <span class="number">0</span>, ch);</span><br><span class="line">                    <span class="comment">// 重复读取数据到缓冲区</span></span><br><span class="line">                    ch = fileInputStream.read(bytes, <span class="number">0</span>, BUFFER_COUNT);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.err.println(e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.write(errMsg.getBytes());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 此处省略大量覆写方法</span></span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>（三）我们定义了请求request和响应respnse之后，构建一个servlet处理器，来统一处理客户端发送过来的http请求，所以我们需要一个`ServletProcessor`处理器类：</code></pre><p>可以看到，下面的<code>servlet.service(requestFace, responseFace);</code>当中，使用的不是上面定义的<code>HttpRequest</code>和<code>HttpResponse</code>，而是使用了两个<code>RequestFace</code>和<code>ResponseFace</code>，这是为什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletProcess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(HttpRequest request, HttpResponse response)</span> </span>&#123;</span><br><span class="line">        String uri = request.getUri();</span><br><span class="line">        String serveletName = uri.substring(uri.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 创建Url加载器</span></span><br><span class="line">        URL[] urls = <span class="keyword">new</span> URL[<span class="number">1</span>];</span><br><span class="line">        File classPath = <span class="keyword">new</span> File(Constants.WEBROOT);</span><br><span class="line">        URLClassLoader loader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URLStreamHandler streamHandler = <span class="keyword">null</span>;</span><br><span class="line">            String repository = (<span class="keyword">new</span> URL(<span class="string">"file"</span>, <span class="keyword">null</span>, classPath.getCanonicalPath() + File.separator)).toString();</span><br><span class="line">            urls[<span class="number">0</span>] = <span class="keyword">new</span> URL(<span class="keyword">null</span>, repository, streamHandler);</span><br><span class="line">            loader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        Class myclass = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            myclass = loader.loadClass(serveletName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.err.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Servlet servlet = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//===== 下面的部分是重点 =====</span></span><br><span class="line">        <span class="comment">//使用face 封装</span></span><br><span class="line">        RequestFace requestFace = <span class="keyword">new</span> RequestFace(request);</span><br><span class="line">        ResponseFace responseFace = <span class="keyword">new</span> ResponseFace(response);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            servlet = (Servlet) myclass.newInstance();</span><br><span class="line">            servlet.service(requestFace, responseFace);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | ServletException | IOException e) &#123;</span><br><span class="line">            System.err.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>这两个外观类从代码上来看看起来是可有可无的存在，因为它看上去既没有影响代码的扩展（至少从处理器这一块看来）。我们先设想一下如果不使用这个外观会出现什么情况？我们通过`service()`方法，为`servlet`定义请求的处理的整个细节，但是很显然，**我们暴露了`HttpRequest`和`HttpResponse`**，如果servlet在处理完成之后，将这两个对象分发给外部系统，那么就意味着外部系统可以通过这两个对象直接拿到整个servlet进而可以设法窥探到请求的细节并且寻找漏洞！！！这里加入外观类的作用就是为了保护我们上面所述的两个对象，接着再公布一下外观类的方法，就可以很清楚的了解到这样做的效果：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestFace</span> <span class="keyword">implements</span> <span class="title">ServletRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletRequest servletRequest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestFace</span><span class="params">(HttpRequest servletRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servletRequest = servletRequest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestFace</span> <span class="keyword">implements</span> <span class="title">ServletRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletRequest servletRequest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestFace</span><span class="params">(HttpRequest servletRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servletRequest = servletRequest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//.... 省略一堆方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码结构来看，这一块代码的行为和<code>装饰器模式</code>有点儿相似的意思，但是实际上两者的思考方式是完全不相干的，装饰器模式是隐蔽的为目标类更多的功能侧重于让整个对象的某种行为得到更好的加强，而<code>外观模式</code>则更加突出在于隐蔽子系统的一些内部细节，这里的代码很好的体现了这一点，当使用了门面之后，诸如<code>HttpRequest</code>当中的<code>parse()</code>被外观的设计很好的隐藏了起来，即使拿到外观对象，也无法直接访问<code>HttpRequest</code>，外观在这里充当了一层保护层</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>外观模式算是整个设计模式当中最好理解的一个设计模式，他在系统当中的应用还是十分重要的，外观有点像披着“羊皮”的狼，看似简单的接口背后，却是隐藏着各种丰富的接口和功能。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      外观模式整合了许多的接口
    
    </summary>
    
    
      <category term="设计模式" scheme="https://whitestore.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://whitestore.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈设计模式 - 适配器模式（八）</title>
    <link href="https://whitestore.top/2021/03/07/adaptermethod/"/>
    <id>https://whitestore.top/2021/03/07/adaptermethod/</id>
    <published>2021-03-07T09:03:56.000Z</published>
    <updated>2021-03-07T11:23:29.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈设计模式-适配器模式（八）"><a href="#浅谈设计模式-适配器模式（八）" class="headerlink" title="浅谈设计模式 - 适配器模式（八）"></a>浅谈设计模式 - 适配器模式（八）</h1><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>适配器模式大概是系统用的最多的模式，在<code>spring</code>框架当中可以看到他的各种应用，比如我们想要注册自己的拦截器，或者需要沿用旧接口完成一些自己的实现，都可以使用适配器模式进行实现，适配器模式是一种非常贴合<strong>最少知识原则</strong>的设计模式，这篇文章将会详细介绍一下适配器模式。</p><h2 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h2><ol><li>了解什么是适配器模式</li><li>适配器模式的优缺点</li><li>实战，了解适配器模式</li></ol><a id="more"></a><h1 id="什么是适配器模式？"><a href="#什么是适配器模式？" class="headerlink" title="什么是适配器模式？"></a>什么是适配器模式？</h1><p>定义：在不改动客户代码的情况下实现一个接口向另一个接口的自由转化，让原本不能适配的接口具备相似的功能。</p><p>适配器存在三个角色，客户端，适配器，被适配者。适配器实现目标的接口，并且持有被适配者的实例</p><p>适配器模式是一种：<strong>行为型模式</strong>。因为他将一个接口的行为转化为另一个接口的行为。</p><h1 id="适配器模式优缺点："><a href="#适配器模式优缺点：" class="headerlink" title="适配器模式优缺点："></a>适配器模式优缺点：</h1><p>先说说适配器模式的优点：</p><ol><li>可以让客户从接口的实现当中解放</li><li>让客户由原本的面向实现转变为面向接口</li><li>让被适配对象具备接口功能的同时可以实现自由的扩展</li></ol><p>下面说说缺点，其实适配器的缺点也比较明显：</p><ol><li>由于JAVA不支持多继承，无法完成多个对象的适配工作，只能使用多接口的形式适配，实现起来要比其他的语言稍微复杂一些。</li><li>适配器最难改动的地方在于适配目标的方法，假设适配目标的方法组合了多个被适配对象，此时改动任意一个被适配对象，都会对适配的方法带来影响，同时适配方法也是最难以改动的。</li></ol><blockquote><p>关于适配器使用的建议：</p><ol><li>一个适配器最好做一个类的适配工作。</li><li>如果一个适配器需要适配多个类，需要考虑是否存在关联性</li><li><strong>可以使用双向接口适配器，既可以实现旧接口的方法不改动，同时实现新接口的新实现。要做到这一步，关键是确保：两个接口</strong></li></ol></blockquote><h1 id="使用继承还是使用组合"><a href="#使用继承还是使用组合" class="headerlink" title="使用继承还是使用组合"></a>使用继承还是使用组合</h1><pre><code>对于适配这一个概念，我们可以使用两种形式：**继承** 和 **组合**首先说下继承，继承是指对于一个类进行“超类”的扩展，如果此时我们使用继承的形式去扩展目标对象，虽然从理论上可以实现一个适配器直接具备两个对象的功能，但是由于JAVA本身是不支持多继承的，同时**多用组合，少用继承**是软件设计行业一条非常推崇的定律。所以继承的形式“不太友好”。再说下使用组合的形式，组合是比较推崇的形式，我们在实现目标接口的基础之上，组合被适配的对象，让旧接口的功能可以兼容新接口的实现。这也是JAVA代码当中经常会见到的一种形式，同时在框架中以类似“套版”的形式出现。</code></pre><h1 id="适配器模式的特点："><a href="#适配器模式的特点：" class="headerlink" title="适配器模式的特点："></a>适配器模式的特点：</h1><p><strong>适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用</strong>，当客户端进行请求的时候，目标对象通过适配器，将请求的逻辑转变为“适合”被适配对象的请求，由适配器完成这一转化细节，适配过后执行被适配对象的功能，这种转化对于客户端来说是隐蔽的，同时会让客户端误认为是目标对象完成的了工作，所以这种模式的最大特点是：<strong>请求代码可以完全不需要改变</strong>。</p><h1 id="适配器模式理解"><a href="#适配器模式理解" class="headerlink" title="适配器模式理解"></a>适配器模式理解</h1><p>下面根据适配器模式，介绍一下个人对于适配器模式的一些理解。</p><h2 id="从插头引申适配器模式"><a href="#从插头引申适配器模式" class="headerlink" title="从插头引申适配器模式"></a>从插头引申适配器模式</h2><pre><code>插头有很多中规范，但是日常生活常用的插头一般是两孔或者三孔的插头，一般情况下一个新厂商的插头需要兼容旧厂商生产的插头，同时需要兼容旧厂商的方法，不想改变旧厂商的实现情况下，需要实现新厂商的实现，这时候通常需要依赖一个适配器去做适配，适配器如同一个中间通信人，可以将看起来毫不相干的两个对象之间产生一定的关联特性。</code></pre><h2 id="单向适配和双向适配"><a href="#单向适配和双向适配" class="headerlink" title="单向适配和双向适配"></a>单向适配和双向适配</h2><pre><code>需要注意的是适配器模式一定不要教条的认为只能单向的适配，适配器是可以进行双向适配的，但是此时我们通常需要**两个接口**来完成双向的适配。</code></pre><h2 id="适配器模式和最少知识原则"><a href="#适配器模式和最少知识原则" class="headerlink" title="适配器模式和最少知识原则"></a>适配器模式和最少知识原则</h2><p>适配器模式对应的一个软件设计原则是：<strong>最少知识原则</strong></p><p>最少知识原则：接口负责尽可能少的功能。用白话来讲就是<strong>简洁</strong></p><h3 id="遵循最少知识原则"><a href="#遵循最少知识原则" class="headerlink" title="遵循最少知识原则"></a>遵循最少知识原则</h3><p>对于任何对象，在他的方法内他应该做这些事情</p><ul><li>只操作对象自己本身</li><li>传递的对象参数或者和该对象返回的结果对象（但是会有依赖传递的问题）</li><li>方法本身创建的对象</li><li>对象的任何组件：HAS-A（组合）的内部对象</li></ul><blockquote><p>这里需要小心依赖磁铁，也就是依赖了依赖对象的对象，简单理解就是使用了其他对象返回的另一个对象，这种情况很容易被忽视，而且通常情况下是 <strong>不会出现问题</strong>的，但是一旦要进行重构，这种代码就很容易造成逻辑混乱。</p></blockquote><h2 id="适配器的调用流程"><a href="#适配器的调用流程" class="headerlink" title="适配器的调用流程"></a>适配器的调用流程</h2><ol><li>客户端通过目标接口调用适配器的方法发送对应的请求。</li><li>适配器用适配方法转化为一个或者多个被适配器的多种方法</li><li>客户端得到的接口会误以为是目标对象在工作。同时不需要进行任何变动就可以实现新的功能或者方法。</li></ol><h1 id="适配器模式的结构图"><a href="#适配器模式的结构图" class="headerlink" title="适配器模式的结构图"></a>适配器模式的结构图</h1><p>下面是适配器模式的结构图：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210301230256.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ client 客户端</span><br><span class="line">+ Target 目标接口，</span><br><span class="line">+ Adapter 适配器，负责将两个对象进行关联，产生相似的业务</span><br><span class="line">+ Appropriate object 被适配对象,代表了需要适配的对象内容</span><br></pre></td></tr></table></figure><p>上面的结构图展示了如何目标接口转化为被适配对象的行为。</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>说了不少的理论内容，下面我们根据一个模拟场景制定一份适配器的代码：</p><h2 id="模拟场景"><a href="#模拟场景" class="headerlink" title="模拟场景"></a>模拟场景</h2><pre><code>在任天堂发售的`switch`在日版和港版的两个版本当中，充电充电器的设计是不一样的，由于港版沿用了英国使用的是三插式（大部分电器都是这种情况），而我国使用的是较为通用二插式，日本在设计的时候也是使用二插式，所以在充电器的设计下，日本不需要进行适配，直接可以插到我国的插座上，而港版通常需要购买转接头或者买其他的适配器。</code></pre><h2 id="不使用设计模式"><a href="#不使用设计模式" class="headerlink" title="不使用设计模式"></a>不使用设计模式</h2><pre><code>笔者在构思这一块没有考虑好不使用设计模式如何实现，其实这种情况下，不使用设计模式最好办法通常就是找一个第三方工具进行替代，比如我们可以买一个switch的充电宝，每次充电只要充充电宝就行了，连充电器都省了......</code></pre><h2 id="使用设计模式"><a href="#使用设计模式" class="headerlink" title="使用设计模式"></a>使用设计模式</h2><pre><code>还是直接从设计模式开干把，很显然，既然港版都是用的转接头，那么我们的代码就使用转接头来实现这一块的功能：</code></pre><p>下面是根据模拟场景进行分析，我们依照适配器的结构设计出基本对象：</p><ul><li>switch：我们姑且把它想象是客户端，我们把它想象成一个想要充电的“人”。发起了充电这一个请求来匹配合适的充电器</li><li>JapanMouth：日版充电器，直接对标国内的插口</li><li>Mouth：插口接口。</li><li>EngMouth：英式插口，按照英国的标准设计的插口。</li><li>Adapter：适配器，在这里充当的是转接器，负责转接插口</li></ul><p>有了上面这些定义，下面根据具体的设计出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Switch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TwoHoleCharge twoHoleCharge;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Switch</span><span class="params">(TwoHoleCharge twoHoleCharge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.twoHoleCharge = twoHoleCharge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟充电方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recharge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        twoHoleCharge.jack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TwoHoleCharge <span class="title">getTwoHoleCharge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> twoHoleCharge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTwoHoleCharge</span><span class="params">(TwoHoleCharge twoHoleCharge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.twoHoleCharge = twoHoleCharge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插口接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mouth</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JapanMouth</span> <span class="keyword">implements</span> <span class="title">Mouth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"日版：开始充电"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EngMouth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specialJack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"港版：开始充电"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==关键==适配器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Mouth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EngMouth engMouth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(EngMouth engMouth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engMouth = engMouth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        engMouth.specialJack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 日版插口可以直接使用</span></span><br><span class="line">        Mouth mouth = <span class="keyword">new</span> JapanCharge();</span><br><span class="line">        Switch aSwitch = <span class="keyword">new</span> Switch(mouth);</span><br><span class="line">        aSwitch.recharge();</span><br><span class="line">        <span class="comment">// 港版插口需要转接口</span></span><br><span class="line">        Mouth mouth2 = <span class="keyword">new</span> Adapter(<span class="keyword">new</span> EngMouth());</span><br><span class="line">        aSwitch.setMouth(mouth2);</span><br><span class="line">        aSwitch.recharge();</span><br><span class="line">    &#125;<span class="comment">/*运行结果：</span></span><br><span class="line"><span class="comment">    日版：开始充电</span></span><br><span class="line"><span class="comment">    港版：开始充电</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码比较简单，应该比较好理解，这里重点关注一下<code>Adapter</code>的适配器对象，通过组合的形式，将被适配对象“隐藏”到了目标对象的方法内部，实现了接口的适配，客户在使用的时候，只需要用一个适配器就可以让港版可以直接兼容到国内的电网。</p><p>当然，在现实生活中使用适配器其实比较麻烦，因为总要多带点东西，比如我个人就比较反感现在的手机都把耳机孔给削掉了，出门用个有线听歌还得买个转接口……</p><h2 id="总结案例"><a href="#总结案例" class="headerlink" title="总结案例"></a>总结案例</h2><p>适配器的案例生活中还是十分常见的，可以举出许许多多的场景出来，同时不需要考虑过多的其他因素，适配器非常贴合“开放-关闭”的原则，对于修改进行了开放，对于原有的代码没有进行修改，然开发人员只需要关注如何适配，而不需要太关心原来的实现，</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><pre><code>适配器模式是一个重点模式，他可以实现在不改动旧代码的基础上对于一个目标对象进行二次扩展和升级，并且只需要付出很小的代价就可以完成很多自定义的操作，总体上来说，适配器的弊端在实际的编码过程中往往被规范化的设计而弱化，当然，更多的使用场景可能还是在框架当中，因为框架中使用适配器是一种很常见的行为。</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      适配器是一种新瓶装酒的设计模式
    
    </summary>
    
    
      <category term="设计模式" scheme="https://whitestore.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://whitestore.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈设计模式 - 命令模式（七）</title>
    <link href="https://whitestore.top/2021/03/07/command/"/>
    <id>https://whitestore.top/2021/03/07/command/</id>
    <published>2021-03-07T09:03:43.000Z</published>
    <updated>2021-03-07T11:22:04.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈设计模式-命令模式（七）"><a href="#浅谈设计模式-命令模式（七）" class="headerlink" title="浅谈设计模式 - 命令模式（七）"></a>浅谈设计模式 - 命令模式（七）</h1><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>命令模式也是一种比较常见的行为型模式，可以想象我们的手机智能遥控器，通过按动按钮的形式开启各种家具，说白了，就是将一系列的请求命令封装起来，不直接调用真正执行者的方法，这样比较好扩展。需要注意的是命令模式和策略模式相似，所以有时候可能容易弄混，这篇文章将会详细介绍命令模式。</p><a id="more"></a><h1 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h1><ol><li>了解命令的模式的特点</li><li>简单对比命令模式和策略模式</li><li>命令模式的优缺点总结</li></ol><h1 id="什么是命令模式？"><a href="#什么是命令模式？" class="headerlink" title="什么是命令模式？"></a>什么是命令模式？</h1><p>解释：把“请求”封装为对应的对象，使用不同的请求参数化对象，命令模式支持撤销撤销的操作</p><p>命令模式是一种行为型模式，实现了接口调用对象和返回对象，用命令对象作为桥梁实现调用者和具体实现者之间的解耦和交互。</p><h1 id="命令模式的特点："><a href="#命令模式的特点：" class="headerlink" title="命令模式的特点："></a>命令模式的特点：</h1><ul><li>将发出请求的对象和执行请求的对象解耦</li><li>调用者可以自由定义命令参数进行自由的组合</li><li>命令可以用来实现日志或者<strong>事务系统</strong>（undo操作）</li></ul><h1 id="命令模式结构图："><a href="#命令模式结构图：" class="headerlink" title="命令模式结构图："></a>命令模式结构图：</h1><p>下面根据命令模式的定义，以及上面对于命令模式的理解，构建具体的结构图</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210222141114.png" alt=""></p><p>+ <strong>Client 客户端：</strong>客户端需要创建具体的命令类，并且通过发送请求给执行者调用具体的对象，发送方和接收方不存在关联，统一由命令对象进行连接。</p><p>+ <strong>Invoker 执行者</strong>：请求的发送者，负责将请求分发给具体的命令实现类，由实现类调用实际的执行者进行执行操作</p><p>+ <strong>Command 接口：</strong>命令接口，定义命令的规范</p><p>+ <strong>ConcreteCommand 命令接口实现类</strong>：实现命令的同时组合具体对象。</p><p>+ <strong>ConcreteObject 具体实现类</strong>：定义截图的实现生产对象。</p><p>+ <strong>Receive 执行者</strong>：请求的真正执行者，可以是任意对象，通常以 <strong>组合</strong>形式出现在执行者的内部</p><h1 id="命令模式的理解"><a href="#命令模式的理解" class="headerlink" title="命令模式的理解"></a>命令模式的理解</h1><p>这里参考<strong>《Head firtst设计模式》</strong>的案例，模拟具体的交互流程</p><h2 id="对象村餐厅交互过程"><a href="#对象村餐厅交互过程" class="headerlink" title="对象村餐厅交互过程"></a>对象村餐厅交互过程</h2><p>我们到餐厅点餐，一般会经历如下的流程</p><ol><li><p>客人负责下订单，由服务员接受订单</p></li><li><p>服务器接收订单，调用订单柜台的下订单的方法，不需要关注细节</p></li><li><p>订单柜台通知厨师进行生产</p></li><li><p>厨师生产订单物品之后，交给服务员上菜</p></li></ol><p>根据上面的步骤利用伪代码的表现如下：</p><ul><li><code>createCommandObject()</code> 构建命令对象</li><li><code>setCommand()</code> 传递命令</li><li><code>execute()</code> 命令执行</li><li><code>action1()</code>，<code>action2()</code> 执行者实际执行</li></ul><h2 id="交互流程图"><a href="#交互流程图" class="headerlink" title="交互流程图"></a>交互流程图</h2><p>我们根据上面的交互过程介绍，构建具体的交互流程图，我们可以看到里面有角色：<code>客人</code>、<code>服务员</code>、<code>订单柜台</code>、<code>厨师</code>，他们本身并没有关联，而是通过餐厅的形式彼此产生了具体的关联，同时我们对比上面的结构图，看下对象村餐厅对应的结构图：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210224115250.png" alt=""></p><p>下面根据结构图说一下各种角色的职责：</p><p>客人：相当于client客户端，负责指挥服务员进行下单的操作。</p><p>服务员：充当请求的发送者，接受客户端的请求，调用下订单的接口到具体的订单柜台，但是不需要关心具体的细节，只具备下订单这一个操作</p><p>订单柜台：通过服务员传递的订单，安排厨师执行具体的任务</p><p>厨师：根据订单柜台的订单做菜，将结果返回给服务员（或客人）</p><p>我们从上面的角色图再来看具体的命令模式定义，可以看到基本都是一一对应的情况。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210222141114.png" alt=""></p><h1 id="命令模式和策略模式的对比"><a href="#命令模式和策略模式的对比" class="headerlink" title="命令模式和策略模式的对比"></a>命令模式和策略模式的对比</h1><p>命令模式和策略模式的结构图有些许的类似，下面我们来对比看一下这两张图的异同：</p><p>策略模式结构图：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210126230854.png" alt="策略模式"></p><p>命令模式结构图：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210222141114.png" alt="命令模式"></p><p>相同点：</p><ol><li>命令模式通过定义命令规范接口，由子类实现命令的执行细节，策略同样定义策略行为同时用子类实现不同的策略功能</li><li>命令模式和策略都解耦了请求的发送者和执行者</li></ol><p><strong>不同点：</strong></p><ol><li>命令模式利用了命令组合执行对象的形式执行实现具体实现，而策略模式依靠上下文对象进行切换</li><li>策略模式针对某个对象实现不同的策略效果，而命令模式关注请求发送者和实现者之间的业务解耦组合</li></ol><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="模拟场景："><a href="#模拟场景：" class="headerlink" title="模拟场景："></a>模拟场景：</h2><pre><code>这次的案例还是模拟《Head First》设计模式的当中对于遥控器遥控电器的一个案例，我们定义如下的内容：</code></pre><p>遥控器：命令的发送方，负责根据不同的操作按钮调用不同的设备工作，生成具体的命令对象调用接口执行具体的命令</p><p>命令接口：负责定义命令的实现规范，充当遥控器里面的每一个按钮，对应都有具体的实现</p><p>命令实现类：负责实现命令的接口，同时调用具体的实现对象执行命令</p><p>实现对象：命令的真正执行者，一般夬在命令实现类的内部，比如电视，灯泡等</p><h2 id="不适用设计模式"><a href="#不适用设计模式" class="headerlink" title="不适用设计模式"></a>不适用设计模式</h2><p>在不使用设计模式的情况下，我们通常通过对象组合的形式组合不同的实体对象执行命令，下面通过一些简单的代码说明一下设计的弊端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 灯泡</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打开灯光"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭灯光"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 电视机</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打开电视"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭电视"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遥控器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Television television;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteControl</span><span class="params">(Light light, Television television)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">        <span class="keyword">this</span>.television = television;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">button1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">button2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        television.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 单元测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Television television = <span class="keyword">new</span> Television();</span><br><span class="line">        Light light = <span class="keyword">new</span> Light();</span><br><span class="line">        RemoteControl remoteControl = <span class="keyword">new</span> RemoteControl(light, television);</span><br><span class="line">        remoteControl.button1();</span><br><span class="line">        remoteControl.button2();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">/*运行结果：</span></span><br><span class="line"><span class="comment">打开灯光</span></span><br><span class="line"><span class="comment">打开电视</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>从上面的简单代码可以看到，如果我们继续增加电器，同时增加方法，不仅会导致遥控器要随着电器的改动不断改动，同时每次新增一个电器，遥控器要进行类似“注册”的行为，需要将电器<strong>接入</strong>到遥控器，这样显然是不符合逻辑的，因为我们都知道，遥控器是单纯的指挥者，他不参与任何命令的操作细节，同时虽然真正工作的方法是具体对象的方法，但是这种形式类似将电器“塞”到了遥控器的内部执行，这样也是存在问题，我们下面需要修改一下这种严重耦合的设计。</p><h2 id="使用命令模式改写："><a href="#使用命令模式改写：" class="headerlink" title="使用命令模式改写："></a>使用命令模式改写：</h2><p>我们按照命令模式的结构图，改写案例，我们需要定义下面的类和对应的接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ RemoteControl 遥控器</span><br><span class="line">+ Command(接口) 命令规范接口，用于接入到遥控器内部</span><br><span class="line">+ LightCommandConcrete 控制电器的亮灭命令实现</span><br><span class="line">+ SwitchCommandConcrete 控制电器的开关命令实现</span><br><span class="line">+ Light 灯泡</span><br><span class="line">+ Television 电视机</span><br></pre></td></tr></table></figure><p>首先，我们定义命令的接口，定义接口的规范方法。然后定义实现子类实现不同命令的操作效果，在命令实现类的内部，我们组合实际执行对象，在接口方法调用实际的对象方法，这样就做到了执行者和发送者之间的解耦。</p><p>接着，我们改写控制器，他不在持有任何实际的对象方法，通过组合命令的接口，让客户端传入实现的功能，通过这种方式，遥控器不在需要依赖具体的电器实现调用具体方法，而是关注命令的接口方法，一切的细节都在命令的子类内部。</p><p>下面代码是依照命令模式进行的最简单的一个实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口备份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightCommandConcrete</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Light light = <span class="keyword">new</span> Light();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchCommandConcrete</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Television television = <span class="keyword">new</span> Television();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        television.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遥控器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteControl</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Command <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RemoteControl remoteControl = <span class="keyword">new</span> RemoteControl(<span class="keyword">new</span> LightCommandConcrete());</span><br><span class="line">        remoteControl.execute();</span><br><span class="line">        remoteControl.setCommand(<span class="keyword">new</span> SwitchCommandConcrete());</span><br><span class="line">        remoteControl.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上面的代码改造，我们成功上面的代码改造为命令模式的代码，使用设计模式之后，我们将调用者和实际执行者进行了解耦，控制器不需要知道执行的细节，只需要组合自己的命令接口，由客户端指定希望实现的内容，执行相对应的具体命令。</p><h2 id="案例的额外扩展："><a href="#案例的额外扩展：" class="headerlink" title="案例的额外扩展："></a>案例的额外扩展：</h2><p>下面是对应案例如何进行后续的扩展，对于这部分内容文章篇幅有限，同时本着不重复造轮子的理念，请阅读<strong>《Head First设计模式》</strong>关于命令模式这一个章节，同时安利一下这本书，非常通俗易懂的讲解设计模式，对于个人的提升帮助很大。</p><h3 id="对于上面的设计，如何加入Undo的操作？"><a href="#对于上面的设计，如何加入Undo的操作？" class="headerlink" title="对于上面的设计，如何加入Undo的操作？"></a>对于上面的设计，如何加入<strong>Undo</strong>的操作？</h3><p>Undo是一个很常见的功能，如果想要让Undo的操作集成到案例内部，需要按照如下的步骤进行操作：</p><ol><li>Command 接口增加<code>Undo</code>的操作，让所有命令支持<code>undo</code></li><li>在控制器记录<strong>最后一个命令的执行对象</strong>，记录最后的操作命令，实现控制器支持undo操作</li><li>具体Command实现增加对于<code>undo()</code>方法调用，并且根据实际的组合对象调用方法</li><li>具体实现类实现<code>undo()</code>操作的具体行为效果。</li></ol><h3 id="如果undo里面，存在一些变量如何处理？"><a href="#如果undo里面，存在一些变量如何处理？" class="headerlink" title="如果undo里面，存在一些变量如何处理？"></a>如果undo里面，存在一些变量如何处理？</h3><p>在命令的实现类内部，需要增加一个<strong>最后变量值</strong>的记录，用于记录当前最后一步操作的属性和变量</p><h3 id="如何做到宏命令？"><a href="#如何做到宏命令？" class="headerlink" title="如何做到宏命令？"></a>如何做到宏命令？</h3><p>实现一个命令类，通过组合<strong>数组</strong>或者<strong>堆栈</strong>组合多个其他命令对象，通过for循环的形式依次调用。</p><p>undo也可以使用这种方式进行调用的，但是要注意**调用的顺序相反</p><h1 id="命令模式的优缺点："><a href="#命令模式的优缺点：" class="headerlink" title="命令模式的优缺点："></a>命令模式的优缺点：</h1><p>优点：</p><ul><li>命令模式实现了请求发送方和实现方解耦，不论是发送方还是接收方都不需要</li><li>命令模式可以实现不同实现对象的自由组合，通过命令组合可以实现一连串简单功能</li></ul><p>缺点：</p><ul><li>和策略模式类似，命令模式很容易造成子类的膨胀</li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><pre><code>命令模式是一种非常常见的设计模式，这种模式更多的关注点是解耦请求的发送方和实现方，命令模式在系统设计中使用还是十分常见的，是一种值得关注的设计模式。</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      命令模式解耦了请求发送者和接受者
    
    </summary>
    
    
      <category term="设计模式" scheme="https://whitestore.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://whitestore.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈设计模式 - 工厂模式（六）</title>
    <link href="https://whitestore.top/2021/03/07/factorymethod2/"/>
    <id>https://whitestore.top/2021/03/07/factorymethod2/</id>
    <published>2021-03-07T08:50:34.000Z</published>
    <updated>2021-03-07T11:20:55.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈设计模式-工厂模式（六）"><a href="#浅谈设计模式-工厂模式（六）" class="headerlink" title="浅谈设计模式 - 工厂模式（六）"></a>浅谈设计模式 - 工厂模式（六）</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><pre><code>在第一篇里面已经介绍过简单工厂了，但是工厂模式里面不仅仅是简单工厂，还存在工厂方法和抽象工厂，并且从严格意义来讲简单工厂不能算是一种设计模式，本次的文章针对工厂的进化来展开讲一讲工厂模式的三种常见形式：简单工厂、工厂方法、抽象工厂。</code></pre><h2 id="文章目的"><a href="#文章目的" class="headerlink" title="文章目的"></a>文章目的</h2><ol><li>了解简单工厂这种代码编写形式的优点，回顾工厂模式</li><li>了解如何从简单工厂扩展到工厂方法以及抽象工厂</li><li>对比工厂方法和抽象工厂的异同。</li><li>总结简单工厂，工厂方法和抽象工厂，对比优缺点和特点</li></ol><a id="more"></a><h2 id="如何辨别工厂模式"><a href="#如何辨别工厂模式" class="headerlink" title="如何辨别工厂模式"></a>如何辨别工厂模式</h2><p>工厂模式一般从类的命名就可以直接看到含义，所以一般情况下很容易看出工厂模式的应用。</p><ul><li>工厂模式主要是负责对象的创建</li><li>无论是创建者还是使用者，都是针对一个抽象对象的实现。</li><li>工厂模式最关注的是对象是如何创建的而不是对象的使用。它针对的是创建这一个过程。</li></ul><h2 id="工厂模式的具体介绍"><a href="#工厂模式的具体介绍" class="headerlink" title="工厂模式的具体介绍"></a>工厂模式的具体介绍</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>简单工厂模式的介绍：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTIyMDY1NzkyNjQ1MjAxOTM0" title="https://juejin.cn/post/6922065792645201934">https://juejin.cn/post/6922065792645201934<i class="fa fa-external-link"></i></span></p><p>之前文章已经介绍过简单工厂模式，我们直接看一下简单工厂是如何设计的，从严格的意义上来说，简单工厂是一种良好的“编程习惯”，他很好的解耦了创建对象和使用对象这两个不同的过程。做到“单一职责”的原则</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210214170935.png" alt="简单工厂"></p><p>从上面的图当中我们构建基本的工厂类和对应的实现子类以及对应的产品抽象类。</p><p>下面回顾一下简单工厂的优缺点</p><p>优点：</p><ol><li>使用创建工厂的方法，我们实现了获取具体对象和生产对象的解耦，由生产对象的工厂通过我们传入的参数生产对应的对象，调用方只需要传递需要生产的对象来实现具体的效果。</li><li>解耦了<strong>创建</strong>和<strong>被创建</strong>的过程。</li><li>根据不同的逻辑判断生成不同的具体对象。</li></ol><p>缺点：</p><ol><li>每增加一个工厂对象具体的实现类，就需要增加<code>if/else</code>不利于维护</li><li>大量的子类会造成工厂类的代码迅速膨胀和臃肿</li><li>简单工厂的方法一般处理简单的业务逻辑，如果创建逻辑复杂<strong>不建议</strong>使用。</li></ol><p>从上面的优缺点分析可以知道，简单工厂并不能完全解决对象的创建解耦，对于对象的创建细节容易造成耦合，同时如果创建的对象过多容易出现臃肿的工厂代码。</p><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>工厂方法模式：定义了创建对象的接口方法，但是具体的创建过程由子类来决定。工厂方法将<strong>创建的过程延迟到子类</strong>，工厂方法是对简单工厂的扩展和升级，为了解决简单工厂破坏了“开放-关闭原则”的问题而做的改进。我们将具体的产品进行了抽象的同时，将创建对象的过程<strong>延迟到子类</strong>进行实现。</p><h4 id="工厂方法的结构图"><a href="#工厂方法的结构图" class="headerlink" title="工厂方法的结构图"></a>工厂方法的结构图</h4><p>下面为工厂方法的结构图，我们由简单工厂转变为工厂方法之后，工厂类定义增加了抽象的对象创建方法，由子类通过继承的方式实现工厂的抽象方法并且实现自己的构建过程。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210216124726.png" alt="工厂方法"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ Product 产品类，定义产品的公用方法和抽象类</span><br><span class="line">+ ConcreteProduct 产品的具体实现子类，包含具体产品的实现</span><br><span class="line">+ Factory 工厂类，定义工厂的创建方法以及需要子类继承实现的方法</span><br><span class="line">+ ConcreteFactory 工厂的实现类，由子工厂来决定生成的具体产品和定义生产的具体过程。</span><br></pre></td></tr></table></figure><h4 id="工厂方法的特点"><a href="#工厂方法的特点" class="headerlink" title="工厂方法的特点"></a>工厂方法的特点</h4><p>下面是工厂方法的具体特点</p><ul><li>创建的过程解耦到子类，由子类决定创建的过程和结果</li><li>具体的产品和工厂之间存在必要关联，同时可以使用任意子类产品进行替换</li><li>需要依靠<strong>继承</strong>的形式由子工厂来决定生产的过程，子类决定产品创建的结果</li></ul><blockquote><p>提醒：子类决定创建的结果并不是字面上的创建，而是由调用者决定的。子类决定的是具体针对哪一个实例进行生产，但是生成的具体结果还是控制在创建者的身上</p></blockquote><h4 id="简单工厂和工厂方法有什么区别"><a href="#简单工厂和工厂方法有什么区别" class="headerlink" title="简单工厂和工厂方法有什么区别"></a>简单工厂和工厂方法有什么区别</h4><ol><li>简单工厂是对产品的创建过程进行“封装”，同时创建新的产品必须改动工厂代码。</li><li>工厂方法是对简单工厂的升级，工厂方法可以控制具体对象的创建以及由子类来决定具体需要创建哪一个对象。</li><li>简单工厂只是单纯的解耦创建者和使用者，但是简单工厂无法改变创建的结果。</li></ol><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂模式：提供接口，通过定义抽象方法的形式，通过实现具体工厂方法实现创建具体对象家族，同时不需要指定特殊的类。</p><p>抽象工厂的内部往往使用工厂方法进行实现，两者经常被弄混，从结构上来看，他们最大的区别在于工厂方法往往使用继承实现，而抽象工厂往往使用内部继承工厂方法的接口实现。区分工厂方法和抽象工厂也是工厂模式的学习关键。</p><h4 id="抽象工厂的结构图"><a href="#抽象工厂的结构图" class="headerlink" title="抽象工厂的结构图"></a>抽象工厂的结构图</h4><p>由于抽象工厂更像是对工厂方法的改进，我们定义抽象工厂的结构图，抽象工厂的结构相比工厂方法要复杂一些：</p><blockquote><p>可以参考抽象工厂和工厂方法的结构图，看看两者的异同</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210216234144.png" alt="抽象工厂"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ FactoryInterface 抽象工厂接口，定义一批抽象对象的生产接口</span><br><span class="line"> + ConcreteFactoryA抽象工厂实现类A，实现抽象工厂接口。</span><br><span class="line"> + ConcreteFactoryB抽象工厂实现类B，实现抽象工厂接口。</span><br><span class="line">+ ProductA抽象产品A，定义公共的抽象方法或者公用属性</span><br><span class="line"> + ConcreteProductA具体实现产品A</span><br><span class="line"> + ConcreteProductA具体实现产品A</span><br><span class="line">+ ProductB抽象产品B，定义公共的抽象方法或者公用属性</span><br><span class="line"> + ConcreteProductB具体实现产品B</span><br><span class="line"> + ConcreteProductB具体实现产品B</span><br></pre></td></tr></table></figure><h4 id="抽象工厂的特点："><a href="#抽象工厂的特点：" class="headerlink" title="抽象工厂的特点："></a>抽象工厂的特点：</h4><ol><li>所有的具体工厂都实现同一个抽象工厂接口。</li><li>生产的结果实现类可以自由实现具体类或者其扩展类的实例。</li><li>抽象工厂的痛点在于扩展一个新的产品生产会造成所有的具体工厂的改动，也包含了产品类的变动。</li><li>抽象工厂往往包含了一系列的工厂方法</li></ol><h4 id="抽象工厂和工厂方法的区别"><a href="#抽象工厂和工厂方法的区别" class="headerlink" title="抽象工厂和工厂方法的区别"></a>抽象工厂和工厂方法的区别</h4><ol><li>抽象工厂定义抽象接口依靠子类实现创建的过程，而工厂方法针对子类实现具体的对象创建细节</li><li>工厂方法需要使用继承的手段实现工厂方法“埋藏”工厂创建具体对象的细节</li><li>工厂方法对于处理“独立”产品的创建非常有效，而抽象工厂往往用于处理生产多个存在关联的产品对象。</li></ol><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><p>依旧参考坦克大战的案例，介绍如何改造坦克大战的具体代码。</p><h3 id="模拟场景"><a href="#模拟场景" class="headerlink" title="模拟场景"></a>模拟场景</h3><p> 依然以经典的任天堂游戏坦克大战为例，在进入游戏的关卡的时候，会出现我方的坦克和敌人的坦克，我方坦克和地方坦克不仅形状不同，而且很脆，但是敌人的坦克根据颜色需要打好几枪才会毁灭，那么如果用代码来模拟是什么样的呢？</p><h3 id="简单工厂实现："><a href="#简单工厂实现：" class="headerlink" title="简单工厂实现："></a>简单工厂实现：</h3><p>使用简单工厂实现的代码如下:</p><p>使用简单工厂类来管理坦克的创建过程，简单工厂顾名思义，就是简单的将创建对象的过程进行管理。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210126000032.png" alt=""></p><p>增加工厂类 <code>TankFactory.java</code></p><p>用工厂来管理具体的坦克创建过程:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 坦克工厂，专门负责生产坦克</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 22:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TankFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建坦克</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tank <span class="title">createTank</span><span class="params">(String check)</span></span>&#123;</span><br><span class="line">        Tank tank = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(Objects.equals(check, <span class="string">"my"</span>))&#123;</span><br><span class="line">            tank = <span class="keyword">new</span> MyTank();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Objects.equals(check, <span class="string">"mouse"</span>))&#123;</span><br><span class="line">            tank = <span class="keyword">new</span> MouseTank();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(check, <span class="string">"big"</span>))&#123;</span><br><span class="line">            tank = <span class="keyword">new</span> BigTank();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"当前坦克不支持生产"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tank;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是对应的坦克以及坦克的子类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 坦克的父类，定义坦克的行为</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 0:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Tank</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 坦克hp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 坦克子弹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> List&lt;Object&gt; bullet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动的方法s</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 攻击</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我方的坦克继承坦克的父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我方坦克</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 21:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTank</span> <span class="keyword">extends</span> <span class="title">Tank</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我方坦克假设只有一条命</span></span><br><span class="line">        hp = <span class="number">1</span>;</span><br><span class="line">        bullet = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化添加三发子弹</span></span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"移动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"攻击地方坦克"</span>);</span><br><span class="line">        <span class="comment">// ..弹出子弹</span></span><br><span class="line">        <span class="keyword">if</span>(bullet.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"没有子弹了"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bullet.remove(bullet.get(bullet.size() -<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"停止"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>敌人的坦克如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 老鼠坦克</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 22:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MouseTank</span> <span class="keyword">extends</span> <span class="title">Tank</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"长得尖尖的，很像老鼠"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MouseTank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 坦克假设只有一条命</span></span><br><span class="line">        hp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">        bullet = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化添加六发子弹</span></span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"老鼠坦克移动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"老鼠坦克开枪"</span>);</span><br><span class="line">        <span class="comment">// ..弹出子弹</span></span><br><span class="line">        <span class="keyword">if</span> (bullet.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"老鼠坦克没有子弹了"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 老鼠坦克一次性开两枪</span></span><br><span class="line">        bullet.remove(bullet.get(bullet.size() - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"停止"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 一旦创建就开始移动</span></span><br><span class="line">            move();</span><br><span class="line">            <span class="comment">// 漫无目的开枪</span></span><br><span class="line">            attack();</span><br><span class="line">            attack();</span><br><span class="line">            <span class="comment">// 做完一轮操作歇一秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 随机停止</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> Random(<span class="number">100</span>).nextInt() % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后编写单元测试如下，我们使用简单工厂生产出不同的坦克，但是客户端不需要纠结生产的细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单元测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 22:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们将生产坦克的过程全部交给了工厂来处理</span></span><br><span class="line"><span class="comment">     * 可能还是奇怪，这和刚才没有什么区别呀？</span></span><br><span class="line"><span class="comment">     * 我们来看下区别：</span></span><br><span class="line"><span class="comment">     * 1. 创建的过程没有了，虽然是一个简单的new，但是new的过程交给了工厂</span></span><br><span class="line"><span class="comment">     * 2. 我们后续如果要在坦克加入别的东西，只需要去改工厂类和具体的实现类，不需要该此处代码</span></span><br><span class="line"><span class="comment">     * 3. 如果不支持的操作，工厂还可以通知我们这样做不对</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TankFactory tankFactory = <span class="keyword">new</span> TankFactory();</span><br><span class="line"></span><br><span class="line">        Tank my = tankFactory.createTank(<span class="string">"my"</span>);</span><br><span class="line">        Tank mouse = tankFactory.createTank(<span class="string">"mouse"</span>);</span><br><span class="line">        Tank big = tankFactory.createTank(<span class="string">"big"</span>);</span><br><span class="line">        <span class="comment">// 我要一个没有的设计过的坦克</span></span><br><span class="line">        Tank mybig = tankFactory.createTank(<span class="string">"mybig"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">/*//</span></span><br><span class="line"><span class="comment">    运行结果：</span></span><br><span class="line"><span class="comment">    Exception in thread "main" 老鼠坦克移动</span></span><br><span class="line"><span class="comment">    巨型坦克移动</span></span><br><span class="line"><span class="comment">    老鼠坦克开枪</span></span><br><span class="line"><span class="comment">    巨型坦克开枪</span></span><br><span class="line"><span class="comment">    老鼠坦克开枪</span></span><br><span class="line"><span class="comment">    java.lang.UnsupportedOperationException: 当前坦克不支持生产</span></span><br><span class="line"><span class="comment">at com.headfirst.factory.use.TankFactory.createTank(TankFactory.java:27)</span></span><br><span class="line"><span class="comment">at com.headfirst.factory.use.Main.main(Main.java:33)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看到，对于坦克的创建和使用过程虽然进行解耦了，但是可以看到创建的过程耦合在了简单工厂的内部，工厂创建的方法耦合了过多的细节，同时如果需要创建新的产品需要改动工厂代码，这违背了开放-关闭原则。</p><p>针对上面的问题，我们显然需要使用工厂方法进行改良，我们让工厂的创建细节延迟到子类去实现，子类只需要关注创建的细节，不需要了解客户端的调用，下面我们针对上面的代码使用工厂方法进行改进。</p><blockquote><p>这种改动也符合开放-关闭原则</p></blockquote><h3 id="工厂方法实现："><a href="#工厂方法实现：" class="headerlink" title="工厂方法实现："></a>工厂方法实现：</h3><p>从简单工厂可以看出，如果每次修改产品都需要牵动工厂的代码改动，同时针对创建的过程都被“耦合”在单独的工厂创建方法内部，我们根据工厂方法的结构图看一下如何改进坦克大战的代码：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210216124726.png" alt="工厂方法"></p><p>首先，我们需要依照工厂方法的定义，将原本的简单工厂类改造为具备工厂方法的工厂，在下面的代码当中，工厂类具备两个方法，一个用于创建具体的对象，由客户端调用，并且提供一个抽象的方法，由工厂子类实现并且定义具体的工厂生产过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 坦克工厂</span></span><br><span class="line"><span class="comment"> * 工厂增加抽象方法由子类进行构建</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/16 17:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TankFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建坦克</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tank <span class="title">createTank</span><span class="params">(String check)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createConcreteTankMethod(check);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建具体产品过程的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Tank <span class="title">createConcreteTankMethod</span><span class="params">(String check)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类不需要关心<code>createTank()</code>方法是如何运行的，只需要实现自己的工厂方法同时定义生产的细节提供支持即可。</p><p>下面的代码为我方坦克的生产工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我方坦克的创建工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/16 14:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OurTankFactory</span> <span class="keyword">extends</span> <span class="title">TankFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tank <span class="title">createConcreteTankMethod</span><span class="params">(String check)</span> </span>&#123;</span><br><span class="line">        Tank tank = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(Objects.equals(check, <span class="string">"my"</span>))&#123;</span><br><span class="line">            tank = <span class="keyword">new</span> MyTank();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tank;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的代码为敌人的坦克的生产工厂实现子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 敌人坦克的构建工厂</span></span><br><span class="line"><span class="comment"> * 老鼠坦克</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/16 14:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MouseTankFactory</span> <span class="keyword">extends</span> <span class="title">TankFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tank <span class="title">createConcreteTankMethod</span><span class="params">(String check)</span> </span>&#123;</span><br><span class="line">        Tank tank = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(Objects.equals(check, <span class="string">"mouse"</span>))&#123;</span><br><span class="line">            tank = <span class="keyword">new</span> MouseTank();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tank;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这样的调整之后，我们每次增加新的产品，只需要继承具备工厂方法的工厂并且实现对应的方法完成自己的坦克创建细节，就将原本耦合的创建规则从父类从剥离，延迟到子类完成，下面来看下单元测试的代码，可以看到工厂的生产具体具体化到子类工厂的内部，而对外依旧是坦克的生成工厂，这样既符合<code>依赖倒转</code>的原则，也方便后续的扩展和更多实现工厂的添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂方法的单元测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/16 17:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TankFactory tankFactory = <span class="keyword">new</span> MouseTankFactory();</span><br><span class="line">        TankFactory ourTankFactory = <span class="keyword">new</span> OurTankFactory();</span><br><span class="line">        Tank my = tankFactory.createTank(<span class="string">"mouse"</span>);</span><br><span class="line">        Tank mouse = ourTankFactory.createTank(<span class="string">"my"</span>);</span><br><span class="line">        System.err.println(my);</span><br><span class="line">        System.err.println(mouse);</span><br><span class="line">    &#125;<span class="comment">/*运行结果：</span></span><br><span class="line"><span class="comment">    com.headfirst.factory.use.MouseTank@677327b6</span></span><br><span class="line"><span class="comment">    老鼠坦克移动</span></span><br><span class="line"><span class="comment">    com.headfirst.factory.use.MyTank@14ae5a5</span></span><br><span class="line"><span class="comment">    老鼠坦克开枪</span></span><br><span class="line"><span class="comment">    老鼠坦克开枪</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂方法的问题：虽然工厂方法很好的为我们解决了创建过程由子类进行构建的问题，但是如果我们需要往坦克的产品里面提供配对的零件，此时会发现一些问题，<strong>我们的工厂方法只能提供一种产品的生产</strong>，如果我们需要生产很多的产品，工厂方法此时就遇到的瓶颈，因为需要调整继承结构，同时扩展非常不便。</p><blockquote><p>注意点：工厂方法的另一个问题在于他需要依赖继承来实现对象创建过程定义，此时如果改动整个顶层的抽象方法会导致依赖磁铁导致所有的子类都需要改变。假如需要加入多个产品的生产，此时对于所有的子类改动来看都是十分麻烦的事情.</p></blockquote><p>总结：工厂方法在构建一类产品的时候非常有效，但是需要构建很多种产品的时候会产生大量的继承具体化问题</p><h3 id="抽象工厂的实现："><a href="#抽象工厂的实现：" class="headerlink" title="抽象工厂的实现："></a>抽象工厂的实现：</h3><p>我们之前讲过抽象工厂实际上是对工厂方法的进一步提取，抽象工厂需要的是一系列产品的接口，由子工厂负责一系列产品的接口生产，同时更多的需要依赖组合的形式为具体的产品进行扩展。</p><p>在具体的案例代码介绍之前，我们需要对于案例进行改动，由于之前只存在坦克父类和具体的实现子类，为了详细介绍抽象工厂，我们针对坦克类增加一个大炮类，大炮类提供展示外观的方法，和坦克类的产品完全不同，我们需要定义坦克的大炮产品父类和具体的不同实现子类，在抽象工厂提供大炮的生产接口抽象同时，我们需要在大炮的类内部组合大炮的对象，为坦克增加不同的大炮外观，下面我们根据抽象工厂的结构图，构建如下的结构图：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210216234144.png" alt="抽象工厂"></p><p>我们参考结构图，定义类似的坦克结构，下面是加入新需求之后的结构图：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210216195237.png" alt="根据抽象工厂绘制"></p><p>根据上面的结构图，我们先将工厂有具体类改造为工厂接口，不再持有具体的创建过程，将一系列创建的细节分布到子类进行，同时定义接口的方式可以创建多个产品。（这里简化为2个不同的产品）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 坦克工厂，专门负责生产坦克</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 22:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TankFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 坦克创建方法抽象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Tank <span class="title">createTank</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大炮的创建方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Cannon <span class="title">createCannon</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们根据抽象工厂接口创建具体的生产工厂，我们在子类可以返回具体的产品子类也可以返回抽象的父类，下面定义我方坦克的工厂类，同时定义一个特定敌人坦克的工厂类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我方坦克的创建工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/16 14:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OurTankFactory</span> <span class="keyword">implements</span> <span class="title">TankFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建自带大炮的坦克</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tank <span class="title">createTanAndCannon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Tank myTank = createTank();</span><br><span class="line">        myTank.setCannon(createCannon());</span><br><span class="line">        <span class="keyword">return</span> myTank;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tank <span class="title">createTank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyTank();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cannon <span class="title">createCannon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Artillery();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>敌人坦克的工厂实现子类:敌人的坦克工厂实现子类，可以生产不同抽象产品的不同具体实现子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 敌人坦克的构建工厂</span></span><br><span class="line"><span class="comment"> * 老鼠坦克</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/16 14:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MouseTankFactory</span> <span class="keyword">implements</span> <span class="title">TankFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MouseTank <span class="title">createTank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MouseTank();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cannon <span class="title">createCannon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RocketLauncher();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们定义另一个独立的产品，定义顶层的抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大炮抽象类</span></span><br><span class="line"><span class="comment"> * 子类具备不同的大炮形式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/16 18:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cannon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外观</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据对应上面的抽象父类，定义对应点具体实现子类，这里为了简单将两个具体实现子类放到一块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 火炮</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/16 19:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Artillery</span> <span class="keyword">extends</span> <span class="title">Cannon</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"火箭炮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 火箭炮</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/16 19:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketLauncher</span> <span class="keyword">extends</span> <span class="title">Cannon</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"火箭炮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里扩展了一下坦克类，为坦克类组合了大炮的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 坦克的父类，定义坦克的行为</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 0:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Tank</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 坦克hp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 坦克子弹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> List&lt;Object&gt; bullet;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Cannon cannon;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动的方法s</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 攻击</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cannon <span class="title">getCannon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cannon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCannon</span><span class="params">(Cannon cannon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cannon = cannon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Tank&#123;"</span> +</span><br><span class="line">                <span class="string">"hp="</span> + hp +</span><br><span class="line">                <span class="string">", bullet="</span> + bullet +</span><br><span class="line">                <span class="string">", cannon="</span> + cannon +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是单元测试代码，我们在坦克的对象里面设置或者组合其他的对象，并且由工厂提供生产：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单元测试</span></span><br><span class="line"><span class="comment"> * 抽象工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/16 16:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TankFactory ourTankFactory = <span class="keyword">new</span> OurTankFactory();</span><br><span class="line">        TankFactory mouseTankFactory = <span class="keyword">new</span> MouseTankFactory();</span><br><span class="line">        Tank ourTankFactoryTank = ourTankFactory.createTank();</span><br><span class="line">        Cannon cannon = ourTankFactory.createCannon();</span><br><span class="line">        Tank mouseTankFactoryTank = mouseTankFactory.createTank();</span><br><span class="line">        Cannon cannon1 = mouseTankFactory.createCannon();</span><br><span class="line">        ourTankFactoryTank.setCannon(cannon);</span><br><span class="line">        mouseTankFactoryTank.setCannon(cannon1);</span><br><span class="line">        System.err.println(<span class="string">"our = "</span> + ourTankFactoryTank);</span><br><span class="line">        System.err.println(<span class="string">"mouse = "</span> + mouseTankFactoryTank);</span><br><span class="line">    &#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment">        our = Tank&#123;hp=1, bullet=[java.lang.Object@677327b6, java.lang.Object@14ae5a5, java.lang.Object@7f31245a],</span></span><br><span class="line"><span class="comment">        cannon=com.headfirst.factory.abstractfac.Artillery@6d6f6e28&#125;</span></span><br><span class="line"><span class="comment">        老鼠坦克移动</span></span><br><span class="line"><span class="comment">        mouse = Tank&#123;hp=1, bullet=[java.lang.Object@135fbaa4, java.lang.Object@45ee12a7, java.lang.Object@330bedb4, java.lang.Object@2503dbd3, java.lang.Object@4b67cf4d],</span></span><br><span class="line"><span class="comment">        cannon=com.headfirst.factory.abstractfac.RocketLauncher@7ea987ac&#125;</span></span><br><span class="line"><span class="comment">        老鼠坦克开枪</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂模式的变化：</p><p>从上面的案例和具体实现我们分析了工厂模式的三种变化：<strong>简单工厂、工厂方法、抽象工厂</strong>。他们的递进次序也是<code>简单工厂 -&gt; 工厂方法 -&gt; 抽象工厂</code>这种顺序。</p><p>我们可以发现简单工厂是一种非常简单的设计思路，他仅仅定义了的创建和使用过程的接口，同时产品具备最基本的抽象和继承设计，这类设计往往用于<strong>简单的对象构建</strong>。而一旦出现大量的具体对象，简单工厂的代码将会不断的膨胀，同时产生很多的<code>if/else</code>代码。</p><p>此时就需要使用工厂方法对于简单工厂的结构进行升级，工厂方法通过继承的方式（定义抽象的方法），<strong>推迟具体对象的创建到子类</strong>，工厂父类既可以控制子类的创建结果，同时又不需要关心具体对象的创建过程，这种设计非常巧妙，很好的解决了工厂的对象创建方法代码臃肿的问题。</p><p>但是我们也发现了问题，工厂方法扩展会导致所有的子类进行强制实现，不利于后期的维护，同时如果需要一系列相关产品的生成，使用工厂方法进行继承实现会造成高度的继承耦合，不利于工厂的产品生产扩展，此时就可以运用抽象工厂进行改进，我们用抽象工厂扩展工厂方法，使用接口的形式定义一批接口，由子类工厂进行实现和后续的所有生产细节，同时还可以自定义生产的具体产品。</p><p>上面是根据案例对于本次的设计模式进行一个模式的总结，可以看到工厂模式的应用还是非常多的，在WEB领域最常用的<code>Spring</code>框架就是的Bean工厂就是一个非常良好的工厂模式的实践案例。</p><h2 id="工厂模式的总结："><a href="#工厂模式的总结：" class="headerlink" title="工厂模式的总结："></a>工厂模式的总结：</h2><p>下面用一张表格总结工厂模式的三种形态，优缺点以及相关总结：</p><table><thead><tr><th>模式名称</th><th>简单工厂</th><th>工厂方法</th><th>抽象方法</th></tr></thead><tbody><tr><td>特点</td><td>根据产品按照客户端的需求生产不同的具体对象，将生产和使用的过程进行解耦</td><td>将工厂的创建细节延迟到工厂的子类实现。</td><td>定义一系列工厂方法，由子工厂负责具体的多类产品的生产</td></tr><tr><td>派生方式</td><td>需要修改简单工厂的代码</td><td>顶层工厂增加方法需要所有的子类强制实现。生产多个产品需要改动继承结构</td><td>扩展产品和生产具体产品非常方便。但是扩展新对象需要改动抽象工厂接口</td></tr><tr><td>优点</td><td>1. 简单工厂将创建对象的过程和使用对象的过程进行解耦<br />2. 工厂可以创建生产对象的不同实现子类，扩展子类实现非常方便</td><td>1. 工厂方法将工厂生产对象的创建细节延迟到子类<br />2.  克服了简单工厂部分缺点，比如符合开放-关闭原则<br />3.  同样可以对客户端和创建对象工厂进行解耦</td><td>1. 有利于多个产品的对象创建扩展<br />2.  将抽象类转变为接口，可以定义更高级的抽象。方便向上扩展<br />3.  类似制定工厂的生产规则，而具体的细节交由实现接口的子类完成</td></tr><tr><td>缺点</td><td>1. 工厂扩展新的对象需要改动代码，不符合开放-关闭原则<br />2. 简单工厂对应简单的创建过程，所以创建过程复杂会造成工厂的臃肿</td><td>1. 不利于维护，加入工厂方法需要扩展所有的子类都需要实现工厂方法<br />2. 当需要多个产品类的时候，更改会相当的麻烦</td><td>1.  面对新的产品，需要所有的工厂实现类进行实现。<br />2.  最大的缺点是难以扩展新的产品，或者说扩展新产品的代价很大</td></tr><tr><td>总结</td><td>是一种良好的编码和思考方式，但是严格意义上不能算是设计模式</td><td>将具体对象的创建过程延迟到子类，符合开放-关闭原则</td><td>抽象工厂是对工厂方法的升级，分离了多个产品的生产同时，子工厂可以对多个产品的生产细节进行自由控制。</td></tr></tbody></table><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>本次设计模式的文章内容比较长，由于本次设计模式虽然是一个设计模式，但是他存在三种“变体”，所以在什么使用哪一种设计还是需要依靠具体的需求环境来决定。可以看到该设计模式最容易混淆的是工厂方法和抽象工厂。希望通过本文的总结和案例可以让读者更好的了解工厂模式下这两者的使用场景和区别。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      工厂模式三种形式转变
    
    </summary>
    
    
      <category term="设计模式" scheme="https://whitestore.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://whitestore.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>钉钉机器人简单使用</title>
    <link href="https://whitestore.top/2021/02/14/dingding/"/>
    <id>https://whitestore.top/2021/02/14/dingding/</id>
    <published>2021-02-14T03:40:42.000Z</published>
    <updated>2021-02-14T04:21:01.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="钉钉自定义机器人简单使用"><a href="#钉钉自定义机器人简单使用" class="headerlink" title="钉钉自定义机器人简单使用"></a>钉钉自定义机器人简单使用</h1><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>年前公司的需求里面有用到钉钉机器人，使用之后发现真的非常简单，不得不感叹阿里的牛逼，这篇文章总结了一下个人使用钉钉机器人的经验，同时介绍个人据此构建一个工具类来方便后续直接“开箱即用”，希望对于读者有所启发。</p><a id="more"></a><h1 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h1><ol><li>简单的说明一下钉钉自定义机器人使用，注意是自定义机器人</li><li>说明一下个人针对钉钉机器人设计了一个工具类，说明一下设计的思路。（重点）</li><li>汇总一些个人使用钉钉机器人的小坑，同时提供解决办法希望读者参考可以解决问题</li></ol><h1 id="钉钉文档："><a href="#钉钉文档：" class="headerlink" title="钉钉文档："></a>钉钉文档：</h1><p>机器人的使用还是非常简单的，直接参考文档就可以进行构建，如果了解过这一部分可以直接跳到编写工具类的部分进行文章的后续阅读。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmRpbmd0YWxrLmNvbS9kb2N1bWVudC9hcHAvY3VzdG9tLXJvYm90LWFjY2Vzcw==" title="https://developers.dingtalk.com/document/app/custom-robot-access">https://developers.dingtalk.com/document/app/custom-robot-access<i class="fa fa-external-link"></i></span></p><blockquote><p>由于钉钉的官方文档更新较为频繁，这里的连接可能在以后会失效</p></blockquote><h1 id="如何创建一个机器人"><a href="#如何创建一个机器人" class="headerlink" title="如何创建一个机器人"></a>如何创建一个机器人</h1><p>文档里面介绍的比较详细了，我们根据文档的内容进行实战一下即可。这里使用了 <strong>新手体验群</strong> 创建的机器人进行实验。下面的内容包括创建自定义机器人以及测试机器人如何使用。</p><h2 id="创建一个自定义机器人"><a href="#创建一个自定义机器人" class="headerlink" title="创建一个自定义机器人"></a>创建一个自定义机器人</h2><p>随意点击一个机器人，右击菜单，出现“更多机器人”，进入到界面</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213173000.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>点击“更多机器人”</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213173037.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>选择钉钉的自定义机器人进行使用：</p><blockquote><p>这里还有很多其他的机器人，如果感兴趣可以查看钉钉的文档进行更多的了解</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213173121.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>在下面的界面选择添加：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213173313.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>到达下一个界面，根据指示需要填写如下的内容：</p><ul><li>机器人的名称：自己取一个合适的名字，自己喜欢就行</li><li>添加到群组：<strong>关键</strong>的一步，意味着你的机器人要添加到哪一个具体的群组里面进行使用。也意味着只有在这个群组里面的人才可以收到对应的通知。</li></ul><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213173703.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>下面说明一下安全设置的内容：</p><ul><li>自定义关键词：<strong>关键配置</strong>，这里自定义关键词可以按照自己的喜好进行设置。但是一旦设置在发送请求的时候<strong>必须要携带关键词</strong>，请求才会生效，否则会返回对应的错误码<code>31000</code>和对应的错误信息。</li><li>加签：<strong>建议勾上</strong>，这里加签可以在请求中更好的保护接口，同时注意一下加上签名之后要复制一下内容</li><li><strong>IP地址（段）</strong>：这里个人没有进行过测试，所以没有进行勾选，正式的生产环境建议使用IP限制，保证万无一失</li></ul><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213175804.png?ynotemdtimestamp=1613223296738" alt="img"></p><blockquote><p>这里建议保存一下前面和关键字，当然忘记了也可以在构建完成之后从设置里面查看：</p><p>签名：<code>SECf075e3890b7d79ca645e51b42644fc57c2402577d5a955bce51cb980cec0a3b6</code></p><p>关键词：<code>新人</code></p></blockquote><p>至此，我们成功创建了一个钉钉的自定义机器人，整个过程十分简单，这里记得保存一下对应的信息：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213180638.png?ynotemdtimestamp=1613223296738" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050</span><br></pre></td></tr></table></figure><p>上面为个人的配置。发文的时候此机器人<strong>已经删除</strong>，所以读者自己实验即可。</p><h2 id="测试机器人是否可以正常使用"><a href="#测试机器人是否可以正常使用" class="headerlink" title="测试机器人是否可以正常使用"></a>测试机器人是否可以正常使用</h2><p>通过上面的步骤，我们已经构建了一个基本的机器人为我们使用，再进行下一步之前，我们需要验证一下钉钉机器人是否可以正常使用。这里针对不同的平台说下比较简单快捷的验证方法。</p><h3 id="windows-验证方式："><a href="#windows-验证方式：" class="headerlink" title="windows 验证方式："></a>windows 验证方式：</h3><p>windows 推荐使用<code>git</code>的一个<code>shell</code>命令框进行测试，因为windows 本身是没有<code>curl</code>这个命令的，当然也有其他的办法，但是为了图省事直接使用<code>git</code>给我们开发的一个小工具即可。</p><p>如下图所示，我们选择<code>Git Bash Here</code>，打开命令行的界面</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213173435.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>我们根据上一步的机器人配置，构建一个<code>CURL</code>请求进行测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl &#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&amp;timestamp&#x3D;1613211530113&amp;secret&#x3D;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&#39; \</span><br><span class="line">   -H &#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">   -d &#39;&#123;&quot;msgtype&quot;: &quot;text&quot;,&quot;text&quot;: &#123;&quot;content&quot;: &quot;新人内容测试&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213180959.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>不出所料，这里按照官方文档给的方式<strong>验证失败</strong>了，这是为什么呢？原因有几个：</p><ul><li>加签密文：我们设置了加签，所以在请求参数里面要加入对应的<strong>签名密文</strong>，也就是在添加这一步勾选了<strong>签名</strong>这一步。</li><li>时间戳：请求需要传递<strong>时间戳</strong>，但是我们没有在请求参数里面附带时间戳，同时时间戳必须在<strong>系统时间的一小时之内</strong>，超过这个时间即使请求参数正确也无法通过</li></ul><blockquote><p>timestamp = 1613212103494 sign = MO79EJ58O9lmuQJo1dB1KGMhkZI%2BM5KkyD0NYuNe8%2B8%3D</p></blockquote><p>我们根据上面的说明修复一下，注意在URL增加了两个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl &#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&amp;timestamp&#x3D;1613212722591&amp;sign&#x3D;SsKKlkvwM%2F4tsCPE6YoGls8vgkQqWJGHYpvWbW7hTGM%3D&#39; \</span><br><span class="line">   -H &#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">   -d &#39;&#123;&quot;msgtype&quot;: &quot;text&quot;,&quot;text&quot;: &#123;&quot;content&quot;: &quot;新人为什么你这么牛逼&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><blockquote><p>关于这一部分内容，已经汇总到“问题汇总”这一部分，如果还是感到迷惑可以参考。</p></blockquote><p>我们再次验证一下，发现<strong>依然失败</strong>，比较奇怪，个人设置的关键字在请求content里面却失败了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zhaoxudong@LAPTOP-MEUFMP1M MINGW64 &#x2F;d&#x2F;Users&#x2F;zhaoxudong&#x2F;Desktop</span><br><span class="line">$ curl &#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&amp;timestamp&#x3D;1613212722591&amp;sign&#x3D;SsKKlkvwM%2F4tsCPE6YoGls8vgkQqWJGHYpvWbW7hTGM%3D&#39; \</span><br><span class="line">&gt;    -H &#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">&gt;    -d &#39;&#123;&quot;msgtype&quot;: &quot;text&quot;,&quot;text&quot;: &#123;&quot;content&quot;: &quot;新人为什么你这么牛逼&quot;&#125;&#125;&#39;</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   178  100   115  100    63    991    543 --:--:-- --:--:-- --:--:--  1534</span><br><span class="line">&#123;&quot;errcode&quot;:310000,&quot;errmsg&quot;:&quot;keywords not in content, more: [https:&#x2F;&#x2F;ding-doc.dingtalk.com&#x2F;doc#&#x2F;serverapi2&#x2F;qf2nxq]&quot;&#125;</span><br></pre></td></tr></table></figure><p>排查问题之后发现由于windows系统默认使用了<code>gb2312</code>的编码，所以我们此时需要切换一下系统的编码，为了证明是系统编码的问题，我们先验证一下编码：</p><p>打开window的<code>cmd</code>窗口，我们输入<code>chcp</code>命令进入到具体的页面，可以看到下面936，百度一下发现就是<code>GB2312</code>，在请求发送的过程中被转码导致乱码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\zhaoxudong&gt;chcp</span><br><span class="line">活动代码页: 936</span><br></pre></td></tr></table></figure><p>解决办法也比较简单，改一下整改系统的编码即可，关于设置的方法：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JvYmluaHVuYW4vYXJ0aWNsZS9kZXRhaWxzLzEwNjA0NzM0NQ==" title="https://blog.csdn.net/robinhunan/article/details/106047345">https://blog.csdn.net/robinhunan/article/details/106047345<i class="fa fa-external-link"></i></span></p><blockquote><p>插曲：个人在设置过后，因为编码的问题导致编辑器无法编译，经过核实发现是由于<strong>文件夹的编码乱码</strong>找不到类的问题，所以这里建议放置Java项目的时候放置到<strong>全英文</strong>的目录。所以更推荐linux的方式，可以省去很多麻烦</p></blockquote><h3 id="linux-验证方式："><a href="#linux-验证方式：" class="headerlink" title="linux 验证方式："></a>linux 验证方式：</h3><p>linux 验证比较简单，而且出问题的概率比较小，根据window内容得知最后需要<strong>三个</strong>参数才能请求成功，这里直接给出一个相似的CURL请求作为案例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl &#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&amp;timestamp&#x3D;1613212722591&amp;sign&#x3D;SsKKlkvwM%2F4tsCPE6YoGls8vgkQqWJGHYpvWbW7hTGM%3D&#39; \</span><br><span class="line">   -H &#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">   -d &#39;&#123;&quot;msgtype&quot;: &quot;text&quot;,&quot;text&quot;: &#123;&quot;content&quot;: &quot;新人为什么你这么牛逼&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><p>我们把这个请求放到<code>linux</code>命令行里面进行运行，如果errorcode返回0，说明请求成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;errcode&quot;:0,&quot;errmsg&quot;:&quot;ok&quot;&#125;</span><br></pre></td></tr></table></figure><p>请求成功之后，我们可以看到对应的结果：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213185434.png?ynotemdtimestamp=1613223296738" alt="img"></p><blockquote><p>注意一下钉钉机器人不能请求过于频繁。建议限制一下每分钟的请求QPS</p></blockquote><h1 id="编写工具类"><a href="#编写工具类" class="headerlink" title="编写工具类"></a>编写工具类</h1><p>从上一节可以看到，整个钉钉机器人的构建还是十分简单的。但是使用起来不是特别的方便，个人之前有使用钉钉做过一个预警的小需求，为了后续可以直接开箱即用，自己构建了工具类，下面的部分主要说个人的工具类的设计以及个人的构建思路</p><blockquote><p>个人水平有限，工具类还有很大的改进空间，但是对于我来说暂时没有遇到使用的瓶颈。</p></blockquote><h2 id="工具类的代码地址"><a href="#工具类的代码地址" class="headerlink" title="工具类的代码地址"></a>工具类的代码地址</h2><p>这里个人的小工具类整合到了个人小项目里面，想要参考的可以直接进行下载，下面的文章代码也是来源于这个项目里面。</p><blockquote><p><strong>具体请查看：<code>com.zxd.interview.dingrobot</code>这个包</strong></p></blockquote><p>具体的代码地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ludGVydmlldy90cmVlL21hc3Rlci9zcmMvbWFpbi9qYXZhL2NvbS96eGQvaW50ZXJ2aWV3L2Rpbmdyb2JvdA==" title="https://gitee.com/lazyTimes/interview/tree/master/src/main/java/com/zxd/interview/dingrobot">https://gitee.com/lazyTimes/interview/tree/master/src/main/java/com/zxd/interview/dingrobot<i class="fa fa-external-link"></i></span></p><h2 id="构建工具类的思路"><a href="#构建工具类的思路" class="headerlink" title="构建工具类的思路"></a>构建工具类的思路</h2><p>把整个请求的流程需要的组件分为了以下的几个部分：</p><p><strong>构建基本的请求环境</strong>：也就是需要的请求地址，请求签名或者关键字等参数，这些参数都是必须的，否则请求无法正常运行，所以我们提出来作为<strong>环境</strong>使用。</p><p><strong>构建请求参数</strong>：由于钉钉支持非常多的<code>msgtype</code>也就是文本类型，个人参考了一下SDK，对应构建了一个请求的参数类，为了方便扩展，设计了一个接口进行后续的扩展和兼容。</p><p><strong>使用JAVA代码发送请求</strong>：本着最小依赖的原则，使用最常见的<code>HttpClient</code>进行模拟JAVA的请求发送。但是在这个基础上做了一点点的封装，方便后续扩展</p><ol><li>HttpClient的封装，将请求所需要的一些请求参数封装到一个配置对象进行管理</li><li>请求方法的封装，这里用了一个对象进行封装，也可以直接使用Spring封装的<code>org.springframework.web.bind.annotation.RequestMethod</code>或者直接使用枚举构建常量即可。</li><li>构建钉钉请求工具类：最后我们整合上面所有步骤构建一个核心请求工具类，通过环境参数构建请求URL和一些Header设置，以及构建不同的请求方法发送请求，调用HttpClient工具类进行请求发送，以及发送之后转化为结果对象等一系列操作均由该工具类完成，是本次工具类最核心的类。</li><li>构建钉钉的请求Msg：该对象包含了请求所支持的所有JSON参数格式对应的实体对象，根据参数格式构建对应的对象，个人利用<strong>内部类</strong>全部封装到一个对象里面，方便客户端理解调用。</li></ol><p><strong>返回请求结果</strong>：包含了错误码，错误信息，以及其他的参数等，也可以修改为直接返回字符串，由客户端决定如何处理</p><p><strong>请求之后返回结果</strong>：将上面的错误码或者错误信息等封装为一个简单对象进行返回，同样如果不喜欢也可以改为返回字符串的结果。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>在介绍正式的结果之前，我们看下结果，下面是效果截图，包含了钉钉文档里面的所有类型，包含了目前钉钉文档支持的几种主要的类型：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213230526.png?ynotemdtimestamp=1613223296738" alt="测试结果1"></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213230806.png?ynotemdtimestamp=1613223296738" alt="测试截图2"></p><p>下面为单元测试的代码，整个单元测试测试各种不同请求类型，调用工具包发送请求：</p><blockquote><p>注意下面的请求text里面包含了之前请求示例里面设置的关键字，没有关键字是无法请求成功的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import org.apache.commons.codec.binary.Base64;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line">import javax.crypto.Mac;</span><br><span class="line">import javax.crypto.spec.SecretKeySpec;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version v1.0.0</span><br><span class="line"> * @Package : com.zxd.interview.dingrobot</span><br><span class="line"> * @Description : 钉钉机器人测试类</span><br><span class="line"> * @Create on : 2021&#x2F;2&#x2F;7 11:06</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class DingRobotUtilsTest &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">   运行下面五个单元测试的结果</span><br><span class="line">    *&#x2F; </span><br><span class="line">    @Test</span><br><span class="line">    public void testAll() &#123;</span><br><span class="line">        testText();</span><br><span class="line">        testLink();</span><br><span class="line">        testMarkdown();</span><br><span class="line">        testActionCard();</span><br><span class="line">        testFeedCard();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构建当前的系统时间戳</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void generateSystemCurrentTime() throws Exception &#123;</span><br><span class="line">        long currentTimeMillis &#x3D; System.currentTimeMillis();</span><br><span class="line">        String secret &#x3D; &quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;;</span><br><span class="line">        String sign &#x3D; generateSign(currentTimeMillis, secret);</span><br><span class="line">        System.out.println(&quot;timestamp &#x3D; &quot; + currentTimeMillis);</span><br><span class="line">        System.out.println(&quot;sign &#x3D; &quot; + sign);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 测试link类型的请求</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void testLink() &#123;</span><br><span class="line">        DingRobotRequest.Builder builder &#x3D; new DingRobotRequest.Builder();</span><br><span class="line">        DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">                .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">                .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">                .msg(generateLink()).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            DingRobotResponseMsg dingRobotResponseMsg &#x3D; DingRobotUtils.notifyRobot(build);</span><br><span class="line">            System.err.println(JSON.toJSONString(dingRobotResponseMsg));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 测试text类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void testText() &#123;</span><br><span class="line">        DingRobotRequest.Builder builder &#x3D; new DingRobotRequest.Builder();</span><br><span class="line">        DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">                .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">                .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">                .msg(generateText()).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            DingRobotResponseMsg dingRobotResponseMsg &#x3D; DingRobotUtils.notifyRobot(build);</span><br><span class="line">            System.err.println(JSON.toJSONString(dingRobotResponseMsg));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**测试markdown 类型 *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void testMarkdown() &#123;</span><br><span class="line">        DingRobotRequest.Builder builder &#x3D; new DingRobotRequest.Builder();</span><br><span class="line">        DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">                .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">                .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">                .msg(generateMarkdown()).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            DingRobotResponseMsg dingRobotResponseMsg &#x3D; DingRobotUtils.notifyRobot(build);</span><br><span class="line">            System.err.println(JSON.toJSONString(dingRobotResponseMsg));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     &#x2F;**测试ActionCard 类型 *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void testActionCard() &#123;</span><br><span class="line">        DingRobotRequest.Builder builder &#x3D; new DingRobotRequest.Builder();</span><br><span class="line">        DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">                .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">                .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">                .msg(generateActionCard()).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            DingRobotResponseMsg dingRobotResponseMsg &#x3D; DingRobotUtils.notifyRobot(build);</span><br><span class="line">            System.err.println(JSON.toJSONString(dingRobotResponseMsg));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**测试FeedCard 类型 *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void testFeedCard() &#123;</span><br><span class="line">        DingRobotRequest.Builder builder &#x3D; new DingRobotRequest.Builder();</span><br><span class="line">        DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">                .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">                .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">                .msg(generateFeed()).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            DingRobotResponseMsg dingRobotResponseMsg &#x3D; DingRobotUtils.notifyRobot(build);</span><br><span class="line">            System.err.println(JSON.toJSONString(dingRobotResponseMsg));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequestBody generateFeed() &#123;</span><br><span class="line">        List&lt;DingRobotRequestBody.FeedCard.FeedItem&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        DingRobotRequestBody dingRobotRequestBody &#x3D; new DingRobotRequestBody();</span><br><span class="line">        DingRobotRequestBody.FeedCard feedCard &#x3D; new DingRobotRequestBody.FeedCard();</span><br><span class="line">        DingRobotRequestBody.FeedCard.FeedItem feedItem &#x3D; new DingRobotRequestBody.FeedCard.FeedItem();</span><br><span class="line">        feedItem.setMessageURL(&quot;https:&#x2F;&#x2F;www.dingtalk.com&#x2F;&quot;);</span><br><span class="line">        feedItem.setTitle(&quot;新人时代的火车向前开&quot;);</span><br><span class="line">        feedItem.setPicURL(&quot;https:&#x2F;&#x2F;img.alicdn.com&#x2F;tfs&#x2F;TB1NwmBEL9TBuNjy1zbXXXpepXa-2400-1218.png&quot;);</span><br><span class="line">        list.add(feedItem);</span><br><span class="line">        feedCard.setLinks(list);</span><br><span class="line">        dingRobotRequestBody.setFeedCard(feedCard);</span><br><span class="line">        dingRobotRequestBody.setMsgType(&quot;feedCard&quot;);</span><br><span class="line">        return dingRobotRequestBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequestBody generateActionCard() &#123;</span><br><span class="line">        DingRobotRequestBody dingRobotRequestBody &#x3D; new DingRobotRequestBody();</span><br><span class="line">        DingRobotRequestBody.ActionCard actionCard &#x3D; new DingRobotRequestBody.ActionCard();</span><br><span class="line">        actionCard.setBtnOrientation(&quot;0&quot;);</span><br><span class="line">        actionCard.setSingleTitle(&quot;阅读全文&quot;);</span><br><span class="line">        actionCard.setSingleURL(&quot;https:&#x2F;&#x2F;www.dingtalk.com&#x2F;&quot;);</span><br><span class="line">        actionCard.setText(&quot;新人![screenshot](https:&#x2F;&#x2F;gw.alicdn.com&#x2F;tfs&#x2F;TB1ut3xxbsrBKNjSZFpXXcXhFXa-846-786.png) \n&quot; +</span><br><span class="line">                &quot; ### 乔布斯 20 年前想打造的苹果咖啡厅 \n&quot; +</span><br><span class="line">                &quot; Apple Store 的设计正从原来满满的科技感走向生活化，而其生活化的走向其实可以追溯到 20 年前苹果一个建立咖啡馆的计划&quot;);</span><br><span class="line">        actionCard.setTitle(&quot;乔布斯 20 年前想打造一间苹果咖啡厅，而它正是 Apple Store 的前身&quot;);</span><br><span class="line">        dingRobotRequestBody.setMsgType(&quot;actionCard&quot;);</span><br><span class="line">        dingRobotRequestBody.setActionCard(actionCard);</span><br><span class="line">        return dingRobotRequestBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequestBody generateMarkdown() &#123;</span><br><span class="line">        DingRobotRequestBody dingRobotRequestBody &#x3D; new DingRobotRequestBody();</span><br><span class="line">        DingRobotRequestBody.MarkDown markDown &#x3D; new DingRobotRequestBody.MarkDown();</span><br><span class="line">        dingRobotRequestBody.setMsgType(&quot;markdown&quot;);</span><br><span class="line">        markDown.setTitle(&quot;杭州天气&quot;);</span><br><span class="line">        markDown.setText(&quot;新人测试 标题\n&quot; +</span><br><span class="line">                &quot;# 一级标题\n&quot; +</span><br><span class="line">                &quot;## 二级标题\n&quot; +</span><br><span class="line">                &quot;### 三级标题\n&quot; +</span><br><span class="line">                &quot;#### 四级标题\n&quot; +</span><br><span class="line">                &quot;##### 五级标题\n&quot; +</span><br><span class="line">                &quot;###### 六级标题\n&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;引用\n&quot; +</span><br><span class="line">                &quot;&gt; A man who stands for nothing will fall for anything.\n&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;文字加粗、斜体\n&quot; +</span><br><span class="line">                &quot;**bold**\n&quot; +</span><br><span class="line">                &quot;*italic*\n&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;链接\n&quot; +</span><br><span class="line">                &quot;[this is a link](http:&#x2F;&#x2F;name.com)\n&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;图片\n&quot; +</span><br><span class="line">                &quot;![](http:&#x2F;&#x2F;name.com&#x2F;pic.jpg)\n&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;无序列表\n&quot; +</span><br><span class="line">                &quot;- item1\n&quot; +</span><br><span class="line">                &quot;- item2\n&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;有序列表\n&quot; +</span><br><span class="line">                &quot;1. item1\n&quot; +</span><br><span class="line">                &quot;2. item2&quot;);</span><br><span class="line">        dingRobotRequestBody.setMarkDown(markDown);</span><br><span class="line">        return dingRobotRequestBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequestBody generateText() &#123;</span><br><span class="line">        DingRobotRequestBody dingRobotRequestBody &#x3D; new DingRobotRequestBody();</span><br><span class="line">        DingRobotRequestBody.Text text &#x3D; new DingRobotRequestBody.Text();</span><br><span class="line">        text.setContent(&quot;新人为什么这么牛逼&quot;);</span><br><span class="line">        DingRobotRequestBody.At at &#x3D; getnerateAt();</span><br><span class="line">        dingRobotRequestBody.setMsgType(&quot;text&quot;);</span><br><span class="line">        dingRobotRequestBody.setAt(at);</span><br><span class="line">        dingRobotRequestBody.setText(text);</span><br><span class="line">        return dingRobotRequestBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequestBody generateLink() &#123;</span><br><span class="line">        DingRobotRequestBody dingRobotRequestBody &#x3D; new DingRobotRequestBody();</span><br><span class="line">        DingRobotRequestBody.Link link &#x3D; new DingRobotRequestBody.Link();</span><br><span class="line">        link.setMessageUrl(&quot;https:&#x2F;&#x2F;www.dingtalk.com&#x2F;s?__biz&#x3D;MzA4NjMwMTA2Ng&#x3D;&#x3D;&amp;mid&#x3D;2650316842&amp;idx&#x3D;1&amp;sn&#x3D;60da3ea2b29f1dcc43a7c8e4a7c97a16&amp;scene&#x3D;2&amp;srcid&#x3D;09189AnRJEdIiWVaKltFzNTw&amp;from&#x3D;timeline&amp;isappinstalled&#x3D;0&amp;key&#x3D;&amp;ascene&#x3D;2&amp;uin&#x3D;&amp;devicetype&#x3D;android-23&amp;version&#x3D;26031933&amp;nettype&#x3D;WIFI&quot;);</span><br><span class="line">        link.setPicUrl(&quot;&quot;);</span><br><span class="line">        link.setTitle(&quot;时代的火车向前开&quot;);</span><br><span class="line">        link.setText(&quot;新人：这个即将发布的新版本,创始人xx称它为红树林。而在此之前,每当面临重大升级,产品经理们都会取一个应景的代号,这一次,为什么是红树林&quot;);</span><br><span class="line">        DingRobotRequestBody.At at &#x3D; getnerateAt();</span><br><span class="line">        dingRobotRequestBody.setMsgType(&quot;link&quot;);</span><br><span class="line">        dingRobotRequestBody.setAt(at);</span><br><span class="line">        dingRobotRequestBody.setLink(link);</span><br><span class="line">        return dingRobotRequestBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构建at请求</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private DingRobotRequestBody.At getnerateAt() &#123;</span><br><span class="line">        DingRobotRequestBody.At at &#x3D; new DingRobotRequestBody.At();</span><br><span class="line">        at.setAtAll(true);</span><br><span class="line">        at.setAtMobiles(Arrays.asList(&quot;xxxxx&quot;, &quot;123456789&quot;));</span><br><span class="line">        return at;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构建签名方法</span><br><span class="line">     *</span><br><span class="line">     * @param timestamp 时间戳</span><br><span class="line">     * @param secret    秘钥</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String generateSign(Long timestamp, String secret) throws Exception &#123;</span><br><span class="line">        String stringToSign &#x3D; timestamp + &quot;\n&quot; + secret;</span><br><span class="line">        Mac mac &#x3D; Mac.getInstance(&quot;HmacSHA256&quot;);</span><br><span class="line">        mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), &quot;HmacSHA256&quot;));</span><br><span class="line">        byte[] signData &#x3D; mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        return URLEncoder.encode(new String(Base64.encodeBase64(signData)), &quot;UTF-8&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建工具类："><a href="#构建工具类：" class="headerlink" title="构建工具类："></a>构建工具类：</h2><p>下面就上面的单元测试，说明一下个人的基本设计。我们根据思路构建一个支持拿来即用的钉钉工具类。</p><h3 id="类结构介绍："><a href="#类结构介绍：" class="headerlink" title="类结构介绍："></a>类结构介绍：</h3><h4 id="Maven依赖："><a href="#Maven依赖：" class="headerlink" title="Maven依赖："></a>Maven依赖：</h4><p>在进行具体的代码编写之前，需要引入对应的依赖，个人秉持最小依赖的原则，使用的三方jar包仅仅为一些测试工具包和Httpclient请求工具包还有最熟悉的fastjson的工具包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.httpcomponents&#x2F;httpclient --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.httpcomponents&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;httpclient&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.5.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.alibaba&#x2F;fastjson --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.75&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;junit&#x2F;junit --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="类结构"><a href="#类结构" class="headerlink" title="类结构:"></a>类结构:</h4><p>类结构包含了之前设计思路里面说明的情况，包含请求类，工具类，参数封装和请求对象结构封装等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ DingRobotRequest.java钉钉请求对象</span><br><span class="line">+ DingRobotRequestAble.java请求接口，允许发送钉钉请求的接口</span><br><span class="line">+ DingRobotRequestBody.java 允许发送钉钉请求的接口具体的实现类，比较重要，对接文档的钉钉对象</span><br><span class="line">+ DingRobotRequestMsg.java废弃对象，但是依然保留s</span><br><span class="line">+ DingRobotResponseMsg.java请求返回对象</span><br><span class="line">+ DingRobotUtils.java钉钉请求工具类，非常重要的一个类</span><br><span class="line">+ HttpClientUtil.javahttpclient请求工具类</span><br><span class="line">+ HttpConfig.java请求参数构建类</span><br><span class="line">+ HttpMethods.java请求方法类</span><br></pre></td></tr></table></figure><h3 id="构建基本的请求环境"><a href="#构建基本的请求环境" class="headerlink" title="构建基本的请求环境"></a>构建基本的请求环境</h3><p>构建基本的请求环境，我们使用对象来封装所有的环境参数，并且使用建造模式构建一个建造器，使用建造来构建我们需要的环境参数，它的使用方式如下：</p><ul><li>构建请求URL</li><li>构建请求accessToken</li><li>构建请求msg，<strong>重点</strong>，可以通过构建对应的请求来实现发送不同的信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">                .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">                .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">                .msg(generateActionCard()).build();</span><br></pre></td></tr></table></figure><p>具体的源代码如下，包含了几个简单的必要参数，以及一个建造器，注意对于构造器的私有化，对外只允许使用构建器进行初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version v1.0.0</span><br><span class="line"> * @Package : com.dcc.common.field</span><br><span class="line"> * @Description : 钉钉机器人请求实体类</span><br><span class="line"> * @Create on : 2021&#x2F;2&#x2F;5 15:40</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class DingRobotRequest &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求URL</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String url;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * token</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String accessToken;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 秘钥</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String secret;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求msg</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private DingRobotRequestBody msg;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequest()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequest(Builder builder) &#123;</span><br><span class="line">        this.url &#x3D; builder.url;</span><br><span class="line">        this.accessToken &#x3D; builder.accessToken;</span><br><span class="line">        this.secret &#x3D; builder.secret;</span><br><span class="line">        this.msg &#x3D; builder.msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Builder &#123;</span><br><span class="line"></span><br><span class="line">        private String url;</span><br><span class="line">        private String accessToken;</span><br><span class="line">        private String secret;</span><br><span class="line">        private DingRobotRequestBody msg;</span><br><span class="line"></span><br><span class="line">        public DingRobotRequest.Builder url(String url)&#123;</span><br><span class="line">            this.url &#x3D; url;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public DingRobotRequest.Builder accessToken(String accessToken)&#123;</span><br><span class="line">            this.accessToken &#x3D; accessToken;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public DingRobotRequest.Builder secret(String secret)&#123;</span><br><span class="line">            this.secret &#x3D; secret;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public DingRobotRequest.Builder msg(DingRobotRequestBody msg)&#123;</span><br><span class="line">            this.msg &#x3D; msg;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public DingRobotRequest build()&#123;</span><br><span class="line">            return new DingRobotRequest(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUrl() &#123;</span><br><span class="line">        return url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUrl(String url) &#123;</span><br><span class="line">        this.url &#x3D; url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAccessToken() &#123;</span><br><span class="line">        return accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAccessToken(String accessToken) &#123;</span><br><span class="line">        this.accessToken &#x3D; accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSecret() &#123;</span><br><span class="line">        return secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSecret(String secret) &#123;</span><br><span class="line">        this.secret &#x3D; secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DingRobotRequestBody getMsg() &#123;</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMsg(DingRobotRequestBody msg) &#123;</span><br><span class="line">        this.msg &#x3D; msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;DingRobotRequest&#123;&quot; +</span><br><span class="line">                &quot;url&#x3D;&#39;&quot; + url + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, accessToken&#x3D;&#39;&quot; + accessToken + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, secret&#x3D;&#39;&quot; + secret + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, msg&#x3D;&#39;&quot; + msg + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建请求参数"><a href="#构建请求参数" class="headerlink" title="构建请求参数"></a>构建请求参数</h3><p>下面是请求参数的构建案例，我们可以使用链式调用的方式构建不同的request请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    * 钉钉机器人的默认配置</span><br><span class="line">    *</span><br><span class="line">    * @param dingRobotRequest    钉钉机器人请求对象</span><br><span class="line">    * @param dingRobotRequestMsg 钉钉机器人请求实体</span><br><span class="line">    * @return</span><br><span class="line">    *&#x2F;</span><br><span class="line">   private static HttpConfig buildDefaultHttpConfig(DingRobotRequest dingRobotRequest, DingRobotRequestAble dingRobotRequestMsg) &#123;</span><br><span class="line">       return HttpConfig.custom().headers(defaultBasicHeader())</span><br><span class="line">               .url(dingRobotRequest.getUrl())</span><br><span class="line">               .encoding(&quot;UTF-8&quot;)</span><br><span class="line">               .method(HttpMethods.POST)</span><br><span class="line">               .json(JSON.toJSONString(dingRobotRequestMsg));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>从上面的案例可以看到下面对于请求配置类，构建<code>HttpConfig</code>请求，同样类似构建器进行对象的参数构建，我们定义了基本的请求<code>encoding</code>、请求<code>header</code>，请求方法参数，请求的context等对应的参数配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 请求配置类</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class HttpConfig &#123;</span><br><span class="line"></span><br><span class="line">    private HttpConfig() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 传入参数特定类型</span><br><span class="line">    public static final String ENTITY_STRING &#x3D; &quot;$ENTITY_STRING$&quot;;</span><br><span class="line">    public static final String ENTITY_MULTIPART &#x3D; &quot;$ENTITY_MULTIPART$&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取实例</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static HttpConfig custom() &#123;</span><br><span class="line">        return new HttpConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * HttpClient对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private HttpClient client;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Header头信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Header[] headers;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 是否返回response的headers</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private boolean isReturnRespHeaders;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private HttpMethods method &#x3D; HttpMethods.GET;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求方法名称</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String methodName;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 用于cookie操作</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private HttpContext context;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 传递参数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Map&lt;String, Object&gt; map;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 以json格式作为输入参数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String json;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输入输出编码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String encoding &#x3D; Charset.defaultCharset().displayName();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输入编码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String inenc;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输出编码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String outenc;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解决多线程下载时，strean被close的问题</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static final ThreadLocal&lt;OutputStream&gt; outs &#x3D; new ThreadLocal&lt;OutputStream&gt;();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解决多线程处理时，url被覆盖问题</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static final ThreadLocal&lt;String&gt; urls &#x3D; new ThreadLocal&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * HttpClient对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig client(HttpClient client) &#123;</span><br><span class="line">        this.client &#x3D; client;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 资源url</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig url(String url) &#123;</span><br><span class="line">        urls.set(url);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Header头信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig headers(Header[] headers) &#123;</span><br><span class="line">        this.headers &#x3D; headers;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Header头信息(是否返回response中的headers)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig headers(Header[] headers, boolean isReturnRespHeaders) &#123;</span><br><span class="line">        this.headers &#x3D; headers;</span><br><span class="line">        this.isReturnRespHeaders &#x3D; isReturnRespHeaders;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig method(HttpMethods method) &#123;</span><br><span class="line">        this.method &#x3D; method;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig methodName(String methodName) &#123;</span><br><span class="line">        this.methodName &#x3D; methodName;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * cookie操作相关</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig context(HttpContext context) &#123;</span><br><span class="line">        this.context &#x3D; context;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 传递参数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig map(Map&lt;String, Object&gt; map) &#123;</span><br><span class="line">        synchronized (getClass()) &#123;</span><br><span class="line">            if (this.map &#x3D;&#x3D; null || map &#x3D;&#x3D; null) &#123;</span><br><span class="line">                this.map &#x3D; map;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.map.putAll(map);</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 以json格式字符串作为参数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig json(String json) &#123;</span><br><span class="line">        this.json &#x3D; json;</span><br><span class="line">        map &#x3D; new HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(ENTITY_STRING, json);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 上传文件时用到</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig files(String[] filePaths) &#123;</span><br><span class="line">        return files(filePaths, &quot;file&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 上传文件时用到</span><br><span class="line">     *</span><br><span class="line">     * @param filePaths 待上传文件所在路径</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig files(String[] filePaths, String inputName) &#123;</span><br><span class="line">        return files(filePaths, inputName, false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 上传文件时用到</span><br><span class="line">     *</span><br><span class="line">     * @param filePaths                     待上传文件所在路径</span><br><span class="line">     * @param inputName                     即file input 标签的name值，默认为file</span><br><span class="line">     * @param forceRemoveContentTypeChraset</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig files(String[] filePaths, String inputName, boolean forceRemoveContentTypeChraset) &#123;</span><br><span class="line">        synchronized (getClass()) &#123;</span><br><span class="line">            if (this.map &#x3D;&#x3D; null) &#123;</span><br><span class="line">                this.map &#x3D; new HashMap&lt;String, Object&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(ENTITY_MULTIPART, filePaths);</span><br><span class="line">        map.put(ENTITY_MULTIPART + &quot;.name&quot;, inputName);</span><br><span class="line">        map.put(ENTITY_MULTIPART + &quot;.rmCharset&quot;, forceRemoveContentTypeChraset);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输入输出编码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig encoding(String encoding) &#123;</span><br><span class="line">        &#x2F;&#x2F;设置输入输出</span><br><span class="line">        inenc(encoding);</span><br><span class="line">        outenc(encoding);</span><br><span class="line">        this.encoding &#x3D; encoding;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输入编码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig inenc(String inenc) &#123;</span><br><span class="line">        this.inenc &#x3D; inenc;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输出编码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig outenc(String outenc) &#123;</span><br><span class="line">        this.outenc &#x3D; outenc;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输出流对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig out(OutputStream out) &#123;</span><br><span class="line">        outs.set(out);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public HttpClient client() &#123;</span><br><span class="line">        return client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Header[] headers() &#123;</span><br><span class="line">        return headers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isReturnRespHeaders() &#123;</span><br><span class="line">        return isReturnRespHeaders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String url() &#123;</span><br><span class="line">        return urls.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public HttpMethods method() &#123;</span><br><span class="line">        return method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String methodName() &#123;</span><br><span class="line">        return methodName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public HttpContext context() &#123;</span><br><span class="line">        return context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Map&lt;String, Object&gt; map() &#123;</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String json() &#123;</span><br><span class="line">        return json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String encoding() &#123;</span><br><span class="line">        return encoding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String inenc() &#123;</span><br><span class="line">        return inenc &#x3D;&#x3D; null ? encoding : inenc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String outenc() &#123;</span><br><span class="line">        return outenc &#x3D;&#x3D; null ? encoding : outenc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public OutputStream out() &#123;</span><br><span class="line">        return outs.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用JAVA代码发送请求"><a href="#使用JAVA代码发送请求" class="headerlink" title="使用JAVA代码发送请求"></a>使用JAVA代码发送请求</h3><p>之前说明，我们使用最常用的<code>Httpclient</code>进行设计请求，根据<code>Httpclient</code>请求工具包构建一个基本的工具类：</p><blockquote><p>这个类是一个很难复用和扩展的高耦合类，并且设计不是非常良好。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * httpclient 请求工具封装类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class HttpClientUtil &#123;</span><br><span class="line"></span><br><span class="line">public static String doGet(String url, Map&lt;String, String&gt; param) &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建Httpclient对象</span><br><span class="line">CloseableHttpClient httpclient &#x3D; HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">String resultString &#x3D; &quot;&quot;;</span><br><span class="line">CloseableHttpResponse response &#x3D; null;</span><br><span class="line">try &#123;</span><br><span class="line">&#x2F;&#x2F; 创建uri</span><br><span class="line">URIBuilder builder &#x3D; new URIBuilder(url);</span><br><span class="line">if (param !&#x3D; null) &#123;</span><br><span class="line">for (String key : param.keySet()) &#123;</span><br><span class="line">builder.addParameter(key, param.get(key));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">URI uri &#x3D; builder.build();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建http GET请求</span><br><span class="line">HttpGet httpGet &#x3D; new HttpGet(uri);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行请求</span><br><span class="line">response &#x3D; httpclient.execute(httpGet);</span><br><span class="line">&#x2F;&#x2F; 判断返回状态是否为200</span><br><span class="line">if (response.getStatusLine().getStatusCode() &#x3D;&#x3D; 200) &#123;</span><br><span class="line">resultString &#x3D; EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if (response !&#x3D; null) &#123;</span><br><span class="line">response.close();</span><br><span class="line">&#125;</span><br><span class="line">httpclient.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return resultString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String doGet(String url) &#123;</span><br><span class="line">return doGet(url, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String doPost(String url, Map&lt;String, String&gt; param) &#123;</span><br><span class="line">&#x2F;&#x2F; 创建Httpclient对象</span><br><span class="line">CloseableHttpClient httpClient &#x3D; HttpClients.createDefault();</span><br><span class="line">CloseableHttpResponse response &#x3D; null;</span><br><span class="line">String resultString &#x3D; &quot;&quot;;</span><br><span class="line">try &#123;</span><br><span class="line">&#x2F;&#x2F; 创建Http Post请求</span><br><span class="line">HttpPost httpPost &#x3D; new HttpPost(url);</span><br><span class="line">&#x2F;&#x2F; 创建参数列表</span><br><span class="line">if (param !&#x3D; null) &#123;</span><br><span class="line">List&lt;NameValuePair&gt; paramList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (String key : param.keySet()) &#123;</span><br><span class="line">paramList.add(new BasicNameValuePair(key, param.get(key)));</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 模拟表单</span><br><span class="line">UrlEncodedFormEntity entity &#x3D; new UrlEncodedFormEntity(paramList);</span><br><span class="line">httpPost.setEntity(entity);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 执行http请求</span><br><span class="line">response &#x3D; httpClient.execute(httpPost);</span><br><span class="line">resultString &#x3D; EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">try &#123;</span><br><span class="line">response.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return resultString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String doPost(String url) &#123;</span><br><span class="line">return doPost(url, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String doPostJson(String url, String json) &#123;</span><br><span class="line">&#x2F;&#x2F; 创建Httpclient对象</span><br><span class="line">CloseableHttpClient httpClient &#x3D; HttpClients.createDefault();</span><br><span class="line">CloseableHttpResponse response &#x3D; null;</span><br><span class="line">String resultString &#x3D; &quot;&quot;;</span><br><span class="line">try &#123;</span><br><span class="line">&#x2F;&#x2F; 创建Http Post请求</span><br><span class="line">HttpPost httpPost &#x3D; new HttpPost(url);</span><br><span class="line">&#x2F;&#x2F; 创建请求内容</span><br><span class="line">StringEntity entity &#x3D; new StringEntity(json, ContentType.APPLICATION_JSON);</span><br><span class="line">httpPost.setEntity(entity);</span><br><span class="line">&#x2F;&#x2F; 执行http请求</span><br><span class="line">response &#x3D; httpClient.execute(httpPost);</span><br><span class="line">resultString &#x3D; EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(response !&#x3D; null)&#123;</span><br><span class="line">response.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return resultString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据请求Config 进行请求发送</span><br><span class="line"> * @param httpConfig</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static String send(HttpConfig httpConfig) &#123;</span><br><span class="line">return doPostJson(httpConfig.url(), httpConfig.json());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着根据请求的结果设计一个钉钉机器人的返回对象，返回对象的设计也比较的简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version v1.0.0</span><br><span class="line"> * @Package : com.dcc.common.field</span><br><span class="line"> * @Description : 钉钉机器人返回对象</span><br><span class="line"> * @Create on : 2021&#x2F;2&#x2F;5 18:26</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class DingRobotResponseMsg &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 错误码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String errcode;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 错误信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String errmsg;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 更多链接</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String more;</span><br><span class="line"></span><br><span class="line">    public DingRobotResponseMsg(String errcode, String errmsg, String more) &#123;</span><br><span class="line">        this.errcode &#x3D; errcode;</span><br><span class="line">        this.errmsg &#x3D; errmsg;</span><br><span class="line">        this.more &#x3D; more;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DingRobotResponseMsg() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getErrcode() &#123;</span><br><span class="line">        return errcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getErrmsg() &#123;</span><br><span class="line">        return errmsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMore() &#123;</span><br><span class="line">        return more;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setErrcode(String errcode) &#123;</span><br><span class="line">        this.errcode &#x3D; errcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setErrmsg(String errmsg) &#123;</span><br><span class="line">        this.errmsg &#x3D; errmsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMore(String more) &#123;</span><br><span class="line">        this.more &#x3D; more;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，也是最重要的，我们要根据钉钉的文档，构建一个所有类型的请求对象类，这个类包含了钉钉文档目前支持的所有类型。内部使用了大量的内部类，客户端需要了解一定的细节才可以具体的调用。下面简要说明一下内容类的基本使用结构。</p><ul><li>At 艾特对象内部类</li><li>Text 文本类型</li><li>Link 请求链接类型</li><li>MarkDown markdown类型</li><li>ActionCard 整体跳转类型</li><li>FeedCard 分享卡片类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version v1.0.0</span><br><span class="line"> * @Package : com.dcc.common.field</span><br><span class="line"> * @Description : 钉钉机器人请求实体对象</span><br><span class="line"> * 请求案例：&#123;&quot;msgtype&quot;: &quot;text&quot;,&quot;text&quot;: &#123;&quot;content&quot;: &quot;自定义具体内容&quot;&#125;&#125;</span><br><span class="line"> * @link &#123;https:&#x2F;&#x2F;developers.dingtalk.com&#x2F;document&#x2F;app&#x2F;custom-robot-access&#125;</span><br><span class="line"> *</span><br><span class="line"> * @Create on : 2021&#x2F;2&#x2F;5 11:55</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class DingRobotRequestBody implements DingRobotRequestAble &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 艾特对象内容</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private At at;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String msgtype;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 文本类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Text text;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 连接类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Link link;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * markdown 类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private MarkDown markdown;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 整体跳转ActionCard类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private ActionCard actionCard;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * FeedCard类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private FeedCard feedCard;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * FeedCard类型</span><br><span class="line">     *</span><br><span class="line">     * msgtype    String是此消息类型为固定feedCard。</span><br><span class="line">     * title    String是单条信息文本。</span><br><span class="line">     * messageURLString是点击单条信息到跳转链接。</span><br><span class="line">     * picURL    String是单条信息后面图片的URL。</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class FeedCard&#123;</span><br><span class="line"></span><br><span class="line">        private List&lt;FeedItem&gt; links;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 代表 FeedCard类型 子类型</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public static class FeedItem&#123;</span><br><span class="line"></span><br><span class="line">            private String title;</span><br><span class="line"></span><br><span class="line">            private String messageURL;</span><br><span class="line"></span><br><span class="line">            private String picURL;</span><br><span class="line"></span><br><span class="line">            public String getTitle() &#123;</span><br><span class="line">                return title;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void setTitle(String title) &#123;</span><br><span class="line">                this.title &#x3D; title;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public String getMessageURL() &#123;</span><br><span class="line">                return messageURL;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void setMessageURL(String messageURL) &#123;</span><br><span class="line">                this.messageURL &#x3D; messageURL;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public String getPicURL() &#123;</span><br><span class="line">                return picURL;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void setPicURL(String picURL) &#123;</span><br><span class="line">                this.picURL &#x3D; picURL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;FeedItem&gt; getLinks() &#123;</span><br><span class="line">            return links;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setLinks(List&lt;FeedItem&gt; links) &#123;</span><br><span class="line">            this.links &#x3D; links;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 整体跳转ActionCard类型</span><br><span class="line">     * msgtype        String是消息类型，此时固定为：actionCard。</span><br><span class="line">     * title        String是首屏会话透出的展示内容。</span><br><span class="line">     * text            String是markdown格式的消息。</span><br><span class="line">     * singleTitle    String是单个按钮的标题。</span><br><span class="line">     *</span><br><span class="line">     * 注意 设置此项和singleURL后，btns无效。</span><br><span class="line">     *</span><br><span class="line">     * singleURL    String是点击singleTitle按钮触发的URL。</span><br><span class="line">     * btnOrientationString否0：按钮竖直排列1：按钮横向排列</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class ActionCard&#123;</span><br><span class="line"></span><br><span class="line">        private String title;</span><br><span class="line"></span><br><span class="line">        private String text;</span><br><span class="line"></span><br><span class="line">        private String btnOrientation;</span><br><span class="line"></span><br><span class="line">        private String singleTitle;</span><br><span class="line"></span><br><span class="line">        private String singleURL;</span><br><span class="line"></span><br><span class="line">        public String getTitle() &#123;</span><br><span class="line">            return title;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setTitle(String title) &#123;</span><br><span class="line">            this.title &#x3D; title;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getText() &#123;</span><br><span class="line">            return text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setText(String text) &#123;</span><br><span class="line">            this.text &#x3D; text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getBtnOrientation() &#123;</span><br><span class="line">            return btnOrientation;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setBtnOrientation(String btnOrientation) &#123;</span><br><span class="line">            this.btnOrientation &#x3D; btnOrientation;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getSingleTitle() &#123;</span><br><span class="line">            return singleTitle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setSingleTitle(String singleTitle) &#123;</span><br><span class="line">            this.singleTitle &#x3D; singleTitle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getSingleURL() &#123;</span><br><span class="line">            return singleURL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setSingleURL(String singleURL) &#123;</span><br><span class="line">            this.singleURL &#x3D; singleURL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 艾特类</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class At&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 是否通知全部人</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private boolean atAll;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 需要@的手机号数组</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private List&lt;String&gt; atMobiles;</span><br><span class="line"></span><br><span class="line">        public boolean isAtAll() &#123;</span><br><span class="line">            return atAll;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setAtAll(boolean atAll) &#123;</span><br><span class="line">            this.atAll &#x3D; atAll;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;String&gt; getAtMobiles() &#123;</span><br><span class="line">            return atMobiles;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setAtMobiles(List&lt;String&gt; atMobiles) &#123;</span><br><span class="line">            this.atMobiles &#x3D; atMobiles;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *</span><br><span class="line">     * markdown 类型， 可以发送markdown 的语法格式</span><br><span class="line">     * msgtype    String是消息类型，此时固定为：markdown。</span><br><span class="line">     * title    String是首屏会话透出的展示内容。</span><br><span class="line">     * text        String是markdown格式的消息。</span><br><span class="line">     * atMobilesArray否被@人的手机号。 注意 在text内容里要有@人的手机号。</span><br><span class="line">     * isAtAllBoolean否是否@所有人。</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class MarkDown&#123;</span><br><span class="line"></span><br><span class="line">        private String title;</span><br><span class="line"></span><br><span class="line">        private String text;</span><br><span class="line"></span><br><span class="line">        public String getTitle() &#123;</span><br><span class="line">            return title;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setTitle(String title) &#123;</span><br><span class="line">            this.title &#x3D; title;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getText() &#123;</span><br><span class="line">            return text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setText(String text) &#123;</span><br><span class="line">            this.text &#x3D; text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 钉钉请求：链接类型</span><br><span class="line">     *</span><br><span class="line">         msgtype    String是消息类型，此时固定为：link。</span><br><span class="line">         title        String是消息标题。</span><br><span class="line">         text        String是消息内容。如果太长只会部分展示。</span><br><span class="line">         messageUrl    String是点击消息跳转的URL。</span><br><span class="line">         picUrl        String否图片URL。</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class Link&#123;</span><br><span class="line"></span><br><span class="line">        private String text;</span><br><span class="line"></span><br><span class="line">        private String messageUrl;</span><br><span class="line"></span><br><span class="line">        private String picUrl;</span><br><span class="line"></span><br><span class="line">        private String title;</span><br><span class="line"></span><br><span class="line">        public String getText() &#123;</span><br><span class="line">            return text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setText(String text) &#123;</span><br><span class="line">            this.text &#x3D; text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getMessageUrl() &#123;</span><br><span class="line">            return messageUrl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setMessageUrl(String messageUrl) &#123;</span><br><span class="line">            this.messageUrl &#x3D; messageUrl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getPicUrl() &#123;</span><br><span class="line">            return picUrl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setPicUrl(String picUrl) &#123;</span><br><span class="line">            this.picUrl &#x3D; picUrl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getTitle() &#123;</span><br><span class="line">            return title;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setTitle(String title) &#123;</span><br><span class="line">            this.title &#x3D; title;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 钉钉请求：纯文本类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class Text&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * text请求内容</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private String content;</span><br><span class="line"></span><br><span class="line">        public String getContent() &#123;</span><br><span class="line">            return content;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setContent(String content) &#123;</span><br><span class="line">            this.content &#x3D; content;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setMsgType(String msgtype) &#123;</span><br><span class="line">        this.msgtype &#x3D; msgtype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setText(Text text) &#123;</span><br><span class="line">        this.text &#x3D; text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setLink(Link link) &#123;</span><br><span class="line">        this.link &#x3D; link;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setMarkDown(MarkDown markDown) &#123;</span><br><span class="line">        this.markdown &#x3D; markDown;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setActionCard(ActionCard actionCard) &#123;</span><br><span class="line">        this.actionCard &#x3D; actionCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setFeedCard(FeedCard feedCard) &#123;</span><br><span class="line">        this.feedCard &#x3D; feedCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public At getAt() &#123;</span><br><span class="line">        return at;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAt(At at) &#123;</span><br><span class="line">        this.at &#x3D; at;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMsgtype() &#123;</span><br><span class="line">        return msgtype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Text getText() &#123;</span><br><span class="line">        return text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Link getLink() &#123;</span><br><span class="line">        return link;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MarkDown getMarkdown() &#123;</span><br><span class="line">        return markdown;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ActionCard getActionCard() &#123;</span><br><span class="line">        return actionCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public FeedCard getFeedCard() &#123;</span><br><span class="line">        return feedCard;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>插曲：在生成具体的钉钉对应请求对象时候，我们构建了一个对应的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version v1.0.0</span><br><span class="line"> * @Package : com.zxd.interview.dingrobot</span><br><span class="line"> * @Description : 允许发送钉钉请求的接口</span><br><span class="line"> * @Create on : 2021&#x2F;2&#x2F;7 11:45</span><br><span class="line"> **&#x2F;</span><br><span class="line">public interface DingRobotRequestAble &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 所有的子类需要集成该接口</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void setMsgType(String msgType);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 普通文本类型</span><br><span class="line">     * @param text</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void setText(DingRobotRequestBody.Text text);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * link类型</span><br><span class="line">     * @param link</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void setLink(DingRobotRequestBody.Link link);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * markdown 类型</span><br><span class="line">     * @param markDown</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void setMarkDown(DingRobotRequestBody.MarkDown markDown);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 整体跳转ActionCard类型</span><br><span class="line">     * @param actionCard</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void setActionCard(DingRobotRequestBody.ActionCard actionCard);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * feedcard 类型</span><br><span class="line">     * @param feedCard</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void setFeedCard(DingRobotRequestBody.FeedCard feedCard);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="构建钉钉请求工具类"><a href="#构建钉钉请求工具类" class="headerlink" title="构建钉钉请求工具类"></a>构建钉钉请求工具类</h3><p>介绍完上面所有的辅助对象之后，我们着手构建核心的钉钉请求工具类，钉钉的请求工具类包含了基本的请求步骤，提供对外的请求方法，调用者根据请求对象构建对应的请求参数即可，从下面的代码可以看到最核心的方法是<code>notifyRobot</code>这个方法，这个方法非常简单，内部的逻辑分为如下的几步：</p><ul><li>构建请求环境参数</li><li>构建请求的URL和对应的携带参数</li><li>构建具体的请求参数</li><li>将请求返回的JSON字符串进行转化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version v1.0.0</span><br><span class="line"> * @Package : com.dcc.common.utils</span><br><span class="line"> * @Description : 钉钉机器人工具类</span><br><span class="line"> * @Create on : 2021&#x2F;2&#x2F;4 00:11</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class DingRobotUtils &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger LOGGER &#x3D; LoggerFactory.getLogger(DingRobotUtils.class);</span><br><span class="line"></span><br><span class="line">    public static DingRobotResponseMsg notifyRobot(DingRobotRequest dingRobotRequest, long currentTimeMillis) throws Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; param &#x3D; buildParam(dingRobotRequest, currentTimeMillis);</span><br><span class="line">        String s &#x3D; buildParamUrl(param);</span><br><span class="line">        &#x2F;&#x2F; 钉钉的请求参数需要拼接到URL链接</span><br><span class="line">        dingRobotRequest.setUrl(String.format(&quot;%s?%s&quot;, dingRobotRequest.getUrl(), s));</span><br><span class="line">        HttpConfig httpConfig &#x3D; buildDefaultHttpConfig(dingRobotRequest, dingRobotRequest.getMsg());</span><br><span class="line">        return parseResponse(notifyRobot(httpConfig));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 转化为对应对象</span><br><span class="line">     *</span><br><span class="line">     * @param notifyRobot 转化JSON</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static DingRobotResponseMsg parseResponse(String notifyRobot) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return JSON.parseObject(notifyRobot, DingRobotResponseMsg.class);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            LOGGER.error(&quot;类型转化失败，失败原因为:&#123;&#125;&quot;, e.getMessage());</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 按照自定时间戳进行通知</span><br><span class="line">     *</span><br><span class="line">     * @param dingRobotRequest 钉钉机器人请求</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static DingRobotResponseMsg notifyRobot(DingRobotRequest dingRobotRequest) throws Exception &#123;</span><br><span class="line">        long currentTimeMillis &#x3D; System.currentTimeMillis();</span><br><span class="line">        return notifyRobot(dingRobotRequest, currentTimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构建请求环境参数</span><br><span class="line">     *</span><br><span class="line">     * @param dingRobotRequest  请求request</span><br><span class="line">     * @param currentTimeMillis 当前时间戳</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static Map&lt;String, Object&gt; buildParam(DingRobotRequest dingRobotRequest, long currentTimeMillis) throws Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; param &#x3D; new HashMap&lt;&gt;(3);</span><br><span class="line">        param.put(&quot;access_token&quot;, dingRobotRequest.getAccessToken());</span><br><span class="line">        param.put(&quot;timestamp&quot;, currentTimeMillis);</span><br><span class="line">        param.put(&quot;sign&quot;, generateSign(currentTimeMillis, dingRobotRequest.getSecret()));</span><br><span class="line">        return param;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 钉钉机器人的默认配置</span><br><span class="line">     *</span><br><span class="line">     * @param dingRobotRequest    钉钉机器人请求对象</span><br><span class="line">     * @param dingRobotRequestMsg 钉钉机器人请求实体</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static HttpConfig buildDefaultHttpConfig(DingRobotRequest dingRobotRequest, DingRobotRequestAble dingRobotRequestMsg) &#123;</span><br><span class="line">        return HttpConfig.custom().headers(defaultBasicHeader())</span><br><span class="line">                .url(dingRobotRequest.getUrl())</span><br><span class="line">                .encoding(&quot;UTF-8&quot;)</span><br><span class="line">                .method(HttpMethods.POST)</span><br><span class="line">                .json(JSON.toJSONString(dingRobotRequestMsg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 默认headers配置</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static Header[] defaultBasicHeader() &#123;</span><br><span class="line">        Header[] headers &#x3D; new Header[1];</span><br><span class="line">        headers[0] &#x3D; new BasicHeader(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;);</span><br><span class="line">        return headers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static String notifyRobot(HttpConfig httpConfig) throws Exception &#123;</span><br><span class="line">        String send &#x3D; &quot;&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            send &#x3D; HttpClientUtil.send(httpConfig);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            LOGGER.error(&quot;HTTPClient请求发送失败, 失败原因为:&#123;&#125;&quot;, e.getMessage());</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line">        return send;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 根据时间戳和秘钥生成一份签名</span><br><span class="line">     *</span><br><span class="line">     * @param timestamp 时间戳</span><br><span class="line">     * @param secret    秘钥</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static String generateSign(Long timestamp, String secret) throws Exception &#123;</span><br><span class="line">        String stringToSign &#x3D; timestamp + &quot;\n&quot; + secret;</span><br><span class="line">        Mac mac &#x3D; Mac.getInstance(&quot;HmacSHA256&quot;);</span><br><span class="line">        mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), &quot;HmacSHA256&quot;));</span><br><span class="line">        byte[] signData &#x3D; mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        return URLEncoder.encode(new String(Base64.encodeBase64(signData)), &quot;UTF-8&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构建URL参数</span><br><span class="line">     *</span><br><span class="line">     * @param param 请求MAP参数</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static String buildParamUrl(Map&lt;String, Object&gt; param) &#123;</span><br><span class="line">        if (null &#x3D;&#x3D; param || param.size() &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder stringBuilder &#x3D; new StringBuilder();</span><br><span class="line">        param.forEach((key, value) -&gt; &#123;</span><br><span class="line">            stringBuilder.append(key).append(&quot;&#x3D;&quot;).append(value);</span><br><span class="line">            stringBuilder.append(&quot;&amp;&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        stringBuilder.deleteCharAt(stringBuilder.length() - 1);</span><br><span class="line">        return stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是本工具类的使用方式，只需要传入环境参数并且传入必须的请求msg，就可以直接发送请求并且返回对应的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> DingRobotRequest.Builder builder &#x3D; new DingRobotRequest.Builder();</span><br><span class="line">DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">    .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">    .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">    .msg(generateActionCard()).build();</span><br><span class="line">try &#123;</span><br><span class="line">    DingRobotResponseMsg dingRobotResponseMsg &#x3D; DingRobotUtils.notifyRobot(build);</span><br><span class="line">    System.err.println(JSON.toJSONString(dingRobotResponseMsg));</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，一个工具类构建就完成了，整个构建的过程还是十分简单的。这次的工具代码也是不断进行小改动的成果。个人的代码水平功底有限，如果有什么意见欢迎点评。</p><h1 id="问题汇总："><a href="#问题汇总：" class="headerlink" title="问题汇总："></a>问题汇总：</h1><p>下面汇总了一些个人使用钉钉花的时间比较多的点。</p><blockquote><p>吐槽：其实个人感觉钉钉的机器人在错误码这一块并不是特别的直观，下面说下个人踩到的一些小坑。</p></blockquote><h2 id="关于加签测试机器人出现31000的问题"><a href="#关于加签测试机器人出现31000的问题" class="headerlink" title="关于加签测试机器人出现31000的问题"></a>关于加签测试机器人出现<code>31000</code>的问题</h2><p>如果在添加机器人的时候进行加签是需要加入对应的<code>sign</code>和<code>timestamp</code>参数才可以测试成功，这里个人卡了一会儿才明白设计者的意图，虽然很好理解，但是对于第一次使用的人不是十分友好，同时在文档里面明显对于这一块的描述比较少，这里提供一下个人的小坑说明：</p><p>首先，我们需要根据请求的时间戳和秘钥生成签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 构建当前的系统时间戳</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Test</span><br><span class="line">public void generateSystemCurrentTime() throws Exception &#123;</span><br><span class="line">    long l &#x3D; System.currentTimeMillis();</span><br><span class="line">    String secret &#x3D; &quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;;</span><br><span class="line">    String sign &#x3D; generateSign(l, secret);</span><br><span class="line">    System.out.println(&quot;timestamp &#x3D; &quot;+ l);</span><br><span class="line">    System.out.println(&quot;sign &#x3D; &quot; + sign);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private String generateSign(Long timestamp, String secret) throws Exception &#123;</span><br><span class="line">    String stringToSign &#x3D; timestamp + &quot;\n&quot; + secret;</span><br><span class="line">    Mac mac &#x3D; Mac.getInstance(&quot;HmacSHA256&quot;);</span><br><span class="line">    mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), &quot;HmacSHA256&quot;));</span><br><span class="line">    byte[] signData &#x3D; mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    return URLEncoder.encode(new String(Base64.encodeBase64(signData)), &quot;UTF-8&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>生成签名之后，我们需要把<strong>时间戳</strong>和<strong>签名</strong>放入到请求的URL参数里面，测试方可通过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&amp;timestamp&#x3D;1613212722591&amp;sign&#x3D;SsKKlkvwM%2F4tsCPE6YoGls8vgkQqWJGHYpvWbW7hTGM%3D</span><br></pre></td></tr></table></figure><blockquote><p>提示：还是注意一下，在设置里面增加了加签</p></blockquote><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>本文主要为记录个人使用钉钉的一些心得体会，以及以此编写了一个工具包方便以后有需要的时候可以直接拿来使用。</p><p>钉钉机器人的使用就告一段落了，目前工具类已经应用到公司项目正常的发送请求通知。后续看心情对于HttpClient请求工具类重构，但是目前个人还在参考和学习设计记录，发现可以拆分的对象还是不少的。包含请求方法，请求Header，请求编码等各种形式的转化。</p><p>最后，个人最近从<strong>《代码简洁之道》</strong>里面学习了很多有用的编程技巧和编写代码的细节问题，推荐读者看一看这本书，对于写出一个好代码和好注释或者想要学习改良自己的代码都是很有好处的，后续个人也会写一篇学习笔记，感兴趣的可以关注一波。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      如何快捷简单的使用钉钉机器人
    
    </summary>
    
    
      <category term="笔记" scheme="https://whitestore.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://whitestore.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《生活需要断舍离》读书笔记</title>
    <link href="https://whitestore.top/2021/02/14/nativebook/"/>
    <id>https://whitestore.top/2021/02/14/nativebook/</id>
    <published>2021-02-14T03:40:27.000Z</published>
    <updated>2021-02-14T04:22:45.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《生活需要断舍离》读书笔记"><a href="#《生活需要断舍离》读书笔记" class="headerlink" title="《生活需要断舍离》读书笔记"></a>《生活需要断舍离》读书笔记</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    这本书算是觉得封面还不错买了下来，但是没想到居然买到了“日记”，并且从网上来看似乎是买错了一个版本，比较尴尬，这本书内容没有啥特别的干货，所以这篇文章也是简单的提一下看到的一些内容。</p><a id="more"></a><h2 id="推荐程度："><a href="#推荐程度：" class="headerlink" title="推荐程度："></a>推荐程度：</h2><p>在我的定义里面和日记类似，所以不做推荐，也不推荐买。</p><h2 id="内容简要概述："><a href="#内容简要概述：" class="headerlink" title="内容简要概述："></a>内容简要概述：</h2><p>从书名就可以看出来，就是最为简单的三个字：断、舍、离。大致翻翻书从这本书可以看出这是一本心境锻炼的书籍。但是内容比较粗浅，在我定义里面算是日记这一类型。</p><p>从下面一幅图可以看到整个断舍离的基本概念，其实都是非常简单的一些道理：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213121559.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>断：</p><ol><li>断绝攀比的心理，懂得控制自己的欲望，用思考代替情感</li><li>断绝自己家里的一切无任何使用意义的东西，时常的清理自己的家里。断绝一切无意义的东西</li><li>断开负面的思考，只思考积极的事情。断绝自己的负面情绪</li></ol><p>舍：</p><ol><li>舍弃一切对自己无意义的东西</li><li>凡事有舍才有得</li><li>顺从自己的心，割舍既有</li></ol><p>离：</p><ol><li>脱离对于事物的杂念，找到自己内心真正想要的东西</li><li>远离诱惑，找到对自己真正有意义的东西</li><li>远离虚假的繁荣，寻找自己真正想要的生活</li></ol><p>断舍离强调的是给自己做减法而不是做加法，我们时常在给自己做加法，而不是做减法，用加法让自己充斥在各种的杂物里面，干扰自己的生活以及自己的心情。</p><h2 id="反省："><a href="#反省：" class="headerlink" title="反省："></a>反省：</h2><p>这本书买错了，不是日本的那本断舍离。里面内容像日记版心灵鸡汤，一天一碗。</p><h2 id="收获："><a href="#收获：" class="headerlink" title="收获："></a>收获：</h2><p>买书之前查清楚，一本书可能有很多个版本，很明显个人算是被坑了</p><h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>算是买错了的一本书，看完个人也没有特别的感受，还是建议不要买这类书籍，这本书更多的是鸡汤文。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      生活需要断舍离的读书笔记
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈设计模式 - 装饰器模式（五）</title>
    <link href="https://whitestore.top/2021/02/14/strategymodal/"/>
    <id>https://whitestore.top/2021/02/14/strategymodal/</id>
    <published>2021-02-14T03:40:16.000Z</published>
    <updated>2021-02-14T04:19:00.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈设计模式-装饰器模式（五）"><a href="#浅谈设计模式-装饰器模式（五）" class="headerlink" title="浅谈设计模式 - 装饰器模式（五）"></a>浅谈设计模式 - 装饰器模式（五）</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    装饰器模式是是对类进行增强的一种典型设计模式，它允许对于一个现有类进行增强的操作，对于喜欢使用继承的伙伴，这个模式非常贴切的展示的了对于继承的灵活用法。但是装饰器模式同样<strong>不是一个推崇使用的模式</strong>，因为他对于继承存在依赖性，从本文后续就可以了解到装饰类膨胀的问题，所以在设计代码结构的时候，装饰器模式<strong>并不是第一考虑</strong>。</p><a id="more"></a><h2 id="什么是装饰器模式？"><a href="#什么是装饰器模式？" class="headerlink" title="什么是装饰器模式？"></a>什么是装饰器模式？</h2><p>​    装饰器模式：对现有类不改动结构的情况下为类添加新职责和功能的模式。</p><p>​    动态的扩展类的职责，装饰器模式是一种是比继承更加灵活的代码扩展模式。同时装饰类之间可以进行互相的嵌套</p><h2 id="装饰器模式的结构图："><a href="#装饰器模式的结构图：" class="headerlink" title="装饰器模式的结构图："></a>装饰器模式的结构图：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210207162333.png?ynotemdtimestamp=1613223296738" alt="img"></p><ul><li><p>Component 装饰接口</p><p>：装饰接口定义了装饰的顶层抽象行为，一般定义被装饰者和装饰者的公用行为</p><ul><li><p><strong>ConrecteComponent 被装饰类</strong>：主要为被装饰类实现，和装饰类相互独立，拥有单独的功能方法</p></li><li><p>Decorder 装饰器</p><p>：定义了装饰的通用接口，包含装饰器的通用方法</p><ul><li><strong>ConrecteDecorderA 装饰器A</strong>：定义了装饰器的具体设计，可以包含自己的装饰方法</li><li><strong>ConrecteDecorderB 装饰器B</strong>：定义了装饰器的具体设计，可以包含自己的装饰方法</li></ul></li></ul></li></ul><h2 id="装饰器模式的特点"><a href="#装饰器模式的特点" class="headerlink" title="装饰器模式的特点"></a>装饰器模式的特点</h2><ol><li>装饰者和被装饰者都需要实现<strong>相同的接口</strong>（必要条件）</li><li>装饰者一般需要继承一个抽象类，或者需要定义抽象的方法和实现</li><li>装饰者可以在所委托被装饰者的行为之前或之后，加上自己的行为，以达到特定的目的。</li><li><strong>任何父类出现的地方都可以用子类进行替换</strong>，在活用继承的同时可以灵活的扩展。</li></ol><h2 id="什么时候使用装饰器模式"><a href="#什么时候使用装饰器模式" class="headerlink" title="什么时候使用装饰器模式"></a>什么时候使用装饰器模式</h2><ul><li>需要大量的子类为某一个对象进行职责增强的时候，可以使用装饰器模式</li><li>希望使用继承对于类进行动态扩展的时候，可以考虑使用装饰器模式</li></ul><h2 id="实际案例："><a href="#实际案例：" class="headerlink" title="实际案例："></a>实际案例：</h2><h3 id="模拟场景："><a href="#模拟场景：" class="headerlink" title="模拟场景："></a>模拟场景：</h3><p>我们用一个奶茶的结构来模拟一个装饰器的设计场景，我们通常在奶茶店点奶茶的时候，对于一杯奶茶，可以添加各种配料，这时候配料就是奶茶的装饰者，而奶茶就是典型的被装饰者，我们使用配料去“装饰”奶茶，就可以得到各种口味的奶茶。同时可以计算出奶茶的价格</p><p>下面我们来看一下针对模拟场景的案例和使用：</p><h3 id="不使用设计模式："><a href="#不使用设计模式：" class="headerlink" title="不使用设计模式："></a>不使用设计模式：</h3><p>​    不使用设计模式，我们的第一考虑就是简单的使用继承去设计装饰类，我们通过各种子类组合来实现一杯杯不同口味的奶茶，从下面的结构图可以看到，将被装饰类定义为独立的类，同时不进行任何的继承而是作为独立的类使用。而调料也就是奶茶饮料的配料需要继承同一个抽象类，同时在内部实现自己的方法。</p><p>​    紧接着，我们在装饰者的方法中引入被装饰者，可以通过内部组合被装饰者进行 <strong>模仿</strong>行为的同时进行增强，就像IO当中的<code>Buffer</code>。</p><p>​    我们根据上面的说明画出这一种设计的大致结构图：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210207230255.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>看了上面的设计图稿之后，我们来说明一下具体的代码实现：</p><p>首先是奶茶实体类：在奶茶的实体类里面定义两个属性， 使用一个<code>display()</code>打印信息，奶茶的实体类表示被装饰类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 奶茶实体类</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:21</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MilkTea &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private double price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public MilkTea(String name, double price) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(double price) &#123;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void display() &#123;</span><br><span class="line">        System.out.println(&quot;name &#x3D; &quot;+ name + &quot; price &#x3D; &quot; +price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是柠檬汁的被装饰类，这个被装饰类也是独立的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 柠檬汁</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:53</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class LeamonJuice &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private double price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public LeamonJuice(String name, double price) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(double price) &#123;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void display() &#123;</span><br><span class="line">        System.out.println(&quot;name &#x3D; &quot;+ name + &quot; price &#x3D; &quot; +price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调料的父类：注意这是一个抽象类，定义了调料的基本方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 调料父类</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:23</span><br><span class="line"> *&#x2F;</span><br><span class="line">public abstract class Codiment &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 为装饰类添加附加值</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    abstract void plusAdditionVal(MilkTea milkTea);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 详细信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected String description()&#123;</span><br><span class="line">        return &quot;无任何配料&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调料的子类珍珠类，这里为父类进行装饰，添加父类的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 配料：珍珠</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:27</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Pearl extends Codiment&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    void plusAdditionVal(MilkTea milkTea) &#123;</span><br><span class="line">        if(milkTea &#x3D;&#x3D; null)&#123;</span><br><span class="line">            throw new RuntimeException(&quot;对不起，请先添加奶茶&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        milkTea.setPrice(milkTea.getPrice() + 2);</span><br><span class="line">        milkTea.setName(milkTea.getName() + &quot;,&quot; +description());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 详细信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected String description()&#123;</span><br><span class="line">        return &quot;珍珠&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调料的子类椰果类，这里同样是为了父类进行装饰的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 配料：椰果</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:30</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Coconut extends Codiment&#123;</span><br><span class="line">    @Override</span><br><span class="line">    void plusAdditionVal(MilkTea milkTea) &#123;</span><br><span class="line">        if(milkTea &#x3D;&#x3D; null)&#123;</span><br><span class="line">            throw new RuntimeException(&quot;对不起，请先添加奶茶&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        milkTea.setPrice(milkTea.getPrice() + 1);</span><br><span class="line">        milkTea.setName(milkTea.getName() + &quot;,&quot; +description());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected String description() &#123;</span><br><span class="line">        return &quot;椰果&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们使用一个单元测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 单元测试</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:34</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MilkTea milkTea &#x3D; new MilkTea(&quot;原味奶茶&quot;, 5);</span><br><span class="line">        Pearl pearl &#x3D; new Pearl();</span><br><span class="line">        Coconut coconut &#x3D; new Coconut();</span><br><span class="line">        pearl.plusAdditionVal(milkTea);</span><br><span class="line">        coconut.plusAdditionVal(milkTea);</span><br><span class="line">        milkTea.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x2F;*</span><br><span class="line">打印结果：name &#x3D; 原味奶茶,珍珠,椰果 price &#x3D; 8.0</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="不使用设计模式的优缺点："><a href="#不使用设计模式的优缺点：" class="headerlink" title="不使用设计模式的优缺点："></a>不使用设计模式的优缺点：</h3><p>优点：</p><ul><li>添加一个装饰者十分简单，只需要继承抽象父类接口，同时子类只需要通过方法传入被装饰者进行装饰。</li></ul><p>缺点：</p><ul><li>我们的调料父类如果<strong>增加抽象方法</strong>，<strong>所有的子类都需要改动</strong>，这是整个子类群体来说是毁灭性的，对于编写代码的程序员来说也是毁灭性的。</li><li>可以看到装饰者已经是一种<strong>面向实现编程</strong>的状态，如果我们换一种被装饰者，需要添加更多的装饰类进行装饰。并且这些装饰者是<strong>相互独立并且不能复用的</strong></li></ul><blockquote><p>从结构图的设计就可以看出这种设计不符合<strong>面向接口编程</strong>的设计原则</p></blockquote><h3 id="总结不使用模式："><a href="#总结不使用模式：" class="headerlink" title="总结不使用模式："></a>总结不使用模式：</h3><p>​    不使用设计模式看起来没有什么大问题，但是可以从结构可以看到抽象父类以及子类的耦合过于严重，父类完全不敢动<code>abstract void plusAdditionVal(MilkTea milkTea)</code>这个抽象签名方法，并且如果需求增加一个其他的被装饰者，这些装饰奶茶的装饰者就完全“傻眼”了，因为他们完全不认识新的被装饰者，这导致程序要更多的子类来接纳新的的被装饰者，这种设计结构将导致类<strong>子类无限膨胀</strong>，没有尽头。</p><h3 id="使用设计模式："><a href="#使用设计模式：" class="headerlink" title="使用设计模式："></a>使用设计模式：</h3><p>​    从不使用设计模式可以看出，不使用设计模式最大的问题是在于调料的父类抽象方法耦合过于严重，以及被装饰类和装饰者之间存在依赖磁铁。从结构图可以看出来被装饰类和装饰类<strong>并没有明显的关联</strong>，我们之前已经说明了装饰模式更多的是对于一个被装饰类的增强，既然是增强，那么<strong>被装饰类和装饰类通常需要具备相同的抽象行为</strong>，这样才比较符合装饰模式的设计结构。</p><p>​    下面就上面的结构图进行改进，在 <strong>被装饰类</strong>和<strong>装饰类</strong>之上，再增加一层接口，调料的父类不在管理公用接口，而是可以增加自己的方法。我们改进一下结构图，只要稍微改进一下，整个结构就可以变得十分好用：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210208001255.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>为了方便展示代码和理解，这里只列出了<strong>奶茶类</strong>，<strong>调料父类</strong>，<strong>配料：珍珠</strong>，以及我们最重要的公用接口进行介绍：</p><p>我们从最顶层开始，最顶层在结构上定义了一个抽象公用接口，提供装饰者以及被装饰者进行实现或者定义抽象和扩展：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 饮料的抽象类，定义饮料的通用接口</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 23:46</span><br><span class="line"> *&#x2F;</span><br><span class="line">public interface DrinkAbstract &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 装饰接口</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void plusAdditionVal();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 计算售价</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    double coat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是奶茶类，我们的奶茶类在上一个版本基础上，实现了一个新的接口，所以需要定义实现接口后的方法：</p><p>奶茶类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 奶茶实体类</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:21</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MilkTea implements DrinkAbstract&#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private double price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public MilkTea(String name, double price) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(double price) &#123;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void display() &#123;</span><br><span class="line">        System.out.println(&quot;name &#x3D; &quot;+ name + &quot; price &#x3D; &quot; +price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 增加</span><br><span class="line">    @Override</span><br><span class="line">    public void plusAdditionVal() &#123;</span><br><span class="line">        System.out.println(&quot;name &#x3D; &quot;+ name  + &quot; price &#x3D; &quot; + price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 增加</span><br><span class="line">    @Override</span><br><span class="line">    public double coat() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是调料的父类，调料的父类需要改动的内容不是很多，本质上就是把自己的抽象方法提取到父接口。这个类可以是抽象类，也可以是配料接口的通用抽象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 调料父类</span><br><span class="line"> * 这里需要实现饮料接口</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:23</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Codiment implements DrinkAbstract&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 为装饰类添加附加值</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void plusAdditionVal()&#123;</span><br><span class="line">        description();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double coat() &#123;</span><br><span class="line">        return 5.0f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 详细信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String description()&#123;</span><br><span class="line">        return &quot;无任何配料&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是配料的具体实现类配料-珍珠进行改动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 配料：珍珠</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:27</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Pearl extends Codiment implements DrinkAbstract&#123;</span><br><span class="line"></span><br><span class="line">    private DrinkAbstract drinkAbstract;</span><br><span class="line"></span><br><span class="line">    public Pearl(DrinkAbstract drinkAbstract) &#123;</span><br><span class="line">        this.drinkAbstract &#x3D; drinkAbstract;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void plusAdditionVal() &#123;</span><br><span class="line">        &#x2F;&#x2F; 如果是奶茶</span><br><span class="line">        if(drinkAbstract instanceof MilkTea)&#123;</span><br><span class="line">            MilkTea drinkAbstract &#x3D; (MilkTea) this.drinkAbstract;</span><br><span class="line">            drinkAbstract.setName(drinkAbstract.getName() + &quot; -- &quot; + &quot;珍珠&quot;);</span><br><span class="line">            drinkAbstract.setPrice(drinkAbstract.getPrice() + 55);</span><br><span class="line">            description();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double coat() &#123;</span><br><span class="line">        return 5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 详细信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void description()&#123;</span><br><span class="line">        drinkAbstract.plusAdditionVal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们来看下单元测试的变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    private static void run2()&#123;</span><br><span class="line">        DrinkAbstract drinkAbstract &#x3D; new MilkTea(&quot;原味奶茶&quot;, 5);</span><br><span class="line">        Pearl codiment &#x3D; new Pearl(drinkAbstract);</span><br><span class="line">        codiment.plusAdditionVal();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       run2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x2F;*控制台结果：name &#x3D; 原味奶茶 -- 珍珠 price &#x3D; 60.0*&#x2F;</span><br></pre></td></tr></table></figure><p>可以看到我们使用装饰类对于被装饰类的属性进行了改变的同时并没有改变被装饰者的本身的行为，而是对于行为做了扩展。</p><h3 id="使用装饰器设计模式的优缺点："><a href="#使用装饰器设计模式的优缺点：" class="headerlink" title="使用装饰器设计模式的优缺点："></a>使用装饰器设计模式的优缺点：</h3><p>优点：</p><ol><li>装饰类的公用类不再需要设置抽象的方法，使得装饰实现子类也不在依赖抽象父类的抽象方法</li><li>既然装饰者和被装饰对象有相同的超类型，所以在任何需要原始对象（被包装的）的场合，就可以用装饰过的对象代替它。</li><li>装饰类和被装饰类的扩展和实现都是解耦的，不需要互相关注实现细节，装饰子类可以独自实现方法</li><li>我们解决了增加新的被装饰类之后导致装饰类大量膨胀的问题，现在可以进行简单的应用。</li></ol><p>缺点：</p><ol><li>本质上还是继承结构，而且装饰类和被装饰类<strong>必须</strong>有相同的顶级父类接口</li><li>装饰类在系统越来越复杂之后会出现明显的膨胀。</li></ol><h2 id="JAVA-IO-典型的装饰模式："><a href="#JAVA-IO-典型的装饰模式：" class="headerlink" title="JAVA IO - 典型的装饰模式："></a>JAVA IO - 典型的装饰模式：</h2><p>​    首先说明<code>JAVA IO</code>类其实本质上<strong>并不是一个十分优秀的设计</strong>（因为复杂的装饰子类和API结构），这个问题可以查看《JAVA编程思想》作者对于JAVA IO复杂难用的API以及继承结构进行过的一系列吐槽，而且JAVA IO经过后面版本的迭代改进。使得原本的方法更加复杂多变，但是不管JAVA IO设计的API如何不“便民”，这一块的设计依然是非常值得学习和思考的，也是装饰模式最典型的使用。</p><p>​    下面为一张《Head First设计模式的一张图》说明一下JAVA IO装饰设计的装饰器膨胀问题:</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210208114348.png?ynotemdtimestamp=1613223296738" alt="img"></p><blockquote><ul><li>可以看到InputStream是一个抽象类。</li><li>在<strong>JDK1.5</strong>当中，他扩展自接口<code>java.io.Closeable</code>，规定需要接入装饰的类需要实现自己的流关闭方法。</li><li>在<strong>JDK1.7</strong> 中，在<code>Closeable</code>基础上增加了<code>java.io.AutoClosable</code>来实现流的<strong>自动关闭</strong>功能。</li></ul></blockquote><p>从上面的图标也可以看到装饰器的一些缺点：</p><ol><li>装饰类之间的具有复杂的继承结构</li><li>装饰者之间虽然<strong>可以互相嵌套，但是不一定互相兼容</strong></li></ol><blockquote><p>JAVA IO对于JAVA初学者来说十分不友好，从其他语言可以看到吸取了这一点的教训，通常都把IO流这一块设计的越简单好用越好（尽量的让调用者不需要去思考IO流的细节问题）。而JAVA IO 显然设计的不是很亲民。</p></blockquote><h1 id="总结装饰器模式："><a href="#总结装饰器模式：" class="headerlink" title="总结装饰器模式："></a>总结装饰器模式：</h1><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ 装饰者和被装饰对象有相同的接口。</span><br><span class="line">+ 可以用一个或多个装饰者包装一个被装饰对象或者被装饰对象。</span><br><span class="line">+ 既然装饰者和被装饰对象有相同的超类型，所以在任何需要原始对象（被包装的）的场合，可以用装饰过的对象代替它。</span><br><span class="line">+ 装饰者可以在所委托被装饰者的行为之前或之后，加上自己的行为，以达到特定的目的。</span><br><span class="line">+ 装饰者可以无限的嵌套，因为他们本质上归属于同一个接口</span><br></pre></td></tr></table></figure><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ 装饰者很容易出现大量的小类，这让了解代码的人不容易清楚不同装饰的设计</span><br><span class="line">+ 一个依赖其他具体类型的接口导入装饰者可能会带来灾难。所以导入装饰者要非常小心谨慎，并且仔细考虑是否真的需要装饰者模式</span><br><span class="line">+ 装饰者互相嵌套可能会增加代码的复杂度，也增加扩展装饰者子类的复杂度，最终这个难题会变成调用者的难题</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>​    许多的设计模式书籍都警告过装饰器模式是一个需要<strong>谨慎考虑</strong>的设计模式，因为装饰模式很容易会造成装饰类的膨胀，同时对于特定类型接入装饰类可能会有意想不到的灾难，同时在接入装饰类的时候，需要仔细的了解公用接口和抽象类的实现，需要了解这一类装饰针对的行为，否则只是简单的继承装饰父类或者继承接口可能会有一些莫名其妙的问题。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      设计模式装饰器模式
    
    </summary>
    
    
      <category term="设计模式" scheme="https://whitestore.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://whitestore.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《墨菲定律》读书笔记</title>
    <link href="https://whitestore.top/2021/02/14/mofeidinglv/"/>
    <id>https://whitestore.top/2021/02/14/mofeidinglv/</id>
    <published>2021-02-14T03:36:31.000Z</published>
    <updated>2021-02-14T03:38:54.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《墨菲定律》读书笔记"><a href="#《墨菲定律》读书笔记" class="headerlink" title="《墨菲定律》读书笔记"></a>《墨菲定律》读书笔记</h1><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210203141524.png" alt=""></p><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><pre><code>《墨菲定律》这本书在市面上有N个版本，个人买来纯粹凑单用的书，不抱着有啥质量，但是内容实在过于没有营养，这篇文章想说一下如何避开这种坑书，以及什么样的书不值得去读。</code></pre><blockquote><p>个人买到的版本为黑龙江美术出版社的版本</p></blockquote><a id="more"></a><h1 id="推荐程度："><a href="#推荐程度：" class="headerlink" title="推荐程度："></a>推荐程度：</h1><p><strong>凑运费用的书</strong>。完全不推荐。</p><h1 id="什么样的书不建议读："><a href="#什么样的书不建议读：" class="headerlink" title="什么样的书不建议读："></a>什么样的书不建议读：</h1><p>我是不排斥读到不好的书的，看不好的书可以让自己清醒的辨识能力，下面说一下一些受争议的书的看法：</p><h2 id="没有灵魂的书："><a href="#没有灵魂的书：" class="headerlink" title="没有灵魂的书："></a>没有灵魂的书：</h2><p>我们都知道字如其人，写书也是一样的，通过文字我们可以看到作者的思想，以及作者想要传达的意思，如果一本书没有核心，更简单的说作品没有“活力”，一本书如果能折射出一个观点或者一种思想，在我看来十分有教育意义，比如《活着》</p><h2 id="段子书："><a href="#段子书：" class="headerlink" title="段子书："></a>段子书：</h2><p>非常典型的就是阐明一个道理，然后举各种例证来证明这个道理，证明完之后说一下要怎么样做，不要怎么样做。比套版还要套版，感觉是个人仔细想想都可以写出来的书。</p><h2 id="鸡汤书："><a href="#鸡汤书：" class="headerlink" title="鸡汤书："></a>鸡汤书：</h2><p>鸡汤书和段子书类似，喝起来很甜，但是喝完对自己没有任何的营养，只有油水，这次的这本书就是典型的鸡汤书。</p><h2 id="文字堆砌的书："><a href="#文字堆砌的书：" class="headerlink" title="文字堆砌的书："></a>文字堆砌的书：</h2><p>这里要特别声明书可能重量相同，但是质量不同。这类书可以参考我之前的《SpringBoot实战派》读书笔记，感觉作者单纯是为了让书变厚，然后往里面加了很多的代码，实际读下来东西都非常的初级而且没有深入，很失望。但是同样对比一下《JAVA编程思想》，虽然很厚但是一直被推崇为一本神书，当然最大的败笔是翻译毁了这本书，个人觉得比较可惜。</p><h2 id="成功学："><a href="#成功学：" class="headerlink" title="成功学："></a>成功学：</h2><p>成功确实是不能复制的，但是成功的思想和经验可以参考，这一类书之所以不建议读是因为如果没有到达一定的阶段，这类书是没有参考价值的，但是如果自己的思想到达一定的阶段确实是可以达到一定的程度的。<strong>屁股决定脑袋</strong>，请读者记住这一点</p><h1 id="摘录："><a href="#摘录：" class="headerlink" title="摘录："></a>摘录：</h1><p>下面摘录一些个人稍微认真看了并且思考了一些的内容</p><ol><li>人的第一印象是非常重要的，人的第一印象和惯性思维有时候会让我们失去判断水准，但是从人性的角度来说，第一印象决定了你在他人心中的上限。所以无论如何，塑造一个良好的第一印象是非常重要的一件事。</li><li><strong>沉锚效应</strong>，心理学名词，指的是人们在对某人某事做出判断时，易受第一印象或第一信息<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/mlK/phY0=" title="https://baike.baidu.com/item/支配">支配<i class="fa fa-external-link"></i></span>，就像沉入海底的锚一样把人们的思想固定在某处。（百度百科）为了防止沉锚效应，我么需要掌握主动权，让自己始终保持头脑清醒，不要被花言巧语迷惑。</li><li>谨慎心理舒适区：不要给自己设置心理舒适区，如果一直在自己能接受的范围之内进行学习，是很难真正获得成长或者成长很慢，需要不断的反省和思考，努力破圈。</li></ol><h1 id="反省："><a href="#反省：" class="headerlink" title="反省："></a>反省：</h1><p>远离凑单，远离鸡汤，记住这次的教训，以后即使多出些运费都不能买这种书。这篇文章对个人对大意义就是如此。</p><h1 id="收获："><a href="#收获：" class="headerlink" title="收获："></a>收获：</h1><p><strong>搜索热榜的书请慎重考虑</strong>，虽然大部分时候搜索热榜的书挺靠谱，但是不排除运营商用搜索“清仓”这种行为，作为凑单也不建议购买的书，非常后悔买到这种书，把这本书卖回去直接变成 <strong>赠送</strong>。（套路啊）</p><h1 id="个人感悟："><a href="#个人感悟：" class="headerlink" title="个人感悟："></a>个人感悟：</h1><pre><code>墨菲定律无非就是越是害怕发生的事情越会发生。事情已经发生的情况下，我们唯一的选择就是接受结果，同时我们在面对事情最好的状态就是不卑不亢，这一点几乎很难做到。读这种书让我想起了刚学编程的时候看的谭浩强C语言设计的书（也是个人买的第一本编程书），就这本书来讲真的是一本遗臭万年的技术书籍，关键是很多学校在当时居然还大肆宣传，而且从销量来看卖的还不错。</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之前的读书方法论看到居然有100多收藏，把我吓到了，后续在构思一下要写什么内容，同时买了几本关于如何写读书笔记的书好好看下，希望下一篇可以写的更好。如果想了解什么东西欢迎留言。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      墨菲定律的法则
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2021年第一个100公里纪念</title>
    <link href="https://whitestore.top/2021/02/14/note/"/>
    <id>https://whitestore.top/2021/02/14/note/</id>
    <published>2021-02-14T03:35:13.000Z</published>
    <updated>2021-02-14T03:36:03.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021年第一个100公里纪念"><a href="#2021年第一个100公里纪念" class="headerlink" title="2021年第一个100公里纪念"></a>2021年第一个100公里纪念</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><pre><code>这篇文章纯粹是留个纪念，吹个小牛的同时鼓励自己再接再厉，给自己打个卡希望读者可以找到自己可以坚持的目标并且不断持续下去。</code></pre><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210201101029.png" alt=""></p><h2 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h2><ol><li>打卡本年第一个100公里，再接再厉</li><li>说说我的养生道。</li><li>我为什么要锻炼以及如何锻炼</li><li>自己锻炼之后的切实感受</li></ol><a id="more"></a><h2 id="为什么要锻炼？"><a href="#为什么要锻炼？" class="headerlink" title="为什么要锻炼？"></a>为什么要锻炼？</h2><pre><code>我一直抱持着**有命赚钱并且要有命花钱**的理念，虽然人生也就不过3万多天，但是我还是想 **活得久一些**，不想上了年纪各种疾病，同时自己也很清楚的认识到年轻时熬的夜，迟早是要还的**。最近几个月在不断的规律作息，准备好好的练练身体，自己的生物钟基本也就定了，不管有多急的事情，都尽量按时睡觉，定时休息，每天睡够7小时。这些才是要紧的事情。</code></pre><h2 id="我的计划："><a href="#我的计划：" class="headerlink" title="我的计划："></a>我的计划：</h2><h3 id="跑步："><a href="#跑步：" class="headerlink" title="跑步："></a>跑步：</h3><pre><code>跑步的计划是其实从去年12月份就已经开始了，当时花了大半个月每天晚上步行3公里，但是感觉收效甚微，后面就开始制定跑步计划了。1月份的前半个月我是隔天跑3公里左右，但是想到自己立了一个月100公里的`Flag`，后面就变成5公里跑步了。没想到自己还真的坚持下来了，不容易。</code></pre><blockquote><p>非常感谢之前的评论，这个截图我时不时翻出来看几眼，还是非常受到鼓舞的，这大概就是《刻意练习》里面说的寻找专业的人士进行建议。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201215121220.png" alt=""></p></blockquote><h3 id="饮食："><a href="#饮食：" class="headerlink" title="饮食："></a>饮食：</h3><pre><code>之前做过一个详细的饮食计划，然而**吃**这一块比较难以坚持，因为做软件开发脑力消耗太大，饭还是要吃的。不过都是吃自己做的饭菜，而且有在控制饭量，总体感觉是可控的，慢慢来吧。诀窍是控制晚饭的摄入，晚上8点后不能吃饭，运动锻炼可以少量摄入一些食物垫垫肚子。</code></pre><p>下面简单了列了一下个人早中晚三餐吃的比较多的东西。更多是需要控制<strong>米面的摄入</strong>和 糖类的摄入。</p><table><thead><tr><th>早餐</th><th>中餐</th><th>晚餐</th></tr></thead><tbody><tr><td>玉米</td><td>饭</td><td>面条</td></tr><tr><td>肠粉</td><td>绿色蔬菜</td><td>饺子</td></tr><tr><td>包子</td><td>西红柿</td><td>鸡蛋</td></tr><tr><td>薯饼</td><td>土豆</td><td>牛奶</td></tr><tr><td>茶叶蛋</td><td>其他肉类</td><td></td></tr><tr><td></td><td>鸡腿肉</td><td></td></tr><tr><td></td><td>虾</td><td></td></tr><tr><td></td><td>玉米</td><td></td></tr></tbody></table><h2 id="锻炼之后的感受："><a href="#锻炼之后的感受：" class="headerlink" title="锻炼之后的感受："></a>锻炼之后的感受：</h2><ol><li>白天干活有精神了：这点是实实在在可以感受的，以前去上班就和阉了的茄子一样，但是现在感觉每天醒来都是精神充足的（加班令我快乐）</li><li>增强自信：锻炼真的可以增强自信心，当你完成一次又一次的打卡，你会感觉很多事情都可以做到，同时在运动完成之后的那种畅快是只有经历过才知道</li><li>缓解焦虑：运动锻炼是一种排解焦虑和压力非常好的一种方式，比看鸡汤文和鼓励师的话语要强很多。</li><li>活跃思维：《程序员健康指南》这本书诚不欺我，跑完步之后学习新知识效果确实不错，不至于看专业书的时候昏昏欲睡，还是非常有效果的。</li></ol><h2 id="如何锻炼："><a href="#如何锻炼：" class="headerlink" title="如何锻炼："></a>如何锻炼：</h2><p>每个人生活习惯不同，这里简略说下我的锻炼方式</p><ol><li>健身环：目前已经在开始吃灰了，不过周末在家的时候偶尔还是会拿出来玩一下，健身环是一款比较突破和创新的作品，对于在家运动是一个不错的选择。当然经济开销比较大。</li><li>跑步：先从3公里开始，用走+跑的方式不断进行，同时意识的调整呼吸和步伐。提高耐受力，最开始可以选择隔天跑保持目标的完成而不需要在乎质量，等到有一定的体力之后，开始<strong>刷新</strong>自己的个人记录，刷新记录可以培养成就感同时对于个人成长也是十分有帮助的。</li><li>午后散步：午后散步是指每天中午饭后去外面走个20分钟，不需要太长时间，20分钟即可，对于消化食物挺不错的，同时有助于活动血液。偶尔还能晒晒太阳比较舒服</li><li>爬山：工作之后基本把工作地的小山大山爬了一个遍，但是感觉都没啥挑战性，可能这就是一线城市吧，能有山爬爬就算不错了。</li><li>周末去公园探险：平时周末喜欢去公园散散步放松心情，缓解一下生活压力啥的，还有一点是公园免费，有的公园景色也不错，比如下面这张图：</li></ol><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210201160729192.png" alt="image-20210201160729192"></p><h2 id="如何坚持锻炼："><a href="#如何坚持锻炼：" class="headerlink" title="如何坚持锻炼："></a>如何坚持锻炼：</h2><p>个人是一个喜欢自我驱动并且乐于行动的人，下面说下我是如何坚持锻炼的，希望给有想法锻炼的人一点鼓舞：</p><h3 id="学会目标分解："><a href="#学会目标分解：" class="headerlink" title="学会目标分解："></a>学会目标分解：</h3><pre><code>很多想锻炼的人有了目标并且有了计划之后，还是坚持不下来，计划写的很漂亮，执行力却不足，这里我个人认为最大的问题是 **不懂得分解自己的目标**。另一种是把**计划做的太完美**。不懂得分解自己的目标：按照个人的例子来讲，如果让我一上来就跑100公里，我是不会想去做的，**想到这个数字就很累**，于是我简单做了一个规划。我把**100公里**拆成多个小周期或者一整个周，**每周**或者每几天完成**5分之一**就行，不在意什么时候完成，每天跑多少，只要在这一个时间内做成这件事，那就算是完成了。把计划做的太完美：越完美的计划空隙越多，个人更加偏向**简单的计划+强力的执行力**，通过尝试之后，再去做更详细的计划，这样的计划既可以符合自己的实际需求，同时也可以满足自己的心灵需要。</code></pre><h3 id="锻炼变成生活而不是作业："><a href="#锻炼变成生活而不是作业：" class="headerlink" title="锻炼变成生活而不是作业："></a>锻炼变成生活而不是作业：</h3><pre><code>很多时候我们把减肥和锻炼看成是“作业”来为难自己，我的建议是把锻炼看做是消遣，最开始不要去想自己靠锻炼去获得什么，因为锻炼不是一天两天是看的到效果的，看不到效果人就会丧失斗志，丧失斗志人就会开始找借口去逃避，最后不了了之。</code></pre><blockquote><p>锻炼确实和做作业差不多，唯一区别是你知道寒暑假不需要做作业，但是锻炼确实没有时间期限的。</p><p>另外，做作业的第一步是拿起笔而不是想做作业，所以<strong>先尝试再去思考</strong>，可能更容易坚持下去。</p></blockquote><h3 id="先做加法之后再做减法："><a href="#先做加法之后再做减法：" class="headerlink" title="先做加法之后再做减法："></a>先做加法之后再做减法：</h3><pre><code>这个观点说的也是改变思维方式，要把任务看成是完成进度条一样，可以加载慢但是只要慢慢加载就可以完成。而不是看多少没有完成，因为有时候各种琐事会妨碍我们去完成目标，聚会，活动，家事，加班等等原因，一上来做减法会不断的延后并且我们可能会寻找各种理由来说服自己 **不去做那些事**，这种时候就要抛开减法的思想，从做加法开始。当加法熟练了之后，我们便可以尝试做减法不断的鼓励自己把任务越做越少</code></pre><h3 id="做日记："><a href="#做日记：" class="headerlink" title="做日记："></a>做日记：</h3><pre><code>永远要记住**锻炼不是PS，锻炼的目的是拥有一个健康的身体**。如上面所说的，因为**锻炼短期看不到效果**，所以最好的方式就是**每天做好日记**，不管是否锻炼，每天记录和打卡，写下自己锻炼时候的心情，锻炼完之后的感受。这个日记每天都要看一遍和回顾，有助于不断的督促和勉励自我。</code></pre><blockquote><p>很多人会想，正常人谁写日记呀？我的理解是写日记可以看出自己有没有偷懒，如果你看到自己的日记每天写一写流水账，或者中间一大段时间都是没有记录的。是否会感到羞愧呢，所以充实自己的笔记是一个监督和提升的过程。</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210201111908.png" alt=""></p><h3 id="设置有难度的奖励："><a href="#设置有难度的奖励：" class="headerlink" title="设置有难度的奖励："></a>设置有难度的奖励：</h3><p>注意前提是有难度，做法也很简单，找一件自己很想要但是又不舍得买的东西，比如耳机，键盘啥的。给自己定个目标，完成了就买下自己想要的东西作为奖励。个人是通过买一个无线蓝牙耳机作为目标奖励来犒劳自己的，到手那一刻一种自豪感油然而生。</p><blockquote><p>个人认为这种法子也很适合抵制冲动消费和报复式消费。可以树立比较正确的消费观念</p></blockquote><h3 id="不太鼓励的积分制度："><a href="#不太鼓励的积分制度：" class="headerlink" title="不太鼓励的积分制度："></a>不太鼓励的积分制度：</h3><p>之前看到网上有做积分制度来做奖励的鼓励自己坚持的，个人感觉积分要 <strong>有他人的监督</strong>情况下才有可能执行，因为人的本性<strong>喜欢创造规则而自己不愿意在规则当中</strong>。所以如果你想设计一套自己的积分制度，我这里推荐是和朋友或者家人一起制定，并且积分直接和 <strong>钱</strong>挂钩，这样才会有效果。</p><h2 id="个人养生道："><a href="#个人养生道：" class="headerlink" title="个人养生道："></a>个人养生道：</h2><h4 id="喝茶"><a href="#喝茶" class="headerlink" title="喝茶"></a>喝茶</h4><p>由于老家有父亲自己种的茶叶，并且大部分时候都是<strong>自产自销</strong>，而家里也就只有我爸喜欢喝茶，从还未懂事起就跟着我爸学着喝茶，这一喝就是喝了10多年，喝到现在基本每天都要喝上一小杯，和上瘾一样。（当然个人喝的都是一些淡茶，不会喝太浓的茶）至于喝茶影响休息，我只能说可能人和人的体质不一样，我是不会出现喝茶睡不着的情况，只要想睡觉就可以睡着，感觉还是挺幸福的。</p><blockquote><p>曾经大学室友半夜在宿舍里面一群人煮火锅我也没有醒，其实有点佩服自己的睡觉功力</p></blockquote><h4 id="规律作息"><a href="#规律作息" class="headerlink" title="规律作息"></a>规律作息</h4><p>规律作息其实也挺简单的，就是放下手机，放空大脑，同时最重要是躺在床上。基本上过个十几分钟就睡着了。这里说一下熬夜和晚睡是两码事，熬夜是一种作息不规律的表现，今天10点睡，明天凌晨睡，这样对自己的身体伤害其实是很大的。</p><h4 id="用思考代替情感，而不是用情感控制思考"><a href="#用思考代替情感，而不是用情感控制思考" class="headerlink" title="用思考代替情感，而不是用情感控制思考"></a>用思考代替情感，而不是用情感控制思考</h4><p>对于工作党来说，<strong>每天下班之后的时间是自己最自由的时候</strong>，我也是喜欢晚睡的，但是每次有这种想法之后，就会马上掐断这个念头，乖乖睡觉去。做行动之前，先用头脑代替身体思考一下，是否是正确的。如果你问我如何治疗失眠，很简单，去B站搜一个高数的课程，保证5分钟就躺了（笑）</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><pre><code>今年争取跑个**1200公里**，完成了就给自己买个**PAD**或者买个电纸书。如果你也想锻炼身体，那就马上给自己定制目标，然后**行动**起来吧！</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      跑步打卡和纪念
    
    </summary>
    
    
      <category term="健康" scheme="https://whitestore.top/categories/%E5%81%A5%E5%BA%B7/"/>
    
    
      <category term="纪念" scheme="https://whitestore.top/tags/%E7%BA%AA%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>《SpringBoot实战派》读书笔记</title>
    <link href="https://whitestore.top/2021/02/14/springbootbook1/"/>
    <id>https://whitestore.top/2021/02/14/springbootbook1/</id>
    <published>2021-02-14T03:33:43.000Z</published>
    <updated>2021-02-14T03:34:52.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《SpringBoot实战派》读书笔记"><a href="#《SpringBoot实战派》读书笔记" class="headerlink" title="《SpringBoot实战派》读书笔记"></a>《SpringBoot实战派》读书笔记</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这本书是个人<strong>抽奖送的</strong>，但是看完的感觉就是心情复杂。看了几天之后算是对于SpringBoot做了一个回顾，但是脑子里没有留下印象太深的东西。这篇读书笔记个人本来不太想要写的。但是秉持着看书必须写读书笔记的习惯，还是评价一下这本书。</p><a id="more"></a><h2 id="推荐程度："><a href="#推荐程度：" class="headerlink" title="推荐程度："></a>推荐程度：</h2><p>豆瓣<strong>7.1</strong>的打分。</p><p>不值得收藏的书，也不值得购买，80元你可以买好几本更有质量的编程书。甚至买几本出名的小说也可以比这个好。</p><p>对于熟悉的人，可以拿来查漏补缺，也可以拿来做半个工具书。</p><p>如果你是了解了springboot同时想要深入SpringBoot的，这本书也是没有什么价值。没有学过SSM直接上手SpringBoot看一下。这本书还是可以看一下的。</p><h2 id="本书评价："><a href="#本书评价：" class="headerlink" title="本书评价："></a>本书评价：</h2><ul><li><p>优点</p><ul><li><p>适合初学者</p></li><li><p>适合对于spring boot从未接触的人</p></li><li><p>内容总结比较齐全，涵盖spring boot的应用</p></li></ul></li><li><p>缺点</p><ul><li><p>代码占了很多篇幅</p></li><li><p>内容比较基础和入门</p></li><li><p><strong>很厚，但是没有营养，不建议买</strong></p></li></ul></li></ul><h2 id="思维导图："><a href="#思维导图：" class="headerlink" title="思维导图："></a>思维导图：</h2><p>简单画了一下一些内容，加上自己做的一些笔记</p><p><span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvNjBzMFZCWVl6RVI=" title="https://share.mubu.com/doc/60s0VBYYzER">https://share.mubu.com/doc/60s0VBYYzER<i class="fa fa-external-link"></i></span></p><h2 id="目录截图："><a href="#目录截图：" class="headerlink" title="目录截图："></a>目录截图：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMTAxMzAxNzE2MTMucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130171613.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130171613.png<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMTAxMzAxNzE3MjIucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130171722.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130171722.png<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMTAxMzAxNzE3MzQucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130171734.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130171734.png<i class="fa fa-external-link"></i></span></p><h2 id="感悟："><a href="#感悟：" class="headerlink" title="感悟："></a>感悟：</h2><p>作为小白学习来说，这本书算是不错而且合格的书，但是技术的更迭实在太快了，这些书基本参考大于实际的使用价值。</p><p>这次的文章希望可以给想买书的人一点提醒把，这本书对于想要深入SpringBoot的人没有啥价值。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>SpringBoot的东西还是建议多看看官方文档，或者说所有的东西学习都建议看官方文档，毕竟设计出框架的人虽然不见得可以讲得很好，但是讲得东西绝对都会对的。</p><p>越来越感觉近几年写的好书越来越少，不得不跑去看以前的一些旧书，这本书还是差点意思。</p><p>技术书还是建议多做做笔记，然后思考可以学到什么再去看，这样效果会比较好。最近跑去转转上买了不少书，开始慢慢看咯。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      springboot是实战派的读书笔记
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>我的读书方法论（一）</title>
    <link href="https://whitestore.top/2021/02/14/readbookmethod1/"/>
    <id>https://whitestore.top/2021/02/14/readbookmethod1/</id>
    <published>2021-02-14T03:30:51.000Z</published>
    <updated>2021-02-14T03:33:13.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的读书方法论（一）"><a href="#我的读书方法论（一）" class="headerlink" title="我的读书方法论（一）"></a>我的读书方法论（一）</h1><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>这篇文章主要是之前的读书笔记发文有评论说让我写一篇文章介绍下如何读书和做读书笔记的，本人对于答应的事情都会尽力去完成，所以这篇文章是个人读书方面的总结。具体要不要照做就由读者自己决定了。个人用碎片时间把：《小狗钱钱》、《穷爸爸与富爸爸》、《Redis实战》、《漫步华尔街》…..还是看了不少书的。</p><a id="more"></a><blockquote><p>特别提示一下：读书经验和<code>5W1H</code>的法则几乎在哪里都是通用的。本篇文章为个人的经验分享。</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130193715.png" alt=""></p><h1 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h1><ol><li>说到做到，承诺第一。这是个人的信条。</li><li>个人买书、看书的心得和理解。</li><li>读书既是兴趣，也是个人爱好，说一下个人的读书方式和实践</li><li>适合的才是最好的，这篇文章更多的是经验参考而不是照搬</li><li><strong>如果不会规划和计划，那就先开始行动</strong>。行动派往往会有所收获</li></ol><h1 id="思维导图："><a href="#思维导图：" class="headerlink" title="思维导图："></a>思维导图：</h1><p>我把这篇文章做了一份思维导图，如果觉得文章内容太多建议可以看看思维导图：</p><p><span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvNWloSzVLdUJrbFI=" title="https://share.mubu.com/doc/5ihK5KuBklR">https://share.mubu.com/doc/5ihK5KuBklR<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvNWloSzVLdUJrbFI=" title="https://share.mubu.com/doc/5ihK5KuBklR">幕布思维导图<i class="fa fa-external-link"></i></span></p><h1 id="碎片时间"><a href="#碎片时间" class="headerlink" title="碎片时间"></a>碎片时间</h1><h2 id="什么是碎片时间？"><a href="#什么是碎片时间？" class="headerlink" title="什么是碎片时间？"></a>什么是碎片时间？</h2><p>在具体介绍之前，说明一下个人看书更多的是利用碎片时间看书。我相信工作党<strong>利用好碎片时间</strong>读书才是最重要的，因为工作一周之后周六周末还要读书真的是一件比较难的事情。</p><p>如果是在校学生，那么基本不存在碎片的时间，除非存在很长的通勤时间或者存在兼职等。至于上班党的碎片时间基本就是地铁公交车或者路上了。</p><ol><li>上班的通勤时间或者远程旅行路途的时间</li><li>发呆时间：无论工作还是学习，人脑都不可能保存100%的全神贯注，随着时间的推移，人脑会不自觉的“发呆”</li><li>任何细碎的事情开销时间，吃饭，刷牙等等</li><li>路上琐碎的时间。</li></ol><h2 id="如何利用好碎片时间？"><a href="#如何利用好碎片时间？" class="headerlink" title="如何利用好碎片时间？"></a>如何利用好碎片时间？</h2><ul><li>个人买了一个<strong>Kindle Oassis2</strong> 在地铁上看电子书，同时推荐买一个kindle看书，很轻很方便。当然要有一定的经济能力。</li><li>手机上可以用微信读书看书，或者用<strong>樊登读书</strong>进行听书，喜马拉雅听说也不错，不过我没有试过，不做评价</li><li>地铁或者公交车上看书（最常见）</li><li>阅读以前个人做的笔记（帮助反馈）</li></ul><blockquote><p>个人的KINDLE是购入二手，电纸书个人觉得买个二手完全OK，面交我也不怕有什么猫腻。如果自己看走眼也怨不得任何人。还是强烈推荐弄个电纸书看书，能抱着手机不分心看书的人一定都是很强的人，反正我是做不到（看小说除外）</p></blockquote><h2 id="碎片时间的计算："><a href="#碎片时间的计算：" class="headerlink" title="碎片时间的计算："></a>碎片时间的计算：</h2><p>下面的内容比较理想化，内容主要和自己的生活比较贴合。粗略看下即可。</p><h3 id="通勤时间：一个半小时"><a href="#通勤时间：一个半小时" class="headerlink" title="通勤时间：一个半小时"></a>通勤时间：一个半小时</h3><p>碎片时间以个人的生活为例</p><blockquote><p> 前提：手机或者电纸书。</p></blockquote><p><strong>个人上下班约等于1个半小时</strong></p><p>除开必要的20分钟路上消耗的时间，这个时间<strong>不建议看书</strong>，而是好好看路，也不要看手机。这个时间就好好走路，注意走路的姿势。</p><blockquote><p>去年个人发生过一件事情让自己在路上再也不敢玩手机，当时在过马路遇到过路拖着3个煤气罐的摩托车，差点撞到，从那天开始很少在马路上拿出过手机。</p></blockquote><p>地铁上的1个左右小时,这里合并了上下班，换线等时间进去，这里的时间可以看大概10到20页书左右，看的快可以把一本很厚的书扫完一小半，厉害的可以扫完一大半。这里提一下地铁上不建议看博客或者过于专业的内容，除非你在到了公司之后可以马上进行记录和回顾，地铁上也不建议过于深度思考，容易坐过站，而且换线次数多很容易打断思路。</p><p>通勤时间推荐：<strong>听书代替文字阅读，视频教程代替文字阅读，思维导图代替文字阅读</strong></p><h3 id="午休时间：两小时"><a href="#午休时间：两小时" class="headerlink" title="午休时间：两小时"></a>午休时间：两小时</h3><p>个人午休时间一般为<strong>10到15分钟</strong>，同时公司午休两个小时，这个时间的碎片时间可以干不少事情。</p><ol><li>吃饭<strong>半小时</strong>：由于个人一般自己做饭带饭，很少出去外面吃，所以吃饭的时间开销不是特别大</li><li>午休15分钟左右，浅睡眠即可，深睡眠被叫醒影响下午的工作</li><li>当别人在休息，你在充实自己的时候，会很开心。</li></ol><p>午休时间推荐：看专业书籍、看看视频教程、听听音乐，谢谢文章和笔记。</p><h3 id="下班后时间：三到四小时"><a href="#下班后时间：三到四小时" class="headerlink" title="下班后时间：三到四小时"></a>下班后时间：三到四小时</h3><p>这里的时间是除开了在路上的时间。下班后的时间需要好好利用，下面说下个人在做的一些内容：</p><ol><li>看些专业之外的书籍（睡前读半小时）</li><li>看专业的书籍，做好笔记和内容分类</li><li>刷题或者做练习，思考和查资料</li><li>看视频教程，边听边做笔记</li><li>系统学习，输入和输出自己所学所想</li><li>回顾和总结以前的内容</li><li>定目标，做计划，完成并且打卡</li></ol><h3 id="周六周日："><a href="#周六周日：" class="headerlink" title="周六周日："></a>周六周日：</h3><p>这一部分变动比较大，有时候会出去锻炼一下身体，有时候会在家看书或者写写文章啥的，个人没有做过特别具体的安排，这里就不做论述了。</p><ul><li>自由安排</li><li>锻炼身体</li><li>写文章</li><li>做笔记</li><li>看视频教程</li></ul><h2 id="规划自己的碎片时间"><a href="#规划自己的碎片时间" class="headerlink" title="规划自己的碎片时间"></a>规划自己的碎片时间</h2><p>上面的计算只是粗略的规划，还是建议读者有自己的规划，个人用APP作时间规划，这里就不过多展示了，否则容易被限制思维而且估计也不太贴合所有人。规划碎片时间的目的是让自己清楚什么时间要做什么事情，久而久之形成习惯之后，自然就可以总结出自己的那一套经验。</p><blockquote><p>个人比较自由，不喜欢做表格或者卡时间点，因为发现自己曾经做的具体计划最终因为琐事都放弃，所以后续个人只要在自己设置的时间完成了自己该做的事情，就算是达标了。这一点<strong>希望读者不要学</strong>，我是一个懒人，懒人有懒人的办法，哈哈。</p></blockquote><h1 id="读书之前书的准备"><a href="#读书之前书的准备" class="headerlink" title="读书之前书的准备"></a>读书之前书的准备</h1><p>读书之前你先得有一本书，同时要有一个良好的环境，下面说下读书之前的一些准备以及一些买书的方案。</p><h2 id="事前准备："><a href="#事前准备：" class="headerlink" title="事前准备："></a>事前准备：</h2><ol><li><strong>把手机塞到看不到的地方</strong></li><li>一把舒适的椅子，最好可以躺下</li><li>一个支撑书的阅读架或者任何可以把书撑起来的物品</li><li>一本想看的书，只要一本就足够</li><li><strong>Ipad或者KINDLE（视个人）</strong></li><li>一份购书清单和读书的清单</li></ol><blockquote><p>个人买的NICE202d阅读架：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMTAxMzExMjE5MjkucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131121929.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131121929.png<i class="fa fa-external-link"></i></span></p><p>个人做的打卡本：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMTAxMzExMjIxMTIucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131122112.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131122112.png<i class="fa fa-external-link"></i></span></p></blockquote><h2 id="购书清单："><a href="#购书清单：" class="headerlink" title="购书清单："></a>购书清单：</h2><ol><li>列出自己想看的所有书籍。</li><li>合适价格，多家对比。</li><li>寻找合适的购书渠道。</li><li><strong>自己是否真的想看，是否真的能看完</strong></li></ol><h2 id="如何买书？"><a href="#如何买书？" class="headerlink" title="如何买书？"></a>如何买书？</h2><p>在去年以前我很抵触<strong>买二手书</strong>这件事情，但是今年有了改观，其实二手书对于有<strong>书本洁癖</strong>的人来说是碰不得的东西，但是我个人比较偏向书本内容，也没有收藏书本的爱好，所以今年换了一种买书方式，选择在专业的二手书机构买书，买完总结好然后卖回去，循环利用。</p><h3 id="买一手书的方式："><a href="#买一手书的方式：" class="headerlink" title="买一手书的方式："></a>买一手书的方式：</h3><p>一手书现在买的已经比较少了，买的一手书一般都是自己会保留较长时间兴趣书，可能是自己喜欢的书或者一些漫画。</p><ol><li>狗东：狗东买书个人也是冲着满减去的，没有满减我也不会买，买之前找一些APP看下价格对比，价格合适我就直接下单了</li><li>当当：<strong>不建议去当当买</strong>，而且要买就乘着满100减50的时候买书，有时候存在优惠券啥的可以买</li><li>某宝：某宝买书买的比较多的是台版的小说，技术书籍买的比较少。</li></ol><h3 id="买二手书的方式："><a href="#买二手书的方式：" class="headerlink" title="买二手书的方式："></a>买二手书的方式：</h3><p>买二手书也就那么几家，所以无所谓打不打广告了。个人的策略是买入二手书之后做好记录然后抽时间卖出去这种循环利用的形式。</p><p>转转：</p><p>转转的书 <strong>大部分时候比较靠谱</strong>，小部分时候存在缺页的问题，比如个人之前在读书笔记里面的 《恶意》这本书。同时转转上的书也比较靠谱，目前个人买书没有发现和商家描述出入很大的地方。</p><p>闲鱼：</p><p>闲鱼买书基本就是两种，一种是二手贩子，不过二手贩子大多书都是盗版扫描版，纸质非常差，买过一次之后我就没有在上面买过二手贩子的书。</p><p>第二种是搬家带不走出售，这种情况比较还是比较多的，这种看一下卖家个人评价基本可以放心买了。有时候运气好可以买到几乎全新的书，比如个人去年低价购买了一本《计算机程序的构造和解释》：（个人也有一个十多斤的书架和书=-=）</p><blockquote><p>个人在闲鱼买的一本准全新的书：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMTAxMzExMjIxMzgucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131122138.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131122138.png<i class="fa fa-external-link"></i></span></p></blockquote><p>多抓鱼：</p><p>多抓鱼的书第一次买是非常实惠的，对于新用户优惠的力度很大，但是二次之后购买需要<strong>80多</strong>才包邮，所以多抓鱼并不推荐买少量的书，而是推荐大量购入书的时候买入。</p><blockquote><p>二手书对于书本爱惜的人慎入。</p></blockquote><h2 id="关于借书："><a href="#关于借书：" class="headerlink" title="关于借书："></a>关于借书：</h2><p>买书还有一种特殊的形式是借书，通过借书的形式推动自己看书也是一种办法，不过需要注意借书不能在上面进行勾画，所以需要好好爱惜。</p><p>借书的成本一般都比较低，有些公司或者学校的图书馆都提供免费的书籍借阅，还是挺不错的。<strong>建议多借一些和公司业务贴合以及专业的书，对于自己的成长也是有帮助的</strong></p><h1 id="读书笔记该怎么写："><a href="#读书笔记该怎么写：" class="headerlink" title="读书笔记该怎么写："></a>读书笔记该怎么写：</h1><p>读书笔记最主要的是自己从中<strong>学到了什么</strong>，精简自己学到的内容。最后归总到自己的笔记里面。然后就是定期回顾，不断总结和完善。</p><h2 id="读书之前思考："><a href="#读书之前思考：" class="headerlink" title="读书之前思考："></a>读书之前思考：</h2><p>读书是一件代价很大的事情（时间成本），在看书之前一定要考虑好这本书要从里面学到那些内容。下面就读书的思考说一下个人的观点。</p><ol><li><strong>我为什么要看这本书？</strong><ol><li>被人推荐</li><li>偶然得知书名</li><li>慕名已久，想看</li><li>无聊</li></ol></li><li>看了这本书之后，我要学到哪些东西？<ol><li>扩展眼界，原来这本书这么有趣</li><li>惊喜，我从书中的内容纠正了以往的观念</li><li>这本书没有营养，以后少看这种书</li><li>鸡汤书，感化心灵却没有实际意义</li></ol></li><li>画思维导图<ol><li>构图：思维导图的大致设计</li><li>想看的内容：内容进行摘录</li><li><strong>切勿模仿</strong>，思维导图是根据个人习惯来的，COPY别人的思维导图实际作用不大（个人亲身感受）</li></ol></li><li>做好阶段笔记<ol><li>第一阶段：摘录书中内容，简单批注自己的看法</li><li>第二阶段：整理思维导图，时常回顾</li><li>第三阶段：复盘和总结，提炼知识点</li></ol></li><li>这本书我要看几遍<ol><li>一遍看完：读的快还是慢，是仔细看还是大致扫一眼（个人主要是一遍看完）</li><li>至少看三遍：一遍大致了解，两遍反思内容，三遍精简内容。</li><li>在精不在多，侧重某一处内容。</li></ol></li><li><strong>这本书我要多久看完</strong><ol><li>设置一个很长的时间段，每天看多少页（<strong>很强很强的执行力</strong>）</li><li>随机阅读：有时间就读，有碎片时间就读（<strong>很强的自律性</strong>）</li><li>缩短时间，设置一个死线，在死线时间之前看完（<strong>意外情况较多，完成率较低，但是最推荐的方法</strong>）</li><li>什么时候看完不要紧，只要看完就行了（<strong>推荐看书就想睡觉的人</strong>）</li></ol></li></ol><h2 id="读书方法："><a href="#读书方法：" class="headerlink" title="读书方法："></a>读书方法：</h2><p>这里可以看一下我的其中一篇读书笔记：</p><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODc2MjkxMTM3NzEyMTYwNzgx" title="https://juejin.cn/post/6876291137712160781">https://juejin.cn/post/6876291137712160781<i class="fa fa-external-link"></i></span></p><ol><li>快速读：每页只看一秒，在5分钟内看完一本书</li><li>读三遍：每一遍都有不同的体验</li><li>想怎么读就怎么读，自由的读</li><li>每次只读30分钟，去干别的事情</li><li>读一点点，不需要全部看完</li><li>抄书</li><li>把看到的东西读出来</li><li>N/Z阅读法</li><li>找<strong>书评视频</strong></li></ol><blockquote><p>这本书也是十分推荐看的一本书，很小一本的口袋书，可以随时拿起来翻翻看，很快乐</p></blockquote><h2 id="实践书中的内容"><a href="#实践书中的内容" class="headerlink" title="实践书中的内容"></a>实践书中的内容</h2><p>读书是为了学以致用，当然也不是所有书都可以马上学以致用的，但是我们可以努力回想那些时候可以实践并且写到自己的读书笔记里面。</p><p>实现书中的内容，不管是读书还是做笔记都可以分为以下三种：</p><ol><li>克隆：说白了就是把觉得重要的点或者感兴趣的地方做标记，因人而异</li><li>深度思考：这个阶段说明你在消化书中的内容，也说明你真的把书看进去了</li><li>记录和总结：针对作者某一处的点，进行评价和讨论</li><li>举一反三，尽量批判性角度看待书中的内容。之所以说尽量是因为<strong>没有人可以完全客观的看待任何一个事物</strong>，要知道写书人的经历和读者的经历肯定是完全不同的。</li></ol><h2 id="这本书带给你什么？"><a href="#这本书带给你什么？" class="headerlink" title="这本书带给你什么？"></a>这本书带给你什么？</h2><p>这里不以书为例，以最近个人看的漫画 <strong>《进击的巨人》</strong>，网上有评论说这是除开《钢之炼金术士》的又一部神作，里面有一段是将艾伦对于自由的看法，同时个人的理解如下：</p><blockquote><p>巨人漫画：“每个人都是自由的，我为了保护重要的事情做出我的行动是我的自由，你们阻止我达成我的目的是你们的自由，我所向往的自由会阻碍你的自由，而你的自由同样会阻碍我的自由，这时候我们的信念互相冲突，为了我的自由和你们的自由，唯一方式就是战斗”。</p><p>个人观点：自由是有尺度的，没有限制的自由最终基本演变为强权和专制。越高的自由，对自由的限制就越为宽泛，我们时常用我们自己的思想妄图去 <strong>控制</strong>时间，其实这是为了达到我们自己的自由，每个人有每个人的活法，<strong>他人的自由想法是他人的意愿，与我无关</strong>，尊重他人的自由其实是一件非常难的事情。</p><p>可以举例来讲就是最近几年兴起的<strong>网络暴力</strong>，网络语言的力量是十分强大的，他控制着他人的自由。</p><p>另外举一个例证：离开了手机，你能否活下去，答案是 <strong>完全不能</strong>。所以手机实质上已经限制了我们的“自由生活”。</p></blockquote><p>每个人对于同一段内容的理解都不相同，所以读书首先要确定的是自己的立场，自己怎么看待作者想要表达的意思。如果带给自己的东西给自己的思想有所进步，同时让自己往好的方面进步，那就是对你带来好的帮助，否则带来的收效就很小。</p><p>写下自己的感受并且发表：</p><ol><li>永远要记住看书其实就是和作者对话，我们不要被作者花言巧语给骗了，看书一定要写上自己的观点，不管是同意还是不同意，主动学习和思考对于吸收和归纳书籍的内容是很有帮助的。</li><li>其次是发表自己的观点，很多人喜欢把知识藏着掖着，早些年个人也是不太喜欢分享自己的所学所想，怕别人说幼稚或者批评和错误，但是工作之后 <strong>脸皮变厚了</strong>，很多事情都敢放下脸面去做了</li><li>总结和反馈，是最好的良药，可以随身揣个小本本，遇到好东西或者好的话语直接记在本子上，其实也是一种不错的方式。</li></ol><h2 id="做好笔记-最合适的才是最好的："><a href="#做好笔记-最合适的才是最好的：" class="headerlink" title="做好笔记,最合适的才是最好的："></a>做好笔记,最合适的才是最好的：</h2><p>网上有很多人介绍自己的学习方法，比如近几年比较推崇的 <strong>电子化学习方式</strong>，个人目前也是用的这种方式，但是个人早期也是一个忠实的 <strong>纸质化学习方式执行者</strong>。至于为什么，下面说下我的理解：</p><h3 id="纸质化笔记和电子笔记对比："><a href="#纸质化笔记和电子笔记对比：" class="headerlink" title="纸质化笔记和电子笔记对比："></a>纸质化笔记和电子笔记对比：</h3><p>下面就个人理解来对比一下纸质笔记和电子笔记。说下各自的优劣以及我的做法。</p><h4 id="纸质笔记的优劣："><a href="#纸质笔记的优劣：" class="headerlink" title="纸质笔记的优劣："></a>纸质笔记的优劣：</h4><p><strong>优势</strong>：</p><ol><li>一处内容相当于理解了三遍，肌肉记忆了一遍，大脑记住了一遍，看到了一遍，对于经常做纸质笔记的人来说非常快。</li><li>读书笔记可以随取随时翻页，可以快速的阅览</li><li>纸质笔记最大的优势在于可以前后对比，同时非常快速的进行回顾</li></ol><p><strong>劣势</strong>：</p><ol><li>携带和存储不便，需要一定的环境</li><li>纸质笔记时间长了页面发黄，字体模糊等</li><li>纸质笔记的记录速度比较慢</li></ol><h4 id="电子笔记的优劣："><a href="#电子笔记的优劣：" class="headerlink" title="电子笔记的优劣："></a>电子笔记的优劣：</h4><p><strong>优势</strong>：</p><ol><li>易存储，可以存放各大APP或者网盘，迁移方便</li><li>打字的速度要比纸质笔记要快很多，记录快速</li><li>方便整理和总结。</li></ol><p><strong>劣势</strong>：</p><ol><li>电子笔记也存在丢失的问题，所以建议多备份</li><li>电子笔记一般存储在三方平台等，不能存储机密信息</li><li>电子笔记无法对比和复盘</li></ol><h3 id="为什么我不用纸质笔记"><a href="#为什么我不用纸质笔记" class="headerlink" title="为什么我不用纸质笔记"></a>为什么我不用纸质笔记</h3><ol><li>在外地工作，纸质笔记不仅不便携带，并且搬家成本很高</li><li>电子笔记可以更好的分享而纸质笔记自己偏向个人的感受</li><li>打字的速度终究快于写字的速度</li><li>快节奏的时代想静下心来写写笔记对个人来说是件难事</li></ol><h3 id="电子笔记的几点警告："><a href="#电子笔记的几点警告：" class="headerlink" title="电子笔记的几点警告："></a>电子笔记的几点警告：</h3><ul><li>首先需要确定自己会不会分神，就好比我们想打开电脑或者手机想看本书的时候，不自觉的就和别人聊天或者干其他的事情</li><li>每次只做一件事情，一次把一件事情做好，厚书读薄。</li><li>可以写一些便签，贴在最显眼的位置，反复警告自己要去实践和完成。</li><li>如果不能控制自己，最好不要买各种多样化的电子平板，否则很容易爱奇艺。</li></ul><h3 id="我是如何整理电子笔记的："><a href="#我是如何整理电子笔记的：" class="headerlink" title="我是如何整理电子笔记的："></a>我是如何整理电子笔记的：</h3><ol><li>我的笔记和文章都是按照 <strong>月份去归纳的</strong>，到目前已经记录了<strong>两年</strong>的笔记，所以一直沿用这周记录方法，很简单，按照 <code>年份+月份</code>的方式放在一个文件夹</li><li>目录很重要，先设计目录，设计标题，然后细化分类，方便自己的回顾和总结</li><li>多备份，不要完全依赖各种APP或者电脑硬盘。个人常备一块移动机械盘进行存盘</li><li><strong>养成定期备份</strong>（纸质笔记无法备份的劣势）</li></ol><h2 id="刻意练习才能越做越好："><a href="#刻意练习才能越做越好：" class="headerlink" title="刻意练习才能越做越好："></a>刻意练习才能越做越好：</h2><p>我的观点是：<strong>再好的计划和规划不如马上行动</strong>。一旦有了想看书的想法就立马下单买一本书。因为你进行了投资，所以</p><p>这里同时也推荐一下《刻意练习》这本书，这本书精简起来其实就是：有目标，达成目标不断练习，反馈，产出。</p><blockquote><p><strong>不想看书</strong>的推荐去 “樊登读书”看一下樊登的概括。基本和看一遍书类似</p></blockquote><h2 id="笔记做出自己的特色："><a href="#笔记做出自己的特色：" class="headerlink" title="笔记做出自己的特色："></a>笔记做出自己的特色：</h2><p>这一部分比较主观，还是推荐一些外力工具辅助吧。</p><ol><li>荧光笔：荧光笔适用于自己的书，同时建议多配颜色，内容标色可以有醒目的提示。目前这种形式多见于喜欢纸质笔记的人。</li><li>便签：可以买一些标签贴或者一些标签，直接贴在对应的页码进行备注，写下自己的感受和批注等</li><li>书签：书签和上面读书方法一致，个人买的实体书基本都会配一个标签，和做任务的任务进度一般，可以培养成就感</li></ol><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h1 id="怎么样才能坚持读书？"><a href="#怎么样才能坚持读书？" class="headerlink" title="怎么样才能坚持读书？"></a>怎么样才能坚持读书？</h1><h2 id="借助外力："><a href="#借助外力：" class="headerlink" title="借助外力："></a>借助外力：</h2><p>远离手机：</p><p>远离手机的方式有很多，但是我发现很多干编程的朋友都不喜欢在周末看电脑，个人比较喜欢看电脑，包括文档和学习都是看电脑完成</p><p>做一份打卡记录表：</p><p>个人目前在某拼团APP买了一本打卡本，每天记录自己打卡的进度，当然个人完成的进度不是很好，还要更加自律才行。</p><p>寻找TODO软件：</p><p>这里推荐一个APP：<strong>时光序</strong>，这个APP对于制定目标和每天打卡挺好的，并且可以设置每天打卡提醒自己完成任务。</p><p>还有一个是微信的小程序：<strong>没有土豆</strong>，非常的简单，就是一个打卡的功能，对于习惯单纯打卡功能的人比较好</p><p>最后是推荐使用番茄工作法的APP，<strong>番茄TODO</strong>，很贴合番茄工作法，比较好用。</p><p>散步放松心情：</p><p>当你学习一大段的内容或者因为某些难题困住的时候，适当放松一下也是有必要的，因为给大脑一个缓存或许思路可以解开。</p><p>凝聚注意力：</p><p>我们经常被琐事分散注意力，所以最好<strong>寻找一段连续的时间来看书</strong>，如果经常被打断看书的效率会大打折扣。同时给自己定时定量看书，比长时间看一本书效果要好，同时读书建议定时休息，有助于回顾总结和思考。</p><h2 id="自律"><a href="#自律" class="headerlink" title="自律"></a>自律</h2><pre><code>我是自学入了编程的行业，所以自律对我来说不是什么难事，自律这种东西还是靠**行动**，个人不太喜欢做太过详细的计划，只会规定每天要做什么事情，并且要做出什么样的效果，同时要对自己的进度有清醒的认知和把控，哪怕没有完成，也要自我正视，然后去寻求突破和改变。另外，**自律是无法模仿的**，每个人的的三观由他所处的环境决定，所以多想想怎么做才适合自己。</code></pre><h2 id="躲避诱惑："><a href="#躲避诱惑：" class="headerlink" title="躲避诱惑："></a>躲避诱惑：</h2><p>很多人会觉得为什么别人可以坚持做一件事情那么久，我想无非就是<strong>躲避诱惑力</strong>，没错，就是躲避诱惑，我相信绝大多数自制力强的人不是克制诱惑而是躲避诱惑，或者是<strong>真的想要改变</strong>的人才会达到真正的自律。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文从买书到读书，到最后的坚持读书都做了一些讨论，希望这些观点对你有帮助，不知不觉又码了很多的字，不知道有多少人可以坚持看完的，这是一篇完整的总结，后续还会不断的回顾这篇内容进行精简。另外，最重要的一点是<strong>不要害怕忘记</strong>，而是要想办法去<strong>留住更多的知识</strong>在自己的脑海，把东西学成自己的东西才是最重要的。好了，本文到此结束，希望这篇文章可以给文章开头的评论者一个比较满意的答复=v=</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      关于如何读一本好书以及如何读书的个人看法
    
    </summary>
    
    
      <category term="读书方法论" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
    
      <category term="读书" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>浅谈设计模式 - 观察者模式（四）</title>
    <link href="https://whitestore.top/2021/02/14/view-modal/"/>
    <id>https://whitestore.top/2021/02/14/view-modal/</id>
    <published>2021-02-14T03:28:58.000Z</published>
    <updated>2021-02-14T03:30:17.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈设计模式-观察者模式（四）"><a href="#浅谈设计模式-观察者模式（四）" class="headerlink" title="浅谈设计模式 - 观察者模式（四）"></a>浅谈设计模式 - 观察者模式（四）</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>观察者模式又叫做 <strong>发布订阅模式</strong>，这个设计模式无论在工作还是生活的应用都是非常常见的，但是在我们的代码里面应用场景并不是很多，一般这种设计模式更多的是由 <strong>消息中间件</strong>进行替代，但是在<code>swing</code>等<code>GUI</code>框架里面可以看到大量的实际使用案例。</p><a id="more"></a><h2 id="什么是观察者模式？"><a href="#什么是观察者模式？" class="headerlink" title="什么是观察者模式？"></a>什么是观察者模式？</h2><p>监听某一个对象的变化，同时可以根据对象的变化执行对应的不同方法。为了更好的解耦，监听者和发布者之间互相实现独立的接口，与此同时，<strong>观察者模式</strong>定义了对象之间的一对多依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新，如果需要更好的设计，可以通过Flag设置是否通知。值得一提的是，观察者模式和线程安全问题息息相关。</p><h2 id="观察者模式结构图："><a href="#观察者模式结构图：" class="headerlink" title="观察者模式结构图："></a>观察者模式结构图：</h2><p>观察者模式主要的是两个接口，同时一般需要在发布者对象内部维护一个订阅者的集合，这样是为了方便发布者对于订阅者的消息推送，而订阅者的接口通常为更新数据用的接口，供发布者调用推送更新数据。</p><p>观察者模式的结构图还是比较好辨认的，因为存在<strong>订阅接口</strong>和<strong>发布接口</strong>。可以看到这是一个明显的松耦合的设计，订阅者不知道发布者的具体细节，发布者也不需要关注订阅者的细节，只需要关注更新数据的接口。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131195416.png" alt=""></p><h2 id="观察者模式的特点："><a href="#观察者模式的特点：" class="headerlink" title="观察者模式的特点："></a>观察者模式的特点：</h2><ol><li>主题接口和发布者接口互相独立，同时主题接口一般需要组合订阅者在对象内部。</li><li><strong>一对多的关系</strong>，表示一个被观察者对象对应多个观察者对象的关系。</li><li>观察者模式是一种<strong>行为型模式</strong>，因为他涉及到观察的行为和发布的行为，发布的行为是抽象的，而且订阅的行为也是抽象的。</li></ol><h2 id="什么情况下使用观察者模式？"><a href="#什么情况下使用观察者模式？" class="headerlink" title="什么情况下使用观察者模式？"></a>什么情况下使用观察者模式？</h2><p>观察者模式是一个无处不在的模式，关于消息订阅，异步通信等，基本都是对于观察者模式的翻版或者直接实现。当出现一对多的情况，比如多个对象需要监听一个对象的数据改变，或者一个接口的数据需要通知多个订阅者，就可以考虑使用观察者模式实现。</p><h2 id="实际案例："><a href="#实际案例：" class="headerlink" title="实际案例："></a>实际案例：</h2><p>观察者模式在自己的构造层面用的比较少，但是在许多框架里面有用到，观察者模式更重要的是思想，所以大致看一下应用场景即可。</p><h3 id="模拟场景："><a href="#模拟场景：" class="headerlink" title="模拟场景："></a>模拟场景：</h3><p>这次的模拟场景参考<strong>基金的涨跌</strong>，我们都知道基金的涨跌是会实时告知订阅者的，所以我们将基金作为一个主题，然后人作为基金的订阅者，当基金在交易时间有涨跌的情况，就实时改变数据并且通知订阅者。</p><h4 id="使用策略模式和工厂模式？"><a href="#使用策略模式和工厂模式？" class="headerlink" title="使用策略模式和工厂模式？"></a>使用策略模式和工厂模式？</h4><p>我们回顾之前学到的两个设计模式，<strong>策略模式</strong>和<strong>工厂模式</strong>：</p><p>策略模式的结构图如下所示：</p><blockquote><p>很明显，策略模式虽然是<strong>行为型模式</strong>但是无法解决一个基金通知多个订阅者的需求，因为我们之前讲到订阅的行为和发布的行为都是需要抽象的，因为我们的基金虽然是作为主题并且可以由多个人实现，但是无法反映发布者和观察者直接松耦合这一个概念。</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131192400.png" alt=""></p><p>下面是工厂模式的结构图：</p><blockquote><p>工厂模式是<strong>创建型模式</strong>，他所关注的是<strong>对象的创建</strong>而不是关注对象的行为，这里直接否决。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131192910.png" alt=""></p></blockquote><h4 id="使用设计模式："><a href="#使用设计模式：" class="headerlink" title="使用设计模式："></a>使用设计模式：</h4><p>这里直接给出使用设计模式的形式，因为这种情况下使用观察者的设计模式的策略是最好的，他可以通过主题发布者通知所有的订阅者进行通知，我们通过设计一个基金的通用接口，提供供基金观察者注册和取消关注的接口。同时用具体的发布机构进行实现，设计一个基金的观察者模拟股民，提供对外的更新接口给基金的发布机构进行数据的推送，而基金观察者也就是股民只需要实现自己的具体业务即可。</p><p>我们同样按照观察者模式的设计结构图模仿做出一个基金的结构图设计：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131202319.png" alt=""></p><p>我们根据上面的结构以及之前的说明设计出以下几个对应的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ FundSubject.java  基金的相关接口</span><br><span class="line">+ FundConcreteSubject.java 基金的具体实现，充当发布者</span><br><span class="line">+ FundObserver.java - 股民 - 订阅者</span><br><span class="line">+ StockholderObserver.java 具体的股民订阅者实现</span><br></pre></td></tr></table></figure><p>我们先来看一下基金的发布者，基金发布者需要维护一个基金订阅者的列表，同时需要提供对外的接口供基金订阅者进行注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基金的相关接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/31 20:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FundSubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册订阅者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fundObserver 订阅者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(FundObserver fundObserver)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除指定订阅者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fundObserver 订阅者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(FundObserver fundObserver)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知所有的订阅者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyAllObserver</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发布者的具体实现类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基金具体的实现方</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/31 20:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FundConcreteSubject</span> <span class="keyword">implements</span> <span class="title">FundSubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前的单位净值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> nownum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定所有的订阅者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;FundObserver&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FundConcreteSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(FundObserver fundObserver)</span> </span>&#123;</span><br><span class="line">        list.add(fundObserver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(FundObserver fundObserver)</span> </span>&#123;</span><br><span class="line">        list.remove(fundObserver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        list.forEach(item -&gt; item.change(nownum));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> v = <span class="keyword">new</span> Random(<span class="number">1000</span>).nextDouble();</span><br><span class="line">        <span class="comment">// 单位净值改变，通知所有的股民</span></span><br><span class="line">        nownum = v;</span><br><span class="line">        notifyAllObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们看一下订阅者，订阅者提供一个数据变动的接口，供发布者进行调用并且进行数据的通知推送和更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 股民 - 订阅者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/31 20:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FundObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基金涨跌接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">double</span> num)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面根据订阅者接口进行具体的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体的订阅者实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/31 20:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockholderObserver</span> <span class="keyword">implements</span> <span class="title">FundObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前订阅者关注的单位净值数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">double</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前股票的净值为:"</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ol><li>当我们需要扩展发布者的接口，直接实现发布的接口即可</li><li>当我们需要扩展订阅者，也可以直接通过直接实现接口即可进行处理</li><li>通常会在发布者里面维护一个订阅者的列表进行通知。</li></ol><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ol><li>上面的接口反应了一个基金每次更新数据都往订阅者推送数据。但是订阅者不一定想要收到。</li><li>订阅者不能主动的获取数据，只能够等待发布者推送数据。</li><li><strong>如何实现订阅者主动获取到发布者的数据？</strong></li><li><strong>java</strong>内置的观察者和订阅者实现了既可以由发布者推送数据给订阅者，也可以实现订阅者主动获取发布者的数据</li></ol><h4 id="JDK实现观察者模式："><a href="#JDK实现观察者模式：" class="headerlink" title="JDK实现观察者模式："></a>JDK实现观察者模式：</h4><p>JAVA官方是有实现<code>观察者模式</code>的，下面说一下JDK自带的观察者模式如何实现：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210202001753.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ JdkFundObserver.java JDK实现基金的订阅者接口</span><br><span class="line">+ JdkFundObserverConstruct.java JDK订阅者实现</span><br><span class="line">+ JdkFundSubject JDK发布者实现子类</span><br><span class="line">+ Observable JDK 发布者父类</span><br><span class="line">+ Main.java 单元测试</span><br></pre></td></tr></table></figure><p>JDK实现基金的订阅者接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK实现基金的订阅者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/1 22:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JdkFundObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK订阅者实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK订阅者实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/1 22:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkFundObserverConstruct</span> <span class="keyword">implements</span> <span class="title">JdkFundObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> JdkFundSubject) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arg == <span class="keyword">null</span>)</span><br><span class="line">                price += <span class="number">1</span>d;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                price = (<span class="keyword">double</span>) arg;</span><br><span class="line">            System.err.println(price);</span><br><span class="line">            price = ((JdkFundSubject) o).getPrice();</span><br><span class="line">            System.err.println(price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK发布者的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK发布者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/1 22:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkFundSubject</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;JdkFundObserver&gt; fundObservers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JdkFundSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fundObservers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NotifyAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        price = <span class="keyword">new</span> Random(<span class="number">1000</span>).nextDouble();</span><br><span class="line">        setChanged();</span><br><span class="line">        notifyObservers(price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JDK的发布者父类请查看：<code>java.util.Observable</code></p></blockquote><p>单元测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单元测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/1 22:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JdkFundObserver jdkFundObserver = <span class="keyword">new</span> JdkFundObserverConstruct();</span><br><span class="line">        JdkFundSubject jdkFundSubject = <span class="keyword">new</span> JdkFundSubject();</span><br><span class="line">        jdkFundSubject.addObserver(jdkFundObserver);</span><br><span class="line">        jdkFundSubject.NotifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>变成观察者和发布者</strong></p><p>发布者需要<strong>继承</strong><code>java.util.Observable</code>类。调用<code>addObserver()</code>添加对应的观察者</p><p>观察者需要<strong>实现</strong><code>java.util.Observable</code>接口。</p><p><strong>如何发送通知：</strong></p><ol><li>调用<code>setChanged()</code>(最重要的一步)，标记状态更改了状态。这一步<strong>非常重要</strong></li><li>调用<code>notifyObservers()</code>方法，发送通知给所有的观察者。</li></ol><blockquote><p>为什么需要更改状态订阅者才会接受通知？</p><p>JDK的flag标识是为了实现发布者可以手动进行通知。</p></blockquote><blockquote><p>注意：JDK的代码里面对于通知的方法没有进行方法同步（synchronized），而是使用<code>synchronized</code>锁锁住整个<code>Flag</code>的标识的改动代码，这里会遇到（可能）最坏的竞态条件是：</p><ol><li>新加入的观察者收不到通知</li><li>已经取消监听的观察者收到了通知。</li></ol></blockquote><p><strong>观察者如何接受通知：</strong></p><p>实现更新<code>update</code>的方法，参数略微不同，签名如下<code>void update(Observable o, Object arg)</code></p><ul><li>第一个参数是主题，在订阅者的<code>update()</code>方法，可以使用<code>instanceof</code>判断对应的主题进行对应的操作</li><li>第二个参数是主题携带的参数，主题通过主动传递给观察者，观察者选择是否需要更新携带参数。</li></ul><h5 id="JDK实现的观察模式特点："><a href="#JDK实现的观察模式特点：" class="headerlink" title="JDK实现的观察模式特点："></a>JDK实现的观察模式特点：</h5><ol><li>设置一个flag，可以控制发布者的通知开关，选择通知的时机</li><li>发布者通知参数的同时</li><li>JDK的发布订阅是<strong>线程安全</strong>的，使用<code>synchronized</code>对于方法加锁，同时使用线程安全容器维护所有的订阅者。同时按照订阅者添加顺序进行通知。</li></ol><h5 id="JDK实现的观察模式缺点："><a href="#JDK实现的观察模式缺点：" class="headerlink" title="JDK实现的观察模式缺点："></a>JDK实现的观察模式缺点：</h5><ol><li>通知状态变更被实现为一个被保护的方法，通知标志被保护，<strong>依赖继承</strong>。</li><li>大量的同步方法以及使用线程安全的旧集合存储观察者，<strong>效率低</strong></li><li>最大的问题在于JDK的观察者<strong>是一个类而不是一个接口</strong>。</li></ol><h2 id="总结观察者要点："><a href="#总结观察者要点：" class="headerlink" title="总结观察者要点："></a>总结观察者要点：</h2><ul><li>观察者模式定义了对象之间一对多的关系。</li><li>主题（也就是可观察者）用一个共同的接口来更新观察者的数据。</li><li>观察者和发布者之间用松耦合方式结合（loosecoupl-ing），发布者不知道观察者的细节，只知道观察者实现了观察者接口。</li><li>使用此模式时，你可从发布者处<code>推（push）</code>或<code>拉（pull）</code>数据（然而，推的方式更加“正确”）。</li><li>有多个观察者时，不可以依赖特定的通知次序。</li><li>Java有多种观察者模式的实现，包括了通用的<code>java.util.Observable</code>。</li><li>要注意<code>java.util.Observable</code>实现上所带来的一些问题。</li><li>如果有必要的话，可以实现自己的<code>Observable</code>。</li><li><code>Swing</code>大量使用观察者模式，许多<code>GUI</code>框架也是如此。</li><li>此模式也被应用在许多地方，例如：<code>JavaBeans</code>、<code>RMI</code>。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>从上面的实例可以看到，观察者模式在代码层面的应用其实真不算特别多，这个模式也如前文所说的更多的是应用在框架或者一些消息队列的模式里面。同时JDK的观察者模式也确实是一个不太好的设计。如果需要自己动手实现观察者模式，还是更加推荐自己实现。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      使用观察者模式
    
    </summary>
    
    
      <category term="设计模式" scheme="https://whitestore.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://whitestore.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
