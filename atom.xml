<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LazyTimes的博客</title>
  
  <subtitle>生死有命，富贵在天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lazytime.site/"/>
  <updated>2020-10-29T13:22:01.308Z</updated>
  <id>http://lazytime.site/</id>
  
  <author>
    <name>阿东</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一次项目短信验证码整改实验</title>
    <link href="http://lazytime.site/2020/10/29/%E4%B8%80%E6%AC%A1%E9%A1%B9%E7%9B%AE%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E6%95%B4%E6%94%B9%E5%AE%9E%E9%AA%8C/"/>
    <id>http://lazytime.site/2020/10/29/%E4%B8%80%E6%AC%A1%E9%A1%B9%E7%9B%AE%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E6%95%B4%E6%94%B9%E5%AE%9E%E9%AA%8C/</id>
    <published>2020-10-29T13:20:42.000Z</published>
    <updated>2020-10-29T13:22:01.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一次短信验证码整改实验"><a href="#一次短信验证码整改实验" class="headerlink" title="一次短信验证码整改实验"></a>一次短信验证码整改实验</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>讨论内容部分为当初的一些短信验证码的需求细节讨论</p><p>这个短信验证码在并发量非常大的情况下有可能会失效，后续会进行整改升级，保证线程安全</p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>短信验证码（要想着怎么把所有的项目都整改起来，不影响原有业务运行） 3天时间，全部替换掉</p><ul><li><p>发送短信</p><ul><li>增加【业务类型】</li><li>获取短信的时候，增加图片验证码（此处用第三方框架实现）</li><li>单独增加短信验证码的 ip访问控制 CheckSendSmsIpVisitHelper ，注意别和 CheckIpVisitHelper 冲突</li><li>校验手机号码长度 11 位 </li><li>60s 根据【手机号码+业务】判断只能发送一次短信，此处将 【手机号码+业务】作为 map 的 key 存储在上下文中</li><li>可以灵活配置【手机号码+业务】 每天能够获取短信的次数</li></ul></li><li><p>校验短信</p><ul><li>增加【手机号+短信验证码】的匹配</li><li>校验成功，清理掉session中存储的信息</li></ul></li></ul><h1 id="讨论内容"><a href="#讨论内容" class="headerlink" title="讨论内容"></a>讨论内容</h1><ul><li>验证码就用第三方的。<code>google kaptcha</code> 这个可以试试</li><li>这样 jydd apps 都可以用，2-3天可以完全替换掉所有业务的短信。</li><li>页面的修改，直接找建哥提供样式。</li><li>把所有业务都一并改了，省的隔三差五的出报告要整改</li><li>我要一个完全独立的短信验证码模块，虽然不能在按照项目模块来划分，那就完全独立出来包和功能以及依赖</li><li>其实可以直接在apps 的 core里面开发，然后那边直接引用调用？jar包的方式放进去就是的。</li></ul><h2 id="处理方案："><a href="#处理方案：" class="headerlink" title="处理方案："></a>处理方案：</h2><h2 id="第三方图形验证码参考"><a href="#第三方图形验证码参考" class="headerlink" title="第三方图形验证码参考"></a>第三方图形验证码参考</h2><p><a href="https://www.cnblogs.com/yangzhilong/p/8574685.html" target="_blank" rel="noopener">SpringBoot之配置google kaptcha</a></p><p><a href="https://www.cnblogs.com/FlyHeLanMan/p/6293991.html" target="_blank" rel="noopener">SpringMvc项目中使用GoogleKaptcha 生成验证码</a></p><p><a href="https://www.ramostear.com/doc/happy-captcha" target="_blank" rel="noopener">happy-captcha</a></p><h3 id="图形验证码："><a href="#图形验证码：" class="headerlink" title="图形验证码："></a>图形验证码：</h3><ol><li>调整页面，增加图形验证码的模块（不同模块需要的改动点不一样）</li></ol><blockquote><p>也可以先把功能做出来，再让前端根据实际情况去调整样式</p></blockquote><ol><li>尝试增加 happy-captcha 或者 google-captcha （实际查询资料发现没有进行维护）</li><li>先不考虑美观问题，以实现功能为主要，后续需要改样式在找前端处理</li></ol><blockquote><p>20200903 已实现</p></blockquote><h3 id="短信校验"><a href="#短信校验" class="headerlink" title="短信校验"></a>短信校验</h3><ol><li>60s 根据【手机号码+业务】判断只能发送一次短信，此处将 【手机号码+业务】作为 map 的 key 存储在上下文中</li></ol><blockquote><ol><li>将短信的配置独立到一个单独的xml 文件中，方便 spirngboot 项目以及 spinrgmvc 管理</li><li>业务模块按照模板的格式配置，不跟项目走</li><li>xml 配置读取参考 节假日的xml 配置读取以及作用</li><li>整个部分可以参考节假日的处理方式，迁移比较方便</li></ol></blockquote><p>使用xml 配置手机+业务模块</p><ol start="2"><li>校验手机号码长度 11 位 </li></ol><blockquote><ol><li>写到工具类里面，单独增加一个方法，需要的时候在调用的地方加入（方案一）</li><li>直接在调用的地方补充添加（方案二）</li></ol></blockquote><p>直接在短信接口加入即可</p><ol start="3"><li>可以灵活配置【手机号码+业务】 每天能够获取短信的次数</li></ol><blockquote><ol><li>其实就是业务模块单个手机号码的限制次数</li></ol><p>PS: 目前的攻击手段可以用虚拟手机号码 + 肉鸡服务器 实现，手机号+业务的限制作用个人理解来看作用不明显</p></blockquote><ol start="4"><li>大致的工具类设置</li></ol><ul><li>初始化读取xml配置</li><li>加载一些动态配置到属性里面，包括一些校验次数的限制</li><li>单例模式</li><li>尽量少的使用三方工具包，尽量使用原生java实现</li><li>注意jdk 版本的问题，不以jdk1.8 为基准</li><li>CheckSendSmsIpVisitHelper 可以是对 CheckIpVisitHelper  的扩展</li><li><a href="https://www.ramostear.com/doc/happy-captcha" target="_blank" rel="noopener">happy-captcha</a> 以此作为参考实现 ，google 的图形化验证码比较老了</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>目前先尝试 使用一下是否可行， 如果可行在进行处理</li><li>先不考虑样式问题，先以实现功能保证可用并可以迁移为主</li><li>多测试，保证功能稳定，在考虑迁移到apps </li></ol><h3 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h3><ol><li>输入手机号码</li><li>在点击发送短信按钮之前，弹出输入图形验证码</li><li>输入正确的图形验证码，发送短信，图形验证取消，回到输入手机验证码界面</li><li>如果输入推行验证码不对，一直重复步骤2</li></ol><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><h3 id="1-绕过图形验证码的接口，直接访问短信接口进行攻击，如何避免"><a href="#1-绕过图形验证码的接口，直接访问短信接口进行攻击，如何避免" class="headerlink" title="1. 绕过图形验证码的接口，直接访问短信接口进行攻击，如何避免?"></a>1. 绕过图形验证码的接口，直接访问短信接口进行攻击，如何避免?</h3><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><ol><li>在 【手机号+业务】中增加一个图形验证码的key, 在校验之前，先校验用户当前提交的手机号和图形验证码是否匹配<ol><li>匹配：清空用户当前的图形验证码，需要重新请求图形验证码接口才能进行下一次请求</li><li>超时：图形验证码有效时间为60秒，超过60秒需要重新请求图形验证码，重新请求短信接口</li><li>不匹配，返回错误信息</li></ol></li><li>设置校验开关，如果需要在短信接口加入图形验证码的校验，则在发送短信之前，需要当前的图形验证码是否吻合（如果没有图形验证码说明没有经过图形验证这一步骤，直接返回失败）<ol><li>图形验证码校验关闭，则不会涉及用户图形验证码和手机号的匹配（考虑临时需要关闭这种校验的情况）</li><li>开启，则会进行上面所说的匹配操作</li></ol></li><li>图形验证码设置为通过校验之后失效，下次请求需要携带新的图形验证码，才能请求通过短信接口</li></ol><h3 id="2-增加【手机号-业务】的配置校验"><a href="#2-增加【手机号-业务】的配置校验" class="headerlink" title="2. 增加【手机号-业务】的配置校验"></a>2. 增加【手机号-业务】的配置校验</h3><p>解决方案：</p><ol><li>短信模块需要在js请求增加模块参数，如果没有模块参数，视为非法请求</li><li>请求带入 手机号-业务-key ，存储当前手机号对应业务的请求次数</li><li>增加判断<ol><li>如果请求次数在<strong>当天</strong>内超过xml配置次数，将不再允许改手机号对应该接口进行请求，不再发送短信</li><li>但是如果超过了一天之后再次请求，需要将请求次数 <strong>重置为1</strong>，也可以重新发送短信接口请求</li></ol></li><li>在需要的地方调用工具包即可</li></ol><h1 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h1><h2 id="成果："><a href="#成果：" class="headerlink" title="成果："></a>成果：</h2><h3 id="控制器调用："><a href="#控制器调用：" class="headerlink" title="控制器调用："></a>控制器调用：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 开启之后，才做进一步校验</span></span><br><span class="line"><span class="keyword">if</span>(PHONE_MODULE_CHECK_ENABLE)&#123;</span><br><span class="line">    <span class="comment">// 添加 【手机+业务模块】校验 以及 【60秒重复调用校验】</span></span><br><span class="line">    <span class="keyword">boolean</span> checkRequest = CheckSendMailHelper.checkContextMap(result, request, phone);</span><br><span class="line">    <span class="comment">// 校验不通过的处理办法，可以自定</span></span><br><span class="line">    <span class="keyword">if</span> (!checkRequest) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//限制用户ip访问短信机获取验证码次数，默认10次</span></span><br><span class="line"><span class="keyword">if</span> (IP_CHECK_ENABLE &amp;&amp; !CheckIpVisitHelper.check(request)) &#123;</span><br><span class="line">    <span class="comment">// 校验不通过的处理办法，可以自定</span></span><br><span class="line">    result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_6.getCode());</span><br><span class="line">    result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_6.getName());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PHONE_MODULE_CHECK_ENABLE：短信-业务模块校验开关</p><p>IP_CHECK_ENABLE：限制短信每天的获取次数，也是手机号+业务模块</p></blockquote><h3 id="短信相关的枚举常量："><a href="#短信相关的枚举常量：" class="headerlink" title="短信相关的枚举常量："></a>短信相关的枚举常量：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SmsRequestStatusEnum &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回状态码 表示发送正常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_1(<span class="number">1</span>, <span class="string">"返回状态码 表示发送正常"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 60s内只能获取不能重复获取验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_2(<span class="number">2</span>, <span class="string">"60s内只能获取不能重复获取验证码"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号码长度不正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_3(<span class="number">3</span>, <span class="string">"手机号码长度不正确"</span>),</span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 用户session已失效</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    RESULT_STATUS_4(4, "用户session已失效"),</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缺少必要的参数：手机号！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_4(<span class="number">4</span>, <span class="string">"缺少必要的参数：手机号！"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号码长度不正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_5(<span class="number">5</span>, <span class="string">"手机号码长度不正确"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同一个ip请求短信机次数过于频繁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_6(<span class="number">6</span>, <span class="string">"同一个ip请求短信机次数过于频繁！"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 60秒内不允许重复请求短信接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_7(<span class="number">7</span>, <span class="string">"60秒内不允许重复请求短信接口！"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缺少必要的请求参数：短信业务模块名称：phoneModule ！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_9(<span class="number">9</span>, <span class="string">"缺少必要的请求参数：短信业务模块名称：phoneModule ！"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前手机号请求超出限制，请等待24小时之后重新请求短信接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_10(<span class="number">10</span>, <span class="string">"当前手机号请求次数超出限制，请等待24小时之后重新请求短信接口"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图形验证码已失效，请重新请求短信接口！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_8(<span class="number">8</span>, <span class="string">"图形验证码已失效，请重新请求短信接口！"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    SmsRequestStatusEnum(<span class="keyword">int</span> code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (SmsRequestStatusEnum item : SmsRequestStatusEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getCode() == code) &#123;</span><br><span class="line">                <span class="keyword">return</span> item.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IP检测工具类："><a href="#IP检测工具类：" class="headerlink" title="IP检测工具类："></a>IP检测工具类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测ip访问辅助类，</span></span><br><span class="line"><span class="comment"> * 主要处理某个时间段类，</span></span><br><span class="line"><span class="comment"> * ip访问次数，以及设置封禁时间、</span></span><br><span class="line"><span class="comment"> * 解封等操作，</span></span><br><span class="line"><span class="comment"> * 用于防止频繁调用短信机攻击等</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 重写原理：</span></span><br><span class="line"><span class="comment"> * 1. 使用LRUMap key 存储 IP号码，value 存储 访问次数以及时间（使用map）</span></span><br><span class="line"><span class="comment"> * 2. 使用servletContext 存储 LRUMap，LRUMap 存储 的 key 为 IP号码-业务模块 VALUE 为 map</span></span><br><span class="line"><span class="comment"> * 3. LRUMap 对应的 key IP号码+业务。 value 绑定了访问次数和时间</span></span><br><span class="line"><span class="comment"> * 4. 如果没有配置模块，校验将会永久失败，IP的模块和短信的模块使用同一块配置</span></span><br><span class="line"><span class="comment"> * 5. ServletContext 生命周期和web的生命周期相同</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2020/09/08 重写工具类，</span></span><br><span class="line"><span class="comment"> * 1. 不在暴露 map。</span></span><br><span class="line"><span class="comment"> * 2. 使用servletContext 保存 Ip 的 map。Map&lt;String,Object&gt; 形式</span></span><br><span class="line"><span class="comment"> * 3. 如果超过IP限制时间，自动进行解锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckIpVisitHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志使用 短信的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="string">"phoneCode"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机访问限制初始化的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE_REQUEST_INIT_SIZE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封禁的时间（单位毫秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FORBIDEN_TIME = <span class="number">60</span> * <span class="number">1000</span> * <span class="number">60</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超过访问时间重新计时（单位毫秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MININTEVAL = <span class="number">60</span> * <span class="number">1000</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LRU Map 初始化大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LRU_MAP_INIT_SIZE = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IP 在指定时间内的限制次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IP_MAX_VISIST_TIME = Setter.getInt(<span class="string">"sms.ip-size"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ip检测使用的 Map key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IP_CHECK_MAP = <span class="string">"IP_CHECK_MAP"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VISIT_COUNT_KEY = <span class="string">"visit_count"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后的请求时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VISIT_TIME_KEY = <span class="string">"visit_time"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IP号码-业务模块名称的格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IP_MOUDULE_FORMAT = <span class="string">"%s-%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ip检查工具，将map 放入 ServletContext</span></span><br><span class="line"><span class="comment">     * 1. 检测基于 ServletContext</span></span><br><span class="line"><span class="comment">     * 2. 请附带 phoneModule: 否则校验永远为false</span></span><br><span class="line"><span class="comment">     * map 当中:</span></span><br><span class="line"><span class="comment">     * key: IP号码-业务</span></span><br><span class="line"><span class="comment">     * value:</span></span><br><span class="line"><span class="comment">     * map -&gt; &#123;</span></span><br><span class="line"><span class="comment">     *  key: 请求次数：value: int</span></span><br><span class="line"><span class="comment">     *  key：请求的时间：value：date</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request request请求域</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果校验没有超过限制 返回 true ，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String remoteIp = RequestHelper.getRemoteIp(request);</span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        LRUMap attribute = (LRUMap) servletContext.getAttribute(IP_CHECK_MAP);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(attribute)) &#123;</span><br><span class="line">            attribute = <span class="keyword">new</span> LRUMap(LRU_MAP_INIT_SIZE);</span><br><span class="line">            servletContext.setAttribute(IP_CHECK_MAP, attribute);</span><br><span class="line">        &#125;</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 根据 IP + 业务模块进行绑定</span></span><br><span class="line">        <span class="comment">// 获取请求的模块名称 同时检查是否有配置模块</span></span><br><span class="line">        String phoneMouduleFlag = CheckSendMailHelper.checkExistsAndGetModule(request);</span><br><span class="line">        <span class="keyword">if</span> (phoneMouduleFlag == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// IP号码 -业务名称</span></span><br><span class="line">        String modulePhone = String.format(IP_MOUDULE_FORMAT, remoteIp, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 获取ip对应的的当前请求次数和请求时间</span></span><br><span class="line">        Map&lt;String, Object&gt; ipMap = (Map&lt;String, Object&gt;) attribute.get(modulePhone);</span><br><span class="line">        <span class="comment">// 如果当前ip没有访问过</span></span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isEmpty(ipMap)) &#123;</span><br><span class="line">            ipMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            ipMap.put(VISIT_COUNT_KEY, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">            ipMap.put(VISIT_TIME_KEY, now);</span><br><span class="line">            attribute.putIfAbsent(modulePhone, ipMap);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> visitCount = (<span class="keyword">int</span>) ipMap.get(VISIT_COUNT_KEY);</span><br><span class="line">        Date visitDate = (Date) ipMap.get(VISIT_TIME_KEY);</span><br><span class="line">        <span class="comment">// 如果长时间没有访问，重新计算</span></span><br><span class="line">        <span class="keyword">if</span> (now.getTime() - visitDate.getTime() &gt; MININTEVAL) &#123;</span><br><span class="line">            ipMap.put(VISIT_COUNT_KEY, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">            ipMap.put(VISIT_TIME_KEY, now);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果访问的次数超过了限制的次数</span></span><br><span class="line">        <span class="keyword">if</span> (visitCount &gt; IP_MAX_VISIST_TIME) &#123;</span><br><span class="line">            <span class="comment">// 如果已经到达限制的次数，但是访问时间超过了限制的时间，重新计时，重新计算请求次数</span></span><br><span class="line">            <span class="keyword">if</span> (now.getTime() - visitDate.getTime() &gt; FORBIDEN_TIME) &#123;</span><br><span class="line">                ipMap.put(VISIT_COUNT_KEY, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">                ipMap.put(VISIT_TIME_KEY, now);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"当前IP: &#123;&#125; 请求次数超过限制"</span>, remoteIp);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// IP访问次数 + 1</span></span><br><span class="line">            visitCount++;</span><br><span class="line">            <span class="comment">// 更新访问次数</span></span><br><span class="line">            ipMap.put(VISIT_COUNT_KEY, visitCount);</span><br><span class="line">            <span class="comment">// 更新访问时间</span></span><br><span class="line">            ipMap.put(VISIT_TIME_KEY, now);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>使用的是servlet-context 全局变量作为存储，依赖web的服务器空间大小，当短信号码过量会造成服务器可访问内存不够，可以考虑用redis 等中间件去存储</li><li>LRUMap：使用最少使用内容作为缓存的设计，存储业务需要判断的手机号等</li><li>静态方法意味着会出现并发的问题，整个工具类是线程不安全的。</li></ol></blockquote><h3 id="短信发送校验工具类："><a href="#短信发送校验工具类：" class="headerlink" title="短信发送校验工具类："></a>短信发送校验工具类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送校验工具类</span></span><br><span class="line"><span class="comment"> * map 存储的 key 为手机号码-业务</span></span><br><span class="line"><span class="comment"> * value  为 发送对象等其他信息</span></span><br><span class="line"><span class="comment"> * 包含</span></span><br><span class="line"><span class="comment"> * 1. 图形验证码（不开放不做校验）</span></span><br><span class="line"><span class="comment"> * 2. 图形验证码有效时间</span></span><br><span class="line"><span class="comment"> * 3. 【手机号-业务】 key-name 的配置</span></span><br><span class="line"><span class="comment"> * 4. 【手机号-业务-锁定时间】 key-date</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> lazytimes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/09/02 10:21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckSendMailHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信验证码配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="string">"phoneCode"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 60 秒内不允许重复请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE_REQUEST_TIME = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 60 秒 内 图形验证码有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPTCHA_REQUEST_TIME = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户模块手机号的限制时间 24 小时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE_REQUEST_WAIT_TIME = <span class="number">60</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机访问限制初始化的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE_REQUEST_INIT_SIZE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求上下文的map key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTEXT_MAP = <span class="string">"CONTEXT_MAP"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号-业务模块名称的格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PHONE_MOUDULE_FORMAT = <span class="string">"%s-%s"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号-业务模块-请求key 的格式标注用户当前模块的请求 定时器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PHONE_MOUDULE_TIMER_FORMAT = <span class="string">"%s-%s-timer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信验证码模块的通用格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_MODULE_TEMPLATE = <span class="string">"sms.modules.%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号-业务-图形验证码 模块名称的格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CAPTCHA_MOUDULE_FORMAT = <span class="string">"%s-%s-captcha"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号-业务模块-图形验证码-请求key 的格式标注用户当前模块的请求 图形验证码 每个手机号对应业务一份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CAPTCHA_MOUDULE_TIMER_FORMAT = <span class="string">"%s-%s-captcha-timer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务模块名称参数Key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PHONE_MOUDULE_FLAG = <span class="string">"phoneModule"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图形验证码key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CAPCHACODE = <span class="string">"capchaCode"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 最后发送时间key</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    private static final String LAST_SEND_TIME = "lastSendTime";</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图形验证码开关</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CAPTCHA_ENABLE = Setter.getBoolean(<span class="string">"captcha.enable"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为当前的用户手机号码绑定 图形验证码</span></span><br><span class="line"><span class="comment">     * 图形验证码用于短信接口请求使用，超过一定时间，图形验证码失效</span></span><br><span class="line"><span class="comment">     * 【手机号-业务-图形验证码】：key</span></span><br><span class="line"><span class="comment">     * 【手机号-业务-图形验证码-超时时间】:key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneCode 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code      图形验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request   请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addCapcha</span><span class="params">(String phoneCode, String code, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CAPTCHA_ENABLE) &#123;</span><br><span class="line">            logger.info(<span class="string">"请开启图形验证码校验之后，再配合本工具类方法使用！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; attribute = initServletContextMap(servletContext);</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 获取请求的模块名称 同时检查是否有配置模块</span></span><br><span class="line">        String phoneMouduleFlag = checkExistsAndGetModule(request);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(phoneMouduleFlag)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 手机号 -业务名称</span></span><br><span class="line">        String modulePhone = String.format(PHONE_MOUDULE_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 手机号- 业务名称 - 图形验证码</span></span><br><span class="line">        String capchaModule = String.format(CAPTCHA_MOUDULE_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 手机号 - 业务名称 -图形验证码 - 定时</span></span><br><span class="line">        String capchaModuleTimer = String.format(CAPTCHA_MOUDULE_TIMER_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="keyword">if</span> (!attribute.containsKey(modulePhone)) &#123;</span><br><span class="line">            HashMap&lt;String, Object&gt; stringObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            stringObjectHashMap.put(capchaModule, code);</span><br><span class="line">            <span class="comment">// 图片的有效期</span></span><br><span class="line">            stringObjectHashMap.put(capchaModuleTimer, now);</span><br><span class="line">            attribute.put(modulePhone, stringObjectHashMap);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; stringObjectMap = attribute.get(modulePhone);</span><br><span class="line">            <span class="comment">// 更新验证码以及有效期</span></span><br><span class="line">            stringObjectMap.put(capchaModule, code);</span><br><span class="line">            <span class="comment">// 图片的有效期</span></span><br><span class="line">            stringObjectMap.put(capchaModuleTimer, now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号限制发送处理</span></span><br><span class="line"><span class="comment">     * 1. 增加对于用户请求短信接口的限制，60秒访问一次</span></span><br><span class="line"><span class="comment">     * 2. 增加图形验证码和用户的手机号绑定匹配</span></span><br><span class="line"><span class="comment">     * 1. 图形校验可以灵活开放和关闭</span></span><br><span class="line"><span class="comment">     * 3. 【手机号-业务】的key配置，短信接口当中需要对于用户的请求做限制</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result    封装了返回的状态和信息的 result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request   请求request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneCode 手机号码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkContextMap</span><span class="params">(Map&lt;String, Object&gt; result, HttpServletRequest request, String phoneCode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前模块配置Map集合</span></span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; attribute = initServletContextMap(servletContext);</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 获取请求的模块名称</span></span><br><span class="line">        String phoneMouduleFlag = checkExistsAndGetModule(request);</span><br><span class="line">        <span class="keyword">if</span> (phoneMouduleFlag == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_9.getCode());</span><br><span class="line">            result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_9.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  当前短信业务模块【手机号-业务】</span></span><br><span class="line">        String modulePhone = String.format(PHONE_MOUDULE_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 当前模块【手机号-业务-请求限制时间】</span></span><br><span class="line">        String modulePhoneTimer = String.format(PHONE_MOUDULE_TIMER_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 当前模块每个用户每天最多请求次数</span></span><br><span class="line">        <span class="keyword">int</span> moduleCount = Setter.getInt(String.format(SMS_MODULE_TEMPLATE, phoneMouduleFlag));</span><br><span class="line">        <span class="keyword">if</span> (!attribute.containsKey(modulePhone)) &#123;</span><br><span class="line">            <span class="comment">// 需要自行初始化</span></span><br><span class="line">            HashMap&lt;String, Object&gt; stringObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">// 初始化短信接口调用次数</span></span><br><span class="line">            stringObjectHashMap.put(modulePhone, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">            <span class="comment">// 初始化短信接口调用时间</span></span><br><span class="line">            stringObjectHashMap.put(modulePhoneTimer, now);</span><br><span class="line">            attribute.put(modulePhone, stringObjectHashMap);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; objectMap = attribute.get(modulePhone);</span><br><span class="line">            <span class="comment">// 开启图形验证码校验才做处理</span></span><br><span class="line">            <span class="keyword">if</span> (CAPTCHA_ENABLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!checkCatpchaCode(result, request, phoneCode, now, phoneMouduleFlag, objectMap)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取当前【手机号+业务】的对应 访问次数，以及最后的访问时间</span></span><br><span class="line">            Object count = objectMap.get(modulePhone);</span><br><span class="line">            Object timer = objectMap.get(modulePhoneTimer);</span><br><span class="line">            <span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">if</span> (Objects.isNull(count) || Objects.isNull(timer)) &#123;</span><br><span class="line">                objectMap.put(modulePhone, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">                objectMap.put(modulePhoneTimer, now);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Integer integer = Integer.valueOf(objectMap.get(modulePhone).toString());</span><br><span class="line">            Date time = (Date) timer;</span><br><span class="line">            <span class="comment">// 检查当前短信+业务是否在60秒内访问</span></span><br><span class="line">            <span class="keyword">if</span>(!checkLastGetTime(result, now, time))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果长时间未访问，重置</span></span><br><span class="line">            <span class="keyword">if</span> ((now.getTime() - time.getTime()) &gt; PHONE_REQUEST_WAIT_TIME) &#123;</span><br><span class="line">                <span class="comment">//  刷新时间</span></span><br><span class="line">                objectMap.put(modulePhone, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">                objectMap.put(modulePhoneTimer, now);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//   当前模块超过了请求限制</span></span><br><span class="line">            <span class="keyword">if</span> (integer &gt; moduleCount) &#123;</span><br><span class="line">                <span class="comment">// 超过了请求时间限制，解封</span></span><br><span class="line">                <span class="keyword">if</span> (now.getTime() - time.getTime() &gt; PHONE_REQUEST_WAIT_TIME) &#123;</span><br><span class="line">                    <span class="comment">//  刷新时间</span></span><br><span class="line">                    objectMap.put(modulePhone, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">                    objectMap.put(modulePhoneTimer, now);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_10.getCode());</span><br><span class="line">                result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_10.getName());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模块请求次数 + 1</span></span><br><span class="line">            objectMap.put(modulePhone, integer + PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">            <span class="comment">// 刷新时间</span></span><br><span class="line">            objectMap.put(modulePhoneTimer, now);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验图形验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result           返回处理结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request          请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneCode        手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> now              当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneMouduleFlag 手机号 - 业务模块 标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectMap        servletContext 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkCatpchaCode</span><span class="params">(Map&lt;String, Object&gt; result, HttpServletRequest request, String phoneCode, Date now, String phoneMouduleFlag, Map&lt;String, Object&gt; objectMap)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 手机号- 业务名称 - 图形验证码</span></span><br><span class="line">        String capchaModule = String.format(CAPTCHA_MOUDULE_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 手机号 - 业务名称 -图形验证码 - 定时</span></span><br><span class="line">        String capchaModuleTimer = String.format(CAPTCHA_MOUDULE_TIMER_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 图形验证码超过60秒失效</span></span><br><span class="line">        Date captchaCodeValidPeriod = (Date) objectMap.get(capchaModuleTimer);</span><br><span class="line">        <span class="comment">// 获取请求参数的验证码</span></span><br><span class="line">        String requestCaptchaCode = RequestHelper.getString(CAPCHACODE, request);</span><br><span class="line">        <span class="comment">// 拿到map中的图形验证码</span></span><br><span class="line">        Object requestCode = objectMap.get(capchaModule);</span><br><span class="line">        <span class="comment">// 是否存在图形验证码的参数，同时比对是否和请求参数一致</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(requestCaptchaCode) || Objects.isNull(requestCode)) &#123;</span><br><span class="line">            result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_8.getCode());</span><br><span class="line">            result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_8.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果超时或者图形验证码不匹配，需要重新请求图形验证码</span></span><br><span class="line">        <span class="keyword">if</span> (!Objects.equals(requestCaptchaCode, requestCode.toString()) || (now.getTime() - captchaCodeValidPeriod.getTime() &gt; (CAPTCHA_REQUEST_TIME))) &#123;</span><br><span class="line">            result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_8.getCode());</span><br><span class="line">            result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_8.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 清空用户的图形验证码</span></span><br><span class="line">            objectMap.put(capchaModule, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查最后的访问时间是否在指定时间内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result    返回对象结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> now       当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkLastGetTime</span><span class="params">(Map&lt;String, Object&gt; result, Date now, Date lastSend)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 60 秒内不允许再次发送</span></span><br><span class="line">        <span class="keyword">if</span> ((now.getTime() - lastSend.getTime()) &lt;= PHONE_REQUEST_TIME) &#123;</span><br><span class="line">            result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_7.getCode());</span><br><span class="line">            result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_7.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化全局上下文的Map容器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContext 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 初始化之后的map参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Map&lt;String, Object&gt;&gt; initServletContextMap(ServletContext servletContext) &#123;</span><br><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; attribute = (Map&lt;String, Map&lt;String, Object&gt;&gt;) servletContext.getAttribute(CONTEXT_MAP);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(attribute)) &#123;</span><br><span class="line">            attribute = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            servletContext.setAttribute(CONTEXT_MAP, attribute);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> attribute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查请求参数中是否存在业务模块配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">checkExistsAndGetModule</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String phoneMouduleFlag = RequestHelper.getString(PHONE_MOUDULE_FLAG, request);</span><br><span class="line">        String moduleNo = Setter.getString(String.format(SMS_MODULE_TEMPLATE, phoneMouduleFlag));</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(moduleNo)) &#123;</span><br><span class="line">            logger.info(<span class="string">"未找到对应的短信模块，请在xml配置短信模块名称，并在请求参数中加入 phoneModule: 对应模块名称之后再进行请求"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> phoneMouduleFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>使用手机号-业务模块。先获取是否存在对应的模块，然后进行校验</li><li>图形验证码的方法需要开启推行验证码的情况下，配合使用</li><li>HashMap的线程是不安全的，可以考虑使用ConcurrentHashMap</li></ol></blockquote><h3 id="图形验证码的配置："><a href="#图形验证码的配置：" class="headerlink" title="图形验证码的配置："></a>图形验证码的配置：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- =================================================================== --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 核心：图形验证码的通用配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- =================================================================== --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">captcha</span> <span class="attr">description</span>=<span class="string">"图形验证码的通用配置"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enable</span> <span class="attr">description</span>=<span class="string">"是否开放图形验证码"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">length</span> <span class="attr">description</span>=<span class="string">"设置字符长度"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 验证码图片的宽度 默认 160 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">width</span> <span class="attr">description</span>=<span class="string">"设置动画宽度"</span> <span class="attr">value</span>=<span class="string">"160"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 验证码图片的高度 默认 50 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">height</span> <span class="attr">description</span>=<span class="string">"设置动画宽度"</span> <span class="attr">value</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">captcha</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="短信验证码的配置："><a href="#短信验证码的配置：" class="headerlink" title="短信验证码的配置："></a>短信验证码的配置：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- =================================================================== --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--系统发送短信配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- =================================================================== --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sms</span> <span class="attr">description</span>=<span class="string">"webService短信机服务配置"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">isopen</span> <span class="attr">description</span>=<span class="string">"是否开启短信发送"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模块配置： 需要 name 模块名称，用于短信校验 和 value 表示每天最多的请求次数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">registered</span> <span class="attr">description</span>=<span class="string">"注册模块"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 信箱请求短信验证码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mailbox</span> <span class="attr">description</span>=<span class="string">"信箱模块"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ip-size</span> <span class="attr">description</span>=<span class="string">"ip检测的限制次数"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phoneMoudleCheck-enable</span> <span class="attr">description</span>=<span class="string">"手机号-业务模块校验是否开启"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ip-enable</span> <span class="attr">description</span>=<span class="string">"IP检测开关"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sms</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol><li>工具类基于配置进行开关配置</li><li>按照手机号+业务模块，划分同一手机号在不同的业务模块进行校验拦截</li><li>图形验证码可以配合短信接口使用，但是目前来看耦合还是有点严重</li></ol><h1 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h1><p>本人学艺不精，代码写的比较烂，这篇文章算是给自己留坑以后填。</p><p>如果看文章费劲头，专门另写一篇说说独立使用。</p><p>小小工具类，仅供参考</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      使用短信验证码加强
    
    </summary>
    
    
      <category term="经验" scheme="http://lazytime.site/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="短信验证码" scheme="http://lazytime.site/tags/%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>雪花算法代码</title>
    <link href="http://lazytime.site/2020/10/27/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81/"/>
    <id>http://lazytime.site/2020/10/27/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81/</id>
    <published>2020-10-27T15:04:40.000Z</published>
    <updated>2020-10-27T15:06:08.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从github上面摘录的一个雪花算法的实现，可以作为学习参考</p><h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myapp.cunpleuserapp.util;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Twitter_Snowflake&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span></span><br><span class="line"><span class="comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 加起来刚好64位，为一个Long型。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowflakeIdWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Fields===========================================</span></span><br><span class="line">    <span class="comment">/** 开始时间截 (2015-01-01) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> twepoch = <span class="number">1420041600000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 机器id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据标识id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 支持的最大数据标识id，结果是31 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 序列在id中占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 机器ID向左移12位 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据标识id向左移17位(12+5) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 时间截向左移22位(5+5+12) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 工作机器ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据中心ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 毫秒内序列(0~4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 上次生成ID的时间截 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Constructors=====================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerId 工作ID (0~31)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datacenterId 数据中心ID (0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowflakeIdWorker</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"worker Id can't be greater than %d or less than 0"</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"datacenter Id can't be greater than %d or less than 0"</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Methods==========================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SnowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    String.format(<span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//时间戳改变，毫秒内序列重置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上次生成ID的时间截</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="comment">//</span></span><br><span class="line">                | (datacenterId &lt;&lt; datacenterIdShift) <span class="comment">//</span></span><br><span class="line">                | (workerId &lt;&lt; workerIdShift) <span class="comment">//</span></span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Test=============================================</span></span><br><span class="line">    <span class="comment">/** 测试 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SnowflakeIdWorker idWorker = <span class="keyword">new</span> SnowflakeIdWorker(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> id = idWorker.nextId();</span><br><span class="line">            System.out.println(Long.toBinaryString(id));</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      可以作为学习雪花算法的一个入口
    
    </summary>
    
    
      <category term="算法" scheme="http://lazytime.site/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="雪花算法" scheme="http://lazytime.site/tags/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法的一个留坑</title>
    <link href="http://lazytime.site/2020/10/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%80%E4%B8%AA%E7%95%99%E5%9D%91/"/>
    <id>http://lazytime.site/2020/10/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%80%E4%B8%AA%E7%95%99%E5%9D%91/</id>
    <published>2020-10-27T15:01:35.000Z</published>
    <updated>2020-10-27T15:03:25.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数据结构与算法入门"><a href="#1-数据结构与算法入门" class="headerlink" title="1. 数据结构与算法入门"></a>1. 数据结构与算法入门</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早之前做的笔记了，做一个备忘</p><a id="more"></a><h2 id="1-1-经典算法问题："><a href="#1-1-经典算法问题：" class="headerlink" title="1.1 经典算法问题："></a>1.1 经典算法问题：</h2><ol><li>汉诺塔</li><li>八皇后问题</li><li>马踏棋盘</li></ol><h2 id="1-2-字符串匹配"><a href="#1-2-字符串匹配" class="headerlink" title="1.2 字符串匹配"></a>1.2 字符串匹配</h2><h3 id="1-2-1-暴力匹配"><a href="#1-2-1-暴力匹配" class="headerlink" title="1.2.1 暴力匹配"></a>1.2.1 暴力匹配</h3><h3 id="1-2-2-KMP算法"><a href="#1-2-2-KMP算法" class="headerlink" title="1.2.2 KMP算法"></a>1.2.2 KMP算法</h3><h2 id="1-3-数据结构和算法重要性"><a href="#1-3-数据结构和算法重要性" class="headerlink" title="1.3 数据结构和算法重要性"></a>1.3 数据结构和算法重要性</h2><ol><li>算法是程序灵魂</li><li>内存计算框架</li></ol><h2 id="1-4-数据结构与算法关系"><a href="#1-4-数据结构与算法关系" class="headerlink" title="1.4 数据结构与算法关系"></a>1.4 数据结构与算法关系</h2><h1 id="2-实际算法问题："><a href="#2-实际算法问题：" class="headerlink" title="2. 实际算法问题："></a>2. 实际算法问题：</h1><h2 id="2-1-str-replaceAll-str"><a href="#2-1-str-replaceAll-str" class="headerlink" title="2.1 str.replaceAll( str )"></a>2.1 str.replaceAll( str )</h2><h3 id="2-1-1-问题："><a href="#2-1-1-问题：" class="headerlink" title="2.1.1 问题："></a>2.1.1 问题：</h3><p>试写出单链表表示的字符串类以及字符串结点类的定义，并且依次实现它的构造函数，以及计算串的长度，串赋值，判断两串相等，求子串，两串连接，求子串在串中位置等七个成员函数</p><h2 id="2-2-其他几个问题："><a href="#2-2-其他几个问题：" class="headerlink" title="2.2 其他几个问题："></a>2.2 其他几个问题：</h2><ol><li>丢手帕问题</li><li>磁盘问题</li><li>公交车</li><li>画图</li><li>球和篮子</li><li>扔石头</li><li>修路问题，最小路径</li><li>最短路径问题</li><li>汉诺塔</li><li>八皇后</li></ol><h2 id="2-3-线性结构与非线性结构"><a href="#2-3-线性结构与非线性结构" class="headerlink" title="2.3 线性结构与非线性结构"></a>2.3 线性结构与非线性结构</h2><ol><li>数据与元素一对一的线性关系</li><li>顺序存储，元素都是连续的</li><li>链式存储，元素是不连续的</li><li>数组，队列，链表和栈</li></ol><h3 id="2-3-1-非线性结构"><a href="#2-3-1-非线性结构" class="headerlink" title="2.3.1 非线性结构"></a>2.3.1 非线性结构</h3><p>二维数组，多维数组，广义表，树结构，图结构</p><h1 id="3-稀疏数组和队列"><a href="#3-稀疏数组和队列" class="headerlink" title="3. 稀疏数组和队列"></a>3. 稀疏数组和队列</h1><h2 id="3-1-稀疏数组的处理方法："><a href="#3-1-稀疏数组的处理方法：" class="headerlink" title="3.1 稀疏数组的处理方法："></a>3.1 稀疏数组的处理方法：</h2><ol><li>记录数组一共几行几列，有多少个不同的值</li><li>把具有不同值的元素的行列记录在一个小规模数组</li></ol><h3 id="3-1-1-二维数组转稀疏数组的方法"><a href="#3-1-1-二维数组转稀疏数组的方法" class="headerlink" title="3.1.1 二维数组转稀疏数组的方法"></a>3.1.1 二维数组转稀疏数组的方法</h3><ol><li>遍历原始二维数组，保留有效个数</li><li>根据sum创建稀疏数组spareArr int[sum+1][3]</li><li>二维数组的有效数据存入到稀疏数组</li></ol><h2 id="3-2-稀疏数组转二维数组："><a href="#3-2-稀疏数组转二维数组：" class="headerlink" title="3.2 稀疏数组转二维数组："></a>3.2 稀疏数组转二维数组：</h2><ol><li>先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，</li><li>读取稀疏数组的后几行数据，并赋值给原始的二维数组</li></ol><h1 id="4-稀疏数组的Java代码实现"><a href="#4-稀疏数组的Java代码实现" class="headerlink" title="4. 稀疏数组的Java代码实现"></a>4. 稀疏数组的Java代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 稀疏数组</span></span><br><span class="line"><span class="comment"> * 1. 需要将二维数组转为稀疏数组存储</span></span><br><span class="line"><span class="comment"> * 2. 稀疏数组进行保存（文件读写）</span></span><br><span class="line"><span class="comment"> * 3. 读取文件恢复稀疏数组（文件读写）</span></span><br><span class="line"><span class="comment"> * 4. 将稀疏数组转回二维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: SpareceArray</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> structAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 稀疏数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/19 14:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpareceArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用稀疏数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] twoArrayConvertSparecArray = twoArrayConvertSparecArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 稀疏数组如何转为二维住</span></span><br><span class="line">        SparecArrayConverttwoArray(twoArrayConvertSparecArray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 稀疏数组转为二维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SparecArrayConverttwoArray</span><span class="params">(<span class="keyword">int</span>[][] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 根据第一行数据还原出二维数组的行与列</span></span><br><span class="line">        <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[array[<span class="number">0</span>][<span class="number">0</span>]][array[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            result[array[i][<span class="number">0</span>]][array[i][<span class="number">1</span>]] = array[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printArray(array);</span><br><span class="line">        printArray(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 稀疏数组转为二维数组的办法</span></span><br><span class="line"><span class="comment">     * 1. 创建二维数组，并且加入数据</span></span><br><span class="line"><span class="comment">     * 2.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] twoArrayConvertSparecArray() &#123;</span><br><span class="line">        <span class="comment">// 将二维数组转为稀疏数组 初始化为 11 11</span></span><br><span class="line">        <span class="keyword">int</span>[][] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">// 在二维数组放两个子</span></span><br><span class="line">        array[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">        array[<span class="number">3</span>][<span class="number">7</span>] = <span class="number">11</span>;</span><br><span class="line">        array[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">11</span>;</span><br><span class="line">        printArray(array);</span><br><span class="line">        <span class="comment">// 计算有几个有效数据</span></span><br><span class="line">        <span class="comment">// 存储有几个有效数据</span></span><br><span class="line">        <span class="keyword">int</span> sumCount = <span class="number">0</span>;</span><br><span class="line">        sumCount = calcuArrSize(array, sumCount);</span><br><span class="line">        <span class="comment">// 创建稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] spareceArray = <span class="keyword">new</span> <span class="keyword">int</span>[sumCount+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一行为 个数 棋盘的行 棋盘的列</span></span><br><span class="line">        spareceArray[<span class="number">0</span>][<span class="number">0</span>] = array.length;</span><br><span class="line">        spareceArray[<span class="number">0</span>][<span class="number">1</span>] = array[<span class="number">0</span>].length;</span><br><span class="line">        spareceArray[<span class="number">0</span>][<span class="number">2</span>] = sumCount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 稀疏数组存储数据</span></span><br><span class="line">        <span class="comment">//count 用于记录是第几个非0数据</span></span><br><span class="line">        <span class="keyword">int</span> noZeroCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    noZeroCount++;</span><br><span class="line">                    <span class="comment">// 存储第几行 第几列 值为多少</span></span><br><span class="line">                    spareceArray[noZeroCount][<span class="number">0</span>] = i;</span><br><span class="line">                    spareceArray[noZeroCount][<span class="number">1</span>] = j;</span><br><span class="line">                    spareceArray[noZeroCount][<span class="number">2</span>] = array[i][j];</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> spareceArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算有效数据的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 原有的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sumCount 计算个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calcuArrSize</span><span class="params">(<span class="keyword">int</span>[][] array, <span class="keyword">int</span> sumCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sumCount++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sumCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印数组的快捷方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[][] array)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"-----------------我是分割线-----------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                System.out.print(array[i][j] + <span class="string">"\t"</span> );</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.err.println(<span class="string">"-----------------我是分割线-----------------"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-队列："><a href="#5-队列：" class="headerlink" title="5. 队列："></a>5. 队列：</h1><h2 id="5-1-数组模拟队列"><a href="#5-1-数组模拟队列" class="headerlink" title="5.1 数组模拟队列"></a>5.1 数组模拟队列</h2><h3 id="5-1-1-思路分析：addQueue"><a href="#5-1-1-思路分析：addQueue" class="headerlink" title="5.1.1 思路分析：addQueue"></a>5.1.1 思路分析：addQueue</h3><ol><li>将尾指针 rear + 1 ， 表示入队。当 rear == front 表示空队列</li><li>如果rear 等于队列 maxSize - 1， 表示队列满，否则可以增加元素</li></ol><h3 id="5-1-2-思路分析：removeQueue"><a href="#5-1-2-思路分析：removeQueue" class="headerlink" title="5.1.2 思路分析：removeQueue"></a>5.1.2 思路分析：removeQueue</h3><ol><li>将队头指针进行出队操作</li><li>每次移除都需要队头指针 +1</li><li>将队列后面的数据向前拷贝</li></ol><h2 id="5-2-JAVA代码实现数组底层的队列"><a href="#5-2-JAVA代码实现数组底层的队列" class="headerlink" title="5.2 JAVA代码实现数组底层的队列"></a>5.2 JAVA代码实现数组底层的队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.rowset.serial.SerialArray;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用数组实现队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: MyQueue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> structAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 使用数组实现队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队头指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列不能小于或者等于 0"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意此处为什么是-1 ：因为队列的头部不应该执行队伍的第一个元素，因为此时是出于队列的头部，并没有数据</span></span><br><span class="line">        rear = front = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.arr = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">this</span>.maxSize = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队操作：</span></span><br><span class="line"><span class="comment">     * 1. 队伍头部的元素删除即，使 return arr[front]</span></span><br><span class="line"><span class="comment">     * 2. 将队伍后面的元素向前拷贝</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列为空，不能移除"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rear; i++) &#123;</span><br><span class="line">            arr[i - <span class="number">1</span>] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        arr[--rear] = 0;</span></span><br><span class="line">        <span class="keyword">return</span> arr[++front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾+1 入队操作</span></span><br><span class="line"><span class="comment">     * 需要判断队列是否为空并且是否不满</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否为空或者是否已经满了</span></span><br><span class="line">        <span class="keyword">boolean</span> empty = isFull();</span><br><span class="line">        <span class="keyword">if</span> (!empty) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列已满，无法添加"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[++rear] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否可以加入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear != maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(Arrays.toString(<span class="keyword">this</span>.arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyQueue myQueue = <span class="keyword">new</span> MyQueue(<span class="number">3</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">2</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">5</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">6</span>);</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        <span class="comment">// 这里出现问题，因为队头和队尾都指向队列的尾部，会出现无法添加和无法删除掉问题</span></span><br><span class="line">        myQueue.addQueue(<span class="number">6</span>);</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line"></span><br><span class="line">        myQueue.showQueue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-1-数组队列的弊端"><a href="#5-2-1-数组队列的弊端" class="headerlink" title="5.2.1 数组队列的弊端"></a>5.2.1 数组队列的弊端</h3><ul><li>队头和队尾都执行队列的尾部时候，无法添加也无法删除<ul><li>数组只能使用一次</li></ul></li><li>数组复用性不好</li></ul><h2 id="5-3-数组实现循环队列"><a href="#5-3-数组实现循环队列" class="headerlink" title="5.3  数组实现循环队列"></a>5.3  数组实现循环队列</h2><h3 id="5-3-1-如何判定队列已经满了"><a href="#5-3-1-如何判定队列已经满了" class="headerlink" title="5.3.1 如何判定队列已经满了"></a>5.3.1 如何判定队列已经满了</h3><p>算法</p><blockquote><p>( rear + 1 ) % maxSize == front</p></blockquote><h3 id="5-3-2-如何判定队列是空的"><a href="#5-3-2-如何判定队列是空的" class="headerlink" title="5.3.2 如何判定队列是空的"></a>5.3.2 如何判定队列是空的</h3><p><font color='red'><strong>rear == front</strong></font></p><h3 id="5-3-3-如何判定有效个数"><a href="#5-3-3-如何判定有效个数" class="headerlink" title="5.3.3 如何判定有效个数"></a>5.3.3 如何判定有效个数</h3><blockquote><p>举例：</p><p>maxSize = 7</p><p>front = 5</p><p>rear =  5 </p><p>maxSize + (rear+1) - front % maxSize</p></blockquote><h2 id="5-3-4-使用数组实现循环队列的方式2"><a href="#5-3-4-使用数组实现循环队列的方式2" class="headerlink" title="5.3.4 使用数组实现循环队列的方式2"></a>5.3.4 使用数组实现循环队列的方式2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用数组实现队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: MyQueue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> structAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 使用数组实现队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队头指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列不能小于或者等于 0"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意此处为什么是-1 ：因为队列的头部不应该执行队伍的第一个元素，因为此时是出于队列的头部，并没有数据</span></span><br><span class="line">        rear = front = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.arr = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">this</span>.maxSize = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队操作：</span></span><br><span class="line"><span class="comment">     * 1. 队伍头部的元素删除即，使 return arr[front]</span></span><br><span class="line"><span class="comment">     * 2. 将队伍后面的元素向前拷贝</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列为空，不能移除"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        for (int i = 1; i &lt; rear; i++) &#123;</span></span><br><span class="line"><span class="comment">//            arr[i - 1] = arr[i];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        arr[--rear] = 0;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr[++front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾+1 入队操作</span></span><br><span class="line"><span class="comment">     * 需要判断队列是否为空并且是否不满</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否为空或者是否已经满了</span></span><br><span class="line">        <span class="keyword">boolean</span> empty = isFull();</span><br><span class="line">        <span class="keyword">if</span> (empty) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列已满，无法添加"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[rear] = val;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否可以加入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return rear != maxSize - 1;</span></span><br><span class="line">        <span class="comment">// 这是最新的一种判定方式： rear =</span></span><br><span class="line">        <span class="keyword">return</span> (rear  + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"队列为空，不能遍历"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; front + size(); i++) &#123;</span><br><span class="line">            System.err.print(arr[i % maxSize] + <span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.err.println(Arrays.toString(this.arr));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + maxSize - front) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyQueue myQueue = <span class="keyword">new</span> MyQueue(<span class="number">8</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">2</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">55</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">35</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">25</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">65</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">85</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">75</span>);</span><br><span class="line"><span class="comment">//        myQueue.addQueue(6);</span></span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        <span class="comment">// 这里出现问题，因为队头和队尾都指向队列的尾部，会出现无法添加和无法删除掉问题</span></span><br><span class="line"><span class="comment">//        myQueue.addQueue(6);</span></span><br><span class="line"><span class="comment">//        myQueue.removeQueue();</span></span><br><span class="line"></span><br><span class="line">        myQueue.showQueue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-链表"><a href="#6-链表" class="headerlink" title="6. 链表"></a>6. 链表</h1><h2 id="6-1-使用自制的链表处理"><a href="#6-1-使用自制的链表处理" class="headerlink" title="6.1 使用自制的链表处理"></a>6.1 使用自制的链表处理</h2><h3 id="6-1-1-使用java代码实现链表"><a href="#6-1-1-使用java代码实现链表" class="headerlink" title="6.1.1 使用java代码实现链表"></a>6.1.1 使用java代码实现链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单链表实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: SpareceArray</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> structAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 单链表实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/19 14:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingelQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HeroNode heroNode1 = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">"111"</span>, <span class="string">"111"</span>);</span><br><span class="line">        HeroNode heroNode2 = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">"222"</span>, <span class="string">"222"</span>);</span><br><span class="line">        HeroNode heroNode3 = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">"333"</span>, <span class="string">"333"</span>);</span><br><span class="line">        HeroNode heroNode4 = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">"444"</span>, <span class="string">"444"</span>);</span><br><span class="line">        SingelLinkedList singelLinkedList = <span class="keyword">new</span> SingelLinkedList();</span><br><span class="line">        singelLinkedList.add(heroNode1);</span><br><span class="line">        singelLinkedList.add(heroNode2);</span><br><span class="line">        singelLinkedList.add(heroNode3);</span><br><span class="line">        singelLinkedList.add(heroNode4);</span><br><span class="line">        singelLinkedList.list();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingelLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在插入的使用最新的方式：</span></span><br><span class="line"><span class="comment">     * 根据id编号进行排序</span></span><br><span class="line"><span class="comment">     * 1.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 由于头结点不能动，需要使用</span></span><br><span class="line">        HeroNode heroNode = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(heroNode.getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            heroNode = heroNode.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        heroNode.setNext(node);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HeroNode heroNode = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(heroNode.getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.err.println(heroNode);</span><br><span class="line">            heroNode = heroNode.getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造函数的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> HeroNode next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化构造函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> no</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nickName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no, String name, String nickName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickName</span><span class="params">(String nickName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(HeroNode next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HeroNode&#123;"</span> +</span><br><span class="line">                <span class="string">"no="</span> + no +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", nickName='"</span> + nickName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", next="</span> + next +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-2-使用排序的方式插入链表改进上述链表"><a href="#6-1-2-使用排序的方式插入链表改进上述链表" class="headerlink" title="6.1.2 使用排序的方式插入链表改进上述链表"></a>6.1.2 使用排序的方式插入链表改进上述链表</h3><ol><li>这里使用了查找的方式，判断是否相等，遍历的时候使用头指针的下一个节点进行遍历操作</li><li>插入节点使用被插入的节点的下一个节点指向当前遍历节点的下一个节点，当前循环节点指向指向当前被插入的节点</li><li>如果节点相等，给出提示</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在插入的使用最新的方式：</span></span><br><span class="line"><span class="comment">     * 使用id编号进行排序，在查找的时候使用id进行排序查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(HeroNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 由于头结点不能动，需要使用</span></span><br><span class="line">        HeroNode heroNode = head;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(heroNode.getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 寻找编号大于被插入节点的节点，因为只能找被插入的节点的上一个节点</span></span><br><span class="line">            <span class="keyword">if</span>(heroNode.getNext().getNo() &gt; node.getNo())&#123;</span><br><span class="line">                <span class="comment">// 获取原来数据的下一个节点一个节点</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(heroNode.getNext().getNo() == node.getNo())&#123;</span><br><span class="line">                <span class="comment">//说明希望添加的heroNode的编号已然存在</span></span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            heroNode = heroNode.getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            System.err.println(<span class="string">"被插入的节点已经存在"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node.setNext(heroNode.getNext());</span><br><span class="line">            heroNode.setNext(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-3-删除节点有多少种情况"><a href="#6-1-3-删除节点有多少种情况" class="headerlink" title="6.1.3 删除节点有多少种情况"></a>6.1.3 删除节点有多少种情况</h3><ol><li><p>如果删除的是头节点</p></li><li><p>如果是中间的节点，需要将被删除的上一个节点执行被删除节点的下一个节点</p></li><li><p>如果在尾部，删除尾部节点</p></li></ol><h3 id="6-1-4-删除的第一种方式实现办法"><a href="#6-1-4-删除的第一种方式实现办法" class="headerlink" title="6.1.4 删除的第一种方式实现办法"></a>6.1.4 删除的第一种方式实现办法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除方式，</span></span><br><span class="line"><span class="comment">     * 第一种方式： 使用编号删除对应的节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> no 节点编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">// 如果是头节点指向节点，需要变更头节点指向节点再删除节点</span></span><br><span class="line">        <span class="keyword">if</span> (temp.getNext().getNo() == no) &#123;</span><br><span class="line">            <span class="comment">// 指向下一个节点的下一个节点</span></span><br><span class="line">            head.setNext(head.getNext().getNext());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否找到了节点</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.getNext().getNo() == no) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到节点进行替换</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            temp.setNext(temp.getNext().getNext());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.err.println(<span class="string">"没有找到对应编号的英雄"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-5-删除的第二种方式分析："><a href="#6-1-5-删除的第二种方式分析：" class="headerlink" title="6.1.5 删除的第二种方式分析："></a>6.1.5 删除的第二种方式分析：</h3><ol><li><p>删除根据第几个来删除，必须我想删除第一个节点</p><ol><li>第一个节点对应了头节点，需要对于头指针指向进行后移</li></ol></li><li><p>其余根据no编号删除雷同,只需要编号判断改为第几个判断即可</p></li></ol><h2 id="6-2-关于链表的面试题（重点）"><a href="#6-2-关于链表的面试题（重点）" class="headerlink" title="6.2 关于链表的面试题（重点）"></a>6.2 关于链表的面试题（重点）</h2><ol><li><p>单链表当中有效节点的个数</p></li><li><p>获取倒数第n个节点的节点</p></li><li><p>反转链表</p><ol><li>定义一个节点：反转用的头</li><li>从头到尾遍历原来链表，每遍历一个节点，就取出，放到新的链表前面</li><li>将旧链表的下一个节点指向逆序链表的下一个节点</li></ol></li><li><p>从尾部到头部逆序打印链表</p><ol><li>第一种方法：显逆序，逆序之后打印节点（不可取）</li><li>使用栈实现：将所有的节点加入栈当中，然后使用栈进行打印</li></ol></li></ol><h3 id="6-2-1-节点个数的实现"><a href="#6-2-1-节点个数的实现" class="headerlink" title="6.2.1 节点个数的实现"></a>6.2.1 节点个数的实现</h3><p>较为简单，遍历统计遍历几次即可</p><h3 id="6-2-2-倒数第N个节点"><a href="#6-2-2-倒数第N个节点" class="headerlink" title="6.2.2 倒数第N个节点"></a>6.2.2 倒数第N个节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取倒数第index个节点的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">getLastIndexHeroNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取链表的总个数</span></span><br><span class="line">        <span class="keyword">int</span> count = count();</span><br><span class="line">        <span class="keyword">if</span>(index &lt;= <span class="number">0</span> || index &gt; count)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode temp = head.getNext();</span><br><span class="line">        <span class="comment">// 2. 根据size - index , 循环获取倒数第 index 节点</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> size = count-index;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == size) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 遍历拿到数据，返回结果</span></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-3-反转链表"><a href="#6-2-3-反转链表" class="headerlink" title="6.2.3 反转链表"></a>6.2.3 反转链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转节点</span></span><br><span class="line"><span class="comment">     * 1. 定义一个反转节点的head</span></span><br><span class="line"><span class="comment">     * 2. 遍历原来的链表，使用类似入栈的方式，将每个节点接入到反转节点的指向节点，被接入节点指向原来的节点</span></span><br><span class="line"><span class="comment">     * 3. 反转节点完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.getNext() == <span class="keyword">null</span> || head.getNext().getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"无需反转"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode reverseHead = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">        HeroNode temp = head.getNext();</span><br><span class="line">        HeroNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 让当前节点接到新链表的下一个节点</span></span><br><span class="line">            next = temp.getNext();</span><br><span class="line">            temp.setNext(reverseHead.getNext());</span><br><span class="line">            reverseHead.setNext(temp);</span><br><span class="line">            temp = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用反转节点替换原来的节点</span></span><br><span class="line">        head.setNext(reverseHead.getNext());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-4-反序打印链表"><a href="#6-2-4-反序打印链表" class="headerlink" title="6.2.4 反序打印链表"></a>6.2.4 反序打印链表</h3><ol><li>需要使用到栈这种结构，将节点压进栈当中，然后从栈中取数据进行遍历</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序打印链表里面的内容</span></span><br><span class="line"><span class="comment">     * 使用的栈结构进行存放数据，然后使用栈进行输出操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reversePrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println();</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.getNext() == <span class="keyword">null</span> || head.getNext().getNext() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"无需反转打印"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode hero = head.getNext();</span><br><span class="line">        Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (hero != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(hero);</span><br><span class="line">            hero = hero.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(stack.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-5-合并两个链表"><a href="#6-2-5-合并两个链表" class="headerlink" title="6.2.5 合并两个链表"></a>6.2.5 合并两个链表</h3><ol><li>遍历两个链表，先将第一个链表进行插入，然后根据第二个链表进行相同的插入操作s</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并两个链表，合并之后依然有序</span></span><br><span class="line"><span class="comment">     * 1. 计算两个链表的个数</span></span><br><span class="line"><span class="comment">     * 2. 循环总数，判断两个节点的当前节点更大，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingelLinkedList <span class="title">mergeList</span><span class="params">(SingelLinkedList list1, SingelLinkedList list2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="keyword">null</span> &amp;&amp; list2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line">        SingelLinkedList result = <span class="keyword">new</span> SingelLinkedList();</span><br><span class="line">        HeroNode next1 = list1.getHead();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (next1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            HeroNode next = next1.getNext();</span><br><span class="line">            SingelLinkedList.addByOrder(result, next1);</span><br><span class="line">            next1 = next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode next2 = list2.getHead().getNext();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            HeroNode next = next2.getNext();</span><br><span class="line">            SingelLinkedList.addByOrder(result, next2);</span><br><span class="line">            next2 = next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-分析双向链表的遍历，添加、删除的操作思路"><a href="#6-3-分析双向链表的遍历，添加、删除的操作思路" class="headerlink" title="6.3 分析双向链表的遍历，添加、删除的操作思路"></a>6.3 分析双向链表的遍历，添加、删除的操作思路</h2><ol><li>遍历方和单链表一样只是可以朝前，可以向后</li><li>添加<ol><li>默认添加到双向链表的最后</li><li>先找到双向链表的最后这个节点</li><li>temp.next = new heronode</li><li>newheronode.pre = temp</li></ol></li><li>删除<ol><li>因为是双向的，可以自我删除</li><li>找到要删除的这个节点，temp</li><li>temp.next.pre = temp.pre</li><li>temp.pre.next = temp.next</li></ol></li><li>修改<ol><li>不需要太大变动，和原来的链表类似</li></ol></li></ol><h2 id="6-4-循环链表（约瑟夫问题）"><a href="#6-4-循环链表（约瑟夫问题）" class="headerlink" title="6.4 循环链表（约瑟夫问题）"></a>6.4 循环链表（约瑟夫问题）</h2><h3 id="6-4-1-什么是循环链表"><a href="#6-4-1-什么是循环链表" class="headerlink" title="6.4.1 什么是循环链表"></a>6.4.1 什么是循环链表</h3><p>无论是加入还是删除节点，最后一个节点要么指向自己，要么指向链表的头节点，形成环状的一个链表</p><h3 id="6-4-2-构建一个环形链表的思路"><a href="#6-4-2-构建一个环形链表的思路" class="headerlink" title="6.4.2 构建一个环形链表的思路"></a>6.4.2 构建一个环形链表的思路</h3><ol><li>先创建一个节点，first 指向改节点， 并且形成环形</li><li>后面当我们每创建一个新的节点，就把该节点，加入到已有的环形链表当中即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环形链表的添加和原来的添加代码有所不同</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"size的值不正确"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CircularNode cur = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size; i++) &#123;</span><br><span class="line">            CircularNode newcur = <span class="keyword">new</span> CircularNode(i, <span class="string">"小孩"</span>+i, <span class="string">"小孩昵称"</span>+i);</span><br><span class="line">            <span class="comment">// 如果是第一个节点，则需要特殊处理</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// 第一个节点复制给first节点</span></span><br><span class="line">                first = newcur;</span><br><span class="line">                first.setNext(first);</span><br><span class="line">                <span class="comment">// 将当前操作指针指向第一个节点</span></span><br><span class="line">                cur = first;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur.setNext(newcur);</span><br><span class="line">                newcur.setNext(first);</span><br><span class="line">                cur = newcur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-3-遍历环形链表"><a href="#6-4-3-遍历环形链表" class="headerlink" title="6.4.3 遍历环形链表"></a>6.4.3 遍历环形链表</h3><ol><li>先让一个辅助指针 curBoy ， 指向first</li><li>通过while循环，遍历环形链表，当curBoy.next  == first 结束</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(first == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"循环链表为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CircularNode circularQueue = first;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.err.println(circularQueue);</span><br><span class="line">            <span class="keyword">if</span>(circularQueue.getNext() == first)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            circularQueue = circularQueue.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-4-模拟约瑟夫问题的实现（重点）"><a href="#6-4-4-模拟约瑟夫问题的实现（重点）" class="headerlink" title="6.4.4 模拟约瑟夫问题的实现（重点）"></a>6.4.4 模拟约瑟夫问题的实现（重点）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> begin 从第几个小孩开始数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> countNum 数几个小孩</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 表示最初有多少小孩在圈中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> countNum, <span class="keyword">int</span> nums)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 先对数据进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span> || begin &lt; <span class="number">1</span> || countNum &gt; nums) &#123;</span><br><span class="line">            System.out.println(<span class="string">"参数输入有误， 请重新输入"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建辅助指针，指向环形链表的最后一个元素</span></span><br><span class="line">        CircularNode helper = first;</span><br><span class="line">        <span class="keyword">while</span>(helper.getNext() != first)&#123;</span><br><span class="line">            helper = helper.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//小孩报数前，先让 first 和  helper 移动 k - 1次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; begin; i++) &#123;</span><br><span class="line">            first = first.getNext();</span><br><span class="line">            helper = helper.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当小孩报数时，让first 和 helper 指针同时 的移动  m  - 1 次, 然后出圈</span></span><br><span class="line">        <span class="comment">// 这里是一个循环操作，知道圈中只有一个节点</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(helper == first) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//让 first 和 helper 指针同时 的移动 countNum - 1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countNum - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                first = first.getNext();</span><br><span class="line">                helper = helper.getNext();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这时first指向的节点，就是要出圈的小孩节点\</span></span><br><span class="line">            System.out.printf(<span class="string">"小孩%d出圈\n"</span>, first.getNo());</span><br><span class="line">            first = first.getNext();</span><br><span class="line">            helper.setNext(first);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"最后留在圈中的小孩编号%d \n"</span>, first.getNo());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="7-栈"><a href="#7-栈" class="headerlink" title="7. 栈"></a>7. 栈</h1><h2 id="7-1-如何实现一个栈结构"><a href="#7-1-如何实现一个栈结构" class="headerlink" title="7.1 如何实现一个栈结构"></a>7.1 如何实现一个栈结构</h2><ol><li><p>使用一个top 初始化为 -1 表示栈定， 压入数据 为 push + 1</p></li><li><p>使用 top – 表示出栈</p></li><li><p>由于栈帧只能从一个方向操作，则需要对于栈帧进行一下判断是否为空或者已满</p></li></ol><h2 id="7-2-使用栈模拟一个表达式计算（重点）"><a href="#7-2-使用栈模拟一个表达式计算（重点）" class="headerlink" title="7.2 使用栈模拟一个表达式计算（重点）"></a>7.2 使用栈模拟一个表达式计算（重点）</h2><ol><li>首先：使用一个索引扫描整个表达式，用于往两个栈中添加数据</li><li>如果是数字，则直接加入到数栈当中</li><li>如果是操作符，则分为以下两种情况<ol><li>如果是加法和减法，则直接加入到栈顶</li><li>如果是乘法或者除法，则压如下一个表达式索引值</li></ol></li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      很早之前做的笔记了，做一个备忘
    
    </summary>
    
    
      <category term="算法" scheme="http://lazytime.site/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://lazytime.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>使用Go语言+IDEA+mysql 逆向生成dao 和 domain 的方法</title>
    <link href="http://lazytime.site/2020/10/27/%E4%BD%BF%E7%94%A8Go%E8%AF%AD%E8%A8%80-IDEA-mysql-%E9%80%86%E5%90%91%E7%94%9F%E6%88%90dao-%E5%92%8C-domain-%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://lazytime.site/2020/10/27/%E4%BD%BF%E7%94%A8Go%E8%AF%AD%E8%A8%80-IDEA-mysql-%E9%80%86%E5%90%91%E7%94%9F%E6%88%90dao-%E5%92%8C-domain-%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-10-27T14:53:01.000Z</published>
    <updated>2020-10-27T15:02:27.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考地址："><a href="#参考地址：" class="headerlink" title="参考地址："></a>参考地址：</h1><p><a href="https://www.cnblogs.com/gaomanito/p/10682260.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaomanito/p/10682260.html</a></p><a id="more"></a><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="第一步：安装idea-自行百度"><a href="#第一步：安装idea-自行百度" class="headerlink" title="第一步：安装idea:自行百度"></a>第一步：安装idea:自行百度</h2><h2 id="第二步：Idea配置mysql-连接"><a href="#第二步：Idea配置mysql-连接" class="headerlink" title="第二步：Idea配置mysql 连接"></a>第二步：Idea配置mysql 连接</h2><ul><li>View -&gt; Tool Windows -&gt; DataSource 出现数据连接页面</li><li>点击 <strong>+</strong> 号，出现数据库连接设置，<ul><li>name: 连接名称</li><li>comments: 备注</li><li>host:本地或者内网ip</li><li>user:用户名</li><li>password：密码</li><li>Database：连接数据库名称</li><li>url: jdbc连接<ul><li>注意此处如果是mysql 5.5 以上 的版本需要加入如下参数</li><li><strong>serverTimezone=UTC</strong></li></ul></li></ul></li></ul><h2 id="第三步：使用groovy逆向生成model-dao-daoxml-三种类型的文件"><a href="#第三步：使用groovy逆向生成model-dao-daoxml-三种类型的文件" class="headerlink" title="第三步：使用groovy逆向生成model, dao, daoxml 三种类型的文件"></a>第三步：使用groovy逆向生成model, dao, daoxml 三种类型的文件</h2><ul><li>右击连接：选中<code>Scripted Extendsions</code> </li><li>选择<code>Go to Scripts Directory</code> 调转到go 语言的模板地址</li><li>如果需要扩展则只需要在该文件夹内加入对应的模板即可</li></ul><h2 id="第四步：几个默认的模板"><a href="#第四步：几个默认的模板" class="headerlink" title="第四步：几个默认的模板"></a>第四步：几个默认的模板</h2><h3 id="Generate-MyPOJOs-groovy文件（生成实体类）："><a href="#Generate-MyPOJOs-groovy文件（生成实体类）：" class="headerlink" title="Generate MyPOJOs.groovy文件（生成实体类）："></a>Generate MyPOJOs.groovy文件（生成实体类）：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.intellij.database.model.DasTable</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.model.ObjectKind</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.Case</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.DasUtil</span><br><span class="line"><span class="keyword">import</span> java.io.*</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Available context bindings:</span></span><br><span class="line"><span class="comment"> *   SELECTION   Iterable&lt;DasObject&gt;</span></span><br><span class="line"><span class="comment"> *   PROJECT     project</span></span><br><span class="line"><span class="comment"> *   FILES       files helper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">packageName = <span class="string">""</span></span><br><span class="line">typeMapping = [</span><br><span class="line">        (~/(?i)tinyint|smallint|mediumint/)      : <span class="string">"Integer"</span>,</span><br><span class="line">        (~/(?i)<span class="keyword">int</span>/)                             : <span class="string">"Long"</span>,</span><br><span class="line">        (~/(?i)<span class="keyword">bool</span>|bit/)                        : <span class="string">"Boolean"</span>,</span><br><span class="line">        (~/(?i)float|double|decimal|<span class="built_in">real</span>/)       : <span class="string">"Double"</span>,</span><br><span class="line">        (~/(?i)datetime|timestamp|date|time/)    : <span class="string">"Date"</span>,</span><br><span class="line">        (~/(?i)blob|binary|bfile|clob|raw|image/): <span class="string">"InputStream"</span>,</span><br><span class="line">        (~/(?i)/)                                : <span class="string">"String"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FILES.chooseDirectoryAndSave(<span class="string">"Choose directory"</span>, <span class="string">"Choose where to store generated files"</span>) &#123; dir -&gt;</span><br><span class="line">    SELECTION.filter &#123; it instanceof DasTable &amp;&amp; it.getKind() == ObjectKind.TABLE &#125;.each &#123; generate(it, dir) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(table, dir) &#123;</span><br><span class="line">    <span class="comment">//def className = javaClassName(table.getName(), true)</span></span><br><span class="line">    def className = javaName(table.getName(), <span class="literal">true</span>)</span><br><span class="line">    def fields = calcFields(table)</span><br><span class="line">    packageName = getPackageName(dir)</span><br><span class="line">    PrintWriter printWriter = <span class="built_in">new</span> PrintWriter(<span class="built_in">new</span> OutputStreamWriter(<span class="built_in">new</span> FileOutputStream(<span class="built_in">new</span> File(dir, className + <span class="string">".java"</span>)), <span class="string">"UTF-8"</span>))</span><br><span class="line">    printWriter.withPrintWriter &#123;out -&gt; generate(out, className, fields,table)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    new File(dir, className + ".java").withPrintWriter &#123; out -&gt; generate(out, className, fields,table) &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取包所在文件夹路径</span></span><br><span class="line">def getPackageName(dir) &#123;</span><br><span class="line">    <span class="keyword">return</span> dir.toString().replaceAll(<span class="string">"\\\\"</span>, <span class="string">"."</span>).replaceAll(<span class="string">"/"</span>, <span class="string">"."</span>).replaceAll(<span class="string">"^.*src(\\.main\\.java\\.)?"</span>, <span class="string">""</span>) + <span class="string">";"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(out, className, fields,table) &#123;</span><br><span class="line">    def tableName = table.getName()</span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"package $packageName"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import javax.persistence.Column;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import javax.persistence.Entity;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import javax.persistence.Table;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import java.io.Serializable;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import lombok.Data;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import lombok.AllArgsConstructor;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import lombok.Builder;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import lombok.NoArgsConstructor;"</span></span><br><span class="line"></span><br><span class="line">    Set types = <span class="built_in">new</span> HashSet()</span><br><span class="line"></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        types.add(it.<span class="keyword">type</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (types.contains(<span class="string">"Date"</span>)) &#123;</span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"import java.util.Date;"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (types.contains(<span class="string">"InputStream"</span>)) &#123;</span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"import java.io.InputStream;"</span></span><br><span class="line">    &#125;</span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"/**\n"</span> +</span><br><span class="line">            <span class="string">" * @Description  \n"</span> +</span><br><span class="line">            <span class="string">" * @Author  GX\n"</span> +</span><br><span class="line">            <span class="string">" * @Date "</span>+ <span class="built_in">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(<span class="built_in">new</span> Date()) + <span class="string">" \n"</span> +</span><br><span class="line">            <span class="string">" */"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Data"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Entity"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@AllArgsConstructor"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Builder"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@NoArgsConstructor"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Table ( name =\""</span>+table.getName() +<span class="string">"\" )"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"public class $className  implements Serializable &#123;"</span></span><br><span class="line">    out.<span class="built_in">println</span> genSerialID()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断自增</span></span><br><span class="line">    <span class="keyword">if</span> ((tableName + <span class="string">"_id"</span>).equalsIgnoreCase(fields[<span class="number">0</span>].colum) || <span class="string">"id"</span>.equalsIgnoreCase(fields[<span class="number">0</span>].colum)) &#123;</span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"\t@Id"</span></span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"\t@GeneratedValue(generator = \"idGenerator\")"</span></span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"\t@GenericGenerator(name = \"idGenerator\", strategy = ChiticCoreConstant.ID_GENERATOR_COMMON)"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">        <span class="comment">// 输出注释</span></span><br><span class="line">        <span class="keyword">if</span> (isNotEmpty(it.commoent)) &#123;</span><br><span class="line">            out.<span class="built_in">println</span> <span class="string">"\t/**"</span></span><br><span class="line">            out.<span class="built_in">println</span> <span class="string">"\t * $&#123;it.commoent.toString()&#125;"</span></span><br><span class="line">            out.<span class="built_in">println</span> <span class="string">"\t */"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (it.annos != <span class="string">""</span>) out.<span class="built_in">println</span> <span class="string">"   $&#123;it.annos.replace("</span>[@Id]<span class="string">", "</span><span class="string">")&#125;"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出成员变量</span></span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"\tprivate $&#123;it.type&#125; $&#123;it.name&#125;;"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出get/set方法</span></span><br><span class="line"><span class="comment">//    fields.each() &#123;</span></span><br><span class="line"><span class="comment">//        out.println ""</span></span><br><span class="line"><span class="comment">//        out.println "\tpublic $&#123;it.type&#125; get$&#123;it.name.capitalize()&#125;() &#123;"</span></span><br><span class="line"><span class="comment">//        out.println "\t\treturn this.$&#123;it.name&#125;;"</span></span><br><span class="line"><span class="comment">//        out.println "\t&#125;"</span></span><br><span class="line"><span class="comment">//        out.println ""</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        out.println "\tpublic void set$&#123;it.name.capitalize()&#125;($&#123;it.type&#125; $&#123;it.name&#125;) &#123;"</span></span><br><span class="line"><span class="comment">//        out.println "\t\tthis.$&#123;it.name&#125; = $&#123;it.name&#125;;"</span></span><br><span class="line"><span class="comment">//        out.println "\t&#125;"</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def calcFields(table) &#123;</span><br><span class="line">    DasUtil.getColumns(table).reduce([]) &#123; fields, col -&gt;</span><br><span class="line">        def spec = Case.LOWER.apply(col.getDataType().getSpecification())</span><br><span class="line"></span><br><span class="line">        def typeStr = typeMapping.find &#123; p, t -&gt; p.matcher(spec).find() &#125;.value</span><br><span class="line">        def comm =[</span><br><span class="line">                colName : col.getName(),</span><br><span class="line">                name :  javaName(col.getName(), <span class="literal">false</span>),</span><br><span class="line">                <span class="keyword">type</span> : typeStr,</span><br><span class="line">                commoent: col.getComment(),</span><br><span class="line">                annos: <span class="string">"\t@Column(name = \""</span>+col.getName()+<span class="string">"\" )"</span>]</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"id"</span>.equals(Case.LOWER.apply(col.getName())))</span><br><span class="line">            comm.annos +=[<span class="string">"@Id"</span>]</span><br><span class="line">        fields += [comm]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理类名（这里是因为我的表都是以t_命名的，所以需要处理去掉生成类名时的开头的T，</span></span><br><span class="line"><span class="comment">// 如果你不需要那么请查找用到了 javaClassName这个方法的地方修改为 javaName 即可）</span></span><br><span class="line">def javaClassName(str, capitalize) &#123;</span><br><span class="line">    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/, <span class="string">"_"</span>)</span><br><span class="line">    <span class="comment">// 去除开头的T  http://developer.51cto.com/art/200906/129168.htm</span></span><br><span class="line">    s = s[<span class="number">1.</span>.s.size() - <span class="number">1</span>]</span><br><span class="line">    capitalize || s.length() == <span class="number">1</span>? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def javaName(str, capitalize) &#123;</span><br><span class="line"><span class="comment">//    def s = str.split(/(?&lt;=[^\p&#123;IsLetter&#125;])/).collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span></span><br><span class="line"><span class="comment">//            .join("").replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;]/, "_")</span></span><br><span class="line"><span class="comment">//    capitalize || s.length() == 1? s : Case.LOWER.apply(s[0]) + s[1..-1]</span></span><br><span class="line">    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/, <span class="string">"_"</span>)</span><br><span class="line">    capitalize || s.length() == <span class="number">1</span>? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def isNotEmpty(content) &#123;</span><br><span class="line">    <span class="keyword">return</span> content != null &amp;&amp; content.toString().trim().length() &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static String changeStyle(String str, boolean toCamel)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!str || str.size() &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(toCamel)&#123;</span><br><span class="line">        String r = str.toLowerCase().split(<span class="string">'_'</span>).collect&#123;cc -&gt; Case.LOWER.apply(cc).capitalize()&#125;.join(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span> r[<span class="number">0</span>].toLowerCase() + r[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        str = str[<span class="number">0</span>].toLowerCase() + str[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> str.collect&#123;cc -&gt; ((char)cc).isUpperCase() ? <span class="string">'_'</span> + cc.toLowerCase() : cc&#125;.join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static String genSerialID()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\tprivate static final long serialVersionUID =  "</span>+Math.abs(<span class="built_in">new</span> Random().nextLong())+<span class="string">"L;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generate-Dao-groovy文件（生成dao）："><a href="#Generate-Dao-groovy文件（生成dao）：" class="headerlink" title="Generate Dao.groovy文件（生成dao）："></a>Generate Dao.groovy文件（生成dao）：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.intellij.database.model.DasTable</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.Case</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.DasUtil</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Available context bindings:</span></span><br><span class="line"><span class="comment"> *   SELECTION   Iterable&lt;DasObject&gt;</span></span><br><span class="line"><span class="comment"> *   PROJECT     project</span></span><br><span class="line"><span class="comment"> *   FILES       files helper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">packageName = <span class="string">"**;"</span> <span class="comment">// 需手动配置 生成的 dao 所在包位置</span></span><br><span class="line"></span><br><span class="line">FILES.chooseDirectoryAndSave(<span class="string">"Choose directory"</span>, <span class="string">"Choose where to store generated files"</span>) &#123; dir -&gt;</span><br><span class="line">    SELECTION.filter &#123; it instanceof DasTable &#125;.each &#123; generate(it, dir) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(table, dir) &#123;</span><br><span class="line">    def baseName = javaName(table.getName(), <span class="literal">true</span>)</span><br><span class="line">    <span class="built_in">new</span> File(dir, baseName + <span class="string">"Mapper.java"</span>).withPrintWriter &#123; out -&gt; generateInterface(out, baseName) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generateInterface(out, baseName) &#123;</span><br><span class="line">    def date = <span class="built_in">new</span> Date().format(<span class="string">"yyyy/MM/dd"</span>)</span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"package $packageName"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import cn.xx.entity.$&#123;baseName&#125;Entity;"</span> <span class="comment">// 需手动配置</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import org.springframework.stereotype.Repository;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"/**"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">" * Created on $date."</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">" *"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">" * @author GX"</span> <span class="comment">// 可自定义</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">" */"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Repository"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"public interface $&#123;baseName&#125;Dao extends BaseDao&lt;$&#123;baseName&#125;Entity&gt; &#123;"</span> <span class="comment">// 可自定义</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def javaName(str, capitalize) &#123;</span><br><span class="line">    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/, <span class="string">"_"</span>)</span><br><span class="line">    name = capitalize || s.length() == <span class="number">1</span> ? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generate-DaoXml-groovy文件（生成dao-xml）："><a href="#Generate-DaoXml-groovy文件（生成dao-xml）：" class="headerlink" title="Generate DaoXml.groovy文件（生成dao.xml）："></a>Generate DaoXml.groovy文件（生成dao.xml）：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.intellij.database.model.DasTable</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.Case</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.DasUtil</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Available context bindings:</span></span><br><span class="line"><span class="comment"> *   SELECTION   Iterable&lt;DasObject&gt;</span></span><br><span class="line"><span class="comment"> *   PROJECT     project</span></span><br><span class="line"><span class="comment"> *   FILES       files helper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// entity(dto)、mapper(dao) 与数据库表的对应关系在这里手动指明,idea Database 窗口里只能选下列配置了的 mapper</span></span><br><span class="line"><span class="comment">// tableName(key) : [mapper(dao),entity(dto)]</span></span><br><span class="line">typeMapping = [</span><br><span class="line">        (~/(?i)<span class="keyword">int</span>/)                      : <span class="string">"INTEGER"</span>,</span><br><span class="line">        (~/(?i)float|double|decimal|<span class="built_in">real</span>/): <span class="string">"DOUBLE"</span>,</span><br><span class="line">        (~/(?i)datetime|timestamp/)       : <span class="string">"TIMESTAMP"</span>,</span><br><span class="line">        (~/(?i)date/)                     : <span class="string">"TIMESTAMP"</span>,</span><br><span class="line">        (~/(?i)time/)                     : <span class="string">"TIMESTAMP"</span>,</span><br><span class="line">        (~/(?i)/)                         : <span class="string">"VARCHAR"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">basePackage = <span class="string">"com.chitic.bank.mapping"</span> <span class="comment">// 包名需手动填写</span></span><br><span class="line"></span><br><span class="line">FILES.chooseDirectoryAndSave(<span class="string">"Choose directory"</span>, <span class="string">"Choose where to store generated files"</span>) &#123; dir -&gt;</span><br><span class="line">    SELECTION.filter &#123; it instanceof DasTable &#125;.each &#123; generate(it, dir) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(table, dir) &#123;</span><br><span class="line">    def baseName = mapperName(table.getName(), <span class="literal">true</span>)</span><br><span class="line">    def fields = calcFields(table)</span><br><span class="line">    <span class="built_in">new</span> File(dir, baseName + <span class="string">"Mapper.xml"</span>).withPrintWriter &#123; out -&gt; generate(table, out, baseName, fields) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(table, out, baseName, fields) &#123;</span><br><span class="line">    def baseResultMap = <span class="string">'BaseResultMap'</span></span><br><span class="line">    def base_Column_List = <span class="string">'Base_Column_List'</span></span><br><span class="line">    def date = <span class="built_in">new</span> Date().format(<span class="string">"yyyy/MM/dd"</span>)</span><br><span class="line">    def tableName = table.getName()</span><br><span class="line"></span><br><span class="line">    def dao = basePackage + <span class="string">".dao.$&#123;baseName&#125;Mapper"</span></span><br><span class="line">    def to = basePackage + <span class="string">".to.$&#123;baseName&#125;TO"</span></span><br><span class="line"></span><br><span class="line">    out.<span class="built_in">println</span> mappingsStart(dao)</span><br><span class="line">    out.<span class="built_in">println</span> resultMap(baseResultMap, to, fields)</span><br><span class="line">    out.<span class="built_in">println</span> sql(fields, base_Column_List)</span><br><span class="line">    out.<span class="built_in">println</span> selectById(tableName, fields, baseResultMap, base_Column_List)</span><br><span class="line">    out.<span class="built_in">println</span> deleteById(tableName, fields)</span><br><span class="line">    out.<span class="built_in">println</span> <span class="built_in">delete</span>(tableName, fields, to)</span><br><span class="line">    out.<span class="built_in">println</span> insert(tableName, fields, to)</span><br><span class="line">    out.<span class="built_in">println</span> update(tableName, fields, to)</span><br><span class="line">    out.<span class="built_in">println</span> selectList(tableName, fields, to, base_Column_List, baseResultMap)</span><br><span class="line">    out.<span class="built_in">println</span> mappingsEnd()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static def resultMap(baseResultMap, to, fields) &#123;</span><br><span class="line"></span><br><span class="line">    def inner = <span class="string">''</span></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        inner += <span class="string">'\t\t&lt;result column="'</span> + it.sqlFieldName + <span class="string">'" jdbcType="'</span> + it.<span class="keyword">type</span> + <span class="string">'" property="'</span> + it.name + <span class="string">'"/&gt;\n'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'\t&lt;resultMap id="'</span><span class="string">''</span> + baseResultMap + <span class="string">''</span><span class="string">'" type="'</span><span class="string">''</span> + to + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        &lt;id column="id" jdbcType="INTEGER" property="id"/&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span> + inner + <span class="string">''</span><span class="string">'\t&lt;/resultMap&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def calcFields(table) &#123;</span><br><span class="line">    DasUtil.getColumns(table).reduce([]) &#123; fields, col -&gt;</span><br><span class="line">        def spec = Case.LOWER.apply(col.getDataType().getSpecification())</span><br><span class="line">        def typeStr = typeMapping.find &#123; p, t -&gt; p.matcher(spec).find() &#125;.value</span><br><span class="line">        fields += [[</span><br><span class="line">                           comment     : col.getComment(),</span><br><span class="line">                           name        : mapperName(col.getName(), <span class="literal">false</span>),</span><br><span class="line">                           sqlFieldName: col.getName(),</span><br><span class="line">                           <span class="keyword">type</span>        : typeStr,</span><br><span class="line">                           annos       : <span class="string">""</span>]]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def mapperName(str, capitalize) &#123;</span><br><span class="line">    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/, <span class="string">"_"</span>)</span><br><span class="line">    name = capitalize || s.length() == <span class="number">1</span> ? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ mappings</span></span><br><span class="line">static def mappingsStart(mapper) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="string">&lt;mapper namespace="'</span><span class="string">''</span> + mapper + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ mappings</span></span><br><span class="line">static def mappingsEnd() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'&lt;/mapper&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ selectById</span></span><br><span class="line">static def selectById(tableName, fields, baseResultMap, base_Column_List) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;select id="selectById" parameterType="java.lang.Integer" resultMap="'</span><span class="string">''</span> + baseResultMap + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        select</span></span><br><span class="line"><span class="string">        &lt;include refid="'</span><span class="string">''</span> + base_Column_List + <span class="string">''</span><span class="string">'"/&gt;</span></span><br><span class="line"><span class="string">        from '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        where id = #&#123;id&#125;</span></span><br><span class="line"><span class="string">    &lt;/select&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ insert</span></span><br><span class="line">static def insert(tableName, fields, parameterType) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;insert id="insert" parameterType="'</span><span class="string">''</span> + parameterType + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        insert into '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;trim prefix="(" suffix=")" suffixOverrides=","&gt;</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span> + testNotNullStr(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;/trim&gt;</span></span><br><span class="line"><span class="string">        &lt;trim prefix="values (" suffix=")" suffixOverrides=","&gt;</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span> + testNotNullStrSet(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;/trim&gt;</span></span><br><span class="line"><span class="string">    &lt;/insert&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ update</span></span><br><span class="line">static def update(tableName, fields, parameterType) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;update id="update" parameterType="'</span><span class="string">''</span> + parameterType + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        update '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;set&gt;</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span> + testNotNullStrWhere(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;/set&gt;</span></span><br><span class="line"><span class="string">        where id = #&#123;id&#125;</span></span><br><span class="line"><span class="string">    &lt;/update&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ deleteById</span></span><br><span class="line">static def deleteById(tableName, fields) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;delete id="deleteById" parameterType="java.lang.Integer"&gt;</span></span><br><span class="line"><span class="string">        delete</span></span><br><span class="line"><span class="string">        from '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        where id = #&#123;id&#125;</span></span><br><span class="line"><span class="string">    &lt;/delete&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ delete</span></span><br><span class="line">static def <span class="built_in">delete</span>(tableName, fields, parameterType) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;delete id="delete" parameterType="'</span><span class="string">''</span> + parameterType + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        delete from '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        where 1 = 1</span></span><br><span class="line"><span class="string">        '</span><span class="string">''</span> + testNotNullStrWhere(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;/delete&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ selectList</span></span><br><span class="line">static def selectList(tableName, fields, parameterType, base_Column_List, baseResultMap) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;select id="selectList" parameterType="'</span><span class="string">''</span> + parameterType + <span class="string">''</span><span class="string">'" resultMap="'</span><span class="string">''</span> + baseResultMap + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        select</span></span><br><span class="line"><span class="string">        &lt;include refid="'</span><span class="string">''</span> + base_Column_List + <span class="string">''</span><span class="string">'"/&gt;</span></span><br><span class="line"><span class="string">                from '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        where 1 = 1</span></span><br><span class="line"><span class="string">        '</span><span class="string">''</span> + testNotNullStrWhere(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        order by id desc</span></span><br><span class="line"><span class="string">    &lt;/select&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ sql</span></span><br><span class="line">static def sql(fields, base_Column_List) &#123;</span><br><span class="line">    def str = <span class="string">''</span><span class="string">'\t&lt;sql id="'</span><span class="string">''</span> + base_Column_List + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        @inner@</span></span><br><span class="line"><span class="string">    &lt;/sql&gt; '</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line">    def inner = <span class="string">''</span></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        inner += (<span class="string">'\t\t'</span> + it.sqlFieldName + <span class="string">',\n'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="string">"@inner@"</span>, inner.substring(<span class="number">0</span>, inner.length() - <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static def testNotNullStrWhere(fields) &#123;</span><br><span class="line">    def inner = <span class="string">''</span></span><br><span class="line">    fields.each &#123;</span><br><span class="line">        inner += <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;if test="'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">' != null"&gt;</span></span><br><span class="line"><span class="string">            and '</span><span class="string">''</span> + it.sqlFieldName + <span class="string">''</span><span class="string">' = #&#123;'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">'&#125;</span></span><br><span class="line"><span class="string">        &lt;/if&gt;\n'</span><span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static def testNotNullStrSet(fields) &#123;</span><br><span class="line">    def inner = <span class="string">''</span></span><br><span class="line">    fields.each &#123;</span><br><span class="line">        inner += <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;if test="'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">' != null"&gt;</span></span><br><span class="line"><span class="string">            #&#123;'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">'&#125;,</span></span><br><span class="line"><span class="string">        &lt;/if&gt;\n'</span><span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static def testNotNullStr(fields) &#123;</span><br><span class="line">    def inner1 = <span class="string">''</span></span><br><span class="line">    fields.each &#123;</span><br><span class="line">        inner1 += <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;if test = "'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">' != null" &gt;</span></span><br><span class="line"><span class="string">        \t'</span><span class="string">''</span> + it.sqlFieldName + <span class="string">''</span><span class="string">',</span></span><br><span class="line"><span class="string">        &lt;/if&gt;\n'</span><span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      学习数据结构的内容-韩顺平
    
    </summary>
    
    
      <category term="笔记" scheme="http://lazytime.site/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据结构" scheme="http://lazytime.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>如何访问jar包下面的资源文件</title>
    <link href="http://lazytime.site/2020/10/22/%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AEjar%E5%8C%85%E4%B8%8B%E9%9D%A2%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    <id>http://lazytime.site/2020/10/22/%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AEjar%E5%8C%85%E4%B8%8B%E9%9D%A2%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/</id>
    <published>2020-10-22T13:17:45.000Z</published>
    <updated>2020-10-22T13:18:41.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何访问jar包下面的资源文件"><a href="#如何访问jar包下面的资源文件" class="headerlink" title="如何访问jar包下面的资源文件"></a>如何访问jar包下面的资源文件</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有些时候，我们需要通用一些功能页面，比如maven中公用的core的jar包内需要增加一些通用的功能，现在总结一下自己从中学到的一些东西</p><a id="more"></a><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://blog.csdn.net/w302974215/article/details/49816385" target="_blank" rel="noopener">https://blog.csdn.net/w302974215/article/details/49816385</a></p><p><a href="https://my.oschina.net/zhaoyun1985/blog/479238?from=mail-notify" target="_blank" rel="noopener">https://my.oschina.net/zhaoyun1985/blog/479238?from=mail-notify</a></p><p><a href="https://bbs.csdn.net/topics/380223539/" target="_blank" rel="noopener">https://bbs.csdn.net/topics/380223539/</a></p><h2 id="起步："><a href="#起步：" class="headerlink" title="起步："></a>起步：</h2><ul><li>创建一个springboot 项目</li><li>在springboot resources 下面创建一个 META-INF 文件</li><li>再创建一个resources 的内容，可以同步到reosurces下面</li></ul><h3 id="目录工程结构"><a href="#目录工程结构" class="headerlink" title="目录工程结构"></a>目录工程结构</h3><ul><li>resources<ul><li>META-INF<ul><li>resources<ul><li>WEB-INF</li><li>js</li></ul></li><li>jsp</li><li>jsp</li><li>jsp</li></ul></li></ul></li></ul><p>当文件被打包为jar的之后</p><p>将会可以依照上下文进行访问</p><blockquote><p>注意最终jar包是生成在 <code>lib</code>包下面</p></blockquote><h2 id="Spring-Boot-默认到访问规则"><a href="#Spring-Boot-默认到访问规则" class="headerlink" title="Spring Boot 默认到访问规则"></a>Spring Boot 默认到访问规则</h2><ul><li>“classpath:/META-INF/resources/“, </li><li>“classpath:/resources/“,</li><li>“classpath:/static/“, </li><li>“classpath:/public/“ </li></ul><p>在静态资源文件夹中有几个文件名是默认的。<br>index：欢迎页<br>favicon.ico：顶端图标文件<br>只要将相关的文件放入目录中，我们输入路径后即可访问。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      内嵌页面的做法
    
    </summary>
    
    
      <category term="技巧" scheme="http://lazytime.site/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="jar" scheme="http://lazytime.site/tags/jar/"/>
    
  </entry>
  
  <entry>
    <title>面试规划</title>
    <link href="http://lazytime.site/2020/10/20/%E9%9D%A2%E8%AF%95%E8%A7%84%E5%88%92/"/>
    <id>http://lazytime.site/2020/10/20/%E9%9D%A2%E8%AF%95%E8%A7%84%E5%88%92/</id>
    <published>2020-10-20T13:13:43.000Z</published>
    <updated>2020-10-20T13:15:27.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>待在一个小公司天天做CRUD，习惯了安逸，这不是什么好事，一出来找工作看到招聘要求感觉自己凉了半截。但是都知道面试是一个成本很高的事情，所以端正心态，重新开始。</p><p>总结起来就是一个字：<strong>真特么累</strong></p><p>不过有什么办法呢，我是对待所有的事情都抱持着学习的态度，所以把面试本身也作为技术来学了，不得不说，把个人简历写好的重要性，是直接决定你能不能找到工作的关键。</p><p>最后就是说一句，非常推荐在职找工作，没有顾虑，可以放下心来好好准备面试，没有硬实力千万不要裸辞。</p><a id="more"></a><h2 id="开局一张图："><a href="#开局一张图：" class="headerlink" title="开局一张图："></a>开局一张图：</h2><p><a href="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201020194954.png" target="_blank" rel="noopener">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201020194954.png</a></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201020200217.png" alt=""></p><h1 id="修改自己的简历："><a href="#修改自己的简历：" class="headerlink" title="修改自己的简历："></a>修改自己的简历：</h1><h2 id="项目："><a href="#项目：" class="headerlink" title="项目："></a>项目：</h2><h3 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h3><p>简要的写清楚你的项目是干啥的，突出亮点和成就</p><h3 id="职责："><a href="#职责：" class="headerlink" title="职责："></a>职责：</h3><p>简要写，主要写一下你在当前岗位主要担任的事情。<strong>精简</strong></p><p>其实这部分是大部分人简历都这样写的，这样拉不开差距</p><h2 id="涉及技术："><a href="#涉及技术：" class="headerlink" title="涉及技术："></a>涉及技术：</h2><ol><li>突出你的技术亮点，以及用技术解决了什么难题。注意是解决了什么难题，别人不会关注你的业务</li><li>你是如何看待项目问题的，你是如何从解决问题当中学到东西的</li><li>突出技术难题以及解决办法，这样有利于让下家判断你是否可以接受新工作</li></ol><h3 id="项目收获："><a href="#项目收获：" class="headerlink" title="项目收获："></a>项目收获：</h3><ol><li>项目给你的成长有什么帮助</li><li>突出特点，以及他的成就</li><li>你是如何看待这个项目的？</li></ol><h2 id="个人评价："><a href="#个人评价：" class="headerlink" title="个人评价："></a>个人评价：</h2><p>可以随意写一写。自由发挥，当然不要发挥过头</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>面试心态真的很重要，特别是投的简历石沉大海，这时候你需要不断的反思简历应该怎么写，目前还在不断的找工作，希望自己能换份好工作把，肚子里没啥货，实在不行只能回炉重造了…..</p><p>另外说一下：上次百度编辑器换了之后，升级的<code>ewebeditor</code> 不能用差点没把我送走，后续发篇文章讲下处理，比源码更难理解的是加密过的源码，不知道能不能抗住。</p><h2 id="技术岗位的建议（摘抄）"><a href="#技术岗位的建议（摘抄）" class="headerlink" title="技术岗位的建议（摘抄）"></a>技术岗位的建议（摘抄）</h2><p>这些算是我作为过来⼈对于应届毕业⽣和刚⼯作不久的同学的⼀些⼩⼩建议吧。<br>（1）⼀定要紧跟技术前进的脚步，尤其是⼤数据相关的技术，在技术更迭的时候⼀定要学习熟悉新技<br>术，看源码，哪怕⾃⼰在⼯作中⽤不到也⼀定要学。因为这是你下⼀份⼯作的敲⻔砖。<br>我作为⼀个⽼兵，在上⼀家公司⼯作4年，公司没有spark和flink的业务场景，我也没有逼迫⾃⼰学习这<br>些新技术。<br>结果现在⾯试碰壁，其实⼤部分原因就是⼈家⽤的主流技术就是这些，你不会你就被淘汰。<br>（2）不要给⾃⼰设置舒适区，这个就是说，⼀个公司待久了不要懒惰，不能荒废⾃⼰，始终要保持清<br>醒的头脑和进取⼼，不断学习，不断完善⾃⼰的技术，架构设计能⼒，项⽬管理能⼒，交付能⼒等。<br>⼀定要及时从项⽬中总结经验和不⾜，最好落实到⽇记本中，最后通过不断思考，形成⾃⼰的做事⽅法<br>论。<br>（3）对⾃⼰的职业⽣涯要有⼀个规划，以后要做哪⼀块⼀定要有⾃⼰的想法，确定了就要从这个⽅向<br>完善⾃⼰，多学多练。<br>⽬前⼤数据这⼀块，有数据中台架构的公司不是很多，除了算法岗外，⼤多数⼈在团队中都是1专多能<br>的⻆⾊，今天⼲⼲ETL，明天搞数仓，后天⼜给BI出数据，可能⼜搞调度系统、报表系统、标签系统、<br>反作弊平台等平台。<br>没有⼈会专⼀做某⼀块，但是⾃⼰⼀定要想好哪⼀块是⾃⼰以后要⾛的⽅向，那么这⼀个⽅向确定了就<br>要深⼊的学习这⼀块的知识，多看源码，多做练习，如果接触到具体项⽬，要在项⽬中沉淀⾃⼰，最后<br>形成⾃⼰的知识体系。<br>（4）做事情要有担当，不要根据OKR给⾃⼰设置界限，有能⼒有空闲多做⼀定要多做，这也是别⼈认<br>可你的最佳途径之⼀。互联⽹圈⼦很⼩，⼤家认可你，以后去⼤⼚，换个好⼯作，也许就更容易。</p><h1 id="2020-10-15-面试"><a href="#2020-10-15-面试" class="headerlink" title="2020-10-15 面试"></a>2020-10-15 面试</h1><h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><ol><li>进去交一份简历</li><li>在办公室等待一分钟左右</li><li>面试官进入<ol><li>直接问自己做的第一个项目</li><li>项目主要是干什么的</li><li>解决了什么问题</li><li>在项目当中遇到了什么难题</li><li>自己有没有从其他的项目中找到解决方案</li><li>有没有其他同类型的产品</li><li>第二个项目，主要做什么</li><li>你为什么要从上一家离职？<ol><li>重复性劳动</li><li>想要一个更好的平台</li><li>学新技术（后悔说出口）</li><li>考虑你是否有稳定性</li></ol></li><li>说说自己公司的情况<ol><li>业务简单</li><li>基本以旧项目为主</li><li>没有什么新需求</li><li>要求稳定</li></ol></li><li>结果<ol><li>个人发展和公司发展不符</li><li>走人</li><li>回家</li></ol></li></ol></li></ol><h2 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h2><ol><li><p>小公司，30人左右。环境还不错，每个人工位还是有的</p></li><li><p>面试之前，调查清楚公司，了解一下公司需要什么人才，你再去回答，感觉自己太过紧张说错了很多话</p></li><li><p>20分钟基本可以从简历和问答判断你是否符合标准，如果20分钟结束对话，基本是PASS</p></li><li><p>学会欲擒故纵，不要立马说出自己的想法。我就是吃了亏，暴露想法被PASS</p></li><li><p>面试前脑子中模拟一下被问到各种问题的回答策略，比如一下几个问题</p><ol><li>为什么要从驴上下来</li><li>为什么要找我这匹马</li><li>什么时候到我这匹马上来</li></ol></li><li><p>没有面试经验，感觉自己说项目不是很熟练，还要多加练习</p></li><li><p>性格过于耿直，有时候要隐藏自己想法</p></li><li><p>没有技术的面试，以聊项目为主，应该定位为运维，要求不高，但是会一直询问细节，判断是否真的做过项目</p></li><li><p>明天还有一家面试，加油</p></li></ol><h1 id="2020-10-16-面试"><a href="#2020-10-16-面试" class="headerlink" title="2020-10-16 面试"></a>2020-10-16 面试</h1><h2 id="1-jvm加载一个类的过程？双亲委派模型是什么？"><a href="#1-jvm加载一个类的过程？双亲委派模型是什么？" class="headerlink" title="1. jvm加载一个类的过程？双亲委派模型是什么？"></a>1. jvm加载一个类的过程？双亲委派模型是什么？</h2><h2 id="2-eureka和zookeeper是什么？他们有什么区别？"><a href="#2-eureka和zookeeper是什么？他们有什么区别？" class="headerlink" title="2. eureka和zookeeper是什么？他们有什么区别？"></a>2. eureka和zookeeper是什么？他们有什么区别？</h2><h2 id="3-虚拟机的几个区？分别有什么作用？"><a href="#3-虚拟机的几个区？分别有什么作用？" class="headerlink" title="3. 虚拟机的几个区？分别有什么作用？"></a>3. 虚拟机的几个区？分别有什么作用？</h2><h2 id="4-什么是锁？都有哪些锁？他们的作用？"><a href="#4-什么是锁？都有哪些锁？他们的作用？" class="headerlink" title="4. 什么是锁？都有哪些锁？他们的作用？"></a>4. 什么是锁？都有哪些锁？他们的作用？</h2><h2 id="5-NIO-BIO-AIO的区别"><a href="#5-NIO-BIO-AIO的区别" class="headerlink" title="5. NIO/BIO/AIO的区别"></a>5. NIO/BIO/AIO的区别</h2><h2 id="6-死锁是什么？什么时候会发生死锁？"><a href="#6-死锁是什么？什么时候会发生死锁？" class="headerlink" title="6. 死锁是什么？什么时候会发生死锁？"></a>6. 死锁是什么？什么时候会发生死锁？</h2><h2 id="7-update查询的问题（sql题目）？"><a href="#7-update查询的问题（sql题目）？" class="headerlink" title="7. update查询的问题（sql题目）？"></a>7. update查询的问题（sql题目）？</h2><h2 id="8-hashMap和HashTable的区别？"><a href="#8-hashMap和HashTable的区别？" class="headerlink" title="8. hashMap和HashTable的区别？"></a>8. hashMap和HashTable的区别？</h2><h2 id="9-TreeMap是如何实现的？他有什么特点"><a href="#9-TreeMap是如何实现的？他有什么特点" class="headerlink" title="9. TreeMap是如何实现的？他有什么特点"></a>9. TreeMap是如何实现的？他有什么特点</h2><h2 id="10-线程有几个状态？如何实现线程？"><a href="#10-线程有几个状态？如何实现线程？" class="headerlink" title="10. 线程有几个状态？如何实现线程？"></a>10. 线程有几个状态？如何实现线程？</h2><h2 id="11-String-a-“str”-和-String-a-new-String-“aa”-有什么区别？能否解释一下？"><a href="#11-String-a-“str”-和-String-a-new-String-“aa”-有什么区别？能否解释一下？" class="headerlink" title="11. String a = “str” 和 String a = new String(“aa”) 有什么区别？能否解释一下？"></a>11. String a = “str” 和 String a = new String(“aa”) 有什么区别？能否解释一下？</h2><h2 id="12-mysql在什么时候会索引失效，常见的sql优化方式？"><a href="#12-mysql在什么时候会索引失效，常见的sql优化方式？" class="headerlink" title="12. mysql在什么时候会索引失效，常见的sql优化方式？"></a>12. mysql在什么时候会索引失效，常见的sql优化方式？</h2><h2 id="13-常用的设计模式有几种？列举一下？"><a href="#13-常用的设计模式有几种？列举一下？" class="headerlink" title="13. 常用的设计模式有几种？列举一下？"></a>13. 常用的设计模式有几种？列举一下？</h2><h2 id="14-mysql的存储原理是什么？为什么使用B-Tree-作为底层？"><a href="#14-mysql的存储原理是什么？为什么使用B-Tree-作为底层？" class="headerlink" title="14. mysql的存储原理是什么？为什么使用B+Tree 作为底层？"></a>14. mysql的存储原理是什么？为什么使用B+Tree 作为底层？</h2><h2 id="15-mysql事务的等级，以及他是如何支持事务的"><a href="#15-mysql事务的等级，以及他是如何支持事务的" class="headerlink" title="15. mysql事务的等级，以及他是如何支持事务的"></a>15. mysql事务的等级，以及他是如何支持事务的</h2><h2 id="其他问题："><a href="#其他问题：" class="headerlink" title="其他问题："></a>其他问题：</h2><ol><li>设计一个秒杀系统，多线程抢占下单，当数量为1的时候，如何防止 变为 -1</li><li>jar 包如何切换环境，切换配置运行，如何敲命令？</li><li>“ABCDE”如何转为<code>List&lt;String&gt;</code>集合？</li><li>什么是正排索引，什么是倒序索引？什么是倒排索引</li><li>如果给”ABCDE”转成的集合，计算出现个数，有几种方法?</li><li>布隆过滤器用过吗，他有什么特点？</li><li>如果一个文件大小是100M，现在服务器限制只能传30M上限的文件，你要怎么做？</li><li>stream 常用的方法，你都用过哪些</li><li>一个<code>mapping</code> 在springMVC里面的流程</li><li>mybatis 里面常用的一些xml标签</li><li>mq：简历没写，没问</li><li>redis：简历没写，没问</li><li>用过分布式系统么？多线程的理解</li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      所以打铁还是需要自身硬啊
    
    </summary>
    
    
      <category term="面试" scheme="http://lazytime.site/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="简历" scheme="http://lazytime.site/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>我还是输给了免费富文本编辑器</title>
    <link href="http://lazytime.site/2020/10/13/%E6%88%91%E8%BF%98%E6%98%AF%E8%BE%93%E7%BB%99%E4%BA%86%E5%85%8D%E8%B4%B9%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://lazytime.site/2020/10/13/%E6%88%91%E8%BF%98%E6%98%AF%E8%BE%93%E7%BB%99%E4%BA%86%E5%85%8D%E8%B4%B9%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2020-10-13T15:38:28.000Z</published>
    <updated>2020-10-13T15:39:43.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前因后果"><a href="#前因后果" class="headerlink" title="前因后果"></a>前因后果</h1><h2 id="说说我做的一些努力"><a href="#说说我做的一些努力" class="headerlink" title="说说我做的一些努力"></a>说说我做的一些努力</h2><ol><li>考虑给百度编辑器开发的一个二次插件，等下会进行说明如何使用改源码的方式开发二次插件</li><li>后端增加接口，接受word文档，转为html返回前台，前台再根据html内容对于富文本编辑框继续赋值和一些处理</li></ol><a id="more"></a><p>然而，理想很美好，现实很骨感：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013130729.png?ynotemdtimestamp=1602599291444" alt="img"></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013130809.png?ynotemdtimestamp=1602599291444" alt="img"></p><ol><li>无法达到100%还原，word里面转译html会存在各种问题</li><li>有存在无法解析和翻译的部分</li><li>客户不会买账！（<strong>核心原因</strong>）</li></ol><h2 id="如何解决word转译到富文本编辑的问题"><a href="#如何解决word转译到富文本编辑的问题" class="headerlink" title="如何解决word转译到富文本编辑的问题"></a>如何解决word转译到富文本编辑的问题</h2><p>这两天搜索了几乎所有的富文本编辑器（国内用的比较多的）似乎都没有解决这个问题。</p><p><strong>然后几乎所有的带word导入粘贴的，几乎都是商业收费软件（还很贵）</strong></p><p>无奈之下，BOSS决定掏钱升级<code>ewebeditor</code>并且怪为什么没有提早说百度编辑器实现不了。（经理&amp;我：？？？）</p><p>所以最后结果就是：<strong>我瞎忙活了几天</strong>（内心一万个草泥马）。</p><p>既然知道了结果为什么还要写这篇文章，我其实很不甘心，一个方案被否决，我决定记录一下这个也许可行的数据方案。</p><h2 id="JAVA-amp-百度编辑器实现word粘贴（非完美）"><a href="#JAVA-amp-百度编辑器实现word粘贴（非完美）" class="headerlink" title="JAVA&amp;百度编辑器实现word粘贴（非完美）"></a>JAVA&amp;百度编辑器实现word粘贴（非完美）</h2><p>不扯那么多，直接上菜：</p><h3 id="1-前端为百度编辑器自定义一个上传word的功能"><a href="#1-前端为百度编辑器自定义一个上传word的功能" class="headerlink" title="1. 前端为百度编辑器自定义一个上传word的功能"></a>1. 前端为百度编辑器自定义一个上传word的功能</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013132152.png?ynotemdtimestamp=1602599291444" alt="img"></p><ol><li>搜索一下：<code>UE.commands[&quot;setbordervisible&quot;] = {</code></li></ol><p>在它的下面加入如下的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">UE.commands[&quot;getword&quot;] &#x3D; &#123;</span><br><span class="line">    execCommand: function (Name) &#123;</span><br><span class="line">        if (window.FileReader) &#123;   </span><br><span class="line">            var inputObj&#x3D;document.createElement(&#39;input&#39;)</span><br><span class="line">            inputObj.setAttribute(&#39;id&#39;,&#39;my_inputObj&#39;);</span><br><span class="line">            inputObj.setAttribute(&#39;type&#39;,&#39;file&#39;);</span><br><span class="line">            &#x2F;&#x2F;              inputObj.setAttribute(&#39;accept&#39;,&#39;application&#x2F;msword&#39;);</span><br><span class="line">            inputObj.setAttribute(&quot;style&quot;,&#39;visibility:hidden&#39;);</span><br><span class="line">            document.body.appendChild(inputObj);</span><br><span class="line"></span><br><span class="line">            inputObj.onchange &#x3D; function()&#123;</span><br><span class="line">                &#x2F;&#x2F;拿取上传的文档</span><br><span class="line">                var fileData &#x3D; inputObj.files[0]</span><br><span class="line"></span><br><span class="line">                if(fileData.type.indexOf(&#39;word&#39;)&gt;-1)&#123;</span><br><span class="line">                    if(fileData.size&gt;1048576)&#123;  &#x2F;&#x2F;控制在1M以内</span><br><span class="line">                        alert(&#39;您上传的文件大于1MB,请上传1MB以内的word文件&#39;)</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;  </span><br><span class="line">                    console.log(fileData)</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(&#39;请选择一个word文件&#39;)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            inputObj.click();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><p>增加一个命令叫做：<code>getword</code></p></li><li><p>模拟一个<code>input file</code>，并且模拟一次点击文件上传</p></li><li><p>如果上传了具体文件，触发<code>onchange</code>，并且进行word的各种判断</p></li><li><p>然后将文件的内容传到后台的接口（具体怎么做根据自己的语言来处理）</p></li><li><p>加入自定义的命令：<code>getword</code></p></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013132817.png?ynotemdtimestamp=1602599291444" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;为工具栏添加按钮，以下都是统一的按钮触发命令，所以写在一起</span><br><span class="line">    var btnCmds &#x3D; [&#39;undo&#39;, &#39;redo&#39;, &#39;formatmatch&#39;,</span><br><span class="line">        &#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;fontborder&#39;, &#39;touppercase&#39;, &#39;tolowercase&#39;,</span><br><span class="line">        &#39;strikethrough&#39;, &#39;subscript&#39;, &#39;superscript&#39;, &#39;source&#39;, &#39;indent&#39;, &#39;outdent&#39;,</span><br><span class="line">        &#39;blockquote&#39;, &#39;pasteplain&#39;, &#39;pagebreak&#39;,</span><br><span class="line">        &#39;selectall&#39;, &#39;print&#39;,&#39;horizontal&#39;, &#39;removeformat&#39;, &#39;time&#39;, &#39;date&#39;, &#39;unlink&#39;,</span><br><span class="line">        &#39;insertparagraphbeforetable&#39;, &#39;insertrow&#39;, &#39;insertcol&#39;, &#39;mergeright&#39;, &#39;mergedown&#39;, &#39;deleterow&#39;,</span><br><span class="line">        &#39;deletecol&#39;, &#39;splittorows&#39;, &#39;splittocols&#39;, &#39;splittocells&#39;, &#39;mergecells&#39;, &#39;deletetable&#39;, &#39;drafts&#39;,&#39;getword&#39;];</span><br></pre></td></tr></table></figure><p>注意到最后一个<code>getword</code>了么，这就是刚刚加进去的</p><ol><li>在<code>Lang/zh-cn/zh-cn.js</code>文件当中，增加按钮说明，直接照着截图加就行</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013133049.png?ynotemdtimestamp=1602599291444" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">,&#39;getword&#39;:&#39;获取word&#39;</span><br></pre></td></tr></table></figure><p>为了防止图裂，还是写一下，搜一下``scrawl：’涂鸦’`，基本可以找到大概的位置</p><ol><li>修改<code>ueditor.config.js</code>文件，增加新的按钮</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013133410.png?ynotemdtimestamp=1602599291444" alt="img"></p><p>在<code>help</code>的后面加一个<code>getword</code>就好了，注意以下json格式，<strong>逗号</strong>不能少</p><ol><li>增加样式，修改<code>Themes/default/ueditor.css</code>，直接在最底下增加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.edui-default .edui-toolbar .edui-for-getword .edui-icon &#123;</span><br><span class="line">    background-image: url(..&#x2F;images&#x2F;wordT1.png);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    width: 20px !important;</span><br><span class="line">    background-size: 18px;</span><br><span class="line">    background-position: center;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tip：wordT1.png 是一个word的小图标，这里就<strong>不提供了</strong></p><p>才怪：Themes/default/images/wordT1.png</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/wordT1.png?ynotemdtimestamp=1602599291444" alt="word图标下载"></p><p><a href="https://gitee.com/lazyTimes/imageReposity/raw/master/img/wordT1.png" target="_blank" rel="noopener">https://gitee.com/lazyTimes/imageReposity/raw/master/img/wordT1.png</a></p></blockquote><p>上面这一套做完之后，基本上在百度编辑器里面会多出一个图标，接下来需要后端开发接口，对接这个插件的行为和操作</p><h3 id="2-后端为word文件做转化为html的操作，然后将html原文返回给前端"><a href="#2-后端为word文件做转化为html的操作，然后将html原文返回给前端" class="headerlink" title="2. 后端为word文件做转化为html的操作，然后将html原文返回给前端"></a>2. 后端为word文件做转化为html的操作，然后将html原文返回给前端</h3><p>做这个接口要特别的小心，需要防止接口被滥用，拖垮服务器资源，因为转化和图片存储的代价还是不小的，需要控制可以转化的大小</p><p>前文也说了，老板都出钱升级了，我还玩你个鬼的百度编辑器，溜了溜了，用<code>ewebeidor</code>，下面是网上搜下来的一个word转html的工具方法，需要<code>apach-poi</code>的支持，我用的是<code>3.12</code>版本，具体的内容看自己。</p><blockquote><p>注意以下：docx 和 doc 在poi里面是需要用不同的对象进行操作的，后续自己也会补一补这一块的内容</p><p>poi 还是挺强的，很牛逼，把巨硬的那一套治的服服帖帖</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.apache.poi.hwpf.HWPFDocument;</span><br><span class="line">import org.apache.poi.hwpf.converter.PicturesManager;</span><br><span class="line">import org.apache.poi.hwpf.converter.WordToHtmlConverter;</span><br><span class="line">import org.apache.poi.hwpf.extractor.WordExtractor;</span><br><span class="line">import org.apache.poi.hwpf.model.PAPX;</span><br><span class="line">import org.apache.poi.hwpf.usermodel.Picture;</span><br><span class="line">import org.apache.poi.hwpf.usermodel.PictureType;</span><br><span class="line">import org.apache.poi.xwpf.usermodel.XWPFDocument;</span><br><span class="line">import org.apache.poi.xwpf.usermodel.XWPFNumbering;</span><br><span class="line">import org.apache.poi.xwpf.usermodel.XWPFParagraph;</span><br><span class="line">import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTNumbering;</span><br><span class="line">import org.w3c.dom.Document;</span><br><span class="line"></span><br><span class="line">import javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line">import javax.xml.transform.OutputKeys;</span><br><span class="line">import javax.xml.transform.Transformer;</span><br><span class="line">import javax.xml.transform.TransformerFactory;</span><br><span class="line">import javax.xml.transform.dom.DOMSource;</span><br><span class="line">import javax.xml.transform.stream.StreamResult;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据poi写的word帮助类</span><br><span class="line"> * @Date 2020&#x2F;10&#x2F;12 18:26</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class WordHelper &#123;</span><br><span class="line"></span><br><span class="line">    public static void parseDocx2Html() throws Throwable &#123;</span><br><span class="line">        final String path &#x3D; &quot;D:\\zxd\\mark\\罗湖兼容性\\20201012word导出必备\\&quot;;</span><br><span class="line">        final String file &#x3D; &quot;4403080004_深圳盐田政府在线_20200927_11064.doc&quot;;</span><br><span class="line">        InputStream input &#x3D; new FileInputStream(path + file);</span><br><span class="line">        String suffix &#x3D; file.substring(file.indexOf(&quot;.&quot;)+1);&#x2F;&#x2F; &#x2F;&#x2F;截取文件格式名</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;实例化WordToHtmlConverter，为图片等资源文件做准备</span><br><span class="line">        WordToHtmlConverter wordToHtmlConverter &#x3D; new WordToHtmlConverter(</span><br><span class="line">                DocumentBuilderFactory.newInstance().newDocumentBuilder()</span><br><span class="line">                        .newDocument());</span><br><span class="line">        wordToHtmlConverter.setPicturesManager(new PicturesManager() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String savePicture(byte[] content, PictureType pictureType,</span><br><span class="line">                                      String suggestedName, float widthInches, float heightInches) &#123;</span><br><span class="line">                return suggestedName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        if (&quot;doc&quot;.equals(suffix.toLowerCase())) &#123;</span><br><span class="line">            &#x2F;&#x2F; docx</span><br><span class="line">            HWPFDocument wordDocument &#x3D; new HWPFDocument(input);</span><br><span class="line">            wordToHtmlConverter.processDocument(wordDocument);</span><br><span class="line">            &#x2F;&#x2F;处理图片，会在同目录下生成 image&#x2F;media&#x2F; 路径并保存图片</span><br><span class="line">            List pics &#x3D; wordDocument.getPicturesTable().getAllPictures();</span><br><span class="line">            if (pics !&#x3D; null) &#123;</span><br><span class="line">                for (int i &#x3D; 0; i &lt; pics.size(); i++) &#123;</span><br><span class="line">                    Picture pic &#x3D; (Picture) pics.get(i);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        pic.writeImageContent(new FileOutputStream(path</span><br><span class="line">                                + pic.suggestFullFileName()));</span><br><span class="line">                    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 转换</span><br><span class="line">        Document htmlDocument &#x3D; wordToHtmlConverter.getDocument();</span><br><span class="line">        ByteArrayOutputStream outStream &#x3D; new ByteArrayOutputStream();</span><br><span class="line">        DOMSource domSource &#x3D; new DOMSource(htmlDocument);</span><br><span class="line">        StreamResult streamResult &#x3D; new StreamResult(outStream);</span><br><span class="line">        TransformerFactory tf &#x3D; TransformerFactory.newInstance();</span><br><span class="line">        Transformer serializer &#x3D; tf.newTransformer();</span><br><span class="line">        serializer.setOutputProperty(OutputKeys.ENCODING, &quot;utf-8&quot;);&#x2F;&#x2F;编码格式</span><br><span class="line">        serializer.setOutputProperty(OutputKeys.INDENT, &quot;yes&quot;);&#x2F;&#x2F;是否用空白分割</span><br><span class="line">        serializer.setOutputProperty(OutputKeys.METHOD, &quot;html&quot;);&#x2F;&#x2F;输出类型</span><br><span class="line">        serializer.transform(domSource, streamResult);</span><br><span class="line">        outStream.close();</span><br><span class="line">        String content &#x3D; new String(outStream.toByteArray());</span><br><span class="line">        System.err.println(content);</span><br><span class="line">        FileUtils.writeStringToFile(new File(path, &quot;interface.html&quot;), content,</span><br><span class="line">                &quot;utf-8&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Throwable &#123;</span><br><span class="line">        WordHelper.parseDocx2Html();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>滚回去继续升级<code>ewebeditor</code>了，擦公司的前辈居然有人做了一个一键排版和文章重排，直接动了源代码，<strong>有时间研究一下</strong>，果然老系统出神仙。</p><blockquote><p>PS：老系统代码里面老板的名字在上面，老板是大公司程序员出身，挺好。</p></blockquote><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>永远不要小看任何细节的点，看似平平无奇的功能，其实真正考虑要实现的时候。</p><p>一个简单的复制粘贴其实也并不简单。word的复制和原样粘贴要实现其实不太容易。</p><p>那么这种word转译的exe插件，他们是怎么做到的，我现在产生了无限的思考……</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      最后还是换了编辑器，也算是一种解脱
    
    </summary>
    
    
      <category term="百度编辑器" scheme="http://lazytime.site/categories/%E7%99%BE%E5%BA%A6%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="前端" scheme="http://lazytime.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>终于把百度编辑器的一个坑填了</title>
    <link href="http://lazytime.site/2020/10/13/%E7%BB%88%E4%BA%8E%E6%8A%8A%E7%99%BE%E5%BA%A6%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91%E5%A1%AB%E4%BA%86/"/>
    <id>http://lazytime.site/2020/10/13/%E7%BB%88%E4%BA%8E%E6%8A%8A%E7%99%BE%E5%BA%A6%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91%E5%A1%AB%E4%BA%86/</id>
    <published>2020-10-13T15:04:48.000Z</published>
    <updated>2020-10-13T15:37:32.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>上文说道，我被百度编辑器上了套，今天，说下我的个人进展，因为我把截图粘贴的功能兼容到IE了，算是给自己的鼓励。</p><a id="more"></a><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>其实还挺简单的，内容如下：</p><p>在<code>ueditor.all.js</code>当中，输入<code>domUtils.on(me.body, &#39;paste drop&#39;, function(e){</code>可以看到类似粘贴板处理的代码</p><p>我对里面的内容进行了如下的处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">if(isIE())&#123;</span><br><span class="line">    var text &#x3D; window.clipboardData.getData(&#39;Text&#39;);</span><br><span class="line">    if(text &#x3D;&#x3D; null)&#123;</span><br><span class="line">        var items&#x3D;clipboardData.files;</span><br><span class="line">        for (var i &#x3D; 0, len &#x3D; items.length; i &lt; len; i++) &#123;</span><br><span class="line">            var item &#x3D; items[i];</span><br><span class="line">            if ( item.type.indexOf(&#39;image&#x2F;&#39;) !&#x3D;&#x3D; -1 ) &#123;</span><br><span class="line">                &#x2F;&#x2F;上传到服务器</span><br><span class="line">                sendAndInsertFile(item,me); </span><br><span class="line">                &#x2F;&#x2F;阻止默认事件, 避免重复添加;</span><br><span class="line">                e.preventDefault();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    var hasImg &#x3D; false,</span><br><span class="line">        items;</span><br><span class="line">    &#x2F;&#x2F;获取粘贴板文件列表或者拖放文件列表</span><br><span class="line">    items &#x3D; e.type &#x3D;&#x3D; &#39;paste&#39; ? getPasteImage(e):getDropImage(e);</span><br><span class="line">    if(items)&#123;</span><br><span class="line">        var len &#x3D; items.length,</span><br><span class="line">            file;</span><br><span class="line">        while (len--)&#123;</span><br><span class="line">            file &#x3D; items[len];</span><br><span class="line">            if(file.getAsFile) file &#x3D; file.getAsFile();</span><br><span class="line">            if(file &amp;&amp; file.size &gt; 0) &#123;</span><br><span class="line">                sendAndInsertFile(file, me);</span><br><span class="line">                hasImg &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        hasImg &amp;&amp; e.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>判断是否为IE，是IE特殊处理</li><li>使用IE特定的获取粘贴板的内容</li><li>获取到文件内容，调用百度编辑器的上传方法，将粘贴板的内容上传到服务器。</li></ol><h2 id="关于word粘贴内容到富文本编辑框"><a href="#关于word粘贴内容到富文本编辑框" class="headerlink" title="关于word粘贴内容到富文本编辑框"></a>关于word粘贴内容到富文本编辑框</h2><p>今天大部分时间都在纠结这玩意，后续考虑自己二次开发插件做二次处理，明天果断和前端配合试下效果。</p><p>今天还是了解到不少内容的：</p><ol><li>了解了一下Base64 的内容</li><li>js如何处理 copy 、paste 时间，以及通过事件监听处理<code>copy</code>、<code>paste</code></li><li>IE和谷歌的对于剪贴板内容的不同处理方式</li><li>了解了一下插件的二次开发</li></ol><h1 id="如何给百度编辑器进行插件的二次开发"><a href="#如何给百度编辑器进行插件的二次开发" class="headerlink" title="如何给百度编辑器进行插件的二次开发"></a>如何给百度编辑器进行插件的二次开发</h1><p><a href="https://blog.csdn.net/wiicms/article/details/46412585" target="_blank" rel="noopener">https://blog.csdn.net/wiicms/article/details/46412585</a> 百度ueditor编辑器插件开发之对话框-移动微模板插件</p><p>直接复制里面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; TODO 为百度编辑器开发一个新插件</span><br><span class="line">    UE.registerUI(&#39;dialog&#39;,function(editor,uiName)&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建dialog</span><br><span class="line">    var dialog &#x3D; new UE.ui.Dialog(&#123;</span><br><span class="line">        &#x2F;&#x2F;指定弹出层中页面的路径，这里只能支持页面,因为跟addCustomizeDialog.js相同目录，所以无需加路径</span><br><span class="line">        iframeUrl:editor.ui.UEDITOR_HOME_URL+&quot;p&#x2F;uet.html&quot;,</span><br><span class="line">        &#x2F;&#x2F;需要指定当前的编辑器实例</span><br><span class="line">        editor:ue,</span><br><span class="line">        &#x2F;&#x2F;指定dialog的名字</span><br><span class="line">        name:uiName,</span><br><span class="line">        &#x2F;&#x2F;dialog的标题</span><br><span class="line">        title:&quot;微信模板&quot;,</span><br><span class="line">        &#x2F;&#x2F;指定dialog的外围样式</span><br><span class="line">        cssRules:&quot;width:540px;height:400px;&quot;,</span><br><span class="line">        &#x2F;&#x2F;如果给出了buttons就代表dialog有确定和取消</span><br><span class="line">        buttons:[</span><br><span class="line">            &#123;</span><br><span class="line">                className:&#39;edui-okbutton&#39;,</span><br><span class="line">                label:&#39;确定&#39;,</span><br><span class="line">                onclick:function () &#123;</span><br><span class="line">                    dialog.close(true);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                className:&#39;edui-cancelbutton&#39;,</span><br><span class="line">                label:&#39;取消&#39;,</span><br><span class="line">                onclick:function () &#123;</span><br><span class="line">                    dialog.close(false);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]&#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;参考addCustomizeButton.js</span><br><span class="line">        var btn &#x3D; new UE.ui.Button(&#123;</span><br><span class="line">            name:&#39;dialogbutton&#39; + uiName,</span><br><span class="line">            title:&#39;dialogbutton&#39; + uiName,</span><br><span class="line">            &#x2F;&#x2F;需要添加的额外样式，指定icon图标，这里默认使用一个重复的icon</span><br><span class="line">            cssRules :&#39;background-position: -500px 0;&#39;,</span><br><span class="line">            onclick:function () &#123;</span><br><span class="line">                &#x2F;&#x2F;渲染dialog</span><br><span class="line">                dialog.render();</span><br><span class="line">                dialog.open();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return btn;</span><br><span class="line">    &#125;&#x2F;*index 指定添加到工具栏上的那个位置，默认时追加到最后,editorId 指定这个UI是那个编辑器实例上的，默认是页面上所有的编辑器都会添加这个按钮*&#x2F;);</span><br><span class="line">    &#x2F;&#x2F;TODO 为百度编辑器开发一个新插件</span><br></pre></td></tr></table></figure><p><a href="http://fex.baidu.com/ueditor/#dev-developer" target="_blank" rel="noopener">http://fex.baidu.com/ueditor/#dev-developer</a> 官方文档解答如何开发二次插件</p><h1 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h1><p>工作之余随手写下，前端知识UP，回家继续学习去咯。</p><p>来，我们随手从QQ复制一个别人发的图片，贴到百度编辑器，好，内网地址又暴露了（卒）。。。。。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20201012203818.png?ynotemdtimestamp=1602599291444" alt="img"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>使用开源插件读取word内容：<a href="https://blog.csdn.net/eiceblue/article/details/89519297" target="_blank" rel="noopener">https://blog.csdn.net/eiceblue/article/details/89519297</a></p><p>java 使用POI操作word获取样式：<a href="https://blog.csdn.net/qq_41129811/article/details/102570726" target="_blank" rel="noopener">https://blog.csdn.net/qq_41129811/article/details/102570726</a></p><blockquote><p>可以学习一下poi 是如何获取到样式和内容的</p></blockquote><p>js中使用Clipboard API获取剪贴板内容：<a href="https://blog.csdn.net/haoaiqian/article/details/100929143?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2allfirst_rank_v2~rank_v25-1-100929143.nonecase&amp;utm_term=ie" target="_blank" rel="noopener">https://blog.csdn.net/haoaiqian/article/details/100929143?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2allfirst_rank_v2~rank_v25-1-100929143.nonecase&amp;utm_term=ie</a></p><p>获取剪贴板数据：<a href="https://blog.csdn.net/iteye_4865/article/details/82200986" target="_blank" rel="noopener">https://blog.csdn.net/iteye_4865/article/details/82200986</a></p><p>js 文本框监听粘贴事件，获取粘贴板上的图片数据：<a href="https://blog.csdn.net/luyangbin01/article/details/69525776" target="_blank" rel="noopener">https://blog.csdn.net/luyangbin01/article/details/69525776</a></p><p>js处理剪贴板的内容：<a href="https://blog.csdn.net/qq_31411389/article/details/53007675?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2allfirst_rank_v2~rank_v25-3-53007675.nonecase&amp;utm_term=ie" target="_blank" rel="noopener">https://blog.csdn.net/qq_31411389/article/details/53007675?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2allfirst_rank_v2~rank_v25-3-53007675.nonecase&amp;utm_term=ie</a></p><p>富文本编辑器实现从word中复制图片(外挂)：<a href="https://www.hellojava.com/a/92356.html" target="_blank" rel="noopener">https://www.hellojava.com/a/92356.html</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      我修复了百度编辑器上的一个BUG
    
    </summary>
    
    
      <category term="前端" scheme="http://lazytime.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="百度编辑器" scheme="http://lazytime.site/tags/%E7%99%BE%E5%BA%A6%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>一篇帖子解决window.open中使用jquery操作父元素的问题</title>
    <link href="http://lazytime.site/2020/10/11/%E4%B8%80%E7%AF%87%E5%B8%96%E5%AD%90%E8%A7%A3%E5%86%B3window-open%E4%B8%AD%E4%BD%BF%E7%94%A8jquery%E6%93%8D%E4%BD%9C%E7%88%B6%E5%85%83%E7%B4%A0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://lazytime.site/2020/10/11/%E4%B8%80%E7%AF%87%E5%B8%96%E5%AD%90%E8%A7%A3%E5%86%B3window-open%E4%B8%AD%E4%BD%BF%E7%94%A8jquery%E6%93%8D%E4%BD%9C%E7%88%B6%E5%85%83%E7%B4%A0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-10-11T06:30:52.000Z</published>
    <updated>2020-10-11T06:31:25.524Z</updated>
    
    <content type="html"><![CDATA[<p>首先看下例子：<br><a href="http://www.cssrain.cn/demo/1/Window-open-Show/index.html" target="_blank" rel="noopener">http://www.cssrain.cn/demo/1/Window-open-Show/index.html</a></p><p>这是最近在项目中用到的，后来还在父窗口，增加了删除，然后前面的序号重新排列。</p><p>其实都还是比较简单。</p><p>具体遇到了哪些问题呢，总结下：</p><p>1，因为父窗口中引入了jquery包了，所以子窗口不需要引入了（注：在我这个例子中）。</p><p>2，window.opener.$(“#showtable tr”) 后面直接写 jquery的选择 器。</p><p>3，删除排序也很简单，就是删除一个后，重新获取所有tr，然后在each循环设置一下index</p><p>本篇文章来源于 cssrain.cn 原文链接：<a href="http://www.cssrain.cn/article.asp?id=869" target="_blank" rel="noopener">http://www.cssrain.cn/article.asp?id=869</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      一篇帖子解决window.open中使用jquery操作父元素的问题
    
    </summary>
    
    
      <category term="未分类" scheme="http://lazytime.site/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="前端" scheme="http://lazytime.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>百度编辑器的那些坑</title>
    <link href="http://lazytime.site/2020/10/11/%E7%99%BE%E5%BA%A6%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>http://lazytime.site/2020/10/11/%E7%99%BE%E5%BA%A6%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</id>
    <published>2020-10-11T06:28:18.000Z</published>
    <updated>2020-10-11T06:31:42.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="百度编辑器的那些坑："><a href="#百度编辑器的那些坑：" class="headerlink" title="百度编辑器的那些坑："></a>百度编辑器的那些坑：</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>最近在处理公司的旧后台浏览器兼容问题，要求更换<code>ewebeditor</code> 编辑器，更换为ueditor 编辑器，并且要求 IE9/IE8/IE10/IE11/Micro Edge/Google/360 编辑器各项兼容，听说百度的编辑器兼容至IE6，以为简单的换个编辑器的我，在上面折腾了不少时间，本文针对具体问题进行处理，可能读者遇不到我这样的问题，事前说明：<strong>仅供参考</strong>、<strong>仅供参考</strong>、<strong>仅供参考</strong></p><a id="more"></a><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><ol><li>百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患  - IE问题</li><li>百度编辑器<code>Ctril + v</code>粘贴图片功能在IE上面不触发任何效果的问题</li><li>特殊符号传输后台的转义问题，以及将数据库的html读取之后，由于双引号导致的截取页面报错问题</li><li>针对 <code>iframe</code>这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式</li></ol><h2 id="百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患-IE问题"><a href="#百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患-IE问题" class="headerlink" title="百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患  - IE问题"></a>百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患  - IE问题</h2><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>使用粘贴图片就会出现如下的问题，在查看源代码的时候，出现了如图所示的暴露源代码的问题，出现问题原因不明:</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011120300.png" alt=""></p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><ol><li>非常简单，只需要关闭<code>查看源代码</code>的按钮就行，完美解决</li><li>如果一定要保留，在不知道如何处理的情况下，并且急需交差的时候，可以这么干（当时情况是第二天就得交差，由于一直找不到问题点，加班到晚上10想出来的办法）</li></ol><h3 id="障眼法："><a href="#障眼法：" class="headerlink" title="障眼法："></a>障眼法：</h3><p>先直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击源代码按钮对于编辑器的内容进行敏感href信息处理 2019.9.24</span></span><br><span class="line">   $(<span class="string">'body'</span>).delegate(<span class="string">".edui-button-wrap"</span>,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> editTxt = $(<span class="string">'.edui-editor-iframeholder'</span>).find(<span class="string">'textarea'</span>)</span><br><span class="line">       <span class="keyword">if</span>(editTxt.length)&#123;</span><br><span class="line">           <span class="keyword">var</span> content = UE.getEditor(<span class="string">'ueditor'</span>).getContent();</span><br><span class="line">           <span class="keyword">var</span> aE = $(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>);</span><br><span class="line">           aE.html(content)</span><br><span class="line">           <span class="comment">// alert(aE)</span></span><br><span class="line">           aE.find(<span class="string">'p.filedata'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">var</span> newA = $(<span class="keyword">this</span>).find(<span class="string">'a'</span>)</span><br><span class="line">               <span class="comment">// alert(newA.attr('href'))</span></span><br><span class="line">               <span class="keyword">if</span>(newA.attr(<span class="string">'href'</span>).indexOf(<span class="string">"http://"</span>)&gt;=<span class="number">0</span> || newA.attr(<span class="string">'href'</span>).indexOf(<span class="string">"https://"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                   <span class="keyword">var</span> arr = newA.attr(<span class="string">'href'</span>).split(<span class="string">'/'</span>)</span><br><span class="line">                   <span class="keyword">var</span> newTxt = <span class="string">''</span></span><br><span class="line">                   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">3</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">                       newTxt +=<span class="string">'/'</span>+arr[i]</span><br><span class="line">                   &#125;</span><br><span class="line">                   newA.attr(<span class="string">'href'</span>,newTxt)</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="comment">// alert(content);</span></span><br><span class="line">           <span class="comment">// 获取转义之后的字符</span></span><br><span class="line">           <span class="keyword">var</span> formatTxt = toTxt(aE.html());</span><br><span class="line">           <span class="comment">// formatTxt = appendBrToPAlfter(formatTxt);</span></span><br><span class="line">           editTxt.html(formatTxt);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*正则表达式 替换括号,尖括号等*/</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">toTxt</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> RexStr = <span class="regexp">/\&lt;|\&gt;|\"|\'|\&amp;/g</span></span><br><span class="line">       str = str.replace(RexStr, <span class="function"><span class="keyword">function</span>(<span class="params">MatchStr</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">switch</span> (MatchStr) &#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"&lt;"</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;lt;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"&gt;"</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;gt;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"\""</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;quot;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"'"</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;#39;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"&amp;"</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;amp;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol><li>绑定一个失去焦点的事件，在读取源代码的时候，对于内容进行截断</li><li>重新为href 赋值，保证连接无内网地址</li><li>去除掉内容里面的特殊标签，</li><li>重新为富文本框赋值</li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>比较搞笑的解决方式，但是当领导掐着你脖子的时候，解决问题永远是第一位。至少这种方式上线之后，没有反馈出现过问题，各个版本的浏览器都是兼容的，算是逃过一劫</li><li>个人建议富文本编辑器有空多去玩玩查看源代码的功能，有时候编辑器的默认设置可能会坑了你，比如百度编辑器默认会加上 p 标签。。。。</li></ol><h2 id="特殊符号传输后台的转义问题，以及读取数据的问题"><a href="#特殊符号传输后台的转义问题，以及读取数据的问题" class="headerlink" title="特殊符号传输后台的转义问题，以及读取数据的问题"></a>特殊符号传输后台的转义问题，以及读取数据的问题</h2><h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><h2 id="针对-iframe这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式"><a href="#针对-iframe这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式" class="headerlink" title="针对 iframe这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式"></a>针对 <code>iframe</code>这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式</h2><h3 id="问题复现："><a href="#问题复现：" class="headerlink" title="问题复现："></a>问题复现：</h3><p>​    由于旧后台是使用iframe进行拼接旧后台系统，在保存的时候，表单无法拿到富文本编辑框的内容，并且在读取的时候，会导致一些样式代码被截断导致内容显示不全的问题。</p><p>​    我们都知道富文本在数据库存储的一般都是html原文，一般的系统都会对一些 &lt; &gt; \ $ % 这种字符进行转义处理或者拦截。所以我们直接用js传原生文本肯定是不行的，需要进过如下的处理：</p><p>存储的时候：</p><ol><li>转移特殊符号，替换原文本</li><li>拦截器拦截检测是否有特殊文本，进行二次转义</li><li>存储之前，将转义字符变为原始 &lt; &gt; 等标签，替换内容</li><li>将富文本存储到数据库，完成</li></ol><p>读取的时候：</p><ol><li>读取数据库的内容</li><li>回显内容到富文本编辑器（这一步其实会遇到非常多的奇怪问题，请看下文）</li></ol><p>​    至于保存的时候，这里的实际情况是，旧版本的ewebeditor，在父iframe也就是表单的父页面使用了一个<code>textarea</code> 标签来保存具体的内容，导致即使我在<code>iframe</code>操作之后，依然会出现问题。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011124205.png" alt=""></p><h3 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h3><p>也是直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ue = UE.getEditor(<span class="string">'ueditor'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化内容</span></span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          ue.setContent($(<span class="string">'#'</span>+QueryStringByName(<span class="string">'id'</span>), parent.document).val())</span><br><span class="line">      &#125;,<span class="number">500</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绑定失去焦点事件</span></span><br><span class="line">  ue.addListener(<span class="string">'blur'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">editor</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> content = UE.getEditor(<span class="string">'ueditor'</span>).getContent();</span><br><span class="line">      <span class="keyword">var</span> aE = $(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>);</span><br><span class="line"></span><br><span class="line">      aE.html(content)</span><br><span class="line">      aE.find(<span class="string">'p.filedata'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> newA = $(<span class="keyword">this</span>).find(<span class="string">'a'</span>)</span><br><span class="line">          <span class="keyword">if</span>(newA.attr(<span class="string">'href'</span>).indexOf(<span class="string">"http://"</span>)&gt;=<span class="number">0</span> || newA.attr(<span class="string">'href'</span>).indexOf(<span class="string">"https://"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> arr = newA.attr(<span class="string">'href'</span>).split(<span class="string">'/'</span>)</span><br><span class="line">              <span class="keyword">var</span> newTxt = <span class="string">''</span></span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">3</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">                  newTxt +=<span class="string">'/'</span>+arr[i]</span><br><span class="line">              &#125;</span><br><span class="line">              newA.attr(<span class="string">'href'</span>,newTxt)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">      content = toTxt(aE.html());</span><br><span class="line">      <span class="comment">//alert(content);</span></span><br><span class="line">      $(<span class="string">'#'</span>+QueryStringByName(<span class="string">'id'</span>), parent.document).html(content)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取search参数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">QueryStringByName</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result=<span class="built_in">window</span>.location.search.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[\?\&amp;]"</span> + name + <span class="string">"=([^\&amp;]+)"</span>, <span class="string">"i"</span>));</span><br><span class="line">      <span class="keyword">if</span>(result==<span class="literal">null</span> || result.length&lt;<span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>在初始化的时候，跑去父窗口拿到数据的文本内容，做了一点点的延时加载。</li><li>使用<code>blur</code> 事件做 <code>textarea</code> 和 富文本编辑器的双向同步</li><li>同样需要处理内网地址暴露的问题，需要截取内网地址</li><li>对于特殊标签转义</li></ol><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><ol><li>富文本暂存区域，最好选隐藏域的 <code>textarea</code>，使用value 值会出现双引号截取的问题 </li><li>小心转义带来的各种问题，一定要记得何时数据会被转义，同时什么阶段的数据内容是什么形式</li><li>关注富文本编辑器本身干的一些”<code>杂活</code>“</li></ol><h2 id="处理百度编辑器粘贴在IE失效的问题（目前未找到解决方案）"><a href="#处理百度编辑器粘贴在IE失效的问题（目前未找到解决方案）" class="headerlink" title="处理百度编辑器粘贴在IE失效的问题（目前未找到解决方案）"></a>处理百度编辑器粘贴在IE失效的问题（目前未找到解决方案）</h2><h3 id="问题复现：-1"><a href="#问题复现：-1" class="headerlink" title="问题复现："></a>问题复现：</h3><p>这也是我要说的重点问题，目前我依然没有找到解决办法，下面的内容都是我的个人尝试，希望找到有过处理经验的人或者有其他方式的办法，有偿感谢！！</p><p>第一个问题：在IE当中，使用<code>ctrl + V</code> 是没有任何反应和效果的，而在谷歌的浏览器下面，</p><p>第二个问题：在IE中, 复制粘贴word内容无法粘贴图片</p><h3 id="无法解决的办法："><a href="#无法解决的办法：" class="headerlink" title="无法解决的办法："></a>无法解决的办法：</h3><p><a href="https://www.cnblogs.com/songsu/p/11915470.html" target="_blank" rel="noopener">https://www.cnblogs.com/songsu/p/11915470.html</a> </p><p>遇事不决找谷歌，谷歌出了一篇这种文章，试下</p><p>大概在<code>ueditor.all.js</code>文件的23881行左右</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">bindEvents:&#123;</span><br><span class="line">            <span class="comment">//插入粘贴板的图片，拖放插入图片</span></span><br><span class="line">            <span class="string">'ready'</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">window</span>.FormData &amp;&amp; <span class="built_in">window</span>.FileReader) &#123;</span><br><span class="line">                    domUtils.on(me.body, <span class="string">'paste drop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                        <span class="comment">//判断剪贴板的内容是否包含文本</span></span><br><span class="line">                        <span class="comment">//首先解释一下为什么要判断文本是不是为空</span></span><br><span class="line">                        <span class="comment">//在ctrl+c word中的文字或者图片之后会返回1种(image/png)或者4种type(text/plain,text/html,text/rtf,image/png)类型的对象</span></span><br><span class="line">                        <span class="comment">//为了兼容4种格式的情况，做了如下的判断</span></span><br><span class="line">                        <span class="comment">//如下代码：e.originalEvent.clipboardData.items获得剪贴板的内容</span></span><br><span class="line">                        <span class="comment">//当粘贴了文本之后text是不为空的，同时也会返回当前文本的图片类型</span></span><br><span class="line">                        <span class="comment">//如果有文字的话不做任何的处理，如果只粘贴图片的话文本一定是空的，包括复制的桌面图片或者截图的图片</span></span><br><span class="line">                        <span class="comment">// var text = e.originalEvent.clipboardData.getData("text");</span></span><br><span class="line">                        <span class="comment">// if(text == "")&#123;</span></span><br><span class="line">                        <span class="comment">//     var items=e.originalEvent.clipboardData.items;</span></span><br><span class="line">                        <span class="comment">//     for (var i = 0, len = items.length; i &lt; len; i++) &#123;</span></span><br><span class="line">                        <span class="comment">//         var item = items[i];</span></span><br><span class="line">                        <span class="comment">//         if ( item.kind == 'file' &amp;&amp; item.type.indexOf('image/') !== -1 ) &#123;</span></span><br><span class="line">                        <span class="comment">//             var blob = item.getAsFile();</span></span><br><span class="line">                        <span class="comment">//             getBase64(blob, function( base64 ) &#123;</span></span><br><span class="line">                        <span class="comment">//                 //sendAndInsertImage(base64,me); 上传到服务器</span></span><br><span class="line">                        <span class="comment">//                 setBase64Image(base64,me);</span></span><br><span class="line">                        <span class="comment">//             &#125;);</span></span><br><span class="line">                        <span class="comment">//             //阻止默认事件, 避免重复添加;</span></span><br><span class="line">                        <span class="comment">//             e.originalEvent.preventDefault();</span></span><br><span class="line">                        <span class="comment">//         &#125;;</span></span><br><span class="line">                        <span class="comment">//     &#125;</span></span><br><span class="line">                        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//TODO 粘贴图片的根本问题点 20201010</span></span><br><span class="line">                        <span class="keyword">var</span> hasImg = <span class="literal">false</span>,</span><br><span class="line">                            items;</span><br><span class="line">                        <span class="comment">//获取粘贴板文件列表或者拖放文件列表</span></span><br><span class="line">                        items = e.type == <span class="string">'paste'</span> ? getPasteImage(e):getDropImage(e);</span><br><span class="line">                        <span class="keyword">if</span>(items)&#123;</span><br><span class="line">                            <span class="keyword">var</span> len = items.length,</span><br><span class="line">                                file;</span><br><span class="line">                            <span class="keyword">while</span> (len--)&#123;</span><br><span class="line">                                file = items[len];</span><br><span class="line">                                <span class="keyword">if</span>(file.getAsFile) file = file.getAsFile();</span><br><span class="line">                                <span class="keyword">if</span>(file &amp;&amp; file.size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                    sendAndInsertFile(file, me);</span><br><span class="line">                                    hasImg = <span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            hasImg &amp;&amp; e.preventDefault();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">//取消拖放图片时出现的文字光标位置提示</span></span><br><span class="line">                    domUtils.on(me.body, <span class="string">'dragover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(e.dataTransfer.types[<span class="number">0</span>] == <span class="string">'Files'</span>) &#123;</span><br><span class="line">                            e.preventDefault();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//设置loading的样式</span></span><br><span class="line">                    utils.cssRule(<span class="string">'loading'</span>,</span><br><span class="line">                        <span class="string">'.loadingclass&#123;display:inline-block;cursor:default;background: url(\''</span></span><br><span class="line">                            + <span class="keyword">this</span>.options.themePath</span><br><span class="line">                            + <span class="keyword">this</span>.options.theme +<span class="string">'/images/loading.gif\') no-repeat center center transparent;border:1px solid #cccccc;margin-left:1px;height: 22px;width: 22px;&#125;\n'</span> +</span><br><span class="line">                            <span class="string">'.loaderrorclass&#123;display:inline-block;cursor:default;background: url(\''</span></span><br><span class="line">                            + <span class="keyword">this</span>.options.themePath</span><br><span class="line">                            + <span class="keyword">this</span>.options.theme +<span class="string">'/images/loaderror.png\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;'</span> +</span><br><span class="line">                            <span class="string">'&#125;'</span>,</span><br><span class="line">                        <span class="keyword">this</span>.document);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>针对内容进行的处理操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPasteImage</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">return</span> e.clipboardData &amp;&amp; e.clipboardData.items &amp;&amp; e.clipboardData.items.length == <span class="number">1</span> &amp;&amp; <span class="regexp">/^image\//</span>.test(e.clipboardData.items[<span class="number">0</span>].type) ? e.clipboardData.items:<span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">getDropImage</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  e.dataTransfer &amp;&amp; e.dataTransfer.files ? e.dataTransfer.files:<span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//TODO 执行插入图片的操作 20201010</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">setBase64Image</span>(<span class="params">base64, editor</span>) </span>&#123;</span><br><span class="line">       editor.execCommand(<span class="string">'insertimage'</span>, &#123;</span><br><span class="line">           src: base64,</span><br><span class="line">           _src: base64</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//TODO 获得base64 20201010</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">getBase64</span>(<span class="params">blob, callback</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> a = <span class="keyword">new</span> FileReader();</span><br><span class="line">       a.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">           callback(e.target.result);</span><br><span class="line">       &#125;;</span><br><span class="line">       a.readAsDataURL(blob);</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>博客的方式是读取二进制流为Blob,然后调用原始的上传接口进行兼容，然而，我在直接套用之后，连谷歌的粘贴也失效了<strong>（坑爹！）</strong></p><p>不用怀疑，肯定是：<code>getPasteImage()</code>中没有拿到想要的结果，所以我直接<code>alert</code>打印想要的内容，看下什么内容</p><p>加入代码<code>console.log(e.clipboardData)</code>看下IE什么效果（注意要使用高版本IE）</p><blockquote><p> 记得在测试之前，在粘贴板粘贴带图片内容的word内容，或者截个图粘贴到IE的富文本编辑框</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011132122.png" alt=""></p><p>不出所料，没有内容，我们直接打印 e 事件对象，看看有没有想要的内容</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011132536.png" alt=""></p><p>错了，使用console：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011133204.png" alt=""></p><p>说实话，看不懂，凭感觉这里的<code>dataTransfer</code>没有内容，基本上是找不到如何获取粘贴板数据的点</p><p>所以个人判断是IE浏览器本身就对这种粘贴操作没有进行兼容或者处理（万恶的IE浏览器）</p><p>至此，我知道自己的能力不足，无法解决这个问题，所以跑去问前端了，然后前端百度一圈下来，和我说：”要不换个编辑器？”</p><p>我没有死心，继续搜索</p><h3 id="其他方式："><a href="#其他方式：" class="headerlink" title="其他方式："></a>其他方式：</h3><p>其实有其他的组织或者公司已经对于这种word的上传问题进行了解决</p><p><a href="https://blog.csdn.net/myfmyfmyfmyf/article/details/18399329" target="_blank" rel="noopener">ueditor文本编辑器支持ctrl+v图片文字样式</a></p><p>总结：</p><ol><li>思路不错，但是基本属于闭门造车，并且还要安装一个exe的Active控件，无法解决问题</li><li>自己重写一个Active控件兼容处理</li></ol><p><a href="http://blog.ncmem.com/wordpress/2019/08/07/%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%B2%98%E8%B4%B4word%E5%86%85%E5%AE%B9/" target="_blank" rel="noopener">富文本编辑器粘贴word内容</a></p><p>总结：</p><ol><li>其他公司二次开发，商用版本</li><li>个人版本要300多一年，比较麻烦</li><li>也是基于word的上传开发了插件，并且需要安装word上传的控件</li><li>感兴趣可以下载看下，localhost 和 “127.0.0.1” 可以正常上传和使用</li></ol><p><a href="https://www.cnblogs.com/yangzhi/p/3576527.html" target="_blank" rel="noopener">UEditor单独图片上传组件！适用IE,Chrome,firefox.</a></p><p>总结：</p><ol><li>不是一码事，针对上传操作做了一些兼容和优化而已，无法解决粘贴的问题</li></ol><p>官方Github:<br>问题描述：从word中复制的图片粘贴到UEditor中以后不能正常显示，work图片转存的按钮也不可用。</p><p>解决方案：参看 <a href="https://github.com/fex-team/ueditor/issues/2883" target="_blank" rel="noopener">ISSUE</a></p><p>总结：</p><ol><li>虽然官方的ISSUE 有人提过了，但是我访问404 啊。。。。</li><li>现在已经邮箱打扰，不知道给不给我这个菜鸟回复。。。。</li></ol><p>经过上面的尝试之后，发现还是没有特别好的解决方式，于是反馈给上级，不让问题留在自己手里。。。。。</p><p>连官方那边都找不到办法，有点万念俱灰，于是把问题往上抛了，八成需要换编辑器，又有的忙了。。。。</p><h2 id="分享："><a href="#分享：" class="headerlink" title="分享："></a>分享：</h2><p>说了这么多，其实我最想说的是，解决问题建议各位一定要留下文档记录，哪怕是如何解决的也好。</p><p>我是一个后端的开发人员，但是却被安排到前端去处理前端的兼容性问题，其实当时顶着非常大的压力的，客户催得紧，经理也天天问我进度，辛好公司有一位干过全栈的大神在，我的许多奇葩的样式错乱和按钮点击问题都是找他帮忙解决的，我对IE的各种奇怪现象其实挺恶心的，最后还是拖累同事陪我加班到十点解决上面的暴露内网的问题。在解决之后，我说了这么一句话：“我这辈子都不想碰到IE了”，但是那位全栈的同事却和我说：“怕什么，我连IE6的兼容性都搞过，不是照样搞好，这些问题解决之后，这就是属于你的经验，你不断积累经验，才能比别人更多优势”，这对我今年的工作态度产生了很多的工作影响，我不在思考为了工作而工作，而是思考为了自己而工作，希望我的话对大家有帮助。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011125214.png" alt=""></p><h1 id="最后总结："><a href="#最后总结：" class="headerlink" title="最后总结："></a>最后总结：</h1><p>就以我这个老掉牙的系统来说，目前百度的编辑器兼容和支持是最好的，实在不想再换别的浏览器，或者说换之前再挣扎一下，所以写下。</p><p>欢迎各位前端大神指教，帮助一下我这个后端临时抽来解决前端问题的人QAQ</p><p>如果有好的解决方式，欢迎拍砖</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      百度编辑器的一些踩坑以及我是如何看待和解决问题的
    
    </summary>
    
    
      <category term="工作" scheme="http://lazytime.site/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="前端" scheme="http://lazytime.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="百度编辑器" scheme="http://lazytime.site/tags/%E7%99%BE%E5%BA%A6%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>拥有一台surface pro3 是怎样的体验</title>
    <link href="http://lazytime.site/2020/10/07/%E6%8B%A5%E6%9C%89%E4%B8%80%E5%8F%B0surface-pro3-%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C/"/>
    <id>http://lazytime.site/2020/10/07/%E6%8B%A5%E6%9C%89%E4%B8%80%E5%8F%B0surface-pro3-%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C/</id>
    <published>2020-10-07T05:57:43.000Z</published>
    <updated>2020-10-07T06:00:30.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拥有一台surface-pro3-是怎样的体验"><a href="#拥有一台surface-pro3-是怎样的体验" class="headerlink" title="拥有一台surface pro3 是怎样的体验"></a>拥有一台surface pro3 是怎样的体验</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/SharedScreenshot.jpg" alt=""></p><h2 id="为什么要买surface-pro"><a href="#为什么要买surface-pro" class="headerlink" title="为什么要买surface pro"></a>为什么要买surface pro</h2><ol><li>个人还是感觉ipad适合拿来看电影，不适合做其他事情</li><li>不得不说微软的广告有点牛，看了就让人想买</li><li>这个板子的屏幕是一个三星的2K屏，实际使用观感确实不错，不论看电影还是看代码都是十分方便的。</li><li>笔记记录使用，个人是重度的windows使用</li><li>一个galgame的玩家怎么能没有一块windows的移动板子呢，不要太爽</li><li>之前买过一个东芝wta-8的windows板子，比较卡，算是捡漏失败</li></ol><h2 id="值不值得买？"><a href="#值不值得买？" class="headerlink" title="值不值得买？"></a>值不值得买？</h2><p>surfacepro3的屏幕非常脆，一摔基本算是拜拜了，所以个人使用非常的小心</p><p>不值得买一手，但是二手还是值得买来体验的一下的</p><p>如果你有经常出差的需求，买一个来文档做做文档记录还是不错的</p><p><font color='red'>千万不要买surface pro4，一堆问题</font></p><h2 id="先说说结论"><a href="#先说说结论" class="headerlink" title="先说说结论"></a>先说说结论</h2><ol><li>windows的平板体验真心非常糟糕，并且一定需要配合键鼠使用</li><li>作为轻办公使用，体验不错，谢谢word啥的还可以</li><li>最低配置玩lol没啥问题，还行</li><li>个人买来作为记笔记使用，比如可以在网上看视频的时候，在surface上面记笔记，这样就不需要频繁的切换到电子笔记上面进行笔记的输入，挺方便的</li><li>surface其实不算便携，但是总体上来说还是满足了自己的期望需求</li><li>作为笔记本不太行，但是作为一个便携的windows电脑，还是有一定的价值在的</li></ol><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>作为一个闲鱼的初级垃圾佬，surface 当然不值得买一手，当然得买二手货了，下面放出我的配置</p><p>个人的配置surfacepro4 8G内存 + 256G固态硬盘 闲鱼面交 1500 拿下，无磕碰，无维修。不算捡漏，算是安全上垒</p><h2 id="为什么不选择ipad"><a href="#为什么不选择ipad" class="headerlink" title="为什么不选择ipad"></a>为什么不选择ipad</h2><ol><li>Ipad 的生产力在ipad pro，但是价格有点承受不起</li><li>windows重度使用用户</li><li>在选择苹果的生态之前，需要有一台Iphone，当然，我也没有</li><li>个人的所有笔记和资料基本都保存在window的相关软件，同时也是简化学习成本（mac学习成本本身不是很高，后续考虑mbp）</li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这或许是我买的最后一块平板，以后可能考虑购买mbp，入苹果的生态圈</p><p>在闲鱼一年的时间，捡了几个还算不错的东西，这里分享一下</p><ol><li>kindle os2 1100 （天猫首发版本，卖家送了一堆原装配置和盒子，算是赚了）</li><li>surface pro 4</li><li>switch 日版 普通 1500带箱说</li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      这不是生产力，但是比较符合我的需求
    
    </summary>
    
    
      <category term="日常" scheme="http://lazytime.site/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="surface" scheme="http://lazytime.site/tags/surface/"/>
    
  </entry>
  
  <entry>
    <title>计算机程序的构造和解释-笔记(一)</title>
    <link href="http://lazytime.site/2020/10/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E8%A7%A3%E9%87%8A-%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://lazytime.site/2020/10/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E8%A7%A3%E9%87%8A-%E7%AC%94%E8%AE%B0-%E4%B8%80/</id>
    <published>2020-10-06T16:20:33.000Z</published>
    <updated>2020-10-06T16:23:21.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么要学计算机程序的构造与解释"><a href="#为什么要学计算机程序的构造与解释" class="headerlink" title="为什么要学计算机程序的构造与解释"></a>为什么要学计算机程序的构造与解释</h2><p><a href="http://blog.zhaojie.me/2009/07/recommended-reading-2-sicp.html" target="_blank" rel="noopener">http://blog.zhaojie.me/2009/07/recommended-reading-2-sicp.html</a> 很老的一个帖子上的推荐</p><ul><li>了解任何东西，思想最重要</li><li>抽象的思维，如何从简单到复杂</li><li>用不同的角度去考虑用咒语来实现功能</li><li>学习任何语言思想最重要的是思想本身，而scheme由于语言天生的自由性，可以极大的发挥程序员的思想空间</li><li>学习思考问题的方式，以及解题思路</li></ul><p><a href="https://www.jianshu.com/p/0e6365f4bb03?utm_campaign=shakespeare" target="_blank" rel="noopener">https://www.jianshu.com/p/0e6365f4bb03?utm_campaign=shakespeare</a> 简书上面做的一个回答</p><a id="more"></a><h2 id="一些感谢："><a href="#一些感谢：" class="headerlink" title="一些感谢："></a>一些感谢：</h2><ol><li>文科生学这个表表示虽然痛苦，但是会努力一步一步的学习</li><li>写出来是监督自己产出，这门语言非常深奥和困难，借助视频和书籍慢慢啃</li><li>一定要深入的理解黑盒抽象的思维，解题的思路大于题目本身的意义</li><li>持续更新，用文章输出来勉励和督促自己。</li></ol><h1 id="第一节课-上课笔记"><a href="#第一节课-上课笔记" class="headerlink" title="第一节课 上课笔记"></a>第一节课 上课笔记</h1><h2 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h2><ol><li>y^2 = x &amp;&amp; y&gt;= 0</li><li>亚历山大的连续平方根</li><li>知道规则不等于可以运用规则</li><li>复杂度控制<ol><li>黑盒抽象</li><li>猜测-&gt;验证结果</li></ol></li><li>寻找函数的不动点<ol><li>输入</li><li>输出</li></ol></li><li>线性组合的基本方法</li><li>构建大型程序<ol><li>流</li><li>OOP</li></ol></li></ol><h2 id="黑盒抽象"><a href="#黑盒抽象" class="headerlink" title="黑盒抽象"></a>黑盒抽象</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926145204.png?ynotemdtimestamp=1601964191688" alt="img"></p><h2 id="元语言抽象"><a href="#元语言抽象" class="headerlink" title="元语言抽象"></a>元语言抽象</h2><ol><li>数据抽象：如何组合程序的基本元素，构造更复杂的结构</li><li>过程抽象：如何将复杂的结构抽象出高层组件，提供更高维度的组合型</li><li>模块化，通过高抽象层次的组织方法，提高系统的模块性</li></ol><h2 id="约定接口"><a href="#约定接口" class="headerlink" title="约定接口"></a>约定接口</h2><ol><li>对应计算机的输入与输出</li><li>使用黑盒不需要知道内部结构，只需要知道约定俗称的接口的功能</li></ol><h2 id="在进行正式SCIP学习之前，需要安装环境"><a href="#在进行正式SCIP学习之前，需要安装环境" class="headerlink" title="在进行正式SCIP学习之前，需要安装环境"></a>在进行正式SCIP学习之前，需要安装环境</h2><h3 id="1-下载-DrRacket"><a href="#1-下载-DrRacket" class="headerlink" title="1. 下载 DrRacket"></a>1. 下载 DrRacket</h3><p>直接访问：<a href="https://racket-lang.org/" target="_blank" rel="noopener">https://racket-lang.org/</a></p><p>找到自己对应的内容下载页面</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926152047.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>下载完安装包之后，就可以进行安装操作了</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154022.png?ynotemdtimestamp=1601964191688" alt="img"></p><p>注意不要安装在C盘，一般习惯是直接切换一个盘符，直接安装到D盘即可</p><p>安装好之后，你在桌面上可能找不到你要的东西，所以请查看一下你的开始菜单（MAC不了解，这里只能说明windows的地址，抱歉）</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154221.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="3-DrRacket"><a href="#3-DrRacket" class="headerlink" title="3. DrRacket"></a>3. DrRacket</h3><p>这个界面怎么说呢，如果你用过C语言的编辑器（没错就是老掉牙的那个），其实感觉还行，但是如果经常使用中文的菜单可能不习惯</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154557.png?ynotemdtimestamp=1601964191688" alt="img"></p><p>没关系，在HELP里面，可以切换：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154650.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="4-安装-SICP-Package"><a href="#4-安装-SICP-Package" class="headerlink" title="4. 安装 SICP Package"></a>4. 安装 SICP Package</h3><ol><li>选择<code>File</code> -&gt; <code>Package Manger</code></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154758.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>在标红的地方，输入<code>sicp</code></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200929214408.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>下载比较建议挂个梯子下载，需要访问github进行安装包的下载</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155047.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>安装成功之后，大概类似这种界面</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155154.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="5-测试-SICP-package-安装成功与否"><a href="#5-测试-SICP-package-安装成功与否" class="headerlink" title="5. 测试 SICP package 安装成功与否"></a>5. 测试 SICP package 安装成功与否</h3><ol><li>首先在顶部输入<code>#lang sicp</code>然后<code>run</code>一下，如果看到下面的语言切换了，说明成功了。</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155408.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>接着输入如下的方法：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#lang sicp</span><br><span class="line">(define (increase x) (+ x 1))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155727.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>文件夹管理的包：<code>files-viewer</code>，类似插件，安装方式如下：</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926160110.png?ynotemdtimestamp=1601964191688" alt="img"></p><h2 id="Sicp简单了解"><a href="#Sicp简单了解" class="headerlink" title="Sicp简单了解"></a>Sicp简单了解</h2><h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(+ 3  8)</span><br><span class="line">(* 3 (+ 7 19.5))</span><br><span class="line">(+ (+ 5 4) (* 6 (- 9 4)))</span><br></pre></td></tr></table></figure><ol><li>3 + 8 的和</li><li>3 * (7 + 19.5)</li></ol><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>组织函数：</p><p>最简单的组织一个定义方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define (square x) (* x x))</span><br></pre></td></tr></table></figure><p>使用lambda表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define square (lambda (x) (* x x)) )</span><br></pre></td></tr></table></figure><p>定义的组织函数本身也可以作为内容的一部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (sq x) (* x x))</span><br><span class="line">  (define (sum x y) (* (sq x) (sq y)))</span><br></pre></td></tr></table></figure><p>这样设计的好处：</p><ol><li>可以让程序员灵活的搭配组织简单的程序形成复杂的程序</li><li>没有语言的约束，只有基本的语法规则</li></ol><p>坏处：</p><ol><li>你无法知道哪些是定义，哪些是引用</li><li>程序的可读性较差</li></ol><h4 id="条件语句："><a href="#条件语句：" class="headerlink" title="条件语句："></a>条件语句：</h4><h5 id="cond：可以理解为switch-p1-p2-p3-p4-p5-p6"><a href="#cond：可以理解为switch-p1-p2-p3-p4-p5-p6" class="headerlink" title="cond：可以理解为switch ( (p1 p2) (p3 p4) (p5 p6) )"></a>cond：可以理解为switch ( (p1 p2) (p3 p4) (p5 p6) )</h5><p>如果没有唯一的一个cond 的值，则cond 会没有定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cond (&lt;p1&gt; &lt;e1&gt;)</span><br><span class="line"></span><br><span class="line">    (&lt;p2&gt; &lt;e2&gt;)</span><br><span class="line"></span><br><span class="line">             .......</span><br><span class="line"></span><br><span class="line">            (&lt;pn&gt; &lt;en&gt;))</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">(cond (&lt;p1&gt; &lt;e1&gt;)</span><br><span class="line"></span><br><span class="line">    (&lt;p2&gt; &lt;e2&gt;)</span><br><span class="line"></span><br><span class="line">             .......</span><br><span class="line"></span><br><span class="line">            (else &lt;en&gt;))</span><br></pre></td></tr></table></figure><p>应用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(define (sq3 y)</span><br><span class="line">  ((cond ((&gt; y 0) y)</span><br><span class="line">  ((&#x3D; y 0) 0)</span><br><span class="line">  ((&lt; y 0) (- y)))))</span><br></pre></td></tr></table></figure><p>另一种写法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(define (sq5 k)</span><br><span class="line">  (cond ((&lt; k 0) (- k))</span><br><span class="line">  (else k)))</span><br></pre></td></tr></table></figure><h5 id="if：是一种语法糖"><a href="#if：是一种语法糖" class="headerlink" title="if：是一种语法糖:"></a>if：是一种语法糖:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(define (zz x)</span><br><span class="line">  (if (&gt; x 0)</span><br><span class="line">      (-1)</span><br><span class="line">      x))</span><br></pre></td></tr></table></figure><ol><li>把自己的作为结果，带入到函数当中求值返回</li></ol><h5 id="and-…"><a href="#and-…" class="headerlink" title="(and  ….. )"></a>(and <e1> ….. <e2>)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (test t) </span><br><span class="line">  (and  (&gt; t 5) (&lt; t 1)))</span><br></pre></td></tr></table></figure><h5 id="or-…"><a href="#or-…" class="headerlink" title="(or ….. )"></a>(or<e1> ….. <e2>)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (test t) </span><br><span class="line">  (or (&gt; t 5) (&lt; t 1)))</span><br></pre></td></tr></table></figure><h5 id="not-…"><a href="#not-…" class="headerlink" title="(not ….. )"></a>(not<e1> ….. <e2>)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (test t) </span><br><span class="line">  (not (&gt; t 5) (&lt; t 1)))</span><br></pre></td></tr></table></figure><h3 id="什么是正则序求值，什么是应用序求值"><a href="#什么是正则序求值，什么是应用序求值" class="headerlink" title="什么是正则序求值，什么是应用序求值"></a>什么是正则序求值，什么是应用序求值</h3><p>结论：Lisp使用的是应用序求值</p><p>正则序求值：使用过程组合，层层的代换展开运算，最后完全展开运算完成的这个过程就叫做正则序求值（可以理解为懒加载，在只有实际使用到参数的时候，才会带入参数运算）</p><p>应用序求值：应用序求值，先对每一个形式参数带入实际的值进行实际的运算操作，直到返回最终结果</p><p>为什么Lisp使用应用序求值？</p><ol><li>减少没有必要的计算，比如说正则序列求值，需要将一步完成的计算继续拆分为更多步骤</li><li>正则的结果不一定完全正确（特殊案例）</li></ol><h3 id="课后练习："><a href="#课后练习：" class="headerlink" title="课后练习："></a>课后练习：</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926164058.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="非常好的一个问题："><a href="#非常好的一个问题：" class="headerlink" title="非常好的一个问题："></a>非常好的一个问题：</h3><p>在定义的时候，如下面所示的括号有无的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(define (d) (* 5 5))</span><br><span class="line">(define d (* 5 5)) </span><br><span class="line">&gt; 输入 a &#x3D; 5</span><br><span class="line">结果 25</span><br><span class="line">&gt; 输入 d &#x3D; 5</span><br><span class="line">结果 25</span><br><span class="line">两者内部的细节区别：</span><br><span class="line">(define (d) (* 5 5)) -&gt; 运行的是一个复合公式</span><br><span class="line">(define d (* 5 5))  -&gt; 函数的结果</span><br></pre></td></tr></table></figure><h3 id="课后练习-1-2"><a href="#课后练习-1-2" class="headerlink" title="课后练习 1.2"></a>课后练习 1.2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#x2F; (+ 5 4 (-2 (-3 (+ 6 (&#x2F; 4 5))))) (* 3 (- 6 2) (- 2 7)))</span><br></pre></td></tr></table></figure><p>解决思路：其实挺简单的，画树就行</p><h3 id="课后练习-1-3"><a href="#课后练习-1-3" class="headerlink" title="课后练习 1.3"></a>课后练习 1.3</h3><p>题目：求较大两数的两树之和？</p><p>分析：</p><p>使用双层if判断</p><p>拆分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(define (maxVal3 x y z)</span><br><span class="line">  (if (&gt; x y)</span><br><span class="line">      (if (&gt; y z) (* x y)</span><br><span class="line">          (* x z))</span><br><span class="line">      (* z y)))</span><br></pre></td></tr></table></figure><h3 id="课后练习-1-4"><a href="#课后练习-1-4" class="headerlink" title="课后练习 1.4"></a>课后练习 1.4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define (a-plus-abs-b a b) ((if (&gt; b 0) + -) a b))</span><br></pre></td></tr></table></figure><ol><li>if (b &gt; 0)<ol><li>+ a b</li></ol></li><li>if(b &lt; 0)<ol><li>- a b</li></ol></li></ol><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><blockquote><p><strong>可知，由于(define (p) (p))， 如果出现了对（p）求值的情况， 就会陷入循环 scheme中的解释器本身就是应用序的，函数的求值会先对每一个参数进行求值， 　　　 然后把参数的值代入函数，若对(test 0 (p))使用应用序,那么（p）就会被求值， 　　 进入死循环中。而正则序是“完全展开而后规约”，在展开之后，由if条件判断，然后 　　 对0求值，由于（p）不会进行求值，最终函数可以正确返回0值。 （Guile中测试此程序确会进入死循环。）</strong></p><p>PS：这一段网上摘录的答案还不是很了解，还没有进行实际的验证</p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      计算机程序的构造和解释，
    
    </summary>
    
    
      <category term="-Scheme" scheme="http://lazytime.site/categories/Scheme/"/>
    
    
      <category term="书籍" scheme="http://lazytime.site/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>模仿游戏-观后感</title>
    <link href="http://lazytime.site/2020/10/07/%E6%A8%A1%E4%BB%BF%E6%B8%B8%E6%88%8F-%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>http://lazytime.site/2020/10/07/%E6%A8%A1%E4%BB%BF%E6%B8%B8%E6%88%8F-%E8%A7%82%E5%90%8E%E6%84%9F/</id>
    <published>2020-10-06T16:11:46.000Z</published>
    <updated>2020-10-06T16:15:06.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模仿游戏-观后感"><a href="#模仿游戏-观后感" class="headerlink" title="模仿游戏-观后感"></a>模仿游戏-观后感</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    在某次看技术文章的时候，从评论里面看到了这部电影，去搜了一下，发现可能真的是一部比较冷门的电影，看完之后，顿时感觉发现了宝藏，更进一步的讲，对于每一位从事技术行业，或者从事结果性工作的职业工作者，或者涉及单纯的普通人，都推荐好好品味这一部电影。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>二战期间，盟军苦于德国的秘密系统”英格玛“无法破译，政府召集了一批民间数学家、逻辑学家进行秘密破解工作，图灵（本尼迪克特·康伯巴奇 Benedict Cumberbatch 饰）就是其中之一。计划刚开始图灵遭到了以休（马修·古迪 Matthew Goode）为首的组员和领导的排斥，幸好军情处部长孟席斯（马克·斯特朗 Mark Strong 饰）帮助他立项研究破译密码的机器，而图灵则变成了负责人，招收了新的成员琼（凯拉·奈特莉 Keira Knightley）开始了艰难的工作。琼很快就迷上了图灵，由于她的帮助所有组员空前的团结，并于两年后成功破解德军的密码。图灵一度与琼订婚，但实际上他隐瞒了一个秘密，因为这个秘密他也遭受了非人的待遇……<br>　　本片改编自安德鲁·霍奇斯编著的《艾伦·图灵传》，上映后获得了第87届奥斯卡最佳改编剧本奖。 <a href="https://movie.douban.com/help/movie#t0-qs" target="_blank" rel="noopener">©豆瓣</a></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><ol><li>不论多么伟大的人物，人们永远看见他们想看见的：荣耀、辉煌，但是即使是绝世天才，也永远看不到他们背后的努力和奋斗。</li><li>天才和疯子可能真的是有一线之差。</li><li>一个成功的背后可能只是猜测，甚至只是源于相信的力量。</li><li>固执的坚守自己的想法可能比想象中要难上太多。</li><li>在某些情况下，不认为自己孤独的人，可能才是世界上最孤独的人</li><li>人和机器的区别到底是什么，正如模仿游戏的标题，人可以做出选择，但是机器却不可以。</li></ol><h2 id="推荐度"><a href="#推荐度" class="headerlink" title="推荐度"></a>推荐度</h2><p>4 星</p><h2 id="说说收获"><a href="#说说收获" class="headerlink" title="说说收获"></a>说说收获</h2><ol><li>虽然我是恐同的人，但是看了电影之后，我有了些许的改观</li><li>人们往往只看中结果，却无人会去关注其中的过程和艰辛</li><li>非凡的人终究会被世人铭记，只是时间的早晚而已</li><li>要造就非凡的事业，需要非凡的努力，当然，在此之前，需要一颗非凡的头脑</li><li>拥有一个真正理解并且支持你的朋友，可能是世界上除开父母之外，最值得珍惜的财富。</li><li>或许每一个技术人员，都是孤独并且可悲的人，但是从来不自知。</li></ol><h2 id="精句"><a href="#精句" class="headerlink" title="精句"></a>精句</h2><ol><li>人类惧怕和自己不一样的东西，所以制定了这样那样的规定。</li><li>有时候，正是那些人们认为的无用之人，成就了无人所成之事。</li><li>喜欢暴力吗？因为它让人感觉不错。人们发现暴力带来深深的满足感，但除去这些满足感，暴力行为会变得非常空洞。</li><li>你需要我大于我需要你。</li><li>撒谎最煎熬的时候就是明知道别人在等你撒谎的时候。如果别人在等着你撒谎。你不能只是给他们制造一个谎言。</li><li>不懂你的人为你的成就喝彩，懂你的人为你的付出心疼。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>希望世界上的所有程序员，都好好的过好这灿烂的人生，除开编程之外，多出去看看瞧一瞧，挣再多的钱，也抵不过进一次医院，祝愿每一位工作者能去寻找并且实现自己的美好梦想。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      或许每一个技术人员，都是孤独并且可悲的人，但是从来不自知
    
    </summary>
    
    
      <category term="程序人生" scheme="http://lazytime.site/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="电影" scheme="http://lazytime.site/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>JDK 1.8 LAMBADA表达式</title>
    <link href="http://lazytime.site/2020/09/25/JDK-1-8-LAMBADA%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://lazytime.site/2020/09/25/JDK-1-8-LAMBADA%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-09-25T15:57:19.000Z</published>
    <updated>2020-09-25T15:59:15.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lambada-表达式资料参考"><a href="#Lambada-表达式资料参考" class="headerlink" title="Lambada 表达式资料参考"></a>Lambada 表达式资料参考</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>现在的工作当中对于jdk1.8的lambada表达式使用越来越频繁，但是对于内部的一些细节却不是特别的清楚</p><p>这里借鉴了几篇博客，对比了之后对于博客到推荐进行了排序，同时也整理了这几篇博客提到的个人觉得比较重要到部分进行了验证</p><a id="more"></a><h2 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h2><p><strong><a href="https://objcoding.com/2019/03/04/lambda/" target="_blank" rel="noopener">https://objcoding.com/2019/03/04/lambda/</a></strong> 一篇博客，介绍的比较到位，虽然文章很长但是通篇看完完全没有想点右上角的冲动</p><h2 id="第二篇"><a href="#第二篇" class="headerlink" title="第二篇"></a>第二篇</h2><p><a href="https://juejin.im/post/5abc9ccc6fb9a028d6643eea" target="_blank" rel="noopener">https://juejin.im/post/5abc9ccc6fb9a028d6643eea</a></p><p>关于lambada的十个案例</p><h3 id="重点部分："><a href="#重点部分：" class="headerlink" title="重点部分："></a>重点部分：</h3><h4 id="Q：如何在lambda表达式中加入谓词？"><a href="#Q：如何在lambda表达式中加入谓词？" class="headerlink" title="Q：如何在lambda表达式中加入谓词？"></a>Q：如何在lambda表达式中加入谓词？</h4><h3 id="A：解答"><a href="#A：解答" class="headerlink" title="A：解答"></a>A：解答</h3><p>首先代码如下，按照个人理解，其实本质就是把用户的操作“拼接”，包括筛选，合并等操作，依赖<code>java.util.function.Predicate</code>此接口实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 甚至可以用and()、or()逻辑函数来合并Predicate，</span><br><span class="line">&#x2F;&#x2F; 例如要找到所有以J开始，长度为四个字母的名字，你可以合并两个Predicate并传入</span><br><span class="line">Predicate&lt;String&gt; startsWithJ &#x3D; (n) -&gt; n.startsWith(&quot;J&quot;);</span><br><span class="line">Predicate&lt;String&gt; fourLetterLong &#x3D; (n) -&gt; n.length() &#x3D;&#x3D; 4;</span><br><span class="line">names.stream()</span><br><span class="line">    .filter(startsWithJ.and(fourLetterLong))</span><br><span class="line">    .forEach((n) -&gt; System.out.print(&quot;nName, which starts with &#39;J&#39; and four letter long is : &quot; + n));</span><br></pre></td></tr></table></figure><h2 id="第三篇"><a href="#第三篇" class="headerlink" title="第三篇"></a>第三篇</h2><p><a href="https://segmentfault.com/a/1190000009186509" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009186509</a></p><p>关于lambada的一个详解</p><blockquote><p>版权声明：本文由<em>吴仙杰</em>创作整理，转载请注明出处：<a href="https://segmentfault.com/a/1190000009186509" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009186509</a></p></blockquote><h2 id="第四篇"><a href="#第四篇" class="headerlink" title="第四篇"></a>第四篇</h2><p><a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html" target="_blank" rel="noopener">https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html</a></p><p>Oracale官方案例</p><p><a href="https://blog.csdn.net/renfufei/article/details/24600507" target="_blank" rel="noopener">https://blog.csdn.net/renfufei/article/details/24600507</a></p><p>比较久远到一个文章，更多是批判的角度看待lambada</p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ol><li>介绍了stream 的基本概念<ol><li>简写的依据 - 函数接口 和类型推断机制</li></ol></li><li>函数式编程和匿名内部类的区别<ol><li>使用上区别</li><li>JVM上的本质区别</li></ol></li><li>JDK8 对于容器到扩展方法，其中部分是为了配合函数式编程而出现的<ol><li>Collections</li><li>Map</li></ol></li><li>Stream API 介绍stream 的常用方法以及基本特性<ol><li><code>sort()</code></li><li></li></ol></li><li>stream内部实现的简单了解<ol><li>用户的操作如何记录？</li><li>操作如何叠加？</li><li>叠加之后的操作如何执行？</li><li>执行后的结果（如果有）在哪里？</li></ol></li></ol><h2 id="重点部分"><a href="#重点部分" class="headerlink" title="重点部分"></a>重点部分</h2><h3 id="Q：匿名内部类和lambada表达式的关键区别"><a href="#Q：匿名内部类和lambada表达式的关键区别" class="headerlink" title="Q：匿名内部类和lambada表达式的关键区别"></a>Q：匿名内部类和lambada表达式的关键区别</h3><h3 id="A-回答"><a href="#A-回答" class="headerlink" title="A 回答"></a>A 回答</h3><h4 id="this的指向对象"><a href="#this的指向对象" class="headerlink" title="this的指向对象"></a><strong>this</strong>的指向对象</h4><ul><li>匿名内部类：<code>this</code> 指向的是匿名内部类的所属对象</li><li>lambada：<code>this</code> 指向当前运行的类，也就是当前运行的对象</li></ul><h4 id="jvm层面"><a href="#jvm层面" class="headerlink" title="jvm层面"></a>jvm层面</h4><ul><li>匿名内部类：会生成一个 <code>$1</code>到匿名内部类的对象，使用<code>new</code>指令生成对象并且执行</li><li>lambada：会生成一个私有方法，使用<code>invokedynamic</code>指令调用</li></ul><p>匿名内部类的编译过程</p><p>为了更好到理解，自己做了一个实验</p><ol><li>创建一个基本的匿名内部类到方法</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200505103819.png?ynotemdtimestamp=1601045594695" alt="img"></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 匿名内部类和lambada的区别</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void test1() throws InterruptedException &#123;</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                String name &#x3D; Thread.currentThread().getName();</span><br><span class="line">                System.err.println(name + &quot; is run as a thread &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>查看classes ，可以看到编译后的class 文件如下，看到明显多出来一个<code>LambadaTest1$1.class</code> 这事啥东西？</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200505103923.png?ynotemdtimestamp=1601045594695" alt="img"></p><ol><li>打开<code>cmd</code>使用<code>cd</code>命令移动到改目录下面</li></ol><blockquote><p>小技巧1：</p><p>编译后到classes 如果想要直接查看class 文件的反编译到内容，可以直接把class 文件拖拽到 idea 里面进行打开，就可以看到class 到反编译内容<del>~</del></p></blockquote><ol><li>反编译的内容如下，可以看到匿名内部类的编译后的内容经过解释之后，<strong>实际上是创建了一个匿名内部类的对象</strong></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200505104143.png?ynotemdtimestamp=1601045594695" alt="img"></p><ol><li>在第一步的基础上，我们除了打印线程的名称，还可以打印<code>this</code> 看一下匿名内部类的this 是啥东西，我打印之后得到到匿名内部类的 this 如下: <code>com.jdk.lambada.LambadaTest1$1@2fd014c6</code></li></ol><blockquote><p>小技巧2：</p><p>如何使用javap 查看java的汇编指令呢？</p><p>以上面到案例为例：</p><ol><li>打开<code>cmd</code>，进入对应的class目录，我们可以执行<code>javap &lt;options&gt; &lt;classes&gt;</code>的格式进行翻译操作</li><li>执行<code>javap -c -l -p xxx</code>，得到结果:</li></ol><p>选项的含义？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-help  --help  -?        输出此用法消息</span><br><span class="line">-version                 版本信息，其实是当前javap所在jdk的版本信息，不是class在哪个jdk下生成的。</span><br><span class="line">-v  -verbose             输出附加信息（包括行号、本地变量表，反汇编等详细信息）</span><br><span class="line">-l                         输出行号和本地变量表</span><br><span class="line">-public                    仅显示公共类和成员</span><br><span class="line">-protected               显示受保护的&#x2F;公共类和成员</span><br><span class="line">-package                 显示程序包&#x2F;受保护的&#x2F;公共类 和成员 (默认)</span><br><span class="line">-p  -private             显示所有类和成员</span><br><span class="line">-c                       对代码进行反汇编</span><br><span class="line">-s                       输出内部类型签名</span><br><span class="line">-sysinfo                 显示正在处理的类的系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">-constants               显示静态最终常量</span><br><span class="line">-classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">-bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure></blockquote><ol><li>为了更进一步了解底层的jvm指令执行，使用<code>javap -c -l -p xxx</code>反编译结果如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Compiled from &quot;LambadaTest1.java&quot;</span><br><span class="line">public class com.jdk.lambada.LambadaTest1 &#123;</span><br><span class="line">  public com.jdk.lambada.LambadaTest1();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 11: 0</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       5     0  this   Lcom&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1;</span><br><span class="line"></span><br><span class="line">  public void test1() throws java.lang.InterruptedException;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  &#x2F;&#x2F; class java&#x2F;lang&#x2F;Thread</span><br><span class="line">       3: dup</span><br><span class="line">       4: new           #3                  &#x2F;&#x2F; class com&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1$1</span><br><span class="line">       7: dup</span><br><span class="line">       8: aload_0</span><br><span class="line">       9: invokespecial #4                  &#x2F;&#x2F; Method com&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1$1.&quot;&lt;init&gt;&quot;:(Lcom&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1;)V</span><br><span class="line">      12: invokespecial #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.&quot;&lt;init&gt;&quot;:(Ljava&#x2F;lang&#x2F;Runnable;)V</span><br><span class="line">      15: invokevirtual #6                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.start:()V</span><br><span class="line">      18: ldc2_w        #7                  &#x2F;&#x2F; long 2000l</span><br><span class="line">      21: invokestatic  #9                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.sleep:(J)V</span><br><span class="line">      24: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 19: 0</span><br><span class="line">      line 24: 15</span><br><span class="line">      line 25: 18</span><br><span class="line">      line 27: 24</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0      25     0  this   Lcom&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，匿名内部类使用了 <code>new</code>到指令来实现匿名对象的生成，调用<code>invokespecial</code>执行内部的<code>run</code>方法</p><p>接下来我们看下Lambada简写上面的匿名内部类代码</p><p>lambada表达式编译过程</p><ol><li>和上面的流程类似，这里直接略过一些不必要的点，代码如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @program: lambada</span><br><span class="line"> * @description: 测试jdk1.8</span><br><span class="line"> * @author: zhaoxudong</span><br><span class="line"> * @create: 2020-05-05 11:42</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            System.err.println(&quot; test&quot; + Thread.currentThread().getName() + &quot; is run as a thread &quot; );</span><br><span class="line">        &#125;).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(5L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>同样的，我们先把class文件放到<code>idea</code>下面查看反编译之后到代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="line">&#x2F;&#x2F; (powered by Fernflower decompiler)</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public Test() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        (new Thread(() -&gt; &#123;</span><br><span class="line">            System.err.println(&quot; test&quot; + Thread.currentThread().getName() + &quot; is run as a thread &quot;);</span><br><span class="line">        &#125;)).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(5L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>打开class所在目录，我们会发现lambada并没有像匿名内部类一样创建了一个$1 的对象，那么他是如何实现的？</li><li>我们使用<code>javap -c -l -p xxx</code> 翻译class 得到到结果如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">  public Test();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 9: 0</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       5     0  this   LTest;</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]) throws java.lang.InterruptedException;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  &#x2F;&#x2F; class java&#x2F;lang&#x2F;Thread</span><br><span class="line">       3: dup</span><br><span class="line">       4: invokedynamic #3,  0              &#x2F;&#x2F; InvokeDynamic #0:run: ()Ljava&#x2F;lang&#x2F;Runnable;</span><br><span class="line">       9: invokespecial #4                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.&quot;&lt;init&gt;&quot;:(Ljava&#x2F;lang&#x2F;Runnable;)V</span><br><span class="line">      12: invokevirtual #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.start:()V</span><br><span class="line">      15: getstatic     #6                  &#x2F;&#x2F; Field java&#x2F;util&#x2F;concurrent&#x2F;TimeUnit.SECONDS:Ljava&#x2F;util&#x2F;concurrent&#x2F;TimeUnit;</span><br><span class="line">      18: ldc2_w        #7                  &#x2F;&#x2F; long 5l</span><br><span class="line">      21: invokevirtual #9                  &#x2F;&#x2F; Method java&#x2F;util&#x2F;concurrent&#x2F;TimeUnit.sleep:(J)V</span><br><span class="line">      24: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 12: 0</span><br><span class="line">      line 14: 12</span><br><span class="line">      line 15: 15</span><br><span class="line">      line 16: 24</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0      25     0  args   [Ljava&#x2F;lang&#x2F;String;</span><br><span class="line"></span><br><span class="line">  private static void lambda$main$0();</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #10                 &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.err:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">       3: new           #11                 &#x2F;&#x2F; class java&#x2F;lang&#x2F;StringBuilder</span><br><span class="line">       6: dup</span><br><span class="line">       7: invokespecial #12                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">      10: ldc           #13                 &#x2F;&#x2F; String  test</span><br><span class="line">      12: invokevirtual #14                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      15: invokestatic  #15                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.currentThread:()Ljava&#x2F;lang&#x2F;Thread;</span><br><span class="line">      18: invokevirtual #16                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.getName:()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">      21: invokevirtual #14                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      24: ldc           #17                 &#x2F;&#x2F; String  is run as a thread</span><br><span class="line">      26: invokevirtual #14                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      29: invokevirtual #18                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.toString:()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">      32: invokevirtual #19                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">      35: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 13: 0</span><br><span class="line">      line 14: 35</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比匿名内部类和lambada表达式可以明显发现，Lambada的不同在于使用了<code>私有方法</code> 加上 <code>invokedynamic</code>指令进行编译，而不会产生一个匿名内部类的对象class文件。</p><ol><li>我们可以看下Lambada的 <code>this</code>打印的是什么东西</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            System.err.println(&quot; test&quot; + Thread.currentThread().getName() + &quot; is run as a thread &quot; );</span><br><span class="line">            System.err.println(&quot;lambada this is &#x3D; &quot; + this);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(5L);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>这里惊讶的发现,编译居然无法通过！！！！</strong></p><p>我们再对比使用匿名内部类的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    new Thread(new Runnable() &#123;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            String name &#x3D; Thread.currentThread().getName();</span><br><span class="line">            System.err.println(name + &quot; is run as a thread &quot; + this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    Thread.sleep(2000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方式可以正常编译通过并且运行，由此我们可以发现lambada的<code>this</code> 和匿名内部类的 <code>this</code>有着本质的区别</p><ol><li>我们无法使用正常到方式打印this, 我们换一种方式，这里稍微调整代码，最后的代码如下:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @program: lambada</span><br><span class="line"> * @description: 测试jdk1.8</span><br><span class="line"> * @author: zhaoxudong</span><br><span class="line"> * @create: 2020-05-05 11:42</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    Runnable run &#x3D; () -&gt;&#123;</span><br><span class="line">        System.err.println(this);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new Thread(new Test().run).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(5L);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上面的代码，可以得到结果<code>test</code></p><blockquote><p>在匿名内部类如何得到结果呢？</p><p>可以看下面的代码，结果依然是打印 <code>test</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @program: smartframwork</span><br><span class="line"> * @description: lambada表达式学习1</span><br><span class="line"> * @author: zhaoxudong</span><br><span class="line"> * @create: 2020-05-05 10:29</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class LambadaTest1 &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                String name &#x3D; Thread.currentThread().getName();</span><br><span class="line">                System.err.println(name + &quot; is run as a thread &quot; + this);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public String toString() &#123;</span><br><span class="line">                return &quot;test&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;LambadaTest1&#123;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><p>匿名内部类：<code>this</code> 指向的是匿名内部类的所属对象（<strong>也就是Runnable</strong>）</p><p>lambada：<code>this</code> 指向当前运行的类（<strong>也就是Test</strong>），也就是当前运行的对象</p><h3 id="Q：Java8里面的java-util-Spliterator接口有什么用？"><a href="#Q：Java8里面的java-util-Spliterator接口有什么用？" class="headerlink" title="Q：Java8里面的java.util.Spliterator接口有什么用？"></a>Q：Java8里面的java.util.Spliterator接口有什么用？</h3><h3 id="A：参考博客"><a href="#A：参考博客" class="headerlink" title="A：参考博客"></a>A：参考博客</h3><p><a href="https://segmentfault.com/q/1010000007087438" target="_blank" rel="noopener">思否</a></p><p>一句话概括：为了多线程并行遍历元素而设计到迭代器</p><p>版本：JDK1.8</p><p>目的：简化复杂到并行迭代程序编写</p><p>参考：Java7的Fork/Join(分支/合并)框架</p><p><a href="https://blog.csdn.net/silver9886/article/details/87917823" target="_blank" rel="noopener">CSDN上面到解答</a></p><p><a href="https://ifeve.com/java8-stream-中spliterator的使用一/" target="_blank" rel="noopener">JAVA8 stream 中Spliterator的使用(一)</a></p><p><a href="https://ifeve.com/java8-stream-中spliterator的使用二/" target="_blank" rel="noopener">JAVA8 stream 中Spliterator的使用(二)</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      使用lambada表达式处理
    
    </summary>
    
    
      <category term="JDK1.8" scheme="http://lazytime.site/categories/JDK1-8/"/>
    
    
      <category term="LAMBAD" scheme="http://lazytime.site/tags/LAMBAD/"/>
    
  </entry>
  
  <entry>
    <title>Mindoc 安装与部署</title>
    <link href="http://lazytime.site/2020/09/25/Mindoc-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <id>http://lazytime.site/2020/09/25/Mindoc-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</id>
    <published>2020-09-25T15:49:40.000Z</published>
    <updated>2020-09-25T15:50:32.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mindoc-安装与部署"><a href="#Mindoc-安装与部署" class="headerlink" title="Mindoc 安装与部署"></a>Mindoc 安装与部署</h1><p>地址： <a href="https://www.iminho.me/wiki/docs/mindoc/mindoc-summary.md" target="_blank" rel="noopener">https://www.iminho.me/wiki/docs/mindoc/mindoc-summary.md</a></p><h2 id="第一步-下载可执行文件"><a href="#第一步-下载可执行文件" class="headerlink" title="第一步 下载可执行文件"></a>第一步 下载可执行文件</h2><p>请从 <a href="https://github.com/lifei6671/mindoc/releases" target="_blank" rel="noopener">https://github.com/lifei6671/mindoc/releases</a> 下载最新版的可执行文件，一般文件名为 mindoc_windows_amd.zip .</p><h2 id="第二步-解压压缩包"><a href="#第二步-解压压缩包" class="headerlink" title="第二步 解压压缩包"></a>第二步 解压压缩包</h2><p>请将刚才下载的文件解压，推荐使用好压解压到任意目录。建议不用用中文目录名称。</p><h2 id="第三步-创建数据库"><a href="#第三步-创建数据库" class="headerlink" title="第三步 创建数据库"></a>第三步 创建数据库</h2><p>如果你使用的 mysql 数据库，请创建一个编码为utf8mb4格式的数据库，如果没有GUI管理工具，推荐用下面的脚本创建：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mindoc_db  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><hr><p>如果你使用的是 sqlite 数据库，请将 conf/app.conf 中的数据库配置成如下,系统会自动创建 sqlite 数据库文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db_adapter&#x3D;sqlite3</span><br><span class="line">db_database&#x3D;mindoc_db</span><br></pre></td></tr></table></figure><h2 id="第四步-配置数据库"><a href="#第四步-配置数据库" class="headerlink" title="第四步 配置数据库"></a>第四步 配置数据库</h2><p>请将刚才解压目录下 conf/app.conf.example 重名为 app.conf。同时配置如下节点：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库配置</span></span><br><span class="line"><span class="attr">db_adapter</span>=mysql</span><br><span class="line"><span class="comment">#mysql数据库的IP</span></span><br><span class="line"><span class="attr">db_host</span>=<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql数据库的端口号一般为3306</span></span><br><span class="line"><span class="attr">db_port</span>=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#刚才创建的数据库的名称</span></span><br><span class="line"><span class="attr">db_database</span>=mindoc_db</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问数据库的账号和密码</span></span><br><span class="line"><span class="attr">db_username</span>=root</span><br><span class="line"><span class="attr">db_password</span>=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>在 MinDoc 根目录下使用命令行执行如下命令，用于初始化数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mindoc_windows_amd64.exe install</span><br></pre></td></tr></table></figure><p>稍等一分钟，程序会自动初始化数据库，并创建一个超级管理员账号：<code>admin</code> 密码：<code>123456</code></p><h2 id="第五步-启动程序"><a href="#第五步-启动程序" class="headerlink" title="第五步 启动程序"></a>第五步 启动程序</h2><p>如果你设置了环境变量，但是没有重启电脑，请在cmd命令行启动 mindoc_windows_amd64.exe 程序。</p><p>如果你设置了环境变量，并且重启了电脑，双击 mindoc_windows_amd64.exe 即可。</p><p>此时访问 <a href="http://localhost:8181/" target="_blank" rel="noopener">http://localhost:8181</a> 就能访问 MinDoc 了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      使用mindoc的一次实践
    
    </summary>
    
    
      <category term="日常" scheme="http://lazytime.site/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="文档" scheme="http://lazytime.site/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch Linux安装教程</title>
    <link href="http://lazytime.site/2020/08/29/elasticsearch-Linux%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://lazytime.site/2020/08/29/elasticsearch-Linux%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2020-08-29T15:13:52.000Z</published>
    <updated>2020-08-29T15:21:43.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="elasticsearch-Linux安装教程"><a href="#elasticsearch-Linux安装教程" class="headerlink" title="elasticsearch Linux安装教程"></a>elasticsearch Linux安装教程</h1><a id="more"></a><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol><li><p>安装Jdk环境</p><ol><li>省略</li></ol></li><li><p>下载官方的es包放在usr目录下</p></li><li><p>在/usr目录下建立一个文件夹</p><p><strong>注意这里不能使用root用户进行安装！！！</strong></p><p><strong>注意这里不能使用root用户进行安装！！！</strong></p><p><strong>注意这里不能使用root用户进行安装！！！</strong></p><ol><li><p>groupadd elsearch</p></li><li><p>useradd elsearch -g elsearch</p><p>//该命令是更改该文件夹下所属的用户组的权限</p></li><li><p>chown -R elsearch:elsearch elasticsearch-5.6.3</p></li></ol></li><li><p>修改config 目录下的yml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。</span><br><span class="line"></span><br><span class="line">cluster.name: my-es</span><br><span class="line"></span><br><span class="line">\#节点名称</span><br><span class="line"></span><br><span class="line">node.name: node-1  </span><br><span class="line"></span><br><span class="line">\#设置索引数据的存储路径</span><br><span class="line"></span><br><span class="line">path.data: &#x2F;usr&#x2F;export&#x2F;servers&#x2F;data  </span><br><span class="line"></span><br><span class="line">\#设置日志的存储路径</span><br><span class="line"></span><br><span class="line">path.logs: &#x2F;usr&#x2F;export&#x2F;servers&#x2F;logs  </span><br><span class="line"></span><br><span class="line">\#设置当前的ip地址,通过指定相同网段的其他节点会加入该集群中</span><br><span class="line"></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line">\#设置对外服务的http端口</span><br><span class="line"></span><br><span class="line">http.port: 9200  </span><br><span class="line"></span><br><span class="line">\#设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点</span><br><span class="line"></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;node-1&quot;]</span><br><span class="line"></span><br><span class="line">记得修改下列两条</span><br><span class="line">bootstrap.memory_lock: false</span><br><span class="line">bootstrap.system_call_filter: false</span><br></pre></td></tr></table></figure></li></ol><p>配置elasticsearch 用户以及权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;usr&#x2F;export&#x2F;servers&#x2F;data</span><br><span class="line"></span><br><span class="line">mkdir -p &#x2F;usr&#x2F;export&#x2F;servers&#x2F;logs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chown -R es:es &#x2F;usr&#x2F;export&#x2F;servers&#x2F;elasticsearch</span><br><span class="line"></span><br><span class="line">chown -R es:es &#x2F;usr&#x2F;export&#x2F;servers&#x2F;data</span><br><span class="line"></span><br><span class="line">chown -R es:es &#x2F;usr&#x2F;export&#x2F;servers&#x2F;logs</span><br></pre></td></tr></table></figure><ol><li><p>切换用户 su es</p></li><li><p>集群启动 bin/elasic。</p></li><li><p><strong>报错！！</strong></p><blockquote><p>1.[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536] 意思是说你的进程不够用了</p><p>解决办法 切到root 用户：进入到security目录下的limits.conf；执行命令 在文件的末尾添加下面的参数值：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> vim &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br><span class="line">前面的*符号必须带上，然后重新启动就可以了。执行完成后可以使用命令 ulimit -n 查看进程数</span><br></pre></td></tr></table></figure><blockquote><p>2.[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] 需要修改系统变量的最大值了</p><p>解决方案：切换到root用户修改配置sysctl.conf 增加配置值： vm.max_map_count=655360</p><p>执行命令 sysctl -p 这样就可以了，然后重新启动ES服务 就可以了</p></blockquote><blockquote><p>3.[3] snamp centerOs6 不支持 snamp 需要在 yml 中修改配置</p><p>解决方案</p><p>bootstrap.system_call_filter: false</p></blockquote></li></ol><h2 id="基本错误处理"><a href="#基本错误处理" class="headerlink" title="基本错误处理"></a>基本错误处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">原因：无法创建本地文件问题,用户最大可创建文件数太小</span><br><span class="line"></span><br><span class="line">解决方案：切换到root用户，编辑limits.conf配置文件，  添加类似如下内容：</span><br><span class="line"></span><br><span class="line">vi &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line"></span><br><span class="line">添加如下内容: 注意*不要去掉了</span><br><span class="line"></span><br><span class="line">\* soft nofile 65536</span><br><span class="line"></span><br><span class="line">\* hard nofile 131072</span><br><span class="line"></span><br><span class="line">备注：* 代表Linux所有用户名称（比如  hadoop）</span><br><span class="line"></span><br><span class="line">需要保存、退出、重新登录才可生效。</span><br><span class="line">原因：无法创建本地线程问题,用户最大可创建线程数太小</span><br><span class="line"></span><br><span class="line">解决方案：切换到root用户，进入limits.d目录下，修改90-nproc.conf 配置文件。</span><br><span class="line"></span><br><span class="line">vi &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;90-nproc.conf</span><br><span class="line"></span><br><span class="line">找到如下内容：</span><br><span class="line"></span><br><span class="line">\* soft nproc 1024</span><br><span class="line"></span><br><span class="line">\#修改为</span><br><span class="line"></span><br><span class="line">\* soft nproc 4096</span><br><span class="line">原因：最大虚拟内存太小</span><br><span class="line"></span><br><span class="line">每次启动机器都手动执行下。</span><br><span class="line"></span><br><span class="line">root用户执行命令：</span><br><span class="line"></span><br><span class="line">执行命令：sysctl -w  vm.max_map_count&#x3D;262144</span><br><span class="line">sudo sysctl -w vm.max_map_count&#x3D;262144</span><br><span class="line">查看修改结果命令：sysctl -a|grep  vm.max_map_count  看是否已经修改</span><br><span class="line"></span><br><span class="line">永久性修改策略：</span><br><span class="line"></span><br><span class="line">echo &quot;vm.max_map_count&#x3D;262144&quot; &gt;&gt;  &#x2F;etc&#x2F;sysctl.echo </span><br><span class="line">或者</span><br><span class="line">&#x2F;&#x2F; 拷贝一本临时文件并且覆盖</span><br><span class="line">echo &quot;vm.max_map_count&#x3D;262144&quot; &gt;&gt; &#x2F;tmp&#x2F;system_sysctl.conf</span><br><span class="line">mv &#x2F;tmp&#x2F;system_sysctl.conf &#x2F;etc&#x2F;sysctl.conf</span><br></pre></td></tr></table></figure><p>更多问题自行百度解决…</p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><blockquote><p>查看集群状态：localhost:9200/_cat/health?v 查看索引列表：localhost:9200/_cat/indices?v</p></blockquote><p>添加一个索引: curl -XPUT ‘<a href="http://xn--IP-wz2cm89g:9200/dept/employee/32" target="_blank" rel="noopener">http://主机IP:9200/dept/employee/32</a>‘ -d ‘{ “empname”: “emp32”}’</p><h3 id="配置重点"><a href="#配置重点" class="headerlink" title="配置重点:"></a>配置重点:</h3><p><strong>centeros 6 版本执行下列方法</strong></p><ol><li>开放Linux 9200 端口</li><li>vi /etc/sysconfig/iptables</li><li>加入内容并保存：-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT</li><li>/etc/init.d/iptables restart</li><li>/sbin/iptables -L -n</li></ol><h1 id="安装head-插件"><a href="#安装head-插件" class="headerlink" title="安装head 插件"></a>安装head 插件</h1><h3 id="1-解压插件-如果不存在需要安装解压软件"><a href="#1-解压插件-如果不存在需要安装解压软件" class="headerlink" title="1.解压插件 (如果不存在需要安装解压软件)"></a>1.解压插件 (如果不存在需要安装解压软件)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zip unzip</span><br></pre></td></tr></table></figure><h3 id="2-安装nodeJS支持-执行如下命令"><a href="#2-安装nodeJS支持-执行如下命令" class="headerlink" title="2.安装nodeJS支持,执行如下命令"></a>2.安装nodeJS支持,执行如下命令</h3><h2 id="具体参考链接"><a href="#具体参考链接" class="headerlink" title="具体参考链接"></a>具体参考链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. curl -sL https:&#x2F;&#x2F;rpm.nodesource.com&#x2F;setup_8.x | bash -</span><br><span class="line"></span><br><span class="line">2. yum install -y nodejs</span><br><span class="line"></span><br><span class="line">3. npm install grunt --save-dev</span><br><span class="line"></span><br><span class="line">4. 修改head目录下面的 .&#x2F;_site&#x2F;app.js</span><br><span class="line"></span><br><span class="line">   （无法安装请查看nodejs安装教程）</span><br><span class="line">5. npm install phantomjs-prebuilt@2.1.16 --ignore-scripts(必要依赖)</span><br><span class="line"></span><br><span class="line">在 head 根目录下执行: npm run start</span><br><span class="line"></span><br><span class="line">6. 如果连接不上需要执行下列命令</span><br><span class="line">    vi el&#x2F;config&#x2F;elasticsearch.yml</span><br><span class="line">    </span><br><span class="line">    添加如下</span><br><span class="line">    允许远程访问</span><br><span class="line">    http.cors.enabled: true</span><br><span class="line">    http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure><h3 id="3-app-js修改大概位置"><a href="#3-app-js修改大概位置" class="headerlink" title="3.app.js修改大概位置"></a>3.app.js修改大概位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">init: function(parent) &#123;</span><br><span class="line">    this._super();</span><br><span class="line">    this.prefs &#x3D; services.Preferences.instance();</span><br><span class="line">    this.base_uri &#x3D; this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http:&#x2F;&#x2F;10.215.4.166:9200&quot;;</span><br><span class="line">    if( this.base_uri.charAt( this.base_uri.length - 1 ) !&#x3D;&#x3D; &quot;&#x2F;&quot; ) &#123;</span><br><span class="line">    &#x2F;&#x2F; XHR request fails if the URL is not ending with a &quot;&#x2F;&quot;</span><br><span class="line">    this.base_uri +&#x3D; &quot;&#x2F;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-更换grunt"><a href="#4-更换grunt" class="headerlink" title="4.更换grunt"></a>4.更换grunt</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yo bower grunt-cli gulp</span><br></pre></td></tr></table></figure><h2 id="5-添加索引目录位置"><a href="#5-添加索引目录位置" class="headerlink" title="5.添加索引目录位置"></a>5.添加索引目录位置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi ~&#x2F;.bash_profile</span><br><span class="line"></span><br><span class="line"># .bash_profile</span><br><span class="line"></span><br><span class="line"># Get the aliases and functions</span><br><span class="line"></span><br><span class="line">if [ -f ~&#x2F;.bashrc ]; then</span><br><span class="line">        . ~&#x2F;.bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># User specific environment and startup programs</span><br><span class="line"></span><br><span class="line">PATH&#x3D;$PATH:$HOME&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;src&#x2F;node-v8.2.1-linux-x86&#x2F;bin</span><br></pre></td></tr></table></figure><h2 id="6-补充内容"><a href="#6-补充内容" class="headerlink" title="6.补充内容"></a>6.补充内容</h2><blockquote><p>现在使用的较多的多半为elasticsearch-head 插件或者自己开发界面以及api接口</p></blockquote><h3 id="springboot-elasticsearch-部署的配置文件"><a href="#springboot-elasticsearch-部署的配置文件" class="headerlink" title="springboot-elasticsearch 部署的配置文件"></a>springboot-elasticsearch 部署的配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.data.elasticsearch.cluster-name&#x3D;my-es</span><br><span class="line">#注意： 此处不能和elasticsearch服务一致，因为有可能出现端口攻击问题导致服务器崩溃</span><br><span class="line">spring.data.elasticsearch.cluster-nodes&#x3D;192.168.1.73:9300</span><br><span class="line">spring.data.elasticsearch.repositories.enabled&#x3D;true</span><br></pre></td></tr></table></figure><h3 id="接口的注入"><a href="#接口的注入" class="headerlink" title="接口的注入"></a>接口的注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component </span><br><span class="line">&#x2F;&#x2F;@Repository</span><br><span class="line">public interface ArticleRepository extends ElasticsearchRepository&lt;Article, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      安装教程
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://lazytime.site/categories/elasticsearch/"/>
    
    
      <category term="linux" scheme="http://lazytime.site/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>RocketMq消息队列中间件安装(linux)</title>
    <link href="http://lazytime.site/2020/08/29/RocketMq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E8%A3%85-linux/"/>
    <id>http://lazytime.site/2020/08/29/RocketMq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E8%A3%85-linux/</id>
    <published>2020-08-29T14:57:53.000Z</published>
    <updated>2020-08-29T15:13:11.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="1-下载maven的tar-gz包"><a href="#1-下载maven的tar-gz包" class="headerlink" title="1. 下载maven的tar.gz包"></a>1. 下载maven的tar.gz包</h2><h2 id="2-设置-etc-profile文件加入MAVEN-HOME"><a href="#2-设置-etc-profile文件加入MAVEN-HOME" class="headerlink" title="2. 设置/etc/profile文件加入MAVEN_HOME"></a>2. 设置/etc/profile文件加入MAVEN_HOME</h2><blockquote><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><h2 id="yum-install-curl-devel-expat-devel-gettext-devel"><a href="#yum-install-curl-devel-expat-devel-gettext-devel" class="headerlink" title="yum install curl-devel expat-devel gettext-devel"></a>yum install curl-devel expat-devel gettext-devel</h2></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; unzip rocketmq-all-4.3.0-source-release.zip</span><br><span class="line">&gt; cd rocketmq-all-4.3.0&#x2F;</span><br><span class="line">&gt; mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line">&gt; cd distribution&#x2F;target&#x2F;apache-rocketmq</span><br></pre></td></tr></table></figure><h2 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; nohup sh bin&#x2F;mqnamesrv &amp;</span><br><span class="line">  &gt; tail -f ~&#x2F;logs&#x2F;rocketmqlogs&#x2F;namesrv.log</span><br><span class="line">  The Name Server boot success...</span><br><span class="line">  </span><br><span class="line">   &gt; nohup sh bin&#x2F;mqbroker -n localhost:9876 &amp;</span><br><span class="line">  &gt; tail -f ~&#x2F;logs&#x2F;rocketmqlogs&#x2F;broker.log </span><br><span class="line">  The broker[%s, 172.30.30.233:10911] boot success...</span><br></pre></td></tr></table></figure><h2 id="4-启动消费者"><a href="#4-启动消费者" class="headerlink" title="4.启动消费者"></a>4.启动消费者</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; export NAMESRV_ADDR&#x3D;localhost:9876</span><br><span class="line"> &gt; sh bin&#x2F;tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line"> SendResult [sendStatus&#x3D;SEND_OK, msgId&#x3D; ...</span><br><span class="line"></span><br><span class="line"> &gt; sh bin&#x2F;tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br><span class="line"> ConsumeMessageThread_%d Receive New Messages: [MessageExt...</span><br></pre></td></tr></table></figure><h4 id="5-关闭"><a href="#5-关闭" class="headerlink" title="5.关闭"></a>5.关闭</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; sh bin&#x2F;mqshutdown broker</span><br><span class="line">The mqbroker(36695) is running...</span><br><span class="line">Send shutdown request to mqbroker(36695) OK</span><br><span class="line"></span><br><span class="line">&gt; sh bin&#x2F;mqshutdown namesrv</span><br><span class="line">The mqnamesrv(36664) is running...</span><br><span class="line">Send shutdown request to mqnamesrv(36664) OK</span><br></pre></td></tr></table></figure><h1 id="可视化工具下载与安装"><a href="#可视化工具下载与安装" class="headerlink" title="可视化工具下载与安装"></a>可视化工具下载与安装</h1><p>RoekerMQ4.x可视化控制台讲解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、下载 https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;rocketmq-externals</span><br><span class="line">2、编译打包  mvn clean package -Dmaven.test.skip&#x3D;true</span><br><span class="line">3、target目录 通过java -jar的方式运行</span><br><span class="line"></span><br><span class="line">4、无法连接获取broker信息</span><br><span class="line">1）修改配置文件,名称路由地址为 namesrvAddr，例如我本机为</span><br><span class="line">2）src&#x2F;main&#x2F;resources&#x2F;application.properties</span><br><span class="line">rocketmq.config.namesrvAddr&#x3D;192.168.0.101:9876</span><br><span class="line"></span><br><span class="line">5、默认端口 localhost:8080</span><br><span class="line"></span><br><span class="line">6、注意：</span><br><span class="line">在阿里云，腾讯云或者虚拟机，记得检查端口号和防火墙是否启动</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      消息中间件
    
    </summary>
    
    
      <category term="消息中间件" scheme="http://lazytime.site/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="RocketMq" scheme="http://lazytime.site/tags/RocketMq/"/>
    
  </entry>
  
  <entry>
    <title>Oracle常用命令大全（很有用，做笔记）</title>
    <link href="http://lazytime.site/2020/08/29/Oracle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%EF%BC%88%E5%BE%88%E6%9C%89%E7%94%A8%EF%BC%8C%E5%81%9A%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://lazytime.site/2020/08/29/Oracle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%EF%BC%88%E5%BE%88%E6%9C%89%E7%94%A8%EF%BC%8C%E5%81%9A%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2020-08-29T14:55:04.000Z</published>
    <updated>2020-08-29T14:57:08.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Oracle常用命令大全（很有用，做笔记）"><a href="#Oracle常用命令大全（很有用，做笔记）" class="headerlink" title="Oracle常用命令大全（很有用，做笔记）"></a><a href="https://www.cnblogs.com/flgg/p/6136586.html" target="_blank" rel="noopener">Oracle常用命令大全（很有用，做笔记）</a></h1><p>单纯参考别人的博客记录，紧急时候帮助很大</p><a id="more"></a><p>一、ORACLE的启动和关闭 1、在单机环境下 要想启动或关闭ORACLE系统必须首先切换到ORACLE用户，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure><p>a、启动ORACLE系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oracle&gt;svrmgrl </span><br><span class="line">SVRMGR&gt;connect internal </span><br><span class="line">SVRMGR&gt;startup </span><br><span class="line">SVRMGR&gt;quit</span><br></pre></td></tr></table></figure><p>b、关闭ORACLE系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oracle&gt;svrmgrl </span><br><span class="line">SVRMGR&gt;connect internal </span><br><span class="line">SVRMGR&gt;shutdown </span><br><span class="line">SVRMGR&gt;quit</span><br></pre></td></tr></table></figure><p>启动oracle9i数据库命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ sqlplus &#x2F;nolog </span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 9.2.0.1.0 - Production on Fri Oct 31 13:53:53 2003 </span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2002, Oracle Corporation.  All rights reserved. </span><br><span class="line"></span><br><span class="line">SQL&gt; connect &#x2F; as sysdba  </span><br><span class="line">Connected to an idle instance. </span><br><span class="line">SQL&gt; startup^C </span><br><span class="line"></span><br><span class="line">SQL&gt; startup </span><br><span class="line">ORACLE instance started.</span><br></pre></td></tr></table></figure><p>2、在双机环境下 要想启动或关闭ORACLE系统必须首先切换到root用户，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">su － root </span><br><span class="line"></span><br><span class="line">a、启动ORACLE系统 </span><br><span class="line">hareg －y oracle </span><br><span class="line"></span><br><span class="line">b、关闭ORACLE系统 </span><br><span class="line">hareg －n oracle </span><br><span class="line"></span><br><span class="line">Oracle数据库有哪几种启动方式</span><br></pre></td></tr></table></figure><p>说明：</p><p>有以下几种启动方式： 1、startup nomount 非安装启动，这种方式启动下可执行：重建控制文件、重建数据库</p><p>读取init.ora文件，启动instance，即启动SGA和后台进程，这种启动只需要init.ora文件。</p><p>2、startup mount dbname 安装启动，这种方式启动下可执行： 数据库日志归档、 数据库介质恢复、 使数据文件联机或脱机， 重新定位数据文件、重做日志文件。</p><p>执行“nomount”，然后打开控制文件，确认数据文件和联机日志文件的位置， 但此时不对数据文件和日志文件进行校验检查。</p><p>3、startup open dbname 先执行“nomount”，然后执行“mount”，再打开包括Redo log文件在内的所有数据库文件， 这种方式下可访问数据库中的数据。</p><p>4、startup，等于以下三个命令 startup nomount alter database mount alter database open</p><p>5、startup restrict 约束方式启动 这种方式能够启动数据库，但只允许具有一定特权的用户访问 非特权用户访问时，会出现以下提示： ERROR： ORA-01035: ORACLE 只允许具有 RESTRICTED SESSION 权限的用户使用</p><p>6、startup force 强制启动方式 当不能关闭数据库时，可以用startup force来完成数据库的关闭 先关闭数据库，再执行正常启动数据库命令</p><p>7、startup pfile=参数文件名 带初始化参数文件的启动方式 先读取参数文件，再按参数文件中的设置启动数据库 例：startup pfile=E:Oracleadminoradbpfileinit.ora</p><p>8、startup EXCLUSIVE 二、用户如何有效地利用数据字典 　ORACLE的数据字典是数据库的重要组成部分之一，它随着数据库的产生而产生, 随着数据库的变化而变化, 体现为sys用户下的一些表和视图。数据字典名称是大写的英文字符。</p><p> 数据字典里存有用户信息、用户的权限信息、所有数据对象信息、表的约束条件、统计分析数据库的视图等。 我们不能手工修改数据字典里的信息。</p><p>很多时候，一般的ORACLE用户不知道如何有效地利用它。</p><p>dictionary　　　全部数据字典表的名称和解释，它有一个同义词dict  dict_column　　 全部数据字典表里字段名称和解释</p><p> 如果我们想查询跟索引有关的数据字典时，可以用下面这条SQL语句:</p><p> SQL&gt;select * from dictionary where instr(comments,’index’)&gt;0;</p><p> 如果我们想知道user_indexes表各字段名称的详细含义，可以用下面这条SQL语句:</p><p> SQL&gt;select column_name,comments from dict_columns where table_name=’USER_INDEXES’;</p><p> 依此类推，就可以轻松知道数据字典的详细名称和解释，不用查看ORACLE的其它文档资料了。</p><p> 下面按类别列出一些ORACLE用户常用数据字典的查询使用方法。</p><p> 1、用户</p><p> 查看当前用户的缺省表空间  SQL&gt;select username,default_tablespace from user_users;</p><p> 查看当前用户的角色  SQL&gt;select * from user_role_privs;</p><p> 查看当前用户的系统权限和表级权限  SQL&gt;select * from user_sys_privs;  SQL&gt;select * from user_tab_privs;</p><p> 2、表</p><p> 查看用户下所有的表  SQL&gt;select * from user_tables;</p><p> 查看名称包含log字符的表  SQL&gt;select object_name,object_id from user_objects  where instr(object_name,’LOG’)&gt;0;</p><p> 查看某表的创建时间  SQL&gt;select object_name,created from user_objects where object_name=upper(‘&amp;table_name’);</p><p> 查看某表的大小  SQL&gt;select sum(bytes)/(1024*1024) as “size(M)” from user_segments  where segment_name=upper(‘&amp;table_name’);</p><p> 查看放在ORACLE的内存区里的表  SQL&gt;select table_name,cache from user_tables where instr(cache,’Y’)&gt;0;</p><p> 3、索引</p><p> 查看索引个数和类别  SQL&gt;select index_name,index_type,table_name from user_indexes order by table_name;</p><p> 查看索引被索引的字段  SQL&gt;select * from user_ind_columns where index_name=upper(‘&amp;index_name’);</p><p> 查看索引的大小  SQL&gt;select sum(bytes)/(1024*1024) as “size(M)” from user_segments  where segment_name=upper(‘&amp;index_name’);</p><p> 4、序列号</p><p> 查看序列号，last_number是当前值  SQL&gt;select * from user_sequences;</p><p> 5、视图</p><p> 查看视图的名称  SQL&gt;select view_name from user_views;</p><p> 查看创建视图的select语句  SQL&gt;set view_name,text_length from user_views;  SQL&gt;set long 2000; 说明：可以根据视图的text_length值设定set long 的大小  SQL&gt;select text from user_views where view_name=upper(‘&amp;view_name’);</p><p> 6、同义词</p><p> 查看同义词的名称  SQL&gt;select * from user_synonyms;</p><p> 7、约束条件</p><p> 查看某表的约束条件  SQL&gt;select constraint_name, constraint_type,search_condition, r_constraint_name  from user_constraints where table_name = upper(‘&amp;table_name’);</p><p> SQL&gt;select c.constraint_name,c.constraint_type,cc.column_name  from user_constraints c,user_cons_columns cc  where c.owner = upper(‘&amp;table_owner’) and c.table_name = upper(‘&amp;table_name’)  and c.owner = cc.owner and c.constraint_name = cc.constraint_name  order by cc.position;</p><p> 8、存储函数和过程</p><p> 查看函数和过程的状态  SQL&gt;select object_name,status from user_objects where object_type=’FUNCTION’;  SQL&gt;select object_name,status from user_objects where object_type=’PROCEDURE’;</p><p> 查看函数和过程的源代码  SQL&gt;select text from all_source where owner=user and name=upper(‘&amp;plsql_name’);</p><p>三、查看数据库的SQL 1、查看表空间的名称及大小</p><p> select t.tablespace_name, round(sum(bytes/(1024*1024)),0) ts_size  from dba_tablespaces t, dba_data_files d  where t.tablespace_name = d.tablespace_name  group by t.tablespace_name;</p><p>2、查看表空间物理文件的名称及大小</p><p> select tablespace_name, file_id, file_name,  round(bytes/(1024*1024),0) total_space  from dba_data_files  order by tablespace_name;</p><p>3、查看回滚段名称及大小</p><p> select segment_name, tablespace_name, r.status,  (initial_extent/1024) InitialExtent,(next_extent/1024) NextExtent,  max_extents, v.curext CurExtent  From dba_rollback_segs r, v$rollstat v  Where r.segment_id = v.usn(+)  order by segment_name ;</p><p>4、查看控制文件</p><p> select name from v$controlfile;</p><p>5、查看日志文件</p><p> select member from v$logfile;</p><p>6、查看表空间的使用情况</p><p> select sum(bytes)/(1024*1024) as free_space,tablespace_name  from dba_free_space  group by tablespace_name;</p><p> SELECT A.TABLESPACE_NAME,A.BYTES TOTAL,B.BYTES USED, C.BYTES FREE,  (B.BYTES<em>100)/A.BYTES “% USED”,(C.BYTES</em>100)/A.BYTES “% FREE”  FROM SYS.SM$TS_AVAIL A,SYS.SM$TS_USED B,SYS.SM$TS_FREE C  WHERE A.TABLESPACE_NAME=B.TABLESPACE_NAME AND A.TABLESPACE_NAME=C.TABLESPACE_NAME;</p><p>7、查看数据库库对象</p><p> select owner, object_type, status, count(*) count# from all_objects group by owner, object_type, status;</p><p>8、查看数据库的版本</p><p> Select version FROM Product_component_version  Where SUBSTR(PRODUCT,1,6)=’Oracle’;</p><p>9、查看数据库的创建日期和归档方式</p><p> Select Created, Log_Mode, Log_Mode From V$Database; 四、ORACLE用户连接的管理</p><p>用系统管理员，查看当前数据库有几个用户连接：</p><p>SQL&gt; select username,sid,serial# from v$session;</p><p>如果要停某个连接用</p><p>SQL&gt; alter system kill session ‘sid,serial#’;</p><p>如果这命令不行,找它UNIX的进程数</p><p>SQL&gt; select pro.spid from v$session ses,v$process pro where ses.sid=21 and ses.paddr=pro.addr;</p><p>说明：21是某个连接的sid数</p><p>然后用 kill 命令杀此进程号。</p><p>五、SQL<em>PLUS使用 a、近入SQL</em>Plus $sqlplus 用户名/密码</p><p>退出SQL*Plus SQL&gt;exit</p><p>b、在sqlplus下得到帮助信息 列出全部SQL命令和SQL*Plus命令 SQL&gt;help 列出某个特定的命令的信息 SQL&gt;help 命令名</p><p>c、显示表结构命令DESCRIBE SQL&gt;DESC 表名</p><p>d、SQL*Plus中的编辑命令 显示SQL缓冲区命令 SQL&gt;L</p><p>修改SQL命令 首先要将待改正行变为当前行 SQL&gt;n 用CHANGE命令修改内容 SQL&gt;c/旧/新 重新确认是否已正确 SQL&gt;L</p><p>使用INPUT命令可以在SQL缓冲区中增加一行或多行 SQL&gt;i SQL&gt;输入内容</p><p>e、调用外部系统编辑器 SQL&gt;edit 文件名 可以使用DEFINE命令设置系统变量EDITOR来改变文本编辑器的类型，在login.sql文件中定义如下一行 DEFINE_EDITOR=vi</p><p>f、运行命令文件 SQL&gt;START test SQL&gt;@test</p><p>常用SQL*Plus语句 a、表的创建、修改、删除 创建表的命令格式如下： create table 表名 （列说明列表）；</p><p>为基表增加新列命令如下： ALTER TABLE 表名 ADD （列说明列表） 例：为test表增加一列Age，用来存放年龄  sql&gt;alter table test  add （Age number(3)）；</p><p>修改基表列定义命令如下： ALTER TABLE 表名 MODIFY （列名 数据类型） 例：将test表中的Count列宽度加长为10个字符  sql&gt;alter atble test  modify （County char(10)）；</p><p>b、将一张表删除语句的格式如下： DORP TABLE 表名； 例：表删除将同时删除表的数据和表的定义 sql&gt;drop table test</p><p>c、表空间的创建、删除</p><p>六、ORACLE逻辑备份的SH文件</p><p>完全备份的SH文件：exp_comp.sh</p><p>rq=<code>date +&quot;%m%d&quot;</code></p><p>su - oracle -c “exp system/manager full=y inctype=complete file=/oracle/export/db_comp$rq.dmp”</p><p>累计备份的SH文件：exp_cumu.sh</p><p>rq=<code>date +&quot;%m%d&quot;</code></p><p>su - oracle -c “exp system/manager full=y inctype=cumulative file=/oracle/export/db_cumu$rq.dmp”</p><p>增量备份的SH文件: exp_incr.sh</p><p>rq=<code>date +&quot;%m%d&quot;</code></p><p>su - oracle -c “exp system/manager full=y inctype=incremental file=/oracle/export/db_incr$rq.dmp”</p><p>root用户crontab文件 /var/spool/cron/crontabs/root增加以下内容</p><p>0 2 1 * * /oracle/exp_comp.sh</p><p>30 2 * * 0-5 /oracle/exp_incr.sh</p><p>45 2 * * 6 /oracle/exp_cumu.sh</p><p>当然这个时间表可以根据不同的需求来改变的，这只是一个例子。</p><p>七、ORACLE 常用的SQL语法和数据对象</p><p>一.数据控制语句 (DML) 部分</p><p>1.INSERT (往数据表里插入记录的语句)</p><p>INSERT INTO 表名(字段名1, 字段名2, ……) VALUES ( 值1, 值2, ……); INSERT INTO 表名(字段名1, 字段名2, ……) SELECT (字段名1, 字段名2, ……) FROM 另外的表名;</p><p>字符串类型的字段值必须用单引号括起来, 例如: ’GOOD DAY’ 如果字段值里包含单引号’ 需要进行字符串转换, 我们把它替换成两个单引号’’. 字符串类型的字段值超过定义的长度会出错, 最好在插入前进行长度校验.</p><p>日期字段的字段值可以用当前数据库的系统时间SYSDATE, 精确到秒 或者用字符串转换成日期型函数TO_DATE(‘2001-08-01’,’YYYY-MM-DD’) TO_DATE()还有很多种日期格式, 可以参看ORACLE DOC. 年-月-日 小时:分钟:秒 的格式YYYY-MM-DD HH24:MI:SS</p><p>INSERT时最大可操作的字符串长度小于等于4000个单字节, 如果要插入更长的字符串, 请考虑字段用CLOB类型, 方法借用ORACLE里自带的DBMS_LOB程序包.</p><p>INSERT时如果要用到从1开始自动增长的序列号, 应该先建立一个序列号 CREATE SEQUENCE 序列号的名称 (最好是表名+序列号标记) INCREMENT BY 1 START WITH 1 MAXVALUE 99999 CYCLE NOCACHE; 其中最大的值按字段的长度来定, 如果定义的自动增长的序列号 NUMBER(6) , 最大值为999999 INSERT 语句插入这个字段值为: 序列号的名称.NEXTVAL</p><p>2.DELETE (删除数据表里记录的语句)</p><p>DELETE FROM表名 WHERE 条件;</p><p>注意：删除记录并不能释放ORACLE里被占用的数据块表空间. 它只把那些被删除的数据块标成unused.</p><p>如果确实要删除一个大表里的全部记录, 可以用 TRUNCATE 命令, 它可以释放占用的数据块表空间 TRUNCATE TABLE 表名; 此操作不可回退.</p><p>3.UPDATE (修改数据表里记录的语句)</p><p>UPDATE表名 SET 字段名1=值1, 字段名2=值2, …… WHERE 条件;</p><p>如果修改的值N没有赋值或定义时, 将把原来的记录内容清为NULL, 最好在修改前进行非空校验; 值N超过定义的长度会出错, 最好在插入前进行长度校验..</p><p>注意事项: A. 以上SQL语句对表都加上了行级锁,  确认完成后, 必须加上事物处理结束的命令 COMMIT 才能正式生效,  否则改变不一定写入数据库里.  如果想撤回这些操作, 可以用命令 ROLLBACK 复原.</p><p>B. 在运行INSERT, DELETE 和 UPDATE 语句前最好估算一下可能操作的记录范围,  应该把它限定在较小 (一万条记录) 范围内,. 否则ORACLE处理这个事物用到很大的回退段.  程序响应慢甚至失去响应. 如果记录数上十万以上这些操作, 可以把这些SQL语句分段分次完成,  其间加上COMMIT 确认事物处理. 二.数据定义 (DDL) 部分</p><p>1.CREATE (创建表, 索引, 视图, 同义词, 过程, 函数, 数据库链接等)</p><p>ORACLE常用的字段类型有 CHAR 固定长度的字符串 VARCHAR2 可变长度的字符串 NUMBER(M,N) 数字型M是位数总长度, N是小数的长度 DATE 日期类型</p><p>创建表时要把较小的不为空的字段放在前面, 可能为空的字段放在后面</p><p>创建表时可以用中文的字段名, 但最好还是用英文的字段名</p><p>创建表时可以给字段加上默认值, 例如 DEFAULT SYSDATE 这样每次插入和修改时, 不用程序操作这个字段都能得到动作的时间</p><p>创建表时可以给字段加上约束条件 例如 不允许重复 UNIQUE, 关键字 PRIMARY KEY</p><p>2.ALTER (改变表, 索引, 视图等)</p><p>改变表的名称 ALTER TABLE 表名1 TO 表名2;</p><p>在表的后面增加一个字段 ALTER TABLE表名 ADD 字段名 字段名描述;</p><p>修改表里字段的定义描述 ALTER TABLE表名 MODIFY字段名 字段名描述;</p><p>给表里的字段加上约束条件 ALTER TABLE 表名 ADD CONSTRAINT 约束名 PRIMARY KEY (字段名); ALTER TABLE 表名 ADD CONSTRAINT 约束名 UNIQUE (字段名);</p><p>把表放在或取出数据库的内存区 ALTER TABLE 表名 CACHE; ALTER TABLE 表名 NOCACHE;</p><p>3.DROP (删除表, 索引, 视图, 同义词, 过程, 函数, 数据库链接等)</p><p>删除表和它所有的约束条件 DROP TABLE 表名 CASCADE CONSTRAINTS;</p><p>4.TRUNCATE (清空表里的所有记录, 保留表的结构)</p><p>TRUNCATE 表名;</p><p>三.查询语句 (SELECT) 部分</p><p>SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] WHERE 条件;</p><p>字段名可以带入函数 例如: COUNT(*), MIN(字段名), MAX(字段名), AVG(字段名), DISTINCT(字段名),  TO_CHAR(DATE字段名,’YYYY-MM-DD HH24:MI:SS’)</p><p>NVL(EXPR1, EXPR2)函数 解释: IF EXPR1=NULL  RETURN EXPR2 ELSE  RETURN EXPR1</p><p>DECODE(AA﹐V1﹐R1﹐V2﹐R2….)函数 解释: IF AA=V1 THEN RETURN R1 IF AA=V2 THEN RETURN R2 ..… ELSE RETURN NULL</p><p>LPAD(char1,n,char2)函数 解释: 字符char1按制定的位数n显示，不足的位数用char2字符串替换左边的空位</p><p>字段名之间可以进行算术运算 例如: (字段名1*字段名1)/3</p><p>查询语句可以嵌套 例如: SELECT …… FROM (SELECT …… FROM表名1, [表名2, ……] WHERE 条件) WHERE 条件2;</p><p>两个查询语句的结果可以做集合操作 例如: 并集UNION(去掉重复记录), 并集UNION ALL(不去掉重复记录), 差集MINUS, 交集INTERSECT</p><p>分组查询 SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] GROUP BY字段名1 [HAVING 条件] ;</p><p>两个以上表之间的连接查询</p><p>SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] WHERE  表名1.字段名 = 表名2. 字段名 [ AND ……] ;</p><p>SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] WHERE  表名1.字段名 = 表名2. 字段名(+) [ AND ……] ;</p><p>有(+)号的字段位置自动补空值</p><p>查询结果集的排序操作, 默认的排序是升序ASC, 降序是DESC</p><p>SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] ORDER BY字段名1, 字段名2 DESC;</p><p>字符串模糊比较的方法</p><p>INSTR(字段名, ‘字符串’)&gt;0 字段名 LIKE ‘字符串%’ [‘%字符串%’]</p><p>每个表都有一个隐含的字段ROWID, 它标记着记录的唯一性.</p><p>四.ORACLE里常用的数据对象 (SCHEMA)</p><p>1.索引 (INDEX)</p><p>CREATE INDEX 索引名ON 表名 ( 字段1, [字段2, ……] ); ALTER INDEX 索引名 REBUILD;</p><p>一个表的索引最好不要超过三个 (特殊的大表除外), 最好用单字段索引, 结合SQL语句的分析执行情况, 也可以建立多字段的组合索引和基于函数的索引</p><p>ORACLE8.1.7字符串可以索引的最大长度为1578 单字节 ORACLE8.0.6字符串可以索引的最大长度为758 单字节</p><p>2.视图 (VIEW)</p><p>CREATE VIEW 视图名AS SELECT …. FROM …..; ALTER VIEW视图名 COMPILE;</p><p>视图仅是一个SQL查询语句, 它可以把表之间复杂的关系简洁化.</p><p>3.同义词 (SYNONMY) CREATE SYNONYM同义词名FOR 表名; CREATE SYNONYM同义词名FOR 表名@数据库链接名;</p><p>4.数据库链接 (DATABASE LINK) CREATE DATABASE LINK数据库链接名CONNECT TO 用户名 IDENTIFIED BY 密码 USING ‘数据库连接字符串’;</p><p>数据库连接字符串可以用NET8 EASY CONFIG或者直接修改TNSNAMES.ORA里定义.</p><p>数据库参数global_name=true时要求数据库链接名称跟远端数据库名称一样</p><p>数据库全局名称可以用以下命令查出 SELECT * FROM GLOBAL_NAME;</p><p>查询远端数据库里的表 SELECT …… FROM 表名@数据库链接名;</p><p>五.权限管理 (DCL) 语句</p><p>1.GRANT 赋于权限 常用的系统权限集合有以下三个: CONNECT(基本的连接), RESOURCE(程序开发), DBA(数据库管理) 常用的数据对象权限有以下五个: ALL ON 数据对象名, SELECT ON 数据对象名, UPDATE ON 数据对象名, DELETE ON 数据对象名, INSERT ON 数据对象名, ALTER ON 数据对象名</p><p>GRANT CONNECT, RESOURCE TO 用户名; GRANT SELECT ON 表名 TO 用户名; GRANT SELECT, INSERT, DELETE ON表名 TO 用户名1, 用户名2;</p><p>2.REVOKE 回收权限</p><p>REVOKE CONNECT, RESOURCE FROM 用户名; REVOKE SELECT ON 表名 FROM 用户名; REVOKE SELECT, INSERT, DELETE ON表名 FROM 用户名1, 用户名2;</p><p>查询数据库中第63号错误： select orgaddr,destaddr from sm_histable0116 where error_code=’63’;</p><p>查询数据库中开户用户最大提交和最大下发数： select MSISDN,TCOS,OCOS from ms_usertable；</p><p>查询数据库中各种错误代码的总和： select error_code,count(*) from sm_histable0513 group by error_code order by error_code;</p><p>查询报表数据库中话单统计种类查询。 select sum(Successcount) from tbl_MiddleMt0411 where ServiceType2=111 select sum(successcount),servicetype from tbl_middlemt0411 group by servicetype</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      Oracle常用命令大全（很有用，做笔记）
    
    </summary>
    
    
      <category term="数据库" scheme="http://lazytime.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="oracle" scheme="http://lazytime.site/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>linux Docker 安装方法</title>
    <link href="http://lazytime.site/2020/08/29/linux-Docker-%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/"/>
    <id>http://lazytime.site/2020/08/29/linux-Docker-%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/</id>
    <published>2020-08-29T14:52:18.000Z</published>
    <updated>2020-08-29T14:53:50.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-linux-Docker-安装方法"><a href="#1-linux-Docker-安装方法" class="headerlink" title="1. linux Docker 安装方法"></a>1. linux Docker 安装方法</h1><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>64-bit 系统</li><li>kernel 3.10+ （内核为 3.1 以上）</li><li>linux 系统</li></ul><a id="more"></a><h2 id="检查内核版本，返回的值大于3-10即可"><a href="#检查内核版本，返回的值大于3-10即可" class="headerlink" title="检查内核版本，返回的值大于3.10即可"></a>检查内核版本，返回的值大于3.10即可</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><h2 id="更新yum"><a href="#更新yum" class="headerlink" title="更新yum"></a>更新yum</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><h2 id="添加yum仓库（直接拷贝即可）"><a href="#添加yum仓库（直接拷贝即可）" class="headerlink" title="添加yum仓库（直接拷贝即可）"></a>添加yum仓库（直接拷贝即可）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tee &#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">[dockerrepo]</span><br><span class="line">name&#x3D;Docker Repository</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;yum.dockerproject.org&#x2F;repo&#x2F;main&#x2F;centos&#x2F;$releasever&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;yum.dockerproject.org&#x2F;gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-engine</span><br></pre></td></tr></table></figure><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure><h2 id="验证安装是否成功-有client和service两部分表示docker安装启动都成功了"><a href="#验证安装是否成功-有client和service两部分表示docker安装启动都成功了" class="headerlink" title="验证安装是否成功(有client和service两部分表示docker安装启动都成功了)"></a>验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h2 id="查看当前进程"><a href="#查看当前进程" class="headerlink" title="查看当前进程"></a>查看当前进程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h1 id="2-什么是Dokcer"><a href="#2-什么是Dokcer" class="headerlink" title="2. 什么是Dokcer"></a>2. 什么是Dokcer</h1><p>一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口；</p><p>使用go语言编写，在LCX（linux容器）基础上进行的封装</p><h2 id="简单来说："><a href="#简单来说：" class="headerlink" title="简单来说："></a>简单来说：</h2><p>1）就是可以快速部署启动应用 2）实现虚拟化，完整资源隔离 3）一次编写，四处运行（有一定的限制，比如Docker是基于Linux 64bit的，无法在32bit的linux/Windows/unix环境下使用）</p><h2 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h2><p>开箱即用，快速部署，可移植性强，环境隔离</p><p>1、提供一次性的环境，假如需要安装Mysql，则需要安装很多依赖库、版本等，如果使用Docker则通过镜像就可以直接启动运行</p><p>2、快速动态扩容，使用docker部署了一个应用，可以制作成镜像，然后通过Dokcer快速启动</p><p>3、组建微服务架构，可以在一个机器上模拟出多个微服务，启动多个应用</p><p>4、更好的资源隔离和共享</p><h2 id="linux-简介："><a href="#linux-简介：" class="headerlink" title="linux 简介："></a>linux 简介：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Linux Standard Base的缩写，lsb_release命令用来显示LSB和特定版本的相关信息</span><br><span class="line">命令： lsb_release -a </span><br><span class="line">阿里云安装手册：</span><br><span class="line">https:&#x2F;&#x2F;help.aliyun.com&#x2F;document_detail&#x2F;51853.html?spm&#x3D;a2c4g.11186623.6.820.RaToNY</span><br><span class="line"></span><br><span class="line">常见问题：</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;daluguishou&#x2F;article&#x2F;details&#x2F;52080250</span><br><span class="line">Docker 镜像 - Docker images：</span><br><span class="line">            容器运行时的只读模板，操作系统+软件运行环境+用户程序</span><br><span class="line"></span><br><span class="line">            class User&#123;</span><br><span class="line">            private String userName;</span><br><span class="line">            private int age;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Docker 容器 - Docker containers：</span><br><span class="line">容器包含了某个应用运行所需要的全部环境</span><br><span class="line"></span><br><span class="line"> User user &#x3D; new User()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Docker 仓库 - Docker registeries： </span><br><span class="line">用来保存镜像，有公有和私有仓库，好比Maven的中央仓库和本地私服</span><br><span class="line">镜像仓库：</span><br><span class="line"></span><br><span class="line">（参考）配置国内镜像仓库：https:&#x2F;&#x2F;blog.csdn.net&#x2F;zzy1078689276&#x2F;article&#x2F;details&#x2F;77371782</span><br><span class="line"></span><br><span class="line">对比面向对象的方式</span><br><span class="line">Dokcer 里面的镜像 : Java里面的类 Class</span><br><span class="line">Docker 里面的容器 : Java里面的对象 Object</span><br><span class="line">通过类创建对象，通过镜像创建容器</span><br></pre></td></tr></table></figure><h2 id="阿里云安装linux-docker-centeros7-版本"><a href="#阿里云安装linux-docker-centeros7-版本" class="headerlink" title="阿里云安装linux docker (centeros7 版本)"></a>阿里云安装linux docker (centeros7 版本)</h2><h2 id="使用脚本安装-Docker"><a href="#使用脚本安装-Docker" class="headerlink" title="使用脚本安装 Docker"></a>使用脚本安装 Docker</h2><p>1、使用 <code>sudo</code> 或 <code>root</code> 权限登录 Centos。</p><p>2、确保 yum 包更新到最新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update</span><br></pre></td></tr></table></figure><p>3、执行 Docker 安装脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br></pre></td></tr></table></figure><p>执行这个脚本会添加 <code>docker.repo</code> 源并安装 Docker。</p><p>4、启动 Docker 进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br></pre></td></tr></table></figure><p>5、验证 <code>docker</code> 是否安装成功并在容器中执行一个测试的镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>到此，docker 在 CentOS 系统的安装完成。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Docker 镜像 - Docker images：</span><br><span class="line">容器运行时的只读模板，操作系统+软件运行环境+用户程序</span><br><span class="line"> </span><br><span class="line"> class User&#123;</span><br><span class="line">private String userName;</span><br><span class="line">private int age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Docker 容器 - Docker containers：</span><br><span class="line">    容器包含了某个应用运行所需要的全部环境</span><br><span class="line"></span><br><span class="line">    User user &#x3D; new User()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Docker 仓库 - Docker registeries： </span><br><span class="line">    用来保存镜像，有公有和私有仓库，好比Maven的中央仓库和本地私服</span><br><span class="line">    镜像仓库：</span><br><span class="line"></span><br><span class="line">（参考）配置国内镜像仓库：</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;zzy1078689276&#x2F;article&#x2F;details&#x2F;77371782</span><br><span class="line"></span><br><span class="line">对比面向对象的方式</span><br><span class="line">Dokcer 里面的镜像 : Java里面的类 Class</span><br><span class="line">Docker 里面的容器 : Java里面的对象 Object</span><br><span class="line">通过类创建对象，通过镜像创建容器</span><br></pre></td></tr></table></figure><h1 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h1><p>常用命令（安装部署好Dokcer后，执行的命令是docker开头）,xxx是镜像名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">搜索镜像：docker search xxx</span><br><span class="line"></span><br><span class="line">列出当前系统存在的镜像：docker images</span><br><span class="line"></span><br><span class="line">拉取镜像：docker pull xxx</span><br><span class="line">xxx是具体某个镜像名称(格式 REPOSITORY:TAG)</span><br><span class="line">REPOSITORY：表示镜像的仓库源,TAG：镜像的标签</span><br><span class="line"></span><br><span class="line">运行一个容器：docker run -d --name &quot;xdclass_mq&quot; -p 5672:5672 -p 15672:15672 rabbitmq:management</span><br><span class="line">docker run - 运行一个容器</span><br><span class="line">-d 后台运行</span><br><span class="line">-p 端口映射</span><br><span class="line">rabbitmq:management  (格式 REPOSITORY:TAG)，如果不指定tag，默认使用最新的</span><br><span class="line">--name &quot;xxx&quot;</span><br><span class="line"></span><br><span class="line">列举当前运行的容器：docker ps</span><br><span class="line"></span><br><span class="line">检查容器内部信息：docker inspect 容器名称</span><br><span class="line"></span><br><span class="line">删除镜像：docker rmi IMAGE_NAME</span><br><span class="line"> 强制移除镜像不管是否有容器使用该镜像 增加 -f 参数，</span><br><span class="line"></span><br><span class="line">停止某个容器：docker stop 容器名称</span><br><span class="line"></span><br><span class="line">启动某个容器：docker start 容器名称</span><br><span class="line"></span><br><span class="line">移除某个容器： docker rm 容器名称 （容器必须是停止状态）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">文档：</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;permike&#x2F;article&#x2F;details&#x2F;51879578</span><br></pre></td></tr></table></figure><h1 id="3-Docker部署Nginx服务器"><a href="#3-Docker部署Nginx服务器" class="headerlink" title="3. Docker部署Nginx服务器"></a>3. Docker部署Nginx服务器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">简介：讲解使用Docker部署Nginx服务器实战</span><br><span class="line">1、获取镜像 </span><br><span class="line">docker run (首先会从本地找镜像，如果有则直接启动，没有的话，从镜像仓库拉起，再启动)</span><br><span class="line"></span><br><span class="line">docker search nignx</span><br><span class="line">2、列举</span><br><span class="line">docker images</span><br><span class="line">3、拉取</span><br><span class="line">docker pull nignx</span><br><span class="line">3、启动</span><br><span class="line">docker run -d --name &quot;xdclass_nginx&quot; -p 8088:80 nginx</span><br><span class="line">docker run -d --name &quot;xdclass_nginx2&quot; -p 8089:80 nginx</span><br><span class="line">docker run -d --name &quot;xdclass_nginx3&quot; -p 8090:80 nginx</span><br><span class="line">4、访问</span><br><span class="line">如果是阿里云服务，记得配置安全组，腾讯云也需要配置，这个就是一个防火墙</span><br></pre></td></tr></table></figure><h1 id="4-构建自己的私人镜像"><a href="#4-构建自己的私人镜像" class="headerlink" title="4. 构建自己的私人镜像"></a>4. 构建自己的私人镜像</h1><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1)登录： docker login --username&#x3D;794666918@qq.com registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">2) 推送本地镜像：</span><br><span class="line">docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass&#x2F;xdclass_images:[镜像版本号]</span><br><span class="line">例子：</span><br><span class="line">docker tag 2f415b0e9a6e registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass&#x2F;xdclass_images:xd_rabbitmq-v1.0.2</span><br><span class="line"></span><br><span class="line">docker push registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass&#x2F;xdclass_images:xd_rabbitmq-v1.0.2</span><br><span class="line"></span><br><span class="line">3)拉取镜像</span><br><span class="line">线上服务器拉取镜像：</span><br><span class="line">docker login --username&#x3D;794666918@qq.com registry.cn-shenzhen.aliyuncs.com</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass&#x2F;xdclass_images:xd_rabbitmq-v1.0.2</span><br><span class="line"></span><br><span class="line">启动容器：</span><br><span class="line">docker run -d --name &quot;xdclass_mq&quot; -p 5672:5672 -p 15672:15672 2f415b0e9a6e</span><br><span class="line">1. 登录阿里云Docker Registry</span><br><span class="line">$ sudo docker login --username&#x3D;xiaolaodong11 registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</span><br><span class="line"></span><br><span class="line">您可以在产品控制台首页修改登录密码。</span><br><span class="line"></span><br><span class="line">2. 从Registry中拉取镜像</span><br><span class="line">$ sudo docker pull registry.cn-shenzhen.aliyuncs.com&#x2F;zxd-registry&#x2F;zxd-res:[镜像版本号]</span><br><span class="line">3. 将镜像推送到Registry</span><br><span class="line">$ sudo docker login --username&#x3D;xiaolaodong11 registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">$ sudo docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com&#x2F;zxd-registry&#x2F;zxd-res:[镜像版本号]</span><br><span class="line">$ sudo docker push registry.cn-shenzhen.aliyuncs.com&#x2F;zxd-registry&#x2F;zxd-res:[镜像版本号]</span><br><span class="line">请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。</span><br><span class="line"></span><br><span class="line">4. 选择合适的镜像仓库地址</span><br><span class="line">从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。</span><br><span class="line"></span><br><span class="line">如果您使用的机器位于经典网络，请使用 registry-internal.cn-shenzhen.aliyuncs.com 作为Registry的域名登录，并作为镜像命名空间前缀。</span><br><span class="line">如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-shenzhen.aliyuncs.com 作为Registry的域名登录，并作为镜像命名空间前缀。</span><br><span class="line">5. 示例</span><br><span class="line">使用&quot;docker tag&quot;命令重命名镜像，并将它通过专有网络地址推送至Registry。</span><br><span class="line"></span><br><span class="line">$ sudo docker images</span><br><span class="line">REPOSITORY                                                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">registry.aliyuncs.com&#x2F;acs&#x2F;agent                                    0.7-dfb6816         37bb9c63c8b2        7 days ago          37.89 MB</span><br><span class="line">$ sudo docker tag 37bb9c63c8b2 registry-vpc.cn-shenzhen.aliyuncs.com&#x2F;acs&#x2F;agent:0.7-dfb6816</span><br><span class="line">使用&quot;docker images&quot;命令找到镜像，将该镜像名称中的域名部分变更为Registry专有网络地址。</span><br><span class="line"></span><br><span class="line">$ sudo docker push registry-vpc.cn-shenzhen.aliyuncs.com&#x2F;acs&#x2F;agent:0.7-dfb6816</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      linux安装docker
    
    </summary>
    
    
      <category term="linux" scheme="http://lazytime.site/categories/linux/"/>
    
    
      <category term="docker" scheme="http://lazytime.site/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>jmeter压力测试学习</title>
    <link href="http://lazytime.site/2020/08/29/jmeter%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://lazytime.site/2020/08/29/jmeter%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-29T14:44:19.428Z</published>
    <updated>2020-08-29T14:51:20.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>jmeter 作为实操性的软件，更注重练习，理论作为参考掌握即可，不需要去具体的纠结</p><a id="more"></a><h1 id="1-目前用的常用测试工具对比"><a href="#1-目前用的常用测试工具对比" class="headerlink" title="1. 目前用的常用测试工具对比"></a>1. 目前用的常用测试工具对比</h1><h2 id="1、loadrunner"><a href="#1、loadrunner" class="headerlink" title="1、loadrunner"></a>1、loadrunner</h2><p>​    性能稳定，压测结果及细粒度大，可以自定义脚本进行压测，但是太过于重大，功能比较繁多</p><p>​    1、loadrunner</p><h2 id="2、apache-ab-单接口压测最方便"><a href="#2、apache-ab-单接口压测最方便" class="headerlink" title="2、apache ab(单接口压测最方便)"></a>2、apache ab(单接口压测最方便)</h2><p>​    模拟多线程并发请求,ab命令对发出负载的计算机要求很低，既不会占用很多CPU，也不会占用太多的内存，但却会给目标服务器造成巨大的负载, 简单DDOS攻击等</p><h2 id="3、webbench"><a href="#3、webbench" class="headerlink" title="3、webbench"></a>3、webbench</h2><p>​    webbench首先fork出多个子进程，每个子进程都循环做web访问测试。子进程把访问的结果通过pipe告诉父进程，父进程做最终的统计结果。</p><h1 id="2-Jmeter基本介绍和使用场景"><a href="#2-Jmeter基本介绍和使用场景" class="headerlink" title="2. Jmeter基本介绍和使用场景"></a>2. Jmeter基本介绍和使用场景</h1><h2 id="1、压测不同的协议和应用"><a href="#1、压测不同的协议和应用" class="headerlink" title="1、压测不同的协议和应用"></a>1、压测不同的协议和应用</h2><p>​    1) Web - HTTP, HTTPS (Java, NodeJS, PHP, <a href="http://ASP.NET" target="_blank" rel="noopener">ASP.NET</a>, …)     2) SOAP / REST Webservices     3) FTP     4) Database via JDBC     5) LDAP 轻量目录访问协议     6) Message-oriented middleware (MOM) via JMS     7) Mail - SMTP(S), POP3(S) and IMAP(S)     8) TCP等等</p><h2 id="2、使用场景及优点"><a href="#2、使用场景及优点" class="headerlink" title="2、使用场景及优点"></a>2、使用场景及优点</h2><p>1）功能测试     </p><p>2）压力测试     </p><p>3）分布式压力测试     </p><p>4）纯java开发     </p><p>5）上手容易，高性能     </p><p>6）提供测试数据分析     </p><p>7）各种报表数据图形展示</p><h1 id="3-本地快速安装Jmeter4-x"><a href="#3-本地快速安装Jmeter4-x" class="headerlink" title="3. 本地快速安装Jmeter4.x"></a>3. 本地快速安装Jmeter4.x</h1><h2 id="1、需要安装JDK8。或者JDK9-JDK10-建议不要使用jre10"><a href="#1、需要安装JDK8。或者JDK9-JDK10-建议不要使用jre10" class="headerlink" title="1、需要安装JDK8。或者JDK9,JDK10 (建议不要使用jre10)"></a>1、需要安装JDK8。或者JDK9,JDK10 (建议不要使用jre10)</h2><h2 id="2、快速下载"><a href="#2、快速下载" class="headerlink" title="2、快速下载"></a>2、快速下载</h2><p>​    windows： <a href="http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.zip" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.zip</a>     </p><p>mac或者linux：<a href="http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.tgz" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.tgz</a></p><h2 id="3、文档地址：http-jmeter-apache-org-usermanual-get-started-html"><a href="#3、文档地址：http-jmeter-apache-org-usermanual-get-started-html" class="headerlink" title="3、文档地址：http://jmeter.apache.org/usermanual/get-started.html"></a>3、文档地址：<a href="http://jmeter.apache.org/usermanual/get-started.html" target="_blank" rel="noopener">http://jmeter.apache.org/usermanual/get-started.html</a></h2><h2 id="4、建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的-keytool工具"><a href="#4、建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的-keytool工具" class="headerlink" title="4、建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的 keytool工具"></a>4、建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的 keytool工具</h2><h1 id="4-jemeter-目录结构"><a href="#4-jemeter-目录结构" class="headerlink" title="4. jemeter 目录结构"></a>4. jemeter 目录结构</h1><h2 id="bin-核心可执行文件，包含配置"><a href="#bin-核心可执行文件，包含配置" class="headerlink" title="bin:核心可执行文件，包含配置"></a>bin:核心可执行文件，包含配置</h2><p>jmeter.bat: windows启动文件：     </p><p>jmeter: mac或者linux启动文件：     </p><p>jmeter-server：mac或者Liunx分布式压测使用的启动文件  </p><p>jmeter-server.bat：mac或者Liunx分布式压测使用的启动文件     </p><p>jmeter.properties: 核心配置文件 </p><h2 id="extras：插件拓展的包"><a href="#extras：插件拓展的包" class="headerlink" title="extras：插件拓展的包"></a>extras：插件拓展的包</h2><p>lib:核心的依赖包     </p><p>ext:核心包     </p><p>junit:单元测试包</p><h1 id="5-改变jmeter的GUI界面语言版本"><a href="#5-改变jmeter的GUI界面语言版本" class="headerlink" title="5. 改变jmeter的GUI界面语言版本"></a>5. 改变jmeter的GUI界面语言版本</h1><h2 id="1、控制台修改"><a href="#1、控制台修改" class="headerlink" title="1、控制台修改"></a>1、控制台修改</h2><p>​    <code>menu -&gt; options -&gt; choose language</code></p><h2 id="2、配置文件修改"><a href="#2、配置文件修改" class="headerlink" title="2、配置文件修改"></a>2、配置文件修改</h2><p>​    <code>bin目录 -&gt; jmeter.properties     默认 #language=en     改为 language=zh_CN</code></p><h1 id="6-jemeter-菜单介绍"><a href="#6-jemeter-菜单介绍" class="headerlink" title="6. jemeter 菜单介绍"></a>6. jemeter 菜单介绍</h1><h2 id="1、添加-gt-threads-gt-线程组（控制总体并发）"><a href="#1、添加-gt-threads-gt-线程组（控制总体并发）" class="headerlink" title="1、添加-&gt;threads-&gt;线程组（控制总体并发）"></a>1、添加-&gt;threads-&gt;线程组（控制总体并发）</h2><ul><li>线程数：虚拟用户数。一个虚拟用户占用一个进程或线程</li><li>准备时长（Ramp-Up Period(in seconds)）：全部线程启动的时长，比如100个线程，20秒，则表示20秒内100个线程都要启动完成，每秒启动5个线程</li><li>循环次数：每个线程发送的次数，假如值为5，100个线程，则会发送500次请求，可以勾选永远循环</li></ul><h2 id="2、线程组-gt-添加-gt-Sampler-采样器-gt-Http-（一个线程组下面可以增加几个Sampler）"><a href="#2、线程组-gt-添加-gt-Sampler-采样器-gt-Http-（一个线程组下面可以增加几个Sampler）" class="headerlink" title="2、线程组-&gt;添加-&gt; Sampler(采样器) -&gt; Http （一个线程组下面可以增加几个Sampler）"></a>2、线程组-&gt;添加-&gt; Sampler(采样器) -&gt; Http （一个线程组下面可以增加几个Sampler）</h2><ul><li>名称：采样器名称</li><li>注释：对这个采样器的描述</li><li>web服务器：<ul><li>默认协议是http</li><li>默认端口是80</li><li>服务器名称或IP ：请求的目标服务器名称或IP地址</li></ul></li><li>路径：服务器URL</li><li><strong>Use multipart/from-data for HTTP POST</strong> ：当发送POST请求时，使用Use multipart/from-data方法发送，默认不选中。</li></ul><h2 id="3、查看测试结果"><a href="#3、查看测试结果" class="headerlink" title="3、查看测试结果"></a>3、查看测试结果</h2><h3 id="线程组-gt-添加-gt-监听器-gt-察看结果树"><a href="#线程组-gt-添加-gt-监听器-gt-察看结果树" class="headerlink" title="线程组-&gt;添加-&gt;监听器-&gt;察看结果树"></a>线程组-&gt;添加-&gt;监听器-&gt;察看结果树</h3><h1 id="7-断言的基本使用"><a href="#7-断言的基本使用" class="headerlink" title="7. 断言的基本使用"></a>7. 断言的基本使用</h1><h2 id="1-增加断言-线程组-gt-添加-gt-断言-gt-响应断言"><a href="#1-增加断言-线程组-gt-添加-gt-断言-gt-响应断言" class="headerlink" title="1. 增加断言: 线程组 -&gt; 添加 -&gt; 断言 -&gt; 响应断言"></a>1. 增加断言: 线程组 -&gt; 添加 -&gt; 断言 -&gt; 响应断言</h2><p>apply to(应用范围):     Main sample only: 仅当前父取样器 进行断言，一般一个请求，如果发一个请求会触发多个，则就有sub sample（比较少用）</p><h2 id="2-要测试的响应字段："><a href="#2-要测试的响应字段：" class="headerlink" title="2.要测试的响应字段："></a>2.要测试的响应字段：</h2><ul><li>响应文本：即响应的数据，比如json等文本</li><li>响应代码：http的响应状态码，比如200，302，404这些</li><li>响应信息：http响应代码对应的响应信息，例如：OK, Found</li><li>Response Header: 响应头</li></ul><h2 id="3-模式匹配规则："><a href="#3-模式匹配规则：" class="headerlink" title="3.模式匹配规则："></a>3.模式匹配规则：</h2><ul><li>包括：包含在里面就成功</li><li>匹配：响应内容完全匹配，不区分大小写</li><li>equals：完全匹配，区分大小写</li></ul><h2 id="4-断言结果监听器-线程组-gt-添加-gt-监听器-gt-断言结果"><a href="#4-断言结果监听器-线程组-gt-添加-gt-监听器-gt-断言结果" class="headerlink" title="4.断言结果监听器: 线程组-&gt; 添加 -&gt; 监听器 -&gt; 断言结果"></a>4.断言结果监听器: 线程组-&gt; 添加 -&gt; 监听器 -&gt; 断言结果</h2><p>里面的内容是sampler采样器的名称     断言失败，查看结果树任务结果颜色标红(通过结果数里面双击不通过的记录，可以看到错误信息)</p><h2 id="5-每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总"><a href="#5-每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总" class="headerlink" title="5.每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总"></a>5.每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总</h2><h1 id="8-Jmeter压测结果聚合报告分析"><a href="#8-Jmeter压测结果聚合报告分析" class="headerlink" title="8. Jmeter压测结果聚合报告分析"></a>8. Jmeter压测结果聚合报告分析</h1><h2 id="1-新增聚合报告：线程组-gt-添加-gt-监听器-gt-聚合报告（Aggregate-Report）"><a href="#1-新增聚合报告：线程组-gt-添加-gt-监听器-gt-聚合报告（Aggregate-Report）" class="headerlink" title="1.新增聚合报告：线程组-&gt;添加-&gt;监听器-&gt;聚合报告（Aggregate Report）"></a>1.新增聚合报告：线程组-&gt;添加-&gt;监听器-&gt;聚合报告（Aggregate Report）</h2><ul><li>lable: sampler的名称</li><li>Samples: 一共发出去多少请求,例如10个用户，循环10次，则是 100</li><li>Average: 平均响应时间</li><li>Median: 中位数，也就是 50％ 用户的响应时间</li><li>90% Line : 90％ 用户的响应不会超过该时间 （90% of the samples took no more than this time. The remaining samples at least as long as this）</li><li>95% Line : 95％ 用户的响应不会超过该时间</li><li>99% Line : 99％ 用户的响应不会超过该时间</li><li>min : 最小响应时间</li><li>max : 最大响应时间</li><li>Error%：错误的请求的数量/请求的总数</li><li><strong>Throughput： 吞吐量——默认情况下表示每秒完成的请求数（Request per Second) 可类比为qps     KB/Sec: 每秒接收数据量</strong></li></ul><h2 id="2-为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用-比如服务器地址"><a href="#2-为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用-比如服务器地址" class="headerlink" title="2.为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用(比如服务器地址)"></a>2.为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用(比如服务器地址)</h2><h3 id="1、线程组-gt-add-gt-Config-Element-配置原件-gt-User-Definde-Variable（用户定义的变量）"><a href="#1、线程组-gt-add-gt-Config-Element-配置原件-gt-User-Definde-Variable（用户定义的变量）" class="headerlink" title="1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; User Definde Variable（用户定义的变量）"></a>1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; User Definde Variable（用户定义的变量）</h3><h3 id="2、引用方式-XXX-，在接口中变量中使用"><a href="#2、引用方式-XXX-，在接口中变量中使用" class="headerlink" title="2、引用方式${XXX}，在接口中变量中使用"></a>2、引用方式${XXX}，在接口中变量中使用</h3><h3 id="3、原始查看结果树和非原生查看（基础按钮）"><a href="#3、原始查看结果树和非原生查看（基础按钮）" class="headerlink" title="3、原始查看结果树和非原生查看（基础按钮）"></a>3、原始查看结果树和非原生查看（基础按钮）</h3><h1 id="9-CSV可变参数压测（重要）"><a href="#9-CSV可变参数压测（重要）" class="headerlink" title="9. CSV可变参数压测（重要）"></a>9. CSV可变参数压测（重要）</h1><p><strong>实战操作jmeter读取CSV和Txt文本文件里面的参数进行压测</strong></p><h2 id="1、线程组-gt-add-gt-Config-Element-配置原件-gt-CSV-data-set-config-CSV数据文件设置"><a href="#1、线程组-gt-add-gt-Config-Element-配置原件-gt-CSV-data-set-config-CSV数据文件设置" class="headerlink" title="1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; CSV data set config (CSV数据文件设置)"></a>1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; CSV data set config (CSV数据文件设置)</h2><h2 id="2、在读取的配置文件里面，同时使用多个自定义参数"><a href="#2、在读取的配置文件里面，同时使用多个自定义参数" class="headerlink" title="2、在读取的配置文件里面，同时使用多个自定义参数"></a>2、在读取的配置文件里面，同时使用多个自定义参数</h2><p>如果是多个参数需要同时引用，则在CSV数据文件里面设置加多个字段 Variabled names(comma-delitited): csv_name,csv_pwd</p><h1 id="10、JDBC-request压测Mysql"><a href="#10、JDBC-request压测Mysql" class="headerlink" title="10、JDBC request压测Mysql"></a>10、JDBC request压测Mysql</h1><h2 id="1、Thread-Group-gt-add-gt-sampler-gt-jdbc-request"><a href="#1、Thread-Group-gt-add-gt-sampler-gt-jdbc-request" class="headerlink" title="1、Thread Group -&gt; add -&gt; sampler -&gt; jdbc request"></a>1、Thread Group -&gt; add -&gt; sampler -&gt; jdbc request</h2><h2 id="2、jar包添加-mysql-connector-java-5-1-30-jar"><a href="#2、jar包添加-mysql-connector-java-5-1-30-jar" class="headerlink" title="2、jar包添加 mysql-connector-java-5.1.30.jar"></a>2、jar包添加 mysql-connector-java-5.1.30.jar</h2><h2 id="3、JDBC-connection-Configuration-配置"><a href="#3、JDBC-connection-Configuration-配置" class="headerlink" title="3、JDBC connection Configuration 配置"></a>3、JDBC connection Configuration 配置</h2><p><strong>JDBC request-&gt;add -&gt; config element -&gt; JDBC connection configuration</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">核心配置</span><br><span class="line">Max Number of connections : 最大连接数</span><br><span class="line">MAX wait :最大等待时间</span><br><span class="line">Auto Commit: 是否自动提交事务</span><br><span class="line"></span><br><span class="line">DataBase URL : 数据库连接地址 jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;blog</span><br><span class="line">JDBC Driver Class : 数据库驱动，选择对应的mysql</span><br><span class="line">username:数据库用户名</span><br><span class="line">password:数据库密码</span><br></pre></td></tr></table></figure><h1 id="11-request压测Mysql-select语句"><a href="#11-request压测Mysql-select语句" class="headerlink" title="11. request压测Mysql, select语句"></a>11. request压测Mysql, select语句</h1><ul><li>个人测试1</li></ul><p>\</p><ul><li>个人测试2<ul><li>注意：需要添加一个全局的debug采集器采集查询结果</li><li>可以看到如图所示结果</li></ul></li></ul><h2 id="1-Debug-Sampler使用（结果树中查看）"><a href="#1-Debug-Sampler使用（结果树中查看）" class="headerlink" title="1. Debug Sampler使用（结果树中查看）"></a>1. Debug Sampler使用（结果树中查看）</h2><p>​    Thread Group -&gt; add -&gt; sampler -&gt; debug sampler</p><h2 id="2-参数讲解：-sql结尾不要加”-”"><a href="#2-参数讲解：-sql结尾不要加”-”" class="headerlink" title="2. 参数讲解：(sql结尾不要加”;”)"></a>2. 参数讲解：(sql结尾不要加”;”)</h2><ul><li>variable name of pool declared in JDBC connection configuration（和配置文件同名）</li><li>Query Type 查询类型</li><li>parameter values 参数值</li><li>parameter types 参数类型</li><li>variable names sql执行结果变量名</li><li>result variable names 所有结果当做一个对象存储</li><li>query timeouts 查询超时时间</li><li>handle results 处理结果集</li></ul><h1 id="12-分布式压测（学习重点）"><a href="#12-分布式压测（学习重点）" class="headerlink" title="12. 分布式压测（学习重点）"></a>12. 分布式压测（学习重点）</h1><p>官网教程： <a href="http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html" target="_blank" rel="noopener">http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html</a></p><ul><li>普通压测：单台机可以对目标机器产生的压力比较小，受限因素包括CPU，网络，IO等</li><li>分布式压测：利用多台机器向目标机器产生压力，模拟几万用户并发访问</li></ul><h1 id="13-Jmeter分布式压测原理-了解"><a href="#13-Jmeter分布式压测原理-了解" class="headerlink" title="13. Jmeter分布式压测原理(了解)"></a>13. Jmeter分布式压测原理(了解)</h1><p>1、总控机器的节点master，其他产生压力的机器叫“肉鸡” server</p><p>2、master会把压测脚本发送到 server上面</p><p>3、执行的时候，server上只需要把jmeter-server打开就可以了，不用启动jmeter</p><p>4、结束后，server会把压测数据回传给master,然后master汇总输出报告</p><p>5、配置详情</p><h1 id="14-阿里云安装jmeter-守护进程：nohup-java-jar-xxxxx-amp"><a href="#14-阿里云安装jmeter-守护进程：nohup-java-jar-xxxxx-amp" class="headerlink" title="14. 阿里云安装jmeter (守护进程：nohup java -jar xxxxx &amp;)"></a>14. 阿里云安装jmeter (守护进程：nohup java -jar xxxxx &amp;)</h1><h2 id="1-下载方式：wget-http-apache-osuosl-org-jmeter-binaries-apache-jmeter-4-0-tgz"><a href="#1-下载方式：wget-http-apache-osuosl-org-jmeter-binaries-apache-jmeter-4-0-tgz" class="headerlink" title="1. 下载方式：wget http://apache.osuosl.org//jmeter/binaries/apache-jmeter-4.0.tgz"></a>1. 下载方式：wget <a href="http://apache.osuosl.org//jmeter/binaries/apache-jmeter-4.0.tgz" target="_blank" rel="noopener">http://apache.osuosl.org//jmeter/binaries/apache-jmeter-4.0.tgz</a></h2><h2 id="2-直接到官网下载对应tag-gz包，并在服务器解压"><a href="#2-直接到官网下载对应tag-gz包，并在服务器解压" class="headerlink" title="2. 直接到官网下载对应tag.gz包，并在服务器解压"></a>2. 直接到官网下载对应tag.gz包，并在服务器解压</h2><h1 id="15-Jmeter非GUI界面-参数讲解-必须掌握"><a href="#15-Jmeter非GUI界面-参数讲解-必须掌握" class="headerlink" title="15. Jmeter非GUI界面 参数讲解(必须掌握)"></a>15. Jmeter非GUI界面 参数讲解(必须掌握)</h1><p>官方配置文件地址： <a href="http://jmeter.apache.org/usermanual/get-started.html" target="_blank" rel="noopener">http://jmeter.apache.org/usermanual/get-started.html</a></p><ul><li><strong>-h</strong> 帮助</li><li><strong>-n</strong> 非GUI模式</li><li><strong>-t</strong> 指定要运行的 JMeter 测试脚本文件</li><li><strong>-l</strong> 记录结果的文件 每次运行之前，(要确保之前没有运行过,即xxx.jtl不存在，不然报错)</li><li><strong>-r</strong> Jmter.properties文件中指定的所有远程服务器</li><li><strong>-e</strong> 在脚本运行结束后生成html报告</li><li><strong>-o</strong> 用于存放html报告的目录（目录要为空，不然报错）</li></ul><p>jmeter -n -t linux_users_api.jmx -l result.jtl -e -o /usr/local/softwate/jmeter/temp/ResultReport</p><p>jmeter -n -t /Users/jack/Desktop/linux_users_api.jmx -l result.jtl -e -o /Users/jack/Desktop/person/jmeter/temp</p><p>个人： /usr/local/software/jmeter/project/temp 。。。。</p><h2 id="1-阿里云非GUI-jmeter-压测"><a href="#1-阿里云非GUI-jmeter-压测" class="headerlink" title="1.阿里云非GUI jmeter 压测"></a>1.阿里云非GUI jmeter 压测</h2><p>jmx目录：/usr/local/software/jmeter/temp</p><p>示例</p><p>jmeter -n -t /usr/local/software/jmeter/temp/linux_users_api.jmx -l /usr/local/software/jmeter/temp/jtl/result.jtl</p><p>利用软件从阿里云Centos服务器下载压测报告，讲解Jtl文件，并怎么查看文件 可以通过打开jmeter，新建线程组-&gt;summary report-&gt;浏览文件 进行查看</p><h2 id="2-讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确"><a href="#2-讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确" class="headerlink" title="2.讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确"></a>2.讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确</h2><p>1、使用非GUI模式：jmeter -n -t test.jmx -l result.jtl</p><p>2、少使用Listener， 如果使用-l参数，它们都可以被删除或禁用。</p><p>3、在加载测试期间不要使用“查看结果树”或“查看结果”表监听器，只能在脚本阶段使用它们来调试脚本。</p><p>4、包含控制器在这里没有帮助，因为它将文件中的所有测试元素添加到测试计划中。]</p><p>5、不要使用功能模式,使用CSV输出而不是XML</p><p>6、只保存你需要的数据,尽可能少地使用断言</p><p>7、如果测试需要大量数据，可以提前准备好测试数据放到数据文件中，以CSV Read方式读取。</p><p>8、用内网压测，减少其他带宽影响压测结果</p><p>9、如果压测大流量，尽量用多几个节点以非GUI模式向服务器施压</p><p>官方推荐 ：<a href="http://jakarta.apache.org/jmeter/usermanual/best-practices.html#lean_mean" target="_blank" rel="noopener">http://jakarta.apache.org/jmeter/usermanual/best-practices.html#lean_mean</a></p><h2 id="3-把Jmtere压测结果转换为Html"><a href="#3-把Jmtere压测结果转换为Html" class="headerlink" title="3. 把Jmtere压测结果转换为Html"></a>3. 把Jmtere压测结果转换为Html</h2><p>jmeter -n -t /usr/local/software/jmeter/temp/linux_users_api.jmx -l /usr/local/software/jmeter/temp/jtl/result.jtl -e -o /usr/local/software/jmeter/temp/result讲解压测报告 html里面Dashboard的核心指标</p><h3 id="1、dashboard讲解"><a href="#1、dashboard讲解" class="headerlink" title="1、dashboard讲解"></a>1、dashboard讲解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1）Test and Report informations</span><br><span class="line">Source file：jtl文件名</span><br><span class="line">Start Time ：压测开始时间</span><br><span class="line">End Time ：压测结束时间</span><br><span class="line">Filter for display：过滤器</span><br><span class="line">Lable:sampler采样器名称</span><br><span class="line"></span><br><span class="line">2）APDEX(Application performance Index)</span><br><span class="line">apdex:应用程序性能指标,范围在0~1之间，1表示达到所有用户均满意</span><br><span class="line">T(Toleration threshold)：可接受阀值</span><br><span class="line">F(Frustration threshold)：失败阀值</span><br><span class="line"></span><br><span class="line">3）Requests Summary</span><br><span class="line">OK:成功率</span><br><span class="line">KO:失败率</span><br><span class="line">4）Statistics 统计数据</span><br><span class="line">lable:sampler采样器名称</span><br><span class="line"></span><br><span class="line">samples:请求总数，并发数*循环次数</span><br><span class="line">KO:失败次数</span><br><span class="line">Error%:失败率</span><br><span class="line"></span><br><span class="line">Average:平均响应时间</span><br><span class="line">Min:最小响应时间</span><br><span class="line">Max:最大响应时间</span><br><span class="line">90th pct: 90%的用户响应时间不会超过这个值（关注这个就可以了）</span><br><span class="line">2ms,3ms,4,5,2,6,8,3,9</span><br><span class="line"></span><br><span class="line">95th pct: 95%的用户响应时间不会超过这个值</span><br><span class="line">99th pct: 99%的用户响应时间不会超过这个值 (存在极端值)</span><br><span class="line">throughtput:Request per Second吞吐量 qps</span><br><span class="line"></span><br><span class="line">received:每秒从服务器接收的数据量</span><br><span class="line">send：每秒发送的数据量</span><br></pre></td></tr></table></figure><h3 id="2、charts讲解"><a href="#2、charts讲解" class="headerlink" title="2、charts讲解"></a>2、charts讲解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1)Over Time（随着时间的变化）</span><br><span class="line">Response Times Over Time：响应时间变化趋势</span><br><span class="line">Response Time Percentiles Over Time (successful responses)：最大，最小，平均，用户响应时间分布</span><br><span class="line">Active Threads Over Time：并发用户数趋势</span><br><span class="line">Bytes Throughput Over Time：每秒接收和请求字节数变化，蓝色表示发送，黄色表示接受</span><br><span class="line">Latencies Over Time：平均响应延时趋势</span><br><span class="line">Connect Time Over Time：连接耗时趋势</span><br><span class="line"></span><br><span class="line">1)Throughput</span><br><span class="line">Hits Per Second (excluding embedded resources):每秒点击次数</span><br><span class="line">Codes Per Second (excluding embedded resources)：每秒状态码数量</span><br><span class="line">Transactions Per Second：即TPS，每秒事务数</span><br><span class="line">Response Time Vs Request：响应时间和请求数对比</span><br><span class="line">Latency Vs Request：延迟时间和请求数对比</span><br><span class="line"></span><br><span class="line">1)Response Times</span><br><span class="line">Response Time Percentiles：响应时间百分比</span><br><span class="line">Response Time Overview：响应时间概述</span><br><span class="line">Time Vs Threads：活跃线程数和响应时间</span><br><span class="line">Response Time Distribution：响应时间分布图</span><br></pre></td></tr></table></figure><h1 id="16、Linux服务器上jmeter进行分布式压测"><a href="#16、Linux服务器上jmeter进行分布式压测" class="headerlink" title="16、Linux服务器上jmeter进行分布式压测"></a>16、Linux服务器上jmeter进行分布式压测</h1><h2 id="1、压测注意事项"><a href="#1、压测注意事项" class="headerlink" title="1、压测注意事项"></a>1、压测注意事项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">the firewalls on the systems are turned off or correct ports are opened.</span><br><span class="line">系统上的防火墙被关闭或正确的端口被打开。</span><br><span class="line"></span><br><span class="line">all the clients are on the same subnet.</span><br><span class="line">所有的客户端都在同一个子网上。</span><br><span class="line"></span><br><span class="line">the server is in the same subnet, if 192.x.x.x or 10.x.x.x IP addresses are used. If the server doesn&#39;t use 192.xx or 10.xx IP address, there shouldn&#39;t be any problems.</span><br><span class="line">如果使用192.x.x.x或10.x.x.x IP地址，则服务器位于同一子网中。 如果服务器不使用192.xx或10.xx IP地址，则不应该有任何问题。</span><br><span class="line"></span><br><span class="line">Make sure JMeter can access the server.</span><br><span class="line">确保JMeter可以访问服务器。</span><br><span class="line"></span><br><span class="line">Make sure you use the same version of JMeter and Java on all the systems. Mixing versions will not work correctly.</span><br><span class="line">确保在所有系统上使用相同版本的JMeter和Java。 混合版本将无法正常工作。</span><br><span class="line"></span><br><span class="line">You have setup SSL for RMI or disabled it.</span><br><span class="line">您已为RMI设置SSL或将其禁用。</span><br><span class="line"></span><br><span class="line">官网地址 http:&#x2F;&#x2F;jmeter.apache.org&#x2F;usermanual&#x2F;jmeter_distributed_testing_step_by_step.html</span><br><span class="line"></span><br><span class="line">压测注意事项：一定要用内网IP，不用用公网IP,用ping去检查</span><br></pre></td></tr></table></figure><h2 id="2、专业名字"><a href="#2、专业名字" class="headerlink" title="2、专业名字"></a>2、专业名字</h2><p>master:司令 slave：</p><p>奴隶 target：目标</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>地址：<a href="http://jmeter.apache.org/images/screenshots/distributed-names.svg" target="_blank" rel="noopener">http://jmeter.apache.org/images/screenshots/distributed-names.svg</a> </p><p>地址：<a href="http://jmeter.apache.org/images/screenshots/distributed-jmeter.svg" target="_blank" rel="noopener">http://jmeter.apache.org/images/screenshots/distributed-jmeter.svg</a></p><h2 id="3、远程拷贝-内网地址-："><a href="#3、远程拷贝-内网地址-：" class="headerlink" title="3、远程拷贝(内网地址)："></a>3、远程拷贝(内网地址)：</h2><p>scp -r /usr/local/software/jdk-8u141-linux-x64.tar.gz <a href="http://mailto:root@172.18.230.233" target="_blank" rel="noopener">root@172.18.230.233</a>:/usr/local/software</p><p>scp -r /usr/local/software/jmeter/apache-jmeter-4.0.tgz <a href="http://mailto:root@172.18.230.233" target="_blank" rel="noopener">root@172.18.230.233</a>:/usr/local/software/jmeter</p><h2 id="4、启动"><a href="#4、启动" class="headerlink" title="4、启动"></a>4、启动</h2><p>./jmeter-server 或者 nohup ./jmeter-server &amp;</p><h2 id="5、检查启动是否成功"><a href="#5、检查启动是否成功" class="headerlink" title="5、检查启动是否成功"></a>5、检查启动是否成功</h2><p>ps -ef|grep jmeter-server</p><p>ps aux|grep jmeter-server</p><h1 id="17、Jmeter分布式压测"><a href="#17、Jmeter分布式压测" class="headerlink" title="17、Jmeter分布式压测"></a>17、Jmeter分布式压测</h1><h2 id="本地非GUI分布式压测-r"><a href="#本地非GUI分布式压测-r" class="headerlink" title="本地非GUI分布式压测 -r"></a>本地非GUI分布式压测 -r</h2><p>jmeter -n -t /Users/jack/Desktop/remote.jmx -r -l /Users/jack/Desktop/jtl/result.jtl -e -o /Users/jack/Desktop/result</p><h2 id="压测结果"><a href="#压测结果" class="headerlink" title="压测结果"></a>压测结果</h2><p>./jmeter -n -t /Users/jack/Desktop/remote.jmx -r -l /Users/jack/Desktop/jtl/result.jtl -e -o /Users/jack/Desktop/result</p><h2 id="压测报告"><a href="#压测报告" class="headerlink" title="压测报告"></a>压测报告</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Creating summariser &lt;summary&gt;</span><br><span class="line">Created the tree successfully using &#x2F;Users&#x2F;jack&#x2F;Desktop&#x2F;remote.jmx</span><br><span class="line">Configuring remote engine: 172.20.10.3:8899</span><br><span class="line">Using local port: 8899</span><br><span class="line">Configuring remote engine: 172.20.10.11:8899</span><br><span class="line">Starting remote engines</span><br><span class="line">Starting the test @ Thu Mar 29 23:21:13 CST 2018 (1522336873931)</span><br><span class="line">Remote engines have been started</span><br><span class="line">Waiting for possible Shutdown&#x2F;StopTestNow&#x2F;Heapdump message on port 4445</span><br><span class="line">summary &#x3D;      4 in 00:00:22 &#x3D;    0.2&#x2F;s Avg:  5582 Min:    94 Max: 21006 Err:     1 (25.00%)</span><br><span class="line">Tidying up remote @ Thu Mar 29 23:21:36 CST 2018 (1522336896842)</span><br><span class="line">... end of run</span><br></pre></td></tr></table></figure><h2 id="压测修改master节点信息"><a href="#压测修改master节点信息" class="headerlink" title="压测修改master节点信息"></a>压测修改master节点信息</h2><p>jemeter.properties 值是slave机器的ip+端口号，如果有多个，用逗号分隔 remote_hosts=192.168.0.102:8899,192.168.0.101:8899 server.rmi.ssl.disable=true (前面有说到)</p><h2 id="启动slave机器，注意要同个网段，ip地址用内网ip"><a href="#启动slave机器，注意要同个网段，ip地址用内网ip" class="headerlink" title="启动slave机器，注意要同个网段，ip地址用内网ip"></a>启动slave机器，注意要同个网段，ip地址用内网ip</h2><p>./jmeter-server Using local port: 8899 Created remote object: UnicastServerRef2 [liveRef: [endpoint:<a href="http://local" target="_blank" rel="noopener">192.168.0.102:8899</a>,objID:[3a585a4d:162724586ab:-7fff, 3963132813614033916]]]</p><h2 id="相关资料："><a href="#相关资料：" class="headerlink" title="相关资料："></a>相关资料：</h2><p><a href="https://www.cnblogs.com/Fine-Chan/p/6233823.html" target="_blank" rel="noopener">https://www.cnblogs.com/Fine-Chan/p/6233823.html</a> <a href="https://blog.csdn.net/liujingqiu/article/details/52635289https://www.cnblogs.com/puresoul/p/4844539.html" target="_blank" rel="noopener">https://blog.csdn.net/liujingqiu/article/details/52635289https://www.cnblogs.com/puresoul/p/4844539.html</a></p><h1 id="18-、测试基本内容"><a href="#18-、测试基本内容" class="headerlink" title="18.、测试基本内容"></a>18.、测试基本内容</h1><p><strong>配置元件=》前置处理器=》定时器=》采样器=》后置处理器=》断言=》监听器</strong></p><h1 id="19、安装常见问题"><a href="#19、安装常见问题" class="headerlink" title="19、安装常见问题"></a>19、安装常见问题</h1><h2 id="1、问题：无法解析"><a href="#1、问题：无法解析" class="headerlink" title="1、问题：无法解析"></a>1、问题：无法解析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz95j86y235aroi85ht0Z bin]# .&#x2F;jmeter-server</span><br><span class="line">Created remote object: UnicastServerRef2 [liveRef: [endpoint:[:39308](local),objID:[24e78a63:16243c70661:-7fff, 7492480871343944173]]]</span><br><span class="line">Server failed to start: java.rmi.RemoteException: Cannot start. Unable to get local host IP address.; nested exception is:</span><br><span class="line">java.net.UnknownHostException: iZwz95j86y235aroi85ht0Z: iZwz95j86y235aroi85ht0Z: Name or service not known</span><br><span class="line">An error occurred: Cannot start. Unable to get local host IP address.; nested exception is:</span><br><span class="line">java.net.UnknownHostException: iZwz95j86y235aroi85ht0Z: iZwz95j86y235aroi85ht0Z: Name or service not known</span><br></pre></td></tr></table></figure><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hostname  命令获取机器名称，追加一个映射  iZwz95j86y235aroi85ht0Z</span><br><span class="line">vim &#x2F;etc&#x2F;hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">120.79.160.143 iZwz95j86y235aroi85ht0Z</span><br><span class="line"></span><br><span class="line">windows用户 修改c:\windows\system32\drivers\etc\hosts文件，增加一条域名 与IP的映射</span><br></pre></td></tr></table></figure><h2 id="2-问题：禁用了SSL"><a href="#2-问题：禁用了SSL" class="headerlink" title="2.问题：禁用了SSL"></a>2.问题：禁用了SSL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz95j86y235aroi85ht0Z bin]# .&#x2F;jmeter-server</span><br><span class="line">Server failed to start: java.rmi.server.ExportException: Listen failed on port: 0; nested exception is:</span><br><span class="line">java.io.FileNotFoundException: rmi_keystore.jks (No such file or directory)</span><br><span class="line">An error occurred: Listen failed on port: 0; nested exception is:</span><br><span class="line">java.io.FileNotFoundException: rmi_keystore.jks (No such file or directory)</span><br></pre></td></tr></table></figure><h3 id="解决：-1"><a href="#解决：-1" class="headerlink" title="解决："></a>解决：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">拥有RMI over SSL的有效密钥库，或者禁用了SSL。</span><br><span class="line">1、禁用SSL</span><br><span class="line">  jmeter.property里面 server.rmi.ssl.disable 改为 true，表示禁用</span><br></pre></td></tr></table></figure><h2 id="3、问题："><a href="#3、问题：" class="headerlink" title="3、问题："></a>3、问题：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ949uw2xehZ bin]# .&#x2F;jmeter</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error&#x3D;&#39;Cannot allocate memory&#39; (errno&#x3D;12)</span><br><span class="line">#</span><br><span class="line"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"># Native memory allocation (mmap) failed to map 1073741824 bytes for committing reserved memory.</span><br><span class="line"># An error report file with more information is saved as:</span><br><span class="line"># &#x2F;usr&#x2F;local&#x2F;jmeter&#x2F;apache-jmeter-4.0&#x2F;bin&#x2F;hs_err_pid5855.log</span><br></pre></td></tr></table></figure><h3 id="解决：-2"><a href="#解决：-2" class="headerlink" title="解决："></a>解决：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">编辑jmeter</span><br><span class="line">搜索 : &quot;$&#123;HEAP:&#x3D;&quot;-Xms1g -Xmx1g -XX:MaxMetaspaceSize&#x3D;256m&quot;&#125;&quot;</span><br><span class="line">改变初始堆内存和最大堆内存</span><br></pre></td></tr></table></figure><h2 id="4、仅修改-server-port-即可-下面两者一样"><a href="#4、仅修改-server-port-即可-下面两者一样" class="headerlink" title="4、仅修改 server_port 即可,下面两者一样"></a>4、仅修改 server_port 即可,下面两者一样</h2><p>server.rmi.localport=8899 表示slave server启动显示的端口</p><p>server_port=8899 表示master机器要远程连接的端口 即 remote_hosts=xxxx:8899</p><h2 id="5、—–"><a href="#5、—–" class="headerlink" title="5、—–"></a>5、—–</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- jmeter 分布式性能测试（多网卡配置） --&gt;</span><br><span class="line">我们要在多网卡的服务器上开启RMI服务的话必须指定IP，使他们能够在同一个网段内。 </span><br><span class="line"></span><br><span class="line">需要以下几步（假定所有机器都在10.120.11.*网段,agent服务器为linux,controller服务器为windows）：</span><br><span class="line"></span><br><span class="line">1、 修改agent服务器，指定agent机器的IP</span><br><span class="line">修改jmeter-server文件</span><br><span class="line"># vi jmeter-server</span><br><span class="line">修改RMI_HOST_DEF&#x3D;-Djava.rmi.server.hostname&#x3D;xxx.xxx.xxx.xxx(需要连接的IP)</span><br><span class="line"></span><br><span class="line">2、修改server服务器，指定server机器的IP</span><br><span class="line"></span><br><span class="line">修改jmeter.bat文件 </span><br><span class="line"></span><br><span class="line">新增set rmi_host&#x3D;-Djava.rmi.server.hostname&#x3D;10.120.11.214</span><br><span class="line"></span><br><span class="line">修改set ARGS&#x3D;%DUMP% %HEAP% %NEW% %SURVIVOR% %TENURING% %PERM% %DDRAW% %rmi_host%</span><br></pre></td></tr></table></figure><h2 id="6、确定在controller机器上安装jdk-版本和jmeter一致，配置环境变量：Java-home等"><a href="#6、确定在controller机器上安装jdk-版本和jmeter一致，配置环境变量：Java-home等" class="headerlink" title="6、确定在controller机器上安装jdk,版本和jmeter一致，配置环境变量：Java_home等"></a>6、确定在controller机器上安装jdk,版本和jmeter一致，配置环境变量：Java_home等</h2><ul><li>在Agent机器上安装jdk，配置环境变量：Java_home和JMeter_home</li><li>安装目录不要带空格，最好都是简短的英文路径</li></ul><h2 id="7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。"><a href="#7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。" class="headerlink" title="7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。"></a>7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果使用csv进行参数化，则需要把参数文件在每台slave上拷一份且路径需要设置成一样的。</span><br><span class="line"></span><br><span class="line">总样本数 &#x3D; 线程数 * 循环次数 * 执行机总数</span><br></pre></td></tr></table></figure><h2 id="8、连接失败原因排查"><a href="#8、连接失败原因排查" class="headerlink" title="8、连接失败原因排查"></a>8、连接失败原因排查</h2><h4 id="以下步骤进行排查："><a href="#以下步骤进行排查：" class="headerlink" title="以下步骤进行排查："></a>以下步骤进行排查：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. jmeter-server是否启动；</span><br><span class="line">2. 是否联网</span><br><span class="line">3. ping 服务器IP是否畅通.</span><br><span class="line">4. telnet 端口 192.168.3.10 1099</span><br><span class="line">5. 检查服务器的防火墙是否关闭。</span><br><span class="line">6. 阿里云安全策略是否正常</span><br></pre></td></tr></table></figure><h2 id="9、”could-not-find-ApacheJmeter-core-jar”"><a href="#9、”could-not-find-ApacheJmeter-core-jar”" class="headerlink" title="9、”could not find ApacheJmeter_core.jar”"></a>9、”could not find ApacheJmeter_core.jar”</h2><p>​    <strong>解决：在Agent机器安装jdk，并设置环境变量</strong></p><h2 id="10、”Bad-call-to-remote-host”"><a href="#10、”Bad-call-to-remote-host”" class="headerlink" title="10、”Bad call to remote host”"></a>10、”Bad call to remote host”</h2><p>解决：检查被控制机器上的jmeter-server有没有启动，或者remote_hosts的配置是否正确。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      学习如何使用jmeter压力测试
    
    </summary>
    
    
      <category term="压力测试" scheme="http://lazytime.site/categories/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="jmeter" scheme="http://lazytime.site/tags/jmeter/"/>
    
  </entry>
  
</feed>
