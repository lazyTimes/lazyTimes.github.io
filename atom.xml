<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LazyTimes的博客</title>
  
  <subtitle>生死有命，富贵在天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lazytime.site/"/>
  <updated>2020-11-29T12:02:12.244Z</updated>
  <id>https://lazytime.site/</id>
  
  <author>
    <name>阿东</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis学习 - 复制以及三种部署模式</title>
    <link href="https://lazytime.site/2020/11/29/redis_copy/"/>
    <id>https://lazytime.site/2020/11/29/redis_copy/</id>
    <published>2020-11-29T11:59:01.000Z</published>
    <updated>2020-11-29T12:02:12.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis学习-复制以及三种部署模式"><a href="#Redis学习-复制以及三种部署模式" class="headerlink" title="Redis学习 - 复制以及三种部署模式"></a>Redis学习 - 复制以及三种部署模式</h1><h2 id="什么是复制"><a href="#什么是复制" class="headerlink" title="什么是复制"></a>什么是复制</h2><p>单机的redis通常情况是无法满足项目需求的，一般都建议使用集群部署的方式进行数据的多机备份和部署，这样既可以保证数据安全，同时在redis宕机的时候，复制也可以对于数据进行快速的修复。</p><a id="more"></a><h2 id="采取的方式"><a href="#采取的方式" class="headerlink" title="采取的方式"></a>采取的方式</h2><ol><li>单机部署（忽略）</li><li>主从链</li><li>一主多从</li><li>哨兵模式</li><li>集群模式</li></ol><h2 id="复制的前提"><a href="#复制的前提" class="headerlink" title="复制的前提"></a>复制的前提</h2><ol><li>需要保证<code>redis.conf</code>里面的配置是正确的，比如：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dir .&#x2F;</span><br><span class="line">dbfilename &quot;dump.rdb&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>需要保证指定的路径对于redis来说是<strong>可写</strong>的，意味着如果当前目录没有写权限同样会失败</li></ol><h2 id="从服务器连接主服务器的几种方式"><a href="#从服务器连接主服务器的几种方式" class="headerlink" title="从服务器连接主服务器的几种方式"></a>从服务器连接主服务器的几种方式</h2><ol><li>在从服务器的配置文件里面配置连接那个主服务器：</li></ol><p>连接的具体配置如下：</p><blockquote><p>在5.0版本中使用了<code>replicaof</code>代替了<code>slaveof</code>（<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FudGlyZXovcmVkaXMvaXNzdWVzLzUzMzU=" title="https://github.com/antirez/redis/issues/5335">github.com/antirez/red…<i class="fa fa-external-link"></i></span>），<code>slaveof</code>还可以继续使用，不过建议使用<code>replicaof</code></p></blockquote><p>下面是个人的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># replicaof &lt;masterip&gt; &lt;masterport&gt; </span></span><br><span class="line"><span class="attr">replicaof</span> <span class="string">127.0.0.1 16379</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>警告</strong>：此小节只说明了这一个配置的更改，进行主从配置的时候还有其他几个参数需要更改，这里只作为部分内容参考</p></blockquote><ol start="2"><li>在启动的适合，在<strong>redis从服务器</strong>的redis-cli当中敲击如下的命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16380&gt; slaveof 127.0.0.1 16379</span><br><span class="line">OK Already connected to specified master</span><br></pre></td></tr></table></figure><p>这样就可以在从服务器动态的指定要连接哪个主服务器了，但是这种配置是<strong>当前运行时有效</strong>，下次再次进入的时候，会根据配置文件进行配置或者按照默认的规则当前实例就是<strong>master</strong>3. </p><ol start="3"><li>在从服务器执行<code>slaveof no one</code>，当前实例脱离控制自动成为<code>master</code></li></ol><h2 id="redis-复制启动的过程-（重点）"><a href="#redis-复制启动的过程-（重点）" class="headerlink" title="redis 复制启动的过程==（重点）=="></a>redis 复制启动的过程==（重点）==</h2><table><thead><tr><th>主服务器操作</th><th>从服务器操作</th></tr></thead><tbody><tr><td>1. （等待命令）</td><td>1. 连接（重新连接）主服务器，发送<strong>sync</strong>命令</td></tr><tr><td>2. 开始执行bgsave，使用缓冲区记录bgsave之后执行所有写命令</td><td>2. 根据配置选项是使用现有的数据（存在）处理客户端请求，还是向请求的客户端返回错误信息</td></tr><tr><td>3. bgsave执行完毕，向从服务器发送<strong>快照文件</strong>，同时异步执行缓冲区记录的写命令</td><td>3. <strong>丢弃所有的旧数据</strong>，载入主服务器的快照文件</td></tr><tr><td>4.  快照文件发送完毕，开始向着从服务器发送存储在缓冲区的写命令</td><td>4. 完成对于快照的解释操作，恢复日常的请求操作</td></tr><tr><td>5. 缓冲区写命令发送完成，同时现在每执行一个写命令就像从服务器发送相同写命令</td><td>5. 执行主服务器发来的所有存储在缓冲区的写命令，并且从现在开始接受主服务器的每一个命令</td></tr></tbody></table><blockquote><p>建议：由于<strong>bgsave</strong>需要开启进行子线程的创建写入缓冲区的创建，所以最好在系统中预留30% - 45% 内存用于redis的bgsave操作</p></blockquote><blockquote><p>特别注意：当从服务器连接主服务器的那一刻，执行到第三步会<strong>清空</strong>当前redis里面的所有数据。</p></blockquote><h3 id="配置方式和命令方式的区别："><a href="#配置方式和命令方式的区别：" class="headerlink" title="配置方式和命令方式的区别："></a>配置方式和命令方式的区别：</h3><p>redis.conf 配置slaveof 的方式：不会马上进行主服务器同步，而是<strong>先载入当前本地存在的rdb或者aof</strong>到redis中进行数据恢复，然后才开始同步复制</p><p>命令slaveof方式：会<strong>立即</strong>连接主服务器进行同步操作</p><h3 id="关于redis的主主复制"><a href="#关于redis的主主复制" class="headerlink" title="关于redis的主主复制:"></a>关于redis的主主复制:</h3><p>如果我们尝试让两台服务器互相slaveof 那么会出现上面情况呢？</p><p>从上面的复制过程可以看到，当一个服务器slaveof另一个服务器，产生的结果只会是两边相互覆盖，也就是从服务器会去同步主服务器的数据，如果此时按照主主的配置，两边互相同步对方的数据，这样产生的数据可能会不一致，或者数据干脆就是不完整的。不仅如此，这种操作还会大量占用资源区让两台服务器互相知道对方</p><h3 id="当一台服务器连接另一台服务器的时候会发生什么？"><a href="#当一台服务器连接另一台服务器的时候会发生什么？" class="headerlink" title="当一台服务器连接另一台服务器的时候会发生什么？"></a>当一台服务器连接另一台服务器的时候会发生什么？</h3><table><thead><tr><th>当有新服务器连接的时候</th><th>主服务器操作</th></tr></thead><tbody><tr><td>步骤3还没有执行</td><td>所有从服务器都会收到相同的快照文件和相同缓冲区写命令</td></tr><tr><td>步骤3正在执行或者已经执行</td><td>完成了之前同步的五个操作之后，会跟新服务器重新执行一次新的五个步骤</td></tr></tbody></table><h2 id="系统故障处理"><a href="#系统故障处理" class="headerlink" title="系统故障处理"></a>系统故障处理</h2><p>复制和持久化虽然已经基本可以保证系统的数据安全，但是总有意外的情况，比如突然断电断网，系统磁盘故障，服务器宕机等一系列情况，那么会出现各种莫名奇妙的问题，下面针对这些情况说明一下解决方式：</p><h3 id="验证快照文件以及aof文件"><a href="#验证快照文件以及aof文件" class="headerlink" title="验证快照文件以及aof文件"></a>验证快照文件以及aof文件</h3><p>在redis的<code>bin</code>目录下面，存在如下的两个sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr-x 1 root root 9722168 Nov 15 20:53 redis-check-aof</span><br><span class="line">-rwxr-xr-x 1 root root 9722168 Nov 15 20:53 redis-check-rdb</span><br></pre></td></tr></table></figure><p>他们的命令作用和内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ .&#x2F;redis-check-aof </span><br><span class="line">Usage: .&#x2F;redis-check-aof [--fix] &lt;file.aof&gt;</span><br><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ .&#x2F;redis-check-rdb </span><br><span class="line">Usage: .&#x2F;redis-check-rdb &lt;rdb-file-name&gt;</span><br></pre></td></tr></table></figure><p>redis-check-aof：如果加入<code>--fix</code>选项，那么命令会尝试修复aof文件，会将内容里面出现错误的命令以及下面的所有命令清空，一般情况下回清空尾部的一些未完成命令。</p><p>redis-check-rdb：遗憾的是目前这种修复收效甚微。建议在修复rdb的时候，用SHA1和SHA256验证文件是否完整。</p><h3 id="校验和与散列值："><a href="#校验和与散列值：" class="headerlink" title="校验和与散列值："></a>校验和与散列值：</h3><p>redis2.6 之后加入了校验和与散列值进行验证。</p><p>快照文件增加CRC64校验和</p><blockquote><p>什么是crc<strong>循环冗余校验</strong>？</p><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUJFJUFBJUU3JTkyJUIwJUU1JTg2JTk3JUU5JUE0JTk4JUU2JUEwJUExJUU5JUE5JTk3" title="https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E5%86%97%E9%A4%98%E6%A0%A1%E9%A9%97">https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E5%86%97%E9%A4%98%E6%A0%A1%E9%A9%97<i class="fa fa-external-link"></i></span></p></blockquote><h3 id="更换故障主服务器："><a href="#更换故障主服务器：" class="headerlink" title="更换故障主服务器："></a>更换故障主服务器：</h3><ol><li>假设A故障，存在BC两台机器，B为从服务，C为将要替换的主服务器</li><li>向机器B发送save命令，同时创建一个新的快照文件，同步完成之后，发送给C</li><li>机器C上面启动redis,让C成为B的主服务器</li></ol><h3 id="Redis-sentienel-哨兵"><a href="#Redis-sentienel-哨兵" class="headerlink" title="Redis sentienel 哨兵"></a>Redis sentienel 哨兵</h3><p>可以监视指定主服务器以及属下的从服务器</p><p>也就是我们常用的<strong>哨兵模式</strong></p><p>但是随着时代进步，目前使用redis基本还是以<code>cluster模式</code>为主</p><h2 id="redis主从复制模式（redis6-0版本）："><a href="#redis主从复制模式（redis6-0版本）：" class="headerlink" title="redis主从复制模式（redis6.0版本）："></a>redis主从复制模式（redis6.0版本）：</h2><h3 id="前提说明："><a href="#前提说明：" class="headerlink" title="前提说明："></a>前提说明：</h3><p>有条件的可以弄三台虚拟机查看效果，这样模拟出来的效果算是比较真实的。</p><h3 id="三台从服务器以及一台主服务器的配置"><a href="#三台从服务器以及一台主服务器的配置" class="headerlink" title="三台从服务器以及一台主服务器的配置"></a>三台从服务器以及一台主服务器的配置</h3><p>个人的办法是copy一个公用的配置，然后进行修改（这里只列举区别以及改动较多的地方，其他地方根据需要配置）：</p><p>第一台机器的配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_16379.pid</span></span><br><span class="line"><span class="attr">port</span> <span class="string">16379</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump16379.rdb</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">"appendonly16379.aof"</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">"log16379"</span></span><br></pre></td></tr></table></figure><p>第二台机器的配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_16380.pid</span></span><br><span class="line"><span class="attr">port</span> <span class="string">16380</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump16380.rdb</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">"appendonly16380.aof"</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">"log16380"</span></span><br></pre></td></tr></table></figure><p>第三台机器的配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_16381.pid</span></span><br><span class="line"><span class="attr">port</span> <span class="string">16381</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump16381.rdb</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">"appendonly16381.aof"</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">"log16381"</span></span><br></pre></td></tr></table></figure><p>这时候要配置一台主服务器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_10000.pid</span></span><br><span class="line"><span class="attr">port</span> <span class="string">10000</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump10000.rdb</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">"appendonly10000.aof"</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">"log10000"</span></span><br></pre></td></tr></table></figure><h3 id="启动redis一主多从："><a href="#启动redis一主多从：" class="headerlink" title="启动redis一主多从："></a>启动redis一主多从：</h3><p>配置很简单，可以用<strong>手动</strong>进行主从复制，也可以使用<strong>redis.conf</strong>提前配置，具体区别上文已经进行过介绍，这里不再赘述。</p><p>从服务器可以通过命令：<code>slaveof 127.0.0.1 10000</code> 实现主从复制拷贝</p><p>可以通过命令<code>info replication</code> 查看主从配置的信息。</p><p>主服务器启动日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:10000&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:e2a92d8c59fbdde3b162da12f4d74ff28bab4fbb</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:10000&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:3</span><br><span class="line">slave0:ip&#x3D;127.0.0.1,port&#x3D;16381,state&#x3D;online,offset&#x3D;14,lag&#x3D;1</span><br><span class="line">slave1:ip&#x3D;127.0.0.1,port&#x3D;16380,state&#x3D;online,offset&#x3D;14,lag&#x3D;1</span><br><span class="line">slave2:ip&#x3D;127.0.0.1,port&#x3D;16379,state&#x3D;online,offset&#x3D;14,lag&#x3D;1</span><br><span class="line">master_replid:029e455ee6f8fdc0e255b6d5c4f63136d933fb24</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:14</span><br></pre></td></tr></table></figure><p>可以看到进行主从配置之后，当前的目录下面多出了对应备份文件</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201123232149.png" alt=""></p><p>当进行主从配置之后，从服务就无法进行写入了，主服务器才可以写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16379&gt; set key 1</span><br><span class="line">(error) READONLY You can&#39;t write against a read only replica.</span><br></pre></td></tr></table></figure><h4 id="测试一主多从复制："><a href="#测试一主多从复制：" class="headerlink" title="测试一主多从复制："></a>测试一主多从复制：</h4><p>主服务器敲入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:10000&gt; hset key1 name1 value1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:10000&gt; keys *</span><br><span class="line">1) &quot;key1&quot;</span><br></pre></td></tr></table></figure><p>从服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16379&gt; hget key1 name1</span><br><span class="line">&quot;value1&quot;</span><br><span class="line">127.0.0.1:16380&gt; hget key1 name1</span><br><span class="line">&quot;value1&quot;</span><br><span class="line">127.0.0.1:16381&gt; hget key1 name1</span><br><span class="line">&quot;value1&quot;</span><br></pre></td></tr></table></figure><h3 id="主从链"><a href="#主从链" class="headerlink" title="主从链"></a>主从链</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201123134010.png" alt=""></p><p>配置方式：</p><p>和主从配置一样，只不过主节点换为从节点。</p><blockquote><p>注意：主从链的配置依然只能是master节点可以写数据，同时中间的节点也是slave</p></blockquote><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>如何检测磁盘是否写入数据？</p><ol><li>主从服务器通过一个虚标值（unique dummy value）来验证从服务器是否真的把数据写入到自己的磁盘。</li><li>通过命令：<code>info</code>检查结果当中的 <code>aof_appending_bio_fsync</code>的值是否为0:</li></ol><blockquote><p># 5.0 版本之后改为如下形式验证</p><p>repl_backlog_active:0</p></blockquote><h2 id="redis主从哨兵模式（Redis-sentienel）（redis6-0版本）"><a href="#redis主从哨兵模式（Redis-sentienel）（redis6-0版本）" class="headerlink" title="redis主从哨兵模式（Redis sentienel）（redis6.0版本）"></a>redis主从哨兵模式（Redis sentienel）（redis6.0版本）</h2><h3 id="哨兵模式有什么作用："><a href="#哨兵模式有什么作用：" class="headerlink" title="哨兵模式有什么作用："></a>哨兵模式有什么作用：</h3><p>Redis的哨兵模式就是对redis系统进行实时的监控，其主要功能有下面两点</p><p>1.<strong>监测</strong>主数据库和从数据库是否正常运行。</p><p>2.当我们的主数据库出现故障的时候，可以自动将从数据库转换为主数据库，实现<strong>自动的切换</strong>。</p><h3 id="为什么要使用哨兵模式："><a href="#为什么要使用哨兵模式：" class="headerlink" title="为什么要使用哨兵模式："></a>为什么要使用哨兵模式：</h3><ol><li>主从复制在主节点宕机的情况下，需要人工干预恢复redis，无法实现高可用。</li><li>主节点宕机的情况下需要备份数据到新的从节点，然后其他节点将主节点设置为新的redis，需要一次全量复制同步数据的过程</li></ol><h3 id="哨兵模式原理"><a href="#哨兵模式原理" class="headerlink" title="哨兵模式原理"></a>哨兵模式原理</h3><p>主节点故障的时候，由redis sentinel自动完成故障发现和转移</p><h3 id="如何部署哨兵模式："><a href="#如何部署哨兵模式：" class="headerlink" title="如何部署哨兵模式："></a>如何部署哨兵模式：</h3><ol><li>首先按照上一节配置，已经设置了一个主节点三个从节点的配置</li></ol><blockquote><p>下面的配置如下：</p><p>主节点：10000</p><p>从节点1：16379</p><p>从节点2：16380</p><p>从节点3：16381</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ ~]$ ps -ef | grep redis</span><br><span class="line">xd        2964  2910  0 18:02 pts&#x2F;0    00:00:00 grep --color&#x3D;auto redis</span><br><span class="line">root     26412     1  0 Nov23 ?        00:06:07 .&#x2F;redis-server 127.0.0.1:10000</span><br><span class="line">root     26421     1  0 Nov23 ?        00:05:37 .&#x2F;redis-server 127.0.0.1:16379</span><br><span class="line">root     26428     1  0 Nov23 ?        00:05:37 .&#x2F;redis-server 127.0.0.1:16380</span><br><span class="line">root     26435     1  0 Nov23 ?        00:05:37 .&#x2F;redis-server 127.0.0.1:16381</span><br></pre></td></tr></table></figure><ol start="2"><li><code>sentinel.conf</code> 配置文件在安装redis的源码包里面有，所以如果误删了可以下回来然后把文件弄到手，其实可以配置一个常用的或者通用的配置放到自己的本地有需要直接替换</li><li><strong>配置5个sentienl.conf文件（建议奇数个哨兵，方便宕机选举产生新的节点）</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ sudo cp sentinel.conf sentinel_26379.conf</span><br><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ sudo cp sentinel.conf sentinel_26380.conf</span><br><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ sudo cp sentinel.conf sentinel_26381.conf</span><br><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ sudo cp sentinel.conf sentinel_10000.conf</span><br></pre></td></tr></table></figure><ol start="4"><li>四个配置文件的改动依次如下：</li></ol><p>所有的<code>sentinel.conf</code> 配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定哨兵端口</span></span><br><span class="line">port 20000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 监听主节点10000</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 10000 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接主节点时的密码，如果redis配置了密码需要填写</span></span><br><span class="line">sentinel auth-pass mymaster 12345678</span><br><span class="line"><span class="meta">#</span><span class="bash"> 故障转移时最多可以有2从节点同时对新主节点进行数据同步</span></span><br><span class="line">sentinel config-epoch mymaster 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 故障转移超时时间180s，</span></span><br><span class="line">sentinel failover-timeout mymasterA 180000 </span><br><span class="line"><span class="meta">#</span><span class="bash"> sentinel节点定期向主节点ping命令，当超过了300S时间后没有回复，可能就认定为此主节点出现故障了……</span></span><br><span class="line">sentinel down-after-milliseconds mymasterA 300000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 故障转移后，1代表每个从节点按顺序排队一个一个复制主节点数据，如果为3，指3个从节点同时并发复制主节点数据，不会影响阻塞，但存在网络和IO开销</span></span><br><span class="line">sentinel parallel-syncs mymasterA 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置后台启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程的pid文件，保险起见设置不一样的，特别是设置后台启动的时候</span></span><br><span class="line">pidfile /var/run/redis-sentinel.pid</span><br></pre></td></tr></table></figure><blockquote><p>扩展：如何判定转移失败:</p><p>a - 如果转移超时失败，下次转移时时间为之前的2倍；</p><p>b - 从节点变主节点时，从节点执行slaveof no one命令一直失败的话，当时间超过<strong>180S</strong>时，则故障转移失败</p><p>c - 从节点复制新主节点时间超过<strong>180S</strong>转移失败</p></blockquote><p>下面为配好五个之后的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root   10772 Nov 28 21:00 sentienl_26382.conf</span><br><span class="line">-rw-r--r-- 1 root root   10767 Nov 28 20:43 sentinel_10000.conf</span><br><span class="line">-rw-r--r-- 1 root root   10772 Nov 28 21:03 sentinel_26379.conf</span><br><span class="line">-rw-r--r-- 1 root root   10766 Nov 28 20:46 sentinel_26380.conf</span><br><span class="line">-rw-r--r-- 1 root root   10772 Nov 28 20:59 sentinel_26381.conf</span><br><span class="line">-rw-r--r-- 1 root root   10772 Nov 28 21:03 sentinel_26382.conf</span><br><span class="line">-rw-r--r-- 1 root root   10744 Nov 28 18:06 sentinel.conf</span><br></pre></td></tr></table></figure><ol start="5"><li><p>上一节已经启动过，这里不再介绍</p></li><li><p><strong>启动sentinel服务</strong></p></li></ol><p>启动五个哨兵：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./redis-sentinel ./sentinel_10000.conf </span><br><span class="line">./redis-sentinel ./sentinel_26379.conf </span><br><span class="line">./redis-sentinel ./sentinel_263780.conf </span><br><span class="line">./redis-sentinel ./sentinel_263781.conf </span><br><span class="line">./redis-sentinel ./sentinel_263782.conf</span><br></pre></td></tr></table></figure><p>使用<code>ps</code>命令查看所有的服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root      3267     1  0 21:14 ?        00:00:01 ./redis-sentinel *:20000 [sentinel]</span><br><span class="line">root      3280     1  0 21:15 ?        00:00:01 ./redis-sentinel *:26379 [sentinel]</span><br><span class="line">root      3296     1  0 21:20 ?        00:00:00 ./redis-sentinel *:26380 [sentinel]</span><br><span class="line">root      3303     1  0 21:21 ?        00:00:00 ./redis-sentinel *:26381 [sentinel]</span><br><span class="line">root      3316  3254  0 21:28 pts/0    00:00:00 grep --color=auto redis</span><br><span class="line">root     26412     1  0 Nov23 ?        00:06:17 ./redis-server 127.0.0.1:10000</span><br><span class="line">root     26421     1  0 Nov23 ?        00:05:47 ./redis-server 127.0.0.1:16379</span><br><span class="line">root     26428     1  0 Nov23 ?        00:05:47 ./redis-server 127.0.0.1:16380</span><br><span class="line">root     26435     1  0 Nov23 ?        00:05:47 ./redis-server 127.0.0.1:16381</span><br></pre></td></tr></table></figure><ol start="7"><li>验证一下哨兵是否管用</li></ol><p>10000是主节点，他的<code>info</code>信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Keyspace</span><br><span class="line">db0:keys&#x3D;1,expires&#x3D;0,avg_ttl&#x3D;0</span><br><span class="line">127.0.0.1:10000&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:3</span><br></pre></td></tr></table></figure><p>使用<code>kill -9 master节点进程端口号</code>之后，我们已经干掉了额主进程，验证一下从节点是否启动</p><p>进入到6379端口的<code>redis-cli</code>当中，可以看到从节点6379的实例被选举为新的的节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip&#x3D;127.0.0.1,port&#x3D;16380,state&#x3D;online,offset&#x3D;857706,lag&#x3D;1</span><br><span class="line">slave1:ip&#x3D;127.0.0.1,port&#x3D;16381,state&#x3D;online,offset&#x3D;858242,lag&#x3D;1</span><br></pre></td></tr></table></figure><blockquote><p><strong>挂掉的主节点恢复之后，能不能进行恢复为主节点？</strong></p><p>尝试重启挂掉的master之后，可以发现他变成了从节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:10000&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:16379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:2</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p><strong>注意：生产环境建议让redis Sentinel部署到不同的物理机上</strong></p><p>如果不喜欢上面的启动哨兵模式，也可以使用下面的命令开启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 sentinel]# redis-server sentinel1.conf --sentinel</span><br><span class="line">[root@dev-server-1 sentinel]# redis-server sentinel2.conf --sentinel</span><br><span class="line">[root@dev-server-1 sentinel]# redis-server sentinel3.conf --sentinel</span><br></pre></td></tr></table></figure><h3 id="哨兵模式部署建议"><a href="#哨兵模式部署建议" class="headerlink" title="哨兵模式部署建议"></a>哨兵模式部署建议</h3><p>a，sentinel节点应部署在<strong>多台</strong>物理机（<strong>线上</strong>环境）</p><p>b，至少三个且<strong>奇数</strong>个sentinel节点</p><p>c，通过以上我们知道，<strong>3个sentinel</strong>可同时监控一个主节点或多个主节点</p><p>  监听N个主节点较多时，如果sentinel出现异常，会对多个主节点有影响，同时还会造成sentinel节点产生过多的网络连接，</p><p>  一般线上建议还是， <strong>3个sentinel</strong>监听一个主节点</p><p>也可以按照下面的方式在启动哨兵的时候启动：</p><h3 id="哨兵模式的优缺点："><a href="#哨兵模式的优缺点：" class="headerlink" title="哨兵模式的优缺点："></a>哨兵模式的优缺点：</h3><p>优点：</p><ol><li>哨兵模式基于主从复制模式，所以主从复制模式有的优点，哨兵模式也有</li><li>哨兵模式下，master挂掉可以自动进行切换，系统可用性更高</li></ol><p>缺点：</p><ol><li>同样也继承了主从模式难以在线扩容的缺点，Redis的容量受限于单机配置</li><li>需要额外的资源来启动sentinel进程，实现相对复杂一点，同时slave节点作为备份节点不提供服务</li></ol><h2 id="redis集群模式（redis6-0版本）"><a href="#redis集群模式（redis6-0版本）" class="headerlink" title="redis集群模式（redis6.0版本）"></a>redis集群模式（redis6.0版本）</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201129145217.png" alt=""></p><p>随着应用的扩展，虽然主从模式和哨兵模式的加入解决了高可用的问题，但是现代的应用基本都是要求可以动态扩展了，为了支持动态扩展，redis在后续的版本当中加入了哨兵的模式</p><p>集群模式主要解决的问题是：</p><p>Cluster模式实现了Redis的分布式存储，即每台节点存储不同的内容，来解决在线扩容的问题</p><h3 id="redis结构设计："><a href="#redis结构设计：" class="headerlink" title="redis结构设计："></a>redis结构设计：</h3><p>使用的是无中心的结构，每一个节点和节点之间相互连接</p><ol><li>redis 使用彼此互联的(ping-pong)的方式，进行互相关联，内部使用二进制协议优化速度</li><li>客户端与redis节点直连,不需要中间代理层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可</li><li>节点的fail是通过集群中超过<strong>半数</strong>的节点检测失效时才生效</li></ol><h3 id="redis集群的工作机制"><a href="#redis集群的工作机制" class="headerlink" title="redis集群的工作机制"></a>redis集群的工作机制</h3><ol><li><p>在Redis的每个节点上，都有一个插槽（slot），取值范围为0-16383，redis会根据接节点的数量分配槽的位置来进行判定发送给哪一个cluster节点</p></li><li><p>当我们存取key的时候，Redis会根据CRC16的算法得出一个结果，然后把结果对16384求余数，这样每个key都会对应一个编号在0-16383之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作</p></li><li><p>为了保证高可用，Cluster模式也引入<strong>主从复制模式</strong>，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点</p></li><li><p>当其它主节点ping一个主节点A时，如果半数以上的主节点与A通信超时，那么认为主节点A宕机了。如果主节点A和它的从节点都宕机了，那么<strong>该集群就无法再提供服务了</strong></p></li></ol><h3 id="配置集群（重点）："><a href="#配置集群（重点）：" class="headerlink" title="配置集群（重点）："></a>配置集群（重点）：</h3><p>为了不产生干扰，先把上一节所有的redis进程干掉，包括哨兵的配置</p><p>使用<code>kil -9 进程端口号</code>直接抹掉整个应用</p><p>配置如下：</p><ol><li>集群至少需要三主三从，同时需要奇数的节点配置。</li><li>我们可以将之前的主从配置的一主三从<strong>增加两个主节点</strong>，目前的配置如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root   84993 Nov 28 21:41 redis10000.conf</span><br><span class="line">-rw-r--r-- 1 root root   84936 Nov 28 21:35 redis16379.conf</span><br><span class="line">-rw-r--r-- 1 root root   84962 Nov 28 21:35 redis16380.conf</span><br><span class="line">-rw-r--r-- 1 root root   84962 Nov 28 21:35 redis16381.conf</span><br><span class="line"></span><br><span class="line"># 增加两个主要节点</span><br><span class="line">-rw-r--r-- 1 root root   84962 Nov 28 21:35 redis16382.conf</span><br><span class="line">-rw-r--r-- 1 root root   84962 Nov 28 21:35 redis16383.conf</span><br></pre></td></tr></table></figure><p>主节点的配置主要如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port 7100 # 本示例6个节点端口分别为7100,7200,7300,7400,7500,7600 </span><br><span class="line">daemonize yes # r后台运行 </span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_7100.pid # pidfile文件对应7100,7200,7300,7400,7500,7600 </span><br><span class="line">cluster-enabled yes # 开启集群模式 </span><br><span class="line">masterauth passw0rd # 如果设置了密码，需要指定master密码</span><br><span class="line">cluster-config-file nodes_7100.conf # 集群的配置文件，同样对应7100,7200等六个节点</span><br><span class="line">cluster-node-timeout 15000 # 请求超时 默认15秒，可自行设置</span><br></pre></td></tr></table></figure><p>启动如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-server ./cluster/redis17000_cluster.conf</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-server ./cluster/redis17100_cluster.conf</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-server ./cluster/redis17200_cluster.conf</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-server ./cluster/redis17300_cluster.conf</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-server ./cluster/redis17400_cluster.conf</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-server ./cluster/redis17500_cluster.conf</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ps -ef | grep redis</span><br><span class="line">root      4761     1  0 15:55 ?        00:00:00 ./redis-server 127.0.0.1:17000 [cluster]</span><br><span class="line">root      4767     1  0 15:55 ?        00:00:00 ./redis-server 127.0.0.1:17100 [cluster]</span><br><span class="line">root      4773     1  0 15:55 ?        00:00:00 ./redis-server 127.0.0.1:17200 [cluster]</span><br><span class="line">root      4779     1  0 15:55 ?        00:00:00 ./redis-server 127.0.0.1:17300 [cluster]</span><br><span class="line">root      4785     1  0 15:55 ?        00:00:00 ./redis-server 127.0.0.1:17400 [cluster]</span><br><span class="line">root      4791     1  0 15:55 ?        00:00:00 ./redis-server 127.0.0.1:17500 [cluster]</span><br><span class="line">root      4797  4669  0 15:55 pts/0    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><p>启动了上面六个节点之后，使用下面的命令并且敲入<code>yes</code>让他们变为集群：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# .&#x2F;redis-cli --cluster create 127.0.0.1:17000 127.0.0.1:17100 127.0.0.1:17200 127.0.0.1:17300 127.0.0.1:17400 127.0.0.1:17500 --cluster-replicas 1</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 127.0.0.1:17400 to 127.0.0.1:17000</span><br><span class="line">Adding replica 127.0.0.1:17500 to 127.0.0.1:17100</span><br><span class="line">Adding replica 127.0.0.1:17300 to 127.0.0.1:17200</span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity</span><br><span class="line">[WARNING] Some slaves are in the same host as their master</span><br><span class="line">M: 1179bb5f47e7f8221ba7917b5852f8064778e0db 127.0.0.1:17000</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 153afa1b9b14194de441fffa791f8d9001badc66 127.0.0.1:17100</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: 4029aeeb6b80e843279738d6d35eee7a1adcd2ff 127.0.0.1:17200</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 3ceb11fe492f98432f124fd1dcb7b2bb1e769a96 127.0.0.1:17300</span><br><span class="line">   replicates 1179bb5f47e7f8221ba7917b5852f8064778e0db</span><br><span class="line">S: 66eaea82ccf69ef96dbc16aac39fd6f6ed3d0691 127.0.0.1:17400</span><br><span class="line">   replicates 153afa1b9b14194de441fffa791f8d9001badc66</span><br><span class="line">S: c34aeb59c8bedc11b4aeb720b70b0019e7389093 127.0.0.1:17500</span><br><span class="line">   replicates 4029aeeb6b80e843279738d6d35eee7a1adcd2ff</span><br></pre></td></tr></table></figure><h4 id="验证集群："><a href="#验证集群：" class="headerlink" title="验证集群："></a>验证集群：</h4><ol><li>输入<code>redis-cli</code>进入任意的一个主节点，注意是主节点，从节点不能做写入操作</li></ol><p><code>Redirected to slot [9189] located at 127.0.0.1:17100</code>根据Hash的算法，算出连接那个节点槽，然后提示slot[9189] 落到了17100上面，所以集群会自动跳转进行Key的加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-cli -p 17000</span><br><span class="line">127.0.0.1:17000&gt; set key1 1</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-cli -p 17000</span><br><span class="line">127.0.0.1:17000&gt; set key1 1</span><br><span class="line">(error) MOVED 9189 127.0.0.1:17100</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-cli -p 17000 -c</span><br><span class="line">127.0.0.1:17000&gt; set key1 ke</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [9189] located at 127.0.0.1:17100</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：集群之后不能使用传统的连接方式，因为每一个key都要经过一次hash的操作找到对应的槽 -》节点之后才能做后续的操作</p><p>使用如下命令进入后正常</p><p>./redis-cli -p 17000 <strong>-c</strong></p><p>-c 代表以集群的方式连接</p></blockquote><ol start="2"><li>可以使用如下命令验证集群的信息:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:17000&gt; cluster nodes</span><br><span class="line">66eaea82ccf69ef96dbc16aac39fd6f6ed3d0691 127.0.0.1:17400@27400 slave 153afa1b9b14194de441fffa791f8d9001badc66 0 1606639411000 2 connected</span><br><span class="line">4029aeeb6b80e843279738d6d35eee7a1adcd2ff 127.0.0.1:17200@27200 master - 0 1606639411000 3 connected 10923-16383</span><br><span class="line">3ceb11fe492f98432f124fd1dcb7b2bb1e769a96 127.0.0.1:17300@27300 slave 1179bb5f47e7f8221ba7917b5852f8064778e0db 0 1606639410000 1 connected</span><br><span class="line">1179bb5f47e7f8221ba7917b5852f8064778e0db 127.0.0.1:17000@27000 myself,master - 0 1606639410000 1 connected 0-5460</span><br><span class="line">153afa1b9b14194de441fffa791f8d9001badc66 127.0.0.1:17100@27100 master - 0 1606639412002 2 connected 5461-10922</span><br><span class="line">c34aeb59c8bedc11b4aeb720b70b0019e7389093 127.0.0.1:17500@27500 slave 4029aeeb6b80e843279738d6d35eee7a1adcd2ff 0 1606639413005 3 connected</span><br></pre></td></tr></table></figure><ol start="3"><li>接下来我们验证一下当一个主节点挂掉会发生什么情况：</li></ol><p>还是和主从复制的验证一样，直接Kill 进程：</p><p>kill掉 17000 之后，我们可以发现 17300 被升级为主节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:17300&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br></pre></td></tr></table></figure><p>此时的节点情况如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:17100&gt; cluster nodes</span><br><span class="line">4029aeeb6b80e843279738d6d35eee7a1adcd2ff 127.0.0.1:17200@27200 master - 0 1606640582000 3 connected 10923-16383</span><br><span class="line">153afa1b9b14194de441fffa791f8d9001badc66 127.0.0.1:17100@27100 myself,master - 0 1606640581000 2 connected 5461-10922</span><br><span class="line">66eaea82ccf69ef96dbc16aac39fd6f6ed3d0691 127.0.0.1:17400@27400 slave 153afa1b9b14194de441fffa791f8d9001badc66 0 1606640581000 2 connected</span><br><span class="line">c34aeb59c8bedc11b4aeb720b70b0019e7389093 127.0.0.1:17500@27500 slave 4029aeeb6b80e843279738d6d35eee7a1adcd2ff 0 1606640582624 3 connected</span><br><span class="line">3ceb11fe492f98432f124fd1dcb7b2bb1e769a96 127.0.0.1:17300@27300 master - 0 1606640580619 7 connected 0-5460</span><br><span class="line">1179bb5f47e7f8221ba7917b5852f8064778e0db 127.0.0.1:17000@27000 master,fail - 1606640370074 1606640367068 1 disconnected</span><br></pre></td></tr></table></figure><ol start="4"><li>如果这时候主节点恢复呢？</li></ol><p>和哨兵的模式一样，恢复之后也变为<code>slave</code>了。</p><h3 id="集群模式优缺点："><a href="#集群模式优缺点：" class="headerlink" title="集群模式优缺点："></a>集群模式优缺点：</h3><p>优点：</p><ol><li>无中心架构，数据按照slot分布在多个节点。</li><li>集群中的每个节点都是平等的关系，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据。</li><li>可线性扩展到1000多个节点，节点可动态添加或删除</li><li>能够实现自动故障转移，节点之间通过gossip协议交换状态信息，用投票机制完成slave到master的角色转换</li></ol><p>缺点：</p><ol><li>客户端实现复杂，驱动要求实现Smart Client，缓存slots mapping信息并及时更新，提高了开发难度。目前仅JedisCluster相对成熟，异常处理还不完善，比如常见的“max redirect exception”</li><li>节点会因为某些原因发生阻塞（阻塞时间大于 cluster-node-timeout）被判断下线，这种failover是没有必要的</li><li>数据通过异步复制，不保证数据的强一致性</li><li>slave充当“冷备”，不能缓解读压力</li><li>批量操作限制，目前只支持具有相同slot值的key执行批量操作，对mset、mget、sunion等操作支持不友好</li><li>key事务操作支持有线，只支持多key在同一节点的事务操作，多key分布不同节点时无法使用事务功能</li><li>不支持多数据库空间，单机redis可以支持16个db，集群模式下只能使用一个，即db 0</li></ol><blockquote><p> Redis Cluster模式不建议使用pipeline和multi-keys操作，减少max redirect产生的场景。</p></blockquote><h3 id="cluster的相关疑问"><a href="#cluster的相关疑问" class="headerlink" title="cluster的相关疑问"></a>cluster的相关疑问</h3><h4 id="为什么redis的槽要用-16384？"><a href="#为什么redis的槽要用-16384？" class="headerlink" title="为什么redis的槽要用 16384？"></a>为什么redis的槽要用 <code>16384</code>？</h4><p><img src="https://img2018.cnblogs.com/blog/725429/201908/725429-20190829164650720-1058321793.jpg" alt="img"></p><p>值得高兴的是：这个问题作者出门回答了：</p><p>能理解作者意思的可以不用看下面的内容</p><p>地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzL3JlZGlzL2lzc3Vlcy8yNTc2" title="https://github.com/redis/redis/issues/2576">https://github.com/redis/redis/issues/2576<i class="fa fa-external-link"></i></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The reason is:</span><br><span class="line"></span><br><span class="line">Normal heartbeat packets carry the full configuration of a node, that can be replaced in an idempotent way with the old in order to update an old config. This means they contain the slots configuration for a node, in raw form, that uses 2k of space with16k slots, but would use a prohibitive 8k of space using 65k slots.</span><br><span class="line">At the same time it is unlikely that Redis Cluster would scale to more than 1000 mater nodes because of other design tradeoffs.</span><br><span class="line">So 16k was in the right range to ensure enough slots per master with a max of 1000 maters, but a small enough number to propagate the slot configuration as a raw bitmap easily. Note that in small clusters the bitmap would be hard to compress because when N is small the bitmap would have slots&#x2F;N bits set that is a large percentage of bits set.</span><br></pre></td></tr></table></figure><ol><li>首先我们查看一下结构体，关于cluster的源代码：<code>cluster.h</code></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201129184329.png" alt=""></p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> sig[<span class="number">4</span>];        <span class="comment">/* Signature "RCmb" (Redis Cluster message bus). */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> totlen;    <span class="comment">/* Total length of this message */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> ver;       <span class="comment">/* Protocol version, currently set to 1. */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> port;      <span class="comment">/* TCP base port number. */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> type;      <span class="comment">/* Message type */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> count;     <span class="comment">/* Only used for some kind of messages. */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> currentEpoch;  <span class="comment">/* The epoch accordingly to the sending node. */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> configEpoch;   <span class="comment">/* The config epoch if it's a master, or the last</span></span><br><span class="line"><span class="comment">                               epoch advertised by its master if it is a</span></span><br><span class="line"><span class="comment">                               slave. */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> offset;    <span class="comment">/* Master replication offset if node is a master or</span></span><br><span class="line"><span class="comment">                           processed replication offset if node is a slave. */</span></span><br><span class="line">    <span class="keyword">char</span> sender[CLUSTER_NAMELEN]; <span class="comment">/* Name of the sender node */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> myslots[CLUSTER_SLOTS/<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">char</span> slaveof[CLUSTER_NAMELEN];</span><br><span class="line">    <span class="keyword">char</span> myip[NET_IP_STR_LEN];    <span class="comment">/* Sender IP, if not all zeroed. */</span></span><br><span class="line">    <span class="keyword">char</span> notused1[<span class="number">34</span>];  <span class="comment">/* 34 bytes reserved for future usage. */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> cport;      <span class="comment">/* Sender TCP cluster bus port */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> flags;      <span class="comment">/* Sender node flags */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> state; <span class="comment">/* Cluster state from the POV of the sender */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> mflags[<span class="number">3</span>]; <span class="comment">/* Message flags: CLUSTERMSG_FLAG[012]_... */</span></span><br><span class="line">    <span class="keyword">union</span> clusterMsgData data;</span><br><span class="line">&#125; clusterMsg;</span><br></pre></td></tr></table></figure><p>集群节点之间的通信内容无非就是IP信息，请求头，请求内容，以及一些参数信息，这里着重看一下参数<code>myslots[CLUSTER_SLOTS/8]</code></p><blockquote><p>#define CLUSTER_SLOTS 16384  这里就是16384的来源</p></blockquote><p>在redis节点发送心跳包时需要把所有的槽放到这个心跳包里，以便让节点知道当前集群信息，16384=16k，在发送心跳包时使用<code>char</code>进行bitmap压缩后是2k（<code>2 * 8 (8 bit) * 1024(1k) = 2K</code>），也就是说使用2k的空间创建了16k的槽数。</p><p>虽然使用CRC16算法最多可以分配65535（2^16-1）个槽位，65535=65k，压缩后就是8k（<code>8 * 8 (8 bit) * 1024(1k) = 8K</code>），也就是说需要需要8k的心跳包，作者认为这样做不太值得；并且一般情况下一个redis集群不会有超过1000个master节点，所以16k的槽位是个比较合适的选择。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MDk3MTE2NTg1OTkxI2hlYWRpbmctOQ==" title="https://juejin.cn/post/6844904097116585991#heading-9">https://juejin.cn/post/6844904097116585991#heading-9<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MTc4MTU0ODk3NDE1I2hlYWRpbmctMjU=" title="https://juejin.cn/post/6844904178154897415#heading-25">https://juejin.cn/post/6844904178154897415#heading-25<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcmp6aGVuZy9wLzExNDMwNTkyLmh0bWw=" title="https://www.cnblogs.com/rjzheng/p/11430592.html">为什么Redis集群有16384个槽<i class="fa fa-external-link"></i></span></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      redis复制以及集群部署的方式
    
    </summary>
    
    
      <category term="redis" scheme="https://lazytime.site/categories/redis/"/>
    
    
      <category term="redis" scheme="https://lazytime.site/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>maven多模块和依赖冲突问题汇总记录</title>
    <link href="https://lazytime.site/2020/11/22/mavenmodules/"/>
    <id>https://lazytime.site/2020/11/22/mavenmodules/</id>
    <published>2020-11-22T11:46:50.000Z</published>
    <updated>2020-11-22T11:48:04.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven多模块和依赖冲突问题汇总记录"><a href="#maven多模块和依赖冲突问题汇总记录" class="headerlink" title="maven多模块和依赖冲突问题汇总记录"></a>maven多模块和依赖冲突问题汇总记录</h1><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122191750.png" alt=""></p><p>[TOC]</p><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>今天学习和总结了一下maven的相关知识点，发现一些比较基础的东西居然也会忘记，这里对于一些日常工作中可能会遇到的问题进行了一下汇总。</p><a id="more"></a><h1 id="idea怎么创建maven多module的项目"><a href="#idea怎么创建maven多module的项目" class="headerlink" title="idea怎么创建maven多module的项目"></a>idea怎么创建maven多module的项目</h1><h2 id="首先了解上面是多module？"><a href="#首先了解上面是多module？" class="headerlink" title="首先了解上面是多module？"></a>首先了解上面是多module？</h2><p>一句话概括就是：一个父模块作为版本控制多个子模块，子模块负责接入到父模块当中作为整个项目的过程。</p><h2 id="多Module管理项目的几种方式："><a href="#多Module管理项目的几种方式：" class="headerlink" title="多Module管理项目的几种方式："></a>多Module管理项目的几种方式：</h2><ol><li>按照单模块拆分为多个子模块，比如将MVC三层架构拆分为 xxx-service，xxx-dao，xxx-model，不过这种方式个人感觉比较二，目前以业务模块拆分比较多，迁移到微服务比如用springcloude或者dubbo 的时候非常好用。</li><li>按照业务模块拆分，这种模式使用的比较多，也比较多见。</li></ol><h2 id="创建一个多module项目-idea2019-3-3版本"><a href="#创建一个多module项目-idea2019-3-3版本" class="headerlink" title="创建一个多module项目(idea2019.3.3版本)"></a>创建一个多module项目(idea2019.3.3版本)</h2><h3 id="创建一个父pom项目："><a href="#创建一个父pom项目：" class="headerlink" title="创建一个父pom项目："></a>创建一个父pom项目：</h3><ol><li>打开idea，选择<code>create new project</code></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122114914.png" alt=""></p><ol start="2"><li>选择maven项目，同时不选任何的预加载设置</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122115055.png" alt=""></p><ol start="3"><li>父pom配置如下：</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122115139.png" alt=""></p><ol start="4"><li>删除<code>src</code> 目录</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122115235.png" alt=""></p><h3 id="创建子模块，引入到父pom里面"><a href="#创建子模块，引入到父pom里面" class="headerlink" title="创建子模块，引入到父pom里面"></a>创建子模块，引入到父pom里面</h3><ol><li>同样右击项目工程，选择<code>new module</code>，然后选择<code>maven</code>，这时候会出现父模块以及对应的子模块名称</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122121402.png" alt=""></p><ol start="2"><li>此时在父模块里面发现引入了子模块的内容</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122121551.png" alt=""></p><h2 id="子父模块的区别："><a href="#子父模块的区别：" class="headerlink" title="子父模块的区别："></a>子父模块的区别：</h2><h3 id="父pom-xml文件内容："><a href="#父pom-xml文件内容：" class="headerlink" title="父pom.xml文件内容："></a>父pom.xml文件内容：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.zxd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>taglib-core<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分为两个部分，一个部分是父pom的声明，包含gourpId，artifactId，打包方式<strong>必须是pom</strong>，因为使用了<strong>聚合模型</strong>，同时在父pom里面指定版本号，子模块不填写version会默认使用父pom的version号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>taglib-core<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面表示当前引入的子模块内容</p><h3 id="子pom-xml文件内容："><a href="#子pom-xml文件内容：" class="headerlink" title="子pom.xml文件内容："></a>子pom.xml文件内容：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用自父pom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.zxd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包方式为jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglib-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="子模块之间进行互相的依赖"><a href="#子模块之间进行互相的依赖" class="headerlink" title="子模块之间进行互相的依赖"></a>子模块之间进行互相的依赖</h2><p>在下面的pom中可以在任意的子模块引入对应的父模块依赖</p><p>注意由于<code>&lt;parent&gt;</code>这个标签会递归继承，所以要注意子依赖不要和依赖引入不同版本的依赖，这样容易造成冲突</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.zxd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglib-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里需要注释掉编译的作用域 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;scope&gt;compile&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="将上面的项目改造为spring-boot多模块项目："><a href="#将上面的项目改造为spring-boot多模块项目：" class="headerlink" title="将上面的项目改造为spring-boot多模块项目："></a>将上面的项目改造为spring-boot多模块项目：</h2><h3 id="改造父pom文件："><a href="#改造父pom文件：" class="headerlink" title="改造父pom文件："></a>改造父pom文件：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>parent指向<code>springboot-started</code></p><p>子模块只需要引入父pom的内容</p><h3 id="Spring-boot-maven-plugin问题"><a href="#Spring-boot-maven-plugin问题" class="headerlink" title="Spring boot maven plugin问题"></a>Spring boot maven plugin问题</h3><p>在打包spring boot项目时，需要使用如下插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果在用maven构建多模块项目时，不要将此插件放到parent pom中，否则如果有sub module不是spring boot应用，在打包时就会出错。<strong>只将该插件添加到是spring boot项目的子模块</strong>。</p><h1 id="MAVEN依赖冲突问题："><a href="#MAVEN依赖冲突问题：" class="headerlink" title="MAVEN依赖冲突问题："></a>MAVEN依赖冲突问题：</h1><h2 id="依赖的传递原则："><a href="#依赖的传递原则：" class="headerlink" title="依赖的传递原则："></a>依赖的传递原则：</h2><ol><li>最短路径原则</li><li>最先声明原则</li></ol><h2 id="maven的依赖引入策略"><a href="#maven的依赖引入策略" class="headerlink" title="maven的依赖引入策略"></a>maven的依赖引入策略</h2><h3 id="最短路径原则："><a href="#最短路径原则：" class="headerlink" title="最短路径原则："></a>最短路径原则：</h3><p>我有下面两个依赖jar包，A和B，他们都引入了C这个依赖，这时候如果有如下的引用</p><p>A -&gt; C（3.3）</p><p>B -&gt; A（3.3）</p><p>B  -&gt; C（3.4）</p><p>此时如果把B打包，得到版本号是3.4，但是如果B去掉C的依赖，那就是走A-&gt;C的传递依赖，很简单</p><p>验证：</p><ol><li>我假设我有一个web包引入了common-lang3，版本是3.4的版本</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>此时又引入了一个公用包，里面也有这个引用：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>如果此时在本地引用3.4版本，那就是3.4的版本，否则就死3.3的版本，不管声明顺序谁先谁后</li></ol><h3 id="最先声明原则："><a href="#最先声明原则：" class="headerlink" title="最先声明原则："></a>最先声明原则：</h3><p>如果两个jar包的寻址路径一致，那么谁先优先声明，先引入谁</p><p>验证：</p><p>下面两个依赖分配对应两个module，引入模块的这个模块暂定为 <strong>C</strong> 模块。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入core包内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.zxd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglib-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;scope&gt;compile&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入db包的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.zxd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglib-db<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时 <code>taglib-core</code>  中的依赖版本如下，暂定为 <strong>A</strong> 模块：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而<code>taglib-db</code> 中的依赖版本如下，暂定为 <strong>B</strong> 模块：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时将整个web项目打包，可以看到web项目里面的版本如下：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122181117.png" alt=""></p><p>可以很明显的看到如果引入关系是这样的：</p><p>C -&gt; A,B</p><p>A -&gt; curator-client 2.5</p><p>B -&gt; curator-client 4.1</p><p>这样的链路最终打包出来的效果是  C -&gt; A -&gt; curator-client 2.5</p><p>这样也就造成了很多情况下我们<strong>编译</strong>和<strong>运行</strong>时完全没有问题的，<strong>甚至有可能打包都是正常</strong>的，但是到最后运行的时候突然报错，要谨防这种依赖版本的问题，好在一般公司的项目都有经理负责控制版本依赖，这种错误算是低级错误，但是在如今框架满天飞的时代，依赖管理的版本控制问题依然需要注意！！！</p><h2 id="如何解决依赖冲突的问题"><a href="#如何解决依赖冲突的问题" class="headerlink" title="如何解决依赖冲突的问题"></a>如何解决依赖冲突的问题</h2><h3 id="锁定版本法"><a href="#锁定版本法" class="headerlink" title="锁定版本法"></a>锁定版本法</h3><p>一般情况下我们会在父pom文件里面管理，可以使用<code>&lt;dependencyManagement&gt;</code>这个这个标签来管理所有子模块的版本依赖，子模块如果指定自己的版本，这里发现打出来的包依然是父pom指定的版本，版本管理使用如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>锁定版本法可以打破2个依赖传递的原则，优先级为最高</strong></p><blockquote><p>版本锁定可以排除一些exclude标签，不同模块用不同版本的jar包本身也不符合规范，所以这种方式较为稳妥</p></blockquote><h2 id="什么情况下会出现Jar包冲突问题"><a href="#什么情况下会出现Jar包冲突问题" class="headerlink" title="什么情况下会出现Jar包冲突问题"></a>什么情况下会出现Jar包冲突问题</h2><p><strong>只有高版本Jar包不向下兼容，或者新增了某些低版本没有的API才有可能导致这样的问题</strong></p><h2 id="如何查找和发现jar包冲突？"><a href="#如何查找和发现jar包冲突？" class="headerlink" title="如何查找和发现jar包冲突？"></a>如何查找和发现jar包冲突？</h2><h3 id="1-利用idea的maven视图工具"><a href="#1-利用idea的maven视图工具" class="headerlink" title="1. 利用idea的maven视图工具"></a>1. 利用idea的maven视图工具</h3><p>直接使用一个图说明一下：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122185753.png" alt=""></p><p>可以通过这个工具查看依赖在哪个模块重复引用，同时如果有冲突会显示红线，这个视图非常的直观，可以帮助依赖管理人员去处理依赖重复引用或者引用版本不一致的问题，进行<code>&lt;exclude&gt;</code>操作</p><h3 id="2-Idea-Maven-Helper-插件"><a href="#2-Idea-Maven-Helper-插件" class="headerlink" title="2. Idea Maven Helper 插件"></a>2. Idea <code>Maven Helper</code> 插件</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122190207.png" alt=""></p><p>如何使用？</p><p>安装完成之后，随便找一个pom.xml文件，按照如下的图例提示进行操作，对于冲突的内容，右击<code>exclude</code>就可以排除依赖：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122190726.png" alt=""></p><p>排除完依赖之后，点击左上角的<code>Refresh UI</code> 刷新一下UI的界面：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122190841.png" alt=""></p><h3 id="3-maven命令工具："><a href="#3-maven命令工具：" class="headerlink" title="3. maven命令工具："></a>3. maven命令工具：</h3><p><code>mvn dependency:tree -Dverbose</code>，有时候如果我们没有idea的情况下，可以使用这个命令来处理，执行的结果参考如下：</p><blockquote><p>PS: 此处一定不要省略<code>-Dverbose</code>参数，要不然是<strong>不会</strong>显示被<strong>忽略</strong>的包的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">or:curator-client:jar:4.1.0:compile</span><br><span class="line">[INFO] |  |  +- org.apache.zookeeper:zookeeper:jar:3.5.4-beta:compile</span><br><span class="line">[INFO] |  |  |  +- commons-cli:commons-cli:jar:1.2:compile</span><br><span class="line">[INFO] |  |  |  +- log4j:log4j:jar:1.2.17:compile</span><br><span class="line">[INFO] |  |  |  +- org.apache.yetus:audience-annotations:jar:0.5.0:compile</span><br><span class="line">[INFO] |  |  |  \- io.netty:netty:jar:3.10.6.Final:compile</span><br><span class="line">[INFO] |  |  +- com.google.guava:guava:jar:20.0:compile</span><br><span class="line">[INFO] |  |  \- org.slf4j:slf4j-api:jar:1.7.30:compile</span><br><span class="line">[INFO] |  +- commons-codec:commons-codec:jar:1.15:compile</span><br><span class="line">[INFO] |  +- commons-collections:commons-collections:jar:3.2.2:compile</span><br><span class="line">[INFO] |  +- commons-beanutils:commons-beanutils:jar:1.9.4:compile</span><br><span class="line">[INFO] |  +- commons-configuration:commons-configuration:jar:1.10:compile</span><br><span class="line">[INFO] |  |  \- commons-lang:commons-lang:jar:2.6:compile</span><br></pre></td></tr></table></figure><p>总体上来说还是比较直观的，非常方便和好用。</p><h2 id="如何写一个干净依赖关系的POM文件"><a href="#如何写一个干净依赖关系的POM文件" class="headerlink" title="如何写一个干净依赖关系的POM文件"></a>如何写一个干净依赖关系的<code>POM</code>文件</h2><ul><li>尽量在父POM中定义<code>&lt;dependencyManagement&gt;</code>，来进行本项目一些依赖版本的管理，这样可以从很大程度上解决一定的冲突</li><li>最少依赖jar包原则</li><li>使用<code>mvn dependency:analyze-only</code>命令用于检测那些声明了但是没被使用的依赖，如有有一些是你自己声明的，那尽量去掉</li><li>使用<code>mvn dependency:analyze-duplicate</code>命令用来分析重复定义的依赖，清理那些重复定义的依赖</li></ul><h3 id="dependency-analyze-only-命令"><a href="#dependency-analyze-only-命令" class="headerlink" title="dependency:analyze-only 命令"></a><code>dependency:analyze-only</code> 命令</h3><p>在idea - <code>Terminal</code>里面，可以看到对应的依赖被下载</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122182537.png" alt=""></p><p>执行完之后我的运行结果如下，这里报错的原因是打包时候默认去阿里云仓库寻找依赖，这里需要配置一下：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122183942.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Failed to execute goal on project taglib-web: Could not resolve dependencies for project org.zxd:taglib-web:war:1.0.0: The following artifacts could not be resolved: org.zxd:</span><br><span class="line">taglib-core:jar:1.0.0, org.zxd:taglib-db:jar:1.0.0: Failure to find org.zxd:taglib-core:jar:1.0.0 in http://maven.aliyun.com/nexus/content/repositories/central/ was cached in the loc</span><br><span class="line">al repository, resolution will not be reattempted until the update interval of alimaven has elapsed or updates are forced -&gt; [Help 1]</span><br></pre></td></tr></table></figure><p>大致意思就是说再阿里云仓库找不到对应的依赖引入。</p><p>解决方式如下：</p><p>找到maven的安装路径下的<code>apache-maven-3.6.3\conf</code>下面的<code>setting.xml</code>，找到如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里配置本地仓库的位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\soft\apache-maven-3.6.3\rep<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时重新执行一下：<code>dependency:analyze-only</code> 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[INFO] --- maven-dependency-plugin:3.1.2:analyze-only (default-cli) @ taglib-web ---</span><br><span class="line">[WARNING] Unused declared dependencies found:</span><br><span class="line">[WARNING]    org.zxd:taglib-core:jar:1.0.0:compile</span><br><span class="line">[WARNING]    org.apache.commons:commons-lang3:jar:3.4:compile</span><br><span class="line">[WARNING]    org.springframework.boot:spring-boot-starter-web:jar:2.4.0:compile</span><br><span class="line">[WARNING]    org.springframework.boot:spring-boot-starter-test:jar:2.4.0:test</span><br><span class="line">[WARNING]    org.neo4j.driver:neo4j-java-driver:jar:1.5.0:compile</span><br><span class="line">[WARNING]    commons-codec:commons-codec:jar:1.10:compile</span><br><span class="line">[WARNING]    commons-collections:commons-collections:jar:3.2.2:compile</span><br><span class="line">[WARNING]    commons-beanutils:commons-beanutils:jar:1.9.4:compile</span><br><span class="line">[WARNING]    commons-configuration:commons-configuration:jar:1.10:compile</span><br><span class="line">[WARNING]    commons-fileupload:commons-fileupload:jar:1.3:compile</span><br><span class="line">[WARNING]    commons-logging:commons-logging:jar:1.2:compile</span><br><span class="line">[WARNING]    org.apache.httpcomponents:httpclient:jar:4.4.1:compile</span><br><span class="line">[WARNING]    org.apache.poi:poi-ooxml:jar:3.17:compile</span><br><span class="line">[WARNING]    org.mybatis:mybatis:jar:3.4.0:compile</span><br><span class="line">[WARNING]    org.mybatis:mybatis-spring:jar:1.3.0:compile</span><br><span class="line">[WARNING]    com.github.pagehelper:pagehelper:jar:5.1.2:compile</span><br></pre></td></tr></table></figure><h3 id="mvn-dependency-analyze-duplicate-命令"><a href="#mvn-dependency-analyze-duplicate-命令" class="headerlink" title="mvn dependency:analyze-duplicate 命令"></a><code>mvn dependency:analyze-duplicate</code> 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] No duplicate dependencies found in &lt;dependencies&#x2F;&gt; or in &lt;dependencyManagement&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>如果没有其他信息，代表没有重复依赖的引入</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      maven多模块如何在idea中创建，以及maven常见的依赖问题介绍和处理方法
    
    </summary>
    
    
      <category term="maven" scheme="https://lazytime.site/categories/maven/"/>
    
    
      <category term="maven" scheme="https://lazytime.site/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习 - Redis发布订阅</title>
    <link href="https://lazytime.site/2020/11/21/note/"/>
    <id>https://lazytime.site/2020/11/21/note/</id>
    <published>2020-11-21T14:52:22.000Z</published>
    <updated>2020-11-21T14:56:13.820Z</updated>
    
    <content type="html"><![CDATA[<p>消息通信模式，发送者发送消息，接受者接受消息，微信，微博，关注系统</p><p>redis客户端可以订阅任意数量的频道</p><p>订阅/发布消息：</p><ol><li>消息发送者</li><li>频道</li><li>消息内容</li><li>消息接受者</li></ol><a id="more"></a><h2 id="消息发布的原理"><a href="#消息发布的原理" class="headerlink" title="消息发布的原理"></a>消息发布的原理</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201118223756.png" alt=""></p><p>订阅/发布消息需要的四个必要对象：</p><ol><li>消息发送者 publisher</li><li>频道 - channel</li><li>消息内容 - channel msg</li><li>消息接受者 - subscriber</li></ol><h2 id="如何订阅频道"><a href="#如何订阅频道" class="headerlink" title="如何订阅频道"></a>如何订阅频道</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201118224115.png" alt=""></p><p>使用<strong>subscribe</strong> 命令发送消息，订阅消息会显示 1）2）3）,同时显示订阅的序号，从1开始，这时候命令行会阻塞等待消息传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16379&gt; subscribe first second</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;first&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;second&quot;</span><br><span class="line">3) (integer) 2</span><br></pre></td></tr></table></figure><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><p>redis设计了 <strong>publish</strong> 命令，用于订阅频道，发送消息会返回成功收到消息的数量，如果没有收到则为0</p><p>我们需要在新开一个窗口，输入如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ .&#x2F;redis-cli -p 16379</span><br><span class="line">127.0.0.1:16379&gt; publish channel1 message</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:16379&gt;</span><br></pre></td></tr></table></figure><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p>功能说明：允许客户端订阅某个模式的频道</p><p>本质：其实就是可以通过使用通配符的模式批量订阅一批频道</p><p>具体的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16379&gt; PSUBSCRIBE chanel-*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;psubscribe&quot;</span><br><span class="line">2) &quot;chanel-*&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><p>如果订阅了一批频道，那么发送给这个频道的消息将被客户端接收到两次，只不过这两条消息的类型不同，一个是message类型，一个是<strong>pmessage</strong>类型，但其内容相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16379&gt; PSUBSCRIBE chanel-*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;psubscribe&quot;</span><br><span class="line">2) &quot;chanel-*&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;chanel-*&quot;</span><br><span class="line">3) &quot;chanel-111&quot;</span><br><span class="line">4) &quot;213213&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;chanel-*&quot;</span><br><span class="line">3) &quot;chanel-22&quot;</span><br><span class="line">4) &quot;213213&quot;</span><br></pre></td></tr></table></figure><h2 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h2><p>Redis采用<strong>UNSUBSCRIBE</strong>和<strong>PUNSUBSCRIBE</strong>命令取消订阅</p><h2 id="redis发布订阅原理实现"><a href="#redis发布订阅原理实现" class="headerlink" title="redis发布订阅原理实现"></a>redis发布订阅原理实现</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTg2NTM0OTUyOTY4I2hlYWRpbmctNw==" title="https://juejin.im/post/6844904186534952968#heading-7">https://juejin.im/post/6844904186534952968#heading-7<i class="fa fa-external-link"></i></span></p><h3 id="subscribe的实现"><a href="#subscribe的实现" class="headerlink" title="subscribe的实现"></a>subscribe的实现</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201119134454.png" alt=""></p><ol><li>维护一个client 和 一个 server 结构体，都存储pubsub_patterns</li><li>client存储的是以hash表来实现的，用键值对的形式，键为键表示订阅的频道，值为空。</li><li>而server存储的是改服务器当中所有频道以及订阅这个频道的客户端，也是字典类型。插入节点的时候键为频道，值为订阅的所有客户端组成的链表</li></ol><h3 id="psubscribe"><a href="#psubscribe" class="headerlink" title="psubscribe"></a>psubscribe</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201119225433.png" alt=""></p><ol><li>大体实现和subscribe类似，client维护的内容是相似的</li><li>在server当中,表示该服务端的所有频道以及订阅频道客户端。插入节点使用的是键为频道，值为订阅了所有客户端组成的链表</li></ol><h3 id="PUBLISH"><a href="#PUBLISH" class="headerlink" title="PUBLISH"></a>PUBLISH</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201119225849.png" alt=""></p><p>会在redis_server当中遍历所有的pubsub_channel中管理的所有频道，找到对应的频道之后链表遍历所有的客户端，将消息发给客户端。</p><h2 id="redis发布订阅的应用"><a href="#redis发布订阅的应用" class="headerlink" title="redis发布订阅的应用"></a>redis发布订阅的应用</h2><p>用于监听命令和数据的变化，当redis通过发布订阅进行写操作的时候，会有两条消息，一条是del mykey，另一条是mykey del。一个表示空间变化，一个是频道的改变。可以用于进行消息的实时推送。</p><h2 id="redis和activeMQ的比较"><a href="#redis和activeMQ的比较" class="headerlink" title="redis和activeMQ的比较"></a>redis和activeMQ的比较</h2><p>（1）ActiveMQ支持多种消息协议，包括AMQP，MQTT，Stomp等，并且支持JMS规范，但Redis没有提供对这些协议的支持； </p><p>（2）ActiveMQ提供持久化功能，但Redis无法对消息持久化存储，一旦消息被发送，如果没有订阅者接收，那么消息就会丢失； </p><p>（3）ActiveMQ提供了消息传输保障，当客户端连接超时或事务回滚等情况发生时，消息会被重新发送给客户端，Redis没有提供消息传输保障。</p><blockquote><p> ActiveMQ所提供的功能远比Redis发布订阅要复杂，毕竟Redis不是专门做发布订阅的，但是如果系统中已经有了Redis，并且需要基本的发布订阅功能，就没有必要再安装ActiveMQ了，因为可能ActiveMQ提供的功能大部分都用不到，而Redis的发布订阅机制就能满足需求。</p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      redis发布订阅的一些应用以及一些命令的学习
    
    </summary>
    
    
      <category term="redis专栏" scheme="https://lazytime.site/categories/redis%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="redis" scheme="https://lazytime.site/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis学习 - redis 持久化</title>
    <link href="https://lazytime.site/2020/11/21/redis-chijiu/"/>
    <id>https://lazytime.site/2020/11/21/redis-chijiu/</id>
    <published>2020-11-21T14:24:47.000Z</published>
    <updated>2020-11-21T14:26:15.263Z</updated>
    
    <content type="html"><![CDATA[<p>无论面试和工作，持久化都是重点。</p><p>一般情况下,redis占用内存超过20GB以上的时候，必须考虑主从多redis实例进行数据同步和备份保证可用性。</p><p>rbd保存的文件都是 <code>dump.rdb</code>，都是配置文件当中的快照配置进行生成的。一般业务情况只需要用rdb即可。</p><p>aof默认是不开启的，因为aof非常容易产生大文件，虽然官方提供重写但是在文件体积过大的时候还是容易造成阻塞，谨慎考虑使用</p><p>rbd和aof在大数据量分别有各种不同情况的系统性能影响，具体使用何种解决策略需要根据系统资源以及业务的实际情况决定。</p><a id="more"></a><h2 id="数据设计影响持久化："><a href="#数据设计影响持久化：" class="headerlink" title="数据设计影响持久化："></a>数据设计影响持久化：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zenRoYW5hdG9zLmdpdGh1Yi5pby90b3BpYy9yZWRpcy9pbXByb3ZlLTAxLw==" title="https://szthanatos.github.io/topic/redis/improve-01/">https://szthanatos.github.io/topic/redis/improve-01/<i class="fa fa-external-link"></i></span></p><h2 id="为什么要持久化？"><a href="#为什么要持久化？" class="headerlink" title="为什么要持久化？"></a>为什么要持久化？</h2><ol><li>重用数据</li><li>防止系统故障备份重要数据</li></ol><h3 id="持久化的方式"><a href="#持久化的方式" class="headerlink" title="持久化的方式"></a>持久化的方式</h3><ol><li>RDB 快照：将某一个时刻的所有数据写入到磁盘</li><li>AOF（append-only file）：将所有的命令写入到此判断。</li></ol><p>默认情况：<strong>RDB</strong>，AOF需要手动开启</p><h2 id="redis-conf持久化配置说明"><a href="#redis-conf持久化配置说明" class="headerlink" title="redis.conf持久化配置说明"></a>redis.conf持久化配置说明</h2><p>在<code>redis.conf</code>文件当中，存在如下的选项：</p><p><code>redis.conf</code>当中RDB的相关配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是否开启rdb压缩 默认开启</span></span><br><span class="line"><span class="attr">rdbcompression</span> <span class="string">yes</span></span><br><span class="line"><span class="comment">#代表900秒内有一次写入操作，就记录到rdb</span></span><br><span class="line"><span class="attr">save</span> <span class="string">900 1</span></span><br><span class="line"><span class="comment"># rdb的备份文件名称</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump.rdb</span></span><br><span class="line"><span class="comment"># 表示备份文件存放位置</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">./</span></span><br></pre></td></tr></table></figure><p><code>redis.conf</code>当中AOF的相关配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启aof，默认是关闭的</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">no</span></span><br><span class="line"><span class="comment">#aof的文件名称</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">"appendonly.aof"</span></span><br><span class="line"><span class="comment"># no: don't fsync, just let the OS flush the data when it wants. Faster.</span></span><br><span class="line"><span class="comment"># always: fsync after every write to the append only log. Slow, Safest.</span></span><br><span class="line"><span class="comment"># everysec: fsync only one time every second. Compromise.</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">everysec</span></span><br><span class="line"><span class="comment"># 在进行rewrite的时候不开启fsync，即不写入缓冲区，直接写入磁盘，这样会造成IO阻塞，但是最为安全，如果为yes表示写入缓冲区，写入的适合redis宕机会造成数据持久化问题(在linux的操作系统的默认设置下，最多会丢失30s的数据)</span></span><br><span class="line"><span class="meta">no-appendfsync-on-rewrite</span> <span class="string">no</span></span><br><span class="line"><span class="comment"># 下面两个参数要配合使用，代表当redis内容大于64m同时扩容超过100%的时候会执行bgrewrite，进行持久化</span></span><br><span class="line"><span class="meta">auto-aof-rewrite-percentage</span> <span class="string">100</span></span><br><span class="line"><span class="meta">auto-aof-rewrite-min-size</span> <span class="string">64mb</span></span><br></pre></td></tr></table></figure><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h3 id="创建rdb快照的几种方式："><a href="#创建rdb快照的几种方式：" class="headerlink" title="创建rdb快照的几种方式："></a>创建rdb快照的几种方式：</h3><ol><li>客户端向redis发送bgsave的命令（注意windows不支持bgsave），此时reids调用 <strong>fork</strong> 创建子进程，父进程继续处理，子进程将快照写入磁盘，父进程继续处理请求。</li><li>客户端发送save命令创建快照。注意这种方式会<strong>阻塞</strong>整个父进程。很少使用，特殊情况才使用。</li><li>redis通过shutdown命令关闭服务器请求的时候，此时redis会停下所有工作执行一次save，阻塞所有客户端不再执行任何命令并且进行磁盘写入，写入完成关闭服务器。</li><li>redis集群的时候，会发送sync 命令进行一次复制操作，如果主服务器<strong>没有执行</strong>或者<strong>刚刚执行完</strong>bgsave，则会进行bgsave。</li><li>执行<strong>flushall</strong> 命令</li></ol><h3 id="RDB快照的一些注意点"><a href="#RDB快照的一些注意点" class="headerlink" title="RDB快照的一些注意点:"></a>RDB快照的一些注意点:</h3><ol><li><strong>只使用rdb的时候</strong>，如果创建快照的时候redis崩溃，redis会留存上一次备份快照，但是具体丢失多少数据由备份时间查看</li><li>只适用一些可以容忍一定数据丢失的系统，否则需要考虑aof持久化</li><li>在大数据量的场景下，特别是内存达到20GB以上的适合，一次同步大约要4-6秒<ol><li>一种方式是用手动同步，在凌晨的适合进行手动阻塞同步，比BGSAVE快一些</li></ol></li></ol><blockquote><p>一种解决方法：</p><p>通过日志记录来恢复中断的日志，来进行数据的恢复</p></blockquote><p>如何通过修改配置来获得想要的持久化？</p><ol><li>修改save参数，尽量在开发环境模拟线上环境设置save，过于频繁造成资源浪费，过于稀少有可能丢失大量数据</li><li>日志进行聚合计算，按照save进行计算最多会丢失多少时间的数据，判断容忍性，比如一小时可以设置 <code>save 3600 1</code></li></ol><h3 id="RDB的优缺点对比："><a href="#RDB的优缺点对比：" class="headerlink" title="RDB的优缺点对比："></a>RDB的优缺点对比：</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ol><li>适合大规模的数据恢复</li><li>如果数据不小心误删，可以及时恢复</li><li>恢复速度一般情况下快于aof</li></ol><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ol><li>需要一定的时间间隔，如果redis意外宕机，最后一次修改的数据就没有了，具体丢失多少数据需要看持久化策略</li><li>fork进程的时候，会占用一定的内存空间，如果fork的内存过于庞大，可能导致秒级别的恢复时间</li><li>数据文件经过redis压缩，可读性较差</li></ol><h2 id="AOF（append-only-fail）"><a href="#AOF（append-only-fail）" class="headerlink" title="AOF（append only fail）"></a>AOF（append only fail）</h2><p>其实就是把我们的命令一条条记录下来，类似linux的<code>history</code></p><p>默认是不开启的，需要手动开启，开启之后需要重启</p><p>如果aof文件错位了，可以用<code>redis-check-aof</code> 进行文件修复</p><blockquote><p>文件同步：写入文件的时候，会发生三件事：</p><ol><li>file.write() 方法将文件存储到缓冲区</li><li>file.flush() 将缓冲区的内容写入到硬盘</li><li>sync 文件同步，阻塞直到写入硬盘为止</li></ol></blockquote><h3 id="AOC的同步策略"><a href="#AOC的同步策略" class="headerlink" title="AOC的同步策略"></a>AOC的同步策略</h3><table><thead><tr><th>选项</th><th>同步频率</th></tr></thead><tbody><tr><td>always</td><td>每次命令都写入磁盘，严重降低redis速度</td></tr><tr><td>everysec</td><td>每秒执行一次，显示将多个命令写入到磁盘</td></tr><tr><td>no</td><td>操作系统决定，佛系</td></tr></tbody></table><p>分析：</p><ol><li>第一种对于固态的硬盘的伤害比较大，我们都知道固态的擦写次数的寿命是远远小于机械硬盘的，频繁的io是容易对固态造成欺骗认为一次擦写，导致本就寿命不长的固态变得更命短，<strong>基本不用</strong>，特殊情况下有可能用得到</li><li>第二种是默认的方式，也是推荐以及比较实用的方式，最多只会丢失一秒的数据，这种方式比较好的保证数据的备份可用，<strong>推荐使用</strong></li><li>第三种对于CPU的压力是最小的，因为由系统决定，但是需要考虑能不能接受不定量的数据丢失，还有一个原因是硬盘将缓冲区刷新到硬盘不定时，所以<strong>不建议使用</strong></li></ol><h3 id="重写和压缩AOF文件："><a href="#重写和压缩AOF文件：" class="headerlink" title="重写和压缩AOF文件："></a>重写和压缩AOF文件：</h3><p>由于1秒一次同步在不断写入之后造成文件内容越来越大，同时同步速度也会变慢，为了解决这个问题，redis引入了<code>bgrewriteaof</code>命令来进行压缩，和<code>bgsave</code>创建快照类似，同样会有子进程拖垮的问题，同时会有大文件在重写的时候带来巨大的文件系统删除的压力，导致系统阻塞。</p><p>命令如下</p><p><code>bgrewriteaof</code></p><p>示例如下：</p><blockquote><p>127.0.0.1:16379&gt; BGREWRITEAOF<br>Background append only file rewriting started</p></blockquote><blockquote><p>参数控制：</p><p>auto-aof-rewrite-percentage：<strong>100</strong></p><p>auto-aof-rewrite-min-size ：<strong>64MB</strong></p><p>这里案例配置代表当AOF大于64并且扩大了100%将处罚<strong>bgrewrite</strong>命令</p></blockquote><h4 id="redis-aof的rewrite做了那些事？"><a href="#redis-aof的rewrite做了那些事？" class="headerlink" title="redis aof的rewrite做了那些事？"></a>redis aof的rewrite做了那些事？</h4><ol><li>对于一些冗余的命令进行清除</li><li>检测存在错误的命令，将错误命令下面的所有命令都进行清理，一般情况是末尾由于宕机没有执行完的一些命令清理。</li></ol><h3 id="aof的优缺点对比"><a href="#aof的优缺点对比" class="headerlink" title="aof的优缺点对比"></a>aof的优缺点对比</h3><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><ol><li>从不同步，效率高</li><li>每秒同步一次，可能丢失一秒数据</li><li>每次修改都同步，文件完整性好</li></ol><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><ol><li>相对于数据文件来说，aof远远大于rdb。修复速度慢一些</li><li>存在未知的bug，比如如果重写aof文件的时候突然中断，会有很多奇怪的现象</li></ol><h2 id="如何检查redis的性能瓶颈："><a href="#如何检查redis的性能瓶颈：" class="headerlink" title="如何检查redis的性能瓶颈："></a>如何检查redis的性能瓶颈：</h2><ol><li>redis-benchmark 官方推荐的性能测试工具，非常强大，具体的地址为：<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9yZWRpcy9yZWRpcy1iZW5jaG1hcmtzLmh0bWw=" title="https://www.runoob.com/redis/redis-benchmarks.html">https://www.runoob.com/redis/redis-benchmarks.html<i class="fa fa-external-link"></i></span></li><li>Redis-cli中调用<code>slowlog get</code>，作用是返回执行时间<strong>超过redis.conf</strong>中定义的持续时间的命令列表，注意这个时间仅仅是请求的处理时间，不包含网络通信的时间，<strong>默认值是一秒</strong>，</li></ol><blockquote><p>redis.conf 当中对于慢日志的解释:</p><p>The following time is expressed in microseconds, so 1000000 is equivalent to one second. Note that a negative number disables the slow log, while a value of zero forces the logging of every command.</p><p>接下来的时间以微秒为单位，因此1000000等于一秒。 请注意，负数将禁用慢速日志记录，而零值将强制记录每个命令。<strong>（以微秒为单位）</strong></p><p><strong>slowlog-log-slower-than 10000</strong></p><p>There is no limit to this length. Just be aware that it will consume memory. You can reclaim memory used by the slow log with SLOWLOG RESET.</p><p>该长度没有限制。 请注意，它将消耗内存。 您可以使用SLOWLOG RESET回收慢速日志使用的内存。<strong>（意思就是说超过128条之后的命令会被自动移除）</strong></p><p><strong>slowlog-max-len 128</strong></p></blockquote><blockquote><p>可以用命令 SLOWLOG RESET 清楚慢日志占用的内存</p><p>127.0.0.1:16379&gt; SLOWLOG reset<br>OK</p></blockquote><p>==慢日志是存储在内存当中的，切记==</p><h2 id="持久化性能建议"><a href="#持久化性能建议" class="headerlink" title="持久化性能建议"></a>持久化性能建议</h2><blockquote><ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。</li></ul></blockquote><blockquote><ul><li>如果Enalbe AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。</li></ul></blockquote><blockquote><ul><li>如果不Enable AOF ，仅靠Master-Slave Replication 实现高可用性也可以。能省掉一大笔IO也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。<strong>新浪微博</strong>就选用了这种架构。</li></ul></blockquote><p>其他性能优化指南（强烈推荐）：</p><p><span class="exturl" data-url="aHR0cHM6Ly9zenRoYW5hdG9zLmdpdGh1Yi5pby90b3BpYy9yZWRpcy9pbXByb3ZlLTAyLw==" title="https://szthanatos.github.io/topic/redis/improve-02/">https://szthanatos.github.io/topic/redis/improve-02/<i class="fa fa-external-link"></i></span></p><h2 id="总结对比rdb和aof："><a href="#总结对比rdb和aof：" class="headerlink" title="总结对比rdb和aof："></a>总结对比rdb和aof：</h2><table><thead><tr><th></th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td><strong>存储内容</strong></td><td>数据</td><td>写操作日志</td></tr><tr><td><strong>性能影响</strong></td><td>小</td><td>大</td></tr><tr><td><strong>恢复速度</strong></td><td>高</td><td>低</td></tr><tr><td><strong>存储空间</strong></td><td>小</td><td>大</td></tr><tr><td><strong>可读性</strong></td><td>低</td><td>高</td></tr><tr><td><strong>安全程度</strong></td><td>较低，保存频率低</td><td>较高，保存频率高</td></tr><tr><td><strong>默认开启</strong></td><td>是</td><td>否</td></tr><tr><td><strong>存储策略</strong></td><td><code>save 900 1</code>：九百秒内一次修改即保存 <code>save 300 10</code>：三百秒内十次修改即保存 <code>save 60 10000</code>：六十秒内一万次修改即保存 允许自定义</td><td><code>always</code>：逐条保存 or <code>everysec</code>：每秒保存 or <code>no</code>：系统自己决定什么时候保存</td></tr></tbody></table><h2 id="其他拓展知识："><a href="#其他拓展知识：" class="headerlink" title="其他拓展知识："></a>其他拓展知识：</h2><h3 id="关于linux内核开启transparent-hugepage会带来的阻塞问题："><a href="#关于linux内核开启transparent-hugepage会带来的阻塞问题：" class="headerlink" title="关于linux内核开启transparent_hugepage会带来的阻塞问题："></a>关于linux内核开启<code>transparent_hugepage</code>会带来的阻塞问题：</h3><p>个人对于Linux学艺不精，就直接引用文章了，侵权请联系删除</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2Vycnljb2RlL3AvNDY3MDkzMS5odG1s" title="https://www.cnblogs.com/kerrycode/p/4670931.html">Linux 关于Transparent Hugepages的介绍<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS8xMTUyMzEzLzE3Njc5Mjc=" title="https://blog.51cto.com/1152313/1767927">简单说说THP——记一次数据库服务器阻塞的问题解决<i class="fa fa-external-link"></i></span></p><h3 id="官方解决aof和rdb对于性能问题的折中处理方式"><a href="#官方解决aof和rdb对于性能问题的折中处理方式" class="headerlink" title="官方解决aof和rdb对于性能问题的折中处理方式"></a>官方解决aof和rdb对于性能问题的折中处理方式</h3><ol><li>redis4.0之后有一个参数叫做:<code>aof-use-rdb-preamble yes</code></li></ol><p>参数解释如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># When rewriting the AOF file, Redis is able to use an RDB preamble in the</span><br><span class="line"># AOF file for faster rewrites and recoveries. When this option is turned</span><br><span class="line"># on the rewritten AOF file is composed of two different stanzas:</span><br><span class="line">#</span><br><span class="line">#   [RDB file][AOF tail]</span><br><span class="line">#</span><br><span class="line"># When loading, Redis recognizes that the AOF file starts with the &quot;REDIS&quot;</span><br><span class="line"># string and loads the prefixed RDB file, then continues loading the AOF</span><br><span class="line"># tail.</span><br><span class="line">＃重写AOF文件时，Redis可以在</span><br><span class="line">＃AOF文件可加快重写和恢复速度。 启用此选项时</span><br><span class="line">重写的AOF文件上的＃由两个不同的节组成：</span><br><span class="line">＃</span><br><span class="line">＃[RDB文件] [AOF尾巴]</span><br><span class="line">＃</span><br><span class="line">＃加载时，Redis会识别AOF文件以“ REDIS”开头</span><br><span class="line">＃字符串并加载带前缀的RDB文件，然后继续加载AOF</span><br><span class="line">＃ 尾巴。</span><br></pre></td></tr></table></figure><p>大致的内容就是说redis会将较早的部分内容转为RDB文件进行恢复，同时加入近期的数据为AOF文件</p><p>加载的时候先执行rdb文件的恢复，然后再加载aof命令</p><h3 id="如何进行内存清理"><a href="#如何进行内存清理" class="headerlink" title="如何进行内存清理"></a>如何进行内存清理</h3><p>在<strong>redis4.0</strong>之后，可以通过将配置里的<code>activedefrag</code>设置为<code>yes</code>开启自动清理，或者通过<code>memory purge</code>命令手动清理。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      关于redis持久化的一些学习了解，以及一些拓展知识的了解
    
    </summary>
    
    
      <category term="redis专栏" scheme="https://lazytime.site/categories/redis%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="redis" scheme="https://lazytime.site/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>记一次阿里云安装mysql （rpm安装）</title>
    <link href="https://lazytime.site/2020/11/15/note/"/>
    <id>https://lazytime.site/2020/11/15/note/</id>
    <published>2020-11-15T07:55:50.000Z</published>
    <updated>2020-11-15T08:07:21.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载mysql源安装包"><a href="#下载mysql源安装包" class="headerlink" title="下载mysql源安装包"></a>下载mysql源安装包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="安装mysql源"><a href="#安装mysql源" class="headerlink" title="安装mysql源"></a>安装mysql源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="检测是否安装完成"><a href="#检测是否安装完成" class="headerlink" title="检测是否安装完成"></a>检测是否安装完成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br></pre></td></tr></table></figure><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><h2 id="设置开启启动mysql服务"><a href="#设置开启启动mysql服务" class="headerlink" title="设置开启启动mysql服务"></a>设置开启启动mysql服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure><h2 id="查看安装的mysql版本"><a href="#查看安装的mysql版本" class="headerlink" title="查看安装的mysql版本"></a>查看安装的mysql版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -aq | grep -i mysql</span><br></pre></td></tr></table></figure><h2 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h2 id="查看MySQL初始密码"><a href="#查看MySQL初始密码" class="headerlink" title="查看MySQL初始密码"></a>查看MySQL初始密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#39;A temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br></pre></td></tr></table></figure><p>执行上面步骤可以获得mysql初始数据库密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取到初始密码：.DhtciCJ?3rg</span><br></pre></td></tr></table></figure><p>根据此密码就可以在第一次root登录的时候修改密码</p><h2 id="更改MySQL密码"><a href="#更改MySQL密码" class="headerlink" title="更改MySQL密码"></a>更改MySQL密码</h2><p><code>mysqladmin -u root -p&#39;旧密码&#39; password &#39;新密码&#39;</code></p><h3 id="初始化更改密码的案例"><a href="#初始化更改密码的案例" class="headerlink" title="初始化更改密码的案例"></a>初始化更改密码的案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin  -u root -p &#39;xxx&#39; password &#39;xxxxx&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;.DhtciCJ?3rg&#39; # 这里用刚刚到随机初始密码</span><br></pre></td></tr></table></figure><blockquote><p>这里会可能出现<font color='red'>更改失败</font>的问题</p><p>方法一：把密码设置复杂点（这是最直接的方法）</p><p>方法二：关闭mysql密码强度验证(validate_password)</p><p>　　　　编辑配置文件：vim /etc/my.cnf， 增加这么一行validate_password=off</p><p>　　　　编辑后重启mysql服务：systemctl restart mysqld</p></blockquote><h2 id="设置mysql能够远程访问（不建议使用root）"><a href="#设置mysql能够远程访问（不建议使用root）" class="headerlink" title="设置mysql能够远程访问（不建议使用root）"></a>设置mysql能够远程访问（不建议使用root）</h2><h3 id="1-登录进MySQL：mysql-uroot-p密码"><a href="#1-登录进MySQL：mysql-uroot-p密码" class="headerlink" title="1. 登录进MySQL：mysql -uroot -p密码"></a>1. 登录进MySQL：mysql -uroot -p密码</h3><p>注意只有root用户才可以操作</p><h3 id="2-在阿里云当中增加一个用户给予访问权限："><a href="#2-在阿里云当中增加一个用户给予访问权限：" class="headerlink" title="2. 在阿里云当中增加一个用户给予访问权限："></a>2. 在阿里云当中增加一个用户给予访问权限：</h3><p>具体查看阿里云配置安全组</p><h3 id="开放用户远程访问"><a href="#开放用户远程访问" class="headerlink" title="开放用户远程访问:"></a>开放用户远程访问:</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaG9nZS9wLzQ5NTgyMTQuaHRtbA==" title="https://www.cnblogs.com/hoge/p/4958214.html">https://www.cnblogs.com/hoge/p/4958214.html<i class="fa fa-external-link"></i></span></p><p>mysql中添加一个和root一样的用户用于远程连接：</p><p>大家在拿站时应该碰到过。root用户的mysql，只可以本地连，对外拒绝连接。</p><p>下面语句添加一个新用户<code>administrtor</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 创建新用户</span><br><span class="line">CREATE USER &#39;monitor&#39;@&#39;%&#39; IDENTIFIED BY &#39;admin&#39;;</span><br><span class="line"></span><br><span class="line">-- 给用户分配root并且支持远程访问</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;monitor&#39;@&#39;%&#39; IDENTIFIED BY &#39;admin&#39; WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;</span><br></pre></td></tr></table></figure><p>删除这个用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 删除用户</span><br><span class="line">DROP USER &#39;monitor&#39;@&#39;%&#39;;</span><br><span class="line">-- 删除具体分配表</span><br><span class="line">DROP DATABASE IF EXISTS &#96;monitor&#96; ;</span><br></pre></td></tr></table></figure><h3 id="3-阿里云的安全组设置里面选择添加安全组规则，开启3306端口。授权对象选择0-0-0-0-0所有ip可访问，如果添加限制可以点击旁面的小叹号。"><a href="#3-阿里云的安全组设置里面选择添加安全组规则，开启3306端口。授权对象选择0-0-0-0-0所有ip可访问，如果添加限制可以点击旁面的小叹号。" class="headerlink" title="3. 阿里云的安全组设置里面选择添加安全组规则，开启3306端口。授权对象选择0.0.0.0/0所有ip可访问，如果添加限制可以点击旁面的小叹号。"></a>3. 阿里云的安全组设置里面选择添加安全组规则，开启3306端口。授权对象选择<code>0.0.0.0/0</code>所有ip可访问，如果添加限制可以点击旁面的小叹号。</h3><h3 id="4-最后：建议重启一下mysqld的服务"><a href="#4-最后：建议重启一下mysqld的服务" class="headerlink" title="4. 最后：建议重启一下mysqld的服务"></a><font color='red'>4. 最后：建议重启一下mysqld的服务</font></h3><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      使用rpm进行mysql安装
    
    </summary>
    
    
      <category term="数据库" scheme="https://lazytime.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://lazytime.site/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>如何使用java代码导出word</title>
    <link href="https://lazytime.site/2020/11/11/word-export/"/>
    <id>https://lazytime.site/2020/11/11/word-export/</id>
    <published>2020-11-11T15:03:01.000Z</published>
    <updated>2020-11-11T15:04:29.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>导出word的需求其实在日常工作中用到的地方还不少，于是想写一篇文章好好记录一下，在导出之前，需要了解一下关于浏览器如何处理servlet的后台数据。具体可以了解一下http通信下载行为在servlet的实现。</p><p>==导出的工具类代码来源于网络，如有侵权可以联系我删除文章==</p><p><strong>个人使用==ftl==作为word导出模板引擎，有很多模板引擎可以选，个人经过查阅资料发现ftl用的比较多，所以选择这一种</strong></p><a id="more"></a><h2 id="码云地址："><a href="#码云地址：" class="headerlink" title="码云地址："></a>码云地址：</h2><p>文章牵扯代码比较多，如果要看具操作可以查看我自己瞎弄的一个码云地址：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ludGVydmlldy5naXQ=" title="https://gitee.com/lazyTimes/interview.git">https://gitee.com/lazyTimes/interview.git<i class="fa fa-external-link"></i></span></p><h2 id="效果演示："><a href="#效果演示：" class="headerlink" title="效果演示："></a>效果演示：</h2><p>给了一个测试页面，临时写了一些脚本，可以作为参考（后续会贴Html代码进去）</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201111220825.png" alt=""></p><p>点击提交,导出内容, 导出<code>word</code>报告</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201111220951.png" alt=""></p><p>导出之后，打开word内容为：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201111222011.png" alt=""></p><h2 id="实现步骤-制作word模板"><a href="#实现步骤-制作word模板" class="headerlink" title="实现步骤 - 制作word模板"></a>实现步骤 - 制作word模板</h2><h3 id="第一步-新建word，制作成果样板"><a href="#第一步-新建word，制作成果样板" class="headerlink" title="第一步 新建word，制作成果样板"></a>第一步 新建word，制作成果样板</h3><p>将需要导出word的内容，先粘贴到一个新建的word文件里面</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201111220620.png" alt=""></p><h3 id="第二步-转存格式-gt-xml"><a href="#第二步-转存格式-gt-xml" class="headerlink" title="第二步 转存格式 -&gt; xml"></a>第二步 转存格式 -&gt; xml</h3><p>选择文件“另存为”，将格式设置为xml格式</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20201106091518.png" alt=""></p><h3 id="第三步-格式化文件"><a href="#第三步-格式化文件" class="headerlink" title="第三步 格式化文件"></a>第三步 格式化文件</h3><p>将文件放到<code>idea</code>或者支持格式化的软件里面，进行格式化，保存:</p><p>注意占位符要匹配</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201111222316.png" alt=""></p><h3 id="第四步：模板数据替换占位符"><a href="#第四步：模板数据替换占位符" class="headerlink" title="第四步：模板数据替换占位符"></a>第四步：模板数据替换占位符</h3><p>在word页面将需要导入数据的地方，替换占位符</p><blockquote><p>需要注意内容处理的时候: ${ filename｝ 有可能被切割为多个部分，我们需要把多个切割部分，改为下面的样式</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201111222554.png" alt=""></p><p><strong>一定记得所有的改动之后，马上打开xml格式的word，确认是不是改崩了</strong></p><p>上面的步骤完成，说明有一个word模板做好了</p><h3 id="第五步：制作ftl文件，word模板成型"><a href="#第五步：制作ftl文件，word模板成型" class="headerlink" title="第五步：制作ftl文件，word模板成型"></a>第五步：制作ftl文件，word模板成型</h3><p>在项目里面新建一个ftl文件，同时需要在工具类中配置，同时把做好站位符操作的xml内容贴进去</p><h2 id="代码实现-导出代码"><a href="#代码实现-导出代码" class="headerlink" title="代码实现 - 导出代码"></a>代码实现 - 导出代码</h2><ol><li>工具类的配置如下:</li></ol><p><code>WordGeneratorUtil.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板常量类配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FreemarkerTemplate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REPORT = <span class="string">"report"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REC_RECOMMEND = <span class="string">"recRecommend"</span>;</span><br><span class="line">    <span class="comment">// 增加你的模板文件名称:</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在静态的代码块里面，需要注入对应的模板配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意初始化要载入对应模板</span></span><br><span class="line">allTemplates.put(FreemarkerTemplate.REPORT, configuration.getTemplate(FreemarkerTemplate.REPORT + <span class="string">".ftl"</span>));</span><br><span class="line">allTemplates.put(FreemarkerTemplate.REC_RECOMMEND,configuration.getTemplate(FreemarkerTemplate.REC_RECOMMEND + <span class="string">".ftl"</span>));</span><br></pre></td></tr></table></figure><ol start="2"><li>在配置完成之后，导出的时候就可以找到对应的文件了</li><li>建立一个通用的导出方法:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建doc 文档</span></span><br><span class="line"><span class="comment">     * dataMap 数据，需要对应模板的占位符，否则会出错</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wordName  word 报表的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> freemarkerTemplateName  指定需要使用哪个freemarker模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">createDoc</span><span class="params">(String freemarkerTemplateName, String wordName, Map&lt;String, String&gt; dataMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(wordName);</span><br><span class="line">        Template t = allTemplates.get(freemarkerTemplateName);</span><br><span class="line">        <span class="comment">// 这个地方不能使用FileWriter因为需要指定编码类型否则生成的Word文档会因为有无法识别的编码而无法打开</span></span><br><span class="line">        Writer w = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(f), StandardCharsets.UTF_8);</span><br><span class="line">        t.process(dataMap, w);</span><br><span class="line">        w.close();</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"生成word文档失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具类完整代码："><a href="#工具类完整代码：" class="headerlink" title="工具类完整代码："></a>工具类完整代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxd.interview.export;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 从网络上根据资料找到的一个工具类</span></span><br><span class="line"><span class="comment"> * 主要以freemarker 为核心的模板生成word文档的工具类</span></span><br><span class="line"><span class="comment"> * 这里默认配置了固定路径</span></span><br><span class="line"><span class="comment"> * 需要根据路径取到对应模板</span></span><br><span class="line"><span class="comment"> * 请求参数需要设置对应的模板名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: WordGeneratorUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文档生成工具类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * version: V1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WordGeneratorUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Template&gt; allTemplates = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEMPLATE_URL = <span class="string">"/templates"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板常量类配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FreemarkerTemplate</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Test = <span class="string">"test"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REPORT = <span class="string">"report"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REC_RECOMMEND = <span class="string">"recRecommend"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        configuration = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_28);</span><br><span class="line">        configuration.setDefaultEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        configuration.setClassForTemplateLoading(WordGeneratorUtil<span class="class">.<span class="keyword">class</span>, <span class="title">TEMPLATE_URL</span>)</span>;</span><br><span class="line">        allTemplates = <span class="keyword">new</span> HashMap(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 注意初始化要载入对应模板</span></span><br><span class="line">            allTemplates.put(FreemarkerTemplate.Test, configuration.getTemplate(FreemarkerTemplate.Test + <span class="string">".ftl"</span>));</span><br><span class="line">            allTemplates.put(FreemarkerTemplate.REPORT, configuration.getTemplate(FreemarkerTemplate.REPORT + <span class="string">".ftl"</span>));</span><br><span class="line">            allTemplates.put(FreemarkerTemplate.REC_RECOMMEND, configuration.getTemplate(FreemarkerTemplate.REC_RECOMMEND + <span class="string">".ftl"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WordGeneratorUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建doc 文档</span></span><br><span class="line"><span class="comment">     * dataMap 数据，需要对应模板的占位符，否则会出错</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wordName  word 报表的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> freemarkerTemplateName  指定需要使用哪个freemarker模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">createDoc</span><span class="params">(String freemarkerTemplateName, String wordName, Map&lt;String, String&gt; dataMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File f = <span class="keyword">new</span> File(wordName);</span><br><span class="line">            Template t = allTemplates.get(freemarkerTemplateName);</span><br><span class="line">            <span class="comment">// 这个地方不能使用FileWriter因为需要指定编码类型否则生成的Word文档会因为有无法识别的编码而无法打开</span></span><br><span class="line">            Writer w = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(f), StandardCharsets.UTF_8);</span><br><span class="line">            t.process(dataMap, w);</span><br><span class="line">            w.close();</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"生成word文档失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用层："><a href="#调用层：" class="headerlink" title="调用层："></a>调用层：</h3><ol><li>在业务层，将需要导出的数据，根据占位符的i信息进行赋值，注意不能漏，否则导出之后的文件会打不开</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">exportQualityStep4Word</span><span class="params">(WordReportDTO exportWordRequest)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; datas = <span class="keyword">new</span> HashMap(QualityConstants.HASH_MAP_INIT_VALUE);</span><br><span class="line">    <span class="comment">//主标题</span></span><br><span class="line">    datas.put(<span class="string">"schoolName"</span>, exportWordRequest.getSchoolName());</span><br><span class="line">    datas.put(<span class="string">"title1"</span>, exportWordRequest.getBaseSituation());</span><br><span class="line">    datas.put(<span class="string">"title2"</span>, exportWordRequest.getLearningEnvRec());</span><br><span class="line">    datas.put(<span class="string">"title3"</span>, exportWordRequest.getLearningEnvPro());</span><br><span class="line">    datas.put(<span class="string">"title4"</span>, exportWordRequest.getDayLifeRec());</span><br><span class="line">    datas.put(<span class="string">"title5"</span>, exportWordRequest.getDayLifePro());</span><br><span class="line">    datas.put(<span class="string">"title6"</span>, exportWordRequest.getLearningActivityRec());</span><br><span class="line">    datas.put(<span class="string">"title7"</span>, exportWordRequest.getLearningActivityPro());</span><br><span class="line">    datas.put(<span class="string">"title8"</span>, exportWordRequest.getDevRecommend());</span><br><span class="line"></span><br><span class="line">    datas.put(<span class="string">"base64_1"</span>, exportWordRequest.getBase64_1());</span><br><span class="line">    datas.put(<span class="string">"base64_2"</span>, exportWordRequest.getBase64_2());</span><br><span class="line">    datas.put(<span class="string">"base64_3"</span>, exportWordRequest.getBase64_3());</span><br><span class="line">    datas.put(<span class="string">"base64_4"</span>, exportWordRequest.getBase64_4());</span><br><span class="line">    datas.put(<span class="string">"base64_5"</span>, exportWordRequest.getBase64_5());</span><br><span class="line">    datas.put(<span class="string">"base64_6"</span>, exportWordRequest.getBase64_6());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//导出</span></span><br><span class="line">    <span class="keyword">return</span> WordGeneratorUtil.createDoc(WordGeneratorUtil.FreemarkerTemplate.REPORT,</span><br><span class="line">                                       exportWordRequest.getWordName(),</span><br><span class="line">                                       datas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>下面是生成报表导出的基本操作，可以在用到的地方复制过去改动即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成报告的导出报表操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request           request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response          响应数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exportWordRequest 导出dto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/quality/exportword"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">povertyExportWord</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                              WordReportDTO exportWordRequest)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    File file = qualityReportService.exportQualityStep4Word(exportWordRequest);</span><br><span class="line"></span><br><span class="line">    InputStream fin = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用工具类WordGeneratorUtils的createDoc方法生成Word文档</span></span><br><span class="line">        fin = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">        response.setCharacterEncoding(QualityConstants.UTF_8);</span><br><span class="line">        response.setContentType(QualityConstants.CONTENT_TYPE_WORD);</span><br><span class="line">        <span class="comment">// 设置浏览器以下载的方式处理该文件</span></span><br><span class="line">        <span class="comment">// 设置文件名编码解决文件名乱码问题</span></span><br><span class="line">        <span class="comment">//获得请求头中的User-Agent</span></span><br><span class="line">        String filename = exportWordRequest.getWordName();</span><br><span class="line">        String agent = request.getHeader(QualityConstants.USER_AGENT);</span><br><span class="line">        String filenameEncoder = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// 根据不同的浏览器进行不同的判断</span></span><br><span class="line">        <span class="keyword">if</span> (agent.contains(QualityConstants.MSIE)) &#123;</span><br><span class="line">            <span class="comment">// IE浏览器</span></span><br><span class="line">            filenameEncoder = URLEncoder.encode(filename, QualityConstants.UTF_8);</span><br><span class="line">            filenameEncoder = filenameEncoder.replace(<span class="string">"+"</span>, <span class="string">" "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(QualityConstants.FIREFOX)) &#123;</span><br><span class="line">            <span class="comment">// 火狐浏览器</span></span><br><span class="line">            BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            filenameEncoder = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(filename.getBytes(QualityConstants.UTF_8)) + <span class="string">"?="</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其它浏览器</span></span><br><span class="line">            filenameEncoder = URLEncoder.encode(filename, QualityConstants.UTF_8);</span><br><span class="line">        &#125;</span><br><span class="line">        response.setHeader(QualityConstants.ACCESS_CONTROL_ALLOW_ORIGIN, <span class="string">"*"</span>);<span class="comment">//所有域都可以跨</span></span><br><span class="line">        response.setHeader(QualityConstants.CONTENT_TYPE, QualityConstants.CONTENT_TYPE_STEAM);<span class="comment">//二进制  流文件</span></span><br><span class="line">        response.setHeader(QualityConstants.CONTENT_DISPOSITION, <span class="string">"attachment;filename="</span> + filenameEncoder + <span class="string">".doc"</span>);<span class="comment">//下载及其文件名</span></span><br><span class="line">        response.setHeader(QualityConstants.CONNECTION, QualityConstants.CLOSE);<span class="comment">//关闭请求头连接</span></span><br><span class="line">        <span class="comment">//设置文件在浏览器打开还是下载</span></span><br><span class="line">        response.setContentType(QualityConstants.CONTENT_TYPE_DOWNLOAD);</span><br><span class="line">        out = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[QualityConstants.BYTE_512];</span><br><span class="line">        <span class="keyword">int</span> bytesToRead = QualityConstants.NUM_MINUS_1;</span><br><span class="line">        <span class="comment">// 通过循环将读入的Word文件的内容输出到浏览器中</span></span><br><span class="line">        <span class="keyword">while</span> ((bytesToRead = fin.read(buffer)) != QualityConstants.NUM_MINUS_1) &#123;</span><br><span class="line">            out.write(buffer, QualityConstants.NUM_ZERO, bytesToRead);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(QualityConstants.FARIURE_EXPORT, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fin != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fin.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(QualityConstants.FARIURE_EXPORT, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导出实体dto"><a href="#导出实体dto" class="headerlink" title="导出实体dto"></a>导出实体dto</h3><p>下面写了一个导出的实体dto，实体对象可以自己定制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxd.interview.dto;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试使用的dto，用于封装导出word的对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/7 23:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReportDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String test0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String test1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String test2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String test4;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String test5;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String test6;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 报告名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String wordName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest0</span><span class="params">(String test0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test0 = test0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest1</span><span class="params">(String test1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test1 = test1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest2</span><span class="params">(String test2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test2 = test2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest4</span><span class="params">(String test4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test4 = test4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest5</span><span class="params">(String test5)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test5 = test5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest6</span><span class="params">(String test6)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test6 = test6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWordName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wordName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWordName</span><span class="params">(String wordName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wordName = wordName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"TestReportDTO&#123;"</span> +</span><br><span class="line">                <span class="string">"test0='"</span> + test0 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", test1='"</span> + test1 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", test2='"</span> + test2 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", test4='"</span> + test4 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", test5='"</span> + test5 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", test6='"</span> + test6 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常量配置模块"><a href="#常量配置模块" class="headerlink" title="常量配置模块:"></a>常量配置模块:</h3><p>个人很不喜欢硬编码这东西，又丑又难看，所以很多东西会用不可变对象替代.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxd.interview.constant;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常量配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhouhui</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QualityConstants</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 质量检测 的督导事项id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EVENTID = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_ZERO = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_ONE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_TWO = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_MINUS_1 = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节大小512</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BYTE_512 = <span class="number">512</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CODE_500 = <span class="number">500</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误提示信息 - 状态非法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_500_MSG_1 = <span class="string">"状态非法!"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误提示信息 - 非督导用户不允许查看质量检测记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_500_MSG_2 = <span class="string">"非督导用户不允许查看质量检测记录!"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误提示信息 - 这条质量监测已经完成！无法修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_500_MSG_3 = <span class="string">"这条质量监测已经完成！无法修改！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误提示信息 - 提交失败，材料上传不能为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_500_MSG_4 = <span class="string">"提交失败，材料上传不能为空"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误提示信息 - 提交失败，请稍后重试或联系管理员</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_500_MSG_5 = <span class="string">"提交失败，请稍后重试或联系管理员！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误提示信息 - 提交失败，意见反馈不能为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_500_MSG_6 = <span class="string">"提交失败，意见反馈不能为空!"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 405错误编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CODE_405 = <span class="number">405</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 405错误提示信息 - 该信息只允许督导查看</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_405_MSG_1 = <span class="string">"该信息只允许督导查看!"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 200成功编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CODE_200 = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 200成功提示信息 - 该信息只允许督导查看</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_200_MSG_1 = <span class="string">"提交成功!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误提示信息 - 尚未选择记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELETE_FAIRURE_MSG = <span class="string">"删除失败，尚未选择记录！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误提示信息 - 尚未选择记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NO_RECORD_SELECTED = <span class="string">"尚未选择记录！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符编码utf-8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String UTF_8 = <span class="string">"utf-8"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认pid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PID = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认层级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFUALT_LAYER = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不适当最低得分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer MIN_SCORE = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优秀最高得分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer MAX_SCORE = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * map的hash初始值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_MAP_INIT_VALUE = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全园平均分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String WHOLE_AVERAGE = <span class="string">"全园平均分"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUERY_FAIRURE = <span class="string">"查询失败"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SUCCESS_MSG = <span class="string">"操作成功！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FARIURE_MSG = <span class="string">"操作失败！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FARIURE_EXPORT = <span class="string">"导出失败！"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头 - 文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONTENT_TYPE_WORD = <span class="string">"application/msword"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头 - 下载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONTENT_TYPE_DOWNLOAD = <span class="string">"application/x-download"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头 - 二进制文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONTENT_TYPE_STEAM = <span class="string">"application/octet-stream;charset=UTF-8"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String USER_AGENT = <span class="string">"User-Agent"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONTENT_TYPE = <span class="string">"Content-Type"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECTION = <span class="string">"Connection"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CLOSE = <span class="string">"close"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String ACCESS_CONTROL_ALLOW_ORIGIN = <span class="string">"Access-Control-Allow-Origin"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONTENT_DISPOSITION = <span class="string">"Content-Disposition"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浏览器 - ie</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String MSIE = <span class="string">"MSIE"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浏览器 - Firefox</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FIREFOX = <span class="string">"Firefox"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 填写报告的step</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String MODULE_STEP3_REPORT = <span class="string">"qualityreport"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 督导下园核实的材料</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String MODULE_STEP1_MATERIAL = <span class="string">"qualitymetrail"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_3 = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_4 = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_5 = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_6 = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字7</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_7 = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_8 = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字9</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_9 = <span class="number">9</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_10 = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字11</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_11 = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_12 = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字13</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_13 = <span class="number">13</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字14</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_14 = <span class="number">14</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字15</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_15 = <span class="number">15</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_16 = <span class="number">16</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字17</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_17 = <span class="number">17</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字18</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_18 = <span class="number">18</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字19</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_19 = <span class="number">19</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字20</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_20 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化数字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String DECIMAL_Format = <span class="string">"######.00"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面层处理："><a href="#页面层处理：" class="headerlink" title="页面层处理："></a>页面层处理：</h3><p>前端增加一个form提交，使用form提交表单数据，实现word导出功能:</p><p>(注意使用的模板引擎是thymeleaf)</p><h4 id="html代码"><a href="#html代码" class="headerlink" title="html代码:"></a>html代码:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue1"</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;form @submit.prevent="submit"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                导出word名称：&lt;input class="form-control" type="text" v-model="student.wordName"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--            &lt;div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                test0：&lt;input type="text" class="form-control" v-model="student.test0"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                test1：&lt;input type="text" class="form-control" v-model="student.test1"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                test2：&lt;input type="text" class="form-control" v-model="student.test2"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                test4：&lt;input type="text" class="form-control" v-model="student.test4"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                test5：&lt;input type="text" class="form-control" v-model="student.test5"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                test6：&lt;input type="text" class="form-control" v-model="student.test6"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--            &lt;input type="submit" class="btn btn-danger" value="提交"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/form&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/quality/exportword"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                导出word名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"wordName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                test0：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"test0"</span>&gt;</span></span><br><span class="line">                test1：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"test1"</span>&gt;</span></span><br><span class="line">                test2：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"test2"</span>&gt;</span></span><br><span class="line">                test4：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"test4"</span>&gt;</span></span><br><span class="line">                test5：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"test5"</span>&gt;</span></span><br><span class="line">                test6：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"test6"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/exportword.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h4><p>使用js代码处理form表单提交，使用了jquery进行导出，其实一直不太懂前端怎么导出后台产生的二进制流，做法挺多，下次写一篇文章好好汇总一下几种用法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#vue1'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        counter: <span class="number">0</span>,</span><br><span class="line">        student: &#123;</span><br><span class="line">            test0:<span class="string">''</span>,</span><br><span class="line">            test1:<span class="string">''</span>,</span><br><span class="line">            test2:<span class="string">''</span>,</span><br><span class="line">            test3:<span class="string">''</span>,</span><br><span class="line">            test4:<span class="string">''</span>,</span><br><span class="line">            test5:<span class="string">''</span>,</span><br><span class="line">            test6:<span class="string">''</span>,</span><br><span class="line">            wordName: <span class="string">''</span>,</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        test: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.counter);</span><br><span class="line">        &#125;,</span><br><span class="line">        submit() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.student);</span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">'/quality/exportword'</span>;</span><br><span class="line">            <span class="keyword">var</span> formData = <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.student); <span class="comment">// this指向这个VUE实例 data默认绑定在实例下的。所以直接this.student就是要提交的数据</span></span><br><span class="line">            <span class="keyword">this</span>.$http.post(url, formData).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">                <span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([data.data],&#123; <span class="attr">type</span>: <span class="string">'application/vnd.openxmlformats-officedocument.wordprocessingml.document;charset=utf-8'</span>&#125;);</span><br><span class="line">                <span class="keyword">let</span> objectUrl = URL.createObjectURL(blob);</span><br><span class="line">                <span class="built_in">window</span>.location.href = objectUrl;</span><br><span class="line">            &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h1><p>个人水平一般，希望通过这篇文章可以帮到读者，有错误的地方欢迎指点，看到会及时改成，谢谢！</p><p>前段时间忙于面试找到新的地方工作了，等工作安定之后，会继续深耕博客和技术栈。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      如何使用java代码导出word
    
    </summary>
    
    
      <category term="笔记" scheme="https://lazytime.site/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="word" scheme="https://lazytime.site/tags/word/"/>
    
  </entry>
  
  <entry>
    <title>我的Neo4j探索之旅 - 安装Apoc插件以及JAVA集成（二）</title>
    <link href="https://lazytime.site/2020/11/03/note/"/>
    <id>https://lazytime.site/2020/11/03/note/</id>
    <published>2020-11-02T16:06:48.000Z</published>
    <updated>2020-11-02T16:08:14.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上一篇文章："><a href="#上一篇文章：" class="headerlink" title="上一篇文章："></a>上一篇文章：</h1><p>不知道为什么掘金我发不出文章，找不到那里违规了，上一篇文章我发布到思否了：</p><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzY5MDU0OA==" title="https://segmentfault.com/a/1190000037690548">https://segmentfault.com/a/1190000037690548<i class="fa fa-external-link"></i></span></p><a id="more"></a><h1 id="如何安装neo4j-apoc-插件"><a href="#如何安装neo4j-apoc-插件" class="headerlink" title="如何安装neo4j - apoc 插件"></a>如何安装neo4j - apoc 插件</h1><p>有英语阅读能力建议参考官方文档：<span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZGV2ZWxvcGVyL25lbzRqLWFwb2Mv" title="https://neo4j.com/developer/neo4j-apoc/">https://neo4j.com/developer/neo4j-apoc/<i class="fa fa-external-link"></i></span></p><h2 id="1-下载neo4j-apoc-插件"><a href="#1-下载neo4j-apoc-插件" class="headerlink" title="1. 下载neo4j - apoc 插件"></a>1. 下载neo4j - apoc 插件</h2><p>进入github ： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25lbzRqLWNvbnRyaWIvbmVvNGotYXBvYy1wcm9jZWR1cmVzL3JlbGVhc2Vz" title="https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases">https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases<i class="fa fa-external-link"></i></span></p><p>找到和当前neo4j 匹配的版本， 我选择<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25lbzRqLWNvbnRyaWIvbmVvNGotYXBvYy1wcm9jZWR1cmVzL3JlbGVhc2VzL3RhZy8zLjUuMC4xMg==" title="https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/tag/3.5.0.12">3.5.0.12<i class="fa fa-external-link"></i></span> 的版本</p><blockquote><p>这里提供我的：</p><p>链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVRiN2YtYllqd1ZaaGZRdEdmTXIyR3c=" title="https://pan.baidu.com/s/1Tb7f-bYjwVZhfQtGfMr2Gw">https://pan.baidu.com/s/1Tb7f-bYjwVZhfQtGfMr2Gw<i class="fa fa-external-link"></i></span><br>提取码：bzwh</p></blockquote><h2 id="2-具体的安装步骤"><a href="#2-具体的安装步骤" class="headerlink" title="2. 具体的安装步骤"></a>2. 具体的安装步骤</h2><ol start="2"><li>下载好之后，放入到 <code>D:\zxd\tool\neo4j-community-3.5.12-windows\neo4j-community-3.5.12\plugins</code> 下面</li><li>执行<code>neo4j stop</code>，关闭neo4j 服务</li><li>进入 ~/conf 下面，找到<code>neo4j.conf</code> ~表示你的neo4j 安装位置</li><li>修改<code>#dbms.security.procedures.whitelist=apoc.coll.*,apoc.load.*</code> 在这一行的下面增加<code>dbms.security.procedures.unrestricted=apoc.*</code>的配置，安装apoc插件</li></ol><blockquote><p>下面的图看起来就像这样：</p><p>#dbms.security.procedures.whitelist=apoc.coll.<em>,apoc.load.</em><br>dbms.security.procedures.unrestricted=apoc.*</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200827153443.png" alt=""></p><ol start="6"><li>输入 <code>neo4j start</code> 启动neo4j 服务</li><li>在可视化界面，输入<code>return apoc.version()</code> ,如果报错说明没安装对，显示如下页面，证明apoc 插件安装成功</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200827154111.png" alt=""></p><h1 id="Neo4j-集成到java里面"><a href="#Neo4j-集成到java里面" class="headerlink" title="Neo4j 集成到java里面"></a>Neo4j 集成到java里面</h1><h2 id="1-配置maven，加入依赖"><a href="#1-配置maven，加入依赖" class="headerlink" title="1. 配置maven，加入依赖"></a>1. 配置maven，加入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- neo4j 依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.neo4j.driver<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>neo4j-java-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-使用neo4j-集成java实战"><a href="#2-使用neo4j-集成java实战" class="headerlink" title="2. 使用neo4j 集成java实战"></a>2. 使用neo4j 集成java实战</h2><p>这是之前实战的是用的方式，这里说下我大致的设计记录</p><p>需求：</p><ol><li>neo4j 实现插拔式配置，没有配置的情况下进行连接不会影响程序运行</li><li>所有的配置都需要放在<code>application_setting.xml</code>当中</li><li>如果连接neo4j 失败，不做处理</li></ol><h4 id="抽象接口"><a href="#抽象接口" class="headerlink" title="抽象接口"></a>抽象接口</h4><p>在<code>core</code> 包里面， 设计公用开放接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建neo4j url地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildUrl</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建neo4j 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildUsername</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建neo4j 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildPassword</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建neo4j 配置， 目前使用默认 配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Config <span class="title">buildConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否开启自定义配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">enableCustomConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建 Neo4j csv同步地址的前置</span></span><br><span class="line"><span class="comment">     * 默认为 file:///</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildCvsPrefix</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建 neo4j csv同步的普通标签文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildNormalTagSyncFileName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建 neo4j csv同步的业务标签文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildBusinessTagSyncFileName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建 neo4j csv同步的用户标签文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildUserTagSyncFileName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通标签和业务标签的关联csv文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildNormalTagBizSyncFileName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通标签和用户标签的关联csv文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildNormalTagUserSyncFileName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务标签和用户标签的关联csv文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildBizTagUserSyncFileName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主题分类（业务）标签子父关联csv文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildBizChildSyncFileName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通标签标签子父关联csv文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">TODO:</span> 目前普通标签没有子父关联关系，后续需要拓展请开放此接口 by zhaoxudong</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    String buildNormalChildSyncFileName();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户标签的子父关联csv文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildUserChildSyncFileName</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>maven的其他项目工程，只要实现了上面的接口，就可以根据自己的设定去设置如何读取配置，下面给出案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getString(<span class="string">"neo4j.address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getString(<span class="string">"neo4j.username"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getString(<span class="string">"neo4j.password"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Config <span class="title">buildConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Config.defaultConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enableCustomConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getBoolean(<span class="string">"neo4j.enablecustomconfig"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildCvsPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getString(<span class="string">"neo4j.datasyncprefix"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildNormalTagSyncFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getString(<span class="string">"neo4j.normaltagsyncfilename"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildBusinessTagSyncFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getString(<span class="string">"neo4j.businesstagsyncfilename"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildUserTagSyncFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getString(<span class="string">"neo4j.usertagsyncfilename"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildNormalTagBizSyncFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getString(<span class="string">"neo4j.normalbizsyncfilename"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildNormalTagUserSyncFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getString(<span class="string">"neo4j.normalusersyncfilename"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildBizTagUserSyncFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getString(<span class="string">"neo4j.bizusersyncfilename"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildBizChildSyncFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getString(<span class="string">"neo4j.bizrelsyncfilename"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildUserChildSyncFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Setter.getString(<span class="string">"neo4j.userrelsyncfilename"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="结合到neo4j-连接"><a href="#结合到neo4j-连接" class="headerlink" title="结合到neo4j 连接"></a>结合到neo4j 连接</h4><ol><li>根据上面两个步骤， ssm项目启动之后，会自动装载BEAN, 装载之后，只要在具体的程序里面，拿取配置即可（具体的配置获取实现可以由自己实现）</li><li>根据上面的方法使用java拿到xml配置之后，就实现了下面的方式实现neo4j 的数据连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接图数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createDriver</span><span class="params">(Neo4jConfigBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(driver == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            driver =  GraphDatabase.driver(builder.buildUrl(), AuthTokens.basic(builder.buildUsername(), builder.buildPassword()));</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            driver = <span class="keyword">null</span>;</span><br><span class="line">            LOGGER.debug(<span class="string">"无法建立图数据库连接，请检查图Neo4j 服务是否启动"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"无法建立图数据库连接，请检查图Neo4j 服务是否启动"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体开发"><a href="#具体开发" class="headerlink" title="具体开发"></a>具体开发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 执行添加cql</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cql 查询语句</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> StatementResult <span class="title">run</span><span class="params">(Neo4jConfigBuilder builder,String cql)</span> </span>&#123;</span><br><span class="line">       createDriver(builder);</span><br><span class="line">       Session session = driver.session();</span><br><span class="line">       StatementResult run = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           run = session.run(cql);</span><br><span class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(session!=<span class="keyword">null</span>)&#123;</span><br><span class="line">               session.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> run;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> StatementResult <span class="title">run</span><span class="params">(Neo4jConfigBuilder builder,String cql, Object... objects)</span> </span>&#123;</span><br><span class="line">       createDriver(builder);</span><br><span class="line">       Session session = driver.session();</span><br><span class="line">       StatementResult run = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           run = session.run(cql, Values.parameters(objects));</span><br><span class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(session!=<span class="keyword">null</span>)&#123;</span><br><span class="line">               session.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> run;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="曾经开发的时候查找的一些博客记录"><a href="#曾经开发的时候查找的一些博客记录" class="headerlink" title="曾经开发的时候查找的一些博客记录:"></a>曾经开发的时候查找的一些博客记录:</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzE5NzcwOC9hcnRpY2xlL2RldGFpbHMvNzk0NTM3MDM=" title="https://blog.csdn.net/weixin_37197708/article/details/79453703">NEO4J的安装配置及使用总结<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI2OTE3MzgzL2FydGljbGUvZGV0YWlscy84MjQyNDUwOA==" title="https://blog.csdn.net/sinat_26917383/article/details/82424508">neo4j︱neo4j批量导入neo4j-import （五）<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BhbjE1MTI1Mjg0L2FydGljbGUvZGV0YWlscy85NjE0NDY1OA==" title="https://blog.csdn.net/pan15125284/article/details/96144658">neo4j - 查询效率的几种优化思路<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zMmNlOTUzNjA0ZDU=" title="https://www.jianshu.com/p/32ce953604d5">Neo4j如何对大量数据(千万节点及以上)进行初始化<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h3ejIzMTEyNDUvYXJ0aWNsZS9kZXRhaWxzLzYwOTYzMzgz" title="https://blog.csdn.net/hwz2311245/article/details/60963383">关于Neo4j和Cypher批量更新和批量插入优化的5个建议<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQ1NDAxMTIw" title="https://www.zhihu.com/question/45401120">Neo4j的查询速度为何这么慢？这能商用吗？<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vanBmc3MvcC8xMTU3ODkwMy5odG1s" title="https://www.cnblogs.com/jpfss/p/11578903.html">Neo4j清空所有数据<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXNrLzEyOTc5Mg==" title="https://cloud.tencent.com/developer/ask/129792">Neo4j安装APOC和图算法Neo.ClientError.Procedure.ProcedureRegistrationFailed？<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vYmxvZy9pbnRyby11c2VyLWRlZmluZWQtcHJvY2VkdXJlcy1hcG9jLw==" title="https://neo4j.com/blog/intro-user-defined-procedures-apoc/">官方网站对于Apoc插件的介绍<i class="fa fa-external-link"></i></span></p><p>neo4j cypher 语言的语法（非常非常重要）：</p><p><strong><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NTAzODkwL2FydGljbGUvZGV0YWlscy8xMDE0Nzk2ODA=" title="https://blog.csdn.net/qq_37503890/article/details/101479680">neo4j–Cypher语法练习(START、CREATE、MERGE)<i class="fa fa-external-link"></i></span></strong></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lMGZmZWFhNTkxNTk=" title="https://www.jianshu.com/p/e0ffeaa59159">Neo4j中使用Cypher进行大批量节点删除的优化<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudGhpbmJ1Zy5jb20v" title="https://www.thinbug.com/">thinbug<i class="fa fa-external-link"></i></span>  我的很多前端疑难杂症就是靠这网站解决的</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      使用apoc继承neo4j，同事根据此来进行下一步的处理操作
    
    </summary>
    
    
      <category term="图数据库" scheme="https://lazytime.site/categories/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="neo4j" scheme="https://lazytime.site/tags/neo4j/"/>
    
  </entry>
  
  <entry>
    <title>我的Neo4j探索之旅 - 初识Neo4j（一）</title>
    <link href="https://lazytime.site/2020/11/03/neo4j1/"/>
    <id>https://lazytime.site/2020/11/03/neo4j1/</id>
    <published>2020-11-02T16:03:27.000Z</published>
    <updated>2020-11-02T16:06:33.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的Neo4j探索之旅-初识Neo4j（一）"><a href="#我的Neo4j探索之旅-初识Neo4j（一）" class="headerlink" title="我的Neo4j探索之旅 - 初识Neo4j（一）"></a>我的Neo4j探索之旅 - 初识Neo4j（一）</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[TOC]</p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>neo4j 这个东西在国内用的很少，目前能百度的资料也是很早之前的几篇了，我针对neo4j 3.5 的版本进行一次学习和记录，以及实际的工作需求我也遇到了，后续会开源一个剔除业务的开源项目，有兴趣的读者可以了解一下图数据库的中间件，还是蛮有意思的。</p><a id="more"></a><h2 id="它是什么？"><a href="#它是什么？" class="headerlink" title="它是什么？"></a>它是什么？</h2><ul><li>百度百科定义： <span class="exturl" data-url="aHR0cDovL3d3dy55b3VtZWVrLmNvbS9teS1sZWFybmluZy13YXkvP3Rkc291cmNldGFnPXNfcGNxcV9haW9tc2c=" title="http://www.youmeek.com/my-learning-way/?tdsourcetag=s_pcqq_aiomsg">http://www.youmeek.com/my-learning-way/?tdsourcetag=s_pcqq_aiomsg<i class="fa fa-external-link"></i></span> </li><li>官方网站： <span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20v" title="https://neo4j.com/">https://neo4j.com/<i class="fa fa-external-link"></i></span> </li><li>官方文档地址： <span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy8=" title="https://neo4j.com/docs/">https://neo4j.com/docs/<i class="fa fa-external-link"></i></span> <ul><li>Java Driver API Docs</li><li>Neo4j Javadocs</li><li>Cypher Manual</li><li>Spring data neo4j 这个是spring 管理neo4j的框架</li></ul></li><li>维基百科介绍: <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTmVvNGo=" title="https://en.wikipedia.org/wiki/Neo4j">https://en.wikipedia.org/wiki/Neo4j<i class="fa fa-external-link"></i></span> </li></ul><h2 id="它的历史"><a href="#它的历史" class="headerlink" title="它的历史"></a>它的历史</h2><ul><li><p>1.0版于2010年2月发布。</p></li><li><p>Neo4j 2.0版于2013年12月发布。</p></li><li><p>Neo4j 3.0版于2016年4月发布。</p></li><li><p>2016年11月，Neo4j成功获得了由Greenbridge Partners Ltd.牵头的3600万美元D轮融资<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTmVvNGojY2l0ZV9ub3RlLTE1" title="https://en.wikipedia.org/wiki/Neo4j#cite_note-15">[15]<i class="fa fa-external-link"></i></span></p></li><li><p>2018年11月，Neo4j成功获得了由One Peak Partners和Morgan Stanley Expansion Capital牵头的8000万美元E轮融资，其他投资者包括Creandum，Eight Roads和Greenbridge Partners参与了此次融资</p></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjQwNDg3Mg==" title="https://zhuanlan.zhihu.com/p/36404872">https://zhuanlan.zhihu.com/p/36404872<i class="fa fa-external-link"></i></span>  知乎介绍neo4j</li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjU1OTk5MDUxODgyNTE5NmIwMWRmYzI=" title="https://juejin.im/post/5b559990518825196b01dfc2">https://juejin.im/post/5b559990518825196b01dfc2<i class="fa fa-external-link"></i></span>  掘金文章</li></ul><h2 id="同类产品比较"><a href="#同类产品比较" class="headerlink" title="同类产品比较"></a>同类产品比较</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGFsZHMvYXJ0aWNsZS9kZXRhaWxzLzg3OTE3OTAw" title="https://blog.csdn.net/belalds/article/details/87917900">https://blog.csdn.net/belalds/article/details/87917900<i class="fa fa-external-link"></i></span>  主流图数据库Neo4J、ArangoDB、OrientDB综合对比：架构分析</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGpqeXkuY29tL2FyY2hpdmVzLzIwMTkvMDkvMTAwNTg0Lmh0bWw=" title="https://www.ljjyy.com/archives/2019/09/100584.html">https://www.ljjyy.com/archives/2019/09/100584.html<i class="fa fa-external-link"></i></span>  在实际的项目选型中使用</li></ul><h2 id="为什么学习它"><a href="#为什么学习它" class="headerlink" title="为什么学习它"></a>为什么学习它</h2><ul><li>公司业务需求，需要使用可视化拓扑图展示数据</li><li>标签库使用mysql展示图形结构比较困难，转而使用图数据库解决</li></ul><h2 id="为什么要使用neo4j"><a href="#为什么要使用neo4j" class="headerlink" title="为什么要使用neo4j"></a>为什么要使用neo4j</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcnViaW5vcnRoL3AvNTg0NjE0MC5odG1s" title="https://www.cnblogs.com/rubinorth/p/5846140.html">https://www.cnblogs.com/rubinorth/p/5846140.html<i class="fa fa-external-link"></i></span> 参考</li><li><span class="exturl" data-url="aHR0cHM6Ly96aGlkYW8uYmFpZHUuY29tL3F1ZXN0aW9uLzEwNTIwOTAyNTE0Mjg1MDUzNzkuaHRtbA==" title="https://zhidao.baidu.com/question/1052090251428505379.html">https://zhidao.baidu.com/question/1052090251428505379.html<i class="fa fa-external-link"></i></span> 百度知道</li></ul><h2 id="哪些人不喜欢它"><a href="#哪些人不喜欢它" class="headerlink" title="哪些人不喜欢它"></a>哪些人不喜欢它</h2><ul><li>neo4j 属于老牌图数据库</li><li>neo4j 不支持分片，对分布式的系统支持不是很好，推荐单机部署</li></ul><h2 id="我要怎么做（按优先级从高到低排序）"><a href="#我要怎么做（按优先级从高到低排序）" class="headerlink" title="我要怎么做（按优先级从高到低排序）"></a>我要怎么做（按优先级从高到低排序）</h2><ul><li><p>看文档：</p><ul><li><p>安装Neo4j desktop </p><ul><li>启动，进入localhost: 7474</li><li>参考desktop 的快速入门操作案例</li><li>进入官网，选择DEVELOP-Document，阅读如下内容：<ul><li>Getting Started 简单的了解Neo4j,地址如下：<ul><li><span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9nZXR0aW5nLXN0YXJ0ZWQvY3VycmVudC8=" title="https://neo4j.com/docs/getting-started/current/">https://neo4j.com/docs/getting-started/current/<i class="fa fa-external-link"></i></span></li></ul></li><li>Cypher manaral 比较重要： CQL语言十分强大，好用</li><li>Neo4j 1.7 Driver Manual neo4j 驱动以及api使用</li></ul></li><li>Java Driver API Docs java API</li></ul></li></ul></li><li><p>自己写 Demo</p><ul><li>后续会将个人实验内容上传到github</li></ul></li><li><p>参考别人 Demo</p><ul><li>参考地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0lzRml2ZS9uZW80ai12aXMuanMuZ2l0" title="https://github.com/IsFive/neo4j-vis.js.git">https://github.com/IsFive/neo4j-vis.js.git<i class="fa fa-external-link"></i></span> git 地址</li><li>后面根据该项目进行二次开发，目前已上线正式环境。</li></ul></li><li><p>项目场景模拟</p><ul><li>让业务去推动技术</li><li>明确需求</li></ul></li><li><p>遇到问题</p><ul><li>科学上网到国外使用谷歌进行搜索，目前国内使用较少</li><li>查看csdn 博客，有部分问题的解决办法</li><li>关于关系型数据库 与 neo4j数据库的数据同步问题 </li><li>Neo4j 与 vis 的使用问题</li></ul></li></ul><h1 id="如何安装neo4j社区版本（免费）（windows-10）"><a href="#如何安装neo4j社区版本（免费）（windows-10）" class="headerlink" title="如何安装neo4j社区版本（免费）（windows - 10）"></a>如何安装neo4j社区版本（免费）（windows - 10）</h1><h2 id="1-进入官网，下载软件"><a href="#1-进入官网，下载软件" class="headerlink" title="1. 进入官网，下载软件"></a>1. 进入官网，下载软件</h2><p><span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZ3JhcGgtYWxnb3JpdGhtcy1ib29rLz9yZWY9aG9tZS1iYW5uZXI=" title="https://neo4j.com/graph-algorithms-book/?ref=home-banner">https://neo4j.com/graph-algorithms-book/?ref=home-banner<i class="fa fa-external-link"></i></span></p><p>点击右上角：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200827111934.png" alt=""></p><p>点击下载：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200827142816.png" alt=""></p><p>进入到如下页面</p><p>输入对应信息，选择下载</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200827143345.png" alt=""></p><blockquote><p> PS： 外网软件的下载真的慢的想死，这里提供一个诀窍</p><p> <img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200827143459.png" alt=""></p><ol><li><p>进入到如下页面，右击蓝色连接</p></li><li><p>复制连接地址</p></li><li><p>在迅雷里面，新建任务，然后粘贴地址进去</p></li><li><p>迅雷会找到资源然后提示你下载</p></li><li><p>下载，不出意外飞速下好软件包</p><p>（本迅雷为破解版，个人自己使用，不对外开放）</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200827143602.png" alt=""></p></li></ol></blockquote><blockquote><p>线上的版本使用 版本为<strong>3.5.12</strong> ，官方最新版已经有了4.0的版本了</p><p>这里我也提供了安装包，自己下的话需要翻墙加迅雷下才有可能拉下来</p><p>Windows:</p><p>链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXlXa0lkVVV0LVJ6dlN1a2U4OW5KQ3c=" title="https://pan.baidu.com/s/1yWkIdUUt-RzvSuke89nJCw">https://pan.baidu.com/s/1yWkIdUUt-RzvSuke89nJCw<i class="fa fa-external-link"></i></span><br>提取码：3c21</p><p>Linux:</p><p>链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWxqelM1RElZbzVuOWZDSXpLa0FNaXc=" title="https://pan.baidu.com/s/1ljzS5DIYo5n9fCIzKkAMiw">https://pan.baidu.com/s/1ljzS5DIYo5n9fCIzKkAMiw<i class="fa fa-external-link"></i></span><br>提取码：bnrf </p></blockquote><h2 id="2-安装JDK"><a href="#2-安装JDK" class="headerlink" title="2.  安装JDK"></a>2.  安装JDK</h2><p>这个请自行百度，教程烂大街，不过注意安装 <strong>JDK1.8</strong> 版本以上，否则是无法使用的</p><h2 id="3-配置Neo4j环境变量"><a href="#3-配置Neo4j环境变量" class="headerlink" title="3. 配置Neo4j环境变量"></a>3. 配置Neo4j环境变量</h2><p>将下好的包解压到对应的位置之后，我们可以配置环境变量</p><p>环境变量如下</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200827144938.png" alt=""></p><blockquote><p>NEO4J_HOME</p><p>D:\zxd\tool\neo4j-community-3.5.12-windows\neo4j-community-3.5.12</p></blockquote><h2 id="4-neo4j-启动"><a href="#4-neo4j-启动" class="headerlink" title="4. neo4j 启动"></a>4. neo4j 启动</h2><ol><li><p><strong>管理员模式</strong>打开CMD， <code>cd</code> 到 <code>D:\zxd\tool\neo4j-community-3.5.12-windows\neo4j-community-3.5.12\bin</code> 下面（记得切换盘符）</p></li><li><p>请查看下面的常用命令，根据自己的实际情况选择</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务</span><br><span class="line">neo4j(.bat) start</span><br><span class="line"># 重启服务</span><br><span class="line">neo4j(.bat) restart</span><br><span class="line"># 停止服务</span><br><span class="line">neo4j(.bat) stop</span><br><span class="line"># 控制台模式启动</span><br><span class="line">neo4j(.bat) console</span><br></pre></td></tr></table></figure><ol start="3"><li><p>开启neo4j，看到 类似<code>successful</code>的字样就代表运行成功了</p></li><li><p>进入到 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo3NDc0L2Jyb3dzZXIv" title="http://localhost:7474/browser/">http://localhost:7474/browser/<i class="fa fa-external-link"></i></span></p></li><li><p>进入主页面，neo4j安装成功</p></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200827150440.png" alt=""></p><h2 id="5-安装有可能的问题"><a href="#5-安装有可能的问题" class="headerlink" title="5. 安装有可能的问题"></a>5. 安装有可能的问题</h2><p>此部分是针对（4） 有可能失败的情况下进行尝试：</p><h3 id="常见问题1"><a href="#常见问题1" class="headerlink" title="常见问题1"></a>常见问题1</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200827145703.png" alt=""></p><p>输入如下的命令，安装neo4j 的服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装neo4j 服务</span></span><br><span class="line">neo4j install-service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载neo4j 服务</span></span><br><span class="line">neo4j uninstall-service</span><br></pre></td></tr></table></figure><h3 id="常见问题2："><a href="#常见问题2：" class="headerlink" title="常见问题2："></a>常见问题2：</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200827145921.png" alt=""></p><p>这种情况可能是你安装服务的时候，neo4j默认已经给你启动了，尝试访问 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo3NDc0" title="http://localhost:7474">http://localhost:7474<i class="fa fa-external-link"></i></span> 看下能不能访问，如果可以访问，证明没有出现问题</p><blockquote><p>如果依然没有解决，请尝试 <code>neo4j.bat stop</code> 先关闭服务，或者重新安装一遍neo4j的服务</p></blockquote><h3 id="常见问题3："><a href="#常见问题3：" class="headerlink" title="常见问题3："></a>常见问题3：</h3><p>下面这个问题是一个比较奇怪的问题，我之前在上线部署的时候遇到过一次</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201102104408.png" alt=""></p><p>解决办法：<img src="file:///C:/Users/123/AppData/Local/Temp/msohtmlclip1/01/clip_image001.png" alt="img"><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RvZ2V0aGVyX2N6L2FydGljbGUvZGV0YWlscy85NzkxODc4OQ==" title="https://blog.csdn.net/together_cz/article/details/97918789">https://blog.csdn.net/together_cz/article/details/97918789<i class="fa fa-external-link"></i></span></p><p> 修改bin下面，有一个文件：neo4j.ps1</p><p>需要把前缀的 $PSSCRIPT 改为你的安装路径，然后执行neo4j 的命令就不会报错了</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201102105121.png" alt=""></p><h2 id="6-neo4j-实现外网访问："><a href="#6-neo4j-实现外网访问：" class="headerlink" title="6. neo4j 实现外网访问："></a>6. neo4j 实现外网访问：</h2><p>在<code>conf</code> 里面的 <code>neo4j.conf</code> 中修改:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#dbms.connectors.default_listen_address&#x3D;0.0.0.0</span><br></pre></td></tr></table></figure><h2 id="7-Neo4j-部分配置参数详解："><a href="#7-Neo4j-部分配置参数详解：" class="headerlink" title="7. Neo4j 部分配置参数详解："></a>7. Neo4j 部分配置参数详解：</h2><p>在<code>conf/neo4j.config</code>中有对应的内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">其他配置项目从网上摘抄部分</span></span><br><span class="line"><span class="string">修改相应配置如下：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改第22行load csv时l路径，在前面加个#，可从任意路径读取文件</span></span><br><span class="line"><span class="comment">#dbms.directories.import=import</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改35行和36行，设置JVM初始堆内存和JVM最大堆内存</span></span><br><span class="line"><span class="comment"># 生产环境给的JVM最大堆内存越大越好，但是要小于机器的物理内存</span></span><br><span class="line"><span class="string">dbms.memory.heap.initial_size=5g</span></span><br><span class="line"><span class="string">dbms.memory.heap.max_size=10g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改46行，可以认为这个是缓存，如果机器配置高，这个越大越好</span></span><br><span class="line"><span class="string">dbms.memory.pagecache.size=10g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改54行，去掉改行的#，可以远程通过ip访问neo4j数据库</span></span><br><span class="line"><span class="string">dbms.connectors.default_listen_address=0.0.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认 bolt端口是7687，http端口是7474，https关口是7473，不修改下面3项也可以</span></span><br><span class="line"><span class="comment"># 修改71行，去掉#，设置http端口为7687，端口可以自定义，只要不和其他端口冲突就行</span></span><br><span class="line"><span class="comment">#dbms.connector.bolt.listen_address=:7687</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改75行，去掉#，设置http端口为7474，端口可以自定义，只要不和其他端口冲突就行</span></span><br><span class="line"><span class="string">dbms.connector.http.listen_address=:7474</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改79行，去掉#，设置http端口为7473，端口可以自定义，只要不和其他端口冲突就行</span></span><br><span class="line"><span class="string">dbms.connector.https.listen_address=:7473</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改227行，去掉#，允许从远程url来load csv</span></span><br><span class="line"><span class="string">dbms.security.allow_csv_import_from_file_urls=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改246行，允许使用neo4j-shell，类似于mysql 命令行之类的</span></span><br><span class="line"><span class="string">dbms.shell.enabled=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改235行，去掉#，设置连接neo4j-shell的端口，一般都是localhost或者127.0.0.1，这样安全，其他地址的话，一般使用https就行</span></span><br><span class="line"><span class="string">dbms.shell.host=127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改250行，去掉#，设置neo4j-shell端口，端口可以自定义，只要不和其他端口冲突就行</span></span><br><span class="line"><span class="string">dbms.shell.port=1337</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改254行，设置neo4j可读可写</span></span><br><span class="line"><span class="string">dbms.read_only=false</span></span><br></pre></td></tr></table></figure><h2 id="8-修改neo4j可视化界面的超管用户密码"><a href="#8-修改neo4j可视化界面的超管用户密码" class="headerlink" title="8. 修改neo4j可视化界面的超管用户密码]"></a>8. 修改neo4j可视化界面的超管用户密码]</h2><p>在控制台输入<code>:server change-password</code> 进行修改</p><p>键入原密码及新密码，即可修改</p><p>注意冒号</p><h2 id="9-window版本的其他安装方式"><a href="#9-window版本的其他安装方式" class="headerlink" title="9 . window版本的其他安装方式:"></a>9 . window版本的其他安装方式:</h2><p>neo4j 在window平台有一个desktop 版本，实现了多实例创建图数据库的应用，有需要可以直接安装，个人直接下载window的Bin包进行单机的部署。</p><h1 id="如何安装neo4j社区版本（免费）（linux-CenterOs7）"><a href="#如何安装neo4j社区版本（免费）（linux-CenterOs7）" class="headerlink" title="如何安装neo4j社区版本（免费）（linux - CenterOs7）"></a>如何安装neo4j社区版本（免费）（linux - CenterOs7）</h1><p>重复的内容请查看<code>window</code>安装方式，linux 的安装相对更加简单一些。</p><p>（1）准备<code>**neo4j-community-3.5.12-unix.tar.gz.gz**</code> ，使用目前最新的版本</p><blockquote><p>Linux:</p><p>链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWxqelM1RElZbzVuOWZDSXpLa0FNaXc=" title="https://pan.baidu.com/s/1ljzS5DIYo5n9fCIzKkAMiw">https://pan.baidu.com/s/1ljzS5DIYo5n9fCIzKkAMiw<i class="fa fa-external-link"></i></span><br>提取码：bnrf </p></blockquote><p>（2）解压放入到linux相应位置</p><p>（3）确保当前环境变量存在JDK，版本不能低于<code>JDK1.8</code></p><p>（4）同样由于安全配置的原因，需要进入客户端配置一次用户名和密码，因为linux没有GUI，在<code>neo4j.conf</code>需要开启远程访问：</p><blockquote><p>#dbms.connectors.default_listen_address=0.0.0.0</p><p>把#拿掉就可以进行远程访问了</p></blockquote><p>（5）请参考window对于用户名和密码进行自定义</p><p>（6）如果忘记了GUI页面的用户名和密码，可以使用删除db的方式对于图数据库进行重置</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol><li>介绍了Neo4J的基本理念，已经我为什么要使用到neo4j 这个库</li><li>Neo4j在linux上和windows上的安装，注意如果要用到项目上，请注意使用开源的社区版，企业版提供更多的功能以及更好性能，同时官方提供技术支持，商用版本需要授权</li><li>下一篇文章将对neo4j 进行扩展</li></ol><p>内容篇幅较长，感谢观看！希望能对读者有所帮助，如果对于博客有任何建议或者意见，欢迎讨论，如果文章内容有误，可以直接私信或者在评论区留言，我会及时答复并且修复</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      学习neo4j的使用和基本语法
    
    </summary>
    
    
      <category term="图数据库" scheme="https://lazytime.site/categories/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="neo4j" scheme="https://lazytime.site/tags/neo4j/"/>
    
  </entry>
  
  <entry>
    <title>一次项目短信验证码整改实验</title>
    <link href="https://lazytime.site/2020/10/29/mail/"/>
    <id>https://lazytime.site/2020/10/29/mail/</id>
    <published>2020-10-29T13:20:42.000Z</published>
    <updated>2020-10-29T14:41:25.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一次短信验证码整改实验"><a href="#一次短信验证码整改实验" class="headerlink" title="一次短信验证码整改实验"></a>一次短信验证码整改实验</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>讨论内容部分为当初的一些短信验证码的需求细节讨论</p><p>这个短信验证码在并发量非常大的情况下有可能会失效，后续会进行整改升级，保证线程安全</p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>短信验证码（要想着怎么把所有的项目都整改起来，不影响原有业务运行） 3天时间，全部替换掉</p><ul><li><p>发送短信</p><ul><li>增加【业务类型】</li><li>获取短信的时候，增加图片验证码（此处用第三方框架实现）</li><li>单独增加短信验证码的 ip访问控制 CheckSendSmsIpVisitHelper ，注意别和 CheckIpVisitHelper 冲突</li><li>校验手机号码长度 11 位 </li><li>60s 根据【手机号码+业务】判断只能发送一次短信，此处将 【手机号码+业务】作为 map 的 key 存储在上下文中</li><li>可以灵活配置【手机号码+业务】 每天能够获取短信的次数</li></ul></li><li><p>校验短信</p><ul><li>增加【手机号+短信验证码】的匹配</li><li>校验成功，清理掉session中存储的信息</li></ul></li></ul><h1 id="讨论内容"><a href="#讨论内容" class="headerlink" title="讨论内容"></a>讨论内容</h1><ul><li>验证码就用第三方的。<code>google kaptcha</code> 这个可以试试</li><li>这样 jydd apps 都可以用，2-3天可以完全替换掉所有业务的短信。</li><li>页面的修改，直接找建哥提供样式。</li><li>把所有业务都一并改了，省的隔三差五的出报告要整改</li><li>我要一个完全独立的短信验证码模块，虽然不能在按照项目模块来划分，那就完全独立出来包和功能以及依赖</li><li>其实可以直接在apps 的 core里面开发，然后那边直接引用调用？jar包的方式放进去就是的。</li></ul><h2 id="处理方案："><a href="#处理方案：" class="headerlink" title="处理方案："></a>处理方案：</h2><h2 id="第三方图形验证码参考"><a href="#第三方图形验证码参考" class="headerlink" title="第三方图形验证码参考"></a>第三方图形验证码参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWFuZ3poaWxvbmcvcC84NTc0Njg1Lmh0bWw=" title="https://www.cnblogs.com/yangzhilong/p/8574685.html">SpringBoot之配置google kaptcha<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vRmx5SGVMYW5NYW4vcC82MjkzOTkxLmh0bWw=" title="https://www.cnblogs.com/FlyHeLanMan/p/6293991.html">SpringMvc项目中使用GoogleKaptcha 生成验证码<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmFtb3N0ZWFyLmNvbS9kb2MvaGFwcHktY2FwdGNoYQ==" title="https://www.ramostear.com/doc/happy-captcha">happy-captcha<i class="fa fa-external-link"></i></span></p><h3 id="图形验证码："><a href="#图形验证码：" class="headerlink" title="图形验证码："></a>图形验证码：</h3><ol><li>调整页面，增加图形验证码的模块（不同模块需要的改动点不一样）</li></ol><blockquote><p>也可以先把功能做出来，再让前端根据实际情况去调整样式</p></blockquote><ol><li>尝试增加 happy-captcha 或者 google-captcha （实际查询资料发现没有进行维护）</li><li>先不考虑美观问题，以实现功能为主要，后续需要改样式在找前端处理</li></ol><blockquote><p>20200903 已实现</p></blockquote><h3 id="短信校验"><a href="#短信校验" class="headerlink" title="短信校验"></a>短信校验</h3><ol><li>60s 根据【手机号码+业务】判断只能发送一次短信，此处将 【手机号码+业务】作为 map 的 key 存储在上下文中</li></ol><blockquote><ol><li>将短信的配置独立到一个单独的xml 文件中，方便 spirngboot 项目以及 spinrgmvc 管理</li><li>业务模块按照模板的格式配置，不跟项目走</li><li>xml 配置读取参考 节假日的xml 配置读取以及作用</li><li>整个部分可以参考节假日的处理方式，迁移比较方便</li></ol></blockquote><p>使用xml 配置手机+业务模块</p><ol start="2"><li>校验手机号码长度 11 位 </li></ol><blockquote><ol><li>写到工具类里面，单独增加一个方法，需要的时候在调用的地方加入（方案一）</li><li>直接在调用的地方补充添加（方案二）</li></ol></blockquote><p>直接在短信接口加入即可</p><ol start="3"><li>可以灵活配置【手机号码+业务】 每天能够获取短信的次数</li></ol><blockquote><ol><li>其实就是业务模块单个手机号码的限制次数</li></ol><p>PS: 目前的攻击手段可以用虚拟手机号码 + 肉鸡服务器 实现，手机号+业务的限制作用个人理解来看作用不明显</p></blockquote><ol start="4"><li>大致的工具类设置</li></ol><ul><li>初始化读取xml配置</li><li>加载一些动态配置到属性里面，包括一些校验次数的限制</li><li>单例模式</li><li>尽量少的使用三方工具包，尽量使用原生java实现</li><li>注意jdk 版本的问题，不以jdk1.8 为基准</li><li>CheckSendSmsIpVisitHelper 可以是对 CheckIpVisitHelper  的扩展</li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cucmFtb3N0ZWFyLmNvbS9kb2MvaGFwcHktY2FwdGNoYQ==" title="https://www.ramostear.com/doc/happy-captcha">happy-captcha<i class="fa fa-external-link"></i></span> 以此作为参考实现 ，google 的图形化验证码比较老了</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>目前先尝试 使用一下是否可行， 如果可行在进行处理</li><li>先不考虑样式问题，先以实现功能保证可用并可以迁移为主</li><li>多测试，保证功能稳定，在考虑迁移到apps </li></ol><h3 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h3><ol><li>输入手机号码</li><li>在点击发送短信按钮之前，弹出输入图形验证码</li><li>输入正确的图形验证码，发送短信，图形验证取消，回到输入手机验证码界面</li><li>如果输入推行验证码不对，一直重复步骤2</li></ol><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><h3 id="1-绕过图形验证码的接口，直接访问短信接口进行攻击，如何避免"><a href="#1-绕过图形验证码的接口，直接访问短信接口进行攻击，如何避免" class="headerlink" title="1. 绕过图形验证码的接口，直接访问短信接口进行攻击，如何避免?"></a>1. 绕过图形验证码的接口，直接访问短信接口进行攻击，如何避免?</h3><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><ol><li>在 【手机号+业务】中增加一个图形验证码的key, 在校验之前，先校验用户当前提交的手机号和图形验证码是否匹配<ol><li>匹配：清空用户当前的图形验证码，需要重新请求图形验证码接口才能进行下一次请求</li><li>超时：图形验证码有效时间为60秒，超过60秒需要重新请求图形验证码，重新请求短信接口</li><li>不匹配，返回错误信息</li></ol></li><li>设置校验开关，如果需要在短信接口加入图形验证码的校验，则在发送短信之前，需要当前的图形验证码是否吻合（如果没有图形验证码说明没有经过图形验证这一步骤，直接返回失败）<ol><li>图形验证码校验关闭，则不会涉及用户图形验证码和手机号的匹配（考虑临时需要关闭这种校验的情况）</li><li>开启，则会进行上面所说的匹配操作</li></ol></li><li>图形验证码设置为通过校验之后失效，下次请求需要携带新的图形验证码，才能请求通过短信接口</li></ol><h3 id="2-增加【手机号-业务】的配置校验"><a href="#2-增加【手机号-业务】的配置校验" class="headerlink" title="2. 增加【手机号-业务】的配置校验"></a>2. 增加【手机号-业务】的配置校验</h3><p>解决方案：</p><ol><li>短信模块需要在js请求增加模块参数，如果没有模块参数，视为非法请求</li><li>请求带入 手机号-业务-key ，存储当前手机号对应业务的请求次数</li><li>增加判断<ol><li>如果请求次数在<strong>当天</strong>内超过xml配置次数，将不再允许改手机号对应该接口进行请求，不再发送短信</li><li>但是如果超过了一天之后再次请求，需要将请求次数 <strong>重置为1</strong>，也可以重新发送短信接口请求</li></ol></li><li>在需要的地方调用工具包即可</li></ol><h1 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h1><h2 id="成果："><a href="#成果：" class="headerlink" title="成果："></a>成果：</h2><h3 id="控制器调用："><a href="#控制器调用：" class="headerlink" title="控制器调用："></a>控制器调用：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 开启之后，才做进一步校验</span></span><br><span class="line"><span class="keyword">if</span>(PHONE_MODULE_CHECK_ENABLE)&#123;</span><br><span class="line">    <span class="comment">// 添加 【手机+业务模块】校验 以及 【60秒重复调用校验】</span></span><br><span class="line">    <span class="keyword">boolean</span> checkRequest = CheckSendMailHelper.checkContextMap(result, request, phone);</span><br><span class="line">    <span class="comment">// 校验不通过的处理办法，可以自定</span></span><br><span class="line">    <span class="keyword">if</span> (!checkRequest) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//限制用户ip访问短信机获取验证码次数，默认10次</span></span><br><span class="line"><span class="keyword">if</span> (IP_CHECK_ENABLE &amp;&amp; !CheckIpVisitHelper.check(request)) &#123;</span><br><span class="line">    <span class="comment">// 校验不通过的处理办法，可以自定</span></span><br><span class="line">    result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_6.getCode());</span><br><span class="line">    result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_6.getName());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PHONE_MODULE_CHECK_ENABLE：短信-业务模块校验开关</p><p>IP_CHECK_ENABLE：限制短信每天的获取次数，也是手机号+业务模块</p></blockquote><h3 id="短信相关的枚举常量："><a href="#短信相关的枚举常量：" class="headerlink" title="短信相关的枚举常量："></a>短信相关的枚举常量：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SmsRequestStatusEnum &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回状态码 表示发送正常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_1(<span class="number">1</span>, <span class="string">"返回状态码 表示发送正常"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 60s内只能获取不能重复获取验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_2(<span class="number">2</span>, <span class="string">"60s内只能获取不能重复获取验证码"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号码长度不正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_3(<span class="number">3</span>, <span class="string">"手机号码长度不正确"</span>),</span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 用户session已失效</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    RESULT_STATUS_4(4, "用户session已失效"),</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缺少必要的参数：手机号！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_4(<span class="number">4</span>, <span class="string">"缺少必要的参数：手机号！"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号码长度不正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_5(<span class="number">5</span>, <span class="string">"手机号码长度不正确"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同一个ip请求短信机次数过于频繁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_6(<span class="number">6</span>, <span class="string">"同一个ip请求短信机次数过于频繁！"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 60秒内不允许重复请求短信接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_7(<span class="number">7</span>, <span class="string">"60秒内不允许重复请求短信接口！"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缺少必要的请求参数：短信业务模块名称：phoneModule ！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_9(<span class="number">9</span>, <span class="string">"缺少必要的请求参数：短信业务模块名称：phoneModule ！"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前手机号请求超出限制，请等待24小时之后重新请求短信接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_10(<span class="number">10</span>, <span class="string">"当前手机号请求次数超出限制，请等待24小时之后重新请求短信接口"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图形验证码已失效，请重新请求短信接口！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_8(<span class="number">8</span>, <span class="string">"图形验证码已失效，请重新请求短信接口！"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    SmsRequestStatusEnum(<span class="keyword">int</span> code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (SmsRequestStatusEnum item : SmsRequestStatusEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getCode() == code) &#123;</span><br><span class="line">                <span class="keyword">return</span> item.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IP检测工具类："><a href="#IP检测工具类：" class="headerlink" title="IP检测工具类："></a>IP检测工具类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测ip访问辅助类，</span></span><br><span class="line"><span class="comment"> * 主要处理某个时间段类，</span></span><br><span class="line"><span class="comment"> * ip访问次数，以及设置封禁时间、</span></span><br><span class="line"><span class="comment"> * 解封等操作，</span></span><br><span class="line"><span class="comment"> * 用于防止频繁调用短信机攻击等</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 重写原理：</span></span><br><span class="line"><span class="comment"> * 1. 使用LRUMap key 存储 IP号码，value 存储 访问次数以及时间（使用map）</span></span><br><span class="line"><span class="comment"> * 2. 使用servletContext 存储 LRUMap，LRUMap 存储 的 key 为 IP号码-业务模块 VALUE 为 map</span></span><br><span class="line"><span class="comment"> * 3. LRUMap 对应的 key IP号码+业务。 value 绑定了访问次数和时间</span></span><br><span class="line"><span class="comment"> * 4. 如果没有配置模块，校验将会永久失败，IP的模块和短信的模块使用同一块配置</span></span><br><span class="line"><span class="comment"> * 5. ServletContext 生命周期和web的生命周期相同</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2020/09/08 重写工具类，</span></span><br><span class="line"><span class="comment"> * 1. 不在暴露 map。</span></span><br><span class="line"><span class="comment"> * 2. 使用servletContext 保存 Ip 的 map。Map&lt;String,Object&gt; 形式</span></span><br><span class="line"><span class="comment"> * 3. 如果超过IP限制时间，自动进行解锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckIpVisitHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志使用 短信的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="string">"phoneCode"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机访问限制初始化的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE_REQUEST_INIT_SIZE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封禁的时间（单位毫秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FORBIDEN_TIME = <span class="number">60</span> * <span class="number">1000</span> * <span class="number">60</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超过访问时间重新计时（单位毫秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MININTEVAL = <span class="number">60</span> * <span class="number">1000</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LRU Map 初始化大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LRU_MAP_INIT_SIZE = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IP 在指定时间内的限制次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IP_MAX_VISIST_TIME = Setter.getInt(<span class="string">"sms.ip-size"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ip检测使用的 Map key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IP_CHECK_MAP = <span class="string">"IP_CHECK_MAP"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VISIT_COUNT_KEY = <span class="string">"visit_count"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后的请求时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VISIT_TIME_KEY = <span class="string">"visit_time"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IP号码-业务模块名称的格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IP_MOUDULE_FORMAT = <span class="string">"%s-%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ip检查工具，将map 放入 ServletContext</span></span><br><span class="line"><span class="comment">     * 1. 检测基于 ServletContext</span></span><br><span class="line"><span class="comment">     * 2. 请附带 phoneModule: 否则校验永远为false</span></span><br><span class="line"><span class="comment">     * map 当中:</span></span><br><span class="line"><span class="comment">     * key: IP号码-业务</span></span><br><span class="line"><span class="comment">     * value:</span></span><br><span class="line"><span class="comment">     * map -&gt; &#123;</span></span><br><span class="line"><span class="comment">     *  key: 请求次数：value: int</span></span><br><span class="line"><span class="comment">     *  key：请求的时间：value：date</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request request请求域</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果校验没有超过限制 返回 true ，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String remoteIp = RequestHelper.getRemoteIp(request);</span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        LRUMap attribute = (LRUMap) servletContext.getAttribute(IP_CHECK_MAP);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(attribute)) &#123;</span><br><span class="line">            attribute = <span class="keyword">new</span> LRUMap(LRU_MAP_INIT_SIZE);</span><br><span class="line">            servletContext.setAttribute(IP_CHECK_MAP, attribute);</span><br><span class="line">        &#125;</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 根据 IP + 业务模块进行绑定</span></span><br><span class="line">        <span class="comment">// 获取请求的模块名称 同时检查是否有配置模块</span></span><br><span class="line">        String phoneMouduleFlag = CheckSendMailHelper.checkExistsAndGetModule(request);</span><br><span class="line">        <span class="keyword">if</span> (phoneMouduleFlag == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// IP号码 -业务名称</span></span><br><span class="line">        String modulePhone = String.format(IP_MOUDULE_FORMAT, remoteIp, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 获取ip对应的的当前请求次数和请求时间</span></span><br><span class="line">        Map&lt;String, Object&gt; ipMap = (Map&lt;String, Object&gt;) attribute.get(modulePhone);</span><br><span class="line">        <span class="comment">// 如果当前ip没有访问过</span></span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isEmpty(ipMap)) &#123;</span><br><span class="line">            ipMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            ipMap.put(VISIT_COUNT_KEY, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">            ipMap.put(VISIT_TIME_KEY, now);</span><br><span class="line">            attribute.putIfAbsent(modulePhone, ipMap);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> visitCount = (<span class="keyword">int</span>) ipMap.get(VISIT_COUNT_KEY);</span><br><span class="line">        Date visitDate = (Date) ipMap.get(VISIT_TIME_KEY);</span><br><span class="line">        <span class="comment">// 如果长时间没有访问，重新计算</span></span><br><span class="line">        <span class="keyword">if</span> (now.getTime() - visitDate.getTime() &gt; MININTEVAL) &#123;</span><br><span class="line">            ipMap.put(VISIT_COUNT_KEY, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">            ipMap.put(VISIT_TIME_KEY, now);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果访问的次数超过了限制的次数</span></span><br><span class="line">        <span class="keyword">if</span> (visitCount &gt; IP_MAX_VISIST_TIME) &#123;</span><br><span class="line">            <span class="comment">// 如果已经到达限制的次数，但是访问时间超过了限制的时间，重新计时，重新计算请求次数</span></span><br><span class="line">            <span class="keyword">if</span> (now.getTime() - visitDate.getTime() &gt; FORBIDEN_TIME) &#123;</span><br><span class="line">                ipMap.put(VISIT_COUNT_KEY, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">                ipMap.put(VISIT_TIME_KEY, now);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"当前IP: &#123;&#125; 请求次数超过限制"</span>, remoteIp);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// IP访问次数 + 1</span></span><br><span class="line">            visitCount++;</span><br><span class="line">            <span class="comment">// 更新访问次数</span></span><br><span class="line">            ipMap.put(VISIT_COUNT_KEY, visitCount);</span><br><span class="line">            <span class="comment">// 更新访问时间</span></span><br><span class="line">            ipMap.put(VISIT_TIME_KEY, now);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>使用的是servlet-context 全局变量作为存储，依赖web的服务器空间大小，当短信号码过量会造成服务器可访问内存不够，可以考虑用redis 等中间件去存储</li><li>LRUMap：使用最少使用内容作为缓存的设计，存储业务需要判断的手机号等</li><li>静态方法意味着会出现并发的问题，整个工具类是线程不安全的。</li></ol></blockquote><h3 id="短信发送校验工具类："><a href="#短信发送校验工具类：" class="headerlink" title="短信发送校验工具类："></a>短信发送校验工具类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送校验工具类</span></span><br><span class="line"><span class="comment"> * map 存储的 key 为手机号码-业务</span></span><br><span class="line"><span class="comment"> * value  为 发送对象等其他信息</span></span><br><span class="line"><span class="comment"> * 包含</span></span><br><span class="line"><span class="comment"> * 1. 图形验证码（不开放不做校验）</span></span><br><span class="line"><span class="comment"> * 2. 图形验证码有效时间</span></span><br><span class="line"><span class="comment"> * 3. 【手机号-业务】 key-name 的配置</span></span><br><span class="line"><span class="comment"> * 4. 【手机号-业务-锁定时间】 key-date</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> lazytimes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/09/02 10:21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckSendMailHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信验证码配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="string">"phoneCode"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 60 秒内不允许重复请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE_REQUEST_TIME = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 60 秒 内 图形验证码有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPTCHA_REQUEST_TIME = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户模块手机号的限制时间 24 小时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE_REQUEST_WAIT_TIME = <span class="number">60</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机访问限制初始化的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE_REQUEST_INIT_SIZE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求上下文的map key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTEXT_MAP = <span class="string">"CONTEXT_MAP"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号-业务模块名称的格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PHONE_MOUDULE_FORMAT = <span class="string">"%s-%s"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号-业务模块-请求key 的格式标注用户当前模块的请求 定时器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PHONE_MOUDULE_TIMER_FORMAT = <span class="string">"%s-%s-timer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信验证码模块的通用格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_MODULE_TEMPLATE = <span class="string">"sms.modules.%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号-业务-图形验证码 模块名称的格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CAPTCHA_MOUDULE_FORMAT = <span class="string">"%s-%s-captcha"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号-业务模块-图形验证码-请求key 的格式标注用户当前模块的请求 图形验证码 每个手机号对应业务一份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CAPTCHA_MOUDULE_TIMER_FORMAT = <span class="string">"%s-%s-captcha-timer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务模块名称参数Key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PHONE_MOUDULE_FLAG = <span class="string">"phoneModule"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图形验证码key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CAPCHACODE = <span class="string">"capchaCode"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 最后发送时间key</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    private static final String LAST_SEND_TIME = "lastSendTime";</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图形验证码开关</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CAPTCHA_ENABLE = Setter.getBoolean(<span class="string">"captcha.enable"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为当前的用户手机号码绑定 图形验证码</span></span><br><span class="line"><span class="comment">     * 图形验证码用于短信接口请求使用，超过一定时间，图形验证码失效</span></span><br><span class="line"><span class="comment">     * 【手机号-业务-图形验证码】：key</span></span><br><span class="line"><span class="comment">     * 【手机号-业务-图形验证码-超时时间】:key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneCode 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code      图形验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request   请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addCapcha</span><span class="params">(String phoneCode, String code, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CAPTCHA_ENABLE) &#123;</span><br><span class="line">            logger.info(<span class="string">"请开启图形验证码校验之后，再配合本工具类方法使用！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; attribute = initServletContextMap(servletContext);</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 获取请求的模块名称 同时检查是否有配置模块</span></span><br><span class="line">        String phoneMouduleFlag = checkExistsAndGetModule(request);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(phoneMouduleFlag)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 手机号 -业务名称</span></span><br><span class="line">        String modulePhone = String.format(PHONE_MOUDULE_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 手机号- 业务名称 - 图形验证码</span></span><br><span class="line">        String capchaModule = String.format(CAPTCHA_MOUDULE_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 手机号 - 业务名称 -图形验证码 - 定时</span></span><br><span class="line">        String capchaModuleTimer = String.format(CAPTCHA_MOUDULE_TIMER_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="keyword">if</span> (!attribute.containsKey(modulePhone)) &#123;</span><br><span class="line">            HashMap&lt;String, Object&gt; stringObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            stringObjectHashMap.put(capchaModule, code);</span><br><span class="line">            <span class="comment">// 图片的有效期</span></span><br><span class="line">            stringObjectHashMap.put(capchaModuleTimer, now);</span><br><span class="line">            attribute.put(modulePhone, stringObjectHashMap);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; stringObjectMap = attribute.get(modulePhone);</span><br><span class="line">            <span class="comment">// 更新验证码以及有效期</span></span><br><span class="line">            stringObjectMap.put(capchaModule, code);</span><br><span class="line">            <span class="comment">// 图片的有效期</span></span><br><span class="line">            stringObjectMap.put(capchaModuleTimer, now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号限制发送处理</span></span><br><span class="line"><span class="comment">     * 1. 增加对于用户请求短信接口的限制，60秒访问一次</span></span><br><span class="line"><span class="comment">     * 2. 增加图形验证码和用户的手机号绑定匹配</span></span><br><span class="line"><span class="comment">     * 1. 图形校验可以灵活开放和关闭</span></span><br><span class="line"><span class="comment">     * 3. 【手机号-业务】的key配置，短信接口当中需要对于用户的请求做限制</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result    封装了返回的状态和信息的 result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request   请求request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneCode 手机号码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkContextMap</span><span class="params">(Map&lt;String, Object&gt; result, HttpServletRequest request, String phoneCode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前模块配置Map集合</span></span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; attribute = initServletContextMap(servletContext);</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 获取请求的模块名称</span></span><br><span class="line">        String phoneMouduleFlag = checkExistsAndGetModule(request);</span><br><span class="line">        <span class="keyword">if</span> (phoneMouduleFlag == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_9.getCode());</span><br><span class="line">            result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_9.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  当前短信业务模块【手机号-业务】</span></span><br><span class="line">        String modulePhone = String.format(PHONE_MOUDULE_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 当前模块【手机号-业务-请求限制时间】</span></span><br><span class="line">        String modulePhoneTimer = String.format(PHONE_MOUDULE_TIMER_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 当前模块每个用户每天最多请求次数</span></span><br><span class="line">        <span class="keyword">int</span> moduleCount = Setter.getInt(String.format(SMS_MODULE_TEMPLATE, phoneMouduleFlag));</span><br><span class="line">        <span class="keyword">if</span> (!attribute.containsKey(modulePhone)) &#123;</span><br><span class="line">            <span class="comment">// 需要自行初始化</span></span><br><span class="line">            HashMap&lt;String, Object&gt; stringObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">// 初始化短信接口调用次数</span></span><br><span class="line">            stringObjectHashMap.put(modulePhone, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">            <span class="comment">// 初始化短信接口调用时间</span></span><br><span class="line">            stringObjectHashMap.put(modulePhoneTimer, now);</span><br><span class="line">            attribute.put(modulePhone, stringObjectHashMap);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; objectMap = attribute.get(modulePhone);</span><br><span class="line">            <span class="comment">// 开启图形验证码校验才做处理</span></span><br><span class="line">            <span class="keyword">if</span> (CAPTCHA_ENABLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!checkCatpchaCode(result, request, phoneCode, now, phoneMouduleFlag, objectMap)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取当前【手机号+业务】的对应 访问次数，以及最后的访问时间</span></span><br><span class="line">            Object count = objectMap.get(modulePhone);</span><br><span class="line">            Object timer = objectMap.get(modulePhoneTimer);</span><br><span class="line">            <span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">if</span> (Objects.isNull(count) || Objects.isNull(timer)) &#123;</span><br><span class="line">                objectMap.put(modulePhone, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">                objectMap.put(modulePhoneTimer, now);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Integer integer = Integer.valueOf(objectMap.get(modulePhone).toString());</span><br><span class="line">            Date time = (Date) timer;</span><br><span class="line">            <span class="comment">// 检查当前短信+业务是否在60秒内访问</span></span><br><span class="line">            <span class="keyword">if</span>(!checkLastGetTime(result, now, time))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果长时间未访问，重置</span></span><br><span class="line">            <span class="keyword">if</span> ((now.getTime() - time.getTime()) &gt; PHONE_REQUEST_WAIT_TIME) &#123;</span><br><span class="line">                <span class="comment">//  刷新时间</span></span><br><span class="line">                objectMap.put(modulePhone, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">                objectMap.put(modulePhoneTimer, now);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//   当前模块超过了请求限制</span></span><br><span class="line">            <span class="keyword">if</span> (integer &gt; moduleCount) &#123;</span><br><span class="line">                <span class="comment">// 超过了请求时间限制，解封</span></span><br><span class="line">                <span class="keyword">if</span> (now.getTime() - time.getTime() &gt; PHONE_REQUEST_WAIT_TIME) &#123;</span><br><span class="line">                    <span class="comment">//  刷新时间</span></span><br><span class="line">                    objectMap.put(modulePhone, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">                    objectMap.put(modulePhoneTimer, now);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_10.getCode());</span><br><span class="line">                result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_10.getName());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模块请求次数 + 1</span></span><br><span class="line">            objectMap.put(modulePhone, integer + PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">            <span class="comment">// 刷新时间</span></span><br><span class="line">            objectMap.put(modulePhoneTimer, now);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验图形验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result           返回处理结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request          请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneCode        手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> now              当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneMouduleFlag 手机号 - 业务模块 标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectMap        servletContext 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkCatpchaCode</span><span class="params">(Map&lt;String, Object&gt; result, HttpServletRequest request, String phoneCode, Date now, String phoneMouduleFlag, Map&lt;String, Object&gt; objectMap)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 手机号- 业务名称 - 图形验证码</span></span><br><span class="line">        String capchaModule = String.format(CAPTCHA_MOUDULE_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 手机号 - 业务名称 -图形验证码 - 定时</span></span><br><span class="line">        String capchaModuleTimer = String.format(CAPTCHA_MOUDULE_TIMER_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 图形验证码超过60秒失效</span></span><br><span class="line">        Date captchaCodeValidPeriod = (Date) objectMap.get(capchaModuleTimer);</span><br><span class="line">        <span class="comment">// 获取请求参数的验证码</span></span><br><span class="line">        String requestCaptchaCode = RequestHelper.getString(CAPCHACODE, request);</span><br><span class="line">        <span class="comment">// 拿到map中的图形验证码</span></span><br><span class="line">        Object requestCode = objectMap.get(capchaModule);</span><br><span class="line">        <span class="comment">// 是否存在图形验证码的参数，同时比对是否和请求参数一致</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(requestCaptchaCode) || Objects.isNull(requestCode)) &#123;</span><br><span class="line">            result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_8.getCode());</span><br><span class="line">            result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_8.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果超时或者图形验证码不匹配，需要重新请求图形验证码</span></span><br><span class="line">        <span class="keyword">if</span> (!Objects.equals(requestCaptchaCode, requestCode.toString()) || (now.getTime() - captchaCodeValidPeriod.getTime() &gt; (CAPTCHA_REQUEST_TIME))) &#123;</span><br><span class="line">            result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_8.getCode());</span><br><span class="line">            result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_8.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 清空用户的图形验证码</span></span><br><span class="line">            objectMap.put(capchaModule, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查最后的访问时间是否在指定时间内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result    返回对象结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> now       当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkLastGetTime</span><span class="params">(Map&lt;String, Object&gt; result, Date now, Date lastSend)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 60 秒内不允许再次发送</span></span><br><span class="line">        <span class="keyword">if</span> ((now.getTime() - lastSend.getTime()) &lt;= PHONE_REQUEST_TIME) &#123;</span><br><span class="line">            result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_7.getCode());</span><br><span class="line">            result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_7.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化全局上下文的Map容器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContext 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 初始化之后的map参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Map&lt;String, Object&gt;&gt; initServletContextMap(ServletContext servletContext) &#123;</span><br><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; attribute = (Map&lt;String, Map&lt;String, Object&gt;&gt;) servletContext.getAttribute(CONTEXT_MAP);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(attribute)) &#123;</span><br><span class="line">            attribute = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            servletContext.setAttribute(CONTEXT_MAP, attribute);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> attribute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查请求参数中是否存在业务模块配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">checkExistsAndGetModule</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String phoneMouduleFlag = RequestHelper.getString(PHONE_MOUDULE_FLAG, request);</span><br><span class="line">        String moduleNo = Setter.getString(String.format(SMS_MODULE_TEMPLATE, phoneMouduleFlag));</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(moduleNo)) &#123;</span><br><span class="line">            logger.info(<span class="string">"未找到对应的短信模块，请在xml配置短信模块名称，并在请求参数中加入 phoneModule: 对应模块名称之后再进行请求"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> phoneMouduleFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>使用手机号-业务模块。先获取是否存在对应的模块，然后进行校验</li><li>图形验证码的方法需要开启推行验证码的情况下，配合使用</li><li>HashMap的线程是不安全的，可以考虑使用ConcurrentHashMap</li></ol></blockquote><h3 id="图形验证码的配置："><a href="#图形验证码的配置：" class="headerlink" title="图形验证码的配置："></a>图形验证码的配置：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- =================================================================== --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 核心：图形验证码的通用配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- =================================================================== --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">captcha</span> <span class="attr">description</span>=<span class="string">"图形验证码的通用配置"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enable</span> <span class="attr">description</span>=<span class="string">"是否开放图形验证码"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">length</span> <span class="attr">description</span>=<span class="string">"设置字符长度"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 验证码图片的宽度 默认 160 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">width</span> <span class="attr">description</span>=<span class="string">"设置动画宽度"</span> <span class="attr">value</span>=<span class="string">"160"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 验证码图片的高度 默认 50 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">height</span> <span class="attr">description</span>=<span class="string">"设置动画宽度"</span> <span class="attr">value</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">captcha</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="短信验证码的配置："><a href="#短信验证码的配置：" class="headerlink" title="短信验证码的配置："></a>短信验证码的配置：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- =================================================================== --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--系统发送短信配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- =================================================================== --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sms</span> <span class="attr">description</span>=<span class="string">"webService短信机服务配置"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">isopen</span> <span class="attr">description</span>=<span class="string">"是否开启短信发送"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模块配置： 需要 name 模块名称，用于短信校验 和 value 表示每天最多的请求次数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">registered</span> <span class="attr">description</span>=<span class="string">"注册模块"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 信箱请求短信验证码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mailbox</span> <span class="attr">description</span>=<span class="string">"信箱模块"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ip-size</span> <span class="attr">description</span>=<span class="string">"ip检测的限制次数"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phoneMoudleCheck-enable</span> <span class="attr">description</span>=<span class="string">"手机号-业务模块校验是否开启"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ip-enable</span> <span class="attr">description</span>=<span class="string">"IP检测开关"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sms</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol><li>工具类基于配置进行开关配置</li><li>按照手机号+业务模块，划分同一手机号在不同的业务模块进行校验拦截</li><li>图形验证码可以配合短信接口使用，但是目前来看耦合还是有点严重</li></ol><h1 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h1><p>本人学艺不精，代码写的比较烂，这篇文章算是给自己留坑以后填。</p><p>如果看文章费劲头，专门另写一篇说说独立使用。</p><p>小小工具类，仅供参考</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      短信验证码的内容加强
    
    </summary>
    
    
      <category term="经验" scheme="https://lazytime.site/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="短信验证码" scheme="https://lazytime.site/tags/%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>雪花算法代码</title>
    <link href="https://lazytime.site/2020/10/27/code/"/>
    <id>https://lazytime.site/2020/10/27/code/</id>
    <published>2020-10-27T15:04:40.000Z</published>
    <updated>2020-10-29T15:05:41.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从github上面摘录的一个雪花算法的实现，可以作为学习参考</p><h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myapp.cunpleuserapp.util;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Twitter_Snowflake&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span></span><br><span class="line"><span class="comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 加起来刚好64位，为一个Long型。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowflakeIdWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Fields===========================================</span></span><br><span class="line">    <span class="comment">/** 开始时间截 (2015-01-01) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> twepoch = <span class="number">1420041600000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 机器id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据标识id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 支持的最大数据标识id，结果是31 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 序列在id中占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 机器ID向左移12位 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据标识id向左移17位(12+5) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 时间截向左移22位(5+5+12) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 工作机器ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据中心ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 毫秒内序列(0~4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 上次生成ID的时间截 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Constructors=====================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerId 工作ID (0~31)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datacenterId 数据中心ID (0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowflakeIdWorker</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"worker Id can't be greater than %d or less than 0"</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"datacenter Id can't be greater than %d or less than 0"</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Methods==========================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SnowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    String.format(<span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//时间戳改变，毫秒内序列重置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上次生成ID的时间截</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="comment">//</span></span><br><span class="line">                | (datacenterId &lt;&lt; datacenterIdShift) <span class="comment">//</span></span><br><span class="line">                | (workerId &lt;&lt; workerIdShift) <span class="comment">//</span></span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Test=============================================</span></span><br><span class="line">    <span class="comment">/** 测试 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SnowflakeIdWorker idWorker = <span class="keyword">new</span> SnowflakeIdWorker(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> id = idWorker.nextId();</span><br><span class="line">            System.out.println(Long.toBinaryString(id));</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      可以作为学习雪花算法的一个入口
    
    </summary>
    
    
      <category term="算法" scheme="https://lazytime.site/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="雪花算法" scheme="https://lazytime.site/tags/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法的一个留坑</title>
    <link href="https://lazytime.site/2020/10/27/study/"/>
    <id>https://lazytime.site/2020/10/27/study/</id>
    <published>2020-10-27T15:01:35.000Z</published>
    <updated>2020-10-29T14:39:04.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数据结构与算法入门"><a href="#1-数据结构与算法入门" class="headerlink" title="1. 数据结构与算法入门"></a>1. 数据结构与算法入门</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早之前做的笔记了，做一个备忘</p><a id="more"></a><h2 id="1-1-经典算法问题："><a href="#1-1-经典算法问题：" class="headerlink" title="1.1 经典算法问题："></a>1.1 经典算法问题：</h2><ol><li>汉诺塔</li><li>八皇后问题</li><li>马踏棋盘</li></ol><h2 id="1-2-字符串匹配"><a href="#1-2-字符串匹配" class="headerlink" title="1.2 字符串匹配"></a>1.2 字符串匹配</h2><h3 id="1-2-1-暴力匹配"><a href="#1-2-1-暴力匹配" class="headerlink" title="1.2.1 暴力匹配"></a>1.2.1 暴力匹配</h3><h3 id="1-2-2-KMP算法"><a href="#1-2-2-KMP算法" class="headerlink" title="1.2.2 KMP算法"></a>1.2.2 KMP算法</h3><h2 id="1-3-数据结构和算法重要性"><a href="#1-3-数据结构和算法重要性" class="headerlink" title="1.3 数据结构和算法重要性"></a>1.3 数据结构和算法重要性</h2><ol><li>算法是程序灵魂</li><li>内存计算框架</li></ol><h2 id="1-4-数据结构与算法关系"><a href="#1-4-数据结构与算法关系" class="headerlink" title="1.4 数据结构与算法关系"></a>1.4 数据结构与算法关系</h2><h1 id="2-实际算法问题："><a href="#2-实际算法问题：" class="headerlink" title="2. 实际算法问题："></a>2. 实际算法问题：</h1><h2 id="2-1-str-replaceAll-str"><a href="#2-1-str-replaceAll-str" class="headerlink" title="2.1 str.replaceAll( str )"></a>2.1 str.replaceAll( str )</h2><h3 id="2-1-1-问题："><a href="#2-1-1-问题：" class="headerlink" title="2.1.1 问题："></a>2.1.1 问题：</h3><p>试写出单链表表示的字符串类以及字符串结点类的定义，并且依次实现它的构造函数，以及计算串的长度，串赋值，判断两串相等，求子串，两串连接，求子串在串中位置等七个成员函数</p><h2 id="2-2-其他几个问题："><a href="#2-2-其他几个问题：" class="headerlink" title="2.2 其他几个问题："></a>2.2 其他几个问题：</h2><ol><li>丢手帕问题</li><li>磁盘问题</li><li>公交车</li><li>画图</li><li>球和篮子</li><li>扔石头</li><li>修路问题，最小路径</li><li>最短路径问题</li><li>汉诺塔</li><li>八皇后</li></ol><h2 id="2-3-线性结构与非线性结构"><a href="#2-3-线性结构与非线性结构" class="headerlink" title="2.3 线性结构与非线性结构"></a>2.3 线性结构与非线性结构</h2><ol><li>数据与元素一对一的线性关系</li><li>顺序存储，元素都是连续的</li><li>链式存储，元素是不连续的</li><li>数组，队列，链表和栈</li></ol><h3 id="2-3-1-非线性结构"><a href="#2-3-1-非线性结构" class="headerlink" title="2.3.1 非线性结构"></a>2.3.1 非线性结构</h3><p>二维数组，多维数组，广义表，树结构，图结构</p><h1 id="3-稀疏数组和队列"><a href="#3-稀疏数组和队列" class="headerlink" title="3. 稀疏数组和队列"></a>3. 稀疏数组和队列</h1><h2 id="3-1-稀疏数组的处理方法："><a href="#3-1-稀疏数组的处理方法：" class="headerlink" title="3.1 稀疏数组的处理方法："></a>3.1 稀疏数组的处理方法：</h2><ol><li>记录数组一共几行几列，有多少个不同的值</li><li>把具有不同值的元素的行列记录在一个小规模数组</li></ol><h3 id="3-1-1-二维数组转稀疏数组的方法"><a href="#3-1-1-二维数组转稀疏数组的方法" class="headerlink" title="3.1.1 二维数组转稀疏数组的方法"></a>3.1.1 二维数组转稀疏数组的方法</h3><ol><li>遍历原始二维数组，保留有效个数</li><li>根据sum创建稀疏数组spareArr int[sum+1][3]</li><li>二维数组的有效数据存入到稀疏数组</li></ol><h2 id="3-2-稀疏数组转二维数组："><a href="#3-2-稀疏数组转二维数组：" class="headerlink" title="3.2 稀疏数组转二维数组："></a>3.2 稀疏数组转二维数组：</h2><ol><li>先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，</li><li>读取稀疏数组的后几行数据，并赋值给原始的二维数组</li></ol><h1 id="4-稀疏数组的Java代码实现"><a href="#4-稀疏数组的Java代码实现" class="headerlink" title="4. 稀疏数组的Java代码实现"></a>4. 稀疏数组的Java代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 稀疏数组</span></span><br><span class="line"><span class="comment"> * 1. 需要将二维数组转为稀疏数组存储</span></span><br><span class="line"><span class="comment"> * 2. 稀疏数组进行保存（文件读写）</span></span><br><span class="line"><span class="comment"> * 3. 读取文件恢复稀疏数组（文件读写）</span></span><br><span class="line"><span class="comment"> * 4. 将稀疏数组转回二维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: SpareceArray</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> structAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 稀疏数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/19 14:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpareceArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用稀疏数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] twoArrayConvertSparecArray = twoArrayConvertSparecArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 稀疏数组如何转为二维住</span></span><br><span class="line">        SparecArrayConverttwoArray(twoArrayConvertSparecArray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 稀疏数组转为二维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SparecArrayConverttwoArray</span><span class="params">(<span class="keyword">int</span>[][] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 根据第一行数据还原出二维数组的行与列</span></span><br><span class="line">        <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[array[<span class="number">0</span>][<span class="number">0</span>]][array[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            result[array[i][<span class="number">0</span>]][array[i][<span class="number">1</span>]] = array[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printArray(array);</span><br><span class="line">        printArray(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 稀疏数组转为二维数组的办法</span></span><br><span class="line"><span class="comment">     * 1. 创建二维数组，并且加入数据</span></span><br><span class="line"><span class="comment">     * 2.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] twoArrayConvertSparecArray() &#123;</span><br><span class="line">        <span class="comment">// 将二维数组转为稀疏数组 初始化为 11 11</span></span><br><span class="line">        <span class="keyword">int</span>[][] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">// 在二维数组放两个子</span></span><br><span class="line">        array[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">        array[<span class="number">3</span>][<span class="number">7</span>] = <span class="number">11</span>;</span><br><span class="line">        array[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">11</span>;</span><br><span class="line">        printArray(array);</span><br><span class="line">        <span class="comment">// 计算有几个有效数据</span></span><br><span class="line">        <span class="comment">// 存储有几个有效数据</span></span><br><span class="line">        <span class="keyword">int</span> sumCount = <span class="number">0</span>;</span><br><span class="line">        sumCount = calcuArrSize(array, sumCount);</span><br><span class="line">        <span class="comment">// 创建稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] spareceArray = <span class="keyword">new</span> <span class="keyword">int</span>[sumCount+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一行为 个数 棋盘的行 棋盘的列</span></span><br><span class="line">        spareceArray[<span class="number">0</span>][<span class="number">0</span>] = array.length;</span><br><span class="line">        spareceArray[<span class="number">0</span>][<span class="number">1</span>] = array[<span class="number">0</span>].length;</span><br><span class="line">        spareceArray[<span class="number">0</span>][<span class="number">2</span>] = sumCount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 稀疏数组存储数据</span></span><br><span class="line">        <span class="comment">//count 用于记录是第几个非0数据</span></span><br><span class="line">        <span class="keyword">int</span> noZeroCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    noZeroCount++;</span><br><span class="line">                    <span class="comment">// 存储第几行 第几列 值为多少</span></span><br><span class="line">                    spareceArray[noZeroCount][<span class="number">0</span>] = i;</span><br><span class="line">                    spareceArray[noZeroCount][<span class="number">1</span>] = j;</span><br><span class="line">                    spareceArray[noZeroCount][<span class="number">2</span>] = array[i][j];</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> spareceArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算有效数据的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 原有的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sumCount 计算个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calcuArrSize</span><span class="params">(<span class="keyword">int</span>[][] array, <span class="keyword">int</span> sumCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sumCount++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sumCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印数组的快捷方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[][] array)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"-----------------我是分割线-----------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                System.out.print(array[i][j] + <span class="string">"\t"</span> );</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.err.println(<span class="string">"-----------------我是分割线-----------------"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-队列："><a href="#5-队列：" class="headerlink" title="5. 队列："></a>5. 队列：</h1><h2 id="5-1-数组模拟队列"><a href="#5-1-数组模拟队列" class="headerlink" title="5.1 数组模拟队列"></a>5.1 数组模拟队列</h2><h3 id="5-1-1-思路分析：addQueue"><a href="#5-1-1-思路分析：addQueue" class="headerlink" title="5.1.1 思路分析：addQueue"></a>5.1.1 思路分析：addQueue</h3><ol><li>将尾指针 rear + 1 ， 表示入队。当 rear == front 表示空队列</li><li>如果rear 等于队列 maxSize - 1， 表示队列满，否则可以增加元素</li></ol><h3 id="5-1-2-思路分析：removeQueue"><a href="#5-1-2-思路分析：removeQueue" class="headerlink" title="5.1.2 思路分析：removeQueue"></a>5.1.2 思路分析：removeQueue</h3><ol><li>将队头指针进行出队操作</li><li>每次移除都需要队头指针 +1</li><li>将队列后面的数据向前拷贝</li></ol><h2 id="5-2-JAVA代码实现数组底层的队列"><a href="#5-2-JAVA代码实现数组底层的队列" class="headerlink" title="5.2 JAVA代码实现数组底层的队列"></a>5.2 JAVA代码实现数组底层的队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.rowset.serial.SerialArray;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用数组实现队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: MyQueue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> structAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 使用数组实现队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队头指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列不能小于或者等于 0"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意此处为什么是-1 ：因为队列的头部不应该执行队伍的第一个元素，因为此时是出于队列的头部，并没有数据</span></span><br><span class="line">        rear = front = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.arr = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">this</span>.maxSize = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队操作：</span></span><br><span class="line"><span class="comment">     * 1. 队伍头部的元素删除即，使 return arr[front]</span></span><br><span class="line"><span class="comment">     * 2. 将队伍后面的元素向前拷贝</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列为空，不能移除"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rear; i++) &#123;</span><br><span class="line">            arr[i - <span class="number">1</span>] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        arr[--rear] = 0;</span></span><br><span class="line">        <span class="keyword">return</span> arr[++front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾+1 入队操作</span></span><br><span class="line"><span class="comment">     * 需要判断队列是否为空并且是否不满</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否为空或者是否已经满了</span></span><br><span class="line">        <span class="keyword">boolean</span> empty = isFull();</span><br><span class="line">        <span class="keyword">if</span> (!empty) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列已满，无法添加"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[++rear] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否可以加入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear != maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(Arrays.toString(<span class="keyword">this</span>.arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyQueue myQueue = <span class="keyword">new</span> MyQueue(<span class="number">3</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">2</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">5</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">6</span>);</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        <span class="comment">// 这里出现问题，因为队头和队尾都指向队列的尾部，会出现无法添加和无法删除掉问题</span></span><br><span class="line">        myQueue.addQueue(<span class="number">6</span>);</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line"></span><br><span class="line">        myQueue.showQueue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-1-数组队列的弊端"><a href="#5-2-1-数组队列的弊端" class="headerlink" title="5.2.1 数组队列的弊端"></a>5.2.1 数组队列的弊端</h3><ul><li>队头和队尾都执行队列的尾部时候，无法添加也无法删除<ul><li>数组只能使用一次</li></ul></li><li>数组复用性不好</li></ul><h2 id="5-3-数组实现循环队列"><a href="#5-3-数组实现循环队列" class="headerlink" title="5.3  数组实现循环队列"></a>5.3  数组实现循环队列</h2><h3 id="5-3-1-如何判定队列已经满了"><a href="#5-3-1-如何判定队列已经满了" class="headerlink" title="5.3.1 如何判定队列已经满了"></a>5.3.1 如何判定队列已经满了</h3><p>算法</p><blockquote><p>( rear + 1 ) % maxSize == front</p></blockquote><h3 id="5-3-2-如何判定队列是空的"><a href="#5-3-2-如何判定队列是空的" class="headerlink" title="5.3.2 如何判定队列是空的"></a>5.3.2 如何判定队列是空的</h3><p><font color='red'><strong>rear == front</strong></font></p><h3 id="5-3-3-如何判定有效个数"><a href="#5-3-3-如何判定有效个数" class="headerlink" title="5.3.3 如何判定有效个数"></a>5.3.3 如何判定有效个数</h3><blockquote><p>举例：</p><p>maxSize = 7</p><p>front = 5</p><p>rear =  5 </p><p>maxSize + (rear+1) - front % maxSize</p></blockquote><h2 id="5-3-4-使用数组实现循环队列的方式2"><a href="#5-3-4-使用数组实现循环队列的方式2" class="headerlink" title="5.3.4 使用数组实现循环队列的方式2"></a>5.3.4 使用数组实现循环队列的方式2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用数组实现队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: MyQueue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> structAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 使用数组实现队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队头指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列不能小于或者等于 0"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意此处为什么是-1 ：因为队列的头部不应该执行队伍的第一个元素，因为此时是出于队列的头部，并没有数据</span></span><br><span class="line">        rear = front = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.arr = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">this</span>.maxSize = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队操作：</span></span><br><span class="line"><span class="comment">     * 1. 队伍头部的元素删除即，使 return arr[front]</span></span><br><span class="line"><span class="comment">     * 2. 将队伍后面的元素向前拷贝</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列为空，不能移除"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        for (int i = 1; i &lt; rear; i++) &#123;</span></span><br><span class="line"><span class="comment">//            arr[i - 1] = arr[i];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        arr[--rear] = 0;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr[++front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾+1 入队操作</span></span><br><span class="line"><span class="comment">     * 需要判断队列是否为空并且是否不满</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否为空或者是否已经满了</span></span><br><span class="line">        <span class="keyword">boolean</span> empty = isFull();</span><br><span class="line">        <span class="keyword">if</span> (empty) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列已满，无法添加"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[rear] = val;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否可以加入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return rear != maxSize - 1;</span></span><br><span class="line">        <span class="comment">// 这是最新的一种判定方式： rear =</span></span><br><span class="line">        <span class="keyword">return</span> (rear  + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"队列为空，不能遍历"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; front + size(); i++) &#123;</span><br><span class="line">            System.err.print(arr[i % maxSize] + <span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.err.println(Arrays.toString(this.arr));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + maxSize - front) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyQueue myQueue = <span class="keyword">new</span> MyQueue(<span class="number">8</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">2</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">55</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">35</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">25</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">65</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">85</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">75</span>);</span><br><span class="line"><span class="comment">//        myQueue.addQueue(6);</span></span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        <span class="comment">// 这里出现问题，因为队头和队尾都指向队列的尾部，会出现无法添加和无法删除掉问题</span></span><br><span class="line"><span class="comment">//        myQueue.addQueue(6);</span></span><br><span class="line"><span class="comment">//        myQueue.removeQueue();</span></span><br><span class="line"></span><br><span class="line">        myQueue.showQueue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-链表"><a href="#6-链表" class="headerlink" title="6. 链表"></a>6. 链表</h1><h2 id="6-1-使用自制的链表处理"><a href="#6-1-使用自制的链表处理" class="headerlink" title="6.1 使用自制的链表处理"></a>6.1 使用自制的链表处理</h2><h3 id="6-1-1-使用java代码实现链表"><a href="#6-1-1-使用java代码实现链表" class="headerlink" title="6.1.1 使用java代码实现链表"></a>6.1.1 使用java代码实现链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单链表实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: SpareceArray</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> structAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 单链表实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/19 14:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingelQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HeroNode heroNode1 = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">"111"</span>, <span class="string">"111"</span>);</span><br><span class="line">        HeroNode heroNode2 = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">"222"</span>, <span class="string">"222"</span>);</span><br><span class="line">        HeroNode heroNode3 = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">"333"</span>, <span class="string">"333"</span>);</span><br><span class="line">        HeroNode heroNode4 = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">"444"</span>, <span class="string">"444"</span>);</span><br><span class="line">        SingelLinkedList singelLinkedList = <span class="keyword">new</span> SingelLinkedList();</span><br><span class="line">        singelLinkedList.add(heroNode1);</span><br><span class="line">        singelLinkedList.add(heroNode2);</span><br><span class="line">        singelLinkedList.add(heroNode3);</span><br><span class="line">        singelLinkedList.add(heroNode4);</span><br><span class="line">        singelLinkedList.list();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingelLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在插入的使用最新的方式：</span></span><br><span class="line"><span class="comment">     * 根据id编号进行排序</span></span><br><span class="line"><span class="comment">     * 1.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 由于头结点不能动，需要使用</span></span><br><span class="line">        HeroNode heroNode = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(heroNode.getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            heroNode = heroNode.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        heroNode.setNext(node);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HeroNode heroNode = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(heroNode.getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.err.println(heroNode);</span><br><span class="line">            heroNode = heroNode.getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造函数的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> HeroNode next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化构造函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> no</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nickName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no, String name, String nickName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickName</span><span class="params">(String nickName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(HeroNode next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HeroNode&#123;"</span> +</span><br><span class="line">                <span class="string">"no="</span> + no +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", nickName='"</span> + nickName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", next="</span> + next +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-2-使用排序的方式插入链表改进上述链表"><a href="#6-1-2-使用排序的方式插入链表改进上述链表" class="headerlink" title="6.1.2 使用排序的方式插入链表改进上述链表"></a>6.1.2 使用排序的方式插入链表改进上述链表</h3><ol><li>这里使用了查找的方式，判断是否相等，遍历的时候使用头指针的下一个节点进行遍历操作</li><li>插入节点使用被插入的节点的下一个节点指向当前遍历节点的下一个节点，当前循环节点指向指向当前被插入的节点</li><li>如果节点相等，给出提示</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在插入的使用最新的方式：</span></span><br><span class="line"><span class="comment">     * 使用id编号进行排序，在查找的时候使用id进行排序查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(HeroNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 由于头结点不能动，需要使用</span></span><br><span class="line">        HeroNode heroNode = head;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(heroNode.getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 寻找编号大于被插入节点的节点，因为只能找被插入的节点的上一个节点</span></span><br><span class="line">            <span class="keyword">if</span>(heroNode.getNext().getNo() &gt; node.getNo())&#123;</span><br><span class="line">                <span class="comment">// 获取原来数据的下一个节点一个节点</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(heroNode.getNext().getNo() == node.getNo())&#123;</span><br><span class="line">                <span class="comment">//说明希望添加的heroNode的编号已然存在</span></span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            heroNode = heroNode.getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            System.err.println(<span class="string">"被插入的节点已经存在"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node.setNext(heroNode.getNext());</span><br><span class="line">            heroNode.setNext(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-3-删除节点有多少种情况"><a href="#6-1-3-删除节点有多少种情况" class="headerlink" title="6.1.3 删除节点有多少种情况"></a>6.1.3 删除节点有多少种情况</h3><ol><li><p>如果删除的是头节点</p></li><li><p>如果是中间的节点，需要将被删除的上一个节点执行被删除节点的下一个节点</p></li><li><p>如果在尾部，删除尾部节点</p></li></ol><h3 id="6-1-4-删除的第一种方式实现办法"><a href="#6-1-4-删除的第一种方式实现办法" class="headerlink" title="6.1.4 删除的第一种方式实现办法"></a>6.1.4 删除的第一种方式实现办法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除方式，</span></span><br><span class="line"><span class="comment">     * 第一种方式： 使用编号删除对应的节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> no 节点编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">// 如果是头节点指向节点，需要变更头节点指向节点再删除节点</span></span><br><span class="line">        <span class="keyword">if</span> (temp.getNext().getNo() == no) &#123;</span><br><span class="line">            <span class="comment">// 指向下一个节点的下一个节点</span></span><br><span class="line">            head.setNext(head.getNext().getNext());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否找到了节点</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.getNext().getNo() == no) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到节点进行替换</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            temp.setNext(temp.getNext().getNext());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.err.println(<span class="string">"没有找到对应编号的英雄"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-5-删除的第二种方式分析："><a href="#6-1-5-删除的第二种方式分析：" class="headerlink" title="6.1.5 删除的第二种方式分析："></a>6.1.5 删除的第二种方式分析：</h3><ol><li><p>删除根据第几个来删除，必须我想删除第一个节点</p><ol><li>第一个节点对应了头节点，需要对于头指针指向进行后移</li></ol></li><li><p>其余根据no编号删除雷同,只需要编号判断改为第几个判断即可</p></li></ol><h2 id="6-2-关于链表的面试题（重点）"><a href="#6-2-关于链表的面试题（重点）" class="headerlink" title="6.2 关于链表的面试题（重点）"></a>6.2 关于链表的面试题（重点）</h2><ol><li><p>单链表当中有效节点的个数</p></li><li><p>获取倒数第n个节点的节点</p></li><li><p>反转链表</p><ol><li>定义一个节点：反转用的头</li><li>从头到尾遍历原来链表，每遍历一个节点，就取出，放到新的链表前面</li><li>将旧链表的下一个节点指向逆序链表的下一个节点</li></ol></li><li><p>从尾部到头部逆序打印链表</p><ol><li>第一种方法：显逆序，逆序之后打印节点（不可取）</li><li>使用栈实现：将所有的节点加入栈当中，然后使用栈进行打印</li></ol></li></ol><h3 id="6-2-1-节点个数的实现"><a href="#6-2-1-节点个数的实现" class="headerlink" title="6.2.1 节点个数的实现"></a>6.2.1 节点个数的实现</h3><p>较为简单，遍历统计遍历几次即可</p><h3 id="6-2-2-倒数第N个节点"><a href="#6-2-2-倒数第N个节点" class="headerlink" title="6.2.2 倒数第N个节点"></a>6.2.2 倒数第N个节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取倒数第index个节点的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">getLastIndexHeroNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取链表的总个数</span></span><br><span class="line">        <span class="keyword">int</span> count = count();</span><br><span class="line">        <span class="keyword">if</span>(index &lt;= <span class="number">0</span> || index &gt; count)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode temp = head.getNext();</span><br><span class="line">        <span class="comment">// 2. 根据size - index , 循环获取倒数第 index 节点</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> size = count-index;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == size) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 遍历拿到数据，返回结果</span></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-3-反转链表"><a href="#6-2-3-反转链表" class="headerlink" title="6.2.3 反转链表"></a>6.2.3 反转链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转节点</span></span><br><span class="line"><span class="comment">     * 1. 定义一个反转节点的head</span></span><br><span class="line"><span class="comment">     * 2. 遍历原来的链表，使用类似入栈的方式，将每个节点接入到反转节点的指向节点，被接入节点指向原来的节点</span></span><br><span class="line"><span class="comment">     * 3. 反转节点完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.getNext() == <span class="keyword">null</span> || head.getNext().getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"无需反转"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode reverseHead = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">        HeroNode temp = head.getNext();</span><br><span class="line">        HeroNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 让当前节点接到新链表的下一个节点</span></span><br><span class="line">            next = temp.getNext();</span><br><span class="line">            temp.setNext(reverseHead.getNext());</span><br><span class="line">            reverseHead.setNext(temp);</span><br><span class="line">            temp = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用反转节点替换原来的节点</span></span><br><span class="line">        head.setNext(reverseHead.getNext());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-4-反序打印链表"><a href="#6-2-4-反序打印链表" class="headerlink" title="6.2.4 反序打印链表"></a>6.2.4 反序打印链表</h3><ol><li>需要使用到栈这种结构，将节点压进栈当中，然后从栈中取数据进行遍历</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序打印链表里面的内容</span></span><br><span class="line"><span class="comment">     * 使用的栈结构进行存放数据，然后使用栈进行输出操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reversePrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println();</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.getNext() == <span class="keyword">null</span> || head.getNext().getNext() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"无需反转打印"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode hero = head.getNext();</span><br><span class="line">        Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (hero != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(hero);</span><br><span class="line">            hero = hero.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(stack.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-5-合并两个链表"><a href="#6-2-5-合并两个链表" class="headerlink" title="6.2.5 合并两个链表"></a>6.2.5 合并两个链表</h3><ol><li>遍历两个链表，先将第一个链表进行插入，然后根据第二个链表进行相同的插入操作s</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并两个链表，合并之后依然有序</span></span><br><span class="line"><span class="comment">     * 1. 计算两个链表的个数</span></span><br><span class="line"><span class="comment">     * 2. 循环总数，判断两个节点的当前节点更大，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingelLinkedList <span class="title">mergeList</span><span class="params">(SingelLinkedList list1, SingelLinkedList list2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="keyword">null</span> &amp;&amp; list2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line">        SingelLinkedList result = <span class="keyword">new</span> SingelLinkedList();</span><br><span class="line">        HeroNode next1 = list1.getHead();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (next1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            HeroNode next = next1.getNext();</span><br><span class="line">            SingelLinkedList.addByOrder(result, next1);</span><br><span class="line">            next1 = next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode next2 = list2.getHead().getNext();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            HeroNode next = next2.getNext();</span><br><span class="line">            SingelLinkedList.addByOrder(result, next2);</span><br><span class="line">            next2 = next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-分析双向链表的遍历，添加、删除的操作思路"><a href="#6-3-分析双向链表的遍历，添加、删除的操作思路" class="headerlink" title="6.3 分析双向链表的遍历，添加、删除的操作思路"></a>6.3 分析双向链表的遍历，添加、删除的操作思路</h2><ol><li>遍历方和单链表一样只是可以朝前，可以向后</li><li>添加<ol><li>默认添加到双向链表的最后</li><li>先找到双向链表的最后这个节点</li><li>temp.next = new heronode</li><li>newheronode.pre = temp</li></ol></li><li>删除<ol><li>因为是双向的，可以自我删除</li><li>找到要删除的这个节点，temp</li><li>temp.next.pre = temp.pre</li><li>temp.pre.next = temp.next</li></ol></li><li>修改<ol><li>不需要太大变动，和原来的链表类似</li></ol></li></ol><h2 id="6-4-循环链表（约瑟夫问题）"><a href="#6-4-循环链表（约瑟夫问题）" class="headerlink" title="6.4 循环链表（约瑟夫问题）"></a>6.4 循环链表（约瑟夫问题）</h2><h3 id="6-4-1-什么是循环链表"><a href="#6-4-1-什么是循环链表" class="headerlink" title="6.4.1 什么是循环链表"></a>6.4.1 什么是循环链表</h3><p>无论是加入还是删除节点，最后一个节点要么指向自己，要么指向链表的头节点，形成环状的一个链表</p><h3 id="6-4-2-构建一个环形链表的思路"><a href="#6-4-2-构建一个环形链表的思路" class="headerlink" title="6.4.2 构建一个环形链表的思路"></a>6.4.2 构建一个环形链表的思路</h3><ol><li>先创建一个节点，first 指向改节点， 并且形成环形</li><li>后面当我们每创建一个新的节点，就把该节点，加入到已有的环形链表当中即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环形链表的添加和原来的添加代码有所不同</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"size的值不正确"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CircularNode cur = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size; i++) &#123;</span><br><span class="line">            CircularNode newcur = <span class="keyword">new</span> CircularNode(i, <span class="string">"小孩"</span>+i, <span class="string">"小孩昵称"</span>+i);</span><br><span class="line">            <span class="comment">// 如果是第一个节点，则需要特殊处理</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// 第一个节点复制给first节点</span></span><br><span class="line">                first = newcur;</span><br><span class="line">                first.setNext(first);</span><br><span class="line">                <span class="comment">// 将当前操作指针指向第一个节点</span></span><br><span class="line">                cur = first;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur.setNext(newcur);</span><br><span class="line">                newcur.setNext(first);</span><br><span class="line">                cur = newcur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-3-遍历环形链表"><a href="#6-4-3-遍历环形链表" class="headerlink" title="6.4.3 遍历环形链表"></a>6.4.3 遍历环形链表</h3><ol><li>先让一个辅助指针 curBoy ， 指向first</li><li>通过while循环，遍历环形链表，当curBoy.next  == first 结束</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(first == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"循环链表为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CircularNode circularQueue = first;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.err.println(circularQueue);</span><br><span class="line">            <span class="keyword">if</span>(circularQueue.getNext() == first)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            circularQueue = circularQueue.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-4-模拟约瑟夫问题的实现（重点）"><a href="#6-4-4-模拟约瑟夫问题的实现（重点）" class="headerlink" title="6.4.4 模拟约瑟夫问题的实现（重点）"></a>6.4.4 模拟约瑟夫问题的实现（重点）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> begin 从第几个小孩开始数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> countNum 数几个小孩</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 表示最初有多少小孩在圈中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> countNum, <span class="keyword">int</span> nums)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 先对数据进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span> || begin &lt; <span class="number">1</span> || countNum &gt; nums) &#123;</span><br><span class="line">            System.out.println(<span class="string">"参数输入有误， 请重新输入"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建辅助指针，指向环形链表的最后一个元素</span></span><br><span class="line">        CircularNode helper = first;</span><br><span class="line">        <span class="keyword">while</span>(helper.getNext() != first)&#123;</span><br><span class="line">            helper = helper.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//小孩报数前，先让 first 和  helper 移动 k - 1次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; begin; i++) &#123;</span><br><span class="line">            first = first.getNext();</span><br><span class="line">            helper = helper.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当小孩报数时，让first 和 helper 指针同时 的移动  m  - 1 次, 然后出圈</span></span><br><span class="line">        <span class="comment">// 这里是一个循环操作，知道圈中只有一个节点</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(helper == first) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//让 first 和 helper 指针同时 的移动 countNum - 1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countNum - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                first = first.getNext();</span><br><span class="line">                helper = helper.getNext();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这时first指向的节点，就是要出圈的小孩节点\</span></span><br><span class="line">            System.out.printf(<span class="string">"小孩%d出圈\n"</span>, first.getNo());</span><br><span class="line">            first = first.getNext();</span><br><span class="line">            helper.setNext(first);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"最后留在圈中的小孩编号%d \n"</span>, first.getNo());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="7-栈"><a href="#7-栈" class="headerlink" title="7. 栈"></a>7. 栈</h1><h2 id="7-1-如何实现一个栈结构"><a href="#7-1-如何实现一个栈结构" class="headerlink" title="7.1 如何实现一个栈结构"></a>7.1 如何实现一个栈结构</h2><ol><li><p>使用一个top 初始化为 -1 表示栈定， 压入数据 为 push + 1</p></li><li><p>使用 top – 表示出栈</p></li><li><p>由于栈帧只能从一个方向操作，则需要对于栈帧进行一下判断是否为空或者已满</p></li></ol><h2 id="7-2-使用栈模拟一个表达式计算（重点）"><a href="#7-2-使用栈模拟一个表达式计算（重点）" class="headerlink" title="7.2 使用栈模拟一个表达式计算（重点）"></a>7.2 使用栈模拟一个表达式计算（重点）</h2><ol><li>首先：使用一个索引扫描整个表达式，用于往两个栈中添加数据</li><li>如果是数字，则直接加入到数栈当中</li><li>如果是操作符，则分为以下两种情况<ol><li>如果是加法和减法，则直接加入到栈顶</li><li>如果是乘法或者除法，则压如下一个表达式索引值</li></ol></li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      很早之前做的笔记了，做一个备忘
    
    </summary>
    
    
      <category term="算法" scheme="https://lazytime.site/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://lazytime.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>使用Go语言+IDEA+mysql 逆向生成dao 和 domain 的方法</title>
    <link href="https://lazytime.site/2020/10/27/goidea/"/>
    <id>https://lazytime.site/2020/10/27/goidea/</id>
    <published>2020-10-27T14:53:01.000Z</published>
    <updated>2020-10-29T14:39:21.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考地址："><a href="#参考地址：" class="headerlink" title="参考地址："></a>参考地址：</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ2FvbWFuaXRvL3AvMTA2ODIyNjAuaHRtbA==" title="https://www.cnblogs.com/gaomanito/p/10682260.html">https://www.cnblogs.com/gaomanito/p/10682260.html<i class="fa fa-external-link"></i></span></p><a id="more"></a><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="第一步：安装idea-自行百度"><a href="#第一步：安装idea-自行百度" class="headerlink" title="第一步：安装idea:自行百度"></a>第一步：安装idea:自行百度</h2><h2 id="第二步：Idea配置mysql-连接"><a href="#第二步：Idea配置mysql-连接" class="headerlink" title="第二步：Idea配置mysql 连接"></a>第二步：Idea配置mysql 连接</h2><ul><li>View -&gt; Tool Windows -&gt; DataSource 出现数据连接页面</li><li>点击 <strong>+</strong> 号，出现数据库连接设置，<ul><li>name: 连接名称</li><li>comments: 备注</li><li>host:本地或者内网ip</li><li>user:用户名</li><li>password：密码</li><li>Database：连接数据库名称</li><li>url: jdbc连接<ul><li>注意此处如果是mysql 5.5 以上 的版本需要加入如下参数</li><li><strong>serverTimezone=UTC</strong></li></ul></li></ul></li></ul><h2 id="第三步：使用groovy逆向生成model-dao-daoxml-三种类型的文件"><a href="#第三步：使用groovy逆向生成model-dao-daoxml-三种类型的文件" class="headerlink" title="第三步：使用groovy逆向生成model, dao, daoxml 三种类型的文件"></a>第三步：使用groovy逆向生成model, dao, daoxml 三种类型的文件</h2><ul><li>右击连接：选中<code>Scripted Extendsions</code> </li><li>选择<code>Go to Scripts Directory</code> 调转到go 语言的模板地址</li><li>如果需要扩展则只需要在该文件夹内加入对应的模板即可</li></ul><h2 id="第四步：几个默认的模板"><a href="#第四步：几个默认的模板" class="headerlink" title="第四步：几个默认的模板"></a>第四步：几个默认的模板</h2><h3 id="Generate-MyPOJOs-groovy文件（生成实体类）："><a href="#Generate-MyPOJOs-groovy文件（生成实体类）：" class="headerlink" title="Generate MyPOJOs.groovy文件（生成实体类）："></a>Generate MyPOJOs.groovy文件（生成实体类）：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.intellij.database.model.DasTable</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.model.ObjectKind</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.Case</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.DasUtil</span><br><span class="line"><span class="keyword">import</span> java.io.*</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Available context bindings:</span></span><br><span class="line"><span class="comment"> *   SELECTION   Iterable&lt;DasObject&gt;</span></span><br><span class="line"><span class="comment"> *   PROJECT     project</span></span><br><span class="line"><span class="comment"> *   FILES       files helper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">packageName = <span class="string">""</span></span><br><span class="line">typeMapping = [</span><br><span class="line">        (~/(?i)tinyint|smallint|mediumint/)      : <span class="string">"Integer"</span>,</span><br><span class="line">        (~/(?i)<span class="keyword">int</span>/)                             : <span class="string">"Long"</span>,</span><br><span class="line">        (~/(?i)<span class="keyword">bool</span>|bit/)                        : <span class="string">"Boolean"</span>,</span><br><span class="line">        (~/(?i)float|double|decimal|<span class="built_in">real</span>/)       : <span class="string">"Double"</span>,</span><br><span class="line">        (~/(?i)datetime|timestamp|date|time/)    : <span class="string">"Date"</span>,</span><br><span class="line">        (~/(?i)blob|binary|bfile|clob|raw|image/): <span class="string">"InputStream"</span>,</span><br><span class="line">        (~/(?i)/)                                : <span class="string">"String"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FILES.chooseDirectoryAndSave(<span class="string">"Choose directory"</span>, <span class="string">"Choose where to store generated files"</span>) &#123; dir -&gt;</span><br><span class="line">    SELECTION.filter &#123; it instanceof DasTable &amp;&amp; it.getKind() == ObjectKind.TABLE &#125;.each &#123; generate(it, dir) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(table, dir) &#123;</span><br><span class="line">    <span class="comment">//def className = javaClassName(table.getName(), true)</span></span><br><span class="line">    def className = javaName(table.getName(), <span class="literal">true</span>)</span><br><span class="line">    def fields = calcFields(table)</span><br><span class="line">    packageName = getPackageName(dir)</span><br><span class="line">    PrintWriter printWriter = <span class="built_in">new</span> PrintWriter(<span class="built_in">new</span> OutputStreamWriter(<span class="built_in">new</span> FileOutputStream(<span class="built_in">new</span> File(dir, className + <span class="string">".java"</span>)), <span class="string">"UTF-8"</span>))</span><br><span class="line">    printWriter.withPrintWriter &#123;out -&gt; generate(out, className, fields,table)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    new File(dir, className + ".java").withPrintWriter &#123; out -&gt; generate(out, className, fields,table) &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取包所在文件夹路径</span></span><br><span class="line">def getPackageName(dir) &#123;</span><br><span class="line">    <span class="keyword">return</span> dir.toString().replaceAll(<span class="string">"\\\\"</span>, <span class="string">"."</span>).replaceAll(<span class="string">"/"</span>, <span class="string">"."</span>).replaceAll(<span class="string">"^.*src(\\.main\\.java\\.)?"</span>, <span class="string">""</span>) + <span class="string">";"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(out, className, fields,table) &#123;</span><br><span class="line">    def tableName = table.getName()</span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"package $packageName"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import javax.persistence.Column;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import javax.persistence.Entity;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import javax.persistence.Table;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import java.io.Serializable;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import lombok.Data;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import lombok.AllArgsConstructor;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import lombok.Builder;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import lombok.NoArgsConstructor;"</span></span><br><span class="line"></span><br><span class="line">    Set types = <span class="built_in">new</span> HashSet()</span><br><span class="line"></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        types.add(it.<span class="keyword">type</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (types.contains(<span class="string">"Date"</span>)) &#123;</span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"import java.util.Date;"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (types.contains(<span class="string">"InputStream"</span>)) &#123;</span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"import java.io.InputStream;"</span></span><br><span class="line">    &#125;</span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"/**\n"</span> +</span><br><span class="line">            <span class="string">" * @Description  \n"</span> +</span><br><span class="line">            <span class="string">" * @Author  GX\n"</span> +</span><br><span class="line">            <span class="string">" * @Date "</span>+ <span class="built_in">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(<span class="built_in">new</span> Date()) + <span class="string">" \n"</span> +</span><br><span class="line">            <span class="string">" */"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Data"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Entity"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@AllArgsConstructor"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Builder"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@NoArgsConstructor"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Table ( name =\""</span>+table.getName() +<span class="string">"\" )"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"public class $className  implements Serializable &#123;"</span></span><br><span class="line">    out.<span class="built_in">println</span> genSerialID()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断自增</span></span><br><span class="line">    <span class="keyword">if</span> ((tableName + <span class="string">"_id"</span>).equalsIgnoreCase(fields[<span class="number">0</span>].colum) || <span class="string">"id"</span>.equalsIgnoreCase(fields[<span class="number">0</span>].colum)) &#123;</span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"\t@Id"</span></span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"\t@GeneratedValue(generator = \"idGenerator\")"</span></span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"\t@GenericGenerator(name = \"idGenerator\", strategy = ChiticCoreConstant.ID_GENERATOR_COMMON)"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">        <span class="comment">// 输出注释</span></span><br><span class="line">        <span class="keyword">if</span> (isNotEmpty(it.commoent)) &#123;</span><br><span class="line">            out.<span class="built_in">println</span> <span class="string">"\t/**"</span></span><br><span class="line">            out.<span class="built_in">println</span> <span class="string">"\t * $&#123;it.commoent.toString()&#125;"</span></span><br><span class="line">            out.<span class="built_in">println</span> <span class="string">"\t */"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (it.annos != <span class="string">""</span>) out.<span class="built_in">println</span> <span class="string">"   $&#123;it.annos.replace("</span>[@Id]<span class="string">", "</span><span class="string">")&#125;"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出成员变量</span></span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"\tprivate $&#123;it.type&#125; $&#123;it.name&#125;;"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出get/set方法</span></span><br><span class="line"><span class="comment">//    fields.each() &#123;</span></span><br><span class="line"><span class="comment">//        out.println ""</span></span><br><span class="line"><span class="comment">//        out.println "\tpublic $&#123;it.type&#125; get$&#123;it.name.capitalize()&#125;() &#123;"</span></span><br><span class="line"><span class="comment">//        out.println "\t\treturn this.$&#123;it.name&#125;;"</span></span><br><span class="line"><span class="comment">//        out.println "\t&#125;"</span></span><br><span class="line"><span class="comment">//        out.println ""</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        out.println "\tpublic void set$&#123;it.name.capitalize()&#125;($&#123;it.type&#125; $&#123;it.name&#125;) &#123;"</span></span><br><span class="line"><span class="comment">//        out.println "\t\tthis.$&#123;it.name&#125; = $&#123;it.name&#125;;"</span></span><br><span class="line"><span class="comment">//        out.println "\t&#125;"</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def calcFields(table) &#123;</span><br><span class="line">    DasUtil.getColumns(table).reduce([]) &#123; fields, col -&gt;</span><br><span class="line">        def spec = Case.LOWER.apply(col.getDataType().getSpecification())</span><br><span class="line"></span><br><span class="line">        def typeStr = typeMapping.find &#123; p, t -&gt; p.matcher(spec).find() &#125;.value</span><br><span class="line">        def comm =[</span><br><span class="line">                colName : col.getName(),</span><br><span class="line">                name :  javaName(col.getName(), <span class="literal">false</span>),</span><br><span class="line">                <span class="keyword">type</span> : typeStr,</span><br><span class="line">                commoent: col.getComment(),</span><br><span class="line">                annos: <span class="string">"\t@Column(name = \""</span>+col.getName()+<span class="string">"\" )"</span>]</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"id"</span>.equals(Case.LOWER.apply(col.getName())))</span><br><span class="line">            comm.annos +=[<span class="string">"@Id"</span>]</span><br><span class="line">        fields += [comm]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理类名（这里是因为我的表都是以t_命名的，所以需要处理去掉生成类名时的开头的T，</span></span><br><span class="line"><span class="comment">// 如果你不需要那么请查找用到了 javaClassName这个方法的地方修改为 javaName 即可）</span></span><br><span class="line">def javaClassName(str, capitalize) &#123;</span><br><span class="line">    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/, <span class="string">"_"</span>)</span><br><span class="line">    <span class="comment">// 去除开头的T  http://developer.51cto.com/art/200906/129168.htm</span></span><br><span class="line">    s = s[<span class="number">1.</span>.s.size() - <span class="number">1</span>]</span><br><span class="line">    capitalize || s.length() == <span class="number">1</span>? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def javaName(str, capitalize) &#123;</span><br><span class="line"><span class="comment">//    def s = str.split(/(?&lt;=[^\p&#123;IsLetter&#125;])/).collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span></span><br><span class="line"><span class="comment">//            .join("").replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;]/, "_")</span></span><br><span class="line"><span class="comment">//    capitalize || s.length() == 1? s : Case.LOWER.apply(s[0]) + s[1..-1]</span></span><br><span class="line">    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/, <span class="string">"_"</span>)</span><br><span class="line">    capitalize || s.length() == <span class="number">1</span>? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def isNotEmpty(content) &#123;</span><br><span class="line">    <span class="keyword">return</span> content != null &amp;&amp; content.toString().trim().length() &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static String changeStyle(String str, boolean toCamel)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!str || str.size() &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(toCamel)&#123;</span><br><span class="line">        String r = str.toLowerCase().split(<span class="string">'_'</span>).collect&#123;cc -&gt; Case.LOWER.apply(cc).capitalize()&#125;.join(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span> r[<span class="number">0</span>].toLowerCase() + r[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        str = str[<span class="number">0</span>].toLowerCase() + str[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> str.collect&#123;cc -&gt; ((char)cc).isUpperCase() ? <span class="string">'_'</span> + cc.toLowerCase() : cc&#125;.join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static String genSerialID()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\tprivate static final long serialVersionUID =  "</span>+Math.abs(<span class="built_in">new</span> Random().nextLong())+<span class="string">"L;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generate-Dao-groovy文件（生成dao）："><a href="#Generate-Dao-groovy文件（生成dao）：" class="headerlink" title="Generate Dao.groovy文件（生成dao）："></a>Generate Dao.groovy文件（生成dao）：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.intellij.database.model.DasTable</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.Case</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.DasUtil</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Available context bindings:</span></span><br><span class="line"><span class="comment"> *   SELECTION   Iterable&lt;DasObject&gt;</span></span><br><span class="line"><span class="comment"> *   PROJECT     project</span></span><br><span class="line"><span class="comment"> *   FILES       files helper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">packageName = <span class="string">"**;"</span> <span class="comment">// 需手动配置 生成的 dao 所在包位置</span></span><br><span class="line"></span><br><span class="line">FILES.chooseDirectoryAndSave(<span class="string">"Choose directory"</span>, <span class="string">"Choose where to store generated files"</span>) &#123; dir -&gt;</span><br><span class="line">    SELECTION.filter &#123; it instanceof DasTable &#125;.each &#123; generate(it, dir) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(table, dir) &#123;</span><br><span class="line">    def baseName = javaName(table.getName(), <span class="literal">true</span>)</span><br><span class="line">    <span class="built_in">new</span> File(dir, baseName + <span class="string">"Mapper.java"</span>).withPrintWriter &#123; out -&gt; generateInterface(out, baseName) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generateInterface(out, baseName) &#123;</span><br><span class="line">    def date = <span class="built_in">new</span> Date().format(<span class="string">"yyyy/MM/dd"</span>)</span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"package $packageName"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import cn.xx.entity.$&#123;baseName&#125;Entity;"</span> <span class="comment">// 需手动配置</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import org.springframework.stereotype.Repository;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"/**"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">" * Created on $date."</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">" *"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">" * @author GX"</span> <span class="comment">// 可自定义</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">" */"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Repository"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"public interface $&#123;baseName&#125;Dao extends BaseDao&lt;$&#123;baseName&#125;Entity&gt; &#123;"</span> <span class="comment">// 可自定义</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def javaName(str, capitalize) &#123;</span><br><span class="line">    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/, <span class="string">"_"</span>)</span><br><span class="line">    name = capitalize || s.length() == <span class="number">1</span> ? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generate-DaoXml-groovy文件（生成dao-xml）："><a href="#Generate-DaoXml-groovy文件（生成dao-xml）：" class="headerlink" title="Generate DaoXml.groovy文件（生成dao.xml）："></a>Generate DaoXml.groovy文件（生成dao.xml）：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.intellij.database.model.DasTable</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.Case</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.DasUtil</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Available context bindings:</span></span><br><span class="line"><span class="comment"> *   SELECTION   Iterable&lt;DasObject&gt;</span></span><br><span class="line"><span class="comment"> *   PROJECT     project</span></span><br><span class="line"><span class="comment"> *   FILES       files helper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// entity(dto)、mapper(dao) 与数据库表的对应关系在这里手动指明,idea Database 窗口里只能选下列配置了的 mapper</span></span><br><span class="line"><span class="comment">// tableName(key) : [mapper(dao),entity(dto)]</span></span><br><span class="line">typeMapping = [</span><br><span class="line">        (~/(?i)<span class="keyword">int</span>/)                      : <span class="string">"INTEGER"</span>,</span><br><span class="line">        (~/(?i)float|double|decimal|<span class="built_in">real</span>/): <span class="string">"DOUBLE"</span>,</span><br><span class="line">        (~/(?i)datetime|timestamp/)       : <span class="string">"TIMESTAMP"</span>,</span><br><span class="line">        (~/(?i)date/)                     : <span class="string">"TIMESTAMP"</span>,</span><br><span class="line">        (~/(?i)time/)                     : <span class="string">"TIMESTAMP"</span>,</span><br><span class="line">        (~/(?i)/)                         : <span class="string">"VARCHAR"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">basePackage = <span class="string">"com.chitic.bank.mapping"</span> <span class="comment">// 包名需手动填写</span></span><br><span class="line"></span><br><span class="line">FILES.chooseDirectoryAndSave(<span class="string">"Choose directory"</span>, <span class="string">"Choose where to store generated files"</span>) &#123; dir -&gt;</span><br><span class="line">    SELECTION.filter &#123; it instanceof DasTable &#125;.each &#123; generate(it, dir) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(table, dir) &#123;</span><br><span class="line">    def baseName = mapperName(table.getName(), <span class="literal">true</span>)</span><br><span class="line">    def fields = calcFields(table)</span><br><span class="line">    <span class="built_in">new</span> File(dir, baseName + <span class="string">"Mapper.xml"</span>).withPrintWriter &#123; out -&gt; generate(table, out, baseName, fields) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(table, out, baseName, fields) &#123;</span><br><span class="line">    def baseResultMap = <span class="string">'BaseResultMap'</span></span><br><span class="line">    def base_Column_List = <span class="string">'Base_Column_List'</span></span><br><span class="line">    def date = <span class="built_in">new</span> Date().format(<span class="string">"yyyy/MM/dd"</span>)</span><br><span class="line">    def tableName = table.getName()</span><br><span class="line"></span><br><span class="line">    def dao = basePackage + <span class="string">".dao.$&#123;baseName&#125;Mapper"</span></span><br><span class="line">    def to = basePackage + <span class="string">".to.$&#123;baseName&#125;TO"</span></span><br><span class="line"></span><br><span class="line">    out.<span class="built_in">println</span> mappingsStart(dao)</span><br><span class="line">    out.<span class="built_in">println</span> resultMap(baseResultMap, to, fields)</span><br><span class="line">    out.<span class="built_in">println</span> sql(fields, base_Column_List)</span><br><span class="line">    out.<span class="built_in">println</span> selectById(tableName, fields, baseResultMap, base_Column_List)</span><br><span class="line">    out.<span class="built_in">println</span> deleteById(tableName, fields)</span><br><span class="line">    out.<span class="built_in">println</span> <span class="built_in">delete</span>(tableName, fields, to)</span><br><span class="line">    out.<span class="built_in">println</span> insert(tableName, fields, to)</span><br><span class="line">    out.<span class="built_in">println</span> update(tableName, fields, to)</span><br><span class="line">    out.<span class="built_in">println</span> selectList(tableName, fields, to, base_Column_List, baseResultMap)</span><br><span class="line">    out.<span class="built_in">println</span> mappingsEnd()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static def resultMap(baseResultMap, to, fields) &#123;</span><br><span class="line"></span><br><span class="line">    def inner = <span class="string">''</span></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        inner += <span class="string">'\t\t&lt;result column="'</span> + it.sqlFieldName + <span class="string">'" jdbcType="'</span> + it.<span class="keyword">type</span> + <span class="string">'" property="'</span> + it.name + <span class="string">'"/&gt;\n'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'\t&lt;resultMap id="'</span><span class="string">''</span> + baseResultMap + <span class="string">''</span><span class="string">'" type="'</span><span class="string">''</span> + to + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        &lt;id column="id" jdbcType="INTEGER" property="id"/&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span> + inner + <span class="string">''</span><span class="string">'\t&lt;/resultMap&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def calcFields(table) &#123;</span><br><span class="line">    DasUtil.getColumns(table).reduce([]) &#123; fields, col -&gt;</span><br><span class="line">        def spec = Case.LOWER.apply(col.getDataType().getSpecification())</span><br><span class="line">        def typeStr = typeMapping.find &#123; p, t -&gt; p.matcher(spec).find() &#125;.value</span><br><span class="line">        fields += [[</span><br><span class="line">                           comment     : col.getComment(),</span><br><span class="line">                           name        : mapperName(col.getName(), <span class="literal">false</span>),</span><br><span class="line">                           sqlFieldName: col.getName(),</span><br><span class="line">                           <span class="keyword">type</span>        : typeStr,</span><br><span class="line">                           annos       : <span class="string">""</span>]]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def mapperName(str, capitalize) &#123;</span><br><span class="line">    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/, <span class="string">"_"</span>)</span><br><span class="line">    name = capitalize || s.length() == <span class="number">1</span> ? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ mappings</span></span><br><span class="line">static def mappingsStart(mapper) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="string">&lt;mapper namespace="'</span><span class="string">''</span> + mapper + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ mappings</span></span><br><span class="line">static def mappingsEnd() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'&lt;/mapper&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ selectById</span></span><br><span class="line">static def selectById(tableName, fields, baseResultMap, base_Column_List) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;select id="selectById" parameterType="java.lang.Integer" resultMap="'</span><span class="string">''</span> + baseResultMap + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        select</span></span><br><span class="line"><span class="string">        &lt;include refid="'</span><span class="string">''</span> + base_Column_List + <span class="string">''</span><span class="string">'"/&gt;</span></span><br><span class="line"><span class="string">        from '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        where id = #&#123;id&#125;</span></span><br><span class="line"><span class="string">    &lt;/select&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ insert</span></span><br><span class="line">static def insert(tableName, fields, parameterType) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;insert id="insert" parameterType="'</span><span class="string">''</span> + parameterType + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        insert into '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;trim prefix="(" suffix=")" suffixOverrides=","&gt;</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span> + testNotNullStr(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;/trim&gt;</span></span><br><span class="line"><span class="string">        &lt;trim prefix="values (" suffix=")" suffixOverrides=","&gt;</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span> + testNotNullStrSet(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;/trim&gt;</span></span><br><span class="line"><span class="string">    &lt;/insert&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ update</span></span><br><span class="line">static def update(tableName, fields, parameterType) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;update id="update" parameterType="'</span><span class="string">''</span> + parameterType + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        update '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;set&gt;</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span> + testNotNullStrWhere(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;/set&gt;</span></span><br><span class="line"><span class="string">        where id = #&#123;id&#125;</span></span><br><span class="line"><span class="string">    &lt;/update&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ deleteById</span></span><br><span class="line">static def deleteById(tableName, fields) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;delete id="deleteById" parameterType="java.lang.Integer"&gt;</span></span><br><span class="line"><span class="string">        delete</span></span><br><span class="line"><span class="string">        from '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        where id = #&#123;id&#125;</span></span><br><span class="line"><span class="string">    &lt;/delete&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ delete</span></span><br><span class="line">static def <span class="built_in">delete</span>(tableName, fields, parameterType) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;delete id="delete" parameterType="'</span><span class="string">''</span> + parameterType + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        delete from '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        where 1 = 1</span></span><br><span class="line"><span class="string">        '</span><span class="string">''</span> + testNotNullStrWhere(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;/delete&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ selectList</span></span><br><span class="line">static def selectList(tableName, fields, parameterType, base_Column_List, baseResultMap) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;select id="selectList" parameterType="'</span><span class="string">''</span> + parameterType + <span class="string">''</span><span class="string">'" resultMap="'</span><span class="string">''</span> + baseResultMap + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        select</span></span><br><span class="line"><span class="string">        &lt;include refid="'</span><span class="string">''</span> + base_Column_List + <span class="string">''</span><span class="string">'"/&gt;</span></span><br><span class="line"><span class="string">                from '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        where 1 = 1</span></span><br><span class="line"><span class="string">        '</span><span class="string">''</span> + testNotNullStrWhere(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        order by id desc</span></span><br><span class="line"><span class="string">    &lt;/select&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ sql</span></span><br><span class="line">static def sql(fields, base_Column_List) &#123;</span><br><span class="line">    def str = <span class="string">''</span><span class="string">'\t&lt;sql id="'</span><span class="string">''</span> + base_Column_List + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        @inner@</span></span><br><span class="line"><span class="string">    &lt;/sql&gt; '</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line">    def inner = <span class="string">''</span></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        inner += (<span class="string">'\t\t'</span> + it.sqlFieldName + <span class="string">',\n'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="string">"@inner@"</span>, inner.substring(<span class="number">0</span>, inner.length() - <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static def testNotNullStrWhere(fields) &#123;</span><br><span class="line">    def inner = <span class="string">''</span></span><br><span class="line">    fields.each &#123;</span><br><span class="line">        inner += <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;if test="'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">' != null"&gt;</span></span><br><span class="line"><span class="string">            and '</span><span class="string">''</span> + it.sqlFieldName + <span class="string">''</span><span class="string">' = #&#123;'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">'&#125;</span></span><br><span class="line"><span class="string">        &lt;/if&gt;\n'</span><span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static def testNotNullStrSet(fields) &#123;</span><br><span class="line">    def inner = <span class="string">''</span></span><br><span class="line">    fields.each &#123;</span><br><span class="line">        inner += <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;if test="'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">' != null"&gt;</span></span><br><span class="line"><span class="string">            #&#123;'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">'&#125;,</span></span><br><span class="line"><span class="string">        &lt;/if&gt;\n'</span><span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static def testNotNullStr(fields) &#123;</span><br><span class="line">    def inner1 = <span class="string">''</span></span><br><span class="line">    fields.each &#123;</span><br><span class="line">        inner1 += <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;if test = "'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">' != null" &gt;</span></span><br><span class="line"><span class="string">        \t'</span><span class="string">''</span> + it.sqlFieldName + <span class="string">''</span><span class="string">',</span></span><br><span class="line"><span class="string">        &lt;/if&gt;\n'</span><span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      学习数据结构的内容-韩顺平
    
    </summary>
    
    
      <category term="笔记" scheme="https://lazytime.site/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据结构" scheme="https://lazytime.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>如何访问jar包下面的资源文件</title>
    <link href="https://lazytime.site/2020/10/22/jar/"/>
    <id>https://lazytime.site/2020/10/22/jar/</id>
    <published>2020-10-22T13:17:45.000Z</published>
    <updated>2020-10-29T14:41:19.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何访问jar包下面的资源文件"><a href="#如何访问jar包下面的资源文件" class="headerlink" title="如何访问jar包下面的资源文件"></a>如何访问jar包下面的资源文件</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有些时候，我们需要通用一些功能页面，比如maven中公用的core的jar包内需要增加一些通用的功能，现在总结一下自己从中学到的一些东西</p><a id="more"></a><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3czMDI5NzQyMTUvYXJ0aWNsZS9kZXRhaWxzLzQ5ODE2Mzg1" title="https://blog.csdn.net/w302974215/article/details/49816385">https://blog.csdn.net/w302974215/article/details/49816385<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC96aGFveXVuMTk4NS9ibG9nLzQ3OTIzOD9mcm9tPW1haWwtbm90aWZ5" title="https://my.oschina.net/zhaoyun1985/blog/479238?from=mail-notify">https://my.oschina.net/zhaoyun1985/blog/479238?from=mail-notify<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9iYnMuY3Nkbi5uZXQvdG9waWNzLzM4MDIyMzUzOS8=" title="https://bbs.csdn.net/topics/380223539/">https://bbs.csdn.net/topics/380223539/<i class="fa fa-external-link"></i></span></p><h2 id="起步："><a href="#起步：" class="headerlink" title="起步："></a>起步：</h2><ul><li>创建一个springboot 项目</li><li>在springboot resources 下面创建一个 META-INF 文件</li><li>再创建一个resources 的内容，可以同步到reosurces下面</li></ul><h3 id="目录工程结构"><a href="#目录工程结构" class="headerlink" title="目录工程结构"></a>目录工程结构</h3><ul><li>resources<ul><li>META-INF<ul><li>resources<ul><li>WEB-INF</li><li>js</li></ul></li><li>jsp</li><li>jsp</li><li>jsp</li></ul></li></ul></li></ul><p>当文件被打包为jar的之后</p><p>将会可以依照上下文进行访问</p><blockquote><p>注意最终jar包是生成在 <code>lib</code>包下面</p></blockquote><h2 id="Spring-Boot-默认到访问规则"><a href="#Spring-Boot-默认到访问规则" class="headerlink" title="Spring Boot 默认到访问规则"></a>Spring Boot 默认到访问规则</h2><ul><li>“classpath:/META-INF/resources/“, </li><li>“classpath:/resources/“,</li><li>“classpath:/static/“, </li><li>“classpath:/public/“ </li></ul><p>在静态资源文件夹中有几个文件名是默认的。<br>index：欢迎页<br>favicon.ico：顶端图标文件<br>只要将相关的文件放入目录中，我们输入路径后即可访问。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      内嵌页面的做法
    
    </summary>
    
    
      <category term="技巧" scheme="https://lazytime.site/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="jar" scheme="https://lazytime.site/tags/jar/"/>
    
  </entry>
  
  <entry>
    <title>面试规划</title>
    <link href="https://lazytime.site/2020/10/20/note35/"/>
    <id>https://lazytime.site/2020/10/20/note35/</id>
    <published>2020-10-20T13:13:43.000Z</published>
    <updated>2020-10-29T15:05:33.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>待在一个小公司天天做CRUD，习惯了安逸，这不是什么好事，一出来找工作看到招聘要求感觉自己凉了半截。但是都知道面试是一个成本很高的事情，所以端正心态，重新开始。</p><p>总结起来就是一个字：<strong>真特么累</strong></p><p>不过有什么办法呢，我是对待所有的事情都抱持着学习的态度，所以把面试本身也作为技术来学了，不得不说，把个人简历写好的重要性，是直接决定你能不能找到工作的关键。</p><p>最后就是说一句，非常推荐在职找工作，没有顾虑，可以放下心来好好准备面试，没有硬实力千万不要裸辞。</p><a id="more"></a><h2 id="开局一张图："><a href="#开局一张图：" class="headerlink" title="开局一张图："></a>开局一张图：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMDEwMjAxOTQ5NTQucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201020194954.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201020194954.png<i class="fa fa-external-link"></i></span></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201020200217.png" alt=""></p><h1 id="修改自己的简历："><a href="#修改自己的简历：" class="headerlink" title="修改自己的简历："></a>修改自己的简历：</h1><h2 id="项目："><a href="#项目：" class="headerlink" title="项目："></a>项目：</h2><h3 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h3><p>简要的写清楚你的项目是干啥的，突出亮点和成就</p><h3 id="职责："><a href="#职责：" class="headerlink" title="职责："></a>职责：</h3><p>简要写，主要写一下你在当前岗位主要担任的事情。<strong>精简</strong></p><p>其实这部分是大部分人简历都这样写的，这样拉不开差距</p><h2 id="涉及技术："><a href="#涉及技术：" class="headerlink" title="涉及技术："></a>涉及技术：</h2><ol><li>突出你的技术亮点，以及用技术解决了什么难题。注意是解决了什么难题，别人不会关注你的业务</li><li>你是如何看待项目问题的，你是如何从解决问题当中学到东西的</li><li>突出技术难题以及解决办法，这样有利于让下家判断你是否可以接受新工作</li></ol><h3 id="项目收获："><a href="#项目收获：" class="headerlink" title="项目收获："></a>项目收获：</h3><ol><li>项目给你的成长有什么帮助</li><li>突出特点，以及他的成就</li><li>你是如何看待这个项目的？</li></ol><h2 id="个人评价："><a href="#个人评价：" class="headerlink" title="个人评价："></a>个人评价：</h2><p>可以随意写一写。自由发挥，当然不要发挥过头</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>面试心态真的很重要，特别是投的简历石沉大海，这时候你需要不断的反思简历应该怎么写，目前还在不断的找工作，希望自己能换份好工作把，肚子里没啥货，实在不行只能回炉重造了…..</p><p>另外说一下：上次百度编辑器换了之后，升级的<code>ewebeditor</code> 不能用差点没把我送走，后续发篇文章讲下处理，比源码更难理解的是加密过的源码，不知道能不能抗住。</p><h2 id="技术岗位的建议（摘抄）"><a href="#技术岗位的建议（摘抄）" class="headerlink" title="技术岗位的建议（摘抄）"></a>技术岗位的建议（摘抄）</h2><p>这些算是我作为过来⼈对于应届毕业⽣和刚⼯作不久的同学的⼀些⼩⼩建议吧。<br>（1）⼀定要紧跟技术前进的脚步，尤其是⼤数据相关的技术，在技术更迭的时候⼀定要学习熟悉新技<br>术，看源码，哪怕⾃⼰在⼯作中⽤不到也⼀定要学。因为这是你下⼀份⼯作的敲⻔砖。<br>我作为⼀个⽼兵，在上⼀家公司⼯作4年，公司没有spark和flink的业务场景，我也没有逼迫⾃⼰学习这<br>些新技术。<br>结果现在⾯试碰壁，其实⼤部分原因就是⼈家⽤的主流技术就是这些，你不会你就被淘汰。<br>（2）不要给⾃⼰设置舒适区，这个就是说，⼀个公司待久了不要懒惰，不能荒废⾃⼰，始终要保持清<br>醒的头脑和进取⼼，不断学习，不断完善⾃⼰的技术，架构设计能⼒，项⽬管理能⼒，交付能⼒等。<br>⼀定要及时从项⽬中总结经验和不⾜，最好落实到⽇记本中，最后通过不断思考，形成⾃⼰的做事⽅法<br>论。<br>（3）对⾃⼰的职业⽣涯要有⼀个规划，以后要做哪⼀块⼀定要有⾃⼰的想法，确定了就要从这个⽅向<br>完善⾃⼰，多学多练。<br>⽬前⼤数据这⼀块，有数据中台架构的公司不是很多，除了算法岗外，⼤多数⼈在团队中都是1专多能<br>的⻆⾊，今天⼲⼲ETL，明天搞数仓，后天⼜给BI出数据，可能⼜搞调度系统、报表系统、标签系统、<br>反作弊平台等平台。<br>没有⼈会专⼀做某⼀块，但是⾃⼰⼀定要想好哪⼀块是⾃⼰以后要⾛的⽅向，那么这⼀个⽅向确定了就<br>要深⼊的学习这⼀块的知识，多看源码，多做练习，如果接触到具体项⽬，要在项⽬中沉淀⾃⼰，最后<br>形成⾃⼰的知识体系。<br>（4）做事情要有担当，不要根据OKR给⾃⼰设置界限，有能⼒有空闲多做⼀定要多做，这也是别⼈认<br>可你的最佳途径之⼀。互联⽹圈⼦很⼩，⼤家认可你，以后去⼤⼚，换个好⼯作，也许就更容易。</p><h1 id="2020-10-15-面试"><a href="#2020-10-15-面试" class="headerlink" title="2020-10-15 面试"></a>2020-10-15 面试</h1><h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><ol><li>进去交一份简历</li><li>在办公室等待一分钟左右</li><li>面试官进入<ol><li>直接问自己做的第一个项目</li><li>项目主要是干什么的</li><li>解决了什么问题</li><li>在项目当中遇到了什么难题</li><li>自己有没有从其他的项目中找到解决方案</li><li>有没有其他同类型的产品</li><li>第二个项目，主要做什么</li><li>你为什么要从上一家离职？<ol><li>重复性劳动</li><li>想要一个更好的平台</li><li>学新技术（后悔说出口）</li><li>考虑你是否有稳定性</li></ol></li><li>说说自己公司的情况<ol><li>业务简单</li><li>基本以旧项目为主</li><li>没有什么新需求</li><li>要求稳定</li></ol></li><li>结果<ol><li>个人发展和公司发展不符</li><li>走人</li><li>回家</li></ol></li></ol></li></ol><h2 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h2><ol><li><p>小公司，30人左右。环境还不错，每个人工位还是有的</p></li><li><p>面试之前，调查清楚公司，了解一下公司需要什么人才，你再去回答，感觉自己太过紧张说错了很多话</p></li><li><p>20分钟基本可以从简历和问答判断你是否符合标准，如果20分钟结束对话，基本是PASS</p></li><li><p>学会欲擒故纵，不要立马说出自己的想法。我就是吃了亏，暴露想法被PASS</p></li><li><p>面试前脑子中模拟一下被问到各种问题的回答策略，比如一下几个问题</p><ol><li>为什么要从驴上下来</li><li>为什么要找我这匹马</li><li>什么时候到我这匹马上来</li></ol></li><li><p>没有面试经验，感觉自己说项目不是很熟练，还要多加练习</p></li><li><p>性格过于耿直，有时候要隐藏自己想法</p></li><li><p>没有技术的面试，以聊项目为主，应该定位为运维，要求不高，但是会一直询问细节，判断是否真的做过项目</p></li><li><p>明天还有一家面试，加油</p></li></ol><h1 id="2020-10-16-面试"><a href="#2020-10-16-面试" class="headerlink" title="2020-10-16 面试"></a>2020-10-16 面试</h1><h2 id="1-jvm加载一个类的过程？双亲委派模型是什么？"><a href="#1-jvm加载一个类的过程？双亲委派模型是什么？" class="headerlink" title="1. jvm加载一个类的过程？双亲委派模型是什么？"></a>1. jvm加载一个类的过程？双亲委派模型是什么？</h2><h2 id="2-eureka和zookeeper是什么？他们有什么区别？"><a href="#2-eureka和zookeeper是什么？他们有什么区别？" class="headerlink" title="2. eureka和zookeeper是什么？他们有什么区别？"></a>2. eureka和zookeeper是什么？他们有什么区别？</h2><h2 id="3-虚拟机的几个区？分别有什么作用？"><a href="#3-虚拟机的几个区？分别有什么作用？" class="headerlink" title="3. 虚拟机的几个区？分别有什么作用？"></a>3. 虚拟机的几个区？分别有什么作用？</h2><h2 id="4-什么是锁？都有哪些锁？他们的作用？"><a href="#4-什么是锁？都有哪些锁？他们的作用？" class="headerlink" title="4. 什么是锁？都有哪些锁？他们的作用？"></a>4. 什么是锁？都有哪些锁？他们的作用？</h2><h2 id="5-NIO-BIO-AIO的区别"><a href="#5-NIO-BIO-AIO的区别" class="headerlink" title="5. NIO/BIO/AIO的区别"></a>5. NIO/BIO/AIO的区别</h2><h2 id="6-死锁是什么？什么时候会发生死锁？"><a href="#6-死锁是什么？什么时候会发生死锁？" class="headerlink" title="6. 死锁是什么？什么时候会发生死锁？"></a>6. 死锁是什么？什么时候会发生死锁？</h2><h2 id="7-update查询的问题（sql题目）？"><a href="#7-update查询的问题（sql题目）？" class="headerlink" title="7. update查询的问题（sql题目）？"></a>7. update查询的问题（sql题目）？</h2><h2 id="8-hashMap和HashTable的区别？"><a href="#8-hashMap和HashTable的区别？" class="headerlink" title="8. hashMap和HashTable的区别？"></a>8. hashMap和HashTable的区别？</h2><h2 id="9-TreeMap是如何实现的？他有什么特点"><a href="#9-TreeMap是如何实现的？他有什么特点" class="headerlink" title="9. TreeMap是如何实现的？他有什么特点"></a>9. TreeMap是如何实现的？他有什么特点</h2><h2 id="10-线程有几个状态？如何实现线程？"><a href="#10-线程有几个状态？如何实现线程？" class="headerlink" title="10. 线程有几个状态？如何实现线程？"></a>10. 线程有几个状态？如何实现线程？</h2><h2 id="11-String-a-“str”-和-String-a-new-String-“aa”-有什么区别？能否解释一下？"><a href="#11-String-a-“str”-和-String-a-new-String-“aa”-有什么区别？能否解释一下？" class="headerlink" title="11. String a = “str” 和 String a = new String(“aa”) 有什么区别？能否解释一下？"></a>11. String a = “str” 和 String a = new String(“aa”) 有什么区别？能否解释一下？</h2><h2 id="12-mysql在什么时候会索引失效，常见的sql优化方式？"><a href="#12-mysql在什么时候会索引失效，常见的sql优化方式？" class="headerlink" title="12. mysql在什么时候会索引失效，常见的sql优化方式？"></a>12. mysql在什么时候会索引失效，常见的sql优化方式？</h2><h2 id="13-常用的设计模式有几种？列举一下？"><a href="#13-常用的设计模式有几种？列举一下？" class="headerlink" title="13. 常用的设计模式有几种？列举一下？"></a>13. 常用的设计模式有几种？列举一下？</h2><h2 id="14-mysql的存储原理是什么？为什么使用B-Tree-作为底层？"><a href="#14-mysql的存储原理是什么？为什么使用B-Tree-作为底层？" class="headerlink" title="14. mysql的存储原理是什么？为什么使用B+Tree 作为底层？"></a>14. mysql的存储原理是什么？为什么使用B+Tree 作为底层？</h2><h2 id="15-mysql事务的等级，以及他是如何支持事务的"><a href="#15-mysql事务的等级，以及他是如何支持事务的" class="headerlink" title="15. mysql事务的等级，以及他是如何支持事务的"></a>15. mysql事务的等级，以及他是如何支持事务的</h2><h2 id="其他问题："><a href="#其他问题：" class="headerlink" title="其他问题："></a>其他问题：</h2><ol><li>设计一个秒杀系统，多线程抢占下单，当数量为1的时候，如何防止 变为 -1</li><li>jar 包如何切换环境，切换配置运行，如何敲命令？</li><li>“ABCDE”如何转为<code>List&lt;String&gt;</code>集合？</li><li>什么是正排索引，什么是倒序索引？什么是倒排索引</li><li>如果给”ABCDE”转成的集合，计算出现个数，有几种方法?</li><li>布隆过滤器用过吗，他有什么特点？</li><li>如果一个文件大小是100M，现在服务器限制只能传30M上限的文件，你要怎么做？</li><li>stream 常用的方法，你都用过哪些</li><li>一个<code>mapping</code> 在springMVC里面的流程</li><li>mybatis 里面常用的一些xml标签</li><li>mq：简历没写，没问</li><li>redis：简历没写，没问</li><li>用过分布式系统么？多线程的理解</li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      所以打铁还是需要自身硬啊
    
    </summary>
    
    
      <category term="面试" scheme="https://lazytime.site/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="简历" scheme="https://lazytime.site/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>我还是输给了免费富文本编辑器</title>
    <link href="https://lazytime.site/2020/10/13/note34/"/>
    <id>https://lazytime.site/2020/10/13/note34/</id>
    <published>2020-10-13T15:38:28.000Z</published>
    <updated>2020-10-29T15:05:24.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前因后果"><a href="#前因后果" class="headerlink" title="前因后果"></a>前因后果</h1><h2 id="说说我做的一些努力"><a href="#说说我做的一些努力" class="headerlink" title="说说我做的一些努力"></a>说说我做的一些努力</h2><ol><li>考虑给百度编辑器开发的一个二次插件，等下会进行说明如何使用改源码的方式开发二次插件</li><li>后端增加接口，接受word文档，转为html返回前台，前台再根据html内容对于富文本编辑框继续赋值和一些处理</li></ol><a id="more"></a><p>然而，理想很美好，现实很骨感：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013130729.png?ynotemdtimestamp=1602599291444" alt="img"></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013130809.png?ynotemdtimestamp=1602599291444" alt="img"></p><ol><li>无法达到100%还原，word里面转译html会存在各种问题</li><li>有存在无法解析和翻译的部分</li><li>客户不会买账！（<strong>核心原因</strong>）</li></ol><h2 id="如何解决word转译到富文本编辑的问题"><a href="#如何解决word转译到富文本编辑的问题" class="headerlink" title="如何解决word转译到富文本编辑的问题"></a>如何解决word转译到富文本编辑的问题</h2><p>这两天搜索了几乎所有的富文本编辑器（国内用的比较多的）似乎都没有解决这个问题。</p><p><strong>然后几乎所有的带word导入粘贴的，几乎都是商业收费软件（还很贵）</strong></p><p>无奈之下，BOSS决定掏钱升级<code>ewebeditor</code>并且怪为什么没有提早说百度编辑器实现不了。（经理&amp;我：？？？）</p><p>所以最后结果就是：<strong>我瞎忙活了几天</strong>（内心一万个草泥马）。</p><p>既然知道了结果为什么还要写这篇文章，我其实很不甘心，一个方案被否决，我决定记录一下这个也许可行的数据方案。</p><h2 id="JAVA-amp-百度编辑器实现word粘贴（非完美）"><a href="#JAVA-amp-百度编辑器实现word粘贴（非完美）" class="headerlink" title="JAVA&amp;百度编辑器实现word粘贴（非完美）"></a>JAVA&amp;百度编辑器实现word粘贴（非完美）</h2><p>不扯那么多，直接上菜：</p><h3 id="1-前端为百度编辑器自定义一个上传word的功能"><a href="#1-前端为百度编辑器自定义一个上传word的功能" class="headerlink" title="1. 前端为百度编辑器自定义一个上传word的功能"></a>1. 前端为百度编辑器自定义一个上传word的功能</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013132152.png?ynotemdtimestamp=1602599291444" alt="img"></p><ol><li>搜索一下：<code>UE.commands[&quot;setbordervisible&quot;] = {</code></li></ol><p>在它的下面加入如下的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">UE.commands[&quot;getword&quot;] &#x3D; &#123;</span><br><span class="line">    execCommand: function (Name) &#123;</span><br><span class="line">        if (window.FileReader) &#123;   </span><br><span class="line">            var inputObj&#x3D;document.createElement(&#39;input&#39;)</span><br><span class="line">            inputObj.setAttribute(&#39;id&#39;,&#39;my_inputObj&#39;);</span><br><span class="line">            inputObj.setAttribute(&#39;type&#39;,&#39;file&#39;);</span><br><span class="line">            &#x2F;&#x2F;              inputObj.setAttribute(&#39;accept&#39;,&#39;application&#x2F;msword&#39;);</span><br><span class="line">            inputObj.setAttribute(&quot;style&quot;,&#39;visibility:hidden&#39;);</span><br><span class="line">            document.body.appendChild(inputObj);</span><br><span class="line"></span><br><span class="line">            inputObj.onchange &#x3D; function()&#123;</span><br><span class="line">                &#x2F;&#x2F;拿取上传的文档</span><br><span class="line">                var fileData &#x3D; inputObj.files[0]</span><br><span class="line"></span><br><span class="line">                if(fileData.type.indexOf(&#39;word&#39;)&gt;-1)&#123;</span><br><span class="line">                    if(fileData.size&gt;1048576)&#123;  &#x2F;&#x2F;控制在1M以内</span><br><span class="line">                        alert(&#39;您上传的文件大于1MB,请上传1MB以内的word文件&#39;)</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;  </span><br><span class="line">                    console.log(fileData)</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(&#39;请选择一个word文件&#39;)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            inputObj.click();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><p>增加一个命令叫做：<code>getword</code></p></li><li><p>模拟一个<code>input file</code>，并且模拟一次点击文件上传</p></li><li><p>如果上传了具体文件，触发<code>onchange</code>，并且进行word的各种判断</p></li><li><p>然后将文件的内容传到后台的接口（具体怎么做根据自己的语言来处理）</p></li><li><p>加入自定义的命令：<code>getword</code></p></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013132817.png?ynotemdtimestamp=1602599291444" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;为工具栏添加按钮，以下都是统一的按钮触发命令，所以写在一起</span><br><span class="line">    var btnCmds &#x3D; [&#39;undo&#39;, &#39;redo&#39;, &#39;formatmatch&#39;,</span><br><span class="line">        &#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;fontborder&#39;, &#39;touppercase&#39;, &#39;tolowercase&#39;,</span><br><span class="line">        &#39;strikethrough&#39;, &#39;subscript&#39;, &#39;superscript&#39;, &#39;source&#39;, &#39;indent&#39;, &#39;outdent&#39;,</span><br><span class="line">        &#39;blockquote&#39;, &#39;pasteplain&#39;, &#39;pagebreak&#39;,</span><br><span class="line">        &#39;selectall&#39;, &#39;print&#39;,&#39;horizontal&#39;, &#39;removeformat&#39;, &#39;time&#39;, &#39;date&#39;, &#39;unlink&#39;,</span><br><span class="line">        &#39;insertparagraphbeforetable&#39;, &#39;insertrow&#39;, &#39;insertcol&#39;, &#39;mergeright&#39;, &#39;mergedown&#39;, &#39;deleterow&#39;,</span><br><span class="line">        &#39;deletecol&#39;, &#39;splittorows&#39;, &#39;splittocols&#39;, &#39;splittocells&#39;, &#39;mergecells&#39;, &#39;deletetable&#39;, &#39;drafts&#39;,&#39;getword&#39;];</span><br></pre></td></tr></table></figure><p>注意到最后一个<code>getword</code>了么，这就是刚刚加进去的</p><ol><li>在<code>Lang/zh-cn/zh-cn.js</code>文件当中，增加按钮说明，直接照着截图加就行</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013133049.png?ynotemdtimestamp=1602599291444" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">,&#39;getword&#39;:&#39;获取word&#39;</span><br></pre></td></tr></table></figure><p>为了防止图裂，还是写一下，搜一下``scrawl：’涂鸦’`，基本可以找到大概的位置</p><ol><li>修改<code>ueditor.config.js</code>文件，增加新的按钮</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013133410.png?ynotemdtimestamp=1602599291444" alt="img"></p><p>在<code>help</code>的后面加一个<code>getword</code>就好了，注意以下json格式，<strong>逗号</strong>不能少</p><ol><li>增加样式，修改<code>Themes/default/ueditor.css</code>，直接在最底下增加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.edui-default .edui-toolbar .edui-for-getword .edui-icon &#123;</span><br><span class="line">    background-image: url(..&#x2F;images&#x2F;wordT1.png);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    width: 20px !important;</span><br><span class="line">    background-size: 18px;</span><br><span class="line">    background-position: center;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Tip：wordT1.png 是一个word的小图标，这里就<strong>不提供了</strong></p><p>才怪：Themes/default/images/wordT1.png</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/wordT1.png?ynotemdtimestamp=1602599291444" alt="word图标下载"></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvd29yZFQxLnBuZw==" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/wordT1.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/wordT1.png<i class="fa fa-external-link"></i></span></p></blockquote><p>上面这一套做完之后，基本上在百度编辑器里面会多出一个图标，接下来需要后端开发接口，对接这个插件的行为和操作</p><h3 id="2-后端为word文件做转化为html的操作，然后将html原文返回给前端"><a href="#2-后端为word文件做转化为html的操作，然后将html原文返回给前端" class="headerlink" title="2. 后端为word文件做转化为html的操作，然后将html原文返回给前端"></a>2. 后端为word文件做转化为html的操作，然后将html原文返回给前端</h3><p>做这个接口要特别的小心，需要防止接口被滥用，拖垮服务器资源，因为转化和图片存储的代价还是不小的，需要控制可以转化的大小</p><p>前文也说了，老板都出钱升级了，我还玩你个鬼的百度编辑器，溜了溜了，用<code>ewebeidor</code>，下面是网上搜下来的一个word转html的工具方法，需要<code>apach-poi</code>的支持，我用的是<code>3.12</code>版本，具体的内容看自己。</p><blockquote><p>注意以下：docx 和 doc 在poi里面是需要用不同的对象进行操作的，后续自己也会补一补这一块的内容</p><p>poi 还是挺强的，很牛逼，把巨硬的那一套治的服服帖帖</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.apache.poi.hwpf.HWPFDocument;</span><br><span class="line">import org.apache.poi.hwpf.converter.PicturesManager;</span><br><span class="line">import org.apache.poi.hwpf.converter.WordToHtmlConverter;</span><br><span class="line">import org.apache.poi.hwpf.extractor.WordExtractor;</span><br><span class="line">import org.apache.poi.hwpf.model.PAPX;</span><br><span class="line">import org.apache.poi.hwpf.usermodel.Picture;</span><br><span class="line">import org.apache.poi.hwpf.usermodel.PictureType;</span><br><span class="line">import org.apache.poi.xwpf.usermodel.XWPFDocument;</span><br><span class="line">import org.apache.poi.xwpf.usermodel.XWPFNumbering;</span><br><span class="line">import org.apache.poi.xwpf.usermodel.XWPFParagraph;</span><br><span class="line">import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTNumbering;</span><br><span class="line">import org.w3c.dom.Document;</span><br><span class="line"></span><br><span class="line">import javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line">import javax.xml.transform.OutputKeys;</span><br><span class="line">import javax.xml.transform.Transformer;</span><br><span class="line">import javax.xml.transform.TransformerFactory;</span><br><span class="line">import javax.xml.transform.dom.DOMSource;</span><br><span class="line">import javax.xml.transform.stream.StreamResult;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据poi写的word帮助类</span><br><span class="line"> * @Date 2020&#x2F;10&#x2F;12 18:26</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class WordHelper &#123;</span><br><span class="line"></span><br><span class="line">    public static void parseDocx2Html() throws Throwable &#123;</span><br><span class="line">        final String path &#x3D; &quot;D:\\zxd\\mark\\罗湖兼容性\\20201012word导出必备\\&quot;;</span><br><span class="line">        final String file &#x3D; &quot;4403080004_深圳盐田政府在线_20200927_11064.doc&quot;;</span><br><span class="line">        InputStream input &#x3D; new FileInputStream(path + file);</span><br><span class="line">        String suffix &#x3D; file.substring(file.indexOf(&quot;.&quot;)+1);&#x2F;&#x2F; &#x2F;&#x2F;截取文件格式名</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;实例化WordToHtmlConverter，为图片等资源文件做准备</span><br><span class="line">        WordToHtmlConverter wordToHtmlConverter &#x3D; new WordToHtmlConverter(</span><br><span class="line">                DocumentBuilderFactory.newInstance().newDocumentBuilder()</span><br><span class="line">                        .newDocument());</span><br><span class="line">        wordToHtmlConverter.setPicturesManager(new PicturesManager() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String savePicture(byte[] content, PictureType pictureType,</span><br><span class="line">                                      String suggestedName, float widthInches, float heightInches) &#123;</span><br><span class="line">                return suggestedName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        if (&quot;doc&quot;.equals(suffix.toLowerCase())) &#123;</span><br><span class="line">            &#x2F;&#x2F; docx</span><br><span class="line">            HWPFDocument wordDocument &#x3D; new HWPFDocument(input);</span><br><span class="line">            wordToHtmlConverter.processDocument(wordDocument);</span><br><span class="line">            &#x2F;&#x2F;处理图片，会在同目录下生成 image&#x2F;media&#x2F; 路径并保存图片</span><br><span class="line">            List pics &#x3D; wordDocument.getPicturesTable().getAllPictures();</span><br><span class="line">            if (pics !&#x3D; null) &#123;</span><br><span class="line">                for (int i &#x3D; 0; i &lt; pics.size(); i++) &#123;</span><br><span class="line">                    Picture pic &#x3D; (Picture) pics.get(i);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        pic.writeImageContent(new FileOutputStream(path</span><br><span class="line">                                + pic.suggestFullFileName()));</span><br><span class="line">                    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 转换</span><br><span class="line">        Document htmlDocument &#x3D; wordToHtmlConverter.getDocument();</span><br><span class="line">        ByteArrayOutputStream outStream &#x3D; new ByteArrayOutputStream();</span><br><span class="line">        DOMSource domSource &#x3D; new DOMSource(htmlDocument);</span><br><span class="line">        StreamResult streamResult &#x3D; new StreamResult(outStream);</span><br><span class="line">        TransformerFactory tf &#x3D; TransformerFactory.newInstance();</span><br><span class="line">        Transformer serializer &#x3D; tf.newTransformer();</span><br><span class="line">        serializer.setOutputProperty(OutputKeys.ENCODING, &quot;utf-8&quot;);&#x2F;&#x2F;编码格式</span><br><span class="line">        serializer.setOutputProperty(OutputKeys.INDENT, &quot;yes&quot;);&#x2F;&#x2F;是否用空白分割</span><br><span class="line">        serializer.setOutputProperty(OutputKeys.METHOD, &quot;html&quot;);&#x2F;&#x2F;输出类型</span><br><span class="line">        serializer.transform(domSource, streamResult);</span><br><span class="line">        outStream.close();</span><br><span class="line">        String content &#x3D; new String(outStream.toByteArray());</span><br><span class="line">        System.err.println(content);</span><br><span class="line">        FileUtils.writeStringToFile(new File(path, &quot;interface.html&quot;), content,</span><br><span class="line">                &quot;utf-8&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Throwable &#123;</span><br><span class="line">        WordHelper.parseDocx2Html();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>滚回去继续升级<code>ewebeditor</code>了，擦公司的前辈居然有人做了一个一键排版和文章重排，直接动了源代码，<strong>有时间研究一下</strong>，果然老系统出神仙。</p><blockquote><p>PS：老系统代码里面老板的名字在上面，老板是大公司程序员出身，挺好。</p></blockquote><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>永远不要小看任何细节的点，看似平平无奇的功能，其实真正考虑要实现的时候。</p><p>一个简单的复制粘贴其实也并不简单。word的复制和原样粘贴要实现其实不太容易。</p><p>那么这种word转译的exe插件，他们是怎么做到的，我现在产生了无限的思考……</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      最后还是换了编辑器，也算是一种解脱
    
    </summary>
    
    
      <category term="百度编辑器" scheme="https://lazytime.site/categories/%E7%99%BE%E5%BA%A6%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="前端" scheme="https://lazytime.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>终于把百度编辑器的一个坑填了</title>
    <link href="https://lazytime.site/2020/10/13/note33/"/>
    <id>https://lazytime.site/2020/10/13/note33/</id>
    <published>2020-10-13T15:04:48.000Z</published>
    <updated>2020-10-29T15:05:17.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>上文说道，我被百度编辑器上了套，今天，说下我的个人进展，因为我把截图粘贴的功能兼容到IE了，算是给自己的鼓励。</p><a id="more"></a><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>其实还挺简单的，内容如下：</p><p>在<code>ueditor.all.js</code>当中，输入<code>domUtils.on(me.body, &#39;paste drop&#39;, function(e){</code>可以看到类似粘贴板处理的代码</p><p>我对里面的内容进行了如下的处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">if(isIE())&#123;</span><br><span class="line">    var text &#x3D; window.clipboardData.getData(&#39;Text&#39;);</span><br><span class="line">    if(text &#x3D;&#x3D; null)&#123;</span><br><span class="line">        var items&#x3D;clipboardData.files;</span><br><span class="line">        for (var i &#x3D; 0, len &#x3D; items.length; i &lt; len; i++) &#123;</span><br><span class="line">            var item &#x3D; items[i];</span><br><span class="line">            if ( item.type.indexOf(&#39;image&#x2F;&#39;) !&#x3D;&#x3D; -1 ) &#123;</span><br><span class="line">                &#x2F;&#x2F;上传到服务器</span><br><span class="line">                sendAndInsertFile(item,me); </span><br><span class="line">                &#x2F;&#x2F;阻止默认事件, 避免重复添加;</span><br><span class="line">                e.preventDefault();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    var hasImg &#x3D; false,</span><br><span class="line">        items;</span><br><span class="line">    &#x2F;&#x2F;获取粘贴板文件列表或者拖放文件列表</span><br><span class="line">    items &#x3D; e.type &#x3D;&#x3D; &#39;paste&#39; ? getPasteImage(e):getDropImage(e);</span><br><span class="line">    if(items)&#123;</span><br><span class="line">        var len &#x3D; items.length,</span><br><span class="line">            file;</span><br><span class="line">        while (len--)&#123;</span><br><span class="line">            file &#x3D; items[len];</span><br><span class="line">            if(file.getAsFile) file &#x3D; file.getAsFile();</span><br><span class="line">            if(file &amp;&amp; file.size &gt; 0) &#123;</span><br><span class="line">                sendAndInsertFile(file, me);</span><br><span class="line">                hasImg &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        hasImg &amp;&amp; e.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>判断是否为IE，是IE特殊处理</li><li>使用IE特定的获取粘贴板的内容</li><li>获取到文件内容，调用百度编辑器的上传方法，将粘贴板的内容上传到服务器。</li></ol><h2 id="关于word粘贴内容到富文本编辑框"><a href="#关于word粘贴内容到富文本编辑框" class="headerlink" title="关于word粘贴内容到富文本编辑框"></a>关于word粘贴内容到富文本编辑框</h2><p>今天大部分时间都在纠结这玩意，后续考虑自己二次开发插件做二次处理，明天果断和前端配合试下效果。</p><p>今天还是了解到不少内容的：</p><ol><li>了解了一下Base64 的内容</li><li>js如何处理 copy 、paste 时间，以及通过事件监听处理<code>copy</code>、<code>paste</code></li><li>IE和谷歌的对于剪贴板内容的不同处理方式</li><li>了解了一下插件的二次开发</li></ol><h1 id="如何给百度编辑器进行插件的二次开发"><a href="#如何给百度编辑器进行插件的二次开发" class="headerlink" title="如何给百度编辑器进行插件的二次开发"></a>如何给百度编辑器进行插件的二次开发</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dpaWNtcy9hcnRpY2xlL2RldGFpbHMvNDY0MTI1ODU=" title="https://blog.csdn.net/wiicms/article/details/46412585">https://blog.csdn.net/wiicms/article/details/46412585<i class="fa fa-external-link"></i></span> 百度ueditor编辑器插件开发之对话框-移动微模板插件</p><p>直接复制里面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; TODO 为百度编辑器开发一个新插件</span><br><span class="line">    UE.registerUI(&#39;dialog&#39;,function(editor,uiName)&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建dialog</span><br><span class="line">    var dialog &#x3D; new UE.ui.Dialog(&#123;</span><br><span class="line">        &#x2F;&#x2F;指定弹出层中页面的路径，这里只能支持页面,因为跟addCustomizeDialog.js相同目录，所以无需加路径</span><br><span class="line">        iframeUrl:editor.ui.UEDITOR_HOME_URL+&quot;p&#x2F;uet.html&quot;,</span><br><span class="line">        &#x2F;&#x2F;需要指定当前的编辑器实例</span><br><span class="line">        editor:ue,</span><br><span class="line">        &#x2F;&#x2F;指定dialog的名字</span><br><span class="line">        name:uiName,</span><br><span class="line">        &#x2F;&#x2F;dialog的标题</span><br><span class="line">        title:&quot;微信模板&quot;,</span><br><span class="line">        &#x2F;&#x2F;指定dialog的外围样式</span><br><span class="line">        cssRules:&quot;width:540px;height:400px;&quot;,</span><br><span class="line">        &#x2F;&#x2F;如果给出了buttons就代表dialog有确定和取消</span><br><span class="line">        buttons:[</span><br><span class="line">            &#123;</span><br><span class="line">                className:&#39;edui-okbutton&#39;,</span><br><span class="line">                label:&#39;确定&#39;,</span><br><span class="line">                onclick:function () &#123;</span><br><span class="line">                    dialog.close(true);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                className:&#39;edui-cancelbutton&#39;,</span><br><span class="line">                label:&#39;取消&#39;,</span><br><span class="line">                onclick:function () &#123;</span><br><span class="line">                    dialog.close(false);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]&#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;参考addCustomizeButton.js</span><br><span class="line">        var btn &#x3D; new UE.ui.Button(&#123;</span><br><span class="line">            name:&#39;dialogbutton&#39; + uiName,</span><br><span class="line">            title:&#39;dialogbutton&#39; + uiName,</span><br><span class="line">            &#x2F;&#x2F;需要添加的额外样式，指定icon图标，这里默认使用一个重复的icon</span><br><span class="line">            cssRules :&#39;background-position: -500px 0;&#39;,</span><br><span class="line">            onclick:function () &#123;</span><br><span class="line">                &#x2F;&#x2F;渲染dialog</span><br><span class="line">                dialog.render();</span><br><span class="line">                dialog.open();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return btn;</span><br><span class="line">    &#125;&#x2F;*index 指定添加到工具栏上的那个位置，默认时追加到最后,editorId 指定这个UI是那个编辑器实例上的，默认是页面上所有的编辑器都会添加这个按钮*&#x2F;);</span><br><span class="line">    &#x2F;&#x2F;TODO 为百度编辑器开发一个新插件</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cDovL2ZleC5iYWlkdS5jb20vdWVkaXRvci8jZGV2LWRldmVsb3Blcg==" title="http://fex.baidu.com/ueditor/#dev-developer">http://fex.baidu.com/ueditor/#dev-developer<i class="fa fa-external-link"></i></span> 官方文档解答如何开发二次插件</p><h1 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h1><p>工作之余随手写下，前端知识UP，回家继续学习去咯。</p><p>来，我们随手从QQ复制一个别人发的图片，贴到百度编辑器，好，内网地址又暴露了（卒）。。。。。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20201012203818.png?ynotemdtimestamp=1602599291444" alt="img"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>使用开源插件读取word内容：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VpY2VibHVlL2FydGljbGUvZGV0YWlscy84OTUxOTI5Nw==" title="https://blog.csdn.net/eiceblue/article/details/89519297">https://blog.csdn.net/eiceblue/article/details/89519297<i class="fa fa-external-link"></i></span></p><p>java 使用POI操作word获取样式：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTI5ODExL2FydGljbGUvZGV0YWlscy8xMDI1NzA3MjY=" title="https://blog.csdn.net/qq_41129811/article/details/102570726">https://blog.csdn.net/qq_41129811/article/details/102570726<i class="fa fa-external-link"></i></span></p><blockquote><p>可以学习一下poi 是如何获取到样式和内容的</p></blockquote><p>js中使用Clipboard API获取剪贴板内容：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FpcWlhbi9hcnRpY2xlL2RldGFpbHMvMTAwOTI5MTQzP3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19hZ2dwYWdlX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMmFsbGZpcnN0X3JhbmtfdjJ+cmFua192MjUtMS0xMDA5MjkxNDMubm9uZWNhc2UmYW1wO3V0bV90ZXJtPWll" title="https://blog.csdn.net/haoaiqian/article/details/100929143?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2allfirst_rank_v2~rank_v25-1-100929143.nonecase&amp;utm_term=ie">https://blog.csdn.net/haoaiqian/article/details/100929143?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2allfirst_rank_v2~rank_v25-1-100929143.nonecase&amp;utm_term=ie<i class="fa fa-external-link"></i></span></p><p>获取剪贴板数据：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0ZXllXzQ4NjUvYXJ0aWNsZS9kZXRhaWxzLzgyMjAwOTg2" title="https://blog.csdn.net/iteye_4865/article/details/82200986">https://blog.csdn.net/iteye_4865/article/details/82200986<i class="fa fa-external-link"></i></span></p><p>js 文本框监听粘贴事件，获取粘贴板上的图片数据：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1eWFuZ2JpbjAxL2FydGljbGUvZGV0YWlscy82OTUyNTc3Ng==" title="https://blog.csdn.net/luyangbin01/article/details/69525776">https://blog.csdn.net/luyangbin01/article/details/69525776<i class="fa fa-external-link"></i></span></p><p>js处理剪贴板的内容：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxNDExMzg5L2FydGljbGUvZGV0YWlscy81MzAwNzY3NT91dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfYWdncGFnZV9zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJhbGxmaXJzdF9yYW5rX3YyfnJhbmtfdjI1LTMtNTMwMDc2NzUubm9uZWNhc2UmYW1wO3V0bV90ZXJtPWll" title="https://blog.csdn.net/qq_31411389/article/details/53007675?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2allfirst_rank_v2~rank_v25-3-53007675.nonecase&amp;utm_term=ie">https://blog.csdn.net/qq_31411389/article/details/53007675?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2allfirst_rank_v2~rank_v25-3-53007675.nonecase&amp;utm_term=ie<i class="fa fa-external-link"></i></span></p><p>富文本编辑器实现从word中复制图片(外挂)：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaGVsbG9qYXZhLmNvbS9hLzkyMzU2Lmh0bWw=" title="https://www.hellojava.com/a/92356.html">https://www.hellojava.com/a/92356.html<i class="fa fa-external-link"></i></span></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      我修复了百度编辑器上的一个BUG
    
    </summary>
    
    
      <category term="前端" scheme="https://lazytime.site/categories/frontend/"/>
    
    
      <category term="百度编辑器" scheme="https://lazytime.site/tags/%E7%99%BE%E5%BA%A6%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>一篇帖子解决window.open中使用jquery操作父元素的问题</title>
    <link href="https://lazytime.site/2020/10/11/note31/"/>
    <id>https://lazytime.site/2020/10/11/note31/</id>
    <published>2020-10-11T06:30:52.000Z</published>
    <updated>2020-10-29T15:05:03.567Z</updated>
    
    <content type="html"><![CDATA[<p>首先看下例子：<br><span class="exturl" data-url="aHR0cDovL3d3dy5jc3NyYWluLmNuL2RlbW8vMS9XaW5kb3ctb3Blbi1TaG93L2luZGV4Lmh0bWw=" title="http://www.cssrain.cn/demo/1/Window-open-Show/index.html">http://www.cssrain.cn/demo/1/Window-open-Show/index.html<i class="fa fa-external-link"></i></span></p><p>这是最近在项目中用到的，后来还在父窗口，增加了删除，然后前面的序号重新排列。</p><p>其实都还是比较简单。</p><p>具体遇到了哪些问题呢，总结下：</p><p>1，因为父窗口中引入了jquery包了，所以子窗口不需要引入了（注：在我这个例子中）。</p><p>2，window.opener.$(“#showtable tr”) 后面直接写 jquery的选择 器。</p><p>3，删除排序也很简单，就是删除一个后，重新获取所有tr，然后在each循环设置一下index</p><p>本篇文章来源于 cssrain.cn 原文链接：<span class="exturl" data-url="aHR0cDovL3d3dy5jc3NyYWluLmNuL2FydGljbGUuYXNwP2lkPTg2OQ==" title="http://www.cssrain.cn/article.asp?id=869">http://www.cssrain.cn/article.asp?id=869<i class="fa fa-external-link"></i></span></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      一篇帖子解决window.open中使用jquery操作父元素的问题
    
    </summary>
    
    
      <category term="未分类" scheme="https://lazytime.site/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="前端" scheme="https://lazytime.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>百度编辑器的那些坑</title>
    <link href="https://lazytime.site/2020/10/11/note32/"/>
    <id>https://lazytime.site/2020/10/11/note32/</id>
    <published>2020-10-11T06:28:18.000Z</published>
    <updated>2020-10-29T15:05:11.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="百度编辑器的那些坑："><a href="#百度编辑器的那些坑：" class="headerlink" title="百度编辑器的那些坑："></a>百度编辑器的那些坑：</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>最近在处理公司的旧后台浏览器兼容问题，要求更换<code>ewebeditor</code> 编辑器，更换为ueditor 编辑器，并且要求 IE9/IE8/IE10/IE11/Micro Edge/Google/360 编辑器各项兼容，听说百度的编辑器兼容至IE6，以为简单的换个编辑器的我，在上面折腾了不少时间，本文针对具体问题进行处理，可能读者遇不到我这样的问题，事前说明：<strong>仅供参考</strong>、<strong>仅供参考</strong>、<strong>仅供参考</strong></p><a id="more"></a><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><ol><li>百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患  - IE问题</li><li>百度编辑器<code>Ctril + v</code>粘贴图片功能在IE上面不触发任何效果的问题</li><li>特殊符号传输后台的转义问题，以及将数据库的html读取之后，由于双引号导致的截取页面报错问题</li><li>针对 <code>iframe</code>这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式</li></ol><h2 id="百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患-IE问题"><a href="#百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患-IE问题" class="headerlink" title="百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患  - IE问题"></a>百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患  - IE问题</h2><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>使用粘贴图片就会出现如下的问题，在查看源代码的时候，出现了如图所示的暴露源代码的问题，出现问题原因不明:</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011120300.png" alt=""></p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><ol><li>非常简单，只需要关闭<code>查看源代码</code>的按钮就行，完美解决</li><li>如果一定要保留，在不知道如何处理的情况下，并且急需交差的时候，可以这么干（当时情况是第二天就得交差，由于一直找不到问题点，加班到晚上10想出来的办法）</li></ol><h3 id="障眼法："><a href="#障眼法：" class="headerlink" title="障眼法："></a>障眼法：</h3><p>先直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击源代码按钮对于编辑器的内容进行敏感href信息处理 2019.9.24</span></span><br><span class="line">   $(<span class="string">'body'</span>).delegate(<span class="string">".edui-button-wrap"</span>,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> editTxt = $(<span class="string">'.edui-editor-iframeholder'</span>).find(<span class="string">'textarea'</span>)</span><br><span class="line">       <span class="keyword">if</span>(editTxt.length)&#123;</span><br><span class="line">           <span class="keyword">var</span> content = UE.getEditor(<span class="string">'ueditor'</span>).getContent();</span><br><span class="line">           <span class="keyword">var</span> aE = $(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>);</span><br><span class="line">           aE.html(content)</span><br><span class="line">           <span class="comment">// alert(aE)</span></span><br><span class="line">           aE.find(<span class="string">'p.filedata'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">var</span> newA = $(<span class="keyword">this</span>).find(<span class="string">'a'</span>)</span><br><span class="line">               <span class="comment">// alert(newA.attr('href'))</span></span><br><span class="line">               <span class="keyword">if</span>(newA.attr(<span class="string">'href'</span>).indexOf(<span class="string">"http://"</span>)&gt;=<span class="number">0</span> || newA.attr(<span class="string">'href'</span>).indexOf(<span class="string">"https://"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                   <span class="keyword">var</span> arr = newA.attr(<span class="string">'href'</span>).split(<span class="string">'/'</span>)</span><br><span class="line">                   <span class="keyword">var</span> newTxt = <span class="string">''</span></span><br><span class="line">                   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">3</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">                       newTxt +=<span class="string">'/'</span>+arr[i]</span><br><span class="line">                   &#125;</span><br><span class="line">                   newA.attr(<span class="string">'href'</span>,newTxt)</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="comment">// alert(content);</span></span><br><span class="line">           <span class="comment">// 获取转义之后的字符</span></span><br><span class="line">           <span class="keyword">var</span> formatTxt = toTxt(aE.html());</span><br><span class="line">           <span class="comment">// formatTxt = appendBrToPAlfter(formatTxt);</span></span><br><span class="line">           editTxt.html(formatTxt);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*正则表达式 替换括号,尖括号等*/</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">toTxt</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> RexStr = <span class="regexp">/\&lt;|\&gt;|\"|\'|\&amp;/g</span></span><br><span class="line">       str = str.replace(RexStr, <span class="function"><span class="keyword">function</span>(<span class="params">MatchStr</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">switch</span> (MatchStr) &#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"&lt;"</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;lt;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"&gt;"</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;gt;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"\""</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;quot;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"'"</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;#39;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"&amp;"</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;amp;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol><li>绑定一个失去焦点的事件，在读取源代码的时候，对于内容进行截断</li><li>重新为href 赋值，保证连接无内网地址</li><li>去除掉内容里面的特殊标签，</li><li>重新为富文本框赋值</li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>比较搞笑的解决方式，但是当领导掐着你脖子的时候，解决问题永远是第一位。至少这种方式上线之后，没有反馈出现过问题，各个版本的浏览器都是兼容的，算是逃过一劫</li><li>个人建议富文本编辑器有空多去玩玩查看源代码的功能，有时候编辑器的默认设置可能会坑了你，比如百度编辑器默认会加上 p 标签。。。。</li></ol><h2 id="特殊符号传输后台的转义问题，以及读取数据的问题"><a href="#特殊符号传输后台的转义问题，以及读取数据的问题" class="headerlink" title="特殊符号传输后台的转义问题，以及读取数据的问题"></a>特殊符号传输后台的转义问题，以及读取数据的问题</h2><h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><h2 id="针对-iframe这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式"><a href="#针对-iframe这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式" class="headerlink" title="针对 iframe这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式"></a>针对 <code>iframe</code>这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式</h2><h3 id="问题复现："><a href="#问题复现：" class="headerlink" title="问题复现："></a>问题复现：</h3><p>​    由于旧后台是使用iframe进行拼接旧后台系统，在保存的时候，表单无法拿到富文本编辑框的内容，并且在读取的时候，会导致一些样式代码被截断导致内容显示不全的问题。</p><p>​    我们都知道富文本在数据库存储的一般都是html原文，一般的系统都会对一些 &lt; &gt; \ $ % 这种字符进行转义处理或者拦截。所以我们直接用js传原生文本肯定是不行的，需要进过如下的处理：</p><p>存储的时候：</p><ol><li>转移特殊符号，替换原文本</li><li>拦截器拦截检测是否有特殊文本，进行二次转义</li><li>存储之前，将转义字符变为原始 &lt; &gt; 等标签，替换内容</li><li>将富文本存储到数据库，完成</li></ol><p>读取的时候：</p><ol><li>读取数据库的内容</li><li>回显内容到富文本编辑器（这一步其实会遇到非常多的奇怪问题，请看下文）</li></ol><p>​    至于保存的时候，这里的实际情况是，旧版本的ewebeditor，在父iframe也就是表单的父页面使用了一个<code>textarea</code> 标签来保存具体的内容，导致即使我在<code>iframe</code>操作之后，依然会出现问题。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011124205.png" alt=""></p><h3 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h3><p>也是直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ue = UE.getEditor(<span class="string">'ueditor'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化内容</span></span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          ue.setContent($(<span class="string">'#'</span>+QueryStringByName(<span class="string">'id'</span>), parent.document).val())</span><br><span class="line">      &#125;,<span class="number">500</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绑定失去焦点事件</span></span><br><span class="line">  ue.addListener(<span class="string">'blur'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">editor</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> content = UE.getEditor(<span class="string">'ueditor'</span>).getContent();</span><br><span class="line">      <span class="keyword">var</span> aE = $(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>);</span><br><span class="line"></span><br><span class="line">      aE.html(content)</span><br><span class="line">      aE.find(<span class="string">'p.filedata'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> newA = $(<span class="keyword">this</span>).find(<span class="string">'a'</span>)</span><br><span class="line">          <span class="keyword">if</span>(newA.attr(<span class="string">'href'</span>).indexOf(<span class="string">"http://"</span>)&gt;=<span class="number">0</span> || newA.attr(<span class="string">'href'</span>).indexOf(<span class="string">"https://"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> arr = newA.attr(<span class="string">'href'</span>).split(<span class="string">'/'</span>)</span><br><span class="line">              <span class="keyword">var</span> newTxt = <span class="string">''</span></span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">3</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">                  newTxt +=<span class="string">'/'</span>+arr[i]</span><br><span class="line">              &#125;</span><br><span class="line">              newA.attr(<span class="string">'href'</span>,newTxt)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">      content = toTxt(aE.html());</span><br><span class="line">      <span class="comment">//alert(content);</span></span><br><span class="line">      $(<span class="string">'#'</span>+QueryStringByName(<span class="string">'id'</span>), parent.document).html(content)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取search参数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">QueryStringByName</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result=<span class="built_in">window</span>.location.search.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[\?\&amp;]"</span> + name + <span class="string">"=([^\&amp;]+)"</span>, <span class="string">"i"</span>));</span><br><span class="line">      <span class="keyword">if</span>(result==<span class="literal">null</span> || result.length&lt;<span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>在初始化的时候，跑去父窗口拿到数据的文本内容，做了一点点的延时加载。</li><li>使用<code>blur</code> 事件做 <code>textarea</code> 和 富文本编辑器的双向同步</li><li>同样需要处理内网地址暴露的问题，需要截取内网地址</li><li>对于特殊标签转义</li></ol><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><ol><li>富文本暂存区域，最好选隐藏域的 <code>textarea</code>，使用value 值会出现双引号截取的问题 </li><li>小心转义带来的各种问题，一定要记得何时数据会被转义，同时什么阶段的数据内容是什么形式</li><li>关注富文本编辑器本身干的一些”<code>杂活</code>“</li></ol><h2 id="处理百度编辑器粘贴在IE失效的问题（目前未找到解决方案）"><a href="#处理百度编辑器粘贴在IE失效的问题（目前未找到解决方案）" class="headerlink" title="处理百度编辑器粘贴在IE失效的问题（目前未找到解决方案）"></a>处理百度编辑器粘贴在IE失效的问题（目前未找到解决方案）</h2><h3 id="问题复现：-1"><a href="#问题复现：-1" class="headerlink" title="问题复现："></a>问题复现：</h3><p>这也是我要说的重点问题，目前我依然没有找到解决办法，下面的内容都是我的个人尝试，希望找到有过处理经验的人或者有其他方式的办法，有偿感谢！！</p><p>第一个问题：在IE当中，使用<code>ctrl + V</code> 是没有任何反应和效果的，而在谷歌的浏览器下面，</p><p>第二个问题：在IE中, 复制粘贴word内容无法粘贴图片</p><h3 id="无法解决的办法："><a href="#无法解决的办法：" class="headerlink" title="无法解决的办法："></a>无法解决的办法：</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc29uZ3N1L3AvMTE5MTU0NzAuaHRtbA==" title="https://www.cnblogs.com/songsu/p/11915470.html">https://www.cnblogs.com/songsu/p/11915470.html<i class="fa fa-external-link"></i></span> </p><p>遇事不决找谷歌，谷歌出了一篇这种文章，试下</p><p>大概在<code>ueditor.all.js</code>文件的23881行左右</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">bindEvents:&#123;</span><br><span class="line">            <span class="comment">//插入粘贴板的图片，拖放插入图片</span></span><br><span class="line">            <span class="string">'ready'</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">window</span>.FormData &amp;&amp; <span class="built_in">window</span>.FileReader) &#123;</span><br><span class="line">                    domUtils.on(me.body, <span class="string">'paste drop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                        <span class="comment">//判断剪贴板的内容是否包含文本</span></span><br><span class="line">                        <span class="comment">//首先解释一下为什么要判断文本是不是为空</span></span><br><span class="line">                        <span class="comment">//在ctrl+c word中的文字或者图片之后会返回1种(image/png)或者4种type(text/plain,text/html,text/rtf,image/png)类型的对象</span></span><br><span class="line">                        <span class="comment">//为了兼容4种格式的情况，做了如下的判断</span></span><br><span class="line">                        <span class="comment">//如下代码：e.originalEvent.clipboardData.items获得剪贴板的内容</span></span><br><span class="line">                        <span class="comment">//当粘贴了文本之后text是不为空的，同时也会返回当前文本的图片类型</span></span><br><span class="line">                        <span class="comment">//如果有文字的话不做任何的处理，如果只粘贴图片的话文本一定是空的，包括复制的桌面图片或者截图的图片</span></span><br><span class="line">                        <span class="comment">// var text = e.originalEvent.clipboardData.getData("text");</span></span><br><span class="line">                        <span class="comment">// if(text == "")&#123;</span></span><br><span class="line">                        <span class="comment">//     var items=e.originalEvent.clipboardData.items;</span></span><br><span class="line">                        <span class="comment">//     for (var i = 0, len = items.length; i &lt; len; i++) &#123;</span></span><br><span class="line">                        <span class="comment">//         var item = items[i];</span></span><br><span class="line">                        <span class="comment">//         if ( item.kind == 'file' &amp;&amp; item.type.indexOf('image/') !== -1 ) &#123;</span></span><br><span class="line">                        <span class="comment">//             var blob = item.getAsFile();</span></span><br><span class="line">                        <span class="comment">//             getBase64(blob, function( base64 ) &#123;</span></span><br><span class="line">                        <span class="comment">//                 //sendAndInsertImage(base64,me); 上传到服务器</span></span><br><span class="line">                        <span class="comment">//                 setBase64Image(base64,me);</span></span><br><span class="line">                        <span class="comment">//             &#125;);</span></span><br><span class="line">                        <span class="comment">//             //阻止默认事件, 避免重复添加;</span></span><br><span class="line">                        <span class="comment">//             e.originalEvent.preventDefault();</span></span><br><span class="line">                        <span class="comment">//         &#125;;</span></span><br><span class="line">                        <span class="comment">//     &#125;</span></span><br><span class="line">                        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//TODO 粘贴图片的根本问题点 20201010</span></span><br><span class="line">                        <span class="keyword">var</span> hasImg = <span class="literal">false</span>,</span><br><span class="line">                            items;</span><br><span class="line">                        <span class="comment">//获取粘贴板文件列表或者拖放文件列表</span></span><br><span class="line">                        items = e.type == <span class="string">'paste'</span> ? getPasteImage(e):getDropImage(e);</span><br><span class="line">                        <span class="keyword">if</span>(items)&#123;</span><br><span class="line">                            <span class="keyword">var</span> len = items.length,</span><br><span class="line">                                file;</span><br><span class="line">                            <span class="keyword">while</span> (len--)&#123;</span><br><span class="line">                                file = items[len];</span><br><span class="line">                                <span class="keyword">if</span>(file.getAsFile) file = file.getAsFile();</span><br><span class="line">                                <span class="keyword">if</span>(file &amp;&amp; file.size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                    sendAndInsertFile(file, me);</span><br><span class="line">                                    hasImg = <span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            hasImg &amp;&amp; e.preventDefault();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">//取消拖放图片时出现的文字光标位置提示</span></span><br><span class="line">                    domUtils.on(me.body, <span class="string">'dragover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(e.dataTransfer.types[<span class="number">0</span>] == <span class="string">'Files'</span>) &#123;</span><br><span class="line">                            e.preventDefault();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//设置loading的样式</span></span><br><span class="line">                    utils.cssRule(<span class="string">'loading'</span>,</span><br><span class="line">                        <span class="string">'.loadingclass&#123;display:inline-block;cursor:default;background: url(\''</span></span><br><span class="line">                            + <span class="keyword">this</span>.options.themePath</span><br><span class="line">                            + <span class="keyword">this</span>.options.theme +<span class="string">'/images/loading.gif\') no-repeat center center transparent;border:1px solid #cccccc;margin-left:1px;height: 22px;width: 22px;&#125;\n'</span> +</span><br><span class="line">                            <span class="string">'.loaderrorclass&#123;display:inline-block;cursor:default;background: url(\''</span></span><br><span class="line">                            + <span class="keyword">this</span>.options.themePath</span><br><span class="line">                            + <span class="keyword">this</span>.options.theme +<span class="string">'/images/loaderror.png\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;'</span> +</span><br><span class="line">                            <span class="string">'&#125;'</span>,</span><br><span class="line">                        <span class="keyword">this</span>.document);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>针对内容进行的处理操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPasteImage</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">return</span> e.clipboardData &amp;&amp; e.clipboardData.items &amp;&amp; e.clipboardData.items.length == <span class="number">1</span> &amp;&amp; <span class="regexp">/^image\//</span>.test(e.clipboardData.items[<span class="number">0</span>].type) ? e.clipboardData.items:<span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">getDropImage</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  e.dataTransfer &amp;&amp; e.dataTransfer.files ? e.dataTransfer.files:<span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//TODO 执行插入图片的操作 20201010</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">setBase64Image</span>(<span class="params">base64, editor</span>) </span>&#123;</span><br><span class="line">       editor.execCommand(<span class="string">'insertimage'</span>, &#123;</span><br><span class="line">           src: base64,</span><br><span class="line">           _src: base64</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//TODO 获得base64 20201010</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">getBase64</span>(<span class="params">blob, callback</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> a = <span class="keyword">new</span> FileReader();</span><br><span class="line">       a.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">           callback(e.target.result);</span><br><span class="line">       &#125;;</span><br><span class="line">       a.readAsDataURL(blob);</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>博客的方式是读取二进制流为Blob,然后调用原始的上传接口进行兼容，然而，我在直接套用之后，连谷歌的粘贴也失效了<strong>（坑爹！）</strong></p><p>不用怀疑，肯定是：<code>getPasteImage()</code>中没有拿到想要的结果，所以我直接<code>alert</code>打印想要的内容，看下什么内容</p><p>加入代码<code>console.log(e.clipboardData)</code>看下IE什么效果（注意要使用高版本IE）</p><blockquote><p> 记得在测试之前，在粘贴板粘贴带图片内容的word内容，或者截个图粘贴到IE的富文本编辑框</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011132122.png" alt=""></p><p>不出所料，没有内容，我们直接打印 e 事件对象，看看有没有想要的内容</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011132536.png" alt=""></p><p>错了，使用console：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011133204.png" alt=""></p><p>说实话，看不懂，凭感觉这里的<code>dataTransfer</code>没有内容，基本上是找不到如何获取粘贴板数据的点</p><p>所以个人判断是IE浏览器本身就对这种粘贴操作没有进行兼容或者处理（万恶的IE浏览器）</p><p>至此，我知道自己的能力不足，无法解决这个问题，所以跑去问前端了，然后前端百度一圈下来，和我说：”要不换个编辑器？”</p><p>我没有死心，继续搜索</p><h3 id="其他方式："><a href="#其他方式：" class="headerlink" title="其他方式："></a>其他方式：</h3><p>其实有其他的组织或者公司已经对于这种word的上传问题进行了解决</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L215Zm15Zm15Zm15Zi9hcnRpY2xlL2RldGFpbHMvMTgzOTkzMjk=" title="https://blog.csdn.net/myfmyfmyfmyf/article/details/18399329">ueditor文本编辑器支持ctrl+v图片文字样式<i class="fa fa-external-link"></i></span></p><p>总结：</p><ol><li>思路不错，但是基本属于闭门造车，并且还要安装一个exe的Active控件，无法解决问题</li><li>自己重写一个Active控件兼容处理</li></ol><p><span class="exturl" data-url="aHR0cDovL2Jsb2cubmNtZW0uY29tL3dvcmRwcmVzcy8yMDE5LzA4LzA3LyVFNSVBRiU4QyVFNiU5NiU4NyVFNiU5QyVBQyVFNyVCQyU5NiVFOCVCRSU5MSVFNSU5OSVBOCVFNyVCMiU5OCVFOCVCNCVCNHdvcmQlRTUlODYlODUlRTUlQUUlQjkv" title="http://blog.ncmem.com/wordpress/2019/08/07/%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%B2%98%E8%B4%B4word%E5%86%85%E5%AE%B9/">富文本编辑器粘贴word内容<i class="fa fa-external-link"></i></span></p><p>总结：</p><ol><li>其他公司二次开发，商用版本</li><li>个人版本要300多一年，比较麻烦</li><li>也是基于word的上传开发了插件，并且需要安装word上传的控件</li><li>感兴趣可以下载看下，localhost 和 “127.0.0.1” 可以正常上传和使用</li></ol><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWFuZ3poaS9wLzM1NzY1MjcuaHRtbA==" title="https://www.cnblogs.com/yangzhi/p/3576527.html">UEditor单独图片上传组件！适用IE,Chrome,firefox.<i class="fa fa-external-link"></i></span></p><p>总结：</p><ol><li>不是一码事，针对上传操作做了一些兼容和优化而已，无法解决粘贴的问题</li></ol><p>官方Github:<br>问题描述：从word中复制的图片粘贴到UEditor中以后不能正常显示，work图片转存的按钮也不可用。</p><p>解决方案：参看 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZleC10ZWFtL3VlZGl0b3IvaXNzdWVzLzI4ODM=" title="https://github.com/fex-team/ueditor/issues/2883">ISSUE<i class="fa fa-external-link"></i></span></p><p>总结：</p><ol><li>虽然官方的ISSUE 有人提过了，但是我访问404 啊。。。。</li><li>现在已经邮箱打扰，不知道给不给我这个菜鸟回复。。。。</li></ol><p>经过上面的尝试之后，发现还是没有特别好的解决方式，于是反馈给上级，不让问题留在自己手里。。。。。</p><p>连官方那边都找不到办法，有点万念俱灰，于是把问题往上抛了，八成需要换编辑器，又有的忙了。。。。</p><h2 id="分享："><a href="#分享：" class="headerlink" title="分享："></a>分享：</h2><p>说了这么多，其实我最想说的是，解决问题建议各位一定要留下文档记录，哪怕是如何解决的也好。</p><p>我是一个后端的开发人员，但是却被安排到前端去处理前端的兼容性问题，其实当时顶着非常大的压力的，客户催得紧，经理也天天问我进度，辛好公司有一位干过全栈的大神在，我的许多奇葩的样式错乱和按钮点击问题都是找他帮忙解决的，我对IE的各种奇怪现象其实挺恶心的，最后还是拖累同事陪我加班到十点解决上面的暴露内网的问题。在解决之后，我说了这么一句话：“我这辈子都不想碰到IE了”，但是那位全栈的同事却和我说：“怕什么，我连IE6的兼容性都搞过，不是照样搞好，这些问题解决之后，这就是属于你的经验，你不断积累经验，才能比别人更多优势”，这对我今年的工作态度产生了很多的工作影响，我不在思考为了工作而工作，而是思考为了自己而工作，希望我的话对大家有帮助。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011125214.png" alt=""></p><h1 id="最后总结："><a href="#最后总结：" class="headerlink" title="最后总结："></a>最后总结：</h1><p>就以我这个老掉牙的系统来说，目前百度的编辑器兼容和支持是最好的，实在不想再换别的浏览器，或者说换之前再挣扎一下，所以写下。</p><p>欢迎各位前端大神指教，帮助一下我这个后端临时抽来解决前端问题的人QAQ</p><p>如果有好的解决方式，欢迎拍砖</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      百度编辑器的一些踩坑以及我是如何看待和解决问题的
    
    </summary>
    
    
      <category term="工作" scheme="https://lazytime.site/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="前端" scheme="https://lazytime.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="百度编辑器" scheme="https://lazytime.site/tags/%E7%99%BE%E5%BA%A6%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>拥有一台surface pro3 是怎样的体验</title>
    <link href="https://lazytime.site/2020/10/07/note30/"/>
    <id>https://lazytime.site/2020/10/07/note30/</id>
    <published>2020-10-07T05:57:43.000Z</published>
    <updated>2020-10-29T15:04:55.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拥有一台surface-pro3-是怎样的体验"><a href="#拥有一台surface-pro3-是怎样的体验" class="headerlink" title="拥有一台surface pro3 是怎样的体验"></a>拥有一台surface pro3 是怎样的体验</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/SharedScreenshot.jpg" alt=""></p><h2 id="为什么要买surface-pro"><a href="#为什么要买surface-pro" class="headerlink" title="为什么要买surface pro"></a>为什么要买surface pro</h2><ol><li>个人还是感觉ipad适合拿来看电影，不适合做其他事情</li><li>不得不说微软的广告有点牛，看了就让人想买</li><li>这个板子的屏幕是一个三星的2K屏，实际使用观感确实不错，不论看电影还是看代码都是十分方便的。</li><li>笔记记录使用，个人是重度的windows使用</li><li>一个galgame的玩家怎么能没有一块windows的移动板子呢，不要太爽</li><li>之前买过一个东芝wta-8的windows板子，比较卡，算是捡漏失败</li></ol><h2 id="值不值得买？"><a href="#值不值得买？" class="headerlink" title="值不值得买？"></a>值不值得买？</h2><p>surfacepro3的屏幕非常脆，一摔基本算是拜拜了，所以个人使用非常的小心</p><p>不值得买一手，但是二手还是值得买来体验的一下的</p><p>如果你有经常出差的需求，买一个来文档做做文档记录还是不错的</p><p><font color='red'>千万不要买surface pro4，一堆问题</font></p><h2 id="先说说结论"><a href="#先说说结论" class="headerlink" title="先说说结论"></a>先说说结论</h2><ol><li>windows的平板体验真心非常糟糕，并且一定需要配合键鼠使用</li><li>作为轻办公使用，体验不错，谢谢word啥的还可以</li><li>最低配置玩lol没啥问题，还行</li><li>个人买来作为记笔记使用，比如可以在网上看视频的时候，在surface上面记笔记，这样就不需要频繁的切换到电子笔记上面进行笔记的输入，挺方便的</li><li>surface其实不算便携，但是总体上来说还是满足了自己的期望需求</li><li>作为笔记本不太行，但是作为一个便携的windows电脑，还是有一定的价值在的</li></ol><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>作为一个闲鱼的初级垃圾佬，surface 当然不值得买一手，当然得买二手货了，下面放出我的配置</p><p>个人的配置surfacepro4 8G内存 + 256G固态硬盘 闲鱼面交 1500 拿下，无磕碰，无维修。不算捡漏，算是安全上垒</p><h2 id="为什么不选择ipad"><a href="#为什么不选择ipad" class="headerlink" title="为什么不选择ipad"></a>为什么不选择ipad</h2><ol><li>Ipad 的生产力在ipad pro，但是价格有点承受不起</li><li>windows重度使用用户</li><li>在选择苹果的生态之前，需要有一台Iphone，当然，我也没有</li><li>个人的所有笔记和资料基本都保存在window的相关软件，同时也是简化学习成本（mac学习成本本身不是很高，后续考虑mbp）</li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这或许是我买的最后一块平板，以后可能考虑购买mbp，入苹果的生态圈</p><p>在闲鱼一年的时间，捡了几个还算不错的东西，这里分享一下</p><ol><li>kindle os2 1100 （天猫首发版本，卖家送了一堆原装配置和盒子，算是赚了）</li><li>surface pro 4</li><li>switch 日版 普通 1500带箱说</li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      这不是生产力，但是比较符合我的需求
    
    </summary>
    
    
      <category term="日常" scheme="https://lazytime.site/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="surface" scheme="https://lazytime.site/tags/surface/"/>
    
  </entry>
  
  <entry>
    <title>计算机程序的构造和解释-笔记(一)</title>
    <link href="https://lazytime.site/2020/10/07/note29/"/>
    <id>https://lazytime.site/2020/10/07/note29/</id>
    <published>2020-10-06T16:20:33.000Z</published>
    <updated>2020-10-29T15:04:47.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么要学计算机程序的构造与解释"><a href="#为什么要学计算机程序的构造与解释" class="headerlink" title="为什么要学计算机程序的构造与解释"></a>为什么要学计算机程序的构造与解释</h2><p><span class="exturl" data-url="aHR0cDovL2Jsb2cuemhhb2ppZS5tZS8yMDA5LzA3L3JlY29tbWVuZGVkLXJlYWRpbmctMi1zaWNwLmh0bWw=" title="http://blog.zhaojie.me/2009/07/recommended-reading-2-sicp.html">http://blog.zhaojie.me/2009/07/recommended-reading-2-sicp.html<i class="fa fa-external-link"></i></span> 很老的一个帖子上的推荐</p><ul><li>了解任何东西，思想最重要</li><li>抽象的思维，如何从简单到复杂</li><li>用不同的角度去考虑用咒语来实现功能</li><li>学习任何语言思想最重要的是思想本身，而scheme由于语言天生的自由性，可以极大的发挥程序员的思想空间</li><li>学习思考问题的方式，以及解题思路</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wZTYzNjVmNGJiMDM/dXRtX2NhbXBhaWduPXNoYWtlc3BlYXJl" title="https://www.jianshu.com/p/0e6365f4bb03?utm_campaign=shakespeare">https://www.jianshu.com/p/0e6365f4bb03?utm_campaign=shakespeare<i class="fa fa-external-link"></i></span> 简书上面做的一个回答</p><a id="more"></a><h2 id="一些感谢："><a href="#一些感谢：" class="headerlink" title="一些感谢："></a>一些感谢：</h2><ol><li>文科生学这个表表示虽然痛苦，但是会努力一步一步的学习</li><li>写出来是监督自己产出，这门语言非常深奥和困难，借助视频和书籍慢慢啃</li><li>一定要深入的理解黑盒抽象的思维，解题的思路大于题目本身的意义</li><li>持续更新，用文章输出来勉励和督促自己。</li></ol><h1 id="第一节课-上课笔记"><a href="#第一节课-上课笔记" class="headerlink" title="第一节课 上课笔记"></a>第一节课 上课笔记</h1><h2 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h2><ol><li>y^2 = x &amp;&amp; y&gt;= 0</li><li>亚历山大的连续平方根</li><li>知道规则不等于可以运用规则</li><li>复杂度控制<ol><li>黑盒抽象</li><li>猜测-&gt;验证结果</li></ol></li><li>寻找函数的不动点<ol><li>输入</li><li>输出</li></ol></li><li>线性组合的基本方法</li><li>构建大型程序<ol><li>流</li><li>OOP</li></ol></li></ol><h2 id="黑盒抽象"><a href="#黑盒抽象" class="headerlink" title="黑盒抽象"></a>黑盒抽象</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926145204.png?ynotemdtimestamp=1601964191688" alt="img"></p><h2 id="元语言抽象"><a href="#元语言抽象" class="headerlink" title="元语言抽象"></a>元语言抽象</h2><ol><li>数据抽象：如何组合程序的基本元素，构造更复杂的结构</li><li>过程抽象：如何将复杂的结构抽象出高层组件，提供更高维度的组合型</li><li>模块化，通过高抽象层次的组织方法，提高系统的模块性</li></ol><h2 id="约定接口"><a href="#约定接口" class="headerlink" title="约定接口"></a>约定接口</h2><ol><li>对应计算机的输入与输出</li><li>使用黑盒不需要知道内部结构，只需要知道约定俗称的接口的功能</li></ol><h2 id="在进行正式SCIP学习之前，需要安装环境"><a href="#在进行正式SCIP学习之前，需要安装环境" class="headerlink" title="在进行正式SCIP学习之前，需要安装环境"></a>在进行正式SCIP学习之前，需要安装环境</h2><h3 id="1-下载-DrRacket"><a href="#1-下载-DrRacket" class="headerlink" title="1. 下载 DrRacket"></a>1. 下载 DrRacket</h3><p>直接访问：<span class="exturl" data-url="aHR0cHM6Ly9yYWNrZXQtbGFuZy5vcmcv" title="https://racket-lang.org/">https://racket-lang.org/<i class="fa fa-external-link"></i></span></p><p>找到自己对应的内容下载页面</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926152047.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>下载完安装包之后，就可以进行安装操作了</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154022.png?ynotemdtimestamp=1601964191688" alt="img"></p><p>注意不要安装在C盘，一般习惯是直接切换一个盘符，直接安装到D盘即可</p><p>安装好之后，你在桌面上可能找不到你要的东西，所以请查看一下你的开始菜单（MAC不了解，这里只能说明windows的地址，抱歉）</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154221.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="3-DrRacket"><a href="#3-DrRacket" class="headerlink" title="3. DrRacket"></a>3. DrRacket</h3><p>这个界面怎么说呢，如果你用过C语言的编辑器（没错就是老掉牙的那个），其实感觉还行，但是如果经常使用中文的菜单可能不习惯</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154557.png?ynotemdtimestamp=1601964191688" alt="img"></p><p>没关系，在HELP里面，可以切换：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154650.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="4-安装-SICP-Package"><a href="#4-安装-SICP-Package" class="headerlink" title="4. 安装 SICP Package"></a>4. 安装 SICP Package</h3><ol><li>选择<code>File</code> -&gt; <code>Package Manger</code></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154758.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>在标红的地方，输入<code>sicp</code></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200929214408.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>下载比较建议挂个梯子下载，需要访问github进行安装包的下载</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155047.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>安装成功之后，大概类似这种界面</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155154.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="5-测试-SICP-package-安装成功与否"><a href="#5-测试-SICP-package-安装成功与否" class="headerlink" title="5. 测试 SICP package 安装成功与否"></a>5. 测试 SICP package 安装成功与否</h3><ol><li>首先在顶部输入<code>#lang sicp</code>然后<code>run</code>一下，如果看到下面的语言切换了，说明成功了。</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155408.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>接着输入如下的方法：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#lang sicp</span><br><span class="line">(define (increase x) (+ x 1))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155727.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>文件夹管理的包：<code>files-viewer</code>，类似插件，安装方式如下：</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926160110.png?ynotemdtimestamp=1601964191688" alt="img"></p><h2 id="Sicp简单了解"><a href="#Sicp简单了解" class="headerlink" title="Sicp简单了解"></a>Sicp简单了解</h2><h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(+ 3  8)</span><br><span class="line">(* 3 (+ 7 19.5))</span><br><span class="line">(+ (+ 5 4) (* 6 (- 9 4)))</span><br></pre></td></tr></table></figure><ol><li>3 + 8 的和</li><li>3 * (7 + 19.5)</li></ol><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>组织函数：</p><p>最简单的组织一个定义方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define (square x) (* x x))</span><br></pre></td></tr></table></figure><p>使用lambda表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define square (lambda (x) (* x x)) )</span><br></pre></td></tr></table></figure><p>定义的组织函数本身也可以作为内容的一部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (sq x) (* x x))</span><br><span class="line">  (define (sum x y) (* (sq x) (sq y)))</span><br></pre></td></tr></table></figure><p>这样设计的好处：</p><ol><li>可以让程序员灵活的搭配组织简单的程序形成复杂的程序</li><li>没有语言的约束，只有基本的语法规则</li></ol><p>坏处：</p><ol><li>你无法知道哪些是定义，哪些是引用</li><li>程序的可读性较差</li></ol><h4 id="条件语句："><a href="#条件语句：" class="headerlink" title="条件语句："></a>条件语句：</h4><h5 id="cond：可以理解为switch-p1-p2-p3-p4-p5-p6"><a href="#cond：可以理解为switch-p1-p2-p3-p4-p5-p6" class="headerlink" title="cond：可以理解为switch ( (p1 p2) (p3 p4) (p5 p6) )"></a>cond：可以理解为switch ( (p1 p2) (p3 p4) (p5 p6) )</h5><p>如果没有唯一的一个cond 的值，则cond 会没有定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cond (&lt;p1&gt; &lt;e1&gt;)</span><br><span class="line"></span><br><span class="line">    (&lt;p2&gt; &lt;e2&gt;)</span><br><span class="line"></span><br><span class="line">             .......</span><br><span class="line"></span><br><span class="line">            (&lt;pn&gt; &lt;en&gt;))</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">(cond (&lt;p1&gt; &lt;e1&gt;)</span><br><span class="line"></span><br><span class="line">    (&lt;p2&gt; &lt;e2&gt;)</span><br><span class="line"></span><br><span class="line">             .......</span><br><span class="line"></span><br><span class="line">            (else &lt;en&gt;))</span><br></pre></td></tr></table></figure><p>应用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(define (sq3 y)</span><br><span class="line">  ((cond ((&gt; y 0) y)</span><br><span class="line">  ((&#x3D; y 0) 0)</span><br><span class="line">  ((&lt; y 0) (- y)))))</span><br></pre></td></tr></table></figure><p>另一种写法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(define (sq5 k)</span><br><span class="line">  (cond ((&lt; k 0) (- k))</span><br><span class="line">  (else k)))</span><br></pre></td></tr></table></figure><h5 id="if：是一种语法糖"><a href="#if：是一种语法糖" class="headerlink" title="if：是一种语法糖:"></a>if：是一种语法糖:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(define (zz x)</span><br><span class="line">  (if (&gt; x 0)</span><br><span class="line">      (-1)</span><br><span class="line">      x))</span><br></pre></td></tr></table></figure><ol><li>把自己的作为结果，带入到函数当中求值返回</li></ol><h5 id="and-…"><a href="#and-…" class="headerlink" title="(and  ….. )"></a>(and <e1> ….. <e2>)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (test t) </span><br><span class="line">  (and  (&gt; t 5) (&lt; t 1)))</span><br></pre></td></tr></table></figure><h5 id="or-…"><a href="#or-…" class="headerlink" title="(or ….. )"></a>(or<e1> ….. <e2>)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (test t) </span><br><span class="line">  (or (&gt; t 5) (&lt; t 1)))</span><br></pre></td></tr></table></figure><h5 id="not-…"><a href="#not-…" class="headerlink" title="(not ….. )"></a>(not<e1> ….. <e2>)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (test t) </span><br><span class="line">  (not (&gt; t 5) (&lt; t 1)))</span><br></pre></td></tr></table></figure><h3 id="什么是正则序求值，什么是应用序求值"><a href="#什么是正则序求值，什么是应用序求值" class="headerlink" title="什么是正则序求值，什么是应用序求值"></a>什么是正则序求值，什么是应用序求值</h3><p>结论：Lisp使用的是应用序求值</p><p>正则序求值：使用过程组合，层层的代换展开运算，最后完全展开运算完成的这个过程就叫做正则序求值（可以理解为懒加载，在只有实际使用到参数的时候，才会带入参数运算）</p><p>应用序求值：应用序求值，先对每一个形式参数带入实际的值进行实际的运算操作，直到返回最终结果</p><p>为什么Lisp使用应用序求值？</p><ol><li>减少没有必要的计算，比如说正则序列求值，需要将一步完成的计算继续拆分为更多步骤</li><li>正则的结果不一定完全正确（特殊案例）</li></ol><h3 id="课后练习："><a href="#课后练习：" class="headerlink" title="课后练习："></a>课后练习：</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926164058.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="非常好的一个问题："><a href="#非常好的一个问题：" class="headerlink" title="非常好的一个问题："></a>非常好的一个问题：</h3><p>在定义的时候，如下面所示的括号有无的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(define (d) (* 5 5))</span><br><span class="line">(define d (* 5 5)) </span><br><span class="line">&gt; 输入 a &#x3D; 5</span><br><span class="line">结果 25</span><br><span class="line">&gt; 输入 d &#x3D; 5</span><br><span class="line">结果 25</span><br><span class="line">两者内部的细节区别：</span><br><span class="line">(define (d) (* 5 5)) -&gt; 运行的是一个复合公式</span><br><span class="line">(define d (* 5 5))  -&gt; 函数的结果</span><br></pre></td></tr></table></figure><h3 id="课后练习-1-2"><a href="#课后练习-1-2" class="headerlink" title="课后练习 1.2"></a>课后练习 1.2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#x2F; (+ 5 4 (-2 (-3 (+ 6 (&#x2F; 4 5))))) (* 3 (- 6 2) (- 2 7)))</span><br></pre></td></tr></table></figure><p>解决思路：其实挺简单的，画树就行</p><h3 id="课后练习-1-3"><a href="#课后练习-1-3" class="headerlink" title="课后练习 1.3"></a>课后练习 1.3</h3><p>题目：求较大两数的两树之和？</p><p>分析：</p><p>使用双层if判断</p><p>拆分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(define (maxVal3 x y z)</span><br><span class="line">  (if (&gt; x y)</span><br><span class="line">      (if (&gt; y z) (* x y)</span><br><span class="line">          (* x z))</span><br><span class="line">      (* z y)))</span><br></pre></td></tr></table></figure><h3 id="课后练习-1-4"><a href="#课后练习-1-4" class="headerlink" title="课后练习 1.4"></a>课后练习 1.4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define (a-plus-abs-b a b) ((if (&gt; b 0) + -) a b))</span><br></pre></td></tr></table></figure><ol><li>if (b &gt; 0)<ol><li>+ a b</li></ol></li><li>if(b &lt; 0)<ol><li>- a b</li></ol></li></ol><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><blockquote><p><strong>可知，由于(define (p) (p))， 如果出现了对（p）求值的情况， 就会陷入循环 scheme中的解释器本身就是应用序的，函数的求值会先对每一个参数进行求值， 　　　 然后把参数的值代入函数，若对(test 0 (p))使用应用序,那么（p）就会被求值， 　　 进入死循环中。而正则序是“完全展开而后规约”，在展开之后，由if条件判断，然后 　　 对0求值，由于（p）不会进行求值，最终函数可以正确返回0值。 （Guile中测试此程序确会进入死循环。）</strong></p><p>PS：这一段网上摘录的答案还不是很了解，还没有进行实际的验证</p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      计算机程序的构造和解释，
    
    </summary>
    
    
      <category term="-Scheme" scheme="https://lazytime.site/categories/Scheme/"/>
    
    
      <category term="书籍" scheme="https://lazytime.site/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
</feed>
