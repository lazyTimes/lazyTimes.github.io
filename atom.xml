<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LazyTimes的博客</title>
  
  <subtitle>生死有命，富贵在天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lazytime.site/"/>
  <updated>2021-01-23T07:11:11.432Z</updated>
  <id>https://lazytime.site/</id>
  
  <author>
    <name>阿东</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《小狗钱钱》读书笔记</title>
    <link href="https://lazytime.site/2021/01/23/moneydog/"/>
    <id>https://lazytime.site/2021/01/23/moneydog/</id>
    <published>2021-01-23T07:02:39.000Z</published>
    <updated>2021-01-23T07:11:11.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《小狗钱钱》读书笔记"><a href="#《小狗钱钱》读书笔记" class="headerlink" title="《小狗钱钱》读书笔记"></a>《小狗钱钱》读书笔记</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>小狗钱钱算是真正意义上个人第一本理财书，作者用故事向读者讲述理财，不管是学习还是单纯当一个故事去看，个人都觉得作者非常有教育意义。这本书和《穷爸爸与富爸爸》一样是对理财的启蒙书，但是他的“下部”更多的是探讨活着的意义，以及好好做人等一些方面的道理。</p><a id="more"></a><h2 id="推荐指数："><a href="#推荐指数：" class="headerlink" title="推荐指数："></a>推荐指数：</h2><p>这本书不管什么年龄段都非常有启发意义，用一个类似童话般的故事，告诉人们理财和做人的道理，我们没有主角那边幸运而奇妙的事情，但是确实可以通过行动来改变自身。</p><h2 id="思维导图："><a href="#思维导图：" class="headerlink" title="思维导图："></a>思维导图：</h2><p>下面是个人的思维导图笔记，这次没有参考别人怎么写的，完全按照自己的想法进行：</p><p>【<strong><span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvM1Q3UmQ3cENRZFI=" title="https://share.mubu.com/doc/3T7Rd7pCQdR">https://share.mubu.com/doc/3T7Rd7pCQdR<i class="fa fa-external-link"></i></span></strong>】</p><h2 id="复读："><a href="#复读：" class="headerlink" title="复读："></a>复读：</h2><p>下面的内容其实和看书一样了，不喜欢就跳过吧。大致讲了下个人读书的记忆。为什么要<strong>复读</strong>，一方面自己实在是喜欢这本书，另一方面是记录一下希望以后还能怀着感激的心情回想起来，就和书中所讲的一样，重要的不是你想要做什么，而是你做过什么。</p><p>本书分为上下两部，上部讲述如何造就“甜甜圈”的外圈，而下部则告诉读者要丰富“甜甜圈”的中心，因为最重要的往往是看不见的，<strong>许多人具有相似的‘圆圈’，但他们的‘圆孔’却各不相同。</strong></p><p>以下内容全凭记忆复述。=-=</p><h3 id="上部："><a href="#上部：" class="headerlink" title="上部："></a>上部：</h3><p>吉娅在一个由原本的富人转为濒临破产的中产家庭，父母因为经济拮据经常争吵，每天不断的抱怨和压抑笼罩着吉娅的家庭，而吉娅则一直想要逃离这种家庭，同时认为自己去美国的梦想永远不会实现。</p><p>某一天在吉娅的院子里躺着一条受了重伤的小狗，吉娅因为同情心请求父母收留，父母在软磨硬泡之下终于答应收留，然而正是这条小狗，改写了吉娅一家的未来。而父亲为小狗称之为“钱钱”，也是故事的开端。因为在未来“钱”真的像“小狗”一样靠近吉娅一家。</p><p>照顾“钱钱”一段时间之后，某一天吉娅救下不小心掉入水中的“钱钱”，钱钱在被救起之后，竟然开口说话，并且告诉吉娅它可以帮助吉娅完成自己的梦想，同时改变家庭状况。但是前提是吉娅真的<strong>想要</strong>改变</p><p>“钱钱”告诉吉娅首先准备“梦想相册”和“成功日记”，还有一个“梦想储蓄罐”，“梦想相册”记录自己最想做的十件事情，并且从中挑选三件最重要的事情。吉娅用挑选了下了<strong>去美国</strong>，<strong>买笔记本</strong>、<strong>帮助父母摆脱负债</strong>。钱钱告诉吉娅每天需要把自己的每一份零花钱分成三份，把一半以上放入储蓄罐里面作为启动资金（个人理解），剩下一小半，一大半投入到自己的梦想，留下最后一部分，作为自己的零花钱。（事实证明，如果从小时候养成存钱和规划资产的习惯，大部分人在工作以后，基本都会有不错的启动资金。当然我没做到，哈哈）</p><p>妈妈知道吉娅梦想并且听说储蓄罐的事情之后嘲笑吉娅存钱的速度，实现梦想早就成为老奶奶了，而吉娅因为自尊心大哭一场，并且更加下定决定要实现自己的去美国读书的梦想，而小狗钱钱则说：在你实现梦想的道路上会有无数的人来阻止你自己，有时候甚至会是自己最亲的人。</p><p>吉娅受挫之后，决心想办法挣钱达成梦想，但是她发现没有任何思路，深思熟虑之下，她鼓起勇气找到堂兄，在堂兄数数落成只会玩洋娃娃的小女孩之后，还是给了吉娅建议，讲述自己卖面包赚钱的事情，并且告诉吉娅赚钱的机会往往在人们最需要同时他们最不愿意做的事情上面。同时也告诉吉娅要去寻找自己想做并且对工作能充满热情的工作方式，<strong>因为堂兄就是因为喜欢面包所以他很乐意为他人送自己喜爱的面包</strong>。吉娅在连续好几天的思考之后，发现了帮邻居“遛狗”这一条路，同时发现“”，就这样吉娅认识了更多的人。</p><p>吉娅“遛狗”一段时间之后，“钱钱”的原主人金先生派人找到吉娅一家，并且希望吉娅能带“钱钱”见他，吉娅起初害怕会说话的“钱钱”被人夺走，但是还是捡了金先生，然而金先生和吉娅想的不一样，是一个富有知识和亲和的富人，但是因为车祸无法自由行动，钱钱是金先生的上一家主人，因为车祸导致钱钱走失，吉娅讲述自己照顾钱钱的经历收到金先生的喜爱，并且答应有偿让吉娅每周带钱钱来看望他，吉娅当然欣然接受。</p><p>在吉娅打工之路不断扩展的时候，钱钱在某一天问吉娅是否有记录成功日记，吉娅说自己因为琐事忘记写，遭到钱钱的警告，不管发生任何事情，都不要忘记写成功日记，如果不去写成功日记，那么成功只会离吉娅越来越远，很多人非常努力却从来记不住自己做过什么，他们逐渐偏离自己的目标，忘记自己的梦想。（和想要减肥是一个道理）。</p><p>吉娅和金先生分享成功笔记和梦想相册，让金先生很感兴趣，金先生和吉娅讲了一个“鹅”的故事，提醒吉娅要培养自己的“鹅”，同时不要让别人夺走或者杀死自己的“鹅”。吉娅从金先生学到了很多道理。</p><p>吉娅的“遛狗”事业不断扩大，但是因为需要的遛狗的人越来越多，吉娅逐渐力不从心，吉娅在堂兄的建议之下，找到自己的好朋友为自己遛狗，并且从朋友的“工资”当中抽取一部分作为“推荐费”，吉娅起初觉得很愧疚，因为自己没有工作却要从自己朋友的那里得到报酬，而金先生开导了她，告诉她说你为你的朋友提供的金点子，不仅让你可以赚钱，也让你的朋友赚到了钱，而你的朋友也很乐意为你工作，这是你应得的。</p><p>吉娅和堂兄以及小伙伴认识了贵妇，而在探险的过程中成功守住了财产，贵妇为了报答吉娅等小伙伴，提议一起建立一个基金小队，一起投资购买股票和基金，妇人提议购买购买基金的方法，要购买跨国公司的股票，并且要做好长期持有的准备。在他们刚开始购买股票的半年，基金大跌，此时堂兄觉得基金要亏钱想要取出来但是被阻止了，又过了半年之后，基金翻倍了，此时堂兄想要把利润取出来庆祝一下，也被贵妇阻止了，而此吉娅和伙伴们分享了“鹅”的故事受到了大伙们的欢迎，同时贵妇推荐吉娅去学校把理财的观念传播给学校，想让吉娅上台进行演讲。</p><p>吉娅由于害怕上台演讲，而钱钱让吉娅去看成功日记，吉娅通过日记成功的摆脱了内心的恐惧，同时在小伙伴和父母邻居的支持下，吉娅更是非常棒的分享了自己的经历，出色的完成了演讲。</p><p>故事到这里差不多就告一段落了，至此是个人回忆的全部内容，比如金先生帮助吉娅父母拜托了负债问题，而吉娅和父母谈心之后，父亲清楚自己想要做的事情之后，出去创业。</p><p>到上部的最后，小狗钱钱说以后再也不能说话了，钱钱告诉吉娅说你得到某样东西的时候，必然会失去一些东西，但是永远不要去怀念已经失去的东西的，而是要好好想想自己现在拥有的东西。</p><h3 id="下部："><a href="#下部：" class="headerlink" title="下部："></a>下部：</h3><p>下部我觉得有必要认真品味一下，下部个人认为是作者所认知的做人的正确准则，同时用故事告诉我们嫉妒是如何让一个人变得狭隘，嘲笑他人的缺点最后给吉娅造成多大的麻烦，国王硬币的正反面给人带来的思考，吹牛高傲的人是如此的无知和无力，尽管他们说的话有时候很有道理，但是并不能掩盖脆弱和无知，告诉读者不管你的对手多么强大，都要想尽办法克服“失败”的恐惧，吉娅在“外在”形象丰富的同时，也带来了不少问题。第二部主要讲了吉娅的个人成长。还是十分有意思的。</p><h2 id="精句摘录："><a href="#精句摘录：" class="headerlink" title="精句摘录："></a>精句摘录：</h2><ol><li>许多人具有相似的‘圆圈’，但他们的‘圆孔’却各不相同。</li><li>在你的生命中没有什么比寻找白色石头更重要的事情了。如果不去寻找，当然可以避免很多危险与问题，可你也将无法获得你本来能够得到的幸福。</li><li>哪里都有可爱的人，当然也有不那么可爱的人。不可能所有人都是友好的。这不以人的意志为转移。有些人连自己都不喜欢，因而也不会去喜欢别人。</li><li>取决于你怎么想。如果你只想着自己将要失去一些东西，那就肯定会痛苦。但如果你更多地想到我们在一起经历过那么多美好的事情，快乐和感激之情就会占据上风。</li></ol><h2 id="感悟："><a href="#感悟：" class="headerlink" title="感悟："></a>感悟：</h2><p>​    “永远不要杀死你的鹅”是我认为能从书中学到的最好的东西，同时“甜甜圈”和“白色石头”，是需要不断思考的，我从这本书里面学到了许多对自己有用的东西。</p><p>​    成功日记和知识的笔记是很重要的，如果我们要知道自己的知识是否正确，以及自己做的事情是否正确，那么最好的方式无疑就是分享出去，分享给你的朋友和家人，让他们用他们的思考去看待这件事。如果你做的事情得到大多数人的认可。</p><p>​    永远记住在过上自己想要生活的道路上，人永远都不是孤独的。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>个人还是很喜欢小狗钱钱这本书的。我时常会想起这本书的故事，想起吉娅和小狗钱钱，我也时常在思考自己脑海的巨人和侏儒，我也在对抗侏儒，站在巨人的肩膀上思考。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      理财的入门书,强烈推荐
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://lazytime.site/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书" scheme="https://lazytime.site/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>《穷爸爸与富爸爸》读书笔记</title>
    <link href="https://lazytime.site/2021/01/18/licai/"/>
    <id>https://lazytime.site/2021/01/18/licai/</id>
    <published>2021-01-18T15:46:05.000Z</published>
    <updated>2021-01-18T15:47:10.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《穷爸爸与富爸爸》读书笔记"><a href="#《穷爸爸与富爸爸》读书笔记" class="headerlink" title="《穷爸爸与富爸爸》读书笔记"></a>《穷爸爸与富爸爸》读书笔记</h1><p>[TOC]</p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这本书是我在地铁上的碎片时间用Kindle看完的，也是这本书我才知道“财商”这东西，说实话，中国人的理财方面的知识确实是过于缺乏，而财商则是一生受用的知识，学完这本书之后，我最大感受是一定不能局限在自己的专业知识，俗话说技多不压身，但是也不需要样样精通，只需要找到自己最擅长的事情并且不断的投资自己的大脑。这个时代只有不断学习并且学的够快你才会有竞争力。</p><a id="more"></a><h2 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h2><ol><li>学校的教育让我们成为一个很好的雇员，而缺少了学校的庇佑，我们的理财却依然如一个小孩</li><li>财商是中国人最为欠缺的一门课，如果不知道怎么管理你的钱包，推荐看看这本书</li><li>富爸爸有富人的思想所以是富人，穷爸爸有“穷人”的思想所以很穷</li><li>学习财商知识，让自己终身受用，年轻更应该投资自己的大脑</li><li>整理自己的读书笔记=-=</li></ol><h2 id="推荐指数："><a href="#推荐指数：" class="headerlink" title="推荐指数："></a>推荐指数：</h2><p>入门理财必读书籍，强烈推荐。（另一本是《小狗钱钱》）</p><p>如果你不知道怎么管理自己的财产，以及如果连财产究竟是什么，那么一定要好好读一读这本书</p><h2 id="知识导图："><a href="#知识导图：" class="headerlink" title="知识导图："></a>知识导图：</h2><p>思维导图真的是一个很好的东西，这里分享一个写的非常棒的思维导图：</p><p><span class="exturl" data-url="aHR0cHM6Ly9tdWJ1LmNvbS9kb2MvZXhwbG9yZS8zMjA5NCNt" title="https://mubu.com/doc/explore/32094#m">https://mubu.com/doc/explore/32094#m<i class="fa fa-external-link"></i></span></p><p>个人的思维导图（有参考上面的导图）：</p><p><span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvNm5lZDV2MFY2aVI=" title="https://share.mubu.com/doc/6ned5v0V6iR">https://share.mubu.com/doc/6ned5v0V6iR<i class="fa fa-external-link"></i></span></p><h2 id="本书作者的思想："><a href="#本书作者的思想：" class="headerlink" title="本书作者的思想："></a>本书作者的思想：</h2><ol><li>激励人们学更多的知识</li><li>万丈高楼平地起，希望告诫人们打好基础</li><li>告诉每个人都能取得巨大的财富</li><li>告诉人们条条大路通罗马</li><li>告诉人们财务的知识不是深奥的科学</li></ol><h2 id="文章概述："><a href="#文章概述：" class="headerlink" title="文章概述："></a>文章概述：</h2><p>文章开头作者开门见山的讲了自己有一个穷爸爸和一个富爸爸，富爸爸敢于尝试，积极思考，选择人迹罕至的道路。而穷爸爸则像大部分人一样努力工作，却永远都逃离不了“老鼠赛跑”：</p><h3 id="钱的力量："><a href="#钱的力量：" class="headerlink" title="钱的力量："></a>钱的力量：</h3><p>作者用自己亲身经历的一堂课：小时候为了向富爸爸请教富裕的窍门，而富爸爸用生活和雇员，以及刁难让作者体会到了生活的力量，金钱的重要性，而我们多数人的生活都是为了赚钱，所以很多人把生活=赚钱，所以他们活的很累，因为他们用钱来对付自己，下面简单概括一下钱的力量：</p><ol><li>老鼠赛跑，什么是老鼠赛跑：通过努力工作换取报酬，用报酬支出来补贴家用，越高的薪水带来越高的支出，就像老鼠在笼子里赛跑，虽然他每年不断的努力奔跑，但是始终脱离不了牢笼。</li><li>穷人由于欲望和恐惧为了富人努力工作，所以穷人每天都在思考如何获得更高的报酬，而富人则想用越低的成本雇佣人来为自己工作。工资的高低一定是由于你能创造多少的价值。</li><li>如果失去工作，那么我将无法存活，仔细思考如果没有了工作，没有了收入，你的资产项可以支撑你存活多久。</li><li>不需要自己亲自参与而能够为自己创造价值，这就是钱的力量</li></ol><h3 id="什么是资产："><a href="#什么是资产：" class="headerlink" title="什么是资产："></a>什么是资产：</h3><p>首先要确定的一点是：钱不是财产，而是大家认可的有价值的物品。</p><ol><li>不需要本人到场能正常运作的业务</li><li>股票、债券、共同基金</li><li>能产生收入的房地产</li><li>版税：音乐、手稿、专利</li><li>其他任何有价值、可产生收入或有增值潜力并有很好销路的东西</li></ol><h3 id="为什么要学习财务知识："><a href="#为什么要学习财务知识：" class="headerlink" title="为什么要学习财务知识："></a>为什么要学习财务知识：</h3><ol><li>聪明人总是雇佣比自己更聪明的人</li><li>你的努力工作造就了别人的事业而不是自己的事业</li><li>无知造就恐惧，知识创造财富</li><li>学校教会每一个人成为一个完美的打工人，却从没有任何课程教会你如何创造财富。</li><li>学习财务能让你更清晰的了解财务报表，把控未来趋势</li><li>单靠一项专业技能，只能通过努力工作来获得资产。</li></ol><h3 id="关注自己的事业："><a href="#关注自己的事业：" class="headerlink" title="关注自己的事业："></a>关注自己的事业：</h3><ol><li>麦当劳的创始人虽然干过店员，卖过汉堡，但是他真正的资产项是房地产，他让店铺开往世界各地</li><li>虽然麦当劳的汉堡做的不是最好吃的，许多专业人员能做出更好吃的汉堡，但是他用最极致的服务和热情赢得顾客的青睐</li><li>从长远来看，教育比金钱更有价值</li><li>寻找职业的时候，唯一能得到的就是学到什么，得到什么技能 </li><li>人只靠一项专业技能是很难活下去的，不要将眼光局限于自己的职业</li><li>鼓励工作要跳出自己的舒适圈，同时尝试多个部门的工作</li></ol><h3 id="穷人和富人的挣钱方式对比："><a href="#穷人和富人的挣钱方式对比：" class="headerlink" title="穷人和富人的挣钱方式对比："></a>穷人和富人的挣钱方式对比：</h3><table><thead><tr><th>富人</th><th>穷人</th></tr></thead><tbody><tr><td>1. 挣钱</td><td>1. 挣钱</td></tr><tr><td>2. 支出</td><td>2. 纳税</td></tr><tr><td>3. 纳税</td><td>3. 支出</td></tr></tbody></table><h3 id="小鸡思想："><a href="#小鸡思想：" class="headerlink" title="小鸡思想："></a>小鸡思想：</h3><ol><li>天要塌下来了，厕所坏了：过多的思考和顾虑，有可能会让自己错失一个良好的机会</li><li>把“不想要”变成“想要”：我不想要平庸的生活，我不想要努力的工作让老板财富自由，我想要更多的时间来支付自己，用更少的时间来支付工作。</li><li>如果没有 <strong>一点点的贪婪</strong>，那么小鸡就会不断的找上门，让你懒惰和舒适</li><li>我们或多或少会存在某种自我怀疑，而正是自我怀疑让我们趋利避害，聪明并不是前进的阻碍，更多的是缺乏自信，成功往往眷顾于有勇气并且有自信的人。</li><li>正是因为小鸡的“无知”和“自大”，当失去金钱的时候，他们往往认为<strong>这不重要</strong></li><li>小鸡永远选择总是为了他人打工<ol><li>为老板打工</li><li>为房东打工</li><li>为了爱情打工</li></ol></li></ol><h3 id="财商："><a href="#财商：" class="headerlink" title="财商："></a>财商：</h3><ol><li>第一是会计知识<ol><li>掌握财务报表，分析业务优势和弱势</li><li>如果想建立自己的帝国，财务知识是十分重要的</li></ol></li><li>致富并<strong>不以牺牲舒适生活</strong>为代价地支付账单</li><li>用资产项和现金流支付和购买想要的物品，而使用积蓄。</li><li><strong>先予后取</strong>：先有付出才有收获：不管是出于贫穷还是富裕，乐善好施永远是最好的手段</li><li><strong>首先支付自己</strong>，自律的力量：自律的人才谈得上改变自己：时间是人生最为宝贵的资产<ol><li>养成最后将金钱支付给别人的思想，让恐惧和包袱留给他人</li><li>用最小的利息和贷款来偿还债务，因为时间是最大的杀手</li></ol></li><li>不要背上<strong>数额过大的财务包袱</strong><ol><li>中国人买房，年纪轻轻就背上债务，所以他们最终只能选择不断的努力工作来换取报酬。</li><li>永远不要让你的老板知道你有债务压力</li><li>警惕容易被误认为资产的负债，高昂的手机，奢侈品，一切随时间贬值的物品</li></ol></li></ol><h3 id="付诸行动："><a href="#付诸行动：" class="headerlink" title="付诸行动："></a>付诸行动：</h3><ol><li>我需要一个超现实的理由：精神的力量。强烈的愿望唤醒无限的动力</li><li>每天作出自己的选择：选择的力量，这是人们希望生活在一个自由国度的主要原因。我们需要<strong>有作出选择的权力</strong>。</li><li>慎重地选择朋友：关系的力量。选择能帮助你创造资产给出好的建议的朋友，同时不要把时间投资在低质量的社交，这对你没有任何好处。</li><li>掌握一种模式，然后再学习一种新的模式：<strong>快速学习的力量</strong>。这个时代不需要你去学习太多的东西，而是看你学的有多快。寻找捷径是最好的学习方式</li><li>首先支付自己：自律的力量。用紧张的资金来刺激自己赚钱的想法和渠道。创造你自己的事业所必备的最重要的三种管理技能是：<ol><li>现金流量管理；</li><li>人事管理；</li><li>个人时间管理。</li></ol></li><li>给你的经纪人以优厚报酬：好建议的力量。寻找一个称职的经济人来帮助你发掘潜在的资产项。</li><li>做一个印第安给予者‛：无私的力量。在得到任何想要的物品之前，你必须先得进行付出</li><li>资产用来购买奢侈品：集中的力量</li><li>对英雄的崇拜：神话的力量。</li><li>先予后取：给予的力量。要想获得任何东西之前，你需要付出代价。</li></ol><h2 id="开始之前需要做的事情"><a href="#开始之前需要做的事情" class="headerlink" title="开始之前需要做的事情"></a>开始之前需要做的事情</h2><ol><li><strong>停下你手头的活儿。</strong>思考什么才是最正确的事情，对你最有帮助的事情，神志不清不仅没有效率并且没有成果</li><li>投资购买能够投资自己头脑的书，并且反复的思考和实践</li><li>寻找一桩好的生意，一家好的企业，一个合适的人，一位合适的投资者，或任何类似的东西，就如同约会一样。</li><li>小心<strong>小鸡思想</strong>充斥你的脑海，不要成为行动矮子。</li></ol><h2 id="个人规避负债的一些方法："><a href="#个人规避负债的一些方法：" class="headerlink" title="个人规避负债的一些方法："></a>个人规避负债的一些方法：</h2><p>二手书：</p><p>以前个人是很抵制二手书的，但是最近开始逐渐改观，发现有的有些书被定义为二手实在是埋没了好书，个人从以下几个平台实际收过几本品相都不错的书：</p><ol><li>闲鱼：有很多卖家（包括我）经常挂着很多书没法卖出去，很显然，现代人看纸质书的终究是小部分。</li><li>多抓鱼：目前个人买书的主力平台，另外就是推荐买书一定要来这个平台，非常不错。</li><li>转转：一直觉得这平台一般，图书和主要页面割裂感太严重了，不过转转的书确实都不错，值得推荐（如果不介意有些书没有封面的话），基本来买的书内页都是比较干净整洁的。</li></ol><p>电子产品：</p><p>不知道有没有人发现，现在电子产品已经如同空气一般进入我们的生活。视频，网络小说，自媒体，综艺，手游等等一系列的物品已经充斥了我们的脑海，这些东西之所以吸引我们是因为他不需要思考。但是永远要记住，虚假的快乐是暂时的，而知识带来的快乐却是无穷的。</p><p>减少玩手机的时间，你会发现你的时间比你想象的要多很多。</p><p>烟、酒、槟榔：</p><p>很多人跟我说这三样花的钱攒十几年都够买辆车了，想了下好像确实是，这三样东西可以说是中国人际交往的三大神器，但是个人实在是不喜欢这些东西，曾经有认真去学过抽烟，但是确实没有GET到点。</p><p>从资产的角度来看，这些东西都是负债</p><p>手机：</p><p>个人不知道超过2000以上的手机是什么样的，一般买手机都是等产品快要退市或者非常大的优惠力度的情况下才会想去换新。</p><p>电脑：</p><p>个人建议是一步到位，一定要思考清楚自己是否是冲动消费</p><p>电子书：</p><p>个人推荐使用 <strong>ipad + kindle</strong> 的组合，ipad用来做笔记和看pdf，kindle在地铁和通勤碎片时间看书，效率还是挺高的。</p><p>理财：</p><ol><li>寻找一个能长期增值的物品，比如基金。</li><li>不要讲钱放在一个篮子，将钱分成好几份，可以参考标准普尔家庭资产象限图</li><li>存钱不是理财，只会让钱的力量越来越弱</li><li>最好能开创自己的副业，尽量找一种不需要自己参与的方式。</li></ol><h2 id="收获："><a href="#收获：" class="headerlink" title="收获："></a>收获：</h2><ol><li>用<strong>金钱来投资大脑</strong>永远是稳赚不赔的买卖。</li><li>不要轻易背上负债，哪怕一分钱也要思考为什么要付出你的资产</li><li>穷人用努力劳动和跳槽以期望获得更多的财富，而富人则雇佣比自己更聪明的人来为自己工作</li><li>只有用思考代替情感，才算是迈上财富之路的第一步。</li><li>最容易的道路往往会越走越艰难，而最艰难的道路往往会越走越容易</li><li>不要用金钱的力量来对付自己，而是要让金钱来为你工作</li><li>穷人有不好的习惯，一个普遍的坏习惯是随便动用储蓄</li><li>你的世界就是你的一面镜子，拥有美好的心灵好事都会发生在你的身边</li><li>穷人之所以穷是因为穷人有不良的用钱习惯。</li><li>要学会驾驭风险而不是规避风险，富人往往是最会规避风险的人</li><li>失败是成功之母，没有失败就没有成功，没有人能保证永远的一帆风顺，敢于承担风险并且挑战来减少风险，这才是成为强者的道路</li><li>让钱为我们工作，这才是真正的力量。如果你为钱工作，你就把力量给了雇主，如果让钱为你工作，你就控制了这种力量</li><li>一件事情的成败并不重要，重要的是你们曾经尝试过</li><li>改变自己比改变他人更容易</li></ol><h2 id="精选短句："><a href="#精选短句：" class="headerlink" title="精选短句："></a>精选短句：</h2><p>一些人在生活推着他转的同时，抓住生活赐予的每个 机会；而另一些人则听任生活的摆布，不去与生活抗 争。他们埋怨生活的不公平，因此就去讨厌老板，讨 厌工作，讨厌家人，他们不知道生活也赐予了他们机 会。</p><p>如果你是那种没有毅力的人，你 将放弃生活对你的每一次推动。这样的话，你的一生 会过得稳稳当当，不做错事、随时准备着当永远不会 发生的事情发生时解救自己，然后，在无聊中老死。 你会有许多像你一样的朋友，希望生活稳定、处世无 误。但事实是，你对生活屈服了，不敢承担风险。你 的确想赢，但失去的恐惧超过了成功的兴奋，事实是 从内心深处，你就始终认为你不可能，所以你选择了稳定。</p><p>重要的是运用这些感情为 你们的长期利益谋利，<strong>别让你们的感情控制了思想</strong>。 大多数人让他们的恐惧和贪婪之心来支配自己，这是 无知的开始。因为害怕或贪婪，大多数人生活在挣工 资、加薪、劳动保护之中，而不问这种感情支配思想 的生活之路通向哪里。</p><p>希望你们永远记住这次谈话，我希望你们多想想 马丁太太，多想想那头驴。永远别忘记，会有两种感 情——<strong>恐惧和欲望</strong>，使你落入一生中最大的陷阱，如 果你让它们来控制自己的思想，你的一生就会生活在 恐惧中，<strong>从不探求你的梦想，这是残酷的。为钱工作， 以为钱能买来快乐，这也是残酷的。</strong>半夜醒来想着许多的账单要付是一种可怕的生活方式，<strong>以工资的高低 来安排生活不是真正的生活</strong>。这些都很残酷，而我希 望你们能避开这些陷阱，如果可能的话，别让这些问 题在你们身上发生，<strong>别让钱支配你们的生活</strong>。</p><p><strong>如果人们灵活一些，保持开放的头脑并 不断学习，他们将在这些变化中一天比一天富有。</strong>如 果认为钱能解决一切问题，恐怕这些人的日子就会不 太好过。知识才能解决问题并创造财富，不<strong>是凭财务 知识挣来的钱很快就会消失</strong>。</p><p><strong>许多人只会管理没有自己聪明的人或者没有自己能力强的人</strong>，比如工作中的下属。许多中层管理人员一直停留在中级管理层而得不到提升，就是因为他们只知道如何同职位低于自己的人一道工作，却不善于同比自己职位高的人一道工作。真正的技能是能够管理在某些技术领域比你更聪明的人并给他们以优厚的报酬。这也是公司拥有一个顾问委员会的原因，你应该有这种顾问，而这也是你的财商。</p><h2 id="精句摘录："><a href="#精句摘录：" class="headerlink" title="精句摘录："></a>精句摘录：</h2><ol><li>真实地看待你的感情，以你喜欢的方式运用你的头脑和感情，而不是与自己作对。</li><li>我想教你们学会<strong>支配钱</strong>，而不是害怕它，这在 学校里是学不到的。如果你不学，你就会变成钱的<strong>奴隶</strong>。</li><li>你有收入时得<strong>交税</strong>，当你消费时也得<strong>交税</strong>。 你存钱时得<strong>交税</strong>，你死时还得<strong>交税</strong></li><li>穷人和破产者之间的区别是：破产是暂时的，而贫穷是永 久的。</li><li>如果你需要一本百科全书，千万别找百科全书推销员。</li><li>富人买入资产，中产阶级和穷人买入负债</li><li>最重要的专门技能是销售和懂得市场营销。销售 技能是个人成功的基本技能，它涉及到与其他人的交 往，包括与顾客、雇员、老板、配偶和孩子的交往。 而交际能力，如书面表达、口头表达及谈判能力等对 于一个人的成功更是至关重要。</li><li><strong>世界上到处都是有才华的穷人</strong></li><li>如果你坚持不愿意学习新东西，愿意仅在你的领 域里成为专家，那么你一定要确信你工作的公司是有 工会的，并且工会会保护专门人才。</li><li>在选择某种特定的职业之前或者在陷入为生计而 忙碌工作的‚老鼠赛跑‛之前，要仔细看看脚下的道 路，弄清楚自己到底需要获得什么技能。</li><li>你把金钱看得越重要，你就会为金钱工作得越辛苦。如果你能够懂得‘金<strong>钱不是真实的资产</strong>’这一道理，你就会更快地富起来。</li><li>如果你不能下定决心，就永远也学不会如何赚钱。要知道，机会总是转 瞬即逝，要想成功必须迅速作出决定。</li><li>但生活 可不是这样的教法。你知道吗，生活才是最好的老师， 大多数时候，生活并不对你说些什么，它只是推着你 转，每一次推，它都像是在说‘喂，醒一醒，有些东 西我想让你学学‛</li><li>假如你弄懂了生活这门大课， 做任何事情你都会游刃有余。但就算你学不会，生活照样会推着你转</li></ol><h2 id="文章感悟："><a href="#文章感悟：" class="headerlink" title="文章感悟："></a>文章感悟：</h2><pre><code>要记得投资和赌博是两码事，投资是由目标可预见性的资产增资行为，而赌博则是把钱投到一些高风险的收益产品的然后进行祈祷。这是由本质区别的，而很多人却是混为一谈。努力提高自己的财商知识并且付诸行动，我们才不会像书中的小鸡一样，只求活着安逸或者舒适。这本书的作者是一个房地产的老板，对于书中的大部分内容，对我一个阶级社会来说可能并没有什么特别大的作用，穷人依旧是穷人，而富人则会越来越富，但是这本书不是告诉**你怎么成为一个富人，也不是告诉你怎么投资**，而是用各种方式告诉你怎么样从根本上转变思想。在获得回报之前必须要付出行动，只有行动和实践，同时，在年轻的时候一定要多存钱，对于一些冒险的行为最好在30岁之前完成，因为你还有东山再起的机会。</code></pre><h1 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h1><p>你不理财，财不理你，看再多的书不如从最简单的行动开始，比如从现在开始管理自己的钱财，下面有几种个人实践的参考方式：</p><ul><li><strong>标准普尔家庭资产象限图</strong>：可以去看看相关资料，挺有帮助的</li><li><strong>鲨鱼记账</strong>：个人觉得非常好用的 APP，目前已经坚持将近半年</li><li><strong>记账小本本</strong>：能揣兜里最好，时不时还可以翻一翻</li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>我认为书中有一句说的很好，“做你心中认为正确的事情，因为你不管怎么做都会受到批评，如果你做的话，会受到指责，如果你不做，还是会受到指责”。最重要的事情不是你曾经想过，而是你曾经想过并且真正去做过，这本书是推动你去做你想做的事情，而不是每天去观察别人的美好，改变世界和改变他人，以及改变他人在如今每一个都几乎不可能，我们最能做到，能做到最好的，就是改变自己。</p><p>文章篇幅较长，感谢观看。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      理财入门书籍阅读,关注现金流
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://lazytime.site/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="理财" scheme="https://lazytime.site/tags/%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter压力测试回顾(四)</title>
    <link href="https://lazytime.site/2021/01/18/jmeter-test4/"/>
    <id>https://lazytime.site/2021/01/18/jmeter-test4/</id>
    <published>2021-01-18T15:35:19.000Z</published>
    <updated>2021-01-18T15:45:14.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾Jmeter压力测试（四）"><a href="#回顾Jmeter压力测试（四）" class="headerlink" title="回顾Jmeter压力测试（四）"></a>回顾Jmeter压力测试（四）</h1><p>下面部分为非GUI部分的内容实战。</p><a id="more"></a><h2 id="非GUI部分"><a href="#非GUI部分" class="headerlink" title="非GUI部分"></a>非GUI部分</h2><h2 id="阿里云安装jmeter（jmeter5）"><a href="#阿里云安装jmeter（jmeter5）" class="headerlink" title="阿里云安装jmeter（jmeter5）"></a>阿里云安装jmeter（jmeter5）</h2><ol><li>配置JDK1.8的环境，Linux配置Jdk请自行查找相关资料</li><li>阿里云安装jmeter，移动到自己喜欢的位置</li></ol><blockquote><p>下载方式：<code>wget https://apachemirror.sg.wuchna.com//jmeter/binaries/apache-jmeter-5.4.tgz</code></p></blockquote><ol start="3"><li>启动非GUI测试：我们可以在window上使用gui版本编写好对应的jmx，然后再执行压测。</li></ol><h3 id="Jmeter非GUI界面-参数讲解-必须掌握"><a href="#Jmeter非GUI界面-参数讲解-必须掌握" class="headerlink" title="Jmeter非GUI界面 参数讲解(必须掌握)"></a>Jmeter非GUI界面 参数讲解(必须掌握)</h3><p>在进行实战之前了解一下基本的参数：</p><p>官方配置文件地址： <span class="exturl" data-url="aHR0cDovL2ptZXRlci5hcGFjaGUub3JnL3VzZXJtYW51YWwvZ2V0LXN0YXJ0ZWQuaHRtbA==" title="http://jmeter.apache.org/usermanual/get-started.html">http://jmeter.apache.org/usermanual/get-started.html<i class="fa fa-external-link"></i></span></p><h4 id="基础命令参数："><a href="#基础命令参数：" class="headerlink" title="基础命令参数："></a>基础命令参数：</h4><ul><li><strong>-h</strong>     帮助</li><li><strong>-n</strong>     非GUI模式</li><li><strong>-t</strong>     指定要运行的 JMeter 测试脚本文件</li><li><strong>-l</strong>      记录结果的文件 每次运行之前，(要确保之前没有运行过,即xxx.jtl不存在，不然报错)</li><li><strong>-r</strong>      Jmter.properties文件中指定的所有远程服务器</li><li><strong>-e</strong>      在脚本运行结束后生成html报告</li><li><strong>-o</strong>      用于存放html报告的目录（目录要为空，不然报错）</li></ul><p>案例如下：</p><h3 id="如何使用linux-jmeter压测？"><a href="#如何使用linux-jmeter压测？" class="headerlink" title="如何使用linux jmeter压测？"></a>如何使用linux jmeter压测？</h3><p>下面的教程为构建一个最简单的压测方式：</p><ol><li>构建一个简单的http压测请求，使用如下的方式：</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210118223554.png" alt=""></p><ol start="2"><li>保存为<code>.jmx</code>后缀的文件</li><li>将文件的内容上传到服务器，命令行进入到对应的Bin目录下面</li><li>执行命令：<code>./jmeter -n -t ./plan/LinuxPlan.jmx -l ./plan/result.jtl -e -o ./resultreport</code></li></ol><blockquote><p>上面的命令效果如下：：</p><p>-l 指定了结果文件的存放位置</p><p>-o 指定html报告的目录位置</p><p>-t 指定了脚本文件的存放位置</p><p>-n 代表使用非GUI模式运行</p></blockquote><h3 id="Jmeter压测减少资源使用的一些建议，即压测结果更准确"><a href="#Jmeter压测减少资源使用的一些建议，即压测结果更准确" class="headerlink" title="Jmeter压测减少资源使用的一些建议，即压测结果更准确"></a>Jmeter压测减少资源使用的一些建议，即压测结果更准确</h3><p>1、使用非GUI模式：jmeter -n -t test.jmx -l result.jtl</p><p>2、少使用Listener， 如果使用-l参数，它们都可以被删除或禁用。</p><p>3、在加载测试期间不要使用“查看结果树”或“查看结果”表监听器，只能在脚本阶段使用它们来调试脚本。</p><p>4、包含控制器在这里没有帮助，因为它将文件中的所有测试元素添加到测试计划中。]</p><p>5、不要使用功能模式,使用CSV输出而不是XML</p><p>6、只保存你需要的数据,尽可能少地使用断言</p><p>7、如果测试需要大量数据，可以提前准备好测试数据放到数据文件中，以CSV Read方式读取。</p><p>8、用内网压测，减少其他带宽影响压测结果</p><p>9、如果压测大流量，尽量用多几个节点以非GUI模式向服务器施压</p><p>官方推荐 ：<span class="exturl" data-url="aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9qbWV0ZXIvdXNlcm1hbnVhbC9iZXN0LXByYWN0aWNlcy5odG1sI2xlYW5fbWVhbg==" title="http://jakarta.apache.org/jmeter/usermanual/best-practices.html#lean_mean">http://jakarta.apache.org/jmeter/usermanual/best-practices.html#lean_mean<i class="fa fa-external-link"></i></span></p><h2 id="Jmeter压测结果聚合报告分析"><a href="#Jmeter压测结果聚合报告分析" class="headerlink" title="Jmeter压测结果聚合报告分析"></a>Jmeter压测结果聚合报告分析</h2><p>一般情况下，我们可以根据<code>-o</code>这个参数在Linux中生成对应的聚合报告，根据聚合报告我们可以分析压测的结果</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210118224902.png" alt=""></p><p>根据上面的聚合报告，我们可以从<code>index.html</code>当中看到基本的聚合报告分析内容和结果。</p><h3 id="dashboard结果分析："><a href="#dashboard结果分析：" class="headerlink" title="dashboard结果分析："></a>dashboard结果分析：</h3><p>​<br>    2）APDEX(Application performance Index)<br>        apdex:应用程序性能指标,范围在0~1之间，1表示达到所有用户均满意<br>        T(Toleration threshold)：可接受阀值<br>        F(Frustration threshold)：失败阀值</p><pre><code>3）Requests Summary    OK:成功率    KO:失败率4）Statistics 统计数据    lable:sampler采样器名称    samples:请求总数，并发数*循环次数    KO:失败次数    Error%:失败率    Average:平均响应时间    Min:最小响应时间    Max:最大响应时间    90th pct: 90%的用户响应时间不会超过这个值（关注这个就可以了）    2ms,3ms,4,5,2,6,8,3,9    95th pct: 95%的用户响应时间不会超过这个值    99th pct: 99%的用户响应时间不会超过这个值 (存在极端值)    throughtput:Request per Second吞吐量 qps    received:每秒从服务器接收的数据量    send：每秒发送的数据量</code></pre><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210118224707.png" alt=""></p><h4 id="Test-and-Report-informations"><a href="#Test-and-Report-informations" class="headerlink" title="Test and Report informations"></a>Test and Report informations</h4><ul><li>Source file：jtl文件名</li><li>Start Time ：压测开始时间</li><li>End Time ：压测结束时间</li><li>Filter for display：过滤器</li><li>Lable:sampler：采样器名称</li></ul><h4 id="APDEX-Application-performance-Index"><a href="#APDEX-Application-performance-Index" class="headerlink" title="APDEX(Application performance Index)"></a>APDEX(Application performance Index)</h4><p>apdex:应用程序性能指标,范围在0~1之间，1表示达到所有用户均满意</p><ul><li>T(Toleration threshold)：可接受阀值</li><li>F(Frustration threshold)：失败阀值</li></ul><h4 id="Requests-Summary"><a href="#Requests-Summary" class="headerlink" title="Requests Summary:"></a>Requests Summary:</h4><ul><li>OK:成功率</li><li>KO:失败率</li></ul><h4 id="Statistics-统计数据"><a href="#Statistics-统计数据" class="headerlink" title="Statistics 统计数据"></a>Statistics 统计数据</h4><p>这一部分是主要内容：</p><ul><li>lable: sampler的名称</li><li>Samples: 一共发出去多少请求,例如10个用户，循环10次，则是 100</li><li>Average: 平均响应时间</li><li>Median: 中位数，也就是 50％ 用户的响应时间</li><li>90% Line : 90％ 用户的响应不会超过该时间 （90% of the samples took no more than this time. The remaining samples at least as long as this）</li><li>95% Line : 95％ 用户的响应不会超过该时间</li><li>99% Line : 99％ 用户的响应不会超过该时间</li><li>min : 最小响应时间</li><li>max : 最大响应时间</li><li>Error%：错误的请求的数量/请求的总数</li><li>**Throughput： 吞吐量——默认情况下表示每秒完成的请求数（Request per Second) 可类比为qps<pre><code>KB/Sec: 每秒接收数据量**</code></pre></li></ul><h3 id="charts讲解"><a href="#charts讲解" class="headerlink" title="charts讲解"></a>charts讲解</h3><h4 id="Over-Time（随着时间的变化）"><a href="#Over-Time（随着时间的变化）" class="headerlink" title="Over Time（随着时间的变化）"></a>Over Time（随着时间的变化）</h4><ul><li>Response Times Over Time：响应时间变化趋势</li><li>Response Time Percentiles Over Time (successful responses)：最大，最小，平均，用户响应时间分</li><li>Active Threads Over Time：并发用户数趋势</li><li>Bytes Throughput Over Time：每秒接收和请求字节数变化，蓝色表示发送，黄色表示接受</li><li>Latencies Over Time：平均响应延时趋势</li><li>Connect Time Over Time    ：连接耗时趋势</li></ul><h4 id="Throughput"><a href="#Throughput" class="headerlink" title="Throughput"></a>Throughput</h4><ul><li>Hits Per Second (excluding embedded resources):每秒点击次数</li><li>Codes Per Second (excluding embedded resources)：每秒状态码数量</li><li>Transactions Per Second：即TPS，每秒事务数</li><li>Response Time Vs Request：响应时间和请求数对比</li><li>Latency Vs Request：延迟时间和请求数对比</li></ul><h4 id="Response-Times"><a href="#Response-Times" class="headerlink" title="Response Times"></a>Response Times</h4><ul><li>Response Time Percentiles：响应时间百分比</li><li>Response Time Overview：响应时间概述</li><li>Time Vs Threads：活跃线程数和响应时间</li><li>Response Time Distribution：响应时间分布图</li></ul><h1 id="安装常见问题"><a href="#安装常见问题" class="headerlink" title="安装常见问题"></a>安装常见问题</h1><p>问题1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz95j86y235aroi85ht0Z bin]# .&#x2F;jmeter-server</span><br><span class="line">Created remote object: UnicastServerRef2 [liveRef: [endpoint:[:39308](local),objID:[24e78a63:16243c70661:-7fff, 7492480871343944173]]]</span><br><span class="line">Server failed to start: java.rmi.RemoteException: Cannot start. Unable to get local host IP address.; nested exception is:</span><br><span class="line">java.net.UnknownHostException: iZwz95j86y235aroi85ht0Z: iZwz95j86y235aroi85ht0Z: Name or service not known</span><br><span class="line">An error occurred: Cannot start. Unable to get local host IP address.; nested exception is:</span><br><span class="line">java.net.UnknownHostException: iZwz95j86y235aroi85ht0Z: iZwz95j86y235aroi85ht0Z: Name or service not known</span><br></pre></td></tr></table></figure><p>解决方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hostname  命令获取机器名称，追加一个映射  iZwz95j86y235aroi85ht0Z</span><br><span class="line">vim &#x2F;etc&#x2F;hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">120.79.160.143 iZwz95j86y235aroi85ht0Z</span><br><span class="line"></span><br><span class="line">windows用户 修改c:\windows\system32\drivers\etc\hosts文件，增加一条域名 与IP的映射</span><br></pre></td></tr></table></figure><ol start="2"><li>问题如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz95j86y235aroi85ht0Z bin]# .&#x2F;jmeter-server</span><br><span class="line">Server failed to start: java.rmi.server.ExportException: Listen failed on port: 0; nested exception is:</span><br><span class="line">java.io.FileNotFoundException: rmi_keystore.jks (No such file or directory)</span><br><span class="line">An error occurred: Listen failed on port: 0; nested exception is:</span><br><span class="line">java.io.FileNotFoundException: rmi_keystore.jks (No such file or directory)</span><br></pre></td></tr></table></figure><p>解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">拥有RMI over SSL的有效密钥库，或者禁用了SSL。</span><br><span class="line">1、禁用SSL</span><br><span class="line">  jmeter.property里面 server.rmi.ssl.disable 改为 true，表示禁用</span><br></pre></td></tr></table></figure><p>3、问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ949uw2xehZ bin]# .&#x2F;jmeter</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error&#x3D;&#39;Cannot allocate memory&#39; (errno&#x3D;12)</span><br><span class="line">#</span><br><span class="line"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"># Native memory allocation (mmap) failed to map 1073741824 bytes for committing reserved memory.</span><br><span class="line"># An error report file with more information is saved as:</span><br><span class="line"># &#x2F;usr&#x2F;local&#x2F;jmeter&#x2F;apache-jmeter-4.0&#x2F;bin&#x2F;hs_err_pid5855.log</span><br></pre></td></tr></table></figure><p>解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">编辑jmeter</span><br><span class="line">搜索 : &quot;$&#123;HEAP:&#x3D;&quot;-Xms1g -Xmx1g -XX:MaxMetaspaceSize&#x3D;256m&quot;&#125;&quot;</span><br><span class="line">改变初始堆内存和最大堆内存</span><br></pre></td></tr></table></figure><p>4、仅修改 server_port 即可,下面两者一样</p><p>server.rmi.localport=8899 表示slave server启动显示的端口</p><p>server_port=8899  表示master机器要远程连接的端口   即 remote_hosts=xxxx:8899</p><p>5、jmeter 分布式性能测试（多网卡配置）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- jmeter 分布式性能测试（多网卡配置） --&gt;</span><br><span class="line">我们要在多网卡的服务器上开启RMI服务的话必须指定IP，使他们能够在同一个网段内。 </span><br><span class="line"></span><br><span class="line">需要以下几步（假定所有机器都在10.120.11.*网段,agent服务器为linux,controller服务器为windows）：</span><br><span class="line"></span><br><span class="line">1、 修改agent服务器，指定agent机器的IP</span><br><span class="line">修改jmeter-server文件</span><br><span class="line"># vi jmeter-server</span><br><span class="line">修改RMI_HOST_DEF&#x3D;-Djava.rmi.server.hostname&#x3D;xxx.xxx.xxx.xxx(需要连接的IP)</span><br><span class="line"></span><br><span class="line">2、修改server服务器，指定server机器的IP</span><br><span class="line"></span><br><span class="line">修改jmeter.bat文件 </span><br><span class="line"></span><br><span class="line">新增set rmi_host&#x3D;-Djava.rmi.server.hostname&#x3D;10.120.11.214</span><br><span class="line"></span><br><span class="line">修改set ARGS&#x3D;%DUMP% %HEAP% %NEW% %SURVIVOR% %TENURING% %PERM% %DDRAW% %rmi_host%</span><br></pre></td></tr></table></figure><p>6、确定在controller机器上安装jdk,版本和jmeter一致，配置环境变量：Java_home等</p><ul><li><p>在Agent机器上安装jdk，配置环境变量：Java_home和JMeter_home</p></li><li><p>安装目录不要带空格，最好都是简短的英文路径</p></li></ul><p>7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。</p><pre><code>如果使用csv进行参数化，则需要把参数文件在每台slave上拷一份且路径需要设置成一样的。总样本数 = 线程数 * 循环次数 * 执行机总数</code></pre><p>8、连接失败原因排查</p><p>以下步骤进行排查：</p><pre><code>1. jmeter-server是否启动；2. 是否联网 3. ping 服务器IP是否畅通. 4. telnet 端口 192.168.3.10 1099 5. 检查服务器的防火墙是否关闭。 6. 阿里云安全策略是否正常</code></pre><p>9、出现：”could not find ApacheJmeter_core.jar”</p><pre><code>**解决：在Agent机器安装jdk，并设置环境变量**</code></pre><p>10、出现：”Bad call to remote host”</p><p>解决：检查被控制机器上的jmeter-server有没有启动，或者remote_hosts的配置是否正确。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      Jmeter压力测试回顾最后部分
    
    </summary>
    
    
      <category term="压力测试" scheme="https://lazytime.site/categories/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="jmeter" scheme="https://lazytime.site/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter压力测试回顾(三)</title>
    <link href="https://lazytime.site/2021/01/18/jmeter-test3/"/>
    <id>https://lazytime.site/2021/01/18/jmeter-test3/</id>
    <published>2021-01-18T15:35:12.000Z</published>
    <updated>2021-01-18T15:43:54.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾Jmeter压力测试（三）"><a href="#回顾Jmeter压力测试（三）" class="headerlink" title="回顾Jmeter压力测试（三）"></a>回顾Jmeter压力测试（三）</h1><h1 id="GUI实战部分"><a href="#GUI实战部分" class="headerlink" title="GUI实战部分"></a>GUI实战部分</h1><p>通过菜单了解Jmeter大致的内容之后，我们依靠实战来更深入的理解各种功能</p><a id="more"></a><h2 id="线程组的基本使用："><a href="#线程组的基本使用：" class="headerlink" title="线程组的基本使用："></a>线程组的基本使用：</h2><p>准备部分：</p><ol><li>准备一个springBoot项目，或者找一个可以访问的接口，当然最好不要访问一些外网IP，容易误认为攻击封IP</li><li>比如个人写了一个简单的DEMO：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/jmeter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmeterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/runTest1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">testThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello-world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1 添加-&gt;threads-&gt;线程组（控制总体并发）</p><p>案例：如下图所示，添加一个20个线程，循环1次的线程组，在2秒内完成</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109174815.png" alt=""></p><ul><li>线程数：虚拟用户数。一个虚拟用户占用一个进程或线程</li><li>准备时长（Ramp-Up Period(in seconds)）：全部线程启动的时长，比如100个线程，20秒，则表示20秒内100个线程都要启动完成，每秒启动5个线程</li><li>循环次数：每个线程发送的次数，假如值为5，100个线程，则会发送500次请求，可以勾选永远循环    </li></ul><p>2 线程组 -&gt; 添加-&gt; Sampler(采样器) -&gt; Http请求</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109193233.png" alt=""></p><p>一个线程组下面可以增加几个Sampler</p><ul><li>名称：采样器名称</li><li>注释：对这个采样器的描述</li><li>web服务器：<ul><li>默认协议是http</li><li>默认端口是80</li><li>服务器名称或IP ：请求的目标服务器名称或IP地址</li></ul></li><li>路径：服务器URL        </li><li><strong>Use multipart/from-data for HTTP POST</strong> ：当发送POST请求时，使用`Use multipart/from-data方法发送，默认不选中。</li></ul><blockquote><p>吐槽：感觉中间的选框太小了</p></blockquote><p>3 请求-查看测试结果</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109193752.png" alt=""></p><p>如之前介绍菜单所说，还需要增加一个监听器，收集请求的最终结果。</p><p>操作如下：线程组-&gt;添加-&gt;监听器-&gt;察看结果树</p><p>如上图所示，最终的测试结果都是正确，两秒内开启20个线程并发访问，压力还是比较小的。</p><h2 id="断言的基本使用"><a href="#断言的基本使用" class="headerlink" title="断言的基本使用"></a>断言的基本使用</h2><p>上面的案例是一个最简单的线程组的使用，有点类似postMan请求接口。下面了解一下断言是如何使用的。</p><ol><li>增加断言: 线程组 -&gt; 添加 -&gt; 断言 -&gt; 响应断言</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109194054.png" alt=""></p><p>下面增加一个相应的断言，响应断言里面的选择内容如下：</p><p>测试字段：根据测试字段匹配结果，</p><p>中间：apply to(应用范围):<br>    <code>Main sample only:</code> 仅当前父取样器 进行断言，一般一个请求，如果发一个请求会触发多个，否则就使用<code>sub sample</code>（比较少用） </p><p>匹配规则：一些逻辑的匹配规则，比如包含，匹配，相等</p><p>这一块的组合形式比较丰富，下面简单举几个例子：</p><ul><li>响应文本：即响应的数据，比如json等文本</li><li>响应代码：http的响应状态码，比如200，302，404这些</li><li>响应信息：http响应代码对应的响应信息，例如：OK, Found</li><li>Response Header: 响应头</li></ul><p>模式匹配规则：</p><ul><li>包括：包含在里面就成功</li><li>匹配：响应内容完全匹配，不区分大小写</li><li>equals：完全匹配，区分大小写</li></ul><p>断言结果监听器: 线程组-&gt; 添加 -&gt; 监听器 -&gt; 断言结果</p><p>里面的内容是sampler采样器的名称<br>断言失败，查看结果树任务结果颜色标红(通过结果数里面双击不通过的记录，可以看到错误信息)</p><p>2、响应断言案例：</p><p>给出一个请求的信息内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Thread Name:20线程2秒内容完成 1-1</span><br><span class="line">Sample Start:2021-01-09 19:57:43 CST</span><br><span class="line">Load time:1</span><br><span class="line">Connect Time:0</span><br><span class="line">Latency:1</span><br><span class="line">Size in bytes:173</span><br><span class="line">Sent bytes:134</span><br><span class="line">Headers size in bytes:162</span><br><span class="line">Body size in bytes:11</span><br><span class="line">Sample Count:1</span><br><span class="line">Error Count:0</span><br><span class="line">Data type (&quot;text&quot;|&quot;bin&quot;|&quot;&quot;):text</span><br><span class="line">Response code:200</span><br><span class="line">Response message:</span><br></pre></td></tr></table></figure><p>下面创建一个响应断言：</p><p>我们指定响应文本为：Hello-world，测试字段为响应文本，在下方输入<code>hello-world</code>用于增加断言的信息。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109200104.png" alt=""></p><p>在查看結果树里面就可以看到对应的信息内容了</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110135332.png" alt=""></p><p>大小断言：可以断言响应请求里面的size大小，单位为<code>Byte</code></p><p>断言的功能相对比较简单，这里仅仅列出了一些简单案例</p><h2 id="聚合报告分析"><a href="#聚合报告分析" class="headerlink" title="聚合报告分析"></a>聚合报告分析</h2><p>操作方式：新增聚合报告：线程组-&gt;添加-&gt;监听器-&gt;聚合报告（Aggregate Report）</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110135654.png" alt=""></p><p>介绍一下英文版的内容对应列的含义</p><ul><li>lable: sampler的名称</li><li>Samples: 一共发出去多少请求,例如10个用户，循环10次，则是 100</li><li>Average: 平均响应时间</li><li>Median: 中位数，也就是 50％ 用户的响应时间</li><li>90% Line : 90％ 用户的响应不会超过该时间 （90% of the samples took no more than this time. The remaining samples at least as long as this）</li><li>95% Line : 95％ 用户的响应不会超过该时间</li><li>99% Line : 99％ 用户的响应不会超过该时间</li><li>min : 最小响应时间</li><li>max : 最大响应时间</li><li>Error%：错误的请求的数量/请求的总数</li><li>**Throughput： 吞吐量——默认情况下表示每秒完成的请求数（Request per Second) 可类比为qps<pre><code>KB/Sec: 每秒接收数据量**</code></pre></li></ul><p>新增聚合报告之后，就可以在聚合报告里面看到对应的结果，注意聚合报告的内容都是累加的</p><h2 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h2><p>如果想要设置一些常用的变量配置放到当前的线程组里面，可以使用如下的方式</p><p>作用：</p><p>很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用(比如服务器地址)</p><p>操作方法：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110165045.png" alt=""></p><p>线程组-&gt;add -&gt; Config Element(配置原件)-&gt; User Definde Variable（用户定义的变量）</p><p>如上图配置完成之后，引用方式如下：${XXX}，在接口中变量中使用，如下所示：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110165240.png" alt=""></p><h2 id="CSV可变参数"><a href="#CSV可变参数" class="headerlink" title="CSV可变参数"></a>CSV可变参数</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110170707.png" alt=""></p><p>1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; CSV data set config (CSV数据文件设置)</p><p>我们在电脑的任意位置配置txt文件，配置方式如下：</p><p>新建一个txt文件，同时注意使用utf-8的编码进行保存。</p><p>2、在读取的配置文件里面，同时使用多个自定义参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">username,password,gender</span><br><span class="line">zhangsan,test001,1</span><br><span class="line">lisi,test002,2</span><br><span class="line">wanglaowu,test003,2</span><br><span class="line">laoliu,test004,1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110183037.png" alt=""></p><p>接着我们可以唉csv可变参数里面按照要求进行配置：</p><ul><li>文件名：csv文件的名字</li><li>文件编码：当前文件的编码格式</li><li>变量名称：对应标头，用逗号分隔</li><li>忽略首行：蛀牙要设置变量名称的时候才会生效</li><li>分隔符：默认分隔符为逗号</li><li>是否带有引号：(未验证)</li><li>遇到文件结束符之后再次循环：意味着是否需要重复的读取文件的内容</li><li>遇到文件结束符终止线程：只读一遍文件</li><li>线程共享模式：默认应用当前<strong>所有</strong>线程组</li></ul><h2 id="JDBC-request压测Mysql"><a href="#JDBC-request压测Mysql" class="headerlink" title="JDBC request压测Mysql"></a>JDBC request压测Mysql</h2><h3 id="简单应用入门："><a href="#简单应用入门：" class="headerlink" title="简单应用入门："></a>简单应用入门：</h3><p>在正式进行使用之前，需要随意建立一个数据库或表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;admin&#96;  (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;account&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  &#96;password&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  &#96;power&#96; int(11) NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 52 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br></pre></td></tr></table></figure><p>使用Jdbc进行压力测试，需要依赖jar包实现，不同的版本jar包压测的结果可能会有出入</p><ol><li>Thread Group -&gt; add -&gt; sampler -&gt; jdbc request</li></ol><p>这时候进行请求是肯定无效的，我们只是建立的一个采样器：</p><ol start="2"><li>jar包添加  mysql-connector-java-5.1.30.jar </li></ol><p>我们需要在配置元件里面，对于个人的JDBC进行配置</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110191818.png" alt=""></p><ol start="3"><li>JDBC connection Configuration 配置</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110195206.png" alt=""></p><p>Max number of connections：最大连接数</p><p>Time-between-eviction-runs-millis：指定空闲连接检查、废弃连接清理、空闲连接池大小调整之间的操作时间间隔</p><p>variable name for created pool：创建池的变量名</p><p>Auto commit：是否自动提交</p><p>Transaction Isolation：事务隔离级别（注意Mysql默认级别为读已提交）</p><p>Preinit Pool：预初始化池</p><p>Test while idle：空闲线程测试</p><p>Soft Min Evictable Idle Time：软最小可收回空闲时间</p><p>Validation Query：验证查询</p><p>最下面的部分为JDBC连接，最后一项是连接的参数配置。</p><p>DataBase URL : 数据库连接地址 jdbc:mysql://127.0.0.1:3306/blog<br>JDBC Driver Class : 数据库驱动，选择对应的mysql<br>username：数据库用户名<br>password：数据库密码</p><ol start="4"><li>将<code>mysql-connector-java.xxx.jar</code>拷贝到jmeter的classpath目录：（核心步骤）</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110200116.png" alt=""></p><ol start="5"><li>注意一下配置一定要准确，否则请求会抛出错误，请求失败也不要慌，多看看返回的提示信息，个人在实验的过程中也不是一次成功的：</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110200938.png" alt=""></p><ol start="6"><li>发起测试请求：</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110201135.png" alt=""></p><p>下面的数据为随便录入的一些数据，可以参考自己的测试结果</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110201155.png" alt=""></p><h3 id="查询参数："><a href="#查询参数：" class="headerlink" title="查询参数："></a>查询参数：</h3><p>GUI在查询参数这一部分不是十分好，下面说下如果需要使用？这一类形式替换要如何处理</p><p>如果使用占位符，在jmeter的GUI界面，需要使用括号进行替换，（1）代表取第一个参数。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210111001343.png" alt=""></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210111001434.png" alt=""></p><p>下面为填入的内容介绍：</p><p><strong>Variable name：</strong>这里写入数据库连接池的名字（和JDBC Connection Configuration名字保持一致 ）<br><strong>Query：</strong>里面填入查询数据库数据的SQL语句（填写的SQL语句末尾不要加“；”）<br><strong>parameter valus：</strong>数据的参数值<br><strong>parameter types：</strong>数据的参数类型<br><strong>cariable names：</strong>保存SQL语句返回结果的变量名<br><strong>result cariable name：</strong>创建一个对象变量，保存所有返回结果<br><strong>query timeout：</strong>查询超时时间<br><strong>handle result set：</strong>定义如何处理由callable statements语句返回的结果</p><h2 id="分布式压测"><a href="#分布式压测" class="headerlink" title="分布式压测"></a>分布式压测</h2><p>官网教程： <span class="exturl" data-url="aHR0cDovL2ptZXRlci5hcGFjaGUub3JnL3VzZXJtYW51YWwvam1ldGVyX2Rpc3RyaWJ1dGVkX3Rlc3Rpbmdfc3RlcF9ieV9zdGVwLmh0bWw=" title="http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html">http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html<i class="fa fa-external-link"></i></span></p><ul><li>普通压测：单台机可以对目标机器产生的压力比较小，受限因素包括CPU，网络，IO等</li><li>分布式压测：利用多台机器向目标机器产生压力，模拟几万用户并发访问</li></ul><p>由于分布式的压测一般对于服务器的配置要求较高，个人一个弱鸡服务器就不献丑了，这里推荐一篇分布式压测文章推荐：</p><p>简书文章：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC81YzA0NzkyYzMxYjY=" title="https://www.jianshu.com/p/5c04792c31b6">https://www.jianshu.com/p/5c04792c31b6<i class="fa fa-external-link"></i></span></p><p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9qbWV0ZXIuYXBhY2hlLm9yZy91c2VybWFudWFsL2ptZXRlcl9kaXN0cmlidXRlZF90ZXN0aW5nX3N0ZXBfYnlfc3RlcC5odG1s" title="https://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html">https://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html<i class="fa fa-external-link"></i></span></p><p>Jmeter分布式压测原理(了解)</p><p>1、总控机器的节点master，其他产生压力的机器叫“肉鸡” server</p><p>2、master会把压测脚本发送到 server上面</p><p>3、执行的时候，server上只需要把jmeter-server打开就可以了，不用启动jmeter</p><p>4、结束后，server会把压测数据回传给master,然后master汇总输出报告</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      压力测试回顾第三部分
    
    </summary>
    
    
      <category term="压力测试" scheme="https://lazytime.site/categories/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="jmeter" scheme="https://lazytime.site/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter压力测试回顾(二)</title>
    <link href="https://lazytime.site/2021/01/18/jmeter-test1/"/>
    <id>https://lazytime.site/2021/01/18/jmeter-test1/</id>
    <published>2021-01-18T15:35:05.000Z</published>
    <updated>2021-01-18T15:42:44.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾Jmeter压力测试（二）"><a href="#回顾Jmeter压力测试（二）" class="headerlink" title="回顾Jmeter压力测试（二）"></a>回顾Jmeter压力测试（二）</h1><p>本部分内容为第一小节，介绍第一部分的Jmter测试内容，新建测试计划之后，点击<code>添加</code>,可以看到一个测试计划单所有菜单内容。</p><a id="more"></a><p>主要介绍的菜单为常用菜单，对于个人不常用的功能会进行忽略。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109121653.png" alt=""></p><h2 id="测试计划菜单介绍"><a href="#测试计划菜单介绍" class="headerlink" title="测试计划菜单介绍"></a>测试计划菜单介绍</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109181129.png" alt=""></p><h2 id="线程（用户）"><a href="#线程（用户）" class="headerlink" title="线程（用户）"></a>线程（用户）</h2><ul><li>线程组：线程组元素是任何测试计划的起点。所有控制器和采样器必须在线程组下</li><li>setUp Thread Group：一种特殊类型的ThreadGroup的，可用于执行预测试操作。这些线程的行为完全像一个正常的线程组元件。不同的是，这些类型的线程执行测试前进行定期线程组的执行。</li><li>teardown thread group：一种特殊类型的ThreadGroup的，可用于执行测试后动作。这些线程的行为完全像一个正常的线程组元件。不同的是，这些类型的线程执行测试结束后执行定期的线程组。</li></ul><blockquote><p>这里可能还是不太懂，可以参考junit的setup ，teardown</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109181048.png" alt=""></p><h2 id="配置元件"><a href="#配置元件" class="headerlink" title="配置元件"></a>配置元件</h2><p>配置元件（config element）用于提供对静态数据配置的支持。CSV Data Set config 可以将本地数据文件形成数据池（Data Pool），而对应于HTTP Request Sampler和 TCP Request Sampler等类型的配制无件则可以修改Sampler的默认数据。（例如，HTTP Cookie Manager 可以用于对 HTTP Request Sampler 的cookie 进行管理）</p><h2 id="监听器："><a href="#监听器：" class="headerlink" title="监听器："></a>监听器：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109181245.png" alt=""></p><p>监听器，顾名思义就是用来监听测试结果的，可以看到对应的请求需要配置不同的监听器。最常用的功能是 <strong>查看结果树</strong>，<strong>聚合报告</strong>等，在后续的功能介绍中会进行具体的使用：</p><h2 id="定时器："><a href="#定时器：" class="headerlink" title="定时器："></a>定时器：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109182306.png" alt=""></p><p>定时器个人没有进行过实践，略过。。。。。</p><h2 id="前置处理器："><a href="#前置处理器：" class="headerlink" title="前置处理器："></a>前置处理器：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109182410.png" alt=""></p><p>用于在实际的请求发出之前对即将发出的请求进行特殊处理。例如，HTTP URL重写修复符则可以实现URL重写，当RUL中有sessionID 一类的session信息时，可以通过该处理器填充发出请求的实际的sessionID 。</p><h2 id="后置处理器："><a href="#后置处理器：" class="headerlink" title="后置处理器："></a>后置处理器：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109182703.png" alt=""></p><p>用于对Sampler 发出请求后得到的服务器响应进行处理。一般用来提取响应中的特定数据（类似LoadRunner测试工具中的关联概念）。例如，XPath Extractor 则可以用于提取响应数据中通过给定XPath 值获得的数据。</p><h2 id="断言："><a href="#断言：" class="headerlink" title="断言："></a>断言：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109182827.png" alt=""></p><p>断言用于检查测试中得到的相应数据等是否符合预期，断言一般用来设置检查点，用以保证性能测试过程中的数据交互是否与预期一致。</p><blockquote><p>请注意，断言适用于其<a href="#scoping_rules">范围内的</a>所有采样器。要将声明限制为单个采样器，请将该声明添加为采样器的子代。</p></blockquote><h2 id="测试片段："><a href="#测试片段：" class="headerlink" title="测试片段："></a>测试片段：</h2><p>“测试片段”元素是一种特殊类型的<a href="#controllers">控制器</a>，它与线程组元素位于同一级别的“测试计划”树上。它与线程组的区别在于，除非<a href="../usermanual/component_reference.html#Module_Controller">模块控制器</a>或<a href="../usermanual/component_reference.html#Include_Controller">Include_Controller</a>引用它，否则它不会执行。该元素仅用于测试计划中的代码重用</p><h2 id="非测试元件："><a href="#非测试元件：" class="headerlink" title="非测试元件："></a>非测试元件：</h2><p>可以在这里找到对应的Http代理服务器设置，可以配置http代理，方便进行代理服务器进行并发测试。</p><h2 id="各元件启动顺序："><a href="#各元件启动顺序：" class="headerlink" title="各元件启动顺序："></a>各元件启动顺序：</h2><ol><li>配置元素</li><li>预处理器</li><li>计时器</li><li>取样器</li><li>后处理器（除非SampleResult为<code>null</code>）</li><li>断言（除非SampleResult为<code>null</code>）</li><li>侦听器（除非SampleResult为<code>null</code>）</li></ol><blockquote><p>请注意，计时器，断言，预处理器和后处理器仅在有适用于其的采样器时才进行处理。逻辑控制器和采样器按照它们在树中出现的顺序进行处理。其他测试元素将根据其发现范围和测试元素的类型进行处理。[在一个类型内，元素按照它们在树中出现的顺序进行处理]。</p></blockquote><h1 id="线程组的菜单介绍："><a href="#线程组的菜单介绍：" class="headerlink" title="线程组的菜单介绍："></a>线程组的菜单介绍：</h1><h2 id="取样器："><a href="#取样器：" class="headerlink" title="取样器："></a>取样器：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109184654.png" alt=""></p><p>采样器告诉JMeter将请求发送到服务器并等待响应。它们按照在树中出现的顺序进行处理。控制器可用于修改采样器的重复次数。</p><p>JMeter采样器包括：</p><ul><li>FTP请求</li><li>HTTP请求（也可用于SOAP或REST Web服务）</li><li>JDBC请求</li><li>Java对象请求</li><li>JMS请求</li><li>JUnit测试请求</li><li>LDAP要求</li><li>邮件要求</li><li>操作系统进程请求</li><li>TCP请求</li></ul><p><strong>切记在测试计划中添加一个侦听器</strong>，否则最终的结果是看不到的</p><h2 id="逻辑控制器："><a href="#逻辑控制器：" class="headerlink" title="逻辑控制器："></a>逻辑控制器：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109190006.png" alt=""></p><p>逻辑控制器使您可以自定义JMeter用于确定何时发送请求的逻辑，为了理解逻辑控制器对测试计划的影响，考虑以下测试树</p><blockquote><ul><li><p>Test Plan</p></li><li><ul><li><p>Thread Group</p></li><li><ul><li><p>Once Only Controller</p></li><li><ul><li>Login Request (an <a href="../usermanual/component_reference.html#HTTP_Request">HTTP Request</a>)</li></ul></li><li><p>Load Search Page (HTTP Sampler)</p></li><li><p><strong>Interleave Controller</strong></p></li><li><ul><li><strong>Search “A” (HTTP Sampler)</strong></li><li><strong>Search “B” (HTTP Sampler)</strong></li><li><strong>HTTP default request (Configuration Element)</strong></li></ul></li><li><p>HTTP default request (Configuration Element)</p></li><li><p>Cookie Manager (Configuration Element)</p></li></ul></li></ul></li></ul></blockquote><p>可以看到，使用逻辑控制器可以组合出各种复杂的请求。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      jmeter压力测试回顾
    
    </summary>
    
    
      <category term="压力测试" scheme="https://lazytime.site/categories/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="jmeter" scheme="https://lazytime.site/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter压力测试回顾(一)</title>
    <link href="https://lazytime.site/2021/01/18/jmeter-test1/"/>
    <id>https://lazytime.site/2021/01/18/jmeter-test1/</id>
    <published>2021-01-18T15:34:49.000Z</published>
    <updated>2021-01-18T15:41:23.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾jmeter压力测试（一）"><a href="#回顾jmeter压力测试（一）" class="headerlink" title="回顾jmeter压力测试（一）"></a>回顾jmeter压力测试（一）</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这一部分是个人对于很久之前笔记进行整理，有需要的时候再进行回顾。</p><a id="more"></a><h2 id="什么是压力测试？"><a href="#什么是压力测试？" class="headerlink" title="什么是压力测试？"></a>什么是压力测试？</h2><p>顾名思义：压力测试，就是  被测试的系统，在一定的访问压力下，看程序运行是否稳定/服务器运行是否稳定（资源占用情况）</p><p>比如： 2000个用户同时到一个购物网站购物，这些用户打开页面的速度是否会变慢，或者网站是否会奔溃，为了保证系统的正常可用，一般都会使用压力测试来测试网站的性能和瓶颈</p><h2 id="什么是apach-Jmeter"><a href="#什么是apach-Jmeter" class="headerlink" title="什么是apach Jmeter:"></a>什么是apach Jmeter:</h2><p>以下摘自百度百科：</p><p>Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/lsI/mnI3liqHnqIvluo8vNDE0ODgzNg==" title="https://baike.baidu.com/item/小服务程序/4148836">小服务程序<i class="fa fa-external-link"></i></span>、CGI 脚本、Java 对象、数据库、<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9GVFAvMTM4Mzk=" title="https://baike.baidu.com/item/FTP/13839">FTP<i class="fa fa-external-link"></i></span> 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能/<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/lm57lvZLmtYvor5UvMTkyNTczMg==" title="https://baike.baidu.com/item/回归测试/1925732">回归测试<i class="fa fa-external-link"></i></span>，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/kvb/nlKjmraPliJnooajovr7lvI8vNjU1NTQ4NA==" title="https://baike.baidu.com/item/使用正则表达式/6555484">使用正则表达式<i class="fa fa-external-link"></i></span>创建断言。</p><h2 id="常用压力测试工具比较："><a href="#常用压力测试工具比较：" class="headerlink" title="常用压力测试工具比较："></a>常用压力测试工具比较：</h2><h3 id="loadrunner"><a href="#loadrunner" class="headerlink" title="loadrunner"></a>loadrunner</h3><pre><code>性能稳定，压测结果及细粒度大，可以自定义脚本进行压测，但是太过于重大，功能比较繁多。并且是一个**收费软件**</code></pre><h3 id="apache-ab-单接口压测最方便"><a href="#apache-ab-单接口压测最方便" class="headerlink" title="apache ab(单接口压测最方便)"></a>apache ab(单接口压测最方便)</h3><pre><code>模拟多线程并发请求,ab命令对发出负载的计算机要求很低，既不会占用很多CPU，也不会占用太多的内存，但却会给目标服务器造成巨大的**负载**, 简单DDOS攻击等。</code></pre><h3 id="webbench"><a href="#webbench" class="headerlink" title="webbench"></a>webbench</h3><pre><code>webbench首先fork出多个子进程，每个子进程都循环做web访问测试。子进程把访问的结果通过pipe告诉父进程，父进程做最终的统计结果。</code></pre><h2 id="Apache-JMeter的功能"><a href="#Apache-JMeter的功能" class="headerlink" title="Apache JMeter的功能:"></a>Apache JMeter的功能:</h2><ul><li>网络-HTTP，HTTPS（Java，NodeJS，PHP，ASP.NET等）</li><li>SOAP / REST Web服务</li><li>FTP</li><li>支持JDBC的数据库</li><li>LDAP</li><li>通过JMS的面向消息的中间件（MOM）</li><li>邮件-SMTP（S），POP3（S）和IMAP（S）</li><li>本机命令或Shell脚本</li><li>TCP协议</li><li>Java对象</li></ul><h2 id="使用场景及优点"><a href="#使用场景及优点" class="headerlink" title="使用场景及优点"></a>使用场景及优点</h2><p>1）功能测试<br>2）压力测试<br>3）分布式压力测试<br>4）纯java开发<br>5）上手容易，高性能<br>4）提供测试数据分析<br>5）各种报表数据图形展示</p><h2 id="如何学习："><a href="#如何学习：" class="headerlink" title="如何学习："></a>如何学习：</h2><p>注意，对于实操性非常强的软件来说，jmeter更多的是适合上机实操而不是理论记忆。目前还是推荐结合各种实际场景结合博客能更加深入的把握各种功能的使用。</p><p>官方网站：<span class="exturl" data-url="aHR0cHM6Ly9qbWV0ZXIuYXBhY2hlLm9yZy8=" title="https://jmeter.apache.org/">https://jmeter.apache.org/<i class="fa fa-external-link"></i></span></p><p>社区：<span class="exturl" data-url="aHR0cHM6Ly90ZXN0ZXJob21lLmNvbS8=" title="https://testerhome.com/">https://testerhome.com/<i class="fa fa-external-link"></i></span> （由于个人主要为后端这里主要为测试的社区，里面有不少测试的干货，感兴趣可以了解）</p><h2 id="我要怎么做？"><a href="#我要怎么做？" class="headerlink" title="我要怎么做？"></a>我要怎么做？</h2><h3 id="配置jdk环境："><a href="#配置jdk环境：" class="headerlink" title="配置jdk环境："></a>配置jdk环境：</h3><p>由于Jmeter是由java编写的，使用之前需要事先安装安装<strong>jdk1.8</strong>以上版本以上的号环境，由于Jdk的配置网上一抓一大把，这里不做过多的介绍</p><h3 id="下载Jmeter："><a href="#下载Jmeter：" class="headerlink" title="下载Jmeter："></a>下载Jmeter：</h3><p>目前最新版本的<code>Jmeter5.4</code>需要JDK1.8的支持：</p><p>官方下载地址：<span class="exturl" data-url="aHR0cHM6Ly9qbWV0ZXIuYXBhY2hlLm9yZy9kb3dubG9hZF9qbWV0ZXIuY2dp" title="https://jmeter.apache.org/download_jmeter.cgi">https://jmeter.apache.org/download_jmeter.cgi<i class="fa fa-external-link"></i></span></p><p>windows：<span class="exturl" data-url="aHR0cHM6Ly9hcGFjaGVtaXJyb3Iuc2cud3VjaG5hLmNvbS8vam1ldGVyL2JpbmFyaWVzL2FwYWNoZS1qbWV0ZXItNS40LnRneg==" title="https://apachemirror.sg.wuchna.com//jmeter/binaries/apache-jmeter-5.4.tgz">https://apachemirror.sg.wuchna.com//jmeter/binaries/apache-jmeter-5.4.tgz<i class="fa fa-external-link"></i></span></p><p>Linux：<span class="exturl" data-url="aHR0cHM6Ly9hcGFjaGVtaXJyb3Iuc2cud3VjaG5hLmNvbS8vam1ldGVyL2JpbmFyaWVzL2FwYWNoZS1qbWV0ZXItNS40LnppcA==" title="https://apachemirror.sg.wuchna.com//jmeter/binaries/apache-jmeter-5.4.zip">https://apachemirror.sg.wuchna.com//jmeter/binaries/apache-jmeter-5.4.zip<i class="fa fa-external-link"></i></span></p><p>下载完成之后进行对应的解压即可：</p><h2 id="jmeter包结构解释："><a href="#jmeter包结构解释：" class="headerlink" title="jmeter包结构解释："></a>jmeter包结构解释：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bin：最常用的包,里面包含了各种可执行文件</span><br><span class="line">docs：java doc文档</span><br><span class="line">extras：插件拓展的包</span><br><span class="line">    + lib:核心的依赖包</span><br><span class="line">    + ext:核心包</span><br><span class="line">    + junit:单元测试包</span><br><span class="line">licenses：开源许可</span><br><span class="line">lib：源码包</span><br><span class="line">printable_docs：官方文档</span><br><span class="line">NOTICE JMeter 简单信息说明</span><br><span class="line">README.md JMeter 官方基本介绍</span><br></pre></td></tr></table></figure><p>先介绍一下最常用的Bin包内容：</p><pre><code>jmeter.bat: windows启动文件：jmeter: mac或者linux启动文件：jmeter-server：mac或者Liunx分布式压测使用的启动文件jmeter-server.bat：mac或者Liunx分布式压测使用的启动文件jmeter.properties: 核心配置文件</code></pre><h2 id="改变jmeter的GUI界面语言版本"><a href="#改变jmeter的GUI界面语言版本" class="headerlink" title="改变jmeter的GUI界面语言版本"></a>改变jmeter的GUI界面语言版本</h2><h3 id="控制台修改"><a href="#控制台修改" class="headerlink" title="控制台修改"></a>控制台修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu -&gt; options -&gt; choose language</span><br></pre></td></tr></table></figure><h3 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h3><pre><code>bin目录 -&gt;` jmeter.properties`默认 `#language=en`改为` language=zh_CN `</code></pre><h2 id="详细介绍："><a href="#详细介绍：" class="headerlink" title="详细介绍："></a>详细介绍：</h2><p>由于实操性比较强，对于jmeter详细功能的介绍，最终还是建议落实到各种尝试，同时如果平时接触不到的话，完全可以等到使用的时候再进行回顾。</p><p>另外，jmeter无论对于开发和测试都是有帮助的，对于测试来说基本是必须会的一个技能，作为开发在平时某些情况下也可能会用到</p><h1 id="摘抄："><a href="#摘抄：" class="headerlink" title="摘抄："></a>摘抄：</h1><h2 id="接口测试的要点："><a href="#接口测试的要点：" class="headerlink" title="接口测试的要点："></a>接口测试的要点：</h2><p>下面是根据博客截图，具体请看<strong>“如何学习”</strong>这一篇章。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109193629.png" alt=""></p><h2 id="接口响应状态码："><a href="#接口响应状态码：" class="headerlink" title="接口响应状态码："></a>接口响应状态码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">http 请求状态码详细</span><br><span class="line">使用 ASP.NET&#x2F;PHP&#x2F;JSP 或者 javascript 都会用到 http 的不同状态，一些常见的状态码</span><br><span class="line">为：</span><br><span class="line"></span><br><span class="line">200 – 服务器成功返回网页 404 – 请求的网页不存在 503 – 服务不可用</span><br><span class="line"></span><br><span class="line">1xx（临时响应）</span><br><span class="line">表示临时响应并需要请求者继续执行操作的状态代码</span><br><span class="line">100 （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的</span><br><span class="line">第一部分，正在等待其余部分。</span><br><span class="line">101 （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。</span><br><span class="line">2xx （成功）</span><br><span class="line">表示成功处理了请求的状态代码</span><br><span class="line">200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网</span><br><span class="line">页。</span><br><span class="line">201 （已创建） 请求成功并且服务器创建了新的资源。</span><br><span class="line">202 （已接受） 服务器已接受请求，但尚未处理。</span><br><span class="line">203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。</span><br><span class="line">204 （无内容） 服务器成功处理了请求，但没有返回任何内容。</span><br><span class="line">205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。</span><br><span class="line">206 （部分内容） 服务器成功处理了部分 GET 请求。</span><br><span class="line"></span><br><span class="line">3xx （重定向）</span><br><span class="line">。 表示要完成请求，需要进一步操作。  通常，这些状态代码用来重定向</span><br><span class="line">300 （多种选择） 针对请求，服务器可执行多种操作。服务器可根据请求者 (user</span><br><span class="line">agent) 选择一项操作，或提供操作列表供请求者选择。</span><br><span class="line">301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET</span><br><span class="line">或 HEAD 请求的响应）时，会自动将请求者转到新位置。</span><br><span class="line">302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用</span><br><span class="line">原有位置来进行以后的请求。</span><br><span class="line">303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响</span><br><span class="line">应时，服务器返回此代码。</span><br><span class="line">304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，</span><br><span class="line">不会返回网页内容。</span><br><span class="line">305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响</span><br><span class="line">应，还表示请求者应使用代理。</span><br><span class="line">307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使</span><br><span class="line">用原有位置来进行以后的请求。</span><br><span class="line"></span><br><span class="line">4xx（请求错误）</span><br><span class="line">这些状态代码表示请求可能出错，妨碍了服务器的处理</span><br><span class="line">400 （错误请求） 服务器不理解请求的语法。</span><br><span class="line">401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此</span><br><span class="line">响应。</span><br><span class="line">403 （禁止） 服务器拒绝请求。</span><br><span class="line">404 （未找到） 服务器找不到请求的网页。</span><br><span class="line">405 （方法禁用） 禁用请求中指定的方法。</span><br><span class="line">406 （不接受） 无法使用请求的内容特性响应请求的网页。</span><br><span class="line">407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授</span><br><span class="line">权使用代理。</span><br><span class="line">408 （请求超时） 服务器等候请求时发生超时。</span><br><span class="line">409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲</span><br><span class="line">突的信息。</span><br><span class="line">410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。</span><br><span class="line">411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</span><br><span class="line">412 （未满足前提条件）服务器未满足请求者在请求中设置的其中一个前提条件。</span><br><span class="line">413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的</span><br><span class="line">处理能力。</span><br><span class="line">414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</span><br><span class="line">415 （不支持的媒体类型） 请求的格式不受请求页面的支持。</span><br><span class="line">416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此</span><br><span class="line">状态代码。</span><br><span class="line">417 （未满足期望值） 服务器未满足”期望”请求标头字段的要求。</span><br><span class="line">关注公众号--测试驿栈</span><br><span class="line">博客地址： https:&#x2F;&#x2F;testerhome.com&#x2F;topics&#x2F;21318</span><br><span class="line">5xx（服务器错误）</span><br><span class="line">。 这些状态代码表示服务器在尝试处理请求时发生内部错误。  这些错误可能是服务</span><br><span class="line">器本身的错误</span><br><span class="line">500 （服务器内部错误） 服务器遇到错误，无法完成请求。</span><br><span class="line">501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求</span><br><span class="line">方法时可能会返回此代码。</span><br><span class="line">502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</span><br><span class="line">503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这</span><br><span class="line">只是暂时状态。</span><br><span class="line">504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</span><br><span class="line">505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</span><br><span class="line">428 Precondition Required (要求先决条件)</span><br><span class="line">429 Too Many Requests (太多请求)</span><br><span class="line">431 Request Header Fields Too Large (请求头字段太大)</span><br><span class="line">511 Network Authentication Required (要求网络认证)</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      个人笔记回顾
    
    </summary>
    
    
      <category term="压力测试" scheme="https://lazytime.site/categories/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="jmeter" scheme="https://lazytime.site/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>职场的自我个人提升（一）</title>
    <link href="https://lazytime.site/2021/01/15/live1/"/>
    <id>https://lazytime.site/2021/01/15/live1/</id>
    <published>2021-01-15T13:53:37.000Z</published>
    <updated>2021-01-15T13:54:51.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自我提升"><a href="#自我提升" class="headerlink" title="自我提升"></a>自我提升</h1><p>之前在微信公众号看到某个广告，加薪课？感觉有点意思，专门讲职场的，结果看了半小时就停不下来了，虽然是免费的三天课程，而且可以看出来还是拉潜在买家的，但是干货不少，还是有非常多值得学习的内容，这里分享出来，直播是三天时间，大概5 6 个小时，但是值得思考的东西确实不少，这里不做过多的介绍和笔记，直接看思维导图比较直观。</p><p>由于内容实在太多，这里用<strong>幕布</strong>笔记进行分享：</p><p>连接：<strong><span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvN1U4YUlXOG56NlI=" title="https://share.mubu.com/doc/7U8aIW8nz6R">https://share.mubu.com/doc/7U8aIW8nz6R<i class="fa fa-external-link"></i></span></strong></p><p>（如果侵权或者有损机构利益请私信联系进行删除，谢谢！）</p><a id="more"></a><h1 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h1><ul><li>自信和努力可以改变一个人</li><li>有目标比努力更加重要</li><li>分清职业和事业，职业!=事业</li><li>大目标，小计划</li><li>自律改变人生</li></ul><h1 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h1><p>自从疫情以来我就一直在思考，如果我没了工作，没了收入，发现自己没有对未来的任何一点设想，感觉有点后怕，于是我看了有关财商、职场、身体健康的的东西，努力寻找自己的目标，寻找自己存在的意义以及对社会的责任和使命。</p><p><strong>人最大的敌人永远是自己，改变自己就是最大的进步</strong></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      关于职场的自我提升，我有话要说
    
    </summary>
    
    
      <category term="职场" scheme="https://lazytime.site/categories/workplace/"/>
    
    
      <category term="生活" scheme="https://lazytime.site/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>《活着》读书笔记</title>
    <link href="https://lazytime.site/2021/01/15/live2/"/>
    <id>https://lazytime.site/2021/01/15/live2/</id>
    <published>2021-01-15T13:53:17.000Z</published>
    <updated>2021-01-15T13:55:48.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《活着》读书笔记"><a href="#《活着》读书笔记" class="headerlink" title="《活着》读书笔记"></a>《活着》读书笔记</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这本书可能很多人看过了，也可能很多了没看，《活着》确实是百看不厌的经典，个人精读了一遍之后，总是会回想起福贵的一生，福贵看似苦难却极其丰富的一生，给了很多人思考，下面就此来分析一下这本书，本文章内容<strong>包含剧透</strong>，请谨慎观看。《活着》的电影一直没有看，有时间可以去看看，不过现在可能不太好找。</p><a id="more"></a><h2 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h2><ol><li>回顾个人的读书感受</li><li>为什么要读这本书？读书收获</li><li>对于这本书做一个总结。</li></ol><h2 id="推荐程度："><a href="#推荐程度：" class="headerlink" title="推荐程度："></a>推荐程度：</h2><p>必读好书，对于价值观的触动比较大，也是一部值得深思的作品</p><h2 id="全书概览"><a href="#全书概览" class="headerlink" title="全书概览"></a>全书概览</h2><p>我将这本书的内容，按照个人的理解进行了大致梳理</p><ol><li>年少轻狂：吃喝嫖赌样样来，天不怕地不怕，活生生的土地主。</li><li>命运转折：赌博输光钱财，苦难一生的开端</li><li>生活巨变：辛苦工作，养活家人</li><li>短暂的幸福：妻子回归，儿子出生。</li><li>命运又一次转折：为妻子找大夫，结果被抓去当“炮灰”。但是命运眷顾活了下来</li><li>母亲去世，儿子有庆出生，女儿变哑</li><li>二龙因地主被枪毙，富贵幸免于难</li><li>儿子为输血死在医院。</li><li>女儿出嫁，王二喜入赘，短暂的幸福</li><li>女儿生孩子去世，妻子去世。剩下二喜和富贵以及外孙</li><li>二喜意外身亡，剩下富贵和外孙</li><li>外孙生病吃豆子被噎死，富贵孤生一人</li><li>最终买了老牛，苦难一生来到尽头</li></ol><h2 id="收获："><a href="#收获：" class="headerlink" title="收获："></a>收获：</h2><ol><li>酸甜苦辣不是人生的全部</li><li>条条大路通罗马，但是有的人生在罗马</li><li>生命只是静静的活着，只是单纯的为了活着</li><li>生存永远是第一需要</li></ol><h2 id="个人感悟："><a href="#个人感悟：" class="headerlink" title="个人感悟："></a>个人感悟：</h2><p>看到豆瓣书评上面很多人去批判历史，但是历史终究是死物。个人并不想对本书的历史背景发表任何看法。</p><p>每一个人都有各自的想法，每一个人都按照各自的想法存活于这个世界，有得人想成就伟业，也有人甘愿做一个普通人，作者没有从任何的是非对错去看待一个人，而是用一个人的一生来诠释到底什么是活着，人到底为什么而活，这本书最大的特点是里面<strong>几乎没有作者个人感情色彩</strong>，本书现实全程寥寥几笔“我”和福贵的讲述，大部分的篇幅都在讲述福贵，富贵的不单单为了自己而活，他肩负的回忆和幸福让他度过了漫长的岁月，可能和书中所说的一样，很多人老了都不记得自己年轻的时候记忆，但是富贵却能像讲述故事一样像他人讲述自己。富贵为了家人而活，为了能不断的回忆过往的幸福，苦难净化了他的一生。</p><p>从另一个角度来看，福贵输光家产，家破父亡，但是后来却因为这件事活下来，而春生用福贵儿子有庆的命换了自己的命最终还是用上吊方式结束了自己的生命，也可以看到对于善恶终有报的观点诠释。</p><p>富贵本书的苦难有以下几种：</p><ol><li>穷困潦倒</li><li>亲人相继离世</li><li>孤独</li><li>劳累</li><li>战乱</li><li>丧偶</li><li>子女早逝<br>……</li></ol><p>每一份苦难在如今看来大部分人几乎是无法忍受的，但是福贵却用一生接受这份苦难，并且没有一句怨言。时代在改变，我们必然不会经历福贵那样颠沛流离的时代，但是现代人对于苦难的承受能力却越来越不足，这是值得每一个人进行反思的。面对命运和不公，我们是屈服忍辱，还是迎接挑战，是安稳一生，还是风雨飘摇，每个人都有不同的选择。</p><h2 id="精句摘录："><a href="#精句摘录：" class="headerlink" title="精句摘录："></a>精句摘录：</h2><ol><li>做人不能忘记四条,话不要说错,床不要睡错,门槛不要踏错,口袋不要摸错</li><li><strong>人是为活着本身而活着的，而不是为了活着之外的任何事物所活着</strong></li><li>少年去游荡，中年想掘藏，老年做和尚</li><li>小鸡长大了就变成了鹅，鹅长大了就变成了羊，羊长大了就变成了牛</li><li>人的幸福要等到最后，在他生前和葬礼前，无人有权说他幸福</li></ol><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>这本书我是不敢再看第二遍了，富贵生命的长度和厚度都令人动容，每个人都有自己的想法，但是对于每一个人来说，生命的长度和厚度都不尽相同，对于每一个人来说，生命的长度和厚度是同等重要的，不管是富贵还是穷困，活着就要感谢，极度认真的过好每一天，这样也就足够了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      人是为了活着而活着，不是为了活着之外的任何事物活着
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://lazytime.site/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书" scheme="https://lazytime.site/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>一文弄懂spring validate</title>
    <link href="https://lazytime.site/2021/01/06/springvalidate/"/>
    <id>https://lazytime.site/2021/01/06/springvalidate/</id>
    <published>2021-01-06T15:48:50.000Z</published>
    <updated>2021-01-06T15:50:17.105Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>校验参数在以前基本都是使用大量的if/else，稍微方便一点的可以使用反射+自定义注解的形式，但是复用性不是很好，并且每个人对于的自定义注解有着自己的使用习惯，不过好在spring开发了validated框架用于注解校验，可以节省很多的校验<code>ifelse</code>代码，这篇文章通篇介绍了如何使用spring validated。</p><a id="more"></a><h1 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h1><ol><li>了解 <strong>validate</strong> 校验，以及使用注解对于参数进行快速校验</li><li>关于统一全局异常处理，以及一些踩坑问题</li><li>如何快速的集成和使用 <strong>spring validate</strong></li><li>讨论<code>list\&lt;Object\&gt;</code>校验的问题，分析如何使用list对象内容校验</li></ol><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>spring Validation 是一种参数检验工具,集成在spring-context包中, 常用于spring mvc中Controller的参数处理,主要针对整个实体类的多个可选域进行判定.对于不合格的数据信息springMVC会把它保存在错误对象中，这些错误信息我们也可以通过SpringMVC提供的标签在前端JSP页面上进行展示。</p><p>实现方式，一般使用较多的是两个注解：<code>@Validated</code>、<code>@Valid</code>，下面简单介绍一下以及分析他们的区别</p><ol><li>实现<code>Validator</code>,利用<code>BindingResult</code>获取Errors信息</li><li>采用<code>@Valid</code> 以及 <code>JSR-303</code>中的参数判定注解</li></ol><h2 id="Valid和-Validated区别"><a href="#Valid和-Validated区别" class="headerlink" title="@Valid和@Validated区别"></a><code>@Valid</code>和<code>@Validated</code>区别</h2><table><thead><tr><th>区别</th><th>@Valid</th><th>@Validated</th></tr></thead><tbody><tr><td>提供者</td><td>JSR-303规范</td><td>Spring</td></tr><tr><td><strong>是否支持分组</strong></td><td>不支持</td><td>支持</td></tr><tr><td>标注位置</td><td>METHOD, FIELD, CONSTRUCTOR, PARAMETER, TYPE_USE</td><td>TYPE, METHOD, PARAMETER</td></tr><tr><td><strong>嵌套校验</strong></td><td>支持</td><td>不支持</td></tr></tbody></table><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p>网上有很多类似表格，这里直接COPY了一份，对于不同的api版本可能出现部分注解过时等情况，注意！</p><table><thead><tr><th align="left">meta-data</th><th align="left">comment</th><th align="left">version</th></tr></thead><tbody><tr><td align="left">@Null</td><td align="left">对象，为空</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@NotNull</td><td align="left">对象，不为空</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@AssertTrue</td><td align="left">布尔，为True</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@AssertFalse</td><td align="left">布尔，为False</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Min(value)</td><td align="left">数字，最小为value</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Max(value)</td><td align="left">数字，最大为value</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@DecimalMin(value)</td><td align="left">数字，最小为value</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@DecimalMax(value)</td><td align="left">数字，最大为value</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Size(max, min)</td><td align="left">min&lt;=value&lt;=max</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Digits (integer, fraction)</td><td align="left">数字，某个范围内</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Past</td><td align="left">日期，过去的日期</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Future</td><td align="left">日期，将来的日期</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Pattern(value)</td><td align="left">字符串，正则校验</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Email</td><td align="left">字符串，邮箱类型</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@NotEmpty</td><td align="left">集合，不为空</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@NotBlank</td><td align="left">字符串，不为空字符串</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@Positive</td><td align="left">数字，正数</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@PositiveOrZero</td><td align="left">数字，正数或0</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@Negative</td><td align="left">数字，负数</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@NegativeOrZero</td><td align="left">数字，负数或0</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@PastOrPresent（时间）</td><td align="left">过去或者现在</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@FutureOrPresent（时间）</td><td align="left">将来或者现在</td><td align="left">Bean Validation 2.0</td></tr></tbody></table><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>springvalidation入门使用都十分的简单，基本十分钟不到就能快速的集成，目前springboot的项目已经越来越多，所以本文基本都是基于<strong>springboot</strong>构建的</p><p><strong>第一步：pom.xml 加入注解</strong></p><p>这里为了方便版本控制增加了版本控制配置：</p><blockquote><p>注意：hibernate-validate 的版本到本文为止已经出现了7.0.0，这个版本的校验做了不少的改动。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmpib3NzLm9yZy9oaWJlcm5hdGUvc3RhYmxlL3ZhbGlkYXRvci9yZWZlcmVuY2UvZW4tVVMvaHRtbF9zaW5nbGUvP3Y9Ny4wI192YWxpZGF0aW5nX2NvbnN0cmFpbnRz" title="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=7.0#_validating_constraints">https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=7.0#_validating_constraints<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hibernate-validate.version</span>&gt;</span>5.2.0.Final<span class="tag">&lt;/<span class="name">hibernate-validate.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>增加完配置之后，增加对应的maven依赖，需要引入如下两个依赖配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--jsr 303--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hibernate validator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意使用了版本控制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate-validate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加完这两个注解之后，不要急着先进行其他的编写，可以先进行</p><p><strong>第二步：增加注解</strong></p><p>这里给出一个案例进行参考，验证对象增加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProduct</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">7</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^(([1-9]&#123;1&#125;\\d*)|([0]&#123;1&#125;))(\\.(\\d)&#123;0,2&#125;)?$"</span>)</span><br><span class="line">    <span class="keyword">private</span> String tranAmount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">3</span>,min = <span class="number">3</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^[A-Z]&#123;3&#125;$"</span>)</span><br><span class="line">    <span class="keyword">private</span> String currency;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">private</span> String tranReason;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">private</span> String gatherName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> String business_type;</span><br><span class="line"></span><br><span class="line">    /</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> String pay_channel;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// .......其他校验</span></span><br><span class="line">    <span class="comment">// 过滤 get/set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>controller</code>层增加<code>@Validated</code>注解，加入之后成为如下的效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">(@Validated @RequestBody Product requestString, BindingResult bindResult)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 统一处理校验注解的错误信息</span></span><br><span class="line">        Result stringBuilder = dealWithError(bindResult);</span><br><span class="line">        <span class="keyword">if</span> (stringBuilder != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> stringBuilder;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">// 自己的业务处理...</span></span><br><span class="line">        <span class="keyword">return</span> ....;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三步：验证注解是否生效</strong></p><p>到这一步就可以直接请求接口，在接口处进行断点，如果请求正确会直接进入对应的断点，否则会抛出如下案例所示的异常信息，如果校验不通过，会抛出<code>MethodArgumentNotValidException</code>或者<code>ConstraintViolationException</code>异常，下面是案例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2021-01-01T12:08:49.859+00:00"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</span><br><span class="line">    <span class="attr">"trace"</span>: <span class="string">"org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors\nField error in object 'product' on field 'name': rejected value [null]; codes [NotBlank.product.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.name,name]; arguments []; default message ......"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Validation failed for object='product'. Error count: 1"</span>,</span><br><span class="line">    <span class="attr">"errors"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"codes"</span>: [</span><br><span class="line">                <span class="string">"NotBlank.product.name"</span>,</span><br><span class="line">                <span class="string">"NotBlank.name"</span>,</span><br><span class="line">                <span class="string">"NotBlank.java.lang.String"</span>,</span><br><span class="line">                <span class="string">"NotBlank"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"arguments"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"codes"</span>: [</span><br><span class="line">                        <span class="string">"product.name"</span>,</span><br><span class="line">                        <span class="string">"name"</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">"arguments"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">"defaultMessage"</span>: <span class="string">"name"</span>,</span><br><span class="line">                    <span class="attr">"code"</span>: <span class="string">"name"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"defaultMessage"</span>: <span class="string">"不能为空"</span>,</span><br><span class="line">            <span class="attr">"objectName"</span>: <span class="string">"product"</span>,</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"name"</span>,</span><br><span class="line">            <span class="attr">"rejectedValue"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"bindingFailure"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"code"</span>: <span class="string">"NotBlank"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"//test/valid"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，一个对象的注解校验基本实现了，但是我们发现注解校验的方式抛出的异常信息不是十分友好，基本都会配合统一的异常处理来处理请求参数的问题，下面后文会单独讲如何使用全局异常处理来统一的处理异常信息。</p><h2 id="自定义注解校验："><a href="#自定义注解校验：" class="headerlink" title="自定义注解校验："></a>自定义注解校验：</h2><p>如果默认的注解规则无法满足业务需求，这时候validator提供了自定义注解的形式帮助开发者可以进行自定的规则校验。</p><p>第一步：定义自定义注解：</p><p>首先第一步是确定自己需要自定义的注解：比如我这里定义了一个检查时间格式的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期格式校验注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.EAN;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotBlank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="comment">// 注意这里有静态导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</span><br><span class="line"></span><br><span class="line"><span class="comment">// javadoc 文档标识</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">// 可以注入的类型，字段和参数类型</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;PARAMETER, FIELD&#125;)</span><br><span class="line"><span class="comment">// 运行时生效</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="comment">// 触发校验的对象</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = &#123;TimeValidator<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">Time</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须</span></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "时间格式校验失败"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须</span></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    String value = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面部分可以忽略</span></span><br><span class="line">    <span class="meta">@Target</span>(&#123; FIELD, METHOD, PARAMETER, ANNOTATION_TYPE &#125;)</span><br><span class="line">    <span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@interface</span> List &#123;</span><br><span class="line">        Time[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Constraint</code>注解声明约束及其可配置属性，同时在对应的真实注解处理类<code>TimeValidator</code>里面，可以随意的注入需要的<code>bean</code>（<code>AutoWired</code>等）</p><p>注意除开<code>value</code>这个属性之外，其他三个属性<code>message</code>、<code>groups</code>、<code>payload</code>都是<strong>必须要</strong>定义的，否则进行校验的时候，会抛出如下的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HV000074: com.xxx.xxx.valid.annotation.Time contains Constraint annotation, but does not contain a groups parameter.</span><br></pre></td></tr></table></figure><p>对于注解的解释：</p><ul><li><code>@Retention(RUNTIME)</code>：指定此类型的注释将在运行时通过反射方式可用</li><li><code>@Constraint</code>：指定用于验证元素的验证器</li><li><code>@Target</code>：注解的标识范围，比如这里注解可以是参数或者字段</li></ul><p>对应的三个固定参数含义：</p><ul><li><p><code>message</code> 定制化的提示信息，主要是从ValidationMessages.properties里提取，也可以依据实际情况进行定制</p></li><li><p><code>groups</code>这里主要进行将validator进行分类，不同的类group中会执行不同的validator操作</p></li><li><p><code>payload</code> 主要是针对bean的，使用不多。</p></li></ul><p>第二步：定义真实注解处理类：</p><p>需要实现接口<code>ConstraintValidator</code>，泛型的第一个参数为注解类，第二个参数为具体校验对象的类型</p><p>下面定义校验时间格式是否正确的一个案例，写的非常粗浅。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">Time</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化注解的校验内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> constraintAnnotation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Time constraintAnnotation)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"test"</span> + constraintAnnotation);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    具体校验代码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext constraintContext)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>);</span><br><span class="line">        simpleDateFormat.setLenient(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isValid = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            simpleDateFormat.parse(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            isValid = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果校验失败，设置自定义错误信息</span></span><br><span class="line">        <span class="keyword">if</span> ( !isValid ) &#123;</span><br><span class="line">            constraintContext.disableDefaultConstraintViolation();</span><br><span class="line">            constraintContext.buildConstraintViolationWithTemplate(</span><br><span class="line">                    <span class="string">"&#123;com.zxd.interview.valid.annotation."</span> +</span><br><span class="line">                            <span class="string">"Time.message&#125;"</span></span><br><span class="line">            )</span><br><span class="line">            .addConstraintViolation();<span class="comment">//很重要的一步，需要将自定义的信息提示模板加入</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isValid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>ConstraintValidator</code>接口内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">A</span> <span class="keyword">extends</span> <span class="title">Annotation</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">初始化验证器，为isValid(Object, ConstraintValidatorContext)调用做准备。传递给定约束声明的约束注释。</span></span><br><span class="line"><span class="comment">保证在使用此实例进行验证之前调用此方法。</span></span><br><span class="line"><span class="comment">默认的实现是no-op。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(A constraintAnnotation)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现验证逻辑。值的状态不能被改变。</span></span><br><span class="line"><span class="comment">该方法可以并发访问，实现必须确保线程安全。</span></span><br><span class="line"><span class="comment"><span class="doctag">@value</span>：被校验的值</span></span><br><span class="line"><span class="comment"><span class="doctag">@ConstraintValidatorContext</span> 校验上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(T value, ConstraintValidatorContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后只需要将注解应用到对应的对象上面，在请求的时候就可以进行对应的参数校验了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">// 自己定义的注解</span></span><br><span class="line">    <span class="meta">@Time</span></span><br><span class="line">    <span class="keyword">private</span> String time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略get/set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>HV000074</code>这个错误是如何来的？：</p><p>首先我们需要明确一点：javax.validator - JSR303的规范是由<strong>Hibernate validate</strong>作为标准实现的，也就是说虽然Spring已经为我们进行了适配，但是在校验的时候依然使用的Hibernate Validator，所以我们定义自定义的注解需要按照固定的要求规范：</p><p>旧版本的文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmpib3NzLm9yZy9oaWJlcm5hdGUvdmFsaWRhdG9yLzQuMi9yZWZlcmVuY2UvZW4tVVMvaHRtbF9zaW5nbGUv" title="https://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html_single/">https://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html_single/<i class="fa fa-external-link"></i></span></p><p>较新版本的文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmpib3NzLm9yZy9oaWJlcm5hdGUvc3RhYmxlL3ZhbGlkYXRvci9yZWZlcmVuY2UvZW4tVVMvaHRtbF9zaW5nbGUvP3Y9Ny4wI192YWxpZGF0aW5nX2NvbnN0cmFpbnRz" title="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=7.0#_validating_constraints">https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=7.0#_validating_constraints<i class="fa fa-external-link"></i></span></p><p><code>org.hibernate.validator.internal.util.logging</code>下面的几个包中定义了日志以及异常信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String getConstraintWithoutMandatoryParameterException = <span class="string">"HV000074: %2$s contains Constraint annotation, but does not contain a %1$s parameter."</span>;</span><br></pre></td></tr></table></figure><p>具体的提示信息如下图所示：<code>org.hibernate.validator.internal.util.logging.Log_$logger</code></p><p>注解定义了如下的异常信息提示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Message</span>(</span><br><span class="line">     id = <span class="number">74</span>,</span><br><span class="line">     value = <span class="string">"%2$s contains Constraint annotation, but does not contain a %1$s parameter."</span></span><br><span class="line"> )</span><br><span class="line"> <span class="function">ConstraintDefinitionException <span class="title">getConstraintWithoutMandatoryParameterException</span><span class="params">(String var1, String var2)</span></span>;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>注意以下几个点：</p><ul><li>静态字段和属性无法验证。</li><li>建议在一个类中坚持使用字段 <em>或</em>属性注释。不建议对字段<em>和</em>随附的getter方法进行注释<em>，</em>因为这将导致对该字段进行两次验证。</li></ul></blockquote><h2 id="使用-Validator-校验："><a href="#使用-Validator-校验：" class="headerlink" title="使用 Validator 校验："></a>使用 <code>Validator</code> 校验：</h2><p>下面介绍一下使用<code>Validator</code>要如何校验，简单的使用可以使用<code>Validation.buildDefaultValidatorFactory()</code>获取<code>ValidatorFactory</code>，通过<code>factory.getValidator()</code>获取对应的校验器<code>Validator</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">    ValidatorFactory factory = Validation.buildDefaultValidatorFactory();</span><br><span class="line">    Validator validator = factory.getValidator();</span><br><span class="line">    Set&lt;ConstraintViolation&lt;Product&gt;&gt; validate = validator.validate(product);</span><br><span class="line">    Map&lt;Object, Object&gt; objectObjectMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    validate.forEach(item -&gt; &#123;</span><br><span class="line">        <span class="comment">//            System.err.println("item = "+ item);</span></span><br><span class="line">        String message = item.getMessage();</span><br><span class="line">        <span class="comment">//            System.err.println("message " + message);</span></span><br><span class="line">        objectObjectMap.put(item.getPropertyPath(), message);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    objectObjectMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">        System.err.println(<span class="string">"key = "</span> + k + <span class="string">" value = "</span> + v);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面构建一个工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Validator validator =</span><br><span class="line">            Validation.byProvider(HibernateValidator<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">configure</span>()</span></span><br><span class="line"><span class="class">            .<span class="title">failFast</span>(<span class="title">true</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">buildValidatorFactory</span>()</span></span><br><span class="line"><span class="class">            .<span class="title">getValidator</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SmartValidator validatorAdapter = <span class="keyword">new</span> SpringValidatorAdapter(validator);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Validator <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> validator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SmartValidator <span class="title">getValidatorAdapter</span><span class="params">(Validator validator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> validatorAdapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验参数，用于普通参数校验 [未测试！]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validateParams</span><span class="params">(Object... params)</span> </span>&#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;Object&gt;&gt; constraintViolationSet = validator.validate(params);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!constraintViolationSet.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConstraintViolationException(constraintViolationSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groups</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">validate</span><span class="params">(T object, Class&lt;?&gt;... groups)</span> </span>&#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolationSet = validator.validate(object, groups);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!constraintViolationSet.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConstraintViolationException(constraintViolationSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验对象</span></span><br><span class="line"><span class="comment">     * 使用与 Spring 集成的校验方式。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 待校验对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groups 待校验的组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BindException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">validateBySpring</span><span class="params">(T object, Class&lt;?&gt;... groups)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BindException </span>&#123;</span><br><span class="line">        DataBinder dataBinder = getBinder(object);</span><br><span class="line">        dataBinder.validate((Object[]) groups);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dataBinder.getBindingResult().hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BindException(dataBinder.getBindingResult());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">DataBinder <span class="title">getBinder</span><span class="params">(T object)</span> </span>&#123;</span><br><span class="line">        DataBinder dataBinder = <span class="keyword">new</span> DataBinder(object, ClassUtils.getShortName(object.getClass()));</span><br><span class="line">        dataBinder.setValidator(getValidatorAdapter(validator));</span><br><span class="line">        <span class="keyword">return</span> dataBinder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的工具类代码来源于文章：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yNDMyZDBmNTFjMGU=" title="https://www.jianshu.com/p/2432d0f51c0e">https://www.jianshu.com/p/2432d0f51c0e<i class="fa fa-external-link"></i></span></p><h2 id="定义分组校验："><a href="#定义分组校验：" class="headerlink" title="定义分组校验："></a>定义分组校验：</h2><p>有时候我们需要某个对象在这个接口是必填的，而在另一个参数里面又不需要必填，比如我们使用dto接受更新或者新增的参数，新增不需要校验<code>主键</code>或者其他的字段信息，但是注解校验器却拦截返回错误信息，这种情况下就需要使用分组校验的方法。</p><p>第一步：设置分组接口：</p><p>建议继承Default，因为默认的<code>groups</code>就是<code>groups = {Default.class}</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupUpdate</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：在需要分组校验的注解上增加groups</p><p>例如我在对象某个注解增加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotBlank</span>(groups = &#123;GroupUpdate<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">String</span> <span class="title">name</span></span>;</span><br></pre></td></tr></table></figure><p>第三步：在@validated中加入对应的分组：</p><p>这里定义了两个接口来代替新增和修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新接口</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test/update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">update</span><span class="params">(@Validated(GroupUpdate.class)</span> Product product) <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">    System.err.println(product);</span><br><span class="line">     <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新增接口</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">add</span><span class="params">(@Validated Product product)</span> <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">    System.err.println(product);</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四步：分组校验结果：</p><p>按照同样的参数请求两个接口，分组的不同出现了不同的情况</p><p>可以看到指定分组之后，如果validated里面没有指定group，在校验的时候将会跳过指定分组的校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.validation.BeanPropertyBindingResult: <span class="number">2</span> errors</span><br><span class="line">Field error in object <span class="string">'product'</span> on field <span class="string">'name'</span>: .....</span><br><span class="line">Field error in object <span class="string">'product'</span> on field <span class="string">'time'</span>: .....</span><br><span class="line">org.springframework.validation.BeanPropertyBindingResult: <span class="number">1</span> errors</span><br><span class="line">Field error in object <span class="string">'product'</span> on field <span class="string">'time'</span>: .....</span><br></pre></td></tr></table></figure><h3 id="分组继承："><a href="#分组继承：" class="headerlink" title="分组继承："></a>分组继承：</h3><p>自定义的分组可以使用继承方式进行校验，比如我们将很多个分组封装到一个特定的分组里面，方便我们自由组合多个自定义分组下面请看如下的案例：</p><p>首先是实体对象，通过继承的形式的形式，对于校验对象来说继承会将父对象的属性一并校验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bag</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"><span class="comment">// 分组使用 GroupAdd</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"颜色不能为空"</span>,groups = &#123;GroupAdd<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">color</span></span>;</span><br><span class="line">  <span class="comment">// get/set省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义对应的分组，比如我们将增删改操作的分组集成到一个叫做<code>操作</code>的分组里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupsOpration</span> <span class="keyword">extends</span> <span class="title">GroupUpdate</span>,<span class="title">GroupDel</span>,<span class="title">GroupAdd</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupUpdate</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupDel</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupAdd</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面分别定义对应的接口进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试组继承</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ParamException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/test/bag1"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">bag1</span><span class="params">(@Validated(GroupsOpration.class)</span> Bag product) <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">       System.err.println(product);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试组继承</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ParamException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/test/bag2"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">bag2</span><span class="params">(@Validated Bag product)</span> <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">       System.err.println(product);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>分别请求<code>/bag1</code>和<code>/bag2</code>得到如下的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Resolved [org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: <span class="number">2</span> errors</span><br><span class="line">Resolved [org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: <span class="number">1</span> error</span><br></pre></td></tr></table></figure><h2 id="如何处理validated异常信息"><a href="#如何处理validated异常信息" class="headerlink" title="如何处理validated异常信息"></a>如何处理validated异常信息</h2><h3 id="第一种：统一全局异常处理"><a href="#第一种：统一全局异常处理" class="headerlink" title="第一种：统一全局异常处理"></a>第一种：统一全局异常处理</h3><p>全局统一异常处理算是用的比较多的一种，可以解决基础的常见异常问题结果都返回，也可以使用</p><p>基本都写法和格式如下：</p><ol><li>在<code>类名</code>注明：<code>@ControllerAdvice</code>或者<code>@RestControllerAdvice</code>，分别对应<code>@Controller</code>和<code>@RestController</code>，至于这两个注解的区别可以自行进行学习和补充。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line">@<span class="meta">@RestControllerAdvice</span></span><br></pre></td></tr></table></figure><ol start="2"><li>对应的方法内部，使用<code>@ExceptionHandler</code>进行方法标注，在请求参数里面配套使用,即可对于指定的异常，如果在参数里面加入特定异常，那么在执行改方法的时候，会将对应的对象进行方法参数注入，这样就可以拿到抛出异常的对象信息进行自定义的异常处理了。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(&#123;Exception<span class="class">.<span class="keyword">class</span>&#125;)//主要注解</span></span><br><span class="line"><span class="class">@<span class="title">ResponseStatus</span>(<span class="title">HttpStatus</span>.<span class="title">OK</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">allError</span>(<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>下面是一个最终完整的案例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">//@ControllerAdvice 对应 @Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDealHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截未知的运行时异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(IllegalStateException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">notFount</span>(<span class="title">IllegalStateException</span> <span class="title">e</span>)</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">doSomethings</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(BindException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">bindError</span>(<span class="title">BindException</span> <span class="title">bind</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;ConstraintViolationException<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">HttpStatus</span>.<span class="title">OK</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">handleConstraintViolationException</span>(<span class="title">ConstraintViolationException</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;Exception<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">HttpStatus</span>.<span class="title">OK</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">allError</span>(<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="统一异常处理无法生效？"><a href="#统一异常处理无法生效？" class="headerlink" title="统一异常处理无法生效？"></a>统一异常处理无法生效？</h4><p>1.确保注解@RestControllerAdvice/@ControllerAdvice的类被<strong>spring容器管理到</strong>。</p><blockquote><p>  ①spring boot Java配置检查@SpringBootApplication(<strong>scanBasePackages</strong> = )（scanBasePackages 配置的包是否包含这个类默认情况下spring boot项目扫描的是@SpringBootApplication注解所在类的包及子包）</p><p>  ② xml配置的spring 普通项目检查<strong>&lt;context:component-scan base-package=”com.test”/&gt;</strong></p></blockquote><ol start="2"><li><p>检查项目中所有的切面编程，<strong>是否在某个切面将异常try-catch然后没有扔出来</strong>。常见的就是切面的环绕处理，捕获了异常忘记抛出来。</p></li><li><p>检查项目中是否有其他的相同的全局异常处理类，例如BaseController中<strong>是否已经定义</strong>了</p></li></ol><p>如果上面的排查方式都都尝试还是无法正常校验的话可能就是出现所谓统一全局处理的坑了，下面会讲解到对应的坑，如果 <strong>问题超过15分钟还没自我通过自己努力尽力解决</strong>，那么就赶紧上网找资料吧，碰运气基本都可以完美解决。</p><h3 id="第二种：控制器进行特定异常处理"><a href="#第二种：控制器进行特定异常处理" class="headerlink" title="第二种：控制器进行特定异常处理"></a>第二种：控制器进行特定异常处理</h3><p>一般这种使用方式比较少，毕竟有全局异常处理的情况下很少去使用控制器层的异常处理，某些特殊情况可以用到，了解即可。</p><p>和全局异常处理器类似，只不过定义方法修改到了对应的controller控制器层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestValid</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注解校验接口</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/valid"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">(@Validated Product product)</span> <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">        System.err.println(product);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParamException(<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    在控制器层处理异常信息，仅仅适用于当前控制器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">processException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        System.err.println(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三种：BindingResult对象处理异常信息："><a href="#第三种：BindingResult对象处理异常信息：" class="headerlink" title="第三种：BindingResult对象处理异常信息："></a>第三种：BindingResult对象处理异常信息：</h3><p>除开上面的方式之外，validate还提供<code>BindResult</code>对象封装异常信息，需要将该对象 <strong>紧跟</strong><code>@Validated</code>注解，就可以在校验失败之后在<code>BindResult</code>对象里面进行自定义的异常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试组继承</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParamException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test/bag1"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">bag1</span><span class="params">(@Validated(GroupsOpration.class)</span> Bag product, BindingResult bindingResult) <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">    <span class="comment">// 异常信息处理</span></span><br><span class="line">    <span class="keyword">if</span>(bindingResult.hasErrors())&#123;</span><br><span class="line">        List&lt;FieldError&gt; fieldErrors = bindingResult.getFieldErrors();</span><br><span class="line">        Map&lt;Object, Object&gt; objectObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (FieldError fieldError : fieldErrors) &#123;</span><br><span class="line">            objectObjectHashMap.put(fieldError.getField(), fieldError.getRejectedValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> objectObjectHashMap;</span><br><span class="line">    &#125;</span><br><span class="line">    System.err.println(product);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"color"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"time"</span>: <span class="string">"222"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统一全局处理器的坑："><a href="#统一全局处理器的坑：" class="headerlink" title="统一全局处理器的坑："></a>统一全局处理器的坑：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(IllegalStateException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">notFount</span>(<span class="title">IllegalStateException</span> <span class="title">e</span>)</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 处理异常结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果 @ExceptionHandler 注解中未声明要处理的异常类型，则默认为参数列表中的异常类型。注意只能绑定一个参数，如果在<strong>参数列表指定多个异常参数将无法生效</strong>，比如如下的写法是错误的，为什么会有这种情况，需要研究源码才能的得出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>()</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">notFount</span><span class="params">(Exception e,BindException bindExce, RuntimeException run)</span> </span>&#123; <span class="comment">// 这里指定多个Exception将无法生效</span></span><br><span class="line">    <span class="comment">// 处理异常结果</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的写法会出现如下的异常，大致的意思是找不到合适的解析器，就是说spring找不到合适的异常解析器去解析分发异常的请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not resolve parameter [<span class="number">2</span>] in <span class="keyword">public</span> java.lang.Object com.zxd.interview.valid.ExceptionDealHandler.notFount(java.lang.Exception,org.springframework.validation.BindException,java.lang.RuntimeException): No suitable resolver</span><br></pre></td></tr></table></figure><p>但是万事没有绝对，下面这种写法是可行的，在抛出<code>BindException</code>的异常之后，异常处理器将会正常的处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>()</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">notFount</span><span class="params">(Exception e,BindException bindExce)</span> </span>&#123;<span class="comment">//BindException 正常拦截处理</span></span><br><span class="line">    <span class="comment">// 处理异常结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前个人猜测是在定义参数类型的时候，定义的异常类上面出现“雷同”的<strong>构造方法</strong>，而spring在进行反射解析时候找到了对应的重复构造方法，导致无法生成代理对象完成异常处理，导致导致抛出异常。总的来说和spring validate的代理机制有关，有兴趣的小伙伴可以自行研究一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">自定义异常类1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    BusinessException(String code1, String code2, <span class="keyword">int</span> code3)&#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">自定义异常类2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamException</span><span class="params">(String code, String message, String error)</span></span>&#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这种写法是<strong>错误的</strong>，即使他们的构造方法不同，在抛出异常的时候依然出现了问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ExceptionHandler</span>()</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">errors</span><span class="params">(ParamException e, BusinessException busine)</span></span>&#123;<span class="comment">//错误的写法</span></span><br><span class="line">    <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议的写法，也是最稳妥的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(ParamException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">errors</span>(<span class="title">ParamException</span> <span class="title">e</span>)</span>&#123;<span class="comment">//错误的写法</span></span><br><span class="line">    <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，还是不建议使用<code>@ExceptionHandler()</code>这种形式，会发生各种莫名其妙的问题。</p><h3 id="总结自定义异常"><a href="#总结自定义异常" class="headerlink" title="总结自定义异常"></a>总结自定义异常</h3><p>根据上面的分析可以看出，统一全局异常处理如果不好好处理，很容易出现各种莫名其妙的问题，所以总结一下统一全局异常处理需要注意的点：</p><ul><li>建议一个异常处理对应一个方法，不要定义多个异常用一个方法处理，<strong>特别是自定义的异常类</strong></li><li>注意统一异常处理的异常处理优先级按照<strong>方法定义的顺序进行</strong>，比如如果出现BindException以及Exception，如果抛出的异常是BindException处理方法则优先定义则执行这一步，否则执行最大的<code>Exception</code></li><li>注意注解的异常拦截和方法参数的异常类<strong>保持一致</strong>，否则spring mvc 代理将抛出异常。</li></ul><h1 id="怎样校验list-lt-Object-gt-（重点）"><a href="#怎样校验list-lt-Object-gt-（重点）" class="headerlink" title="怎样校验list&lt;Object&gt;（重点）"></a>怎样校验<code>list&lt;Object&gt;</code>（重点）</h1><p>一般来说sprIng validate使用基本多看看文档或者找找博客都能解决，但是笔者遇到一个很纠结的问题，请看如下的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/createBatch"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">createBatch</span><span class="params">(@RequestBody @Validated List&lt;ApiPaymentMsgDto&gt; list, BindingResult bindResult, HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.build(<span class="number">401</span>, <span class="string">"请求参数为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//.....省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用JSON数据跑接口测试发现<strong>无法对<code>list&lt;Bean&gt;</code>对象进行校验！</strong>，那么这个问题就比较蛋疼了，因为集合的对象校验还是用的非常多的，下面针对这个“坑”讨论一下产生的原因和解决方式。</p><h2 id="为什么无法校验List-lt-Object-gt"><a href="#为什么无法校验List-lt-Object-gt" class="headerlink" title="为什么无法校验List&lt;Object&gt;?"></a>为什么无法校验<code>List&lt;Object&gt;</code>?</h2><p>查阅了很多资料之后，我找到了stackflow一篇文章的解释，文章原文如下：</p><blockquote><p>StackFlow文章地址：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTcyMDc3NjYvc3ByaW5nLW12Yy12YWxpZC1vbi1saXN0LW9mLWJlYW5zLWluLXJlc3Qtc2VydmljZQ==" title="https://stackoverflow.com/questions/17207766/spring-mvc-valid-on-list-of-beans-in-rest-service">https://stackoverflow.com/questions/17207766/spring-mvc-valid-on-list-of-beans-in-rest-service<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Section 3.1.3 of the JSR-303 Specification says that:</span><br><span class="line"></span><br><span class="line">In addition to supporting instance validation, validation of graphs of object is also supported. The result of a graph validation is returned as a unified set of constraint violations. Consider the situation where bean X contains a field of type Y. By annotating field Y with the @Valid annotation, the Validator will validate Y (and its properties) when X is validated. The exact type Z of the value contained in the field declared of type Y (subclass, implementation) is determined at runtime. The constraint definitions of Z are used. This ensures proper polymorphic behavior for associations marked @Valid.</span><br><span class="line"></span><br><span class="line">Collection-valued, array-valued and generally Iterable fields and properties may also be decorated with the @Valid annotation. This causes the contents of the iterator to be validated. Any object implementing java.lang.Iterable is supported.</span><br></pre></td></tr></table></figure><p>下面是英文的机翻：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">JSR-303规范的3.1.3节说:</span><br><span class="line">除了支持实例验证外，还支持对象图形的验证。</span><br><span class="line">图形验证的结果作为约束违反的统一集合返回。</span><br><span class="line">考虑bean X包含一个类型为Y的字段的情况，通过使用@Valid注释字段Y，验证器将在验证X时验证Y(及其属性)。</span><br><span class="line">类型Y(子类，实现)声明的字段中包含的值的确切类型Z是在运行时确定的。</span><br><span class="line">使用Z的约束定义。</span><br><span class="line">这确保标记为@Valid的关联具有正确的多态行为。</span><br><span class="line"></span><br><span class="line">集合值、数组值以及通常可迭代的字段和属性也可以用@Valid注释进行装饰。</span><br><span class="line">这将导致验证迭代器的内容。</span><br><span class="line">任何实现java.lang的对象。</span><br><span class="line">支持Iterable。</span><br></pre></td></tr></table></figure><p><code>@Valid</code>是JSR-303批注，JSR-303适用于JavaBeans的验证。A<code>java.util.List</code>不是JavaBean（根据JavaBean的<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YWVlLzUvdHV0b3JpYWwvZG9jL2JuYWlyLmh0bWw=" title="https://docs.oracle.com/javaee/5/tutorial/doc/bnair.html">官方描述<i class="fa fa-external-link"></i></span>），因此不能使用兼容JSR-303的验证器直接对其进行验证。这有两个观察结果支持。</p><h2 id="简单粗暴的方式："><a href="#简单粗暴的方式：" class="headerlink" title="简单粗暴的方式："></a>简单粗暴的方式：</h2><p>最为简单粗暴的方式是既然不能自动校验，那我们换成手动好了，这种方式的优缺点如下：</p><p>优点：</p><ol><li>校验的细节由自己决定，可以附加业务的校验，也可以自由灵活的组合</li><li>可以编写健壮的工具类代码，甚至脱离spring validator（指hibernate validator）</li></ol><p>缺点：</p><ol><li>代码复用性差，这个和编程水平有关，工具类也分写的好和写的差</li><li>因为需要思考细节，容易出逻辑漏洞和其他BUG，所谓做的越多越容易出错就是这个道理</li><li>需要学习更多的api使用，增加学习成本</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 校验集合bean内容是否符合校验规则</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    返回样例：</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">           "status": 401,</span></span><br><span class="line"><span class="comment">           "msg": "第 1 条信息：手机号必须为11位,币种必须是3位大写字母|第 2 条信息：币种必须是3位大写字母,手机号必须为11位",</span></span><br><span class="line"><span class="comment">           "data": null</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> apiObj 接口传输对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ZmtResult <span class="title">validListBean</span><span class="params">(List&lt;ApiPaymentMsgDto&gt; apiObj)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (CollectionUtils.isEmpty(apiObj)) &#123;</span><br><span class="line">           <span class="keyword">return</span> ZmtResult.build(<span class="number">401</span>, <span class="string">"请求参数为空"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; apiObj.size(); i++) &#123;</span><br><span class="line">           ApiPaymentMsgDto apiPaymentMsgDto = apiObj.get(i);</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">null</span> == apiPaymentMsgDto) &#123;</span><br><span class="line">               <span class="keyword">return</span> ZmtResult.build(<span class="number">400</span>, <span class="string">"第 %s 条信息请求参数为空"</span>, i);</span><br><span class="line">           &#125;</span><br><span class="line">           Validator validator = ValidatorUtil.getValidator();</span><br><span class="line">           Set&lt;ConstraintViolation&lt;ApiPaymentMsgDto&gt;&gt; validate = validator.validate(apiPaymentMsgDto);</span><br><span class="line">           <span class="comment">// 如果不存在校验异常，则返回空信息</span></span><br><span class="line">           <span class="keyword">if</span> (org.apache.commons.collections.CollectionUtils.isEmpty(validate)) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           builder.append(String.format(<span class="string">"第 %s 条信息："</span>, i + <span class="number">1</span>));</span><br><span class="line">           <span class="keyword">for</span> (ConstraintViolation&lt;ApiPaymentMsgDto&gt; apiPaymentMsgDtoConstraintViolation : validate) &#123;</span><br><span class="line">               builder.append(apiPaymentMsgDtoConstraintViolation.getMessage());</span><br><span class="line">               builder.append(<span class="string">","</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           builder.deleteCharAt(builder.length() - <span class="number">1</span>);</span><br><span class="line">           builder.append(<span class="string">"|"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 如果存在错误信息，返回错误提示，否则返回空对象证明没有异常</span></span><br><span class="line">       <span class="keyword">if</span> (builder.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           builder.deleteCharAt(builder.length() - <span class="number">1</span>);</span><br><span class="line">           <span class="keyword">return</span> ZmtResult.build(<span class="number">401</span>, builder.toString());</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="一种优雅的设计解决方案："><a href="#一种优雅的设计解决方案：" class="headerlink" title="一种优雅的设计解决方案："></a>一种优雅的设计解决方案：</h2><p>看下stackFlow的一位老哥的解决办法：</p><p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjgxNTA0MDUvdmFsaWRhdGlvbi1vZi1hLWxpc3Qtb2Ytb2JqZWN0cy1pbi1zcHJpbmcvMzYzMTM2MTUjMzYzMTM2MTU=" title="https://stackoverflow.com/questions/28150405/validation-of-a-list-of-objects-in-spring/36313615#36313615">https://stackoverflow.com/questions/28150405/validation-of-a-list-of-objects-in-spring/36313615#36313615<i class="fa fa-external-link"></i></span> （需要翻墙）</p><p>下面是机翻的版本：</p><blockquote><p>我发现了另一种有效的方法。基本的问题是您想要一个列表作为服务的输入有效负载，但是javax验证不会验证列表，只验证JavaBean。诀窍是使用一个自定义的list类，它既是list又是JavaBean:</p></blockquote><p>根据大佬的说明，我尝试实现了一个针对校验使用的list，注意需要提供get/set方法，以及使用泛型，在连接里面进行了模板代码和实现，可以直接拿去复制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为了兼容注解校验使用的一种设计</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&#123;<span class="doctag">@link</span> #&#123;https://stackoverflow.com/questions/28150405/validation-of-a-list-of-objects-in-spring/36313615#36313615&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/3 23:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;E&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidatorList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = <span class="keyword">new</span> ArrayList&lt;E&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidatorList</span><span class="params">(List&lt;E&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个设计由于代码内容过长这里贴链接了：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ludGVydmlldy9ibG9iL21hc3Rlci9zcmMvbWFpbi9qYXZhL2NvbS96eGQvaW50ZXJ2aWV3L3ZhbGlkL3V0aWxzL1ZhbGlkYXRvckxpc3QuamF2YQ==" title="https://gitee.com/lazyTimes/interview/blob/master/src/main/java/com/zxd/interview/valid/utils/ValidatorList.java">https://gitee.com/lazyTimes/interview/blob/master/src/main/java/com/zxd/interview/valid/utils/ValidatorList.java<i class="fa fa-external-link"></i></span></p><p>先不管其他的问题，先验证一下是否可以正常使用，而实际的体验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试stackflow 的一种优雅设计，可以实现对应的list 集合bean对象校验</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> products      校验对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bindingResult 异常绑定器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParamException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test/testvalidList"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">testvalidList</span><span class="params">(@RequestBody @Validated ValidatorList&lt;Product&gt; products, BindingResult bindingResult)</span> <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">        List&lt;FieldError&gt; fieldErrors = bindingResult.getFieldErrors();</span><br><span class="line">        fieldErrors.forEach(item -&gt; &#123;</span><br><span class="line">            String defaultMessage = item.getDefaultMessage();</span><br><span class="line">            System.err.println(defaultMessage);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.err.println(products);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是个人经过了研究的结果，不得不感叹思路真心很不错，目前个人使用正常，如果有问题欢迎下方留言讨论</p><h1 id="其他扩展"><a href="#其他扩展" class="headerlink" title="其他扩展"></a>其他扩展</h1><h2 id="JSR-303："><a href="#JSR-303：" class="headerlink" title="JSR - 303："></a>JSR - 303：</h2><p>Hibernate Validator 是 Bean Validation 的参考实现，说白了<code>Hibernate Validator</code>就是<code>JSR-303</code>。</p><p>下载 JSR 303 – Bean Validation 规范 <span class="exturl" data-url="aHR0cDovL2pjcC5vcmcvZW4vanNyL2RldGFpbD9pZD0zMDM=" title="http://jcp.org/en/jsr/detail?id=303">http://jcp.org/en/jsr/detail?id=303<i class="fa fa-external-link"></i></span></p><h2 id="Hibernate-validator："><a href="#Hibernate-validator：" class="headerlink" title="Hibernate - validator："></a>Hibernate - validator：</h2><p>如果想要深入了解源代码实现，有必要研究一下<code>Hibernate - validator</code>的文档，从官方文档学习是一个推荐的方法：</p><p>旧版本的文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmpib3NzLm9yZy9oaWJlcm5hdGUvdmFsaWRhdG9yLzQuMi9yZWZlcmVuY2UvZW4tVVMvaHRtbF9zaW5nbGUv" title="https://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html_single/">https://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html_single/<i class="fa fa-external-link"></i></span></p><p>较新版本的文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmpib3NzLm9yZy9oaWJlcm5hdGUvc3RhYmxlL3ZhbGlkYXRvci9yZWZlcmVuY2UvZW4tVVMvaHRtbF9zaW5nbGUvP3Y9Ny4wI192YWxpZGF0aW5nX2NvbnN0cmFpbnRz" title="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=7.0#_validating_constraints">https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=7.0#_validating_constraints<i class="fa fa-external-link"></i></span></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>在学习过程中尝试看源代码，但是后来发现个人源代码学习经验不足，胡乱的看代码是很那坚持的，看了几个小时之后突然醒悟了，还是要从官方给的案例和文档的中，从易到难，而不是一上来就直接看源码，既缺少了大局，而且收效也低。</p><p>另外有条件尽可能上<code>stackflow</code>，里面大神真的多，可以学到很多很棒棒的设计。</p><p>文章字数比较多，感谢观看，如果觉得本文差强人意，可以查看下面的内容，里面的最后两篇文章有关于一部分原理对接讲解可以看一看，个人了解不够深入就不写出来误人子弟了。</p><h1 id="巨人的肩膀："><a href="#巨人的肩膀：" class="headerlink" title="巨人的肩膀："></a>巨人的肩膀：</h1><p>Validation in Spring Boot：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFlbGR1bmcuY29tL3NwcmluZy1ib290LWJlYW4tdmFsaWRhdGlvbg==" title="https://www.baeldung.com/spring-boot-bean-validation">https://www.baeldung.com/spring-boot-bean-validation<i class="fa fa-external-link"></i></span></p><p>Spring Validation最佳实践及其实现原理，参数校验没那么简单！：<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMzQ3MTc0Mg==" title="https://segmentfault.com/a/1190000023471742">https://segmentfault.com/a/1190000023471742<i class="fa fa-external-link"></i></span></p><p>spring官方那个案例：<span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vZ3VpZGVzL2dzL3ZhbGlkYXRpbmctZm9ybS1pbnB1dC8=" title="https://spring.io/guides/gs/validating-form-input/">https://spring.io/guides/gs/validating-form-input/<i class="fa fa-external-link"></i></span></p><p>Java Bean Validation（参数校验） 最佳实践： <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc29mdGlkZWEvcC85NzEyNTcxLmh0bWw=" title="https://www.cnblogs.com/softidea/p/9712571.html">https://www.cnblogs.com/softidea/p/9712571.html<i class="fa fa-external-link"></i></span></p><p>这么写参数校验(validator)就不会被劝退了~：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzOTAyODExMjc1Mjc4I2hlYWRpbmctMA==" title="https://juejin.cn/post/6844903902811275278#heading-0">https://juejin.cn/post/6844903902811275278#heading-0<i class="fa fa-external-link"></i></span></p><p>springMVC Validation 参数检验工具：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85OTljNmMxMGE1YzY=" title="https://www.jianshu.com/p/999c6c10a5c6">https://www.jianshu.com/p/999c6c10a5c6<i class="fa fa-external-link"></i></span></p><p>Bean Validation: Integrating JSR-303 with Spring：<span class="exturl" data-url="aHR0cDovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMjA1MDgwMzA0NTkvaHR0cDovL2Jsb2cub3JhbmdlMTEubmwvMjAwOS8wOC8wNC9iZWFuLXZhbGlkYXRpb24taW50ZWdyYXRpbmctanNyLTMwMy13aXRoLXNwcmluZy8=" title="http://web.archive.org/web/20120508030459/http://blog.orange11.nl/2009/08/04/bean-validation-integrating-jsr-303-with-spring/">http://web.archive.org/web/20120508030459/http://blog.orange11.nl/2009/08/04/bean-validation-integrating-jsr-303-with-spring/<i class="fa fa-external-link"></i></span></p><p>Validation and Exception Handling with Spring：<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL3NwcmFuZy92YWxpZGF0aW9uLWFuZC1leGNlcHRpb24taGFuZGxpbmctd2l0aC1zcHJpbmctYmE0NGIzZWUwNzIz" title="https://medium.com/sprang/validation-and-exception-handling-with-spring-ba44b3ee0723">https://medium.com/sprang/validation-and-exception-handling-with-spring-ba44b3ee0723<i class="fa fa-external-link"></i></span></p><p>@ControllerAdvice + @ExceptionHandler 全局处理 Controller 层异常：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmdpbmJsdWUvYXJ0aWNsZS9kZXRhaWxzLzcwMTg2NTg2" title="https://blog.csdn.net/kinginblue/article/details/70186586">https://blog.csdn.net/kinginblue/article/details/70186586<i class="fa fa-external-link"></i></span></p><p><strong>【Spring源码分析】40-Spring Validation参数校验的使用与原理</strong>：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoZW5jaGFvaGFvMTIzMjEvYXJ0aWNsZS9kZXRhaWxzLzEwMDE2Mzk5MQ==" title="https://blog.csdn.net/shenchaohao12321/article/details/100163991">https://blog.csdn.net/shenchaohao12321/article/details/100163991<i class="fa fa-external-link"></i></span></p><p><strong>SpringBoot + Validator 参数校验配置 - - - [深度]</strong>：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yNDMyZDBmNTFjMGU=" title="https://www.jianshu.com/p/2432d0f51c0e">https://www.jianshu.com/p/2432d0f51c0e<i class="fa fa-external-link"></i></span></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      对象校验是一个十分恼火的问题，但是好在有脚手架可以给我们开箱即用
    
    </summary>
    
    
      <category term="java" scheme="https://lazytime.site/categories/java/"/>
    
    
      <category term="spring" scheme="https://lazytime.site/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>如何写一份优秀的接口文档</title>
    <link href="https://lazytime.site/2020/12/29/doc_write/"/>
    <id>https://lazytime.site/2020/12/29/doc_write/</id>
    <published>2020-12-29T15:55:07.000Z</published>
    <updated>2020-12-29T15:57:23.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何写一份优秀的接口文档"><a href="#如何写一份优秀的接口文档" class="headerlink" title="如何写一份优秀的接口文档"></a>如何写一份优秀的接口文档</h1><p>[TOC]</p><a id="more"></a><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>最近看了很多写的非常好的接口文档，在理解业务方面给了非常多的帮助，解决很多时候对于一些<code>协商数据</code>的问题困扰，同时，后续个人的工作当中，也需要对外开放接口给第三方进行调用，这时候一个好的规范文档可以解决很多问题。</p><h2 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h2><ol><li>个人对于写接口文档的一些资料整理。</li><li>学习如何写一份别人乐意去看的文档。</li><li>希望可以通过本文帮助处理那些面临自己写接口文档的情况下无从下手的尴尬的局面。</li></ol><!-- more --><h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h2><p>主要分为以下两个版本，两个版本各有各自的特点，需要应对不同的应用场景</p><ol><li>简单版本</li><li>复杂版本</li></ol><h2 id="简单版本"><a href="#简单版本" class="headerlink" title="简单版本"></a>简单版本</h2><p>核心：如果你的案例可以直接依靠复制拿来使用，那这个文档就是好文档</p><p>既然要简单，那就抓住核心：<strong>怎么简单怎么来，怎么省时间怎么来</strong></p><p>如果不知道怎么写，就<strong>把案例写的越详细越好</strong>。</p><p>开发时间是非常宝贵的，而接口对接通常都是一些工期紧张的情况下去快速编写，而且面对一些碎片化的时间工作者，一份简单直观的文档可能更受欢迎。</p><p>另外，接口文档最终形式最好是pdf，以前遇到过接口文档写到<strong>word</strong>里面的，在不同的版本下可能会出现样式等各种问题</p><blockquote><p>最佳方式：word -&gt; pdf</p></blockquote><h3 id="简单版本的目录格式"><a href="#简单版本的目录格式" class="headerlink" title="简单版本的目录格式"></a>简单版本的目录格式</h3><ul><li>接口说明</li><li>请求示例</li><li>请求参数说明</li><li>响应示例</li><li>响应参数说明</li></ul><h3 id="案例模板1："><a href="#案例模板1：" class="headerlink" title="案例模板1："></a>案例模板1：</h3><h4 id="接口说明："><a href="#接口说明：" class="headerlink" title="接口说明："></a>接口说明：</h4><p>接口功能：</p><blockquote><p>本接口用于获取用户的token信息。</p></blockquote><p>接口请求地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https: xxx&#x2F;xxx&#x2F;xxxx</span><br></pre></td></tr></table></figure><p><strong>请求头 :</strong>  </p><table><thead><tr><th>请求头</th><th>请求内容</th><th>说明</th></tr></thead><tbody><tr><td>Authorization</td><td>Basic secretKey</td><td>访问token</td></tr><tr><td>Content-Type</td><td>application/json</td><td>请求方式</td></tr></tbody></table><p><strong>请求方式:  POST</strong></p><p><strong>参数类型</strong> ：<strong>JSON</strong></p><h4 id="请求示例："><a href="#请求示例：" class="headerlink" title="请求示例："></a>请求示例：</h4><p>绝大多数为json，格式自定</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">"id"</span>:<span class="string">"20201219"</span>,</span><br><span class="line">     <span class="attr">"name"</span>:<span class="string">"21.59"</span>，</span><br><span class="line">     <span class="string">"age"</span>:<span class="string">"ftp_1002"</span></span><br><span class="line">     ...</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="attr">"id"</span>:<span class="string">"20201219"</span>,</span><br><span class="line">     <span class="attr">"name"</span>:<span class="string">"21.59"</span>，</span><br><span class="line">     <span class="string">"age"</span>:<span class="string">"ftp_1002"</span></span><br><span class="line">     ...</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="请求参数说明"><a href="#请求参数说明" class="headerlink" title="请求参数说明"></a>请求参数说明</h4><table><thead><tr><th>字段名</th><th>字段说明</th><th>字段类型</th><th>是否必填</th></tr></thead><tbody><tr><td>字段1</td><td>说明字段1的作用</td><td>varchar(50)</td><td>是</td></tr><tr><td>字段2</td><td>说明字段2的作用</td><td>int</td><td>是</td></tr><tr><td>字段3</td><td>说明字段3的作用</td><td>decimal</td><td>是</td></tr></tbody></table><h4 id="响应示例"><a href="#响应示例" class="headerlink" title="响应示例"></a>响应示例</h4><p>成功响应编码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "code: "200",</span><br><span class="line">    "message": "请求成功",</span><br><span class="line">    "data": 返回数据，格式自定</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>失败响应编码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "code: "200",</span><br><span class="line">    "message": "请求成功",</span><br><span class="line">    "data": 返回数据，格式自定</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="响应参数说明"><a href="#响应参数说明" class="headerlink" title="响应参数说明"></a>响应参数说明</h4><table><thead><tr><th><strong>接口返回码</strong></th><th><strong>接口返回描述</strong></th></tr></thead><tbody><tr><td>200</td><td>成功</td></tr><tr><td>400</td><td>请求参数异常</td></tr><tr><td>401</td><td>授权失败</td></tr><tr><td>500</td><td>系统异常</td></tr></tbody></table><h3 id="案例模板2："><a href="#案例模板2：" class="headerlink" title="案例模板2："></a>案例模板2：</h3><p>下面这种模板是单个接口的适合很实用，同时针对一些比较简单的接口这样处理还算比较直观</p><p>核心是<strong>一个表包含所有信息</strong>，这对于一些接口量非常非常大的时候或者接口参数相似的时候比较有效果，这样可以使得内容比较紧凑，不会看了下一页忘记上一页的烦恼，当然缺点也很明显，会存在文字堆积的情况。</p><blockquote><p> markdown的表格在存放Json的数据时候不是很直观，建议使用<strong>word</strong></p></blockquote><table><thead><tr><th align="left">接口名</th><th align="left">UserUpdateService</th><th align="left"></th></tr></thead><tbody><tr><td align="left"><strong>接口请求地址</strong></td><td align="left"><span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20=" title="http://www.baidu.com">http://www.baidu.com<i class="fa fa-external-link"></i></span></td><td align="left"></td></tr><tr><td align="left"><strong>功能说明</strong></td><td align="left">UserUpdateService接口是应用系统的账号修改方法</td><td align="left"></td></tr><tr><td align="left"><strong>请求参数</strong></td><td align="left"><strong>参数名</strong></td><td align="left"><strong>中文说明</strong></td></tr><tr><td align="left"></td><td align="left">RequestId</td><td align="left">平台每次调用生成的随机ID，应用系统每次响应返回此ID，String类型</td></tr><tr><td align="left"></td><td align="left">uid</td><td align="left">三方应用系统账号创建时，返回给应用系统的账号主键uid。<strong>必传字段</strong></td></tr><tr><td align="left"></td><td align="left">loginName/ fullName</td><td align="left">需要修改的账号字段属性</td></tr><tr><td align="left"><strong>响应参数</strong></td><td align="left"><strong>参数名</strong></td><td align="left"><strong>中文说明</strong></td></tr><tr><td align="left"></td><td align="left">RequestId</td><td align="left">平台每次调用接口发送的请求ID，字段为String类型</td></tr><tr><td align="left"></td><td align="left">resultCode</td><td align="left">接口调用处理的结果码，<strong>0为正常处理</strong>，其它值由应用系统定义。字段为String类型，<strong>必传字段</strong>。</td></tr><tr><td align="left"></td><td align="left">message</td><td align="left">接口调用处理的信息。字段为String类型</td></tr><tr><td align="left"><strong>请求示例：</strong></td><td align="left">{        “token”,””,  “treeCode”,” EXECUTIVE”,      “code”,””}</td><td align="left">markdown展示不是很好看，建议word</td></tr><tr><td align="left"><strong>返回值</strong></td><td align="left">{      “xxxx”:  “xxxxxx”,      “resultCode”: “0”,      “message”:  “success”  }</td><td align="left">markdown展示不是很好看，建议word</td></tr></tbody></table><h3 id="案例模板3："><a href="#案例模板3：" class="headerlink" title="案例模板3："></a>案例模板3：</h3><p>下面这种可能不是很直观，但是参考很多文档发现好像类似的还不少，也可以参考一下。</p><p>请求地址：<code>http://www.baidu.com</code></p><h4 id="l-属性列表"><a href="#l-属性列表" class="headerlink" title="l 属性列表"></a>l <strong>属性列表</strong></h4><table><thead><tr><th>属性名</th><th>中文命名</th><th>值类型</th><th>值必须</th><th>描述</th></tr></thead><tbody><tr><td>token</td><td>令牌</td><td>String</td><td>是</td><td></td></tr><tr><td>treeCode</td><td>机构树编码</td><td>String</td><td>是</td><td>如果为空表示根机构，默认填写” ROOT”</td></tr><tr><td>code</td><td>机构代码</td><td>String</td><td>是</td><td></td></tr><tr><td>start_date</td><td>开始日期</td><td>Date</td><td></td><td>合同或项目的开始日期</td></tr><tr><td>name</td><td>机构名称</td><td>String</td><td>是</td><td></td></tr><tr><td>end_date</td><td>结束日期</td><td>Date</td><td></td><td>合同或项目的结束日期</td></tr><tr><td>user_num</td><td>驻点人员数量</td><td>Int</td><td></td><td></td></tr><tr><td>supplier_name</td><td>供应商名称</td><td>String</td><td></td><td></td></tr><tr><td>type</td><td>机构类型</td><td>String</td><td>是</td><td>项目机构ProjectOrg，行政机构AdministrativeOrg</td></tr><tr><td>orgUpCode</td><td>上层机构代码</td><td>String</td><td>是</td><td></td></tr><tr><td>parentId</td><td>父机构code</td><td>String</td><td>是</td><td></td></tr><tr><td>isDisabled</td><td>是否禁用</td><td>Boolean</td><td></td><td>false</td></tr></tbody></table><p>l <strong>响应属性列表</strong></p><table><thead><tr><th>属性名</th><th>中文命名</th><th>值类型</th><th>值必须</th><th>描述</th></tr></thead><tbody><tr><td>code</td><td>返回码</td><td>String</td><td>是</td><td></td></tr><tr><td>message</td><td>返回信息</td><td>String</td><td>是</td><td>如果为空表示根机构，默认填写” ROOT”</td></tr><tr><td>data</td><td>返回内容</td><td>String</td><td>是</td><td></td></tr></tbody></table><h4 id="l-JSON数据示例"><a href="#l-JSON数据示例" class="headerlink" title="l JSON数据示例**"></a>l <strong>JSON数据示例**</strong></h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[http:<span class="comment">//xxxxxxxx/xxx/xxx]</span></span><br><span class="line"></span><br><span class="line">请求参数：</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        “token”,””,               //必填</span></span><br><span class="line"><span class="string">        “treeCode”,” EXECUTIVE”,  //必填</span></span><br><span class="line"><span class="string">        “code”,””,                //必填</span></span><br><span class="line"><span class="string">        “entity”,” &#123;</span></span><br><span class="line"><span class="string">        "</span>code<span class="string">":"</span><span class="number">2222</span><span class="string">",            //必填</span></span><br><span class="line"><span class="string">        "</span> start_date<span class="string">":"</span><span class="string">",</span></span><br><span class="line"><span class="string">        "</span>name<span class="string">":"</span>字段名称<span class="string">",         //必填</span></span><br><span class="line"><span class="string">        "</span>end_date <span class="string">":"</span><span class="string">",   </span></span><br><span class="line"><span class="string">        "</span>user_num<span class="string">":"</span><span class="string">",</span></span><br><span class="line"><span class="string">        "</span>supplier_name<span class="string">":"</span><span class="string">",</span></span><br><span class="line"><span class="string">        “type”,””,   //指定类型  </span></span><br><span class="line"><span class="string">        "</span>orgUpCode<span class="string">":"</span><span class="number">11111</span><span class="string">",      //必填</span></span><br><span class="line"><span class="string">        "</span>parentId<span class="string">":"</span><span class="number">1111111</span><span class="string">",    //必填</span></span><br><span class="line"><span class="string">        “isDisabled”:” false”    //是否禁用</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"></span><br><span class="line">响应：login</span><br><span class="line"></span><br><span class="line">JSON - 数据示例</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line"> <span class="attr">"data"</span>: &#123;</span><br><span class="line">     <span class="attr">"treeId"</span>: <span class="string">"ROOT"</span>,</span><br><span class="line">     <span class="attr">"parentId"</span>: <span class="number">112034</span>,</span><br><span class="line">     <span class="attr">"name"</span>: <span class="string">"3333"</span>,</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"errorCode"</span>: <span class="literal">null</span>,</span><br><span class="line"> <span class="attr">"errorName"</span>: <span class="literal">null</span>,</span><br><span class="line"> <span class="attr">"errorMessage"</span>: <span class="literal">null</span>,</span><br><span class="line"> <span class="attr">"errorException"</span>: &#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"trace"</span>: <span class="literal">null</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，一个简单的接口文档差不多就是这些内容，下面将会介绍一下复杂的做法（内容较多）</p><h2 id="复杂版本"><a href="#复杂版本" class="headerlink" title="复杂版本"></a>复杂版本</h2><p>由于不同的公司有不同的文档格式要求，这里只给出我看过的几个文档罗列下来的一些文档内容，不一定通用，也不一定是很完美的，但是希望内容可以具备一定的参考价值。</p><p>复杂版本的内容有点多。请耐心观看或者收藏再看（=v=）</p><h3 id="复杂版本的目录格式"><a href="#复杂版本的目录格式" class="headerlink" title="复杂版本的目录格式"></a>复杂版本的目录格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">+ 封面</span><br><span class="line">  + 接口文档名称</span><br><span class="line">  + 接口版本号</span><br><span class="line">  + 版权说明</span><br><span class="line">+ 文档信息</span><br><span class="line">  + 标题 | 创建时间 | 打印时间 | 文件名 | 存放目录 | 所有者 | 作用</span><br><span class="line">  + 小题：版权声明</span><br><span class="line">+ 版本历史（重点1）</span><br><span class="line">  + \| 版本号 \| 日期 \| 修改者 \| 描述 \|</span><br><span class="line">  + \| v1.0.0  \| xxx \| xxx \| xxx |</span><br><span class="line">+ 目录</span><br><span class="line">  + 结构清晰</span><br><span class="line">  + 有条理</span><br><span class="line">  + 能快速定位需要的信息（后文会介绍）</span><br><span class="line">+ 文档具体内容部分</span><br><span class="line">  + 编写目的</span><br><span class="line">  + 对接准备事项</span><br><span class="line">    + 测试联调</span><br><span class="line">    + 上线</span><br><span class="line">  + 使用协议 + 规范</span><br><span class="line">  + 报文规范</span><br><span class="line">    + 请求报文规范</span><br><span class="line">    + 响应报文规范</span><br><span class="line">  + 接口描述</span><br><span class="line">    + 报文规范</span><br><span class="line">      + 请求报文</span><br><span class="line">      + 响应报文</span><br><span class="line">      + 公共报文头</span><br><span class="line">      + 接口码说明</span><br><span class="line">      + 业务接口</span><br><span class="line">      + 查询接口</span><br><span class="line">    + 加解密规范</span><br><span class="line">      + 原则</span><br><span class="line">      + 令牌信息</span><br><span class="line">      + 加密规范</span><br><span class="line">      + 解密规范</span><br><span class="line">  + 业务接口</span><br><span class="line">    + 具体接口1：</span><br><span class="line">      + 说明</span><br><span class="line">      + 规范码（查表）</span><br><span class="line">      + 使用方式</span><br><span class="line">      + 请求字段</span><br><span class="line">      + 响应字段</span><br><span class="line">      + 案例</span><br><span class="line">    + 具体接口2....</span><br><span class="line">    ........</span><br><span class="line">  + 附录</span><br><span class="line">    + 参考资料1</span><br><span class="line">    + 参考资料2</span><br><span class="line">  + 其他.....</span><br></pre></td></tr></table></figure><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><h4 id="封面："><a href="#封面：" class="headerlink" title="封面："></a>封面：</h4><p>封面还是比较重要的，毕竟是打开文档的第一眼内容，下面用阿里的文档作为参考，可以看到封面一般是如下内容：</p><ul><li>公司名称</li><li>文档名称</li><li>版本号</li></ul><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201226173034.png" alt=""></p><h4 id="文档信息："><a href="#文档信息：" class="headerlink" title="文档信息："></a>文档信息：</h4><p>文档信息主要记录这份文件的产生日期以及具体的创建打印日期等。</p><table><thead><tr><th>文档名</th><th>内容</th></tr></thead><tbody><tr><td>标题</td><td>一份帅气的文档</td></tr><tr><td>创建日期</td><td>20xx-xx-xx</td></tr><tr><td>打印日期</td><td>20xx-xx-xx</td></tr><tr><td>文件名</td><td>文档的全名</td></tr><tr><td>存放目录</td><td>文件位置</td></tr><tr><td>所有者</td><td>某某公司</td></tr><tr><td>作者</td><td>张三</td></tr></tbody></table><blockquote><p>版权声明：（现在这个时代版权是极其重要的）</p><p>xxxx所有，不得三方借阅、出让、出版</p></blockquote><h4 id="版本历史："><a href="#版本历史：" class="headerlink" title="版本历史："></a>版本历史：</h4><p>版本历史是很重要的，每次改动都需要有详细的记录，这样才能保证文档的干净和有效，同时可以方便<strong>review</strong>的时候，对于文档的修订者进行文档审查</p><table><thead><tr><th>版本号</th><th>日期</th><th>概述</th><th>修订者</th></tr></thead><tbody><tr><td>1.0.0</td><td>20xx-xx-xx</td><td>创建</td><td>张三</td></tr><tr><td>1.0.1</td><td>20xx-xx-xx</td><td>修改文档第一小节内容</td><td>李四</td></tr><tr><td>1.0.2</td><td>20xx-xx-xx</td><td>修订文档第四小节的错误描述，更新文档说明</td><td>王五</td></tr></tbody></table><p>目录：</p><p>好的文档一定有好的目录，只要按照一定的规范和格式写出来的文档，一般看上去都是十分舒服的。还是用阿里的开发手册做参考<br><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201226173949.png" alt=""></p><h4 id="文档具体内容部分"><a href="#文档具体内容部分" class="headerlink" title="文档具体内容部分"></a>文档具体内容部分</h4><p>这一部分发挥的自由空间就比较大了，不同的业务不同的公司不同的需求不同的人都能写出万千种格式的文档，所以这里也是给一个样例做参考使用。是否有实用价值因人而异。</p><blockquote><p> 为了不让整个目录树太长，这里没有做标题说明=-=</p></blockquote><p><strong>编写目的：</strong></p><p>需要解决什么问题，为什么要这份文档，这份文档有什么参考价值？</p><p><strong>对接准备事项：</strong></p><p>接口方可以提供什么内容，接口方需要对接方的那些内容，以及提供的其他信息，比如需要对接方提供 <strong>系统应用id</strong>，<strong>系统唯一标识</strong>。向对接方提供密钥等等</p><pre><code>1. **测试联调**：分配测试的密钥，测试环境的账户和密码以及其他信息2. **上线**：上线之后需要做什么事情，如：替换生产url，替换生产环境账户密码，替换密钥为生产密钥等等</code></pre><p><strong>使用协议 + 规范</strong>：</p><p>可以是本次对接使用的算法，通信协议，可以是术语说明或者和业务相关的其他说明，以及对接的要求都可以，发挥空间很大，自由设计。</p><p><strong>报文规范：</strong></p><p>报文规范是接口对接的核心部分，因为对接大部分的时间基本都是花在接口参数调试和请求调试等。所以报文规范算是非常重要的内容。具体内容可以参考简单版本的接口描述，也可以使用目录格式进行对应的描述</p><pre><code>+ 请求报文：主要为请求的Body,以及请求的header内容，一般都是Json的格式，并且要求UTF8编码+ 响应报文：返回的格式和内容，也是需要协商的部分+ 公共报文头：一般需要重复使用的参数可以作为公共报文头，但是不是所有的公共报文头都是必选，存在可选的参数+ 接口码说明：描述接口的注意事项，以及那些字段参数需要重点关注，主要为提示信息+ 业务接口：一般表示业务的返回结果，比如统一2000作为报文的成功响应码，其他所有码都是存在对应的接口码表进行设计。+ 查询接口：如何才算是表示查询成功，比如一个还钱的接口当中可能是受理中，拒绝或者处理完成，等查询接口的信息描述</code></pre><p><strong>加解密规范</strong>：</p><p>也是比较重要的部分，也是比较花时间的地方，需要大量调试来打通接口的地方，存在以下的几个要点</p><ul><li><p>原则：接口存在一些简单的原则，比如<code>非对称加密</code>，<code>数字签名</code>，<code>时间戳判断有效性</code>，具体按照接口的原则自由设置</p></li><li><p>令牌信息：描述令牌是如何生成的，是比较重要的部分，一般由对接双方沟通完成，最好多以案例和代码辅助解释</p></li><li><p><strong>加密规范</strong>：描述接口数据的加密过程，比较重要的内容信息，最好多以案例和代码辅助解释</p></li><li><p><strong>解密规范</strong>：就是解释接口要如何解密，比如需要拿到服务端给过来的配对公钥才能解密，再比如使用签名+参数进行对照加密验证签名是否正确等。</p></li></ul><h5 id="加解密规范参考："><a href="#加解密规范参考：" class="headerlink" title="加解密规范参考："></a>加解密规范参考：</h5><p>一般的加密方式，一般情况下做到下面这种形式基本可以屏蔽大部分的攻击：</p><ol><li>按照map的key进行字典排序，同时加入<code>timetamp</code>值校验核对时间</li><li>把参数按照一些特殊形式拼接为<code>key=value&amp;key=value</code>的形式，末尾带入时间戳或者其他的一些信息，比如应用Id等核实身份的内容</li><li>把这一串按照<strong>AES加密</strong>，然后按照<strong>BASE64编码</strong>，生成一个编码串</li><li>把BASE64编码进行<strong>MD5加密</strong>，加密完成之后，得到固定长度的MD5字符串</li><li>按照md5串+上面的string在进行一次md5加密，生成签名，那么这个签名基本上就唯一的</li></ol><p><strong>业务接口</strong></p><p>这里基本可以<strong>照抄简单接口模板</strong>，因为接口描述每个人的描述不同，下面给出一些基本上涉及的点，另外，到了这一步就尽量用案例辅助，因为案例可以帮助接口阅读者更快速的上手和理解，注意这一部分的内容：<strong>实用性大于理论性</strong></p><p>具体接口：</p><ol><li>说明</li><li>规范码（查表）</li><li>使用方式</li><li>请求字段</li><li>响应字段</li><li>案例</li></ol><p><strong>附录</strong>：</p><p>可能这部分和说明书一样基本没人看，所以不做过多的解释，个人到目前为止看过的接口文档基本没有遇到附录写的很详细的，这里可以随意施展。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>本篇文章将接口文档分为两种模式来讲解：</p><ol><li>简单版本：核心是 <strong>怎么简单怎么来</strong>，如何工程紧或者非常讨厌写文的人可以使用这种方式，优点是出货速度快，缺点嘛，简单的东西可能造成很多细节的忽略，有时候写文的人也会忽略，所以还是需要多注意一下不要直接CV</li><li>复杂版本：我想基本没几个人想写这种复杂文档，一份文档写下来基本半天没了，</li></ol><p>个人还是非常喜欢写文档的，一方面是写文档可以提高自己的文档功底，同时和费曼学习法的方式十分的贴切，可以通过写作来回顾和总结思路过程，另一方面，一份好文档真的可以省未来的时间成本，想象一下如何你可以在当别人来问你就甩一份文档解决问题的时候，可以给自己大量的时间减少自己的沟通成本，对于日常工作中被打断思路再常见不过了，用文档记录的形式记录可能在以后要回过来改代码的救一命。</p><p>有点跑偏了，总之，这篇文章更多的目的是分享自己对于文档编写的一些个人思考，个人从实习公司到转正写了个把月文档，过程十分的枯燥乏味单调，但是当回过头来看到自己的成果的时候。还是蛮有成就感了。</p><p>这是今年最后一篇文章了，个人选择<strong>锻炼</strong>给自己做未来投资，下面截个图给自己留念一下，争取年前跑满<strong>100公里</strong>吧。慢慢来……</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201229233100.jpg" alt=""></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      如何写出好的接口文档和文档
    
    </summary>
    
    
      <category term="文档" scheme="https://lazytime.site/categories/%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="文档" scheme="https://lazytime.site/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>《程序员健康指南》读书笔记</title>
    <link href="https://lazytime.site/2020/12/29/note/"/>
    <id>https://lazytime.site/2020/12/29/note/</id>
    <published>2020-12-29T15:49:45.000Z</published>
    <updated>2020-12-29T15:57:34.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>我想单靠这个书名估计就能吸引很多人去读一读了。</p><h1 id="评价："><a href="#评价：" class="headerlink" title="评价："></a>评价：</h1><p>在个人心目中是程序员必读书，有可能你读了这本书照样不会锻炼，但是可以改变你对于健康的看法</p><p>这本书更<strong>多的是鼓励，而不是要求</strong>，非常符合大众的口味。</p><h1 id="本书特点："><a href="#本书特点：" class="headerlink" title="本书特点："></a>本书特点：</h1><ol><li>科学的讲解如何控制饮食和锻炼身体</li><li>重新定义和认识健康，鼓励每一个人朝着健康去努力实践</li><li>科学的锻炼胜过歪门邪道，长远的目标和不断刷新纪录会给自己带来意想不到的提升。</li></ol><a id="more"></a><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><pre><code>身体健康是万物之本，生死面前无大事。经历了今年的疫情之后，越来越觉得身体健康的重要性，下面是针对《程序员健康指南》这本书的读书笔记</code></pre><p>下面是个人简单画的思维导图</p><p>文档：程序员身体健康指南思维导图.mindmap<br>链接：<span class="exturl" data-url="aHR0cDovL25vdGUueW91ZGFvLmNvbS9ub3Rlc2hhcmU/aWQ9NTVhYjEzODZkYTRjMWNkYjY0NjEwNGJhMTk3MWRiMzEmYW1wO3N1Yj00NTIxNEZCNUM3QkM0QzA5QUQ1MjE3RDE1QkZERDhFMg==" title="http://note.youdao.com/noteshare?id=55ab1386da4c1cdb646104ba1971db31&amp;sub=45214FB5C7BC4C09AD5217D15BFDD8E2">http://note.youdao.com/noteshare?id=55ab1386da4c1cdb646104ba1971db31&amp;sub=45214FB5C7BC4C09AD5217D15BFDD8E2<i class="fa fa-external-link"></i></span></p><h2 id="做出改变"><a href="#做出改变" class="headerlink" title="做出改变"></a>做出改变</h2><p>个人认为第一章节重点是通过举例，告知健康的重要性，以及日常生活习惯对于健康的影响，以及如果通过暗示来改掉坏习惯：</p><ol><li>遵从旧习惯，修改暗示信号：</li><li>设立奖赏，刺激产生新信号</li><li>改变惯例行为</li></ol><p>比如：想要吃零食，改为想吃水果，当每次想到吃零食的时候，都吃水果，久而久之，就会改变习惯</p><p>这中间需要注意以下几个点：</p><ol><li><p>受到暗示信号，思考以下几个点</p><ol><li>我在那</li><li>是否脑热</li><li>和谁一起</li><li>在做什么</li><li>现在几点</li></ol></li><li><p>锁定奖赏，要具有可替代性，如果奖赏没有一定的诱惑，无法避免旧信号的刺激</p></li><li><p>设置新暗示：转移注意力</p></li></ol><h2 id="努力健康起来"><a href="#努力健康起来" class="headerlink" title="努力健康起来"></a>努力健康起来</h2><ol><li>走起来，迈开腿是锻炼的好开始</li><li>买一个计步器，个人买了一个手环，既能够检测心率，也可以记录成果</li><li><strong>正确的走路姿势很重要</strong><ol><li>抬头挺胸</li><li>手臂弯曲</li><li>脚后跟滑到脚趾</li><li><strong>腹部呼吸</strong></li><li>增加步速，减小步频率</li></ol></li><li><strong>每天散步20分钟</strong>，可以大大的减少健康威胁</li></ol><p>总而言之，有机会站着或者可以走路的时候，就用走路替代，多走路是没有啥坏处的</p><p>腹部呼吸有个好处就是，有些人思考久了会头晕，不是身体问题，是由于大量的思考，导致大脑的供应不上，腹部呼吸可以吸入更多的氧气，同时也利于平复心情</p><p>遇到BUG就用腹部呼吸方式深呼吸两下，会发现心情会比之前好很多</p><h2 id="站起来"><a href="#站起来" class="headerlink" title="站起来"></a>站起来</h2><p>每一小时站5分钟，做一些简单的拉伸等</p><p>站立也不宜过久，最好的方式是站立和坐立交替进行</p><p>站着或者更有利于思考？个人认为站立可以缓解压力</p><p>本章最最关键的是鼓励程序员到户外去，确实很多办公室工种很难到户外去，或许是环境导致？</p><p>还有一种办法是升级办公桌，文章建议每一个人有自己的升降桌子，但是实际上个人认为这东西对于租房的打工人来说有点难，一点是升降桌死沉，一个人基本抬不动，二是这玩意房间小的根本放不下。</p><p>有一种替代方案是可以使用升降桌子，不过也有10多斤重了，是个很好的健身器材=-=</p><h2 id="永别了，椅子"><a href="#永别了，椅子" class="headerlink" title="永别了，椅子"></a>永别了，椅子</h2><p>主要强调了站立和坐立交替的重要性，以及鼓励更换装备，还是和之前说的，如果家不是很大还是放弃吧。</p><p>可以买一些升降的显示器，同时可以翻转的显示器对于程序员来说帮助也是极好的（特别是看代码的时候）</p><p>书中鼓励定期测量自己的静息心率，预防心脏病。</p><h2 id="灵活的饮食方案"><a href="#灵活的饮食方案" class="headerlink" title="灵活的饮食方案"></a>灵活的饮食方案</h2><p>之所以说“三分练，七分吃”是因为无论如何锻炼，在吃上面不把控就很容易反弹</p><p>饮食不能走极端，不然早晚会惹出毛病，书中也是这样警告的</p><p>近几年不知道为什么突然鼓励低碳饮食以及流行各种低碳减肥，其实碳水不是什么：“万恶之源”，他对于每天的新陈代谢来说是十分重要的</p><p>同时书中鼓励健康的饮食而不是节食或者制定什么健康食谱。</p><p>个人建议是算好自己的食量，按照固定的食量进行递减，比如昨天吃两大碗，今天就少吃一点点，寻找适合的位置，然后灵活配置多份食谱，换着吃，这样才有可能真正的改变饮食习惯。</p><p>另外说一句，减肥是真的烧钱，水果太贵了。。。。。</p><p>一天自己的摄入量是算不出来的，因为有时候公司来个</p><p>总结一下个人减肥食谱：</p><ol><li>少吃饭：这一点是核心，因为饭的碳水是真的足</li><li>多吃富含蛋白质的肉，多吃蔬菜，水果<ol><li>香蕉不能吃，热量很高</li><li>土豆，红薯的淀粉也不小，少量吃</li></ol></li><li>少吃多餐。比如上午和下午穿插吃水果，喝牛奶等环节，把吃饭的时间<strong>拉长</strong></li><li>如果实在饿得受不了，那还是吃点东西补充能量把，说明热量摄入不足，需要加量。</li><li>少喝饮料，快乐水等等，因为多数都是含糖的</li><li>多喝水，总没错（这不是食谱把。。。）</li></ol><h2 id="预防头痛和眼部疲劳-预防手腕疼痛-预防背部疼痛"><a href="#预防头痛和眼部疲劳-预防手腕疼痛-预防背部疼痛" class="headerlink" title="预防头痛和眼部疲劳/预防手腕疼痛/预防背部疼痛"></a>预防头痛和眼部疲劳/预防手腕疼痛/预防背部疼痛</h2><p>这三个章节主要讲一些容易忽视的点，比如容易忽视眨眼，以及对于眼睛的休息等。多眨眼，同时遵循<strong>20-20-20法则</strong>（每20分钟向20米开外的户外看20秒）可以有效防止假性近视和眼疲劳，另外书中后面还提出森林疗法，鼓励多出森林公园或者绿化带进行呼吸。</p><p>至于头痛这一方面，主要是注意日常的生活习惯和饮食习惯，甚至坐姿不对也会引发头痛</p><p>头痛可能和我们的各种不健康饮食有关，比如有一些号称无糖饮料可能会引发头痛（纳尼）</p><p>背部的肌肉锻炼是比较难得，而且背部肌肉其实是十分重要的一块，书中提出了KW6项测试来检测是否存在背部肌肉锻炼不足的问题，同时给出一些运动建议的动作来缓解背部肌肉太紧的问题。</p><h2 id="让锻炼贴近生活"><a href="#让锻炼贴近生活" class="headerlink" title="让锻炼贴近生活"></a>让锻炼贴近生活</h2><ol><li>番茄锻炼法：其实就是番茄工作法，每工作20分钟休息5分钟，持续的提高专注力。这一点对于绝大多数办公室工作者来说都是十分困难的</li><li>记录锻炼法：要把自己的锻炼进行量化，总结，哪怕是记流水账也是有意义的。同时越详细的记录越有利于改善自己的锻炼习惯，能够及时的发现自己的不足，详细可以参考：《刻意练习》这本书。最后，一份详细的记录，可以是日后“吹牛”资本，也可以督促自己锻炼</li><li>利用网络游戏进行锻炼：我认为“健身环”是一个划时代的游戏，他可能有很多的不足，但是他的这种用游戏推动运动的方式可能是多数室内党所欢迎的，因为现代多数人都喜欢“宅”在家里，这种发明还是十分具有意义的。</li></ol><h2 id="到户外来思考："><a href="#到户外来思考：" class="headerlink" title="到户外来思考："></a>到户外来思考：</h2><p>主要讲维生素D的重要性，建议每一个室内工作者每天出门晒十分钟太阳，尽可能的裸露皮肤，皮肤黑的人需要更久的时间（我甚至怀疑作者在黑非洲人），维生素D对于预防各种疾病非常有效，也可以增强免疫力，但是维生素D不是抗生素，只能起促进健康的作用。还是要依靠锻炼来提升</p><p>文章的后面鼓励每一位工作者抽时间来一场短途旅行，放松自己</p><h2 id="重构健康"><a href="#重构健康" class="headerlink" title="重构健康"></a>重构健康</h2><p>主要是给作者科普，健康没有标准，健康是一种状态，从多维度的角度认识健康，给出了一些参考项目来“恒定”一个人是否健康，大致看了下各种指标确实很严格。</p><p>后面主要讲到了对于健康进行一些单元测试，以及如何去提升自身的硬件身体素质，最重要的一个点讲到了：<strong>每天刷新纪录</strong>，<strong>提神有氧运动</strong>，<strong>提升身体素质</strong>这几个方面。</p><p>最后也警告健身不是一时的事情，而是一辈子的事情，如果不注意控制自己，一切努力都将会白费</p><h2 id="组起队来"><a href="#组起队来" class="headerlink" title="组起队来"></a>组起队来</h2><p>本章节讲了一些提高自律锻炼的手段，比如参加锻炼活动，以及给出一些企业为健康投资的成功案例，作者非常建议企业给员工进行健康投资，可以达到双赢，同时建议成立运动小组，起到环境的带动作用。</p><p>后面讲了一个很重要的内容，环境的影响力，比如如果你很积极的去锻炼，那么很有可能会带动身边的人也冒出这种想法跟着一起去锻炼。</p><h2 id="继续行动："><a href="#继续行动：" class="headerlink" title="继续行动："></a>继续行动：</h2><p>以日本的“改正”的工匠精神，讲述持之以恒的重要性，只有不断的对于自己的运动进行改进，同时不断的制定新的目标，那么病痛都将会远离你，需要对于自己的目标构建一个合理的安排，一定要找能够让自己提起兴趣愿意主动去做的事情，这样这个目标才能不断的完善和圆满</p><p>最后最重要的是保持身心的健康和快乐</p><h2 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h2><p>后记主要将对于书籍作者的采访，发现作者可以跑全马表示非常佩服</p><p>  目标1：改掉一个习惯，1.5节<br>  目标2：买一个计步器，2.2节<br>  目标3：测量静息心率，2.3节<br>  目标4：测量血压，3.2节<br>  目标5：升级办公桌，3.3节<br>  目标6：计算一天的摄入热量，4.4节<br>  目标7：进行一次眼部检查，5.1节<br>  目标8：通过K-W测试，6.1节<br>  目标9：在反向屈腕测试中获得阴性结果，7.1节<br>  目标10：参加瑜伽课程，7.3节<br>  目标11：进行一次番茄锻炼法，8.2节<br>  目标12：在健身网站注册一个账号，8.5节<br>  目标13：了解家族病史，9.2节<br>  目标14：安排一次户外的短途旅行，9.5节<br>  目标15：参加攀岩课程，10.1节<br>  目标16：在成人版总统体能测试中，要让自己的表现达到平均水平，10.3节<br>  目标17：主持一次午餐研讨会，11.1节<br>  目标18：与同事一起成立或加入一个运动小组，11.3节<br>  目标19：不断制定新目标，12.1节</p><p>下面是摘录书中的内容，以下是根据英国国家健康中心的建议<br>① ，日常清单中一份蔬果餐点的示例。<br>  绿色蔬菜<br>  2棵花椰菜<br>  4大餐匙甘蓝菜<br>  4大餐匙菠菜<br>  4大餐匙四季豆<br>  烹食蔬菜<br>  3大餐匙胡萝卜<br>  3大餐匙豌豆<br>  3大餐匙玉米<br>  蔬菜沙拉<br>  3根芹菜<br>  5片黄瓜<br>  1颗中等大小的番茄<br>  7颗小番茄<br>  小型水果<br>  2颗李子<br>168 附录 B 示例<br>  2颗猕猴桃<br>  7颗草莓<br>  14颗樱桃<br>  中型水果<br>  1个苹果<br>  1个梨子<br>  1根香蕉<br>  1个橙子<br>  大型水果<br>  半个葡萄柚<br>  1片番木瓜<br>  1大片菠萝<br>  2片芒果<br>  豆类<br>  3大餐匙烘豆（每天最多1份）<br>  3大餐匙鹰嘴豆（每天最多1份）<br>  果汁与冰沙<br>  150毫升无糖纯果汁（每天最多1份）<br>  80克水果/蔬菜泥（每天最多2份）<br>  不能算数的蔬菜<br>  马铃薯<br>  甘薯<br>  芭蕉</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我认为这本书对于程序员锻炼自己还是有一定的启蒙作用的，可以切实的推动每一个人关注自己的健康，也是我认为每一个程序员的<strong>必读</strong>书籍。书中更多的是鼓励读者去实践和突破自我，以及通过各种方式给读者一种锻炼是非常有意思的事情这种事情。</p><p>书里面讲了推荐了很多的锻炼方式以及各种的科学去验证一些现象和行为，利用科学的手段去引导人们锻炼和提高对自己身体关注度。</p><p>现代快节奏的社会难免给人各种负面情绪，同时各种程序员焦虑症，我认为我通过跑步健身可以虽然不能让我完全忘记焦虑，但是可以最大程度的让我淡化焦虑，同时锻炼确实提高专注力，因为在跑步得时候，你得大脑会处于一种非常“安静”的状态，只会思考跑步这一件事情，个人很喜欢跑完之后洗澡那种舒畅感。</p><p>以上是个人的一些读书见解和感悟，希望对于读完这篇文章的读者有一些意义。</p><p>锻炼不是一天两天的事情，只要动起来，不断运动多少，我相信对于自己的身心都是由益处的。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      请输入描述信息
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://lazytime.site/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书" scheme="https://lazytime.site/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>redis学习 - sds字符串</title>
    <link href="https://lazytime.site/2020/12/16/redis-sds/"/>
    <id>https://lazytime.site/2020/12/16/redis-sds/</id>
    <published>2020-12-16T15:47:42.000Z</published>
    <updated>2020-12-16T15:50:04.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis学习-sds字符串"><a href="#redis学习-sds字符串" class="headerlink" title="redis学习 - sds字符串"></a>redis学习 - sds字符串</h1><p><span class="exturl" data-url="aHR0cDovL3JlZGlzYm9vay5jb20vaW5kZXguaHRtbA==" title="http://redisbook.com/index.html">Redis 设计与实现<i class="fa fa-external-link"></i></span>：如果想要知道redis底层，这本书可以给予不少的帮助，非常推荐每一位学习redis的同学去翻一翻。</p><p>sds字符串建议多看看源代码的实现，这篇文章基本是个人看了好几篇文章之后的笔记。</p><p>源代码文件分别是：<code>sds.c</code>，<code>sds.h</code></p><a id="more"></a><h2 id="redis的string-API使用"><a href="#redis的string-API使用" class="headerlink" title="redis的string API使用"></a>redis的string API使用</h2><p>首先看下API的简单应用，设置str1变量为helloworld，然后我们使用<code>debug object +变量名</code>的方式看下，注意编码为<strong>embstr</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:17100&gt; set str1 helloworld</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [5416] located at 127.0.0.1:17300</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:17300&gt; debug object str1</span><br><span class="line">Value at:0x7f2821c0e340 refcount:1 encoding:embstr serializedlength:11 lru:14294151 lru_seconds_idle:8</span><br></pre></td></tr></table></figure><p>如果我们将str2设置为<code>helloworldhelloworldhelloworldhelloworldhell</code>，字符长度为44，再使用下<code>debug object+变量名</code>的方式看下，注意编码为<strong>embstr</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:17300&gt; set str2 helloworldhelloworldhelloworldhelloworldhell</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [9547] located at 127.0.0.1:17100</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:17100&gt; get str2</span><br><span class="line">"helloworldhelloworldhelloworldhelloworldhell"</span><br><span class="line">127.0.0.1:17100&gt; debug object str2</span><br><span class="line">Value at:0x7fd75e422c80 refcount:1 encoding:embstr serializedlength:21 lru:14294260 lru_seconds_idle:6</span><br></pre></td></tr></table></figure><p>但是当我们把设置为<code>helloworldhelloworldhelloworldhelloworldhello</code>，字符长度为45，再使用<code>debug object+变量名</code>的方式看下，注意编码改变了，变为<strong>raw</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:17100&gt; set str2 helloworldhelloworldhelloworldhelloworldhello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:17100&gt; debug object str2</span><br><span class="line">Value at:0x7fd75e430c60 refcount:1 encoding:raw serializedlength:21 lru:14294358 lru_seconds_idle:9</span><br></pre></td></tr></table></figure><p>最后我们将其设置为整数100，再使用<code>debug object+变量名</code>的方式看下，编码的格式变为了int。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:17100&gt; set str2 11</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:17100&gt; get str2</span><br><span class="line">"11"</span><br><span class="line">127.0.0.1:17100&gt; debug object str2</span><br><span class="line">Value at:0x7fd75e44d370 refcount:2147483647 encoding:int serializedlength:2 lru:14294440 lru_seconds_idle:9</span><br></pre></td></tr></table></figure><p>所以Redis的string类型一共有三种存储方式：</p><ol><li>当字符串长度小于等于44，底层采用<strong>embstr</strong>；</li><li>当字符串长度大于44，底层采用<strong>raw</strong>；</li><li>当设置是<strong>整数</strong>，底层则采用<strong>int</strong>。</li></ol><p>至于这三者有什么区别，可以直接看书：</p><p><span class="exturl" data-url="aHR0cDovL3JlZGlzYm9vay5jb20vcHJldmlldy9vYmplY3Qvc3RyaW5nLmh0bWw=" title="http://redisbook.com/preview/object/string.html">http://redisbook.com/preview/object/string.html<i class="fa fa-external-link"></i></span></p><h2 id="为什么redis-string-要使用sds字符串？"><a href="#为什么redis-string-要使用sds字符串？" class="headerlink" title="为什么redis string 要使用sds字符串？"></a>为什么redis string 要使用sds字符串？</h2><ol><li><strong>O(1)获取长度</strong>，c语言的字符串本身不记录长度，而是通过末尾的<code>\0</code>作为结束标志，而sds本身记录了字符串的长度所以获取直接变为O(1)的时间复杂度、同时，长度的维护操作由sds的本身api实现</li><li><strong>防止缓冲区溢出bufferoverflow</strong>：由于c不记录字符串长度，相邻字符串容易发生缓存溢出。sds在进行添加之前会检查长度是否足够，并且不足够会自动根据api扩容</li><li><strong>减少字符串修改的内存分配次数</strong>：使用动态扩容的机制，根据字符串的大小选择合适的header类型存储并且根据实际情况动态扩展。</li><li>使用<strong>空间预分配和惰性空间释放</strong>，其实就是在扩容的时候，根据大小额外扩容2倍或者1M的空间，方面字符串修改的时候进行伸缩</li><li>使用<strong>二进制保护</strong>，数据的读写不受特殊的限制，写入的时候什么样读取就是什么样</li><li>支持<strong>兼容部分</strong>的c字符串函数，可以减少部分API的开发</li></ol><h2 id="SDS字符串和C语言字符串库有什么区别"><a href="#SDS字符串和C语言字符串库有什么区别" class="headerlink" title="SDS字符串和C语言字符串库有什么区别"></a>SDS字符串和C语言字符串库有什么区别</h2><p>摘自黄健宏大神的一张表</p><table><thead><tr><th align="left">C 字符串</th><th align="left">SDS</th></tr></thead><tbody><tr><td align="left">获取字符串长度的复杂度为 O(N) 。</td><td align="left">获取字符串长度的复杂度为 O(1) 。</td></tr><tr><td align="left">API 是不安全的，可能会造成缓冲区溢出。</td><td align="left">API 是安全的，不会造成缓冲区溢出。</td></tr><tr><td align="left">修改字符串长度 <code>N</code> 次必然需要执行 <code>N</code> 次内存重分配。</td><td align="left">修改字符串长度 <code>N</code> 次最多需要执行 <code>N</code> 次内存重分配。</td></tr><tr><td align="left">只能保存文本数据。</td><td align="left">可以保存文本或者二进制数据。</td></tr><tr><td align="left">可以使用所有 <code>&lt;string.h&gt;</code> 库中的函数。</td><td align="left">可以使用一部分 <code>&lt;string.h&gt;</code> 库中的函数。</td></tr></tbody></table><h2 id="redis的sds是如何实现的"><a href="#redis的sds是如何实现的" class="headerlink" title="redis的sds是如何实现的"></a>redis的sds是如何实现的</h2><p>由于c语言的string是以<code>\0</code>结尾的Redis单独封装了SDS简单动态字符串结构，如果在字符串变量十分多的情况下，会浪费十分多的内存空间，同时为了减少malloc操作，redis封装了自己的sds字符串。</p><p>下面是网上查找的一个sds字符串实现的数据结构设计图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46b159febe6d4e039b5503e04c0f0616~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>s1,s2分别指向真实数据区域的头部，而要确定一个sds字符串的类型，则需要通过 s[-1] 来获取对应的flags，根据flags辨别出对应的Header类型，获取到Header类型之后，根据最低三位获取header的类型（这也是使用<code>__attribute__ ((__packed__))</code>关键字的原因下文会说明）：</p><ul><li>由于s1[-1] == 0x01 == SDS_TYPE_8，因此s1的header类型是sdshdr8。</li><li>由于s2[-1] == 0x02 == SDS_TYPE_16，因此s2的header类型是sdshdr16。</li></ul><p>下面的部分是sds的实现源代码：</p><p>sds一共有5种类型的header。之所以有5种，是为了能让不同长度的字符串可以使用不同大小的header。这样，短字符串就能使用较小的header，从而节省内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *sds;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 这个比较特殊，基本上用不到</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr5</span> &#123;</span></span><br><span class="line">    usigned <span class="keyword">char</span> flags;</span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr8</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint8_t</span> len;</span><br><span class="line">    <span class="keyword">uint8_t</span> alloc;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags;</span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr16</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint16_t</span> len;</span><br><span class="line">    <span class="keyword">uint16_t</span> alloc;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags;</span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//string_size &lt; 1ll&lt;&lt;32</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr32</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> len;</span><br><span class="line">    <span class="keyword">uint32_t</span> alloc;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags;</span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//string_size &lt; 1ll&lt;&lt;32</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr64</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> len;</span><br><span class="line">    <span class="keyword">uint64_t</span> alloc;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags;</span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义了五种header类型，用于表示不同长度的string </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_5 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_8 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_16 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_32 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_64 4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_MASK 7 <span class="comment">// 类型掩码</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_BITS 3 <span class="comment">// </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_HDR_VAR(T,s) struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T))); <span class="comment">// 获取header头指针</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_HDR(T,s) ((struct sdshdr##T *)((s)-(sizeof(struct sdshdr##T)))) <span class="comment">// 获取header头指针</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_5_LEN(f) ((f)&gt;&gt;SDS_TYPE_BITS)</span></span><br></pre></td></tr></table></figure><p>上面的代码需要注意以下两个点：</p><ul><li><p><code>__attribute__ ((__packed__))</code> 这是C语言的一种关键字,这将使这个结构体在内存中不再遵守字符串对齐规则，而是以内存紧凑的方式排列。目的时在指针寻址的时候，可以直接通过sds[-1]找到对应flags，有了flags就可以知道头部的类型，进而获取到对应的len，alloc信息，而不使用内存对齐，CPU寻址就会变慢，同时如果不对齐会造成CPU进行优化导致空白位不补0使得header和data不连续，最终无法通过flags获取低3位的header类型。</p></li><li><p><code>SDS_HDR_VAR</code>函数则通过结构体类型与字符串开始字节，获取到动态字符串头部的开始位置，并赋值给sh指针。<code>SDS_HDR</code>函数则通过类型与字符串开始字节，返回动态字符串头部的指针。</p></li></ul><ul><li>在各个header的定义中最后有一个char buf[]。我们注意到这是一个没有指明长度的字符数组，这是C语言中定义字符数组的一种特殊写法，称为柔性数组（<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmxleGlibGVfYXJyYXlfbWVtYmVy" title="https://en.wikipedia.org/wiki/Flexible_array_member">flexible array member<i class="fa fa-external-link"></i></span>），只能定义在一个结构体的最后一个字段上。它在这里只是起到一个标记的作用，表示在flags字段后面就是一个字符数组，或者说，它指明了紧跟在flags字段后面的这个字符数组在结构体中的偏移位置。而程序在为header分配的内存的时候，它并不占用内存空间。如果计算sizeof(struct sdshdr16)的值，那么结果是5个字节，其中没有buf字段。</li></ul><blockquote><p>关于柔性数组的介绍：</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NlMTIzX3pob3V3ZWkvYXJ0aWNsZS9kZXRhaWxzLzg5NzMwNzM=" title="https://blog.csdn.net/ce123_zhouwei/article/details/8973073">深入浅出C语言中的柔性数组<i class="fa fa-external-link"></i></span></p></blockquote><ul><li><strong>sdshdr5</strong>与其它几个header结构不同，它不包含alloc字段，而长度使用flags的<strong>高5位</strong>来存储。因此，它不能为字符串分配空余空间。如果字符串需要动态增长，那么它就必然要重新分配内存才行。所以说，这种类型的sds字符串更适合存储静态的短字符串（长度小于32）。</li></ul><p>同时根据上面的结构可以看到，SDS结构分为两个部分：</p><ul><li><strong>len、alloc、flags</strong>。只是<code>sdshdr5</code>有所不同，<ul><li>len: 表示字符串的真正长度（不包含NULL结束符在内）。</li><li>alloc: 表示字符串的最大容量（不包含最后多余的那个字节）。</li><li>flags: 总是占用一个字节。其中的最低3个bit用来表示header的类型。header的类型共有5种，在sds.h中有常量定义。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_5  0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_8  1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_16 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_32 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDS_TYPE_64 4</span></span><br></pre></td></tr></table></figure><ul><li><strong>buf[]</strong>：柔性数组，之前有提到过，其实就是具体的数据存储区域，注意这里实际存储的数据的时候末尾存在<code>NULL</code></li></ul><blockquote><p>小贴士：</p><p>#define SDS_HDR(T,s) ((struct sdshdr##T *)((s)-(sizeof(struct sdshdr##T))))</p><p>#号有什么作用？</p><p>这个的含义是让”#”后面的变量按照<strong>普通字符串</strong>来处理</p><p>双#又有什么用处呢？</p><p>双“#”号可以理解为，在单“#”号的基础上，增加了连接功能</p></blockquote><h2 id="sds的创建和销毁"><a href="#sds的创建和销毁" class="headerlink" title="sds的创建和销毁"></a>sds的创建和销毁</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sds <span class="title">sdsnewlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *init, <span class="keyword">size_t</span> initlen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *sh;</span><br><span class="line">    sds s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> type = sdsReqType(initlen);</span><br><span class="line">    <span class="comment">/* Empty strings are usually created in order to append. Use type 8</span></span><br><span class="line"><span class="comment">     * since type 5 is not good at this. */</span></span><br><span class="line">    <span class="keyword">if</span> (type == SDS_TYPE_5 &amp;&amp; initlen == <span class="number">0</span>) type = SDS_TYPE_8;</span><br><span class="line">    <span class="keyword">int</span> hdrlen = sdsHdrSize(type);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *fp; <span class="comment">/* flags pointer. */</span></span><br><span class="line"></span><br><span class="line">    sh = s_malloc(hdrlen+initlen+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!init)</span><br><span class="line">        <span class="built_in">memset</span>(sh, <span class="number">0</span>, hdrlen+initlen+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (sh == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    s = (<span class="keyword">char</span>*)sh+hdrlen;</span><br><span class="line">    fp = ((<span class="keyword">unsigned</span> <span class="keyword">char</span>*)s)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5: &#123;</span><br><span class="line">            *fp = type | (initlen &lt;&lt; SDS_TYPE_BITS);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8: &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">8</span>,s);</span><br><span class="line">            sh-&gt;len = initlen;</span><br><span class="line">            sh-&gt;alloc = initlen;</span><br><span class="line">            *fp = type;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16: &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">16</span>,s);</span><br><span class="line">            sh-&gt;len = initlen;</span><br><span class="line">            sh-&gt;alloc = initlen;</span><br><span class="line">            *fp = type;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32: &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">32</span>,s);</span><br><span class="line">            sh-&gt;len = initlen;</span><br><span class="line">            sh-&gt;alloc = initlen;</span><br><span class="line">            *fp = type;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64: &#123;</span><br><span class="line">            SDS_HDR_VAR(<span class="number">64</span>,s);</span><br><span class="line">            sh-&gt;len = initlen;</span><br><span class="line">            sh-&gt;alloc = initlen;</span><br><span class="line">            *fp = type;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (initlen &amp;&amp; init)</span><br><span class="line">        <span class="built_in">memcpy</span>(s, init, initlen);</span><br><span class="line">    s[initlen] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">sds <span class="title">sdsempty</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sdsnewlen(<span class="string">""</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">sds <span class="title">sdsnew</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *init)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果initlen 为NULL,使用0作为初始化数据</span></span><br><span class="line">    <span class="keyword">size_t</span> initlen = (init == <span class="literal">NULL</span>) ? <span class="number">0</span> : <span class="built_in">strlen</span>(init);</span><br><span class="line">    <span class="keyword">return</span> sdsnewlen(init, initlen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sdsfree</span><span class="params">(sds s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    s_free((<span class="keyword">char</span>*)s-sdsHdrSize(s[<span class="number">-1</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的源代码需要注意如下几个点：</p><ol><li><strong>SDS_TYPE_5</strong>由于设计之初按照常量对待，实际情况大多数为append操作扩容，而<strong>SDS_TYPE_5</strong>扩容会造成内存的分配，所以使用<strong>SDS_TYPE_8</strong> 进行判定</li><li>SDS字符串的长度为：<code>hdrlen+initlen+1</code> -&gt; <code>sds_header</code>的长度 + 初始化长度 + 1 (末尾占位符<code>NULL</code>判定字符串结尾)</li><li><code>s[initlen] = &#39;\0&#39;;</code> 字符串末尾会使用<code>\0</code>进行结束标志：代表为<code>NULL</code></li><li>sdsfree释放sds字符串需要计算出Header的起始位置，具体为<code>s_malloc</code>指针所指向的位置</li></ol><p>知道了sds如何创建之后，我们可以了解一下里面调用的具体函数。比如<strong>sdsReqType</strong>，<strong>sdsReqType</strong>方法定义了获取类型的方法，首先根据操作系统的位数根据判别 <code>LLONG_MAX</code>是否等于<code>LONG_MAX</code>，根据机器确定为32位的情况下分配sds32，同时在64位的操作系统上根据判断小于2^32分配sds32，否则分配sds64。</p><p>这里值得注意的是：<code>string_size &lt; 1ll&lt;&lt;32</code>这段代码在<strong>redis3.2</strong>中才进行了bug修复，在早期版本当中这里存在分配类型的<code>Bug</code></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FudGlyZXovcmVkaXMvY29tbWl0LzYwMzIzNDA3NmY0ZTU5OTY3ZjMzMWJjOTdkZTNjMGRiOTk0N2M4ZWY=" title="https://github.com/antirez/redis/commit/603234076f4e59967f331bc97de3c0db9947c8ef">commit<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">sdsReqType</span><span class="params">(<span class="keyword">size_t</span> string_size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (string_size &lt; <span class="number">1</span>&lt;&lt;<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">return</span> SDS_TYPE_5;</span><br><span class="line">    <span class="keyword">if</span> (string_size &lt; <span class="number">1</span>&lt;&lt;<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">return</span> SDS_TYPE_8;</span><br><span class="line">    <span class="keyword">if</span> (string_size &lt; <span class="number">1</span>&lt;&lt;<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> SDS_TYPE_16;</span><br><span class="line"><span class="comment">// 在一些稍微久远一点的文章上面没有这一串代码 #</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (LONG_MAX == LLONG_MAX)</span></span><br><span class="line">    <span class="keyword">if</span> (string_size &lt; <span class="number">1l</span>l&lt;&lt;<span class="number">32</span>)</span><br><span class="line">        <span class="keyword">return</span> SDS_TYPE_32;</span><br><span class="line">    <span class="keyword">return</span> SDS_TYPE_64;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> SDS_TYPE_32;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看下<code>sdslen</code>方法，<strong>s[-1]</strong>用于向低位地址偏移一个字节，和<code>SDS_TYPE_MASK</code>按位与的操作，获得Header类型，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">size_t</span> <span class="title">sdslen</span><span class="params">(<span class="keyword">const</span> sds s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> flags = s[<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">// SDS_TYPE_MASK == 7</span></span><br><span class="line">    <span class="keyword">switch</span>(flags&amp;SDS_TYPE_MASK) &#123;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_5:</span><br><span class="line">            <span class="keyword">return</span> SDS_TYPE_5_LEN(flags);</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_8:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">8</span>,s)-&gt;len;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_16:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">16</span>,s)-&gt;len;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_32:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">32</span>,s)-&gt;len;</span><br><span class="line">        <span class="keyword">case</span> SDS_TYPE_64:</span><br><span class="line">            <span class="keyword">return</span> SDS_HDR(<span class="number">64</span>,s)-&gt;len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sds的连接（追加）操作"><a href="#sds的连接（追加）操作" class="headerlink" title="sds的连接（追加）操作"></a>sds的连接（追加）操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Append the specified binary-safe string pointed by 't' of 'len' bytes to the</span></span><br><span class="line"><span class="comment"> * end of the specified sds string 's'.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * After the call, the passed sds string is no longer valid and all the</span></span><br><span class="line"><span class="comment"> * references must be substituted with the new pointer returned by the call. */</span></span><br><span class="line"></span><br><span class="line"><span class="function">sds <span class="title">sdscatlen</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">void</span> *t, <span class="keyword">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> curlen = sdslen(s);</span><br><span class="line"></span><br><span class="line">    s = sdsMakeRoomFor(s,len);</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(s+curlen, t, len);</span><br><span class="line">    sdssetlen(s, curlen+len);</span><br><span class="line">    <span class="comment">// 注意末尾需要设置占位符\0代表结束标志</span></span><br><span class="line">    s[curlen+len] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">sds <span class="title">sdscat</span><span class="params">(sds s, <span class="keyword">const</span> <span class="keyword">char</span> *t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sdscatlen(s, t, <span class="built_in">strlen</span>(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">sds <span class="title">sdscatsds</span><span class="params">(sds s, <span class="keyword">const</span> sds t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sdscatlen(s, t, sdslen(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sds实现的一个核心代码，用于判别是否可以追加以及是否有足够的空间</span></span><br><span class="line"><span class="function">sds <span class="title">sdsMakeRoomFor</span><span class="params">(sds s, <span class="keyword">size_t</span> addlen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *sh, *newsh;</span><br><span class="line">    <span class="keyword">size_t</span> avail = sdsavail(s);</span><br><span class="line">    <span class="keyword">size_t</span> len, newlen;</span><br><span class="line">    <span class="keyword">char</span> type, oldtype = s[<span class="number">-1</span>] &amp; SDS_TYPE_MASK;</span><br><span class="line">    <span class="keyword">int</span> hdrlen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Return ASAP if there is enough space left. */</span></span><br><span class="line">    <span class="comment">// 如果原来的空间大于增加后的空间，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (avail &gt;= addlen) <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">    len = sdslen(s);</span><br><span class="line">    sh = (<span class="keyword">char</span>*)s-sdsHdrSize(oldtype);</span><br><span class="line">    newlen = (len+addlen);</span><br><span class="line">    <span class="comment">// 如果小于 1M，则分配他的两倍大小，否则分配 +1M</span></span><br><span class="line">    <span class="keyword">if</span> (newlen &lt; SDS_MAX_PREALLOC)</span><br><span class="line">        newlen *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        newlen += SDS_MAX_PREALLOC;</span><br><span class="line"></span><br><span class="line">    type = sdsReqType(newlen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Don't use type 5: the user is appending to the string and type 5 is</span></span><br><span class="line"><span class="comment">     * not able to remember empty space, so sdsMakeRoomFor() must be called</span></span><br><span class="line"><span class="comment">     * at every appending operation. */</span></span><br><span class="line">    <span class="comment">// sdsheader5 会造成内存的重新分配，使用header8替代</span></span><br><span class="line">    <span class="keyword">if</span> (type == SDS_TYPE_5) type = SDS_TYPE_8;</span><br><span class="line"></span><br><span class="line">    hdrlen = sdsHdrSize(type);</span><br><span class="line">    <span class="comment">// 如果不需要重新分配header，那么试着在原来的alloc空间分配内存</span></span><br><span class="line">    <span class="keyword">if</span> (oldtype==type) &#123;</span><br><span class="line">        newsh = s_realloc(sh, hdrlen+newlen+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newsh == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        s = (<span class="keyword">char</span>*)newsh+hdrlen;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Since the header size changes, need to move the string forward,</span></span><br><span class="line"><span class="comment">         * and can't use realloc */</span></span><br><span class="line">        <span class="comment">// 如果需要更换Header，则需要进行数据的搬迁</span></span><br><span class="line">        newsh = s_malloc(hdrlen+newlen+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newsh == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>((<span class="keyword">char</span>*)newsh+hdrlen, s, len+<span class="number">1</span>);</span><br><span class="line">        s_free(sh);</span><br><span class="line">        s = (<span class="keyword">char</span>*)newsh+hdrlen;</span><br><span class="line">        s[<span class="number">-1</span>] = type;</span><br><span class="line">        sdssetlen(s, len);</span><br><span class="line">    &#125;</span><br><span class="line">    sdssetalloc(s, newlen);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的函数可以了解到每次传入的都是一个旧变量，但是在返回的时候，都是<strong>新的sds变量</strong>，redis多数的数据结构都采用这种方式处理。</p><p>同时我们可以确认一下几个点：</p><ul><li><strong>append</strong>操作的实现函数为<code>sdscatlen</code>函数</li><li><code>getrange</code>这种截取一段字符串内容的方式可以直接操作字符数组，对于部分内容操作看起来比较容易，效率也比较高。</li></ul><h2 id="sds字符串-的空间扩容策略："><a href="#sds字符串-的空间扩容策略：" class="headerlink" title="sds字符串 的空间扩容策略："></a>sds字符串 的空间扩容策略：</h2><ol><li>如果sds字符串修改之后，空间小于1M，扩容和len等长的未分配空间。比如修改之后为13个字节，那么程序也会分配 <code>13</code> 字节的未使用空间</li><li>如果修改之后大于等于1M，则分配1M的内存空间，比如修改之后为30M,则buf的实际长度为：30M+1M+1Byte</li></ol><p>简单来说就是：</p><ul><li>小于1M，扩容修改后长度2倍</li><li>大于1M，扩容1M</li></ul><h2 id="字符串命令的实现"><a href="#字符串命令的实现" class="headerlink" title="字符串命令的实现"></a>字符串命令的实现</h2><table><thead><tr><th align="left">命令</th><th align="left"><code>int</code> 编码的实现方法</th><th align="left"><code>embstr</code> 编码的实现方法</th><th align="left"><code>raw</code> 编码的实现方法</th></tr></thead><tbody><tr><td align="left">SET</td><td align="left">使用 <code>int</code> 编码保存值。</td><td align="left">使用 <code>embstr</code> 编码保存值。</td><td align="left">使用 <code>raw</code> 编码保存值。</td></tr><tr><td align="left">GET</td><td align="left">拷贝对象所保存的整数值， 将这个拷贝转换成字符串值， 然后向客户端返回这个字符串值。</td><td align="left">直接向客户端返回字符串值。</td><td align="left">直接向客户端返回字符串值。</td></tr><tr><td align="left">APPEND</td><td align="left">将对象转换成 <code>raw</code> 编码， 然后按 <code>raw</code> 编码的方式执行此操作。</td><td align="left">将对象转换成 <code>raw</code> 编码， 然后按 <code>raw</code> 编码的方式执行此操作。</td><td align="left">调用 <code>sdscatlen</code> 函数， 将给定字符串追加到现有字符串的末尾。</td></tr><tr><td align="left">INCRBYFLOAT</td><td align="left">取出整数值并将其转换成 <code>long double</code> 类型的浮点数， 对这个浮点数进行加法计算， 然后将得出的浮点数结果保存起来。</td><td align="left">取出字符串值并尝试将其转换成 <code>long double</code> 类型的浮点数， 对这个浮点数进行加法计算， 然后将得出的浮点数结果保存起来。 如果字符串值不能被转换成浮点数， 那么向客户端返回一个错误。</td><td align="left">取出字符串值并尝试将其转换成 <code>long double</code> 类型的浮点数， 对这个浮点数进行加法计算， 然后将得出的浮点数结果保存起来。 如果字符串值不能被转换成浮点数， 那么向客户端返回一个错误。</td></tr><tr><td align="left">INCRBY</td><td align="left">对整数值进行加法计算， 得出的计算结果会作为整数被保存起来。</td><td align="left"><code>embstr</code> 编码不能执行此命令， 向客户端返回一个错误。</td><td align="left"><code>raw</code> 编码不能执行此命令， 向客户端返回一个错误。</td></tr><tr><td align="left">DECRBY</td><td align="left">对整数值进行减法计算， 得出的计算结果会作为整数被保存起来。</td><td align="left"><code>embstr</code> 编码不能执行此命令， 向客户端返回一个错误。</td><td align="left"><code>raw</code> 编码不能执行此命令， 向客户端返回一个错误。</td></tr><tr><td align="left">STRLEN</td><td align="left">拷贝对象所保存的整数值， 将这个拷贝转换成字符串值， 计算并返回这个字符串值的长度。</td><td align="left">调用 <code>sdslen</code> 函数， 返回字符串的长度。</td><td align="left">调用 <code>sdslen</code> 函数， 返回字符串的长度。</td></tr><tr><td align="left">SETRANGE</td><td align="left">将对象转换成 <code>raw</code> 编码， 然后按 <code>raw</code> 编码的方式执行此命令。</td><td align="left">将对象转换成 <code>raw</code> 编码， 然后按 <code>raw</code> 编码的方式执行此命令。</td><td align="left">将字符串特定索引上的值设置为给定的字符。</td></tr><tr><td align="left">GETRANGE</td><td align="left">拷贝对象所保存的整数值， 将这个拷贝转换成字符串值， 然后取出并返回字符串指定索引上的字符。</td><td align="left">直接取出并返回字符串指定索引上的字符。</td><td align="left">直接取出并返回字符串指定索引上的字符。</td></tr></tbody></table><h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>多多翻翻资料，其实很多东西不需要去钻研细节，有很多优秀的人为我们答疑解惑，所以最重要的是理解作者为什么要这样设计，学习任何东西都要学习思想，思想层面的东西才是最有价值的。</p><p>sds已经被许多大佬文章进行过说明，这篇文章只是简单的归纳了一下自己看的内容，<strong>如果有错误的地方还望指正</strong>，谢谢</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>下面是个人学习sds的参考资料：</p><p>Redis内部数据结构详解(2)——sds</p><p><span class="exturl" data-url="aHR0cDovL3poYW5ndGllbGVpLmNvbS9wb3N0cy9ibG9nLXJlZGlzLXNkcy5odG1s" title="http://zhangtielei.com/posts/blog-redis-sds.html">http://zhangtielei.com/posts/blog-redis-sds.html<i class="fa fa-external-link"></i></span></p><p>解析redis的字符串sds数据结构：</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1eGluZzI2amlheW91L2FydGljbGUvZGV0YWlscy83OTY0NDMwOQ==" title="https://blog.csdn.net/wuxing26jiayou/article/details/79644309">https://blog.csdn.net/wuxing26jiayou/article/details/79644309<i class="fa fa-external-link"></i></span></p><p>SDS 与 C 字符串的区别</p><p><span class="exturl" data-url="aHR0cDovL3JlZGlzYm9vay5jb20vcHJldmlldy9zZHMvZGlmZmVyZW50X2JldHdlZW5fc2RzX2FuZF9jX3N0cmluZy5odG1s" title="http://redisbook.com/preview/sds/different_between_sds_and_c_string.html">http://redisbook.com/preview/sds/different_between_sds_and_c_string.html<i class="fa fa-external-link"></i></span></p><p>Redis源码剖析–动态字符串SDS</p><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNDIwMjMxNg==" title="https://zhuanlan.zhihu.com/p/24202316">https://zhuanlan.zhihu.com/p/24202316<i class="fa fa-external-link"></i></span></p><p>C基础 带你手写 redis sds</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFnb3UuY29tL2xnZWR1YXJ0aWNsZS83NzEwMS5odG1s" title="https://www.lagou.com/lgeduarticle/77101.html">https://www.lagou.com/lgeduarticle/77101.html<i class="fa fa-external-link"></i></span></p><p>redis源码分析系列文章</p><p><span class="exturl" data-url="aHR0cDovL3d3dy5zb29sY28uY29tL3Bvc3QvNzMyMDRfMV8xLmh0bWw=" title="http://www.soolco.com/post/73204_1_1.html">http://www.soolco.com/post/73204_1_1.html<i class="fa fa-external-link"></i></span></p><p><strong>Redis SDS (简单动态字符串) 源码阅读</strong></p><p><span class="exturl" data-url="aHR0cHM6Ly9jaGVuamlheWFuZy5tZS8yMDE4LzA0LzA4L3JlZGlzLXNkcy1zb3VyY2UtY29kZS8=" title="https://chenjiayang.me/2018/04/08/redis-sds-source-code/">https://chenjiayang.me/2018/04/08/redis-sds-source-code/<i class="fa fa-external-link"></i></span></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      redis的sds字符串实现
    
    </summary>
    
    
      <category term="redis" scheme="https://lazytime.site/categories/redis/"/>
    
    
      <category term="redis" scheme="https://lazytime.site/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>《恶意》读书笔记</title>
    <link href="https://lazytime.site/2020/12/13/note/"/>
    <id>https://lazytime.site/2020/12/13/note/</id>
    <published>2020-12-13T06:51:26.000Z</published>
    <updated>2020-12-13T06:52:34.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《恶意》简介"><a href="#《恶意》简介" class="headerlink" title="《恶意》简介"></a>《恶意》简介</h1><p>《恶意》讲述的是作家在出国前一晚被杀，警方很快锁定了凶手，但事情的真相绝非如此 [1] 。其主体部分表现为第一人称不定内聚焦型叙述，并充分体现了内聚焦叙述的特点 [2] 。故事在结尾戛然而止，使得读者不能迅速从叙事语篇的指示中心中抽离出来，这种抽离的缺失往往会更加引人深思，更能体会小说的主题，即人性的恶意。</p><a id="more"></a><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><pre><code>最近补了好几本东野圭吾的效果，这里讲的是《恶意》这本小说，说实话，在短篇当中我沉迷其中，带入感十分的强，甚至让我有一种拍电影的错觉</code></pre><h1 id="评价："><a href="#评价：" class="headerlink" title="评价："></a>评价：</h1><p>4 星</p><h1 id="本书特点："><a href="#本书特点：" class="headerlink" title="本书特点："></a>本书特点：</h1><h2 id="视角切换，迷局重重"><a href="#视角切换，迷局重重" class="headerlink" title="视角切换，迷局重重"></a>视角切换，迷局重重</h2><pre><code>本书大量的使用第一人称视角切换的方式，同时最核心的部分就是第一人称视角的切换</code></pre><h2 id="先入为主，引人入胜"><a href="#先入为主，引人入胜" class="headerlink" title="先入为主，引人入胜"></a>先入为主，引人入胜</h2><pre><code>按照叙事的清洁，用不同的视角去讲述一个故事，大概这是东野的作品最吸引我的地方，他总是能把故事的节奏把控的很好</code></pre><h2 id="承前启后，意义深远"><a href="#承前启后，意义深远" class="headerlink" title="承前启后，意义深远"></a>承前启后，意义深远</h2><pre><code>结束映射开头，将人性的黑暗面更进一步的放大，给人无限的思考</code></pre><h1 id="名句摘录"><a href="#名句摘录" class="headerlink" title="名句摘录"></a>名句摘录</h1><pre><code>令他害怕的，并非暴力本身，而是那些讨厌自己的人所散发的负面能量。他从来没有想象过，在这世上竟然会有这样的恶意存在。老师和学生的关系是建立在一份错觉上。老师错以为自己可以教学生什么，而学生错以为能从老师那里学到什么。重要的是，维持这份错觉对双方而言都是件幸福的事。因为看清了真相，反而一点好处都没有。我们在做的事，不过是教育的扮家家酒而已。人性中的恶意：贪婪、嫉妒...真是十分可怕的负面能量，让人寒毛凛凛。我想，痛苦的时候要假装快乐是很困难，但快乐的时候要假装痛苦却好办。==就算被捕也不怕，即使赌上自己所剩无几的人生，也要贬低对方的人格。这是怎样的一种心态啊？ 说老实话，我实在找不出任何合乎逻辑的理由。==</code></pre><h1 id="我的观点"><a href="#我的观点" class="headerlink" title="我的观点"></a>我的观点</h1><ol><li>心眼太好的人在社会上是无法立足的</li><li>害人之心不可有，防人之心不可无</li><li>不能得罪和招惹小人，要心怀感激每一个愿意在你身上花时间的人</li><li>先入为主是人性最大的弱点</li><li>要建立自己的自信，自卑和自负非常容易毁掉一个人</li></ol><h1 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h1><pre><code>东野曾经有说过：世界上有两种不能直视的东西，一种是太阳，另一种是人心。我很怀念校园的时光，那里是步入社会之前最光明最灿烂的时光，但是我愿成为最黑暗的深渊的一盏灯，照亮就甚至连我也不知道该如何走的路，我会尽我的所能去给予对方帮助，哪怕只是为别人开个门，永远要记得，付出肯定会有回报，只是时间早晚问题。我想，既然无法回避恶意，也无法让自己没有恶意，那就不断的反省不断的思考。找到属于自己的白色石头，我想是每一个人需要的做的最关键的事情</code></pre><p><strong>我们的行为是否是一种恶意</strong></p><h1 id="推荐语："><a href="#推荐语：" class="headerlink" title="推荐语："></a>推荐语：</h1><p>我认为每一个技术人都应该看看，对他人的关怀要适可而止，做人不必太过善良。</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><pre><code>这本书让我印象最深的是后半段的路人篇：用路人的视角去评论别人，作者十分真实的还原了现实世界中如何通过第三人去了解一个人，这里也包含了不同人的恶意。同时本书从一开始到全篇结束，无处不透露着恶意，同时这种恶意的负能量就如空气一般让读者无法感知，甚至习以为常。再者，作者想要传达的是不要让读者先入为主，偏见会影响一个人对事物的判断。这本书将现实无限的放大，将人性的险恶赤裸裸的呈现，恶意从来都不会停止，我们需要做的就是谨言慎行。</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      做人不必太过善良
    
    </summary>
    
    
      <category term="读书" scheme="https://lazytime.site/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="https://lazytime.site/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>找到自己的白色石头 | 掘金年度征文</title>
    <link href="https://lazytime.site/2020/12/13/CXY2020/"/>
    <id>https://lazytime.site/2020/12/13/CXY2020/</id>
    <published>2020-12-13T05:55:52.000Z</published>
    <updated>2020-12-13T06:52:51.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="找到自己的白色石头-掘金年度征文"><a href="#找到自己的白色石头-掘金年度征文" class="headerlink" title="找到自己的白色石头 | 掘金年度征文"></a>找到自己的白色石头 | 掘金年度征文</h1><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201212230527.jpg" alt=""></p><blockquote><p>即使乌云密布，但是你要相信，总会有一束光向你照来</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2020的年是最魔幻的一年，这一年我们经历了远程办公<SPAN style="TEXT-DECORATION: line-through">（在家摸鱼）</SPAN>，同时经历了远程上班，有很多了面临了失业，有的公司倒闭，当然也有人一夜暴富，一夜爆贫。我所呆的公司也因为疫情的影响甚至需要交替上班。还好疫情没有拖太长时间， 加上<strong>深圳速度</strong>，一切还算是步入了正轨。不知不觉时间就这样过去了，今年过的真的太快了，快到我认为昨天还是2019，不过今年既是世界巨变的一年，出来工作的第二年也算是我个人寻求改变的一年。</p><p>上面这张照片是11月和朋友自驾去惠州双月湾拍的，可惜朋友手机相机不行，勉强看吧。</p><a id="more"></a><h2 id="审视自己："><a href="#审视自己：" class="headerlink" title="审视自己："></a>审视自己：</h2><p>翻了很多文章，却还没有介绍过自己，实在惭愧。</p><p>我是一个普普通通的胖纸，毕业于一个普普通通的大专。少年没有好好读书，后面吃得亏都是要还的，个人危机意识还算比较强，毕业出来第一年就报考了成人高考，提升学历。发现还是挺”有用“的，所以看到我文章如果学历不行一定要想办法提升学历而不是提早进入社会工作。</p><p>我是属于偏向迷信思想的，是真的相信“<strong>举头三尺有神灵</strong>”，可能有人会好奇为什么这年头还有人会信这种，但是其实想想节假日和特殊节日寺庙都是爆满，人这东西，还是真香。</p><p>我是怎么入行的：大学时期进入学校后突然顿悟，觉得自己出去工作一定要有自己的本事，在学长的带领之下，我入门了C语言，买书看谭浩强的书，最开始看小甲鱼的视频，后面慢慢的深入，自学的途中一度怀疑自己是否真的适合学编程。最后还是慢慢步入正轨，后面看着毕向东的视频学习JAVA，再来就是看我要自学网的Servlet，当初借老师的账号看的，自己往里头充了一点钱，说来实在应该庆幸自己对于自我投资这一块还是比较奢侈的，学习上面花起钱来真是一点都不犹豫，后面就逐渐加速，学起来越来越得心应手。毕业之后也算是靠着自学的那点东西找了份工作。在学校的时候，培训机构的打来了好几个电话，话里话外都暗示着“自学不行”这种调调，有几次真的差点被说服了，但是冷静下来想了下之后，我对于自己定下死目标：一定要进入编程行业，后面就开始起早贪黑的学习了。</p><p>还是十分感谢自己的自律的，自己也成为十足的行动派，现在是一个很好的时代，有很多优秀的人在不断的努力，分享自己。</p><p>严重的拒绝996，35岁是程序员的死线，但绝不是不代表只能活35年，我时刻在告诫自己，<strong>再多的钱抵不过进一趟医院，凡事都要量力而行</strong>。</p><h2 id="曾经做过最疯狂的事情"><a href="#曾经做过最疯狂的事情" class="headerlink" title="曾经做过最疯狂的事情"></a>曾经做过最疯狂的事情</h2><p>到目前为止我做过最疯狂的事情大概就是去年刚毕业只拿着<strong>2K</strong>块钱来深圳找工作了吧，没错，不多不少，就<strong>2K</strong>，当时拿着钱<strong>逃离</strong>家里，从山里走出来到大城市体会到的是这个城市的快节奏和冷漠，但是意外的我没有退却，一两天就习惯了这种节奏和生活。对我来说找工作确实很难，学历不行简历不行的我最终还是有公司肯接受了，熬一熬苦日子总会过去的。意外之喜就是，刚出来工作一段时间之后，我就遇到了阿里P6的大佬，和他聊了非常多，还是很有帮助的。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>做人就得贪心点，我的目标不是一般的多。当然前三个是最重要的。新的一年也会督促自己不断进步和完善：</p><ol><li><strong>锻炼</strong>：最首要的事情是身体健康，这段时间买了体脂称，看到数据之前虽然有了心理准备，但是还是拔凉拔凉的，不说了，作为行动派的我隔天就准备开始跑步了。抽时间看了下《程序员健康指南》，隔天就准备制定计划练起来，健身环也在路上了（希望多多不要翻车），这里多提一嘴。</li><li><strong>读书</strong>：计划明年多读几本技术书籍，当然其他书籍的阅读也不会落下，多读书还是真的很有帮助的，在一些大佬的文章里面很多都能看到书中的知识点。</li><li><strong>进入大厂</strong>：跳出来之后视野开阔了，胆子也大了，于是还是打算往更高的平台发展，中小公司还是比较限制自己成长的，计划明年用一年的时间全面的提升自己，争取进入大厂吧，乘着年轻更应该努力的提升自己。</li><li>开源项目：明年计划把个人开源项目提上日程，在大数据的时代个人更加倾向于做一个资源检索相关的项目，努力实现用程序做到把知识点和文章之前可以串联起来。</li><li>提高注意力：出来工作之后自制力变差了，准备引入<strong>番茄工作法</strong>和<strong>费曼学习法</strong>和<strong>知识导图</strong>规划目标，让自己的成绩可以<strong>量化</strong>并且可以回顾和总结。人的精力是有限的，还是要多提升自己的综合素质能力。</li><li>读源码：说实话很多人看到源码就头大，我也是，不过现在基本上工作上面有空隙就抽时间去看看源码，读源码始终要带着目的去读，这样才可以学到东西，也告诫自己不要盲目轻易的尝试读源码，因为针对很费心神。</li><li>整牙：今年洗牙和补牙往嘴里塞了一千多，医生说我牙齿有点畸形，建议我去整牙，明年根据情况可能真的会去整一波牙齿，今年经历多灾多难的一年之后，又发现牙齿不行了，唉，一定要好好珍惜一口牙齿呀，不然车和房还没到，最先到你的牙里面。</li><li>日语：之前看到某个文章作者靠自学考过了N2，不知怎么的，我突然也有了这种想法，有了想法之后，就会开始权衡能不能实现，自己目前也就会个<strong>50音</strong>，明年争取可以学习到中级，干干干，加油。</li><li>旅游：其实内心一直想去日本旅游，世界那么大，我还是想出去看看，计划去一些文化古城看看，比如西安，或者去桂林玩一玩，目前还没想好，可能我是属于不计划的类型，想到了就直接启程了。</li><li>写博客：不管有没有人看，我都会一直写下去，博客的文章输出是绝对不能落下的，后面会多思考文章和内容的编排，努力提高文章的输出内容和质量，提高自己的归纳总结能力，但是我不太想做一个过纯粹的技术干货分享，各种东西都会分享一些，敬请期待吧。</li></ol><h2 id="今年自己的改变"><a href="#今年自己的改变" class="headerlink" title="今年自己的改变"></a>今年自己的改变</h2><h3 id="在小公司我学到了什么？"><a href="#在小公司我学到了什么？" class="headerlink" title="在小公司我学到了什么？"></a>在小公司我学到了什么？</h3><p>希望下面的点可以引起读者的共鸣吧，我现在时不时回来看看发现真的是学到不少东西。</p><ol><li>责任心，自己的问题自己背锅，不能给自己的领导或者同事添麻烦，遇到问题想尽一切方法解决。</li><li>不要不懂装懂，不懂就要想办法，带着问题去思考问题。</li><li>做任何事情，反复想三遍，是不是真的懂了。</li><li>业务和技术本身同样重要，跳槽拼的是技术，在公司拼的是业务理解和交付能力。</li><li>任务一定要有看得见的工作量，多久时间完成，能不能完成，完成不了怎么办，事先都要想好。</li><li>多看看别人是怎么做的，反思自己为什么做不到。要多看，要多想</li><li>把简单的事情做到极致，才能不断做好。</li><li>做事之前先学会做人，先做人后做事，平时要注重多学习。</li><li>平时多提升自己，提升竞争力，程序员是青春饭职业。</li><li>接手项目的那一刻这一个项目就是属于你写的，你要对所有的功能负责，代码就是你写的。</li><li>从任何一家公司出去，不需要很强，你只需要比多数人强就可以了。</li><li>向他人提问一定要有自己的深度思考，有自己的想法，当然除非自己真的有点货，否则就老老实实听人讲。</li></ol><h3 id="跳槽"><a href="#跳槽" class="headerlink" title="跳槽"></a>跳槽</h3><p>今年年底突然觉得自己不能再在小公司待下去了，从上一家出来还是发现自己太“养”了，对于自己没有很好的审视，出来面试虽然基础知识都可以安全上垒，但是遇到一些分布式以及中间件的原理问题基本都答不上来。也被建议说要紧追现代技术栈，现在目前也在规划和学习加强这一块（八股文真的得背）。说实话由于个人的面试经验十分有限，加上跳槽的时机比较晚，所以目前就职的公司也不是特别理想（薪水方面），但是好在是一家<strong>965</strong>的公司，平时工作也基本可以准点下班（除非项目功能有死线），可以给自己更多的时间成长和思考。真的很难得进了家真正不加班的公司，加班完全靠自觉，任务完不成当然都是自觉加班，当然如果没人逼你加班，而你的工作又要靠加班完成，这就很有问题了，这时候应该<strong>停下来</strong>审视一下自己，<strong>任务量真的有这么多么，是真的了解任务么，是否真的有认真对待自己的工作</strong>。</p><h3 id="电脑知识扫盲"><a href="#电脑知识扫盲" class="headerlink" title="电脑知识扫盲"></a>电脑知识扫盲</h3><p>说起来程序员这个圈子很奇怪，很多程序员知道编程却连CPU，内存，显卡，硬盘怎么买都不清楚，最开始的时候我也是，发现自己短板之后，我就立马去B站从别人修电脑的视频开始看起，了解一下电脑维修视频，同时找各类视频补齐CPU，内存选购，内存作用，硬盘颗粒和怎么选硬盘等等各方面，现在也算是脱离小白，做到可以按照自己的需求去选购电脑也可以给其他人推荐电脑。总之，我觉得了解一些硬件方面的知识对于一个程序员来说还是十分有必要的，这里推荐一下B站的UP<strong>硬件茶谈</strong>，干货还是挺多的。</p><h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><p>写博客是当初疫情在家上班的时候想到的，在某天刷掘金文章偶然看到个人博客这东西，于是想自己搭建一个玩玩，我是属于行动派，想到就做，不做计划那种，花了两三天搭建博客，期间了解了seo优化，购买域名，备案(嫌麻烦后面没做了)以及DNS解析加速，把以前整理的笔记整理成博客发出来，访问博客看到自己的网站成型的样子还是非常有成就感的。后续也开通了公众号。感觉自己的文章还是缺少干货，后续会继续提升自我，加强学习和加快产出速度。</p><h3 id="装备升级"><a href="#装备升级" class="headerlink" title="装备升级"></a>装备升级</h3><ol><li>花500买一把弓形椅子，对没错，就是老板的那种。程序员要对自己好一点，至于为什么买弓形椅，只能说我比较担心气压的把PG炸开花。</li><li>买了Aoc241px的2k旋转显示器，还支持升降哦，观感非常不错，推荐小伙伴们入手一个，当然现在可以买更新的型号。</li><li>买了一个罗技的鼠标304，挺好使的，推荐小伙伴也入手一个，少了理线的麻烦</li><li>买了逻辑的k380，现在码文字都是用这个键盘，小巧，轻薄，好用。</li><li>闲鱼上买了surface pro3，使用体验还不错，不过4代I5是真滴不行啊兄弟，后面转给其他人了。</li><li>闲鱼上买了Ipad，体验了下对我而言就是个大号平板，后面还是出了，亏了几百，啧……</li><li>Nice 202d，大致的样子如下，看B站某个UP主安利的，经过深思熟虑之后确认不会吃灰于是马上入手了一个。</li><li>kindle Ossia2：kindle这个东西我还是去年才知道的，也是第一次知道有墨水屏这东西，对于喜欢实体书的我来说无疑是救命的东西，每次搬家一行李箱的书都沉到让我怀疑人生，也是咸鱼买的，居然还是首发版，配件齐全，捡漏成功！</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201212222535.jpg" alt=""></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201212222626.jpg" alt=""></p><h2 id="看书："><a href="#看书：" class="headerlink" title="看书："></a>看书：</h2><p>作为实体书的拥趸，在购买了Kindle之后才有所好转，今年没有读很多书，一部分是副业原因，归根结底还是自己懒，<strong>万恶懒为首</strong>。</p><h3 id="技术书籍"><a href="#技术书籍" class="headerlink" title="技术书籍"></a>技术书籍</h3><ol><li>《Redis实战》：虽然版本到现在可能没有多少参考价值，但是里面提供许多优秀的案例以及一些原理的讲解还是十分有价值的，算是入门redis以及运用redis必看的一步书籍。</li><li>《Netty实战》：草草翻了一页，做了一些笔记，后续会抽时间再看一遍</li><li>《从零开始的架构探险》：这本书用比较简单的方式实现了IOC和AOP，对于了解spring和springmvc还是有一定参考价值的，不过全书代码量太多了，不适合细读。建议直接找现成的代码结合书看很快就可以看完。</li><li>《深入理解JVM虚拟机》：了解JVM虚拟机必看的书，看完收货还是不小的。</li><li>《ElasticSearch实战》：个人感觉书籍es软件版本还是老了点，学习的价值不是特别大。</li></ol><h3 id="其他书籍"><a href="#其他书籍" class="headerlink" title="其他书籍"></a>其他书籍</h3><ol><li>《小狗钱钱》：这本书很有无论是理财还是教育都是由很大意义的，也是对我来说可能影响我今年想法最大的一本书，在书里面一句：”赐他一块白石，石头上写着新名”就如打通任督二脉一般，让我一直念念不忘。</li><li>《以书为友》：这本书然我醒悟了，书是来看的，不是拿来“收藏”的，看完之后当晚就把吃灰的《java编程思想》这块砖头剪开塞到自己包包里，上班或者下班的路上看，真别说，还真有用。</li><li>《恶意》：很多人都说是巅峰之作，我看《白夜行》比这个早，这两本书那个先看那个就是第一。</li><li>《我的青春恋爱喜剧果然有问题》：大老师终于完结了，果断买了放书架当收藏了。</li><li>《圣女的救济》：中规中矩的小说，在东野的作品不算出彩也不算难看。</li><li>《活法》、《干法》、《心法》：从今年年初以来稻盛和夫就成为我的精神偶像，有时候就得找非常成功的人</li><li>《食戟之灵》：为什么要提这部漫画呢？去看看就可以明白，能<strong>接受自己的失败并且努力</strong>的人真的不是随便可以做到的，还是那两个字：<strong>心态</strong>。</li></ol><h2 id="副业"><a href="#副业" class="headerlink" title="副业"></a>副业</h2><p>今年的疫情让我认识到副业的重要性，要时刻有危机意识，同时个人一定要有积蓄，否则会非常被动，特别是有房贷和车贷在身的时候(当然我不配)，今年靠着副业还是捞了一笔钱。下面具体说下我的个人尝试</p><h3 id="基金"><a href="#基金" class="headerlink" title="基金"></a>基金</h3><p>基金这个东西，还是挺玄学的，今年主要是投了几百块试水，看下自己的眼光，自己算是<strong>没有赤字</strong>，也可能得益于今年行情不错的缘故吧。明年会正式开始定投，理财是一辈子的事情，目前还是看好<strong>医药</strong>和<strong>新能源</strong>。</p><h3 id="和朋友合作"><a href="#和朋友合作" class="headerlink" title="和朋友合作"></a>和朋友合作</h3><p>主要的收入是被朋友介绍副业，大致内容是写写“文档”，朋友负责接单整理需求，我负责出货，资金到账对半分，算下来也有上万收入了，挺好，朋友也靠这个副业直接换了Iphone手机，我也靠着副业的钱给自己购置了不少装备，挺好的，真希望以后这种互利互惠的事情可以多来点。</p><h3 id="构筑闲鱼形象"><a href="#构筑闲鱼形象" class="headerlink" title="构筑闲鱼形象"></a>构筑闲鱼形象</h3><p>再来就是当上<strong>垃圾佬</strong>和咸鱼“倒货”了，下面这张图是我今年靠着卖自己的闲置二手的收入，注意这个收入基本都是<strong>赔钱</strong>（废话卖自己的二手物品怎么可能是赚），今年主要是把自己的游戏机和一个便携屏卖了，后续七七八八卖了很多东西，比如把自己初中和高中买的小说卖了，几十百来块不多但是出给有需要的在校学生感觉比放我书柜里吃灰好多了，自己家书柜还有两排书没卖出去=-=心累。最近本来想卖掉swich的，双十二健身环居然降价了，赶紧入手了一个拿来在家健身。希望可以坚持下去吧（希望。。。。），下面这张图是个人咸鱼账号，“战绩”还行吧，估算了一下回血率大致在<strong>50% **以上，最好的情况甚至达到了</strong>90%**，我觉得这和我打造自己的闲鱼评价良好的闲鱼形象是分不开的。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201212223223.jpg" alt=""></p><h2 id="2019年个人目标："><a href="#2019年个人目标：" class="headerlink" title="2019年个人目标："></a>2019年个人目标：</h2><p>这里是去年写下来的，今年的突变打乱了很多计划，完成情况个人不是很理想。</p><ol><li><p>阅读心理学相关书籍，生活类方面书籍，学习技术底层方面的理论 <strong>（完成）</strong>。</p></li><li><p>尝试走出“百度”依赖症，明年会强制个人使用谷歌，StackFlow等比较权威的引擎和网站等 <strong>（完成）</strong></p></li><li><p>培养编程之外的个人兴趣爱好，发展除开技术方面的其他能力。 <strong>（完成）</strong></p></li><li><p>对于英语阅读能力空前渴望提升，在新的一年会挤出空闲时间来提升个人的英语能力，虽然现在依赖翻译软件可以达成大部分的英文文档阅读，但是会造成大量的对于翻译理解的成本（目前所有的翻译软件都只能保证最多理解80%左右） <font color='red'><strong>（没有实现）</strong></font></p></li><li><p>改掉生活陋习，每天给自己定量完成一些工作之外的学习目标 <font color='red'><strong>（没有实现）</strong></font></p></li><li><p>拟定搭建个人技术博客，整理个人学习资料，同时加强个人服务器命令等方面的学习 <strong>（完成）</strong></p></li><li><p>项目方面存在性能瓶颈和隐患，需要加强ES和搜索引擎的学习 <strong>（完成）</strong></p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>想起来我上初中的时候，在某堂语文课上，老师对我们说了一些这样话，人的幸福其实很简单，只需要做到：<font color='red'><strong>有理想</strong>，<strong>有事做</strong>，<strong>有人爱</strong></font>。</p><p><strong>赐他一块白色石头，石头上写着新名</strong>。一定不要忘记自己的初心和梦想，对于普通人来讲最大的愿望可能还是好好活着，但是仅仅是活着是不够的，还是要去寻找自己对社会对于这个世界的价值，永远不要忘记自己的梦想，去寻找属于自己的白色石头。最后还是希望这篇文章能帮助到读者，哪怕只是一丢丢。新的一年也祝愿各位小伙伴们有个好身体，健健康康，平平安安，努力赚大钱=v=。</p><p> <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTAxMTI1NTMyNzI5OTk5Mzc0" title="https://juejin.cn/post/6901125532729999374">掘金年度征文 | 2020 与我的技术之路 征文活动正在进行中……<i class="fa fa-external-link"></i></span></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      找到自己的白色石头
    
    </summary>
    
    
      <category term="2020" scheme="https://lazytime.site/categories/2020/"/>
    
    
      <category term="程序员" scheme="https://lazytime.site/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习 - 复制以及三种部署模式</title>
    <link href="https://lazytime.site/2020/11/29/redis_copy/"/>
    <id>https://lazytime.site/2020/11/29/redis_copy/</id>
    <published>2020-11-29T11:59:01.000Z</published>
    <updated>2020-11-29T12:02:12.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis学习-复制以及三种部署模式"><a href="#Redis学习-复制以及三种部署模式" class="headerlink" title="Redis学习 - 复制以及三种部署模式"></a>Redis学习 - 复制以及三种部署模式</h1><h2 id="什么是复制"><a href="#什么是复制" class="headerlink" title="什么是复制"></a>什么是复制</h2><p>单机的redis通常情况是无法满足项目需求的，一般都建议使用集群部署的方式进行数据的多机备份和部署，这样既可以保证数据安全，同时在redis宕机的时候，复制也可以对于数据进行快速的修复。</p><a id="more"></a><h2 id="采取的方式"><a href="#采取的方式" class="headerlink" title="采取的方式"></a>采取的方式</h2><ol><li>单机部署（忽略）</li><li>主从链</li><li>一主多从</li><li>哨兵模式</li><li>集群模式</li></ol><h2 id="复制的前提"><a href="#复制的前提" class="headerlink" title="复制的前提"></a>复制的前提</h2><ol><li>需要保证<code>redis.conf</code>里面的配置是正确的，比如：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dir .&#x2F;</span><br><span class="line">dbfilename &quot;dump.rdb&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>需要保证指定的路径对于redis来说是<strong>可写</strong>的，意味着如果当前目录没有写权限同样会失败</li></ol><h2 id="从服务器连接主服务器的几种方式"><a href="#从服务器连接主服务器的几种方式" class="headerlink" title="从服务器连接主服务器的几种方式"></a>从服务器连接主服务器的几种方式</h2><ol><li>在从服务器的配置文件里面配置连接那个主服务器：</li></ol><p>连接的具体配置如下：</p><blockquote><p>在5.0版本中使用了<code>replicaof</code>代替了<code>slaveof</code>（<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FudGlyZXovcmVkaXMvaXNzdWVzLzUzMzU=" title="https://github.com/antirez/redis/issues/5335">github.com/antirez/red…<i class="fa fa-external-link"></i></span>），<code>slaveof</code>还可以继续使用，不过建议使用<code>replicaof</code></p></blockquote><p>下面是个人的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># replicaof &lt;masterip&gt; &lt;masterport&gt; </span></span><br><span class="line"><span class="attr">replicaof</span> <span class="string">127.0.0.1 16379</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>警告</strong>：此小节只说明了这一个配置的更改，进行主从配置的时候还有其他几个参数需要更改，这里只作为部分内容参考</p></blockquote><ol start="2"><li>在启动的适合，在<strong>redis从服务器</strong>的redis-cli当中敲击如下的命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16380&gt; slaveof 127.0.0.1 16379</span><br><span class="line">OK Already connected to specified master</span><br></pre></td></tr></table></figure><p>这样就可以在从服务器动态的指定要连接哪个主服务器了，但是这种配置是<strong>当前运行时有效</strong>，下次再次进入的时候，会根据配置文件进行配置或者按照默认的规则当前实例就是<strong>master</strong>3. </p><ol start="3"><li>在从服务器执行<code>slaveof no one</code>，当前实例脱离控制自动成为<code>master</code></li></ol><h2 id="redis-复制启动的过程-（重点）"><a href="#redis-复制启动的过程-（重点）" class="headerlink" title="redis 复制启动的过程==（重点）=="></a>redis 复制启动的过程==（重点）==</h2><table><thead><tr><th>主服务器操作</th><th>从服务器操作</th></tr></thead><tbody><tr><td>1. （等待命令）</td><td>1. 连接（重新连接）主服务器，发送<strong>sync</strong>命令</td></tr><tr><td>2. 开始执行bgsave，使用缓冲区记录bgsave之后执行所有写命令</td><td>2. 根据配置选项是使用现有的数据（存在）处理客户端请求，还是向请求的客户端返回错误信息</td></tr><tr><td>3. bgsave执行完毕，向从服务器发送<strong>快照文件</strong>，同时异步执行缓冲区记录的写命令</td><td>3. <strong>丢弃所有的旧数据</strong>，载入主服务器的快照文件</td></tr><tr><td>4.  快照文件发送完毕，开始向着从服务器发送存储在缓冲区的写命令</td><td>4. 完成对于快照的解释操作，恢复日常的请求操作</td></tr><tr><td>5. 缓冲区写命令发送完成，同时现在每执行一个写命令就像从服务器发送相同写命令</td><td>5. 执行主服务器发来的所有存储在缓冲区的写命令，并且从现在开始接受主服务器的每一个命令</td></tr></tbody></table><blockquote><p>建议：由于<strong>bgsave</strong>需要开启进行子线程的创建写入缓冲区的创建，所以最好在系统中预留30% - 45% 内存用于redis的bgsave操作</p></blockquote><blockquote><p>特别注意：当从服务器连接主服务器的那一刻，执行到第三步会<strong>清空</strong>当前redis里面的所有数据。</p></blockquote><h3 id="配置方式和命令方式的区别："><a href="#配置方式和命令方式的区别：" class="headerlink" title="配置方式和命令方式的区别："></a>配置方式和命令方式的区别：</h3><p>redis.conf 配置slaveof 的方式：不会马上进行主服务器同步，而是<strong>先载入当前本地存在的rdb或者aof</strong>到redis中进行数据恢复，然后才开始同步复制</p><p>命令slaveof方式：会<strong>立即</strong>连接主服务器进行同步操作</p><h3 id="关于redis的主主复制"><a href="#关于redis的主主复制" class="headerlink" title="关于redis的主主复制:"></a>关于redis的主主复制:</h3><p>如果我们尝试让两台服务器互相slaveof 那么会出现上面情况呢？</p><p>从上面的复制过程可以看到，当一个服务器slaveof另一个服务器，产生的结果只会是两边相互覆盖，也就是从服务器会去同步主服务器的数据，如果此时按照主主的配置，两边互相同步对方的数据，这样产生的数据可能会不一致，或者数据干脆就是不完整的。不仅如此，这种操作还会大量占用资源区让两台服务器互相知道对方</p><h3 id="当一台服务器连接另一台服务器的时候会发生什么？"><a href="#当一台服务器连接另一台服务器的时候会发生什么？" class="headerlink" title="当一台服务器连接另一台服务器的时候会发生什么？"></a>当一台服务器连接另一台服务器的时候会发生什么？</h3><table><thead><tr><th>当有新服务器连接的时候</th><th>主服务器操作</th></tr></thead><tbody><tr><td>步骤3还没有执行</td><td>所有从服务器都会收到相同的快照文件和相同缓冲区写命令</td></tr><tr><td>步骤3正在执行或者已经执行</td><td>完成了之前同步的五个操作之后，会跟新服务器重新执行一次新的五个步骤</td></tr></tbody></table><h2 id="系统故障处理"><a href="#系统故障处理" class="headerlink" title="系统故障处理"></a>系统故障处理</h2><p>复制和持久化虽然已经基本可以保证系统的数据安全，但是总有意外的情况，比如突然断电断网，系统磁盘故障，服务器宕机等一系列情况，那么会出现各种莫名奇妙的问题，下面针对这些情况说明一下解决方式：</p><h3 id="验证快照文件以及aof文件"><a href="#验证快照文件以及aof文件" class="headerlink" title="验证快照文件以及aof文件"></a>验证快照文件以及aof文件</h3><p>在redis的<code>bin</code>目录下面，存在如下的两个sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr-x 1 root root 9722168 Nov 15 20:53 redis-check-aof</span><br><span class="line">-rwxr-xr-x 1 root root 9722168 Nov 15 20:53 redis-check-rdb</span><br></pre></td></tr></table></figure><p>他们的命令作用和内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ .&#x2F;redis-check-aof </span><br><span class="line">Usage: .&#x2F;redis-check-aof [--fix] &lt;file.aof&gt;</span><br><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ .&#x2F;redis-check-rdb </span><br><span class="line">Usage: .&#x2F;redis-check-rdb &lt;rdb-file-name&gt;</span><br></pre></td></tr></table></figure><p>redis-check-aof：如果加入<code>--fix</code>选项，那么命令会尝试修复aof文件，会将内容里面出现错误的命令以及下面的所有命令清空，一般情况下回清空尾部的一些未完成命令。</p><p>redis-check-rdb：遗憾的是目前这种修复收效甚微。建议在修复rdb的时候，用SHA1和SHA256验证文件是否完整。</p><h3 id="校验和与散列值："><a href="#校验和与散列值：" class="headerlink" title="校验和与散列值："></a>校验和与散列值：</h3><p>redis2.6 之后加入了校验和与散列值进行验证。</p><p>快照文件增加CRC64校验和</p><blockquote><p>什么是crc<strong>循环冗余校验</strong>？</p><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUJFJUFBJUU3JTkyJUIwJUU1JTg2JTk3JUU5JUE0JTk4JUU2JUEwJUExJUU5JUE5JTk3" title="https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E5%86%97%E9%A4%98%E6%A0%A1%E9%A9%97">https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E5%86%97%E9%A4%98%E6%A0%A1%E9%A9%97<i class="fa fa-external-link"></i></span></p></blockquote><h3 id="更换故障主服务器："><a href="#更换故障主服务器：" class="headerlink" title="更换故障主服务器："></a>更换故障主服务器：</h3><ol><li>假设A故障，存在BC两台机器，B为从服务，C为将要替换的主服务器</li><li>向机器B发送save命令，同时创建一个新的快照文件，同步完成之后，发送给C</li><li>机器C上面启动redis,让C成为B的主服务器</li></ol><h3 id="Redis-sentienel-哨兵"><a href="#Redis-sentienel-哨兵" class="headerlink" title="Redis sentienel 哨兵"></a>Redis sentienel 哨兵</h3><p>可以监视指定主服务器以及属下的从服务器</p><p>也就是我们常用的<strong>哨兵模式</strong></p><p>但是随着时代进步，目前使用redis基本还是以<code>cluster模式</code>为主</p><h2 id="redis主从复制模式（redis6-0版本）："><a href="#redis主从复制模式（redis6-0版本）：" class="headerlink" title="redis主从复制模式（redis6.0版本）："></a>redis主从复制模式（redis6.0版本）：</h2><h3 id="前提说明："><a href="#前提说明：" class="headerlink" title="前提说明："></a>前提说明：</h3><p>有条件的可以弄三台虚拟机查看效果，这样模拟出来的效果算是比较真实的。</p><h3 id="三台从服务器以及一台主服务器的配置"><a href="#三台从服务器以及一台主服务器的配置" class="headerlink" title="三台从服务器以及一台主服务器的配置"></a>三台从服务器以及一台主服务器的配置</h3><p>个人的办法是copy一个公用的配置，然后进行修改（这里只列举区别以及改动较多的地方，其他地方根据需要配置）：</p><p>第一台机器的配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_16379.pid</span></span><br><span class="line"><span class="attr">port</span> <span class="string">16379</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump16379.rdb</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">"appendonly16379.aof"</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">"log16379"</span></span><br></pre></td></tr></table></figure><p>第二台机器的配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_16380.pid</span></span><br><span class="line"><span class="attr">port</span> <span class="string">16380</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump16380.rdb</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">"appendonly16380.aof"</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">"log16380"</span></span><br></pre></td></tr></table></figure><p>第三台机器的配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_16381.pid</span></span><br><span class="line"><span class="attr">port</span> <span class="string">16381</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump16381.rdb</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">"appendonly16381.aof"</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">"log16381"</span></span><br></pre></td></tr></table></figure><p>这时候要配置一台主服务器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_10000.pid</span></span><br><span class="line"><span class="attr">port</span> <span class="string">10000</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump10000.rdb</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">"appendonly10000.aof"</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">"log10000"</span></span><br></pre></td></tr></table></figure><h3 id="启动redis一主多从："><a href="#启动redis一主多从：" class="headerlink" title="启动redis一主多从："></a>启动redis一主多从：</h3><p>配置很简单，可以用<strong>手动</strong>进行主从复制，也可以使用<strong>redis.conf</strong>提前配置，具体区别上文已经进行过介绍，这里不再赘述。</p><p>从服务器可以通过命令：<code>slaveof 127.0.0.1 10000</code> 实现主从复制拷贝</p><p>可以通过命令<code>info replication</code> 查看主从配置的信息。</p><p>主服务器启动日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:10000&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:e2a92d8c59fbdde3b162da12f4d74ff28bab4fbb</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:10000&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:3</span><br><span class="line">slave0:ip&#x3D;127.0.0.1,port&#x3D;16381,state&#x3D;online,offset&#x3D;14,lag&#x3D;1</span><br><span class="line">slave1:ip&#x3D;127.0.0.1,port&#x3D;16380,state&#x3D;online,offset&#x3D;14,lag&#x3D;1</span><br><span class="line">slave2:ip&#x3D;127.0.0.1,port&#x3D;16379,state&#x3D;online,offset&#x3D;14,lag&#x3D;1</span><br><span class="line">master_replid:029e455ee6f8fdc0e255b6d5c4f63136d933fb24</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:14</span><br></pre></td></tr></table></figure><p>可以看到进行主从配置之后，当前的目录下面多出了对应备份文件</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201123232149.png" alt=""></p><p>当进行主从配置之后，从服务就无法进行写入了，主服务器才可以写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16379&gt; set key 1</span><br><span class="line">(error) READONLY You can&#39;t write against a read only replica.</span><br></pre></td></tr></table></figure><h4 id="测试一主多从复制："><a href="#测试一主多从复制：" class="headerlink" title="测试一主多从复制："></a>测试一主多从复制：</h4><p>主服务器敲入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:10000&gt; hset key1 name1 value1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:10000&gt; keys *</span><br><span class="line">1) &quot;key1&quot;</span><br></pre></td></tr></table></figure><p>从服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16379&gt; hget key1 name1</span><br><span class="line">&quot;value1&quot;</span><br><span class="line">127.0.0.1:16380&gt; hget key1 name1</span><br><span class="line">&quot;value1&quot;</span><br><span class="line">127.0.0.1:16381&gt; hget key1 name1</span><br><span class="line">&quot;value1&quot;</span><br></pre></td></tr></table></figure><h3 id="主从链"><a href="#主从链" class="headerlink" title="主从链"></a>主从链</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201123134010.png" alt=""></p><p>配置方式：</p><p>和主从配置一样，只不过主节点换为从节点。</p><blockquote><p>注意：主从链的配置依然只能是master节点可以写数据，同时中间的节点也是slave</p></blockquote><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>如何检测磁盘是否写入数据？</p><ol><li>主从服务器通过一个虚标值（unique dummy value）来验证从服务器是否真的把数据写入到自己的磁盘。</li><li>通过命令：<code>info</code>检查结果当中的 <code>aof_appending_bio_fsync</code>的值是否为0:</li></ol><blockquote><p># 5.0 版本之后改为如下形式验证</p><p>repl_backlog_active:0</p></blockquote><h2 id="redis主从哨兵模式（Redis-sentienel）（redis6-0版本）"><a href="#redis主从哨兵模式（Redis-sentienel）（redis6-0版本）" class="headerlink" title="redis主从哨兵模式（Redis sentienel）（redis6.0版本）"></a>redis主从哨兵模式（Redis sentienel）（redis6.0版本）</h2><h3 id="哨兵模式有什么作用："><a href="#哨兵模式有什么作用：" class="headerlink" title="哨兵模式有什么作用："></a>哨兵模式有什么作用：</h3><p>Redis的哨兵模式就是对redis系统进行实时的监控，其主要功能有下面两点</p><p>1.<strong>监测</strong>主数据库和从数据库是否正常运行。</p><p>2.当我们的主数据库出现故障的时候，可以自动将从数据库转换为主数据库，实现<strong>自动的切换</strong>。</p><h3 id="为什么要使用哨兵模式："><a href="#为什么要使用哨兵模式：" class="headerlink" title="为什么要使用哨兵模式："></a>为什么要使用哨兵模式：</h3><ol><li>主从复制在主节点宕机的情况下，需要人工干预恢复redis，无法实现高可用。</li><li>主节点宕机的情况下需要备份数据到新的从节点，然后其他节点将主节点设置为新的redis，需要一次全量复制同步数据的过程</li></ol><h3 id="哨兵模式原理"><a href="#哨兵模式原理" class="headerlink" title="哨兵模式原理"></a>哨兵模式原理</h3><p>主节点故障的时候，由redis sentinel自动完成故障发现和转移</p><h3 id="如何部署哨兵模式："><a href="#如何部署哨兵模式：" class="headerlink" title="如何部署哨兵模式："></a>如何部署哨兵模式：</h3><ol><li>首先按照上一节配置，已经设置了一个主节点三个从节点的配置</li></ol><blockquote><p>下面的配置如下：</p><p>主节点：10000</p><p>从节点1：16379</p><p>从节点2：16380</p><p>从节点3：16381</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ ~]$ ps -ef | grep redis</span><br><span class="line">xd        2964  2910  0 18:02 pts&#x2F;0    00:00:00 grep --color&#x3D;auto redis</span><br><span class="line">root     26412     1  0 Nov23 ?        00:06:07 .&#x2F;redis-server 127.0.0.1:10000</span><br><span class="line">root     26421     1  0 Nov23 ?        00:05:37 .&#x2F;redis-server 127.0.0.1:16379</span><br><span class="line">root     26428     1  0 Nov23 ?        00:05:37 .&#x2F;redis-server 127.0.0.1:16380</span><br><span class="line">root     26435     1  0 Nov23 ?        00:05:37 .&#x2F;redis-server 127.0.0.1:16381</span><br></pre></td></tr></table></figure><ol start="2"><li><code>sentinel.conf</code> 配置文件在安装redis的源码包里面有，所以如果误删了可以下回来然后把文件弄到手，其实可以配置一个常用的或者通用的配置放到自己的本地有需要直接替换</li><li><strong>配置5个sentienl.conf文件（建议奇数个哨兵，方便宕机选举产生新的节点）</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ sudo cp sentinel.conf sentinel_26379.conf</span><br><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ sudo cp sentinel.conf sentinel_26380.conf</span><br><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ sudo cp sentinel.conf sentinel_26381.conf</span><br><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ sudo cp sentinel.conf sentinel_10000.conf</span><br></pre></td></tr></table></figure><ol start="4"><li>四个配置文件的改动依次如下：</li></ol><p>所有的<code>sentinel.conf</code> 配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定哨兵端口</span></span><br><span class="line">port 20000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 监听主节点10000</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 10000 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接主节点时的密码，如果redis配置了密码需要填写</span></span><br><span class="line">sentinel auth-pass mymaster 12345678</span><br><span class="line"><span class="meta">#</span><span class="bash"> 故障转移时最多可以有2从节点同时对新主节点进行数据同步</span></span><br><span class="line">sentinel config-epoch mymaster 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 故障转移超时时间180s，</span></span><br><span class="line">sentinel failover-timeout mymasterA 180000 </span><br><span class="line"><span class="meta">#</span><span class="bash"> sentinel节点定期向主节点ping命令，当超过了300S时间后没有回复，可能就认定为此主节点出现故障了……</span></span><br><span class="line">sentinel down-after-milliseconds mymasterA 300000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 故障转移后，1代表每个从节点按顺序排队一个一个复制主节点数据，如果为3，指3个从节点同时并发复制主节点数据，不会影响阻塞，但存在网络和IO开销</span></span><br><span class="line">sentinel parallel-syncs mymasterA 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置后台启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程的pid文件，保险起见设置不一样的，特别是设置后台启动的时候</span></span><br><span class="line">pidfile /var/run/redis-sentinel.pid</span><br></pre></td></tr></table></figure><blockquote><p>扩展：如何判定转移失败:</p><p>a - 如果转移超时失败，下次转移时时间为之前的2倍；</p><p>b - 从节点变主节点时，从节点执行slaveof no one命令一直失败的话，当时间超过<strong>180S</strong>时，则故障转移失败</p><p>c - 从节点复制新主节点时间超过<strong>180S</strong>转移失败</p></blockquote><p>下面为配好五个之后的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root   10772 Nov 28 21:00 sentienl_26382.conf</span><br><span class="line">-rw-r--r-- 1 root root   10767 Nov 28 20:43 sentinel_10000.conf</span><br><span class="line">-rw-r--r-- 1 root root   10772 Nov 28 21:03 sentinel_26379.conf</span><br><span class="line">-rw-r--r-- 1 root root   10766 Nov 28 20:46 sentinel_26380.conf</span><br><span class="line">-rw-r--r-- 1 root root   10772 Nov 28 20:59 sentinel_26381.conf</span><br><span class="line">-rw-r--r-- 1 root root   10772 Nov 28 21:03 sentinel_26382.conf</span><br><span class="line">-rw-r--r-- 1 root root   10744 Nov 28 18:06 sentinel.conf</span><br></pre></td></tr></table></figure><ol start="5"><li><p>上一节已经启动过，这里不再介绍</p></li><li><p><strong>启动sentinel服务</strong></p></li></ol><p>启动五个哨兵：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./redis-sentinel ./sentinel_10000.conf </span><br><span class="line">./redis-sentinel ./sentinel_26379.conf </span><br><span class="line">./redis-sentinel ./sentinel_263780.conf </span><br><span class="line">./redis-sentinel ./sentinel_263781.conf </span><br><span class="line">./redis-sentinel ./sentinel_263782.conf</span><br></pre></td></tr></table></figure><p>使用<code>ps</code>命令查看所有的服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root      3267     1  0 21:14 ?        00:00:01 ./redis-sentinel *:20000 [sentinel]</span><br><span class="line">root      3280     1  0 21:15 ?        00:00:01 ./redis-sentinel *:26379 [sentinel]</span><br><span class="line">root      3296     1  0 21:20 ?        00:00:00 ./redis-sentinel *:26380 [sentinel]</span><br><span class="line">root      3303     1  0 21:21 ?        00:00:00 ./redis-sentinel *:26381 [sentinel]</span><br><span class="line">root      3316  3254  0 21:28 pts/0    00:00:00 grep --color=auto redis</span><br><span class="line">root     26412     1  0 Nov23 ?        00:06:17 ./redis-server 127.0.0.1:10000</span><br><span class="line">root     26421     1  0 Nov23 ?        00:05:47 ./redis-server 127.0.0.1:16379</span><br><span class="line">root     26428     1  0 Nov23 ?        00:05:47 ./redis-server 127.0.0.1:16380</span><br><span class="line">root     26435     1  0 Nov23 ?        00:05:47 ./redis-server 127.0.0.1:16381</span><br></pre></td></tr></table></figure><ol start="7"><li>验证一下哨兵是否管用</li></ol><p>10000是主节点，他的<code>info</code>信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Keyspace</span><br><span class="line">db0:keys&#x3D;1,expires&#x3D;0,avg_ttl&#x3D;0</span><br><span class="line">127.0.0.1:10000&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:3</span><br></pre></td></tr></table></figure><p>使用<code>kill -9 master节点进程端口号</code>之后，我们已经干掉了额主进程，验证一下从节点是否启动</p><p>进入到6379端口的<code>redis-cli</code>当中，可以看到从节点6379的实例被选举为新的的节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip&#x3D;127.0.0.1,port&#x3D;16380,state&#x3D;online,offset&#x3D;857706,lag&#x3D;1</span><br><span class="line">slave1:ip&#x3D;127.0.0.1,port&#x3D;16381,state&#x3D;online,offset&#x3D;858242,lag&#x3D;1</span><br></pre></td></tr></table></figure><blockquote><p><strong>挂掉的主节点恢复之后，能不能进行恢复为主节点？</strong></p><p>尝试重启挂掉的master之后，可以发现他变成了从节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:10000&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:16379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:2</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p><strong>注意：生产环境建议让redis Sentinel部署到不同的物理机上</strong></p><p>如果不喜欢上面的启动哨兵模式，也可以使用下面的命令开启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server-1 sentinel]# redis-server sentinel1.conf --sentinel</span><br><span class="line">[root@dev-server-1 sentinel]# redis-server sentinel2.conf --sentinel</span><br><span class="line">[root@dev-server-1 sentinel]# redis-server sentinel3.conf --sentinel</span><br></pre></td></tr></table></figure><h3 id="哨兵模式部署建议"><a href="#哨兵模式部署建议" class="headerlink" title="哨兵模式部署建议"></a>哨兵模式部署建议</h3><p>a，sentinel节点应部署在<strong>多台</strong>物理机（<strong>线上</strong>环境）</p><p>b，至少三个且<strong>奇数</strong>个sentinel节点</p><p>c，通过以上我们知道，<strong>3个sentinel</strong>可同时监控一个主节点或多个主节点</p><p>  监听N个主节点较多时，如果sentinel出现异常，会对多个主节点有影响，同时还会造成sentinel节点产生过多的网络连接，</p><p>  一般线上建议还是， <strong>3个sentinel</strong>监听一个主节点</p><p>也可以按照下面的方式在启动哨兵的时候启动：</p><h3 id="哨兵模式的优缺点："><a href="#哨兵模式的优缺点：" class="headerlink" title="哨兵模式的优缺点："></a>哨兵模式的优缺点：</h3><p>优点：</p><ol><li>哨兵模式基于主从复制模式，所以主从复制模式有的优点，哨兵模式也有</li><li>哨兵模式下，master挂掉可以自动进行切换，系统可用性更高</li></ol><p>缺点：</p><ol><li>同样也继承了主从模式难以在线扩容的缺点，Redis的容量受限于单机配置</li><li>需要额外的资源来启动sentinel进程，实现相对复杂一点，同时slave节点作为备份节点不提供服务</li></ol><h2 id="redis集群模式（redis6-0版本）"><a href="#redis集群模式（redis6-0版本）" class="headerlink" title="redis集群模式（redis6.0版本）"></a>redis集群模式（redis6.0版本）</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201129145217.png" alt=""></p><p>随着应用的扩展，虽然主从模式和哨兵模式的加入解决了高可用的问题，但是现代的应用基本都是要求可以动态扩展了，为了支持动态扩展，redis在后续的版本当中加入了哨兵的模式</p><p>集群模式主要解决的问题是：</p><p>Cluster模式实现了Redis的分布式存储，即每台节点存储不同的内容，来解决在线扩容的问题</p><h3 id="redis结构设计："><a href="#redis结构设计：" class="headerlink" title="redis结构设计："></a>redis结构设计：</h3><p>使用的是无中心的结构，每一个节点和节点之间相互连接</p><ol><li>redis 使用彼此互联的(ping-pong)的方式，进行互相关联，内部使用二进制协议优化速度</li><li>客户端与redis节点直连,不需要中间代理层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可</li><li>节点的fail是通过集群中超过<strong>半数</strong>的节点检测失效时才生效</li></ol><h3 id="redis集群的工作机制"><a href="#redis集群的工作机制" class="headerlink" title="redis集群的工作机制"></a>redis集群的工作机制</h3><ol><li><p>在Redis的每个节点上，都有一个插槽（slot），取值范围为0-16383，redis会根据接节点的数量分配槽的位置来进行判定发送给哪一个cluster节点</p></li><li><p>当我们存取key的时候，Redis会根据CRC16的算法得出一个结果，然后把结果对16384求余数，这样每个key都会对应一个编号在0-16383之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作</p></li><li><p>为了保证高可用，Cluster模式也引入<strong>主从复制模式</strong>，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点</p></li><li><p>当其它主节点ping一个主节点A时，如果半数以上的主节点与A通信超时，那么认为主节点A宕机了。如果主节点A和它的从节点都宕机了，那么<strong>该集群就无法再提供服务了</strong></p></li></ol><h3 id="配置集群（重点）："><a href="#配置集群（重点）：" class="headerlink" title="配置集群（重点）："></a>配置集群（重点）：</h3><p>为了不产生干扰，先把上一节所有的redis进程干掉，包括哨兵的配置</p><p>使用<code>kil -9 进程端口号</code>直接抹掉整个应用</p><p>配置如下：</p><ol><li>集群至少需要三主三从，同时需要奇数的节点配置。</li><li>我们可以将之前的主从配置的一主三从<strong>增加两个主节点</strong>，目前的配置如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root   84993 Nov 28 21:41 redis10000.conf</span><br><span class="line">-rw-r--r-- 1 root root   84936 Nov 28 21:35 redis16379.conf</span><br><span class="line">-rw-r--r-- 1 root root   84962 Nov 28 21:35 redis16380.conf</span><br><span class="line">-rw-r--r-- 1 root root   84962 Nov 28 21:35 redis16381.conf</span><br><span class="line"></span><br><span class="line"># 增加两个主要节点</span><br><span class="line">-rw-r--r-- 1 root root   84962 Nov 28 21:35 redis16382.conf</span><br><span class="line">-rw-r--r-- 1 root root   84962 Nov 28 21:35 redis16383.conf</span><br></pre></td></tr></table></figure><p>主节点的配置主要如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port 7100 # 本示例6个节点端口分别为7100,7200,7300,7400,7500,7600 </span><br><span class="line">daemonize yes # r后台运行 </span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_7100.pid # pidfile文件对应7100,7200,7300,7400,7500,7600 </span><br><span class="line">cluster-enabled yes # 开启集群模式 </span><br><span class="line">masterauth passw0rd # 如果设置了密码，需要指定master密码</span><br><span class="line">cluster-config-file nodes_7100.conf # 集群的配置文件，同样对应7100,7200等六个节点</span><br><span class="line">cluster-node-timeout 15000 # 请求超时 默认15秒，可自行设置</span><br></pre></td></tr></table></figure><p>启动如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-server ./cluster/redis17000_cluster.conf</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-server ./cluster/redis17100_cluster.conf</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-server ./cluster/redis17200_cluster.conf</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-server ./cluster/redis17300_cluster.conf</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-server ./cluster/redis17400_cluster.conf</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-server ./cluster/redis17500_cluster.conf</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ps -ef | grep redis</span><br><span class="line">root      4761     1  0 15:55 ?        00:00:00 ./redis-server 127.0.0.1:17000 [cluster]</span><br><span class="line">root      4767     1  0 15:55 ?        00:00:00 ./redis-server 127.0.0.1:17100 [cluster]</span><br><span class="line">root      4773     1  0 15:55 ?        00:00:00 ./redis-server 127.0.0.1:17200 [cluster]</span><br><span class="line">root      4779     1  0 15:55 ?        00:00:00 ./redis-server 127.0.0.1:17300 [cluster]</span><br><span class="line">root      4785     1  0 15:55 ?        00:00:00 ./redis-server 127.0.0.1:17400 [cluster]</span><br><span class="line">root      4791     1  0 15:55 ?        00:00:00 ./redis-server 127.0.0.1:17500 [cluster]</span><br><span class="line">root      4797  4669  0 15:55 pts/0    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><p>启动了上面六个节点之后，使用下面的命令并且敲入<code>yes</code>让他们变为集群：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# .&#x2F;redis-cli --cluster create 127.0.0.1:17000 127.0.0.1:17100 127.0.0.1:17200 127.0.0.1:17300 127.0.0.1:17400 127.0.0.1:17500 --cluster-replicas 1</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 127.0.0.1:17400 to 127.0.0.1:17000</span><br><span class="line">Adding replica 127.0.0.1:17500 to 127.0.0.1:17100</span><br><span class="line">Adding replica 127.0.0.1:17300 to 127.0.0.1:17200</span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity</span><br><span class="line">[WARNING] Some slaves are in the same host as their master</span><br><span class="line">M: 1179bb5f47e7f8221ba7917b5852f8064778e0db 127.0.0.1:17000</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 153afa1b9b14194de441fffa791f8d9001badc66 127.0.0.1:17100</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: 4029aeeb6b80e843279738d6d35eee7a1adcd2ff 127.0.0.1:17200</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 3ceb11fe492f98432f124fd1dcb7b2bb1e769a96 127.0.0.1:17300</span><br><span class="line">   replicates 1179bb5f47e7f8221ba7917b5852f8064778e0db</span><br><span class="line">S: 66eaea82ccf69ef96dbc16aac39fd6f6ed3d0691 127.0.0.1:17400</span><br><span class="line">   replicates 153afa1b9b14194de441fffa791f8d9001badc66</span><br><span class="line">S: c34aeb59c8bedc11b4aeb720b70b0019e7389093 127.0.0.1:17500</span><br><span class="line">   replicates 4029aeeb6b80e843279738d6d35eee7a1adcd2ff</span><br></pre></td></tr></table></figure><h4 id="验证集群："><a href="#验证集群：" class="headerlink" title="验证集群："></a>验证集群：</h4><ol><li>输入<code>redis-cli</code>进入任意的一个主节点，注意是主节点，从节点不能做写入操作</li></ol><p><code>Redirected to slot [9189] located at 127.0.0.1:17100</code>根据Hash的算法，算出连接那个节点槽，然后提示slot[9189] 落到了17100上面，所以集群会自动跳转进行Key的加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-cli -p 17000</span><br><span class="line">127.0.0.1:17000&gt; set key1 1</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-cli -p 17000</span><br><span class="line">127.0.0.1:17000&gt; set key1 1</span><br><span class="line">(error) MOVED 9189 127.0.0.1:17100</span><br><span class="line">[root@iZwz99gyct1a1rh6iblyucZ bin]# ./redis-cli -p 17000 -c</span><br><span class="line">127.0.0.1:17000&gt; set key1 ke</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [9189] located at 127.0.0.1:17100</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：集群之后不能使用传统的连接方式，因为每一个key都要经过一次hash的操作找到对应的槽 -》节点之后才能做后续的操作</p><p>使用如下命令进入后正常</p><p>./redis-cli -p 17000 <strong>-c</strong></p><p>-c 代表以集群的方式连接</p></blockquote><ol start="2"><li>可以使用如下命令验证集群的信息:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:17000&gt; cluster nodes</span><br><span class="line">66eaea82ccf69ef96dbc16aac39fd6f6ed3d0691 127.0.0.1:17400@27400 slave 153afa1b9b14194de441fffa791f8d9001badc66 0 1606639411000 2 connected</span><br><span class="line">4029aeeb6b80e843279738d6d35eee7a1adcd2ff 127.0.0.1:17200@27200 master - 0 1606639411000 3 connected 10923-16383</span><br><span class="line">3ceb11fe492f98432f124fd1dcb7b2bb1e769a96 127.0.0.1:17300@27300 slave 1179bb5f47e7f8221ba7917b5852f8064778e0db 0 1606639410000 1 connected</span><br><span class="line">1179bb5f47e7f8221ba7917b5852f8064778e0db 127.0.0.1:17000@27000 myself,master - 0 1606639410000 1 connected 0-5460</span><br><span class="line">153afa1b9b14194de441fffa791f8d9001badc66 127.0.0.1:17100@27100 master - 0 1606639412002 2 connected 5461-10922</span><br><span class="line">c34aeb59c8bedc11b4aeb720b70b0019e7389093 127.0.0.1:17500@27500 slave 4029aeeb6b80e843279738d6d35eee7a1adcd2ff 0 1606639413005 3 connected</span><br></pre></td></tr></table></figure><ol start="3"><li>接下来我们验证一下当一个主节点挂掉会发生什么情况：</li></ol><p>还是和主从复制的验证一样，直接Kill 进程：</p><p>kill掉 17000 之后，我们可以发现 17300 被升级为主节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:17300&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br></pre></td></tr></table></figure><p>此时的节点情况如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:17100&gt; cluster nodes</span><br><span class="line">4029aeeb6b80e843279738d6d35eee7a1adcd2ff 127.0.0.1:17200@27200 master - 0 1606640582000 3 connected 10923-16383</span><br><span class="line">153afa1b9b14194de441fffa791f8d9001badc66 127.0.0.1:17100@27100 myself,master - 0 1606640581000 2 connected 5461-10922</span><br><span class="line">66eaea82ccf69ef96dbc16aac39fd6f6ed3d0691 127.0.0.1:17400@27400 slave 153afa1b9b14194de441fffa791f8d9001badc66 0 1606640581000 2 connected</span><br><span class="line">c34aeb59c8bedc11b4aeb720b70b0019e7389093 127.0.0.1:17500@27500 slave 4029aeeb6b80e843279738d6d35eee7a1adcd2ff 0 1606640582624 3 connected</span><br><span class="line">3ceb11fe492f98432f124fd1dcb7b2bb1e769a96 127.0.0.1:17300@27300 master - 0 1606640580619 7 connected 0-5460</span><br><span class="line">1179bb5f47e7f8221ba7917b5852f8064778e0db 127.0.0.1:17000@27000 master,fail - 1606640370074 1606640367068 1 disconnected</span><br></pre></td></tr></table></figure><ol start="4"><li>如果这时候主节点恢复呢？</li></ol><p>和哨兵的模式一样，恢复之后也变为<code>slave</code>了。</p><h3 id="集群模式优缺点："><a href="#集群模式优缺点：" class="headerlink" title="集群模式优缺点："></a>集群模式优缺点：</h3><p>优点：</p><ol><li>无中心架构，数据按照slot分布在多个节点。</li><li>集群中的每个节点都是平等的关系，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据。</li><li>可线性扩展到1000多个节点，节点可动态添加或删除</li><li>能够实现自动故障转移，节点之间通过gossip协议交换状态信息，用投票机制完成slave到master的角色转换</li></ol><p>缺点：</p><ol><li>客户端实现复杂，驱动要求实现Smart Client，缓存slots mapping信息并及时更新，提高了开发难度。目前仅JedisCluster相对成熟，异常处理还不完善，比如常见的“max redirect exception”</li><li>节点会因为某些原因发生阻塞（阻塞时间大于 cluster-node-timeout）被判断下线，这种failover是没有必要的</li><li>数据通过异步复制，不保证数据的强一致性</li><li>slave充当“冷备”，不能缓解读压力</li><li>批量操作限制，目前只支持具有相同slot值的key执行批量操作，对mset、mget、sunion等操作支持不友好</li><li>key事务操作支持有线，只支持多key在同一节点的事务操作，多key分布不同节点时无法使用事务功能</li><li>不支持多数据库空间，单机redis可以支持16个db，集群模式下只能使用一个，即db 0</li></ol><blockquote><p> Redis Cluster模式不建议使用pipeline和multi-keys操作，减少max redirect产生的场景。</p></blockquote><h3 id="cluster的相关疑问"><a href="#cluster的相关疑问" class="headerlink" title="cluster的相关疑问"></a>cluster的相关疑问</h3><h4 id="为什么redis的槽要用-16384？"><a href="#为什么redis的槽要用-16384？" class="headerlink" title="为什么redis的槽要用 16384？"></a>为什么redis的槽要用 <code>16384</code>？</h4><p><img src="https://img2018.cnblogs.com/blog/725429/201908/725429-20190829164650720-1058321793.jpg" alt="img"></p><p>值得高兴的是：这个问题作者出门回答了：</p><p>能理解作者意思的可以不用看下面的内容</p><p>地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzL3JlZGlzL2lzc3Vlcy8yNTc2" title="https://github.com/redis/redis/issues/2576">https://github.com/redis/redis/issues/2576<i class="fa fa-external-link"></i></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The reason is:</span><br><span class="line"></span><br><span class="line">Normal heartbeat packets carry the full configuration of a node, that can be replaced in an idempotent way with the old in order to update an old config. This means they contain the slots configuration for a node, in raw form, that uses 2k of space with16k slots, but would use a prohibitive 8k of space using 65k slots.</span><br><span class="line">At the same time it is unlikely that Redis Cluster would scale to more than 1000 mater nodes because of other design tradeoffs.</span><br><span class="line">So 16k was in the right range to ensure enough slots per master with a max of 1000 maters, but a small enough number to propagate the slot configuration as a raw bitmap easily. Note that in small clusters the bitmap would be hard to compress because when N is small the bitmap would have slots&#x2F;N bits set that is a large percentage of bits set.</span><br></pre></td></tr></table></figure><ol><li>首先我们查看一下结构体，关于cluster的源代码：<code>cluster.h</code></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201129184329.png" alt=""></p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> sig[<span class="number">4</span>];        <span class="comment">/* Signature "RCmb" (Redis Cluster message bus). */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> totlen;    <span class="comment">/* Total length of this message */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> ver;       <span class="comment">/* Protocol version, currently set to 1. */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> port;      <span class="comment">/* TCP base port number. */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> type;      <span class="comment">/* Message type */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> count;     <span class="comment">/* Only used for some kind of messages. */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> currentEpoch;  <span class="comment">/* The epoch accordingly to the sending node. */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> configEpoch;   <span class="comment">/* The config epoch if it's a master, or the last</span></span><br><span class="line"><span class="comment">                               epoch advertised by its master if it is a</span></span><br><span class="line"><span class="comment">                               slave. */</span></span><br><span class="line">    <span class="keyword">uint64_t</span> offset;    <span class="comment">/* Master replication offset if node is a master or</span></span><br><span class="line"><span class="comment">                           processed replication offset if node is a slave. */</span></span><br><span class="line">    <span class="keyword">char</span> sender[CLUSTER_NAMELEN]; <span class="comment">/* Name of the sender node */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> myslots[CLUSTER_SLOTS/<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">char</span> slaveof[CLUSTER_NAMELEN];</span><br><span class="line">    <span class="keyword">char</span> myip[NET_IP_STR_LEN];    <span class="comment">/* Sender IP, if not all zeroed. */</span></span><br><span class="line">    <span class="keyword">char</span> notused1[<span class="number">34</span>];  <span class="comment">/* 34 bytes reserved for future usage. */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> cport;      <span class="comment">/* Sender TCP cluster bus port */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> flags;      <span class="comment">/* Sender node flags */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> state; <span class="comment">/* Cluster state from the POV of the sender */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> mflags[<span class="number">3</span>]; <span class="comment">/* Message flags: CLUSTERMSG_FLAG[012]_... */</span></span><br><span class="line">    <span class="keyword">union</span> clusterMsgData data;</span><br><span class="line">&#125; clusterMsg;</span><br></pre></td></tr></table></figure><p>集群节点之间的通信内容无非就是IP信息，请求头，请求内容，以及一些参数信息，这里着重看一下参数<code>myslots[CLUSTER_SLOTS/8]</code></p><blockquote><p>#define CLUSTER_SLOTS 16384  这里就是16384的来源</p></blockquote><p>在redis节点发送心跳包时需要把所有的槽放到这个心跳包里，以便让节点知道当前集群信息，16384=16k，在发送心跳包时使用<code>char</code>进行bitmap压缩后是2k（<code>2 * 8 (8 bit) * 1024(1k) = 2K</code>），也就是说使用2k的空间创建了16k的槽数。</p><p>虽然使用CRC16算法最多可以分配65535（2^16-1）个槽位，65535=65k，压缩后就是8k（<code>8 * 8 (8 bit) * 1024(1k) = 8K</code>），也就是说需要需要8k的心跳包，作者认为这样做不太值得；并且一般情况下一个redis集群不会有超过1000个master节点，所以16k的槽位是个比较合适的选择。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MDk3MTE2NTg1OTkxI2hlYWRpbmctOQ==" title="https://juejin.cn/post/6844904097116585991#heading-9">https://juejin.cn/post/6844904097116585991#heading-9<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MTc4MTU0ODk3NDE1I2hlYWRpbmctMjU=" title="https://juejin.cn/post/6844904178154897415#heading-25">https://juejin.cn/post/6844904178154897415#heading-25<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcmp6aGVuZy9wLzExNDMwNTkyLmh0bWw=" title="https://www.cnblogs.com/rjzheng/p/11430592.html">为什么Redis集群有16384个槽<i class="fa fa-external-link"></i></span></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      redis复制以及集群部署的方式
    
    </summary>
    
    
      <category term="redis" scheme="https://lazytime.site/categories/redis/"/>
    
    
      <category term="redis" scheme="https://lazytime.site/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>maven多模块和依赖冲突问题汇总记录</title>
    <link href="https://lazytime.site/2020/11/22/mavenmodules/"/>
    <id>https://lazytime.site/2020/11/22/mavenmodules/</id>
    <published>2020-11-22T11:46:50.000Z</published>
    <updated>2020-11-22T11:48:04.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven多模块和依赖冲突问题汇总记录"><a href="#maven多模块和依赖冲突问题汇总记录" class="headerlink" title="maven多模块和依赖冲突问题汇总记录"></a>maven多模块和依赖冲突问题汇总记录</h1><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122191750.png" alt=""></p><p>[TOC]</p><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>今天学习和总结了一下maven的相关知识点，发现一些比较基础的东西居然也会忘记，这里对于一些日常工作中可能会遇到的问题进行了一下汇总。</p><a id="more"></a><h1 id="idea怎么创建maven多module的项目"><a href="#idea怎么创建maven多module的项目" class="headerlink" title="idea怎么创建maven多module的项目"></a>idea怎么创建maven多module的项目</h1><h2 id="首先了解上面是多module？"><a href="#首先了解上面是多module？" class="headerlink" title="首先了解上面是多module？"></a>首先了解上面是多module？</h2><p>一句话概括就是：一个父模块作为版本控制多个子模块，子模块负责接入到父模块当中作为整个项目的过程。</p><h2 id="多Module管理项目的几种方式："><a href="#多Module管理项目的几种方式：" class="headerlink" title="多Module管理项目的几种方式："></a>多Module管理项目的几种方式：</h2><ol><li>按照单模块拆分为多个子模块，比如将MVC三层架构拆分为 xxx-service，xxx-dao，xxx-model，不过这种方式个人感觉比较二，目前以业务模块拆分比较多，迁移到微服务比如用springcloude或者dubbo 的时候非常好用。</li><li>按照业务模块拆分，这种模式使用的比较多，也比较多见。</li></ol><h2 id="创建一个多module项目-idea2019-3-3版本"><a href="#创建一个多module项目-idea2019-3-3版本" class="headerlink" title="创建一个多module项目(idea2019.3.3版本)"></a>创建一个多module项目(idea2019.3.3版本)</h2><h3 id="创建一个父pom项目："><a href="#创建一个父pom项目：" class="headerlink" title="创建一个父pom项目："></a>创建一个父pom项目：</h3><ol><li>打开idea，选择<code>create new project</code></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122114914.png" alt=""></p><ol start="2"><li>选择maven项目，同时不选任何的预加载设置</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122115055.png" alt=""></p><ol start="3"><li>父pom配置如下：</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122115139.png" alt=""></p><ol start="4"><li>删除<code>src</code> 目录</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122115235.png" alt=""></p><h3 id="创建子模块，引入到父pom里面"><a href="#创建子模块，引入到父pom里面" class="headerlink" title="创建子模块，引入到父pom里面"></a>创建子模块，引入到父pom里面</h3><ol><li>同样右击项目工程，选择<code>new module</code>，然后选择<code>maven</code>，这时候会出现父模块以及对应的子模块名称</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122121402.png" alt=""></p><ol start="2"><li>此时在父模块里面发现引入了子模块的内容</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122121551.png" alt=""></p><h2 id="子父模块的区别："><a href="#子父模块的区别：" class="headerlink" title="子父模块的区别："></a>子父模块的区别：</h2><h3 id="父pom-xml文件内容："><a href="#父pom-xml文件内容：" class="headerlink" title="父pom.xml文件内容："></a>父pom.xml文件内容：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.zxd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>taglib-core<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分为两个部分，一个部分是父pom的声明，包含gourpId，artifactId，打包方式<strong>必须是pom</strong>，因为使用了<strong>聚合模型</strong>，同时在父pom里面指定版本号，子模块不填写version会默认使用父pom的version号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>taglib-core<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面表示当前引入的子模块内容</p><h3 id="子pom-xml文件内容："><a href="#子pom-xml文件内容：" class="headerlink" title="子pom.xml文件内容："></a>子pom.xml文件内容：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用自父pom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.zxd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包方式为jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglib-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="子模块之间进行互相的依赖"><a href="#子模块之间进行互相的依赖" class="headerlink" title="子模块之间进行互相的依赖"></a>子模块之间进行互相的依赖</h2><p>在下面的pom中可以在任意的子模块引入对应的父模块依赖</p><p>注意由于<code>&lt;parent&gt;</code>这个标签会递归继承，所以要注意子依赖不要和依赖引入不同版本的依赖，这样容易造成冲突</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.zxd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglib-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里需要注释掉编译的作用域 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;scope&gt;compile&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="将上面的项目改造为spring-boot多模块项目："><a href="#将上面的项目改造为spring-boot多模块项目：" class="headerlink" title="将上面的项目改造为spring-boot多模块项目："></a>将上面的项目改造为spring-boot多模块项目：</h2><h3 id="改造父pom文件："><a href="#改造父pom文件：" class="headerlink" title="改造父pom文件："></a>改造父pom文件：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>parent指向<code>springboot-started</code></p><p>子模块只需要引入父pom的内容</p><h3 id="Spring-boot-maven-plugin问题"><a href="#Spring-boot-maven-plugin问题" class="headerlink" title="Spring boot maven plugin问题"></a>Spring boot maven plugin问题</h3><p>在打包spring boot项目时，需要使用如下插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果在用maven构建多模块项目时，不要将此插件放到parent pom中，否则如果有sub module不是spring boot应用，在打包时就会出错。<strong>只将该插件添加到是spring boot项目的子模块</strong>。</p><h1 id="MAVEN依赖冲突问题："><a href="#MAVEN依赖冲突问题：" class="headerlink" title="MAVEN依赖冲突问题："></a>MAVEN依赖冲突问题：</h1><h2 id="依赖的传递原则："><a href="#依赖的传递原则：" class="headerlink" title="依赖的传递原则："></a>依赖的传递原则：</h2><ol><li>最短路径原则</li><li>最先声明原则</li></ol><h2 id="maven的依赖引入策略"><a href="#maven的依赖引入策略" class="headerlink" title="maven的依赖引入策略"></a>maven的依赖引入策略</h2><h3 id="最短路径原则："><a href="#最短路径原则：" class="headerlink" title="最短路径原则："></a>最短路径原则：</h3><p>我有下面两个依赖jar包，A和B，他们都引入了C这个依赖，这时候如果有如下的引用</p><p>A -&gt; C（3.3）</p><p>B -&gt; A（3.3）</p><p>B  -&gt; C（3.4）</p><p>此时如果把B打包，得到版本号是3.4，但是如果B去掉C的依赖，那就是走A-&gt;C的传递依赖，很简单</p><p>验证：</p><ol><li>我假设我有一个web包引入了common-lang3，版本是3.4的版本</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>此时又引入了一个公用包，里面也有这个引用：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>如果此时在本地引用3.4版本，那就是3.4的版本，否则就死3.3的版本，不管声明顺序谁先谁后</li></ol><h3 id="最先声明原则："><a href="#最先声明原则：" class="headerlink" title="最先声明原则："></a>最先声明原则：</h3><p>如果两个jar包的寻址路径一致，那么谁先优先声明，先引入谁</p><p>验证：</p><p>下面两个依赖分配对应两个module，引入模块的这个模块暂定为 <strong>C</strong> 模块。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入core包内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.zxd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglib-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;scope&gt;compile&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入db包的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.zxd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglib-db<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时 <code>taglib-core</code>  中的依赖版本如下，暂定为 <strong>A</strong> 模块：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而<code>taglib-db</code> 中的依赖版本如下，暂定为 <strong>B</strong> 模块：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时将整个web项目打包，可以看到web项目里面的版本如下：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122181117.png" alt=""></p><p>可以很明显的看到如果引入关系是这样的：</p><p>C -&gt; A,B</p><p>A -&gt; curator-client 2.5</p><p>B -&gt; curator-client 4.1</p><p>这样的链路最终打包出来的效果是  C -&gt; A -&gt; curator-client 2.5</p><p>这样也就造成了很多情况下我们<strong>编译</strong>和<strong>运行</strong>时完全没有问题的，<strong>甚至有可能打包都是正常</strong>的，但是到最后运行的时候突然报错，要谨防这种依赖版本的问题，好在一般公司的项目都有经理负责控制版本依赖，这种错误算是低级错误，但是在如今框架满天飞的时代，依赖管理的版本控制问题依然需要注意！！！</p><h2 id="如何解决依赖冲突的问题"><a href="#如何解决依赖冲突的问题" class="headerlink" title="如何解决依赖冲突的问题"></a>如何解决依赖冲突的问题</h2><h3 id="锁定版本法"><a href="#锁定版本法" class="headerlink" title="锁定版本法"></a>锁定版本法</h3><p>一般情况下我们会在父pom文件里面管理，可以使用<code>&lt;dependencyManagement&gt;</code>这个这个标签来管理所有子模块的版本依赖，子模块如果指定自己的版本，这里发现打出来的包依然是父pom指定的版本，版本管理使用如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>锁定版本法可以打破2个依赖传递的原则，优先级为最高</strong></p><blockquote><p>版本锁定可以排除一些exclude标签，不同模块用不同版本的jar包本身也不符合规范，所以这种方式较为稳妥</p></blockquote><h2 id="什么情况下会出现Jar包冲突问题"><a href="#什么情况下会出现Jar包冲突问题" class="headerlink" title="什么情况下会出现Jar包冲突问题"></a>什么情况下会出现Jar包冲突问题</h2><p><strong>只有高版本Jar包不向下兼容，或者新增了某些低版本没有的API才有可能导致这样的问题</strong></p><h2 id="如何查找和发现jar包冲突？"><a href="#如何查找和发现jar包冲突？" class="headerlink" title="如何查找和发现jar包冲突？"></a>如何查找和发现jar包冲突？</h2><h3 id="1-利用idea的maven视图工具"><a href="#1-利用idea的maven视图工具" class="headerlink" title="1. 利用idea的maven视图工具"></a>1. 利用idea的maven视图工具</h3><p>直接使用一个图说明一下：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122185753.png" alt=""></p><p>可以通过这个工具查看依赖在哪个模块重复引用，同时如果有冲突会显示红线，这个视图非常的直观，可以帮助依赖管理人员去处理依赖重复引用或者引用版本不一致的问题，进行<code>&lt;exclude&gt;</code>操作</p><h3 id="2-Idea-Maven-Helper-插件"><a href="#2-Idea-Maven-Helper-插件" class="headerlink" title="2. Idea Maven Helper 插件"></a>2. Idea <code>Maven Helper</code> 插件</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122190207.png" alt=""></p><p>如何使用？</p><p>安装完成之后，随便找一个pom.xml文件，按照如下的图例提示进行操作，对于冲突的内容，右击<code>exclude</code>就可以排除依赖：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122190726.png" alt=""></p><p>排除完依赖之后，点击左上角的<code>Refresh UI</code> 刷新一下UI的界面：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122190841.png" alt=""></p><h3 id="3-maven命令工具："><a href="#3-maven命令工具：" class="headerlink" title="3. maven命令工具："></a>3. maven命令工具：</h3><p><code>mvn dependency:tree -Dverbose</code>，有时候如果我们没有idea的情况下，可以使用这个命令来处理，执行的结果参考如下：</p><blockquote><p>PS: 此处一定不要省略<code>-Dverbose</code>参数，要不然是<strong>不会</strong>显示被<strong>忽略</strong>的包的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">or:curator-client:jar:4.1.0:compile</span><br><span class="line">[INFO] |  |  +- org.apache.zookeeper:zookeeper:jar:3.5.4-beta:compile</span><br><span class="line">[INFO] |  |  |  +- commons-cli:commons-cli:jar:1.2:compile</span><br><span class="line">[INFO] |  |  |  +- log4j:log4j:jar:1.2.17:compile</span><br><span class="line">[INFO] |  |  |  +- org.apache.yetus:audience-annotations:jar:0.5.0:compile</span><br><span class="line">[INFO] |  |  |  \- io.netty:netty:jar:3.10.6.Final:compile</span><br><span class="line">[INFO] |  |  +- com.google.guava:guava:jar:20.0:compile</span><br><span class="line">[INFO] |  |  \- org.slf4j:slf4j-api:jar:1.7.30:compile</span><br><span class="line">[INFO] |  +- commons-codec:commons-codec:jar:1.15:compile</span><br><span class="line">[INFO] |  +- commons-collections:commons-collections:jar:3.2.2:compile</span><br><span class="line">[INFO] |  +- commons-beanutils:commons-beanutils:jar:1.9.4:compile</span><br><span class="line">[INFO] |  +- commons-configuration:commons-configuration:jar:1.10:compile</span><br><span class="line">[INFO] |  |  \- commons-lang:commons-lang:jar:2.6:compile</span><br></pre></td></tr></table></figure><p>总体上来说还是比较直观的，非常方便和好用。</p><h2 id="如何写一个干净依赖关系的POM文件"><a href="#如何写一个干净依赖关系的POM文件" class="headerlink" title="如何写一个干净依赖关系的POM文件"></a>如何写一个干净依赖关系的<code>POM</code>文件</h2><ul><li>尽量在父POM中定义<code>&lt;dependencyManagement&gt;</code>，来进行本项目一些依赖版本的管理，这样可以从很大程度上解决一定的冲突</li><li>最少依赖jar包原则</li><li>使用<code>mvn dependency:analyze-only</code>命令用于检测那些声明了但是没被使用的依赖，如有有一些是你自己声明的，那尽量去掉</li><li>使用<code>mvn dependency:analyze-duplicate</code>命令用来分析重复定义的依赖，清理那些重复定义的依赖</li></ul><h3 id="dependency-analyze-only-命令"><a href="#dependency-analyze-only-命令" class="headerlink" title="dependency:analyze-only 命令"></a><code>dependency:analyze-only</code> 命令</h3><p>在idea - <code>Terminal</code>里面，可以看到对应的依赖被下载</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122182537.png" alt=""></p><p>执行完之后我的运行结果如下，这里报错的原因是打包时候默认去阿里云仓库寻找依赖，这里需要配置一下：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201122183942.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Failed to execute goal on project taglib-web: Could not resolve dependencies for project org.zxd:taglib-web:war:1.0.0: The following artifacts could not be resolved: org.zxd:</span><br><span class="line">taglib-core:jar:1.0.0, org.zxd:taglib-db:jar:1.0.0: Failure to find org.zxd:taglib-core:jar:1.0.0 in http://maven.aliyun.com/nexus/content/repositories/central/ was cached in the loc</span><br><span class="line">al repository, resolution will not be reattempted until the update interval of alimaven has elapsed or updates are forced -&gt; [Help 1]</span><br></pre></td></tr></table></figure><p>大致意思就是说再阿里云仓库找不到对应的依赖引入。</p><p>解决方式如下：</p><p>找到maven的安装路径下的<code>apache-maven-3.6.3\conf</code>下面的<code>setting.xml</code>，找到如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里配置本地仓库的位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\soft\apache-maven-3.6.3\rep<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时重新执行一下：<code>dependency:analyze-only</code> 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[INFO] --- maven-dependency-plugin:3.1.2:analyze-only (default-cli) @ taglib-web ---</span><br><span class="line">[WARNING] Unused declared dependencies found:</span><br><span class="line">[WARNING]    org.zxd:taglib-core:jar:1.0.0:compile</span><br><span class="line">[WARNING]    org.apache.commons:commons-lang3:jar:3.4:compile</span><br><span class="line">[WARNING]    org.springframework.boot:spring-boot-starter-web:jar:2.4.0:compile</span><br><span class="line">[WARNING]    org.springframework.boot:spring-boot-starter-test:jar:2.4.0:test</span><br><span class="line">[WARNING]    org.neo4j.driver:neo4j-java-driver:jar:1.5.0:compile</span><br><span class="line">[WARNING]    commons-codec:commons-codec:jar:1.10:compile</span><br><span class="line">[WARNING]    commons-collections:commons-collections:jar:3.2.2:compile</span><br><span class="line">[WARNING]    commons-beanutils:commons-beanutils:jar:1.9.4:compile</span><br><span class="line">[WARNING]    commons-configuration:commons-configuration:jar:1.10:compile</span><br><span class="line">[WARNING]    commons-fileupload:commons-fileupload:jar:1.3:compile</span><br><span class="line">[WARNING]    commons-logging:commons-logging:jar:1.2:compile</span><br><span class="line">[WARNING]    org.apache.httpcomponents:httpclient:jar:4.4.1:compile</span><br><span class="line">[WARNING]    org.apache.poi:poi-ooxml:jar:3.17:compile</span><br><span class="line">[WARNING]    org.mybatis:mybatis:jar:3.4.0:compile</span><br><span class="line">[WARNING]    org.mybatis:mybatis-spring:jar:1.3.0:compile</span><br><span class="line">[WARNING]    com.github.pagehelper:pagehelper:jar:5.1.2:compile</span><br></pre></td></tr></table></figure><h3 id="mvn-dependency-analyze-duplicate-命令"><a href="#mvn-dependency-analyze-duplicate-命令" class="headerlink" title="mvn dependency:analyze-duplicate 命令"></a><code>mvn dependency:analyze-duplicate</code> 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] No duplicate dependencies found in &lt;dependencies&#x2F;&gt; or in &lt;dependencyManagement&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>如果没有其他信息，代表没有重复依赖的引入</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      maven多模块如何在idea中创建，以及maven常见的依赖问题介绍和处理方法
    
    </summary>
    
    
      <category term="maven" scheme="https://lazytime.site/categories/maven/"/>
    
    
      <category term="maven" scheme="https://lazytime.site/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习 - Redis发布订阅</title>
    <link href="https://lazytime.site/2020/11/21/note/"/>
    <id>https://lazytime.site/2020/11/21/note/</id>
    <published>2020-11-21T14:52:22.000Z</published>
    <updated>2020-11-21T14:56:13.820Z</updated>
    
    <content type="html"><![CDATA[<p>消息通信模式，发送者发送消息，接受者接受消息，微信，微博，关注系统</p><p>redis客户端可以订阅任意数量的频道</p><p>订阅/发布消息：</p><ol><li>消息发送者</li><li>频道</li><li>消息内容</li><li>消息接受者</li></ol><a id="more"></a><h2 id="消息发布的原理"><a href="#消息发布的原理" class="headerlink" title="消息发布的原理"></a>消息发布的原理</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201118223756.png" alt=""></p><p>订阅/发布消息需要的四个必要对象：</p><ol><li>消息发送者 publisher</li><li>频道 - channel</li><li>消息内容 - channel msg</li><li>消息接受者 - subscriber</li></ol><h2 id="如何订阅频道"><a href="#如何订阅频道" class="headerlink" title="如何订阅频道"></a>如何订阅频道</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201118224115.png" alt=""></p><p>使用<strong>subscribe</strong> 命令发送消息，订阅消息会显示 1）2）3）,同时显示订阅的序号，从1开始，这时候命令行会阻塞等待消息传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16379&gt; subscribe first second</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;first&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;second&quot;</span><br><span class="line">3) (integer) 2</span><br></pre></td></tr></table></figure><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><p>redis设计了 <strong>publish</strong> 命令，用于订阅频道，发送消息会返回成功收到消息的数量，如果没有收到则为0</p><p>我们需要在新开一个窗口，输入如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xd@iZwz99gyct1a1rh6iblyucZ bin]$ .&#x2F;redis-cli -p 16379</span><br><span class="line">127.0.0.1:16379&gt; publish channel1 message</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:16379&gt;</span><br></pre></td></tr></table></figure><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p>功能说明：允许客户端订阅某个模式的频道</p><p>本质：其实就是可以通过使用通配符的模式批量订阅一批频道</p><p>具体的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16379&gt; PSUBSCRIBE chanel-*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;psubscribe&quot;</span><br><span class="line">2) &quot;chanel-*&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><p>如果订阅了一批频道，那么发送给这个频道的消息将被客户端接收到两次，只不过这两条消息的类型不同，一个是message类型，一个是<strong>pmessage</strong>类型，但其内容相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:16379&gt; PSUBSCRIBE chanel-*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;psubscribe&quot;</span><br><span class="line">2) &quot;chanel-*&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;chanel-*&quot;</span><br><span class="line">3) &quot;chanel-111&quot;</span><br><span class="line">4) &quot;213213&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br><span class="line">2) &quot;chanel-*&quot;</span><br><span class="line">3) &quot;chanel-22&quot;</span><br><span class="line">4) &quot;213213&quot;</span><br></pre></td></tr></table></figure><h2 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h2><p>Redis采用<strong>UNSUBSCRIBE</strong>和<strong>PUNSUBSCRIBE</strong>命令取消订阅</p><h2 id="redis发布订阅原理实现"><a href="#redis发布订阅原理实现" class="headerlink" title="redis发布订阅原理实现"></a>redis发布订阅原理实现</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTA0MTg2NTM0OTUyOTY4I2hlYWRpbmctNw==" title="https://juejin.im/post/6844904186534952968#heading-7">https://juejin.im/post/6844904186534952968#heading-7<i class="fa fa-external-link"></i></span></p><h3 id="subscribe的实现"><a href="#subscribe的实现" class="headerlink" title="subscribe的实现"></a>subscribe的实现</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201119134454.png" alt=""></p><ol><li>维护一个client 和 一个 server 结构体，都存储pubsub_patterns</li><li>client存储的是以hash表来实现的，用键值对的形式，键为键表示订阅的频道，值为空。</li><li>而server存储的是改服务器当中所有频道以及订阅这个频道的客户端，也是字典类型。插入节点的时候键为频道，值为订阅的所有客户端组成的链表</li></ol><h3 id="psubscribe"><a href="#psubscribe" class="headerlink" title="psubscribe"></a>psubscribe</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201119225433.png" alt=""></p><ol><li>大体实现和subscribe类似，client维护的内容是相似的</li><li>在server当中,表示该服务端的所有频道以及订阅频道客户端。插入节点使用的是键为频道，值为订阅了所有客户端组成的链表</li></ol><h3 id="PUBLISH"><a href="#PUBLISH" class="headerlink" title="PUBLISH"></a>PUBLISH</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201119225849.png" alt=""></p><p>会在redis_server当中遍历所有的pubsub_channel中管理的所有频道，找到对应的频道之后链表遍历所有的客户端，将消息发给客户端。</p><h2 id="redis发布订阅的应用"><a href="#redis发布订阅的应用" class="headerlink" title="redis发布订阅的应用"></a>redis发布订阅的应用</h2><p>用于监听命令和数据的变化，当redis通过发布订阅进行写操作的时候，会有两条消息，一条是del mykey，另一条是mykey del。一个表示空间变化，一个是频道的改变。可以用于进行消息的实时推送。</p><h2 id="redis和activeMQ的比较"><a href="#redis和activeMQ的比较" class="headerlink" title="redis和activeMQ的比较"></a>redis和activeMQ的比较</h2><p>（1）ActiveMQ支持多种消息协议，包括AMQP，MQTT，Stomp等，并且支持JMS规范，但Redis没有提供对这些协议的支持； </p><p>（2）ActiveMQ提供持久化功能，但Redis无法对消息持久化存储，一旦消息被发送，如果没有订阅者接收，那么消息就会丢失； </p><p>（3）ActiveMQ提供了消息传输保障，当客户端连接超时或事务回滚等情况发生时，消息会被重新发送给客户端，Redis没有提供消息传输保障。</p><blockquote><p> ActiveMQ所提供的功能远比Redis发布订阅要复杂，毕竟Redis不是专门做发布订阅的，但是如果系统中已经有了Redis，并且需要基本的发布订阅功能，就没有必要再安装ActiveMQ了，因为可能ActiveMQ提供的功能大部分都用不到，而Redis的发布订阅机制就能满足需求。</p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      redis发布订阅的一些应用以及一些命令的学习
    
    </summary>
    
    
      <category term="redis专栏" scheme="https://lazytime.site/categories/redis%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="redis" scheme="https://lazytime.site/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis学习 - redis 持久化</title>
    <link href="https://lazytime.site/2020/11/21/redis-chijiu/"/>
    <id>https://lazytime.site/2020/11/21/redis-chijiu/</id>
    <published>2020-11-21T14:24:47.000Z</published>
    <updated>2020-11-21T14:26:15.263Z</updated>
    
    <content type="html"><![CDATA[<p>无论面试和工作，持久化都是重点。</p><p>一般情况下,redis占用内存超过20GB以上的时候，必须考虑主从多redis实例进行数据同步和备份保证可用性。</p><p>rbd保存的文件都是 <code>dump.rdb</code>，都是配置文件当中的快照配置进行生成的。一般业务情况只需要用rdb即可。</p><p>aof默认是不开启的，因为aof非常容易产生大文件，虽然官方提供重写但是在文件体积过大的时候还是容易造成阻塞，谨慎考虑使用</p><p>rbd和aof在大数据量分别有各种不同情况的系统性能影响，具体使用何种解决策略需要根据系统资源以及业务的实际情况决定。</p><a id="more"></a><h2 id="数据设计影响持久化："><a href="#数据设计影响持久化：" class="headerlink" title="数据设计影响持久化："></a>数据设计影响持久化：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zenRoYW5hdG9zLmdpdGh1Yi5pby90b3BpYy9yZWRpcy9pbXByb3ZlLTAxLw==" title="https://szthanatos.github.io/topic/redis/improve-01/">https://szthanatos.github.io/topic/redis/improve-01/<i class="fa fa-external-link"></i></span></p><h2 id="为什么要持久化？"><a href="#为什么要持久化？" class="headerlink" title="为什么要持久化？"></a>为什么要持久化？</h2><ol><li>重用数据</li><li>防止系统故障备份重要数据</li></ol><h3 id="持久化的方式"><a href="#持久化的方式" class="headerlink" title="持久化的方式"></a>持久化的方式</h3><ol><li>RDB 快照：将某一个时刻的所有数据写入到磁盘</li><li>AOF（append-only file）：将所有的命令写入到此判断。</li></ol><p>默认情况：<strong>RDB</strong>，AOF需要手动开启</p><h2 id="redis-conf持久化配置说明"><a href="#redis-conf持久化配置说明" class="headerlink" title="redis.conf持久化配置说明"></a>redis.conf持久化配置说明</h2><p>在<code>redis.conf</code>文件当中，存在如下的选项：</p><p><code>redis.conf</code>当中RDB的相关配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是否开启rdb压缩 默认开启</span></span><br><span class="line"><span class="attr">rdbcompression</span> <span class="string">yes</span></span><br><span class="line"><span class="comment">#代表900秒内有一次写入操作，就记录到rdb</span></span><br><span class="line"><span class="attr">save</span> <span class="string">900 1</span></span><br><span class="line"><span class="comment"># rdb的备份文件名称</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump.rdb</span></span><br><span class="line"><span class="comment"># 表示备份文件存放位置</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">./</span></span><br></pre></td></tr></table></figure><p><code>redis.conf</code>当中AOF的相关配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启aof，默认是关闭的</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">no</span></span><br><span class="line"><span class="comment">#aof的文件名称</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">"appendonly.aof"</span></span><br><span class="line"><span class="comment"># no: don't fsync, just let the OS flush the data when it wants. Faster.</span></span><br><span class="line"><span class="comment"># always: fsync after every write to the append only log. Slow, Safest.</span></span><br><span class="line"><span class="comment"># everysec: fsync only one time every second. Compromise.</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">everysec</span></span><br><span class="line"><span class="comment"># 在进行rewrite的时候不开启fsync，即不写入缓冲区，直接写入磁盘，这样会造成IO阻塞，但是最为安全，如果为yes表示写入缓冲区，写入的适合redis宕机会造成数据持久化问题(在linux的操作系统的默认设置下，最多会丢失30s的数据)</span></span><br><span class="line"><span class="meta">no-appendfsync-on-rewrite</span> <span class="string">no</span></span><br><span class="line"><span class="comment"># 下面两个参数要配合使用，代表当redis内容大于64m同时扩容超过100%的时候会执行bgrewrite，进行持久化</span></span><br><span class="line"><span class="meta">auto-aof-rewrite-percentage</span> <span class="string">100</span></span><br><span class="line"><span class="meta">auto-aof-rewrite-min-size</span> <span class="string">64mb</span></span><br></pre></td></tr></table></figure><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h3 id="创建rdb快照的几种方式："><a href="#创建rdb快照的几种方式：" class="headerlink" title="创建rdb快照的几种方式："></a>创建rdb快照的几种方式：</h3><ol><li>客户端向redis发送bgsave的命令（注意windows不支持bgsave），此时reids调用 <strong>fork</strong> 创建子进程，父进程继续处理，子进程将快照写入磁盘，父进程继续处理请求。</li><li>客户端发送save命令创建快照。注意这种方式会<strong>阻塞</strong>整个父进程。很少使用，特殊情况才使用。</li><li>redis通过shutdown命令关闭服务器请求的时候，此时redis会停下所有工作执行一次save，阻塞所有客户端不再执行任何命令并且进行磁盘写入，写入完成关闭服务器。</li><li>redis集群的时候，会发送sync 命令进行一次复制操作，如果主服务器<strong>没有执行</strong>或者<strong>刚刚执行完</strong>bgsave，则会进行bgsave。</li><li>执行<strong>flushall</strong> 命令</li></ol><h3 id="RDB快照的一些注意点"><a href="#RDB快照的一些注意点" class="headerlink" title="RDB快照的一些注意点:"></a>RDB快照的一些注意点:</h3><ol><li><strong>只使用rdb的时候</strong>，如果创建快照的时候redis崩溃，redis会留存上一次备份快照，但是具体丢失多少数据由备份时间查看</li><li>只适用一些可以容忍一定数据丢失的系统，否则需要考虑aof持久化</li><li>在大数据量的场景下，特别是内存达到20GB以上的适合，一次同步大约要4-6秒<ol><li>一种方式是用手动同步，在凌晨的适合进行手动阻塞同步，比BGSAVE快一些</li></ol></li></ol><blockquote><p>一种解决方法：</p><p>通过日志记录来恢复中断的日志，来进行数据的恢复</p></blockquote><p>如何通过修改配置来获得想要的持久化？</p><ol><li>修改save参数，尽量在开发环境模拟线上环境设置save，过于频繁造成资源浪费，过于稀少有可能丢失大量数据</li><li>日志进行聚合计算，按照save进行计算最多会丢失多少时间的数据，判断容忍性，比如一小时可以设置 <code>save 3600 1</code></li></ol><h3 id="RDB的优缺点对比："><a href="#RDB的优缺点对比：" class="headerlink" title="RDB的优缺点对比："></a>RDB的优缺点对比：</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ol><li>适合大规模的数据恢复</li><li>如果数据不小心误删，可以及时恢复</li><li>恢复速度一般情况下快于aof</li></ol><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ol><li>需要一定的时间间隔，如果redis意外宕机，最后一次修改的数据就没有了，具体丢失多少数据需要看持久化策略</li><li>fork进程的时候，会占用一定的内存空间，如果fork的内存过于庞大，可能导致秒级别的恢复时间</li><li>数据文件经过redis压缩，可读性较差</li></ol><h2 id="AOF（append-only-fail）"><a href="#AOF（append-only-fail）" class="headerlink" title="AOF（append only fail）"></a>AOF（append only fail）</h2><p>其实就是把我们的命令一条条记录下来，类似linux的<code>history</code></p><p>默认是不开启的，需要手动开启，开启之后需要重启</p><p>如果aof文件错位了，可以用<code>redis-check-aof</code> 进行文件修复</p><blockquote><p>文件同步：写入文件的时候，会发生三件事：</p><ol><li>file.write() 方法将文件存储到缓冲区</li><li>file.flush() 将缓冲区的内容写入到硬盘</li><li>sync 文件同步，阻塞直到写入硬盘为止</li></ol></blockquote><h3 id="AOC的同步策略"><a href="#AOC的同步策略" class="headerlink" title="AOC的同步策略"></a>AOC的同步策略</h3><table><thead><tr><th>选项</th><th>同步频率</th></tr></thead><tbody><tr><td>always</td><td>每次命令都写入磁盘，严重降低redis速度</td></tr><tr><td>everysec</td><td>每秒执行一次，显示将多个命令写入到磁盘</td></tr><tr><td>no</td><td>操作系统决定，佛系</td></tr></tbody></table><p>分析：</p><ol><li>第一种对于固态的硬盘的伤害比较大，我们都知道固态的擦写次数的寿命是远远小于机械硬盘的，频繁的io是容易对固态造成欺骗认为一次擦写，导致本就寿命不长的固态变得更命短，<strong>基本不用</strong>，特殊情况下有可能用得到</li><li>第二种是默认的方式，也是推荐以及比较实用的方式，最多只会丢失一秒的数据，这种方式比较好的保证数据的备份可用，<strong>推荐使用</strong></li><li>第三种对于CPU的压力是最小的，因为由系统决定，但是需要考虑能不能接受不定量的数据丢失，还有一个原因是硬盘将缓冲区刷新到硬盘不定时，所以<strong>不建议使用</strong></li></ol><h3 id="重写和压缩AOF文件："><a href="#重写和压缩AOF文件：" class="headerlink" title="重写和压缩AOF文件："></a>重写和压缩AOF文件：</h3><p>由于1秒一次同步在不断写入之后造成文件内容越来越大，同时同步速度也会变慢，为了解决这个问题，redis引入了<code>bgrewriteaof</code>命令来进行压缩，和<code>bgsave</code>创建快照类似，同样会有子进程拖垮的问题，同时会有大文件在重写的时候带来巨大的文件系统删除的压力，导致系统阻塞。</p><p>命令如下</p><p><code>bgrewriteaof</code></p><p>示例如下：</p><blockquote><p>127.0.0.1:16379&gt; BGREWRITEAOF<br>Background append only file rewriting started</p></blockquote><blockquote><p>参数控制：</p><p>auto-aof-rewrite-percentage：<strong>100</strong></p><p>auto-aof-rewrite-min-size ：<strong>64MB</strong></p><p>这里案例配置代表当AOF大于64并且扩大了100%将处罚<strong>bgrewrite</strong>命令</p></blockquote><h4 id="redis-aof的rewrite做了那些事？"><a href="#redis-aof的rewrite做了那些事？" class="headerlink" title="redis aof的rewrite做了那些事？"></a>redis aof的rewrite做了那些事？</h4><ol><li>对于一些冗余的命令进行清除</li><li>检测存在错误的命令，将错误命令下面的所有命令都进行清理，一般情况是末尾由于宕机没有执行完的一些命令清理。</li></ol><h3 id="aof的优缺点对比"><a href="#aof的优缺点对比" class="headerlink" title="aof的优缺点对比"></a>aof的优缺点对比</h3><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><ol><li>从不同步，效率高</li><li>每秒同步一次，可能丢失一秒数据</li><li>每次修改都同步，文件完整性好</li></ol><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><ol><li>相对于数据文件来说，aof远远大于rdb。修复速度慢一些</li><li>存在未知的bug，比如如果重写aof文件的时候突然中断，会有很多奇怪的现象</li></ol><h2 id="如何检查redis的性能瓶颈："><a href="#如何检查redis的性能瓶颈：" class="headerlink" title="如何检查redis的性能瓶颈："></a>如何检查redis的性能瓶颈：</h2><ol><li>redis-benchmark 官方推荐的性能测试工具，非常强大，具体的地址为：<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9yZWRpcy9yZWRpcy1iZW5jaG1hcmtzLmh0bWw=" title="https://www.runoob.com/redis/redis-benchmarks.html">https://www.runoob.com/redis/redis-benchmarks.html<i class="fa fa-external-link"></i></span></li><li>Redis-cli中调用<code>slowlog get</code>，作用是返回执行时间<strong>超过redis.conf</strong>中定义的持续时间的命令列表，注意这个时间仅仅是请求的处理时间，不包含网络通信的时间，<strong>默认值是一秒</strong>，</li></ol><blockquote><p>redis.conf 当中对于慢日志的解释:</p><p>The following time is expressed in microseconds, so 1000000 is equivalent to one second. Note that a negative number disables the slow log, while a value of zero forces the logging of every command.</p><p>接下来的时间以微秒为单位，因此1000000等于一秒。 请注意，负数将禁用慢速日志记录，而零值将强制记录每个命令。<strong>（以微秒为单位）</strong></p><p><strong>slowlog-log-slower-than 10000</strong></p><p>There is no limit to this length. Just be aware that it will consume memory. You can reclaim memory used by the slow log with SLOWLOG RESET.</p><p>该长度没有限制。 请注意，它将消耗内存。 您可以使用SLOWLOG RESET回收慢速日志使用的内存。<strong>（意思就是说超过128条之后的命令会被自动移除）</strong></p><p><strong>slowlog-max-len 128</strong></p></blockquote><blockquote><p>可以用命令 SLOWLOG RESET 清楚慢日志占用的内存</p><p>127.0.0.1:16379&gt; SLOWLOG reset<br>OK</p></blockquote><p>==慢日志是存储在内存当中的，切记==</p><h2 id="持久化性能建议"><a href="#持久化性能建议" class="headerlink" title="持久化性能建议"></a>持久化性能建议</h2><blockquote><ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。</li></ul></blockquote><blockquote><ul><li>如果Enalbe AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。</li></ul></blockquote><blockquote><ul><li>如果不Enable AOF ，仅靠Master-Slave Replication 实现高可用性也可以。能省掉一大笔IO也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。<strong>新浪微博</strong>就选用了这种架构。</li></ul></blockquote><p>其他性能优化指南（强烈推荐）：</p><p><span class="exturl" data-url="aHR0cHM6Ly9zenRoYW5hdG9zLmdpdGh1Yi5pby90b3BpYy9yZWRpcy9pbXByb3ZlLTAyLw==" title="https://szthanatos.github.io/topic/redis/improve-02/">https://szthanatos.github.io/topic/redis/improve-02/<i class="fa fa-external-link"></i></span></p><h2 id="总结对比rdb和aof："><a href="#总结对比rdb和aof：" class="headerlink" title="总结对比rdb和aof："></a>总结对比rdb和aof：</h2><table><thead><tr><th></th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td><strong>存储内容</strong></td><td>数据</td><td>写操作日志</td></tr><tr><td><strong>性能影响</strong></td><td>小</td><td>大</td></tr><tr><td><strong>恢复速度</strong></td><td>高</td><td>低</td></tr><tr><td><strong>存储空间</strong></td><td>小</td><td>大</td></tr><tr><td><strong>可读性</strong></td><td>低</td><td>高</td></tr><tr><td><strong>安全程度</strong></td><td>较低，保存频率低</td><td>较高，保存频率高</td></tr><tr><td><strong>默认开启</strong></td><td>是</td><td>否</td></tr><tr><td><strong>存储策略</strong></td><td><code>save 900 1</code>：九百秒内一次修改即保存 <code>save 300 10</code>：三百秒内十次修改即保存 <code>save 60 10000</code>：六十秒内一万次修改即保存 允许自定义</td><td><code>always</code>：逐条保存 or <code>everysec</code>：每秒保存 or <code>no</code>：系统自己决定什么时候保存</td></tr></tbody></table><h2 id="其他拓展知识："><a href="#其他拓展知识：" class="headerlink" title="其他拓展知识："></a>其他拓展知识：</h2><h3 id="关于linux内核开启transparent-hugepage会带来的阻塞问题："><a href="#关于linux内核开启transparent-hugepage会带来的阻塞问题：" class="headerlink" title="关于linux内核开启transparent_hugepage会带来的阻塞问题："></a>关于linux内核开启<code>transparent_hugepage</code>会带来的阻塞问题：</h3><p>个人对于Linux学艺不精，就直接引用文章了，侵权请联系删除</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2Vycnljb2RlL3AvNDY3MDkzMS5odG1s" title="https://www.cnblogs.com/kerrycode/p/4670931.html">Linux 关于Transparent Hugepages的介绍<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS8xMTUyMzEzLzE3Njc5Mjc=" title="https://blog.51cto.com/1152313/1767927">简单说说THP——记一次数据库服务器阻塞的问题解决<i class="fa fa-external-link"></i></span></p><h3 id="官方解决aof和rdb对于性能问题的折中处理方式"><a href="#官方解决aof和rdb对于性能问题的折中处理方式" class="headerlink" title="官方解决aof和rdb对于性能问题的折中处理方式"></a>官方解决aof和rdb对于性能问题的折中处理方式</h3><ol><li>redis4.0之后有一个参数叫做:<code>aof-use-rdb-preamble yes</code></li></ol><p>参数解释如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># When rewriting the AOF file, Redis is able to use an RDB preamble in the</span><br><span class="line"># AOF file for faster rewrites and recoveries. When this option is turned</span><br><span class="line"># on the rewritten AOF file is composed of two different stanzas:</span><br><span class="line">#</span><br><span class="line">#   [RDB file][AOF tail]</span><br><span class="line">#</span><br><span class="line"># When loading, Redis recognizes that the AOF file starts with the &quot;REDIS&quot;</span><br><span class="line"># string and loads the prefixed RDB file, then continues loading the AOF</span><br><span class="line"># tail.</span><br><span class="line">＃重写AOF文件时，Redis可以在</span><br><span class="line">＃AOF文件可加快重写和恢复速度。 启用此选项时</span><br><span class="line">重写的AOF文件上的＃由两个不同的节组成：</span><br><span class="line">＃</span><br><span class="line">＃[RDB文件] [AOF尾巴]</span><br><span class="line">＃</span><br><span class="line">＃加载时，Redis会识别AOF文件以“ REDIS”开头</span><br><span class="line">＃字符串并加载带前缀的RDB文件，然后继续加载AOF</span><br><span class="line">＃ 尾巴。</span><br></pre></td></tr></table></figure><p>大致的内容就是说redis会将较早的部分内容转为RDB文件进行恢复，同时加入近期的数据为AOF文件</p><p>加载的时候先执行rdb文件的恢复，然后再加载aof命令</p><h3 id="如何进行内存清理"><a href="#如何进行内存清理" class="headerlink" title="如何进行内存清理"></a>如何进行内存清理</h3><p>在<strong>redis4.0</strong>之后，可以通过将配置里的<code>activedefrag</code>设置为<code>yes</code>开启自动清理，或者通过<code>memory purge</code>命令手动清理。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      关于redis持久化的一些学习了解，以及一些拓展知识的了解
    
    </summary>
    
    
      <category term="redis专栏" scheme="https://lazytime.site/categories/redis%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="redis" scheme="https://lazytime.site/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>记一次阿里云安装mysql （rpm安装）</title>
    <link href="https://lazytime.site/2020/11/15/note/"/>
    <id>https://lazytime.site/2020/11/15/note/</id>
    <published>2020-11-15T07:55:50.000Z</published>
    <updated>2020-11-15T08:07:21.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载mysql源安装包"><a href="#下载mysql源安装包" class="headerlink" title="下载mysql源安装包"></a>下载mysql源安装包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="安装mysql源"><a href="#安装mysql源" class="headerlink" title="安装mysql源"></a>安装mysql源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="检测是否安装完成"><a href="#检测是否安装完成" class="headerlink" title="检测是否安装完成"></a>检测是否安装完成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br></pre></td></tr></table></figure><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><h2 id="设置开启启动mysql服务"><a href="#设置开启启动mysql服务" class="headerlink" title="设置开启启动mysql服务"></a>设置开启启动mysql服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure><h2 id="查看安装的mysql版本"><a href="#查看安装的mysql版本" class="headerlink" title="查看安装的mysql版本"></a>查看安装的mysql版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -aq | grep -i mysql</span><br></pre></td></tr></table></figure><h2 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h2 id="查看MySQL初始密码"><a href="#查看MySQL初始密码" class="headerlink" title="查看MySQL初始密码"></a>查看MySQL初始密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#39;A temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br></pre></td></tr></table></figure><p>执行上面步骤可以获得mysql初始数据库密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取到初始密码：.DhtciCJ?3rg</span><br></pre></td></tr></table></figure><p>根据此密码就可以在第一次root登录的时候修改密码</p><h2 id="更改MySQL密码"><a href="#更改MySQL密码" class="headerlink" title="更改MySQL密码"></a>更改MySQL密码</h2><p><code>mysqladmin -u root -p&#39;旧密码&#39; password &#39;新密码&#39;</code></p><h3 id="初始化更改密码的案例"><a href="#初始化更改密码的案例" class="headerlink" title="初始化更改密码的案例"></a>初始化更改密码的案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin  -u root -p &#39;xxx&#39; password &#39;xxxxx&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;.DhtciCJ?3rg&#39; # 这里用刚刚到随机初始密码</span><br></pre></td></tr></table></figure><blockquote><p>这里会可能出现<font color='red'>更改失败</font>的问题</p><p>方法一：把密码设置复杂点（这是最直接的方法）</p><p>方法二：关闭mysql密码强度验证(validate_password)</p><p>　　　　编辑配置文件：vim /etc/my.cnf， 增加这么一行validate_password=off</p><p>　　　　编辑后重启mysql服务：systemctl restart mysqld</p></blockquote><h2 id="设置mysql能够远程访问（不建议使用root）"><a href="#设置mysql能够远程访问（不建议使用root）" class="headerlink" title="设置mysql能够远程访问（不建议使用root）"></a>设置mysql能够远程访问（不建议使用root）</h2><h3 id="1-登录进MySQL：mysql-uroot-p密码"><a href="#1-登录进MySQL：mysql-uroot-p密码" class="headerlink" title="1. 登录进MySQL：mysql -uroot -p密码"></a>1. 登录进MySQL：mysql -uroot -p密码</h3><p>注意只有root用户才可以操作</p><h3 id="2-在阿里云当中增加一个用户给予访问权限："><a href="#2-在阿里云当中增加一个用户给予访问权限：" class="headerlink" title="2. 在阿里云当中增加一个用户给予访问权限："></a>2. 在阿里云当中增加一个用户给予访问权限：</h3><p>具体查看阿里云配置安全组</p><h3 id="开放用户远程访问"><a href="#开放用户远程访问" class="headerlink" title="开放用户远程访问:"></a>开放用户远程访问:</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaG9nZS9wLzQ5NTgyMTQuaHRtbA==" title="https://www.cnblogs.com/hoge/p/4958214.html">https://www.cnblogs.com/hoge/p/4958214.html<i class="fa fa-external-link"></i></span></p><p>mysql中添加一个和root一样的用户用于远程连接：</p><p>大家在拿站时应该碰到过。root用户的mysql，只可以本地连，对外拒绝连接。</p><p>下面语句添加一个新用户<code>administrtor</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 创建新用户</span><br><span class="line">CREATE USER &#39;monitor&#39;@&#39;%&#39; IDENTIFIED BY &#39;admin&#39;;</span><br><span class="line"></span><br><span class="line">-- 给用户分配root并且支持远程访问</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;monitor&#39;@&#39;%&#39; IDENTIFIED BY &#39;admin&#39; WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;</span><br></pre></td></tr></table></figure><p>删除这个用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 删除用户</span><br><span class="line">DROP USER &#39;monitor&#39;@&#39;%&#39;;</span><br><span class="line">-- 删除具体分配表</span><br><span class="line">DROP DATABASE IF EXISTS &#96;monitor&#96; ;</span><br></pre></td></tr></table></figure><h3 id="3-阿里云的安全组设置里面选择添加安全组规则，开启3306端口。授权对象选择0-0-0-0-0所有ip可访问，如果添加限制可以点击旁面的小叹号。"><a href="#3-阿里云的安全组设置里面选择添加安全组规则，开启3306端口。授权对象选择0-0-0-0-0所有ip可访问，如果添加限制可以点击旁面的小叹号。" class="headerlink" title="3. 阿里云的安全组设置里面选择添加安全组规则，开启3306端口。授权对象选择0.0.0.0/0所有ip可访问，如果添加限制可以点击旁面的小叹号。"></a>3. 阿里云的安全组设置里面选择添加安全组规则，开启3306端口。授权对象选择<code>0.0.0.0/0</code>所有ip可访问，如果添加限制可以点击旁面的小叹号。</h3><h3 id="4-最后：建议重启一下mysqld的服务"><a href="#4-最后：建议重启一下mysqld的服务" class="headerlink" title="4. 最后：建议重启一下mysqld的服务"></a><font color='red'>4. 最后：建议重启一下mysqld的服务</font></h3><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      使用rpm进行mysql安装
    
    </summary>
    
    
      <category term="数据库" scheme="https://lazytime.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://lazytime.site/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>如何使用java代码导出word</title>
    <link href="https://lazytime.site/2020/11/11/word-export/"/>
    <id>https://lazytime.site/2020/11/11/word-export/</id>
    <published>2020-11-11T15:03:01.000Z</published>
    <updated>2020-11-11T15:04:29.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>导出word的需求其实在日常工作中用到的地方还不少，于是想写一篇文章好好记录一下，在导出之前，需要了解一下关于浏览器如何处理servlet的后台数据。具体可以了解一下http通信下载行为在servlet的实现。</p><p>==导出的工具类代码来源于网络，如有侵权可以联系我删除文章==</p><p><strong>个人使用==ftl==作为word导出模板引擎，有很多模板引擎可以选，个人经过查阅资料发现ftl用的比较多，所以选择这一种</strong></p><a id="more"></a><h2 id="码云地址："><a href="#码云地址：" class="headerlink" title="码云地址："></a>码云地址：</h2><p>文章牵扯代码比较多，如果要看具操作可以查看我自己瞎弄的一个码云地址：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ludGVydmlldy5naXQ=" title="https://gitee.com/lazyTimes/interview.git">https://gitee.com/lazyTimes/interview.git<i class="fa fa-external-link"></i></span></p><h2 id="效果演示："><a href="#效果演示：" class="headerlink" title="效果演示："></a>效果演示：</h2><p>给了一个测试页面，临时写了一些脚本，可以作为参考（后续会贴Html代码进去）</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201111220825.png" alt=""></p><p>点击提交,导出内容, 导出<code>word</code>报告</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201111220951.png" alt=""></p><p>导出之后，打开word内容为：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201111222011.png" alt=""></p><h2 id="实现步骤-制作word模板"><a href="#实现步骤-制作word模板" class="headerlink" title="实现步骤 - 制作word模板"></a>实现步骤 - 制作word模板</h2><h3 id="第一步-新建word，制作成果样板"><a href="#第一步-新建word，制作成果样板" class="headerlink" title="第一步 新建word，制作成果样板"></a>第一步 新建word，制作成果样板</h3><p>将需要导出word的内容，先粘贴到一个新建的word文件里面</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201111220620.png" alt=""></p><h3 id="第二步-转存格式-gt-xml"><a href="#第二步-转存格式-gt-xml" class="headerlink" title="第二步 转存格式 -&gt; xml"></a>第二步 转存格式 -&gt; xml</h3><p>选择文件“另存为”，将格式设置为xml格式</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20201106091518.png" alt=""></p><h3 id="第三步-格式化文件"><a href="#第三步-格式化文件" class="headerlink" title="第三步 格式化文件"></a>第三步 格式化文件</h3><p>将文件放到<code>idea</code>或者支持格式化的软件里面，进行格式化，保存:</p><p>注意占位符要匹配</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201111222316.png" alt=""></p><h3 id="第四步：模板数据替换占位符"><a href="#第四步：模板数据替换占位符" class="headerlink" title="第四步：模板数据替换占位符"></a>第四步：模板数据替换占位符</h3><p>在word页面将需要导入数据的地方，替换占位符</p><blockquote><p>需要注意内容处理的时候: ${ filename｝ 有可能被切割为多个部分，我们需要把多个切割部分，改为下面的样式</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201111222554.png" alt=""></p><p><strong>一定记得所有的改动之后，马上打开xml格式的word，确认是不是改崩了</strong></p><p>上面的步骤完成，说明有一个word模板做好了</p><h3 id="第五步：制作ftl文件，word模板成型"><a href="#第五步：制作ftl文件，word模板成型" class="headerlink" title="第五步：制作ftl文件，word模板成型"></a>第五步：制作ftl文件，word模板成型</h3><p>在项目里面新建一个ftl文件，同时需要在工具类中配置，同时把做好站位符操作的xml内容贴进去</p><h2 id="代码实现-导出代码"><a href="#代码实现-导出代码" class="headerlink" title="代码实现 - 导出代码"></a>代码实现 - 导出代码</h2><ol><li>工具类的配置如下:</li></ol><p><code>WordGeneratorUtil.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板常量类配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FreemarkerTemplate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REPORT = <span class="string">"report"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REC_RECOMMEND = <span class="string">"recRecommend"</span>;</span><br><span class="line">    <span class="comment">// 增加你的模板文件名称:</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在静态的代码块里面，需要注入对应的模板配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意初始化要载入对应模板</span></span><br><span class="line">allTemplates.put(FreemarkerTemplate.REPORT, configuration.getTemplate(FreemarkerTemplate.REPORT + <span class="string">".ftl"</span>));</span><br><span class="line">allTemplates.put(FreemarkerTemplate.REC_RECOMMEND,configuration.getTemplate(FreemarkerTemplate.REC_RECOMMEND + <span class="string">".ftl"</span>));</span><br></pre></td></tr></table></figure><ol start="2"><li>在配置完成之后，导出的时候就可以找到对应的文件了</li><li>建立一个通用的导出方法:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建doc 文档</span></span><br><span class="line"><span class="comment">     * dataMap 数据，需要对应模板的占位符，否则会出错</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wordName  word 报表的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> freemarkerTemplateName  指定需要使用哪个freemarker模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">createDoc</span><span class="params">(String freemarkerTemplateName, String wordName, Map&lt;String, String&gt; dataMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(wordName);</span><br><span class="line">        Template t = allTemplates.get(freemarkerTemplateName);</span><br><span class="line">        <span class="comment">// 这个地方不能使用FileWriter因为需要指定编码类型否则生成的Word文档会因为有无法识别的编码而无法打开</span></span><br><span class="line">        Writer w = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(f), StandardCharsets.UTF_8);</span><br><span class="line">        t.process(dataMap, w);</span><br><span class="line">        w.close();</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"生成word文档失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具类完整代码："><a href="#工具类完整代码：" class="headerlink" title="工具类完整代码："></a>工具类完整代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxd.interview.export;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 从网络上根据资料找到的一个工具类</span></span><br><span class="line"><span class="comment"> * 主要以freemarker 为核心的模板生成word文档的工具类</span></span><br><span class="line"><span class="comment"> * 这里默认配置了固定路径</span></span><br><span class="line"><span class="comment"> * 需要根据路径取到对应模板</span></span><br><span class="line"><span class="comment"> * 请求参数需要设置对应的模板名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: WordGeneratorUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文档生成工具类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * version: V1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WordGeneratorUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Template&gt; allTemplates = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEMPLATE_URL = <span class="string">"/templates"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板常量类配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FreemarkerTemplate</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Test = <span class="string">"test"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REPORT = <span class="string">"report"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REC_RECOMMEND = <span class="string">"recRecommend"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        configuration = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_28);</span><br><span class="line">        configuration.setDefaultEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        configuration.setClassForTemplateLoading(WordGeneratorUtil<span class="class">.<span class="keyword">class</span>, <span class="title">TEMPLATE_URL</span>)</span>;</span><br><span class="line">        allTemplates = <span class="keyword">new</span> HashMap(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 注意初始化要载入对应模板</span></span><br><span class="line">            allTemplates.put(FreemarkerTemplate.Test, configuration.getTemplate(FreemarkerTemplate.Test + <span class="string">".ftl"</span>));</span><br><span class="line">            allTemplates.put(FreemarkerTemplate.REPORT, configuration.getTemplate(FreemarkerTemplate.REPORT + <span class="string">".ftl"</span>));</span><br><span class="line">            allTemplates.put(FreemarkerTemplate.REC_RECOMMEND, configuration.getTemplate(FreemarkerTemplate.REC_RECOMMEND + <span class="string">".ftl"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WordGeneratorUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建doc 文档</span></span><br><span class="line"><span class="comment">     * dataMap 数据，需要对应模板的占位符，否则会出错</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wordName  word 报表的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> freemarkerTemplateName  指定需要使用哪个freemarker模板</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">createDoc</span><span class="params">(String freemarkerTemplateName, String wordName, Map&lt;String, String&gt; dataMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File f = <span class="keyword">new</span> File(wordName);</span><br><span class="line">            Template t = allTemplates.get(freemarkerTemplateName);</span><br><span class="line">            <span class="comment">// 这个地方不能使用FileWriter因为需要指定编码类型否则生成的Word文档会因为有无法识别的编码而无法打开</span></span><br><span class="line">            Writer w = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(f), StandardCharsets.UTF_8);</span><br><span class="line">            t.process(dataMap, w);</span><br><span class="line">            w.close();</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"生成word文档失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用层："><a href="#调用层：" class="headerlink" title="调用层："></a>调用层：</h3><ol><li>在业务层，将需要导出的数据，根据占位符的i信息进行赋值，注意不能漏，否则导出之后的文件会打不开</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">exportQualityStep4Word</span><span class="params">(WordReportDTO exportWordRequest)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; datas = <span class="keyword">new</span> HashMap(QualityConstants.HASH_MAP_INIT_VALUE);</span><br><span class="line">    <span class="comment">//主标题</span></span><br><span class="line">    datas.put(<span class="string">"schoolName"</span>, exportWordRequest.getSchoolName());</span><br><span class="line">    datas.put(<span class="string">"title1"</span>, exportWordRequest.getBaseSituation());</span><br><span class="line">    datas.put(<span class="string">"title2"</span>, exportWordRequest.getLearningEnvRec());</span><br><span class="line">    datas.put(<span class="string">"title3"</span>, exportWordRequest.getLearningEnvPro());</span><br><span class="line">    datas.put(<span class="string">"title4"</span>, exportWordRequest.getDayLifeRec());</span><br><span class="line">    datas.put(<span class="string">"title5"</span>, exportWordRequest.getDayLifePro());</span><br><span class="line">    datas.put(<span class="string">"title6"</span>, exportWordRequest.getLearningActivityRec());</span><br><span class="line">    datas.put(<span class="string">"title7"</span>, exportWordRequest.getLearningActivityPro());</span><br><span class="line">    datas.put(<span class="string">"title8"</span>, exportWordRequest.getDevRecommend());</span><br><span class="line"></span><br><span class="line">    datas.put(<span class="string">"base64_1"</span>, exportWordRequest.getBase64_1());</span><br><span class="line">    datas.put(<span class="string">"base64_2"</span>, exportWordRequest.getBase64_2());</span><br><span class="line">    datas.put(<span class="string">"base64_3"</span>, exportWordRequest.getBase64_3());</span><br><span class="line">    datas.put(<span class="string">"base64_4"</span>, exportWordRequest.getBase64_4());</span><br><span class="line">    datas.put(<span class="string">"base64_5"</span>, exportWordRequest.getBase64_5());</span><br><span class="line">    datas.put(<span class="string">"base64_6"</span>, exportWordRequest.getBase64_6());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//导出</span></span><br><span class="line">    <span class="keyword">return</span> WordGeneratorUtil.createDoc(WordGeneratorUtil.FreemarkerTemplate.REPORT,</span><br><span class="line">                                       exportWordRequest.getWordName(),</span><br><span class="line">                                       datas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>下面是生成报表导出的基本操作，可以在用到的地方复制过去改动即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成报告的导出报表操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request           request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response          响应数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exportWordRequest 导出dto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/quality/exportword"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">povertyExportWord</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                              WordReportDTO exportWordRequest)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    File file = qualityReportService.exportQualityStep4Word(exportWordRequest);</span><br><span class="line"></span><br><span class="line">    InputStream fin = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用工具类WordGeneratorUtils的createDoc方法生成Word文档</span></span><br><span class="line">        fin = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">        response.setCharacterEncoding(QualityConstants.UTF_8);</span><br><span class="line">        response.setContentType(QualityConstants.CONTENT_TYPE_WORD);</span><br><span class="line">        <span class="comment">// 设置浏览器以下载的方式处理该文件</span></span><br><span class="line">        <span class="comment">// 设置文件名编码解决文件名乱码问题</span></span><br><span class="line">        <span class="comment">//获得请求头中的User-Agent</span></span><br><span class="line">        String filename = exportWordRequest.getWordName();</span><br><span class="line">        String agent = request.getHeader(QualityConstants.USER_AGENT);</span><br><span class="line">        String filenameEncoder = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// 根据不同的浏览器进行不同的判断</span></span><br><span class="line">        <span class="keyword">if</span> (agent.contains(QualityConstants.MSIE)) &#123;</span><br><span class="line">            <span class="comment">// IE浏览器</span></span><br><span class="line">            filenameEncoder = URLEncoder.encode(filename, QualityConstants.UTF_8);</span><br><span class="line">            filenameEncoder = filenameEncoder.replace(<span class="string">"+"</span>, <span class="string">" "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(QualityConstants.FIREFOX)) &#123;</span><br><span class="line">            <span class="comment">// 火狐浏览器</span></span><br><span class="line">            BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            filenameEncoder = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(filename.getBytes(QualityConstants.UTF_8)) + <span class="string">"?="</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其它浏览器</span></span><br><span class="line">            filenameEncoder = URLEncoder.encode(filename, QualityConstants.UTF_8);</span><br><span class="line">        &#125;</span><br><span class="line">        response.setHeader(QualityConstants.ACCESS_CONTROL_ALLOW_ORIGIN, <span class="string">"*"</span>);<span class="comment">//所有域都可以跨</span></span><br><span class="line">        response.setHeader(QualityConstants.CONTENT_TYPE, QualityConstants.CONTENT_TYPE_STEAM);<span class="comment">//二进制  流文件</span></span><br><span class="line">        response.setHeader(QualityConstants.CONTENT_DISPOSITION, <span class="string">"attachment;filename="</span> + filenameEncoder + <span class="string">".doc"</span>);<span class="comment">//下载及其文件名</span></span><br><span class="line">        response.setHeader(QualityConstants.CONNECTION, QualityConstants.CLOSE);<span class="comment">//关闭请求头连接</span></span><br><span class="line">        <span class="comment">//设置文件在浏览器打开还是下载</span></span><br><span class="line">        response.setContentType(QualityConstants.CONTENT_TYPE_DOWNLOAD);</span><br><span class="line">        out = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[QualityConstants.BYTE_512];</span><br><span class="line">        <span class="keyword">int</span> bytesToRead = QualityConstants.NUM_MINUS_1;</span><br><span class="line">        <span class="comment">// 通过循环将读入的Word文件的内容输出到浏览器中</span></span><br><span class="line">        <span class="keyword">while</span> ((bytesToRead = fin.read(buffer)) != QualityConstants.NUM_MINUS_1) &#123;</span><br><span class="line">            out.write(buffer, QualityConstants.NUM_ZERO, bytesToRead);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(QualityConstants.FARIURE_EXPORT, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fin != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fin.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(QualityConstants.FARIURE_EXPORT, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导出实体dto"><a href="#导出实体dto" class="headerlink" title="导出实体dto"></a>导出实体dto</h3><p>下面写了一个导出的实体dto，实体对象可以自己定制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxd.interview.dto;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试使用的dto，用于封装导出word的对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/7 23:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReportDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String test0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String test1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String test2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String test4;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String test5;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String test6;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 报告名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String wordName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest0</span><span class="params">(String test0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test0 = test0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest1</span><span class="params">(String test1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test1 = test1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest2</span><span class="params">(String test2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test2 = test2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest4</span><span class="params">(String test4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test4 = test4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest5</span><span class="params">(String test5)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test5 = test5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest6</span><span class="params">(String test6)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test6 = test6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWordName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wordName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWordName</span><span class="params">(String wordName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wordName = wordName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"TestReportDTO&#123;"</span> +</span><br><span class="line">                <span class="string">"test0='"</span> + test0 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", test1='"</span> + test1 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", test2='"</span> + test2 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", test4='"</span> + test4 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", test5='"</span> + test5 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", test6='"</span> + test6 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常量配置模块"><a href="#常量配置模块" class="headerlink" title="常量配置模块:"></a>常量配置模块:</h3><p>个人很不喜欢硬编码这东西，又丑又难看，所以很多东西会用不可变对象替代.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxd.interview.constant;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常量配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhouhui</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QualityConstants</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 质量检测 的督导事项id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EVENTID = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_ZERO = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_ONE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_TWO = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_MINUS_1 = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节大小512</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BYTE_512 = <span class="number">512</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CODE_500 = <span class="number">500</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误提示信息 - 状态非法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_500_MSG_1 = <span class="string">"状态非法!"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误提示信息 - 非督导用户不允许查看质量检测记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_500_MSG_2 = <span class="string">"非督导用户不允许查看质量检测记录!"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误提示信息 - 这条质量监测已经完成！无法修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_500_MSG_3 = <span class="string">"这条质量监测已经完成！无法修改！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误提示信息 - 提交失败，材料上传不能为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_500_MSG_4 = <span class="string">"提交失败，材料上传不能为空"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误提示信息 - 提交失败，请稍后重试或联系管理员</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_500_MSG_5 = <span class="string">"提交失败，请稍后重试或联系管理员！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500错误提示信息 - 提交失败，意见反馈不能为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_500_MSG_6 = <span class="string">"提交失败，意见反馈不能为空!"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 405错误编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CODE_405 = <span class="number">405</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 405错误提示信息 - 该信息只允许督导查看</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_405_MSG_1 = <span class="string">"该信息只允许督导查看!"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 200成功编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CODE_200 = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 200成功提示信息 - 该信息只允许督导查看</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CODE_200_MSG_1 = <span class="string">"提交成功!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误提示信息 - 尚未选择记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELETE_FAIRURE_MSG = <span class="string">"删除失败，尚未选择记录！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误提示信息 - 尚未选择记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NO_RECORD_SELECTED = <span class="string">"尚未选择记录！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符编码utf-8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String UTF_8 = <span class="string">"utf-8"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认pid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PID = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认层级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFUALT_LAYER = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不适当最低得分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer MIN_SCORE = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优秀最高得分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer MAX_SCORE = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * map的hash初始值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_MAP_INIT_VALUE = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全园平均分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String WHOLE_AVERAGE = <span class="string">"全园平均分"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUERY_FAIRURE = <span class="string">"查询失败"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SUCCESS_MSG = <span class="string">"操作成功！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FARIURE_MSG = <span class="string">"操作失败！"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FARIURE_EXPORT = <span class="string">"导出失败！"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头 - 文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONTENT_TYPE_WORD = <span class="string">"application/msword"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头 - 下载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONTENT_TYPE_DOWNLOAD = <span class="string">"application/x-download"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头 - 二进制文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONTENT_TYPE_STEAM = <span class="string">"application/octet-stream;charset=UTF-8"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String USER_AGENT = <span class="string">"User-Agent"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONTENT_TYPE = <span class="string">"Content-Type"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECTION = <span class="string">"Connection"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CLOSE = <span class="string">"close"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String ACCESS_CONTROL_ALLOW_ORIGIN = <span class="string">"Access-Control-Allow-Origin"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONTENT_DISPOSITION = <span class="string">"Content-Disposition"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浏览器 - ie</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String MSIE = <span class="string">"MSIE"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浏览器 - Firefox</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FIREFOX = <span class="string">"Firefox"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 填写报告的step</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String MODULE_STEP3_REPORT = <span class="string">"qualityreport"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 督导下园核实的材料</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String MODULE_STEP1_MATERIAL = <span class="string">"qualitymetrail"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_3 = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_4 = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_5 = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_6 = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字7</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_7 = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_8 = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字9</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_9 = <span class="number">9</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_10 = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字11</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_11 = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_12 = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字13</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_13 = <span class="number">13</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字14</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_14 = <span class="number">14</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字15</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_15 = <span class="number">15</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_16 = <span class="number">16</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字17</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_17 = <span class="number">17</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字18</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_18 = <span class="number">18</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字19</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_19 = <span class="number">19</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字20</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_20 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化数字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String DECIMAL_Format = <span class="string">"######.00"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面层处理："><a href="#页面层处理：" class="headerlink" title="页面层处理："></a>页面层处理：</h3><p>前端增加一个form提交，使用form提交表单数据，实现word导出功能:</p><p>(注意使用的模板引擎是thymeleaf)</p><h4 id="html代码"><a href="#html代码" class="headerlink" title="html代码:"></a>html代码:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue1"</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;form @submit.prevent="submit"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                导出word名称：&lt;input class="form-control" type="text" v-model="student.wordName"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--            &lt;div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                test0：&lt;input type="text" class="form-control" v-model="student.test0"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                test1：&lt;input type="text" class="form-control" v-model="student.test1"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                test2：&lt;input type="text" class="form-control" v-model="student.test2"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                test4：&lt;input type="text" class="form-control" v-model="student.test4"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                test5：&lt;input type="text" class="form-control" v-model="student.test5"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                test6：&lt;input type="text" class="form-control" v-model="student.test6"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--            &lt;input type="submit" class="btn btn-danger" value="提交"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/form&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/quality/exportword"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                导出word名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"wordName"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                test0：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"test0"</span>&gt;</span></span><br><span class="line">                test1：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"test1"</span>&gt;</span></span><br><span class="line">                test2：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"test2"</span>&gt;</span></span><br><span class="line">                test4：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"test4"</span>&gt;</span></span><br><span class="line">                test5：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"test5"</span>&gt;</span></span><br><span class="line">                test6：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"test6"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue-resource/1.5.1/vue-resource.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/exportword.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h4><p>使用js代码处理form表单提交，使用了jquery进行导出，其实一直不太懂前端怎么导出后台产生的二进制流，做法挺多，下次写一篇文章好好汇总一下几种用法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#vue1'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        counter: <span class="number">0</span>,</span><br><span class="line">        student: &#123;</span><br><span class="line">            test0:<span class="string">''</span>,</span><br><span class="line">            test1:<span class="string">''</span>,</span><br><span class="line">            test2:<span class="string">''</span>,</span><br><span class="line">            test3:<span class="string">''</span>,</span><br><span class="line">            test4:<span class="string">''</span>,</span><br><span class="line">            test5:<span class="string">''</span>,</span><br><span class="line">            test6:<span class="string">''</span>,</span><br><span class="line">            wordName: <span class="string">''</span>,</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        test: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.counter);</span><br><span class="line">        &#125;,</span><br><span class="line">        submit() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.student);</span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">'/quality/exportword'</span>;</span><br><span class="line">            <span class="keyword">var</span> formData = <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.student); <span class="comment">// this指向这个VUE实例 data默认绑定在实例下的。所以直接this.student就是要提交的数据</span></span><br><span class="line">            <span class="keyword">this</span>.$http.post(url, formData).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">                <span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([data.data],&#123; <span class="attr">type</span>: <span class="string">'application/vnd.openxmlformats-officedocument.wordprocessingml.document;charset=utf-8'</span>&#125;);</span><br><span class="line">                <span class="keyword">let</span> objectUrl = URL.createObjectURL(blob);</span><br><span class="line">                <span class="built_in">window</span>.location.href = objectUrl;</span><br><span class="line">            &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h1><p>个人水平一般，希望通过这篇文章可以帮到读者，有错误的地方欢迎指点，看到会及时改成，谢谢！</p><p>前段时间忙于面试找到新的地方工作了，等工作安定之后，会继续深耕博客和技术栈。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      如何使用java代码导出word
    
    </summary>
    
    
      <category term="笔记" scheme="https://lazytime.site/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="word" scheme="https://lazytime.site/tags/word/"/>
    
  </entry>
  
</feed>
