<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LazyTimes的博客</title>
  
  <subtitle>生死有命，富贵在天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://whitestore.top/"/>
  <updated>2021-02-14T04:21:01.431Z</updated>
  <id>https://whitestore.top/</id>
  
  <author>
    <name>阿东</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>钉钉机器人简单使用</title>
    <link href="https://whitestore.top/2021/02/14/dingding/"/>
    <id>https://whitestore.top/2021/02/14/dingding/</id>
    <published>2021-02-14T03:40:42.000Z</published>
    <updated>2021-02-14T04:21:01.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="钉钉自定义机器人简单使用"><a href="#钉钉自定义机器人简单使用" class="headerlink" title="钉钉自定义机器人简单使用"></a>钉钉自定义机器人简单使用</h1><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>年前公司的需求里面有用到钉钉机器人，使用之后发现真的非常简单，不得不感叹阿里的牛逼，这篇文章总结了一下个人使用钉钉机器人的经验，同时介绍个人据此构建一个工具类来方便后续直接“开箱即用”，希望对于读者有所启发。</p><a id="more"></a><h1 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h1><ol><li>简单的说明一下钉钉自定义机器人使用，注意是自定义机器人</li><li>说明一下个人针对钉钉机器人设计了一个工具类，说明一下设计的思路。（重点）</li><li>汇总一些个人使用钉钉机器人的小坑，同时提供解决办法希望读者参考可以解决问题</li></ol><h1 id="钉钉文档："><a href="#钉钉文档：" class="headerlink" title="钉钉文档："></a>钉钉文档：</h1><p>机器人的使用还是非常简单的，直接参考文档就可以进行构建，如果了解过这一部分可以直接跳到编写工具类的部分进行文章的后续阅读。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmRpbmd0YWxrLmNvbS9kb2N1bWVudC9hcHAvY3VzdG9tLXJvYm90LWFjY2Vzcw==" title="https://developers.dingtalk.com/document/app/custom-robot-access">https://developers.dingtalk.com/document/app/custom-robot-access<i class="fa fa-external-link"></i></span></p><blockquote><p>由于钉钉的官方文档更新较为频繁，这里的连接可能在以后会失效</p></blockquote><h1 id="如何创建一个机器人"><a href="#如何创建一个机器人" class="headerlink" title="如何创建一个机器人"></a>如何创建一个机器人</h1><p>文档里面介绍的比较详细了，我们根据文档的内容进行实战一下即可。这里使用了 <strong>新手体验群</strong> 创建的机器人进行实验。下面的内容包括创建自定义机器人以及测试机器人如何使用。</p><h2 id="创建一个自定义机器人"><a href="#创建一个自定义机器人" class="headerlink" title="创建一个自定义机器人"></a>创建一个自定义机器人</h2><p>随意点击一个机器人，右击菜单，出现“更多机器人”，进入到界面</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213173000.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>点击“更多机器人”</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213173037.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>选择钉钉的自定义机器人进行使用：</p><blockquote><p>这里还有很多其他的机器人，如果感兴趣可以查看钉钉的文档进行更多的了解</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213173121.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>在下面的界面选择添加：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213173313.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>到达下一个界面，根据指示需要填写如下的内容：</p><ul><li>机器人的名称：自己取一个合适的名字，自己喜欢就行</li><li>添加到群组：<strong>关键</strong>的一步，意味着你的机器人要添加到哪一个具体的群组里面进行使用。也意味着只有在这个群组里面的人才可以收到对应的通知。</li></ul><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213173703.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>下面说明一下安全设置的内容：</p><ul><li>自定义关键词：<strong>关键配置</strong>，这里自定义关键词可以按照自己的喜好进行设置。但是一旦设置在发送请求的时候<strong>必须要携带关键词</strong>，请求才会生效，否则会返回对应的错误码<code>31000</code>和对应的错误信息。</li><li>加签：<strong>建议勾上</strong>，这里加签可以在请求中更好的保护接口，同时注意一下加上签名之后要复制一下内容</li><li><strong>IP地址（段）</strong>：这里个人没有进行过测试，所以没有进行勾选，正式的生产环境建议使用IP限制，保证万无一失</li></ul><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213175804.png?ynotemdtimestamp=1613223296738" alt="img"></p><blockquote><p>这里建议保存一下前面和关键字，当然忘记了也可以在构建完成之后从设置里面查看：</p><p>签名：<code>SECf075e3890b7d79ca645e51b42644fc57c2402577d5a955bce51cb980cec0a3b6</code></p><p>关键词：<code>新人</code></p></blockquote><p>至此，我们成功创建了一个钉钉的自定义机器人，整个过程十分简单，这里记得保存一下对应的信息：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213180638.png?ynotemdtimestamp=1613223296738" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050</span><br></pre></td></tr></table></figure><p>上面为个人的配置。发文的时候此机器人<strong>已经删除</strong>，所以读者自己实验即可。</p><h2 id="测试机器人是否可以正常使用"><a href="#测试机器人是否可以正常使用" class="headerlink" title="测试机器人是否可以正常使用"></a>测试机器人是否可以正常使用</h2><p>通过上面的步骤，我们已经构建了一个基本的机器人为我们使用，再进行下一步之前，我们需要验证一下钉钉机器人是否可以正常使用。这里针对不同的平台说下比较简单快捷的验证方法。</p><h3 id="windows-验证方式："><a href="#windows-验证方式：" class="headerlink" title="windows 验证方式："></a>windows 验证方式：</h3><p>windows 推荐使用<code>git</code>的一个<code>shell</code>命令框进行测试，因为windows 本身是没有<code>curl</code>这个命令的，当然也有其他的办法，但是为了图省事直接使用<code>git</code>给我们开发的一个小工具即可。</p><p>如下图所示，我们选择<code>Git Bash Here</code>，打开命令行的界面</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213173435.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>我们根据上一步的机器人配置，构建一个<code>CURL</code>请求进行测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl &#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&amp;timestamp&#x3D;1613211530113&amp;secret&#x3D;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&#39; \</span><br><span class="line">   -H &#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">   -d &#39;&#123;&quot;msgtype&quot;: &quot;text&quot;,&quot;text&quot;: &#123;&quot;content&quot;: &quot;新人内容测试&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213180959.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>不出所料，这里按照官方文档给的方式<strong>验证失败</strong>了，这是为什么呢？原因有几个：</p><ul><li>加签密文：我们设置了加签，所以在请求参数里面要加入对应的<strong>签名密文</strong>，也就是在添加这一步勾选了<strong>签名</strong>这一步。</li><li>时间戳：请求需要传递<strong>时间戳</strong>，但是我们没有在请求参数里面附带时间戳，同时时间戳必须在<strong>系统时间的一小时之内</strong>，超过这个时间即使请求参数正确也无法通过</li></ul><blockquote><p>timestamp = 1613212103494 sign = MO79EJ58O9lmuQJo1dB1KGMhkZI%2BM5KkyD0NYuNe8%2B8%3D</p></blockquote><p>我们根据上面的说明修复一下，注意在URL增加了两个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl &#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&amp;timestamp&#x3D;1613212722591&amp;sign&#x3D;SsKKlkvwM%2F4tsCPE6YoGls8vgkQqWJGHYpvWbW7hTGM%3D&#39; \</span><br><span class="line">   -H &#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">   -d &#39;&#123;&quot;msgtype&quot;: &quot;text&quot;,&quot;text&quot;: &#123;&quot;content&quot;: &quot;新人为什么你这么牛逼&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><blockquote><p>关于这一部分内容，已经汇总到“问题汇总”这一部分，如果还是感到迷惑可以参考。</p></blockquote><p>我们再次验证一下，发现<strong>依然失败</strong>，比较奇怪，个人设置的关键字在请求content里面却失败了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zhaoxudong@LAPTOP-MEUFMP1M MINGW64 &#x2F;d&#x2F;Users&#x2F;zhaoxudong&#x2F;Desktop</span><br><span class="line">$ curl &#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&amp;timestamp&#x3D;1613212722591&amp;sign&#x3D;SsKKlkvwM%2F4tsCPE6YoGls8vgkQqWJGHYpvWbW7hTGM%3D&#39; \</span><br><span class="line">&gt;    -H &#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">&gt;    -d &#39;&#123;&quot;msgtype&quot;: &quot;text&quot;,&quot;text&quot;: &#123;&quot;content&quot;: &quot;新人为什么你这么牛逼&quot;&#125;&#125;&#39;</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   178  100   115  100    63    991    543 --:--:-- --:--:-- --:--:--  1534</span><br><span class="line">&#123;&quot;errcode&quot;:310000,&quot;errmsg&quot;:&quot;keywords not in content, more: [https:&#x2F;&#x2F;ding-doc.dingtalk.com&#x2F;doc#&#x2F;serverapi2&#x2F;qf2nxq]&quot;&#125;</span><br></pre></td></tr></table></figure><p>排查问题之后发现由于windows系统默认使用了<code>gb2312</code>的编码，所以我们此时需要切换一下系统的编码，为了证明是系统编码的问题，我们先验证一下编码：</p><p>打开window的<code>cmd</code>窗口，我们输入<code>chcp</code>命令进入到具体的页面，可以看到下面936，百度一下发现就是<code>GB2312</code>，在请求发送的过程中被转码导致乱码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\zhaoxudong&gt;chcp</span><br><span class="line">活动代码页: 936</span><br></pre></td></tr></table></figure><p>解决办法也比较简单，改一下整改系统的编码即可，关于设置的方法：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JvYmluaHVuYW4vYXJ0aWNsZS9kZXRhaWxzLzEwNjA0NzM0NQ==" title="https://blog.csdn.net/robinhunan/article/details/106047345">https://blog.csdn.net/robinhunan/article/details/106047345<i class="fa fa-external-link"></i></span></p><blockquote><p>插曲：个人在设置过后，因为编码的问题导致编辑器无法编译，经过核实发现是由于<strong>文件夹的编码乱码</strong>找不到类的问题，所以这里建议放置Java项目的时候放置到<strong>全英文</strong>的目录。所以更推荐linux的方式，可以省去很多麻烦</p></blockquote><h3 id="linux-验证方式："><a href="#linux-验证方式：" class="headerlink" title="linux 验证方式："></a>linux 验证方式：</h3><p>linux 验证比较简单，而且出问题的概率比较小，根据window内容得知最后需要<strong>三个</strong>参数才能请求成功，这里直接给出一个相似的CURL请求作为案例说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl &#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&amp;timestamp&#x3D;1613212722591&amp;sign&#x3D;SsKKlkvwM%2F4tsCPE6YoGls8vgkQqWJGHYpvWbW7hTGM%3D&#39; \</span><br><span class="line">   -H &#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">   -d &#39;&#123;&quot;msgtype&quot;: &quot;text&quot;,&quot;text&quot;: &#123;&quot;content&quot;: &quot;新人为什么你这么牛逼&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><p>我们把这个请求放到<code>linux</code>命令行里面进行运行，如果errorcode返回0，说明请求成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;errcode&quot;:0,&quot;errmsg&quot;:&quot;ok&quot;&#125;</span><br></pre></td></tr></table></figure><p>请求成功之后，我们可以看到对应的结果：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213185434.png?ynotemdtimestamp=1613223296738" alt="img"></p><blockquote><p>注意一下钉钉机器人不能请求过于频繁。建议限制一下每分钟的请求QPS</p></blockquote><h1 id="编写工具类"><a href="#编写工具类" class="headerlink" title="编写工具类"></a>编写工具类</h1><p>从上一节可以看到，整个钉钉机器人的构建还是十分简单的。但是使用起来不是特别的方便，个人之前有使用钉钉做过一个预警的小需求，为了后续可以直接开箱即用，自己构建了工具类，下面的部分主要说个人的工具类的设计以及个人的构建思路</p><blockquote><p>个人水平有限，工具类还有很大的改进空间，但是对于我来说暂时没有遇到使用的瓶颈。</p></blockquote><h2 id="工具类的代码地址"><a href="#工具类的代码地址" class="headerlink" title="工具类的代码地址"></a>工具类的代码地址</h2><p>这里个人的小工具类整合到了个人小项目里面，想要参考的可以直接进行下载，下面的文章代码也是来源于这个项目里面。</p><blockquote><p><strong>具体请查看：<code>com.zxd.interview.dingrobot</code>这个包</strong></p></blockquote><p>具体的代码地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ludGVydmlldy90cmVlL21hc3Rlci9zcmMvbWFpbi9qYXZhL2NvbS96eGQvaW50ZXJ2aWV3L2Rpbmdyb2JvdA==" title="https://gitee.com/lazyTimes/interview/tree/master/src/main/java/com/zxd/interview/dingrobot">https://gitee.com/lazyTimes/interview/tree/master/src/main/java/com/zxd/interview/dingrobot<i class="fa fa-external-link"></i></span></p><h2 id="构建工具类的思路"><a href="#构建工具类的思路" class="headerlink" title="构建工具类的思路"></a>构建工具类的思路</h2><p>把整个请求的流程需要的组件分为了以下的几个部分：</p><p><strong>构建基本的请求环境</strong>：也就是需要的请求地址，请求签名或者关键字等参数，这些参数都是必须的，否则请求无法正常运行，所以我们提出来作为<strong>环境</strong>使用。</p><p><strong>构建请求参数</strong>：由于钉钉支持非常多的<code>msgtype</code>也就是文本类型，个人参考了一下SDK，对应构建了一个请求的参数类，为了方便扩展，设计了一个接口进行后续的扩展和兼容。</p><p><strong>使用JAVA代码发送请求</strong>：本着最小依赖的原则，使用最常见的<code>HttpClient</code>进行模拟JAVA的请求发送。但是在这个基础上做了一点点的封装，方便后续扩展</p><ol><li>HttpClient的封装，将请求所需要的一些请求参数封装到一个配置对象进行管理</li><li>请求方法的封装，这里用了一个对象进行封装，也可以直接使用Spring封装的<code>org.springframework.web.bind.annotation.RequestMethod</code>或者直接使用枚举构建常量即可。</li><li>构建钉钉请求工具类：最后我们整合上面所有步骤构建一个核心请求工具类，通过环境参数构建请求URL和一些Header设置，以及构建不同的请求方法发送请求，调用HttpClient工具类进行请求发送，以及发送之后转化为结果对象等一系列操作均由该工具类完成，是本次工具类最核心的类。</li><li>构建钉钉的请求Msg：该对象包含了请求所支持的所有JSON参数格式对应的实体对象，根据参数格式构建对应的对象，个人利用<strong>内部类</strong>全部封装到一个对象里面，方便客户端理解调用。</li></ol><p><strong>返回请求结果</strong>：包含了错误码，错误信息，以及其他的参数等，也可以修改为直接返回字符串，由客户端决定如何处理</p><p><strong>请求之后返回结果</strong>：将上面的错误码或者错误信息等封装为一个简单对象进行返回，同样如果不喜欢也可以改为返回字符串的结果。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>在介绍正式的结果之前，我们看下结果，下面是效果截图，包含了钉钉文档里面的所有类型，包含了目前钉钉文档支持的几种主要的类型：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213230526.png?ynotemdtimestamp=1613223296738" alt="测试结果1"></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213230806.png?ynotemdtimestamp=1613223296738" alt="测试截图2"></p><p>下面为单元测试的代码，整个单元测试测试各种不同请求类型，调用工具包发送请求：</p><blockquote><p>注意下面的请求text里面包含了之前请求示例里面设置的关键字，没有关键字是无法请求成功的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import org.apache.commons.codec.binary.Base64;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line">import javax.crypto.Mac;</span><br><span class="line">import javax.crypto.spec.SecretKeySpec;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version v1.0.0</span><br><span class="line"> * @Package : com.zxd.interview.dingrobot</span><br><span class="line"> * @Description : 钉钉机器人测试类</span><br><span class="line"> * @Create on : 2021&#x2F;2&#x2F;7 11:06</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class DingRobotUtilsTest &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">   运行下面五个单元测试的结果</span><br><span class="line">    *&#x2F; </span><br><span class="line">    @Test</span><br><span class="line">    public void testAll() &#123;</span><br><span class="line">        testText();</span><br><span class="line">        testLink();</span><br><span class="line">        testMarkdown();</span><br><span class="line">        testActionCard();</span><br><span class="line">        testFeedCard();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构建当前的系统时间戳</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void generateSystemCurrentTime() throws Exception &#123;</span><br><span class="line">        long currentTimeMillis &#x3D; System.currentTimeMillis();</span><br><span class="line">        String secret &#x3D; &quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;;</span><br><span class="line">        String sign &#x3D; generateSign(currentTimeMillis, secret);</span><br><span class="line">        System.out.println(&quot;timestamp &#x3D; &quot; + currentTimeMillis);</span><br><span class="line">        System.out.println(&quot;sign &#x3D; &quot; + sign);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 测试link类型的请求</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void testLink() &#123;</span><br><span class="line">        DingRobotRequest.Builder builder &#x3D; new DingRobotRequest.Builder();</span><br><span class="line">        DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">                .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">                .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">                .msg(generateLink()).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            DingRobotResponseMsg dingRobotResponseMsg &#x3D; DingRobotUtils.notifyRobot(build);</span><br><span class="line">            System.err.println(JSON.toJSONString(dingRobotResponseMsg));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 测试text类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void testText() &#123;</span><br><span class="line">        DingRobotRequest.Builder builder &#x3D; new DingRobotRequest.Builder();</span><br><span class="line">        DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">                .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">                .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">                .msg(generateText()).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            DingRobotResponseMsg dingRobotResponseMsg &#x3D; DingRobotUtils.notifyRobot(build);</span><br><span class="line">            System.err.println(JSON.toJSONString(dingRobotResponseMsg));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**测试markdown 类型 *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void testMarkdown() &#123;</span><br><span class="line">        DingRobotRequest.Builder builder &#x3D; new DingRobotRequest.Builder();</span><br><span class="line">        DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">                .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">                .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">                .msg(generateMarkdown()).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            DingRobotResponseMsg dingRobotResponseMsg &#x3D; DingRobotUtils.notifyRobot(build);</span><br><span class="line">            System.err.println(JSON.toJSONString(dingRobotResponseMsg));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     &#x2F;**测试ActionCard 类型 *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void testActionCard() &#123;</span><br><span class="line">        DingRobotRequest.Builder builder &#x3D; new DingRobotRequest.Builder();</span><br><span class="line">        DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">                .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">                .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">                .msg(generateActionCard()).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            DingRobotResponseMsg dingRobotResponseMsg &#x3D; DingRobotUtils.notifyRobot(build);</span><br><span class="line">            System.err.println(JSON.toJSONString(dingRobotResponseMsg));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**测试FeedCard 类型 *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void testFeedCard() &#123;</span><br><span class="line">        DingRobotRequest.Builder builder &#x3D; new DingRobotRequest.Builder();</span><br><span class="line">        DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">                .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">                .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">                .msg(generateFeed()).build();</span><br><span class="line">        try &#123;</span><br><span class="line">            DingRobotResponseMsg dingRobotResponseMsg &#x3D; DingRobotUtils.notifyRobot(build);</span><br><span class="line">            System.err.println(JSON.toJSONString(dingRobotResponseMsg));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequestBody generateFeed() &#123;</span><br><span class="line">        List&lt;DingRobotRequestBody.FeedCard.FeedItem&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        DingRobotRequestBody dingRobotRequestBody &#x3D; new DingRobotRequestBody();</span><br><span class="line">        DingRobotRequestBody.FeedCard feedCard &#x3D; new DingRobotRequestBody.FeedCard();</span><br><span class="line">        DingRobotRequestBody.FeedCard.FeedItem feedItem &#x3D; new DingRobotRequestBody.FeedCard.FeedItem();</span><br><span class="line">        feedItem.setMessageURL(&quot;https:&#x2F;&#x2F;www.dingtalk.com&#x2F;&quot;);</span><br><span class="line">        feedItem.setTitle(&quot;新人时代的火车向前开&quot;);</span><br><span class="line">        feedItem.setPicURL(&quot;https:&#x2F;&#x2F;img.alicdn.com&#x2F;tfs&#x2F;TB1NwmBEL9TBuNjy1zbXXXpepXa-2400-1218.png&quot;);</span><br><span class="line">        list.add(feedItem);</span><br><span class="line">        feedCard.setLinks(list);</span><br><span class="line">        dingRobotRequestBody.setFeedCard(feedCard);</span><br><span class="line">        dingRobotRequestBody.setMsgType(&quot;feedCard&quot;);</span><br><span class="line">        return dingRobotRequestBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequestBody generateActionCard() &#123;</span><br><span class="line">        DingRobotRequestBody dingRobotRequestBody &#x3D; new DingRobotRequestBody();</span><br><span class="line">        DingRobotRequestBody.ActionCard actionCard &#x3D; new DingRobotRequestBody.ActionCard();</span><br><span class="line">        actionCard.setBtnOrientation(&quot;0&quot;);</span><br><span class="line">        actionCard.setSingleTitle(&quot;阅读全文&quot;);</span><br><span class="line">        actionCard.setSingleURL(&quot;https:&#x2F;&#x2F;www.dingtalk.com&#x2F;&quot;);</span><br><span class="line">        actionCard.setText(&quot;新人![screenshot](https:&#x2F;&#x2F;gw.alicdn.com&#x2F;tfs&#x2F;TB1ut3xxbsrBKNjSZFpXXcXhFXa-846-786.png) \n&quot; +</span><br><span class="line">                &quot; ### 乔布斯 20 年前想打造的苹果咖啡厅 \n&quot; +</span><br><span class="line">                &quot; Apple Store 的设计正从原来满满的科技感走向生活化，而其生活化的走向其实可以追溯到 20 年前苹果一个建立咖啡馆的计划&quot;);</span><br><span class="line">        actionCard.setTitle(&quot;乔布斯 20 年前想打造一间苹果咖啡厅，而它正是 Apple Store 的前身&quot;);</span><br><span class="line">        dingRobotRequestBody.setMsgType(&quot;actionCard&quot;);</span><br><span class="line">        dingRobotRequestBody.setActionCard(actionCard);</span><br><span class="line">        return dingRobotRequestBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequestBody generateMarkdown() &#123;</span><br><span class="line">        DingRobotRequestBody dingRobotRequestBody &#x3D; new DingRobotRequestBody();</span><br><span class="line">        DingRobotRequestBody.MarkDown markDown &#x3D; new DingRobotRequestBody.MarkDown();</span><br><span class="line">        dingRobotRequestBody.setMsgType(&quot;markdown&quot;);</span><br><span class="line">        markDown.setTitle(&quot;杭州天气&quot;);</span><br><span class="line">        markDown.setText(&quot;新人测试 标题\n&quot; +</span><br><span class="line">                &quot;# 一级标题\n&quot; +</span><br><span class="line">                &quot;## 二级标题\n&quot; +</span><br><span class="line">                &quot;### 三级标题\n&quot; +</span><br><span class="line">                &quot;#### 四级标题\n&quot; +</span><br><span class="line">                &quot;##### 五级标题\n&quot; +</span><br><span class="line">                &quot;###### 六级标题\n&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;引用\n&quot; +</span><br><span class="line">                &quot;&gt; A man who stands for nothing will fall for anything.\n&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;文字加粗、斜体\n&quot; +</span><br><span class="line">                &quot;**bold**\n&quot; +</span><br><span class="line">                &quot;*italic*\n&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;链接\n&quot; +</span><br><span class="line">                &quot;[this is a link](http:&#x2F;&#x2F;name.com)\n&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;图片\n&quot; +</span><br><span class="line">                &quot;![](http:&#x2F;&#x2F;name.com&#x2F;pic.jpg)\n&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;无序列表\n&quot; +</span><br><span class="line">                &quot;- item1\n&quot; +</span><br><span class="line">                &quot;- item2\n&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;有序列表\n&quot; +</span><br><span class="line">                &quot;1. item1\n&quot; +</span><br><span class="line">                &quot;2. item2&quot;);</span><br><span class="line">        dingRobotRequestBody.setMarkDown(markDown);</span><br><span class="line">        return dingRobotRequestBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequestBody generateText() &#123;</span><br><span class="line">        DingRobotRequestBody dingRobotRequestBody &#x3D; new DingRobotRequestBody();</span><br><span class="line">        DingRobotRequestBody.Text text &#x3D; new DingRobotRequestBody.Text();</span><br><span class="line">        text.setContent(&quot;新人为什么这么牛逼&quot;);</span><br><span class="line">        DingRobotRequestBody.At at &#x3D; getnerateAt();</span><br><span class="line">        dingRobotRequestBody.setMsgType(&quot;text&quot;);</span><br><span class="line">        dingRobotRequestBody.setAt(at);</span><br><span class="line">        dingRobotRequestBody.setText(text);</span><br><span class="line">        return dingRobotRequestBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequestBody generateLink() &#123;</span><br><span class="line">        DingRobotRequestBody dingRobotRequestBody &#x3D; new DingRobotRequestBody();</span><br><span class="line">        DingRobotRequestBody.Link link &#x3D; new DingRobotRequestBody.Link();</span><br><span class="line">        link.setMessageUrl(&quot;https:&#x2F;&#x2F;www.dingtalk.com&#x2F;s?__biz&#x3D;MzA4NjMwMTA2Ng&#x3D;&#x3D;&amp;mid&#x3D;2650316842&amp;idx&#x3D;1&amp;sn&#x3D;60da3ea2b29f1dcc43a7c8e4a7c97a16&amp;scene&#x3D;2&amp;srcid&#x3D;09189AnRJEdIiWVaKltFzNTw&amp;from&#x3D;timeline&amp;isappinstalled&#x3D;0&amp;key&#x3D;&amp;ascene&#x3D;2&amp;uin&#x3D;&amp;devicetype&#x3D;android-23&amp;version&#x3D;26031933&amp;nettype&#x3D;WIFI&quot;);</span><br><span class="line">        link.setPicUrl(&quot;&quot;);</span><br><span class="line">        link.setTitle(&quot;时代的火车向前开&quot;);</span><br><span class="line">        link.setText(&quot;新人：这个即将发布的新版本,创始人xx称它为红树林。而在此之前,每当面临重大升级,产品经理们都会取一个应景的代号,这一次,为什么是红树林&quot;);</span><br><span class="line">        DingRobotRequestBody.At at &#x3D; getnerateAt();</span><br><span class="line">        dingRobotRequestBody.setMsgType(&quot;link&quot;);</span><br><span class="line">        dingRobotRequestBody.setAt(at);</span><br><span class="line">        dingRobotRequestBody.setLink(link);</span><br><span class="line">        return dingRobotRequestBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构建at请求</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private DingRobotRequestBody.At getnerateAt() &#123;</span><br><span class="line">        DingRobotRequestBody.At at &#x3D; new DingRobotRequestBody.At();</span><br><span class="line">        at.setAtAll(true);</span><br><span class="line">        at.setAtMobiles(Arrays.asList(&quot;xxxxx&quot;, &quot;123456789&quot;));</span><br><span class="line">        return at;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构建签名方法</span><br><span class="line">     *</span><br><span class="line">     * @param timestamp 时间戳</span><br><span class="line">     * @param secret    秘钥</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String generateSign(Long timestamp, String secret) throws Exception &#123;</span><br><span class="line">        String stringToSign &#x3D; timestamp + &quot;\n&quot; + secret;</span><br><span class="line">        Mac mac &#x3D; Mac.getInstance(&quot;HmacSHA256&quot;);</span><br><span class="line">        mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), &quot;HmacSHA256&quot;));</span><br><span class="line">        byte[] signData &#x3D; mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        return URLEncoder.encode(new String(Base64.encodeBase64(signData)), &quot;UTF-8&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建工具类："><a href="#构建工具类：" class="headerlink" title="构建工具类："></a>构建工具类：</h2><p>下面就上面的单元测试，说明一下个人的基本设计。我们根据思路构建一个支持拿来即用的钉钉工具类。</p><h3 id="类结构介绍："><a href="#类结构介绍：" class="headerlink" title="类结构介绍："></a>类结构介绍：</h3><h4 id="Maven依赖："><a href="#Maven依赖：" class="headerlink" title="Maven依赖："></a>Maven依赖：</h4><p>在进行具体的代码编写之前，需要引入对应的依赖，个人秉持最小依赖的原则，使用的三方jar包仅仅为一些测试工具包和Httpclient请求工具包还有最熟悉的fastjson的工具包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.httpcomponents&#x2F;httpclient --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.httpcomponents&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;httpclient&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.5.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.alibaba&#x2F;fastjson --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.75&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;junit&#x2F;junit --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="类结构"><a href="#类结构" class="headerlink" title="类结构:"></a>类结构:</h4><p>类结构包含了之前设计思路里面说明的情况，包含请求类，工具类，参数封装和请求对象结构封装等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ DingRobotRequest.java钉钉请求对象</span><br><span class="line">+ DingRobotRequestAble.java请求接口，允许发送钉钉请求的接口</span><br><span class="line">+ DingRobotRequestBody.java 允许发送钉钉请求的接口具体的实现类，比较重要，对接文档的钉钉对象</span><br><span class="line">+ DingRobotRequestMsg.java废弃对象，但是依然保留s</span><br><span class="line">+ DingRobotResponseMsg.java请求返回对象</span><br><span class="line">+ DingRobotUtils.java钉钉请求工具类，非常重要的一个类</span><br><span class="line">+ HttpClientUtil.javahttpclient请求工具类</span><br><span class="line">+ HttpConfig.java请求参数构建类</span><br><span class="line">+ HttpMethods.java请求方法类</span><br></pre></td></tr></table></figure><h3 id="构建基本的请求环境"><a href="#构建基本的请求环境" class="headerlink" title="构建基本的请求环境"></a>构建基本的请求环境</h3><p>构建基本的请求环境，我们使用对象来封装所有的环境参数，并且使用建造模式构建一个建造器，使用建造来构建我们需要的环境参数，它的使用方式如下：</p><ul><li>构建请求URL</li><li>构建请求accessToken</li><li>构建请求msg，<strong>重点</strong>，可以通过构建对应的请求来实现发送不同的信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">                .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">                .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">                .msg(generateActionCard()).build();</span><br></pre></td></tr></table></figure><p>具体的源代码如下，包含了几个简单的必要参数，以及一个建造器，注意对于构造器的私有化，对外只允许使用构建器进行初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version v1.0.0</span><br><span class="line"> * @Package : com.dcc.common.field</span><br><span class="line"> * @Description : 钉钉机器人请求实体类</span><br><span class="line"> * @Create on : 2021&#x2F;2&#x2F;5 15:40</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class DingRobotRequest &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求URL</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String url;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * token</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String accessToken;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 秘钥</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String secret;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求msg</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private DingRobotRequestBody msg;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequest()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private DingRobotRequest(Builder builder) &#123;</span><br><span class="line">        this.url &#x3D; builder.url;</span><br><span class="line">        this.accessToken &#x3D; builder.accessToken;</span><br><span class="line">        this.secret &#x3D; builder.secret;</span><br><span class="line">        this.msg &#x3D; builder.msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Builder &#123;</span><br><span class="line"></span><br><span class="line">        private String url;</span><br><span class="line">        private String accessToken;</span><br><span class="line">        private String secret;</span><br><span class="line">        private DingRobotRequestBody msg;</span><br><span class="line"></span><br><span class="line">        public DingRobotRequest.Builder url(String url)&#123;</span><br><span class="line">            this.url &#x3D; url;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public DingRobotRequest.Builder accessToken(String accessToken)&#123;</span><br><span class="line">            this.accessToken &#x3D; accessToken;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public DingRobotRequest.Builder secret(String secret)&#123;</span><br><span class="line">            this.secret &#x3D; secret;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public DingRobotRequest.Builder msg(DingRobotRequestBody msg)&#123;</span><br><span class="line">            this.msg &#x3D; msg;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public DingRobotRequest build()&#123;</span><br><span class="line">            return new DingRobotRequest(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUrl() &#123;</span><br><span class="line">        return url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUrl(String url) &#123;</span><br><span class="line">        this.url &#x3D; url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAccessToken() &#123;</span><br><span class="line">        return accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAccessToken(String accessToken) &#123;</span><br><span class="line">        this.accessToken &#x3D; accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSecret() &#123;</span><br><span class="line">        return secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSecret(String secret) &#123;</span><br><span class="line">        this.secret &#x3D; secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DingRobotRequestBody getMsg() &#123;</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMsg(DingRobotRequestBody msg) &#123;</span><br><span class="line">        this.msg &#x3D; msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;DingRobotRequest&#123;&quot; +</span><br><span class="line">                &quot;url&#x3D;&#39;&quot; + url + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, accessToken&#x3D;&#39;&quot; + accessToken + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, secret&#x3D;&#39;&quot; + secret + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, msg&#x3D;&#39;&quot; + msg + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建请求参数"><a href="#构建请求参数" class="headerlink" title="构建请求参数"></a>构建请求参数</h3><p>下面是请求参数的构建案例，我们可以使用链式调用的方式构建不同的request请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    * 钉钉机器人的默认配置</span><br><span class="line">    *</span><br><span class="line">    * @param dingRobotRequest    钉钉机器人请求对象</span><br><span class="line">    * @param dingRobotRequestMsg 钉钉机器人请求实体</span><br><span class="line">    * @return</span><br><span class="line">    *&#x2F;</span><br><span class="line">   private static HttpConfig buildDefaultHttpConfig(DingRobotRequest dingRobotRequest, DingRobotRequestAble dingRobotRequestMsg) &#123;</span><br><span class="line">       return HttpConfig.custom().headers(defaultBasicHeader())</span><br><span class="line">               .url(dingRobotRequest.getUrl())</span><br><span class="line">               .encoding(&quot;UTF-8&quot;)</span><br><span class="line">               .method(HttpMethods.POST)</span><br><span class="line">               .json(JSON.toJSONString(dingRobotRequestMsg));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>从上面的案例可以看到下面对于请求配置类，构建<code>HttpConfig</code>请求，同样类似构建器进行对象的参数构建，我们定义了基本的请求<code>encoding</code>、请求<code>header</code>，请求方法参数，请求的context等对应的参数配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 请求配置类</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class HttpConfig &#123;</span><br><span class="line"></span><br><span class="line">    private HttpConfig() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 传入参数特定类型</span><br><span class="line">    public static final String ENTITY_STRING &#x3D; &quot;$ENTITY_STRING$&quot;;</span><br><span class="line">    public static final String ENTITY_MULTIPART &#x3D; &quot;$ENTITY_MULTIPART$&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取实例</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static HttpConfig custom() &#123;</span><br><span class="line">        return new HttpConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * HttpClient对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private HttpClient client;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Header头信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Header[] headers;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 是否返回response的headers</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private boolean isReturnRespHeaders;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private HttpMethods method &#x3D; HttpMethods.GET;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求方法名称</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String methodName;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 用于cookie操作</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private HttpContext context;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 传递参数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Map&lt;String, Object&gt; map;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 以json格式作为输入参数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String json;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输入输出编码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String encoding &#x3D; Charset.defaultCharset().displayName();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输入编码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String inenc;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输出编码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String outenc;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解决多线程下载时，strean被close的问题</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static final ThreadLocal&lt;OutputStream&gt; outs &#x3D; new ThreadLocal&lt;OutputStream&gt;();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解决多线程处理时，url被覆盖问题</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static final ThreadLocal&lt;String&gt; urls &#x3D; new ThreadLocal&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * HttpClient对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig client(HttpClient client) &#123;</span><br><span class="line">        this.client &#x3D; client;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 资源url</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig url(String url) &#123;</span><br><span class="line">        urls.set(url);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Header头信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig headers(Header[] headers) &#123;</span><br><span class="line">        this.headers &#x3D; headers;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Header头信息(是否返回response中的headers)</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig headers(Header[] headers, boolean isReturnRespHeaders) &#123;</span><br><span class="line">        this.headers &#x3D; headers;</span><br><span class="line">        this.isReturnRespHeaders &#x3D; isReturnRespHeaders;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig method(HttpMethods method) &#123;</span><br><span class="line">        this.method &#x3D; method;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 请求方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig methodName(String methodName) &#123;</span><br><span class="line">        this.methodName &#x3D; methodName;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * cookie操作相关</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig context(HttpContext context) &#123;</span><br><span class="line">        this.context &#x3D; context;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 传递参数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig map(Map&lt;String, Object&gt; map) &#123;</span><br><span class="line">        synchronized (getClass()) &#123;</span><br><span class="line">            if (this.map &#x3D;&#x3D; null || map &#x3D;&#x3D; null) &#123;</span><br><span class="line">                this.map &#x3D; map;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.map.putAll(map);</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 以json格式字符串作为参数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig json(String json) &#123;</span><br><span class="line">        this.json &#x3D; json;</span><br><span class="line">        map &#x3D; new HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(ENTITY_STRING, json);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 上传文件时用到</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig files(String[] filePaths) &#123;</span><br><span class="line">        return files(filePaths, &quot;file&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 上传文件时用到</span><br><span class="line">     *</span><br><span class="line">     * @param filePaths 待上传文件所在路径</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig files(String[] filePaths, String inputName) &#123;</span><br><span class="line">        return files(filePaths, inputName, false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 上传文件时用到</span><br><span class="line">     *</span><br><span class="line">     * @param filePaths                     待上传文件所在路径</span><br><span class="line">     * @param inputName                     即file input 标签的name值，默认为file</span><br><span class="line">     * @param forceRemoveContentTypeChraset</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig files(String[] filePaths, String inputName, boolean forceRemoveContentTypeChraset) &#123;</span><br><span class="line">        synchronized (getClass()) &#123;</span><br><span class="line">            if (this.map &#x3D;&#x3D; null) &#123;</span><br><span class="line">                this.map &#x3D; new HashMap&lt;String, Object&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(ENTITY_MULTIPART, filePaths);</span><br><span class="line">        map.put(ENTITY_MULTIPART + &quot;.name&quot;, inputName);</span><br><span class="line">        map.put(ENTITY_MULTIPART + &quot;.rmCharset&quot;, forceRemoveContentTypeChraset);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输入输出编码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig encoding(String encoding) &#123;</span><br><span class="line">        &#x2F;&#x2F;设置输入输出</span><br><span class="line">        inenc(encoding);</span><br><span class="line">        outenc(encoding);</span><br><span class="line">        this.encoding &#x3D; encoding;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输入编码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig inenc(String inenc) &#123;</span><br><span class="line">        this.inenc &#x3D; inenc;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输出编码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig outenc(String outenc) &#123;</span><br><span class="line">        this.outenc &#x3D; outenc;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 输出流对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public HttpConfig out(OutputStream out) &#123;</span><br><span class="line">        outs.set(out);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public HttpClient client() &#123;</span><br><span class="line">        return client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Header[] headers() &#123;</span><br><span class="line">        return headers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isReturnRespHeaders() &#123;</span><br><span class="line">        return isReturnRespHeaders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String url() &#123;</span><br><span class="line">        return urls.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public HttpMethods method() &#123;</span><br><span class="line">        return method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String methodName() &#123;</span><br><span class="line">        return methodName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public HttpContext context() &#123;</span><br><span class="line">        return context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Map&lt;String, Object&gt; map() &#123;</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String json() &#123;</span><br><span class="line">        return json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String encoding() &#123;</span><br><span class="line">        return encoding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String inenc() &#123;</span><br><span class="line">        return inenc &#x3D;&#x3D; null ? encoding : inenc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String outenc() &#123;</span><br><span class="line">        return outenc &#x3D;&#x3D; null ? encoding : outenc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public OutputStream out() &#123;</span><br><span class="line">        return outs.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用JAVA代码发送请求"><a href="#使用JAVA代码发送请求" class="headerlink" title="使用JAVA代码发送请求"></a>使用JAVA代码发送请求</h3><p>之前说明，我们使用最常用的<code>Httpclient</code>进行设计请求，根据<code>Httpclient</code>请求工具包构建一个基本的工具类：</p><blockquote><p>这个类是一个很难复用和扩展的高耦合类，并且设计不是非常良好。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * httpclient 请求工具封装类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class HttpClientUtil &#123;</span><br><span class="line"></span><br><span class="line">public static String doGet(String url, Map&lt;String, String&gt; param) &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建Httpclient对象</span><br><span class="line">CloseableHttpClient httpclient &#x3D; HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">String resultString &#x3D; &quot;&quot;;</span><br><span class="line">CloseableHttpResponse response &#x3D; null;</span><br><span class="line">try &#123;</span><br><span class="line">&#x2F;&#x2F; 创建uri</span><br><span class="line">URIBuilder builder &#x3D; new URIBuilder(url);</span><br><span class="line">if (param !&#x3D; null) &#123;</span><br><span class="line">for (String key : param.keySet()) &#123;</span><br><span class="line">builder.addParameter(key, param.get(key));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">URI uri &#x3D; builder.build();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建http GET请求</span><br><span class="line">HttpGet httpGet &#x3D; new HttpGet(uri);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行请求</span><br><span class="line">response &#x3D; httpclient.execute(httpGet);</span><br><span class="line">&#x2F;&#x2F; 判断返回状态是否为200</span><br><span class="line">if (response.getStatusLine().getStatusCode() &#x3D;&#x3D; 200) &#123;</span><br><span class="line">resultString &#x3D; EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if (response !&#x3D; null) &#123;</span><br><span class="line">response.close();</span><br><span class="line">&#125;</span><br><span class="line">httpclient.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return resultString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String doGet(String url) &#123;</span><br><span class="line">return doGet(url, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String doPost(String url, Map&lt;String, String&gt; param) &#123;</span><br><span class="line">&#x2F;&#x2F; 创建Httpclient对象</span><br><span class="line">CloseableHttpClient httpClient &#x3D; HttpClients.createDefault();</span><br><span class="line">CloseableHttpResponse response &#x3D; null;</span><br><span class="line">String resultString &#x3D; &quot;&quot;;</span><br><span class="line">try &#123;</span><br><span class="line">&#x2F;&#x2F; 创建Http Post请求</span><br><span class="line">HttpPost httpPost &#x3D; new HttpPost(url);</span><br><span class="line">&#x2F;&#x2F; 创建参数列表</span><br><span class="line">if (param !&#x3D; null) &#123;</span><br><span class="line">List&lt;NameValuePair&gt; paramList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (String key : param.keySet()) &#123;</span><br><span class="line">paramList.add(new BasicNameValuePair(key, param.get(key)));</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 模拟表单</span><br><span class="line">UrlEncodedFormEntity entity &#x3D; new UrlEncodedFormEntity(paramList);</span><br><span class="line">httpPost.setEntity(entity);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 执行http请求</span><br><span class="line">response &#x3D; httpClient.execute(httpPost);</span><br><span class="line">resultString &#x3D; EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">try &#123;</span><br><span class="line">response.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return resultString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String doPost(String url) &#123;</span><br><span class="line">return doPost(url, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String doPostJson(String url, String json) &#123;</span><br><span class="line">&#x2F;&#x2F; 创建Httpclient对象</span><br><span class="line">CloseableHttpClient httpClient &#x3D; HttpClients.createDefault();</span><br><span class="line">CloseableHttpResponse response &#x3D; null;</span><br><span class="line">String resultString &#x3D; &quot;&quot;;</span><br><span class="line">try &#123;</span><br><span class="line">&#x2F;&#x2F; 创建Http Post请求</span><br><span class="line">HttpPost httpPost &#x3D; new HttpPost(url);</span><br><span class="line">&#x2F;&#x2F; 创建请求内容</span><br><span class="line">StringEntity entity &#x3D; new StringEntity(json, ContentType.APPLICATION_JSON);</span><br><span class="line">httpPost.setEntity(entity);</span><br><span class="line">&#x2F;&#x2F; 执行http请求</span><br><span class="line">response &#x3D; httpClient.execute(httpPost);</span><br><span class="line">resultString &#x3D; EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if(response !&#x3D; null)&#123;</span><br><span class="line">response.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return resultString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据请求Config 进行请求发送</span><br><span class="line"> * @param httpConfig</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static String send(HttpConfig httpConfig) &#123;</span><br><span class="line">return doPostJson(httpConfig.url(), httpConfig.json());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着根据请求的结果设计一个钉钉机器人的返回对象，返回对象的设计也比较的简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version v1.0.0</span><br><span class="line"> * @Package : com.dcc.common.field</span><br><span class="line"> * @Description : 钉钉机器人返回对象</span><br><span class="line"> * @Create on : 2021&#x2F;2&#x2F;5 18:26</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class DingRobotResponseMsg &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 错误码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String errcode;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 错误信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String errmsg;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 更多链接</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String more;</span><br><span class="line"></span><br><span class="line">    public DingRobotResponseMsg(String errcode, String errmsg, String more) &#123;</span><br><span class="line">        this.errcode &#x3D; errcode;</span><br><span class="line">        this.errmsg &#x3D; errmsg;</span><br><span class="line">        this.more &#x3D; more;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DingRobotResponseMsg() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getErrcode() &#123;</span><br><span class="line">        return errcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getErrmsg() &#123;</span><br><span class="line">        return errmsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMore() &#123;</span><br><span class="line">        return more;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setErrcode(String errcode) &#123;</span><br><span class="line">        this.errcode &#x3D; errcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setErrmsg(String errmsg) &#123;</span><br><span class="line">        this.errmsg &#x3D; errmsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMore(String more) &#123;</span><br><span class="line">        this.more &#x3D; more;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，也是最重要的，我们要根据钉钉的文档，构建一个所有类型的请求对象类，这个类包含了钉钉文档目前支持的所有类型。内部使用了大量的内部类，客户端需要了解一定的细节才可以具体的调用。下面简要说明一下内容类的基本使用结构。</p><ul><li>At 艾特对象内部类</li><li>Text 文本类型</li><li>Link 请求链接类型</li><li>MarkDown markdown类型</li><li>ActionCard 整体跳转类型</li><li>FeedCard 分享卡片类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version v1.0.0</span><br><span class="line"> * @Package : com.dcc.common.field</span><br><span class="line"> * @Description : 钉钉机器人请求实体对象</span><br><span class="line"> * 请求案例：&#123;&quot;msgtype&quot;: &quot;text&quot;,&quot;text&quot;: &#123;&quot;content&quot;: &quot;自定义具体内容&quot;&#125;&#125;</span><br><span class="line"> * @link &#123;https:&#x2F;&#x2F;developers.dingtalk.com&#x2F;document&#x2F;app&#x2F;custom-robot-access&#125;</span><br><span class="line"> *</span><br><span class="line"> * @Create on : 2021&#x2F;2&#x2F;5 11:55</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class DingRobotRequestBody implements DingRobotRequestAble &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 艾特对象内容</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private At at;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String msgtype;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 文本类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Text text;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 连接类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Link link;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * markdown 类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private MarkDown markdown;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 整体跳转ActionCard类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private ActionCard actionCard;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * FeedCard类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private FeedCard feedCard;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * FeedCard类型</span><br><span class="line">     *</span><br><span class="line">     * msgtype    String是此消息类型为固定feedCard。</span><br><span class="line">     * title    String是单条信息文本。</span><br><span class="line">     * messageURLString是点击单条信息到跳转链接。</span><br><span class="line">     * picURL    String是单条信息后面图片的URL。</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class FeedCard&#123;</span><br><span class="line"></span><br><span class="line">        private List&lt;FeedItem&gt; links;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 代表 FeedCard类型 子类型</span><br><span class="line">         *&#x2F;</span><br><span class="line">        public static class FeedItem&#123;</span><br><span class="line"></span><br><span class="line">            private String title;</span><br><span class="line"></span><br><span class="line">            private String messageURL;</span><br><span class="line"></span><br><span class="line">            private String picURL;</span><br><span class="line"></span><br><span class="line">            public String getTitle() &#123;</span><br><span class="line">                return title;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void setTitle(String title) &#123;</span><br><span class="line">                this.title &#x3D; title;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public String getMessageURL() &#123;</span><br><span class="line">                return messageURL;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void setMessageURL(String messageURL) &#123;</span><br><span class="line">                this.messageURL &#x3D; messageURL;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public String getPicURL() &#123;</span><br><span class="line">                return picURL;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void setPicURL(String picURL) &#123;</span><br><span class="line">                this.picURL &#x3D; picURL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;FeedItem&gt; getLinks() &#123;</span><br><span class="line">            return links;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setLinks(List&lt;FeedItem&gt; links) &#123;</span><br><span class="line">            this.links &#x3D; links;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 整体跳转ActionCard类型</span><br><span class="line">     * msgtype        String是消息类型，此时固定为：actionCard。</span><br><span class="line">     * title        String是首屏会话透出的展示内容。</span><br><span class="line">     * text            String是markdown格式的消息。</span><br><span class="line">     * singleTitle    String是单个按钮的标题。</span><br><span class="line">     *</span><br><span class="line">     * 注意 设置此项和singleURL后，btns无效。</span><br><span class="line">     *</span><br><span class="line">     * singleURL    String是点击singleTitle按钮触发的URL。</span><br><span class="line">     * btnOrientationString否0：按钮竖直排列1：按钮横向排列</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class ActionCard&#123;</span><br><span class="line"></span><br><span class="line">        private String title;</span><br><span class="line"></span><br><span class="line">        private String text;</span><br><span class="line"></span><br><span class="line">        private String btnOrientation;</span><br><span class="line"></span><br><span class="line">        private String singleTitle;</span><br><span class="line"></span><br><span class="line">        private String singleURL;</span><br><span class="line"></span><br><span class="line">        public String getTitle() &#123;</span><br><span class="line">            return title;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setTitle(String title) &#123;</span><br><span class="line">            this.title &#x3D; title;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getText() &#123;</span><br><span class="line">            return text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setText(String text) &#123;</span><br><span class="line">            this.text &#x3D; text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getBtnOrientation() &#123;</span><br><span class="line">            return btnOrientation;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setBtnOrientation(String btnOrientation) &#123;</span><br><span class="line">            this.btnOrientation &#x3D; btnOrientation;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getSingleTitle() &#123;</span><br><span class="line">            return singleTitle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setSingleTitle(String singleTitle) &#123;</span><br><span class="line">            this.singleTitle &#x3D; singleTitle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getSingleURL() &#123;</span><br><span class="line">            return singleURL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setSingleURL(String singleURL) &#123;</span><br><span class="line">            this.singleURL &#x3D; singleURL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 艾特类</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class At&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 是否通知全部人</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private boolean atAll;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 需要@的手机号数组</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private List&lt;String&gt; atMobiles;</span><br><span class="line"></span><br><span class="line">        public boolean isAtAll() &#123;</span><br><span class="line">            return atAll;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setAtAll(boolean atAll) &#123;</span><br><span class="line">            this.atAll &#x3D; atAll;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;String&gt; getAtMobiles() &#123;</span><br><span class="line">            return atMobiles;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setAtMobiles(List&lt;String&gt; atMobiles) &#123;</span><br><span class="line">            this.atMobiles &#x3D; atMobiles;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *</span><br><span class="line">     * markdown 类型， 可以发送markdown 的语法格式</span><br><span class="line">     * msgtype    String是消息类型，此时固定为：markdown。</span><br><span class="line">     * title    String是首屏会话透出的展示内容。</span><br><span class="line">     * text        String是markdown格式的消息。</span><br><span class="line">     * atMobilesArray否被@人的手机号。 注意 在text内容里要有@人的手机号。</span><br><span class="line">     * isAtAllBoolean否是否@所有人。</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class MarkDown&#123;</span><br><span class="line"></span><br><span class="line">        private String title;</span><br><span class="line"></span><br><span class="line">        private String text;</span><br><span class="line"></span><br><span class="line">        public String getTitle() &#123;</span><br><span class="line">            return title;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setTitle(String title) &#123;</span><br><span class="line">            this.title &#x3D; title;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getText() &#123;</span><br><span class="line">            return text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setText(String text) &#123;</span><br><span class="line">            this.text &#x3D; text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 钉钉请求：链接类型</span><br><span class="line">     *</span><br><span class="line">         msgtype    String是消息类型，此时固定为：link。</span><br><span class="line">         title        String是消息标题。</span><br><span class="line">         text        String是消息内容。如果太长只会部分展示。</span><br><span class="line">         messageUrl    String是点击消息跳转的URL。</span><br><span class="line">         picUrl        String否图片URL。</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class Link&#123;</span><br><span class="line"></span><br><span class="line">        private String text;</span><br><span class="line"></span><br><span class="line">        private String messageUrl;</span><br><span class="line"></span><br><span class="line">        private String picUrl;</span><br><span class="line"></span><br><span class="line">        private String title;</span><br><span class="line"></span><br><span class="line">        public String getText() &#123;</span><br><span class="line">            return text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setText(String text) &#123;</span><br><span class="line">            this.text &#x3D; text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getMessageUrl() &#123;</span><br><span class="line">            return messageUrl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setMessageUrl(String messageUrl) &#123;</span><br><span class="line">            this.messageUrl &#x3D; messageUrl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getPicUrl() &#123;</span><br><span class="line">            return picUrl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setPicUrl(String picUrl) &#123;</span><br><span class="line">            this.picUrl &#x3D; picUrl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getTitle() &#123;</span><br><span class="line">            return title;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setTitle(String title) &#123;</span><br><span class="line">            this.title &#x3D; title;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 钉钉请求：纯文本类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class Text&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * text请求内容</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private String content;</span><br><span class="line"></span><br><span class="line">        public String getContent() &#123;</span><br><span class="line">            return content;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setContent(String content) &#123;</span><br><span class="line">            this.content &#x3D; content;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setMsgType(String msgtype) &#123;</span><br><span class="line">        this.msgtype &#x3D; msgtype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setText(Text text) &#123;</span><br><span class="line">        this.text &#x3D; text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setLink(Link link) &#123;</span><br><span class="line">        this.link &#x3D; link;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setMarkDown(MarkDown markDown) &#123;</span><br><span class="line">        this.markdown &#x3D; markDown;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setActionCard(ActionCard actionCard) &#123;</span><br><span class="line">        this.actionCard &#x3D; actionCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setFeedCard(FeedCard feedCard) &#123;</span><br><span class="line">        this.feedCard &#x3D; feedCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public At getAt() &#123;</span><br><span class="line">        return at;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAt(At at) &#123;</span><br><span class="line">        this.at &#x3D; at;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMsgtype() &#123;</span><br><span class="line">        return msgtype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Text getText() &#123;</span><br><span class="line">        return text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Link getLink() &#123;</span><br><span class="line">        return link;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MarkDown getMarkdown() &#123;</span><br><span class="line">        return markdown;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ActionCard getActionCard() &#123;</span><br><span class="line">        return actionCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public FeedCard getFeedCard() &#123;</span><br><span class="line">        return feedCard;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>插曲：在生成具体的钉钉对应请求对象时候，我们构建了一个对应的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version v1.0.0</span><br><span class="line"> * @Package : com.zxd.interview.dingrobot</span><br><span class="line"> * @Description : 允许发送钉钉请求的接口</span><br><span class="line"> * @Create on : 2021&#x2F;2&#x2F;7 11:45</span><br><span class="line"> **&#x2F;</span><br><span class="line">public interface DingRobotRequestAble &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 所有的子类需要集成该接口</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void setMsgType(String msgType);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 普通文本类型</span><br><span class="line">     * @param text</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void setText(DingRobotRequestBody.Text text);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * link类型</span><br><span class="line">     * @param link</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void setLink(DingRobotRequestBody.Link link);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * markdown 类型</span><br><span class="line">     * @param markDown</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void setMarkDown(DingRobotRequestBody.MarkDown markDown);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 整体跳转ActionCard类型</span><br><span class="line">     * @param actionCard</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void setActionCard(DingRobotRequestBody.ActionCard actionCard);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * feedcard 类型</span><br><span class="line">     * @param feedCard</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void setFeedCard(DingRobotRequestBody.FeedCard feedCard);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="构建钉钉请求工具类"><a href="#构建钉钉请求工具类" class="headerlink" title="构建钉钉请求工具类"></a>构建钉钉请求工具类</h3><p>介绍完上面所有的辅助对象之后，我们着手构建核心的钉钉请求工具类，钉钉的请求工具类包含了基本的请求步骤，提供对外的请求方法，调用者根据请求对象构建对应的请求参数即可，从下面的代码可以看到最核心的方法是<code>notifyRobot</code>这个方法，这个方法非常简单，内部的逻辑分为如下的几步：</p><ul><li>构建请求环境参数</li><li>构建请求的URL和对应的携带参数</li><li>构建具体的请求参数</li><li>将请求返回的JSON字符串进行转化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version v1.0.0</span><br><span class="line"> * @Package : com.dcc.common.utils</span><br><span class="line"> * @Description : 钉钉机器人工具类</span><br><span class="line"> * @Create on : 2021&#x2F;2&#x2F;4 00:11</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class DingRobotUtils &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger LOGGER &#x3D; LoggerFactory.getLogger(DingRobotUtils.class);</span><br><span class="line"></span><br><span class="line">    public static DingRobotResponseMsg notifyRobot(DingRobotRequest dingRobotRequest, long currentTimeMillis) throws Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; param &#x3D; buildParam(dingRobotRequest, currentTimeMillis);</span><br><span class="line">        String s &#x3D; buildParamUrl(param);</span><br><span class="line">        &#x2F;&#x2F; 钉钉的请求参数需要拼接到URL链接</span><br><span class="line">        dingRobotRequest.setUrl(String.format(&quot;%s?%s&quot;, dingRobotRequest.getUrl(), s));</span><br><span class="line">        HttpConfig httpConfig &#x3D; buildDefaultHttpConfig(dingRobotRequest, dingRobotRequest.getMsg());</span><br><span class="line">        return parseResponse(notifyRobot(httpConfig));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 转化为对应对象</span><br><span class="line">     *</span><br><span class="line">     * @param notifyRobot 转化JSON</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static DingRobotResponseMsg parseResponse(String notifyRobot) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return JSON.parseObject(notifyRobot, DingRobotResponseMsg.class);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            LOGGER.error(&quot;类型转化失败，失败原因为:&#123;&#125;&quot;, e.getMessage());</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 按照自定时间戳进行通知</span><br><span class="line">     *</span><br><span class="line">     * @param dingRobotRequest 钉钉机器人请求</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static DingRobotResponseMsg notifyRobot(DingRobotRequest dingRobotRequest) throws Exception &#123;</span><br><span class="line">        long currentTimeMillis &#x3D; System.currentTimeMillis();</span><br><span class="line">        return notifyRobot(dingRobotRequest, currentTimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构建请求环境参数</span><br><span class="line">     *</span><br><span class="line">     * @param dingRobotRequest  请求request</span><br><span class="line">     * @param currentTimeMillis 当前时间戳</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static Map&lt;String, Object&gt; buildParam(DingRobotRequest dingRobotRequest, long currentTimeMillis) throws Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; param &#x3D; new HashMap&lt;&gt;(3);</span><br><span class="line">        param.put(&quot;access_token&quot;, dingRobotRequest.getAccessToken());</span><br><span class="line">        param.put(&quot;timestamp&quot;, currentTimeMillis);</span><br><span class="line">        param.put(&quot;sign&quot;, generateSign(currentTimeMillis, dingRobotRequest.getSecret()));</span><br><span class="line">        return param;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 钉钉机器人的默认配置</span><br><span class="line">     *</span><br><span class="line">     * @param dingRobotRequest    钉钉机器人请求对象</span><br><span class="line">     * @param dingRobotRequestMsg 钉钉机器人请求实体</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static HttpConfig buildDefaultHttpConfig(DingRobotRequest dingRobotRequest, DingRobotRequestAble dingRobotRequestMsg) &#123;</span><br><span class="line">        return HttpConfig.custom().headers(defaultBasicHeader())</span><br><span class="line">                .url(dingRobotRequest.getUrl())</span><br><span class="line">                .encoding(&quot;UTF-8&quot;)</span><br><span class="line">                .method(HttpMethods.POST)</span><br><span class="line">                .json(JSON.toJSONString(dingRobotRequestMsg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 默认headers配置</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static Header[] defaultBasicHeader() &#123;</span><br><span class="line">        Header[] headers &#x3D; new Header[1];</span><br><span class="line">        headers[0] &#x3D; new BasicHeader(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;);</span><br><span class="line">        return headers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static String notifyRobot(HttpConfig httpConfig) throws Exception &#123;</span><br><span class="line">        String send &#x3D; &quot;&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            send &#x3D; HttpClientUtil.send(httpConfig);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            LOGGER.error(&quot;HTTPClient请求发送失败, 失败原因为:&#123;&#125;&quot;, e.getMessage());</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line">        return send;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 根据时间戳和秘钥生成一份签名</span><br><span class="line">     *</span><br><span class="line">     * @param timestamp 时间戳</span><br><span class="line">     * @param secret    秘钥</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static String generateSign(Long timestamp, String secret) throws Exception &#123;</span><br><span class="line">        String stringToSign &#x3D; timestamp + &quot;\n&quot; + secret;</span><br><span class="line">        Mac mac &#x3D; Mac.getInstance(&quot;HmacSHA256&quot;);</span><br><span class="line">        mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), &quot;HmacSHA256&quot;));</span><br><span class="line">        byte[] signData &#x3D; mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        return URLEncoder.encode(new String(Base64.encodeBase64(signData)), &quot;UTF-8&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构建URL参数</span><br><span class="line">     *</span><br><span class="line">     * @param param 请求MAP参数</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static String buildParamUrl(Map&lt;String, Object&gt; param) &#123;</span><br><span class="line">        if (null &#x3D;&#x3D; param || param.size() &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder stringBuilder &#x3D; new StringBuilder();</span><br><span class="line">        param.forEach((key, value) -&gt; &#123;</span><br><span class="line">            stringBuilder.append(key).append(&quot;&#x3D;&quot;).append(value);</span><br><span class="line">            stringBuilder.append(&quot;&amp;&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        stringBuilder.deleteCharAt(stringBuilder.length() - 1);</span><br><span class="line">        return stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是本工具类的使用方式，只需要传入环境参数并且传入必须的请求msg，就可以直接发送请求并且返回对应的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> DingRobotRequest.Builder builder &#x3D; new DingRobotRequest.Builder();</span><br><span class="line">DingRobotRequest build &#x3D; builder.secret(&quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;)</span><br><span class="line">    .url(&quot;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send&quot;)</span><br><span class="line">    .accessToken(&quot;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&quot;)</span><br><span class="line">    .msg(generateActionCard()).build();</span><br><span class="line">try &#123;</span><br><span class="line">    DingRobotResponseMsg dingRobotResponseMsg &#x3D; DingRobotUtils.notifyRobot(build);</span><br><span class="line">    System.err.println(JSON.toJSONString(dingRobotResponseMsg));</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，一个工具类构建就完成了，整个构建的过程还是十分简单的。这次的工具代码也是不断进行小改动的成果。个人的代码水平功底有限，如果有什么意见欢迎点评。</p><h1 id="问题汇总："><a href="#问题汇总：" class="headerlink" title="问题汇总："></a>问题汇总：</h1><p>下面汇总了一些个人使用钉钉花的时间比较多的点。</p><blockquote><p>吐槽：其实个人感觉钉钉的机器人在错误码这一块并不是特别的直观，下面说下个人踩到的一些小坑。</p></blockquote><h2 id="关于加签测试机器人出现31000的问题"><a href="#关于加签测试机器人出现31000的问题" class="headerlink" title="关于加签测试机器人出现31000的问题"></a>关于加签测试机器人出现<code>31000</code>的问题</h2><p>如果在添加机器人的时候进行加签是需要加入对应的<code>sign</code>和<code>timestamp</code>参数才可以测试成功，这里个人卡了一会儿才明白设计者的意图，虽然很好理解，但是对于第一次使用的人不是十分友好，同时在文档里面明显对于这一块的描述比较少，这里提供一下个人的小坑说明：</p><p>首先，我们需要根据请求的时间戳和秘钥生成签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 构建当前的系统时间戳</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Test</span><br><span class="line">public void generateSystemCurrentTime() throws Exception &#123;</span><br><span class="line">    long l &#x3D; System.currentTimeMillis();</span><br><span class="line">    String secret &#x3D; &quot;SEC2e67120c5e4affa1177ac25fe8dc77ba1c5b49284a9dc7e1888770bc3b76b1fc&quot;;</span><br><span class="line">    String sign &#x3D; generateSign(l, secret);</span><br><span class="line">    System.out.println(&quot;timestamp &#x3D; &quot;+ l);</span><br><span class="line">    System.out.println(&quot;sign &#x3D; &quot; + sign);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private String generateSign(Long timestamp, String secret) throws Exception &#123;</span><br><span class="line">    String stringToSign &#x3D; timestamp + &quot;\n&quot; + secret;</span><br><span class="line">    Mac mac &#x3D; Mac.getInstance(&quot;HmacSHA256&quot;);</span><br><span class="line">    mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), &quot;HmacSHA256&quot;));</span><br><span class="line">    byte[] signData &#x3D; mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    return URLEncoder.encode(new String(Base64.encodeBase64(signData)), &quot;UTF-8&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>生成签名之后，我们需要把<strong>时间戳</strong>和<strong>签名</strong>放入到请求的URL参数里面，测试方可通过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;381c2f405e0f906fd556b27cea9f66864120860b5d8b117bb046e10b6599b050&amp;timestamp&#x3D;1613212722591&amp;sign&#x3D;SsKKlkvwM%2F4tsCPE6YoGls8vgkQqWJGHYpvWbW7hTGM%3D</span><br></pre></td></tr></table></figure><blockquote><p>提示：还是注意一下，在设置里面增加了加签</p></blockquote><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>本文主要为记录个人使用钉钉的一些心得体会，以及以此编写了一个工具包方便以后有需要的时候可以直接拿来使用。</p><p>钉钉机器人的使用就告一段落了，目前工具类已经应用到公司项目正常的发送请求通知。后续看心情对于HttpClient请求工具类重构，但是目前个人还在参考和学习设计记录，发现可以拆分的对象还是不少的。包含请求方法，请求Header，请求编码等各种形式的转化。</p><p>最后，个人最近从<strong>《代码简洁之道》</strong>里面学习了很多有用的编程技巧和编写代码的细节问题，推荐读者看一看这本书，对于写出一个好代码和好注释或者想要学习改良自己的代码都是很有好处的，后续个人也会写一篇学习笔记，感兴趣的可以关注一波。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      如何快捷简单的使用钉钉机器人
    
    </summary>
    
    
      <category term="笔记" scheme="https://whitestore.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://whitestore.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《生活需要断舍离》读书笔记</title>
    <link href="https://whitestore.top/2021/02/14/nativebook/"/>
    <id>https://whitestore.top/2021/02/14/nativebook/</id>
    <published>2021-02-14T03:40:27.000Z</published>
    <updated>2021-02-14T04:22:45.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《生活需要断舍离》读书笔记"><a href="#《生活需要断舍离》读书笔记" class="headerlink" title="《生活需要断舍离》读书笔记"></a>《生活需要断舍离》读书笔记</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    这本书算是觉得封面还不错买了下来，但是没想到居然买到了“日记”，并且从网上来看似乎是买错了一个版本，比较尴尬，这本书内容没有啥特别的干货，所以这篇文章也是简单的提一下看到的一些内容。</p><a id="more"></a><h2 id="推荐程度："><a href="#推荐程度：" class="headerlink" title="推荐程度："></a>推荐程度：</h2><p>在我的定义里面和日记类似，所以不做推荐，也不推荐买。</p><h2 id="内容简要概述："><a href="#内容简要概述：" class="headerlink" title="内容简要概述："></a>内容简要概述：</h2><p>从书名就可以看出来，就是最为简单的三个字：断、舍、离。大致翻翻书从这本书可以看出这是一本心境锻炼的书籍。但是内容比较粗浅，在我定义里面算是日记这一类型。</p><p>从下面一幅图可以看到整个断舍离的基本概念，其实都是非常简单的一些道理：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210213121559.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>断：</p><ol><li>断绝攀比的心理，懂得控制自己的欲望，用思考代替情感</li><li>断绝自己家里的一切无任何使用意义的东西，时常的清理自己的家里。断绝一切无意义的东西</li><li>断开负面的思考，只思考积极的事情。断绝自己的负面情绪</li></ol><p>舍：</p><ol><li>舍弃一切对自己无意义的东西</li><li>凡事有舍才有得</li><li>顺从自己的心，割舍既有</li></ol><p>离：</p><ol><li>脱离对于事物的杂念，找到自己内心真正想要的东西</li><li>远离诱惑，找到对自己真正有意义的东西</li><li>远离虚假的繁荣，寻找自己真正想要的生活</li></ol><p>断舍离强调的是给自己做减法而不是做加法，我们时常在给自己做加法，而不是做减法，用加法让自己充斥在各种的杂物里面，干扰自己的生活以及自己的心情。</p><h2 id="反省："><a href="#反省：" class="headerlink" title="反省："></a>反省：</h2><p>这本书买错了，不是日本的那本断舍离。里面内容像日记版心灵鸡汤，一天一碗。</p><h2 id="收获："><a href="#收获：" class="headerlink" title="收获："></a>收获：</h2><p>买书之前查清楚，一本书可能有很多个版本，很明显个人算是被坑了</p><h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>算是买错了的一本书，看完个人也没有特别的感受，还是建议不要买这类书籍，这本书更多的是鸡汤文。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      生活需要断舍离的读书笔记
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈设计模式 - 装饰器模式（五）</title>
    <link href="https://whitestore.top/2021/02/14/strategymodal/"/>
    <id>https://whitestore.top/2021/02/14/strategymodal/</id>
    <published>2021-02-14T03:40:16.000Z</published>
    <updated>2021-02-14T04:19:00.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈设计模式-装饰器模式（五）"><a href="#浅谈设计模式-装饰器模式（五）" class="headerlink" title="浅谈设计模式 - 装饰器模式（五）"></a>浅谈设计模式 - 装饰器模式（五）</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    装饰器模式是是对类进行增强的一种典型设计模式，它允许对于一个现有类进行增强的操作，对于喜欢使用继承的伙伴，这个模式非常贴切的展示的了对于继承的灵活用法。但是装饰器模式同样<strong>不是一个推崇使用的模式</strong>，因为他对于继承存在依赖性，从本文后续就可以了解到装饰类膨胀的问题，所以在设计代码结构的时候，装饰器模式<strong>并不是第一考虑</strong>。</p><a id="more"></a><h2 id="什么是装饰器模式？"><a href="#什么是装饰器模式？" class="headerlink" title="什么是装饰器模式？"></a>什么是装饰器模式？</h2><p>​    装饰器模式：对现有类不改动结构的情况下为类添加新职责和功能的模式。</p><p>​    动态的扩展类的职责，装饰器模式是一种是比继承更加灵活的代码扩展模式。同时装饰类之间可以进行互相的嵌套</p><h2 id="装饰器模式的结构图："><a href="#装饰器模式的结构图：" class="headerlink" title="装饰器模式的结构图："></a>装饰器模式的结构图：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210207162333.png?ynotemdtimestamp=1613223296738" alt="img"></p><ul><li><p>Component 装饰接口</p><p>：装饰接口定义了装饰的顶层抽象行为，一般定义被装饰者和装饰者的公用行为</p><ul><li><p><strong>ConrecteComponent 被装饰类</strong>：主要为被装饰类实现，和装饰类相互独立，拥有单独的功能方法</p></li><li><p>Decorder 装饰器</p><p>：定义了装饰的通用接口，包含装饰器的通用方法</p><ul><li><strong>ConrecteDecorderA 装饰器A</strong>：定义了装饰器的具体设计，可以包含自己的装饰方法</li><li><strong>ConrecteDecorderB 装饰器B</strong>：定义了装饰器的具体设计，可以包含自己的装饰方法</li></ul></li></ul></li></ul><h2 id="装饰器模式的特点"><a href="#装饰器模式的特点" class="headerlink" title="装饰器模式的特点"></a>装饰器模式的特点</h2><ol><li>装饰者和被装饰者都需要实现<strong>相同的接口</strong>（必要条件）</li><li>装饰者一般需要继承一个抽象类，或者需要定义抽象的方法和实现</li><li>装饰者可以在所委托被装饰者的行为之前或之后，加上自己的行为，以达到特定的目的。</li><li><strong>任何父类出现的地方都可以用子类进行替换</strong>，在活用继承的同时可以灵活的扩展。</li></ol><h2 id="什么时候使用装饰器模式"><a href="#什么时候使用装饰器模式" class="headerlink" title="什么时候使用装饰器模式"></a>什么时候使用装饰器模式</h2><ul><li>需要大量的子类为某一个对象进行职责增强的时候，可以使用装饰器模式</li><li>希望使用继承对于类进行动态扩展的时候，可以考虑使用装饰器模式</li></ul><h2 id="实际案例："><a href="#实际案例：" class="headerlink" title="实际案例："></a>实际案例：</h2><h3 id="模拟场景："><a href="#模拟场景：" class="headerlink" title="模拟场景："></a>模拟场景：</h3><p>我们用一个奶茶的结构来模拟一个装饰器的设计场景，我们通常在奶茶店点奶茶的时候，对于一杯奶茶，可以添加各种配料，这时候配料就是奶茶的装饰者，而奶茶就是典型的被装饰者，我们使用配料去“装饰”奶茶，就可以得到各种口味的奶茶。同时可以计算出奶茶的价格</p><p>下面我们来看一下针对模拟场景的案例和使用：</p><h3 id="不使用设计模式："><a href="#不使用设计模式：" class="headerlink" title="不使用设计模式："></a>不使用设计模式：</h3><p>​    不使用设计模式，我们的第一考虑就是简单的使用继承去设计装饰类，我们通过各种子类组合来实现一杯杯不同口味的奶茶，从下面的结构图可以看到，将被装饰类定义为独立的类，同时不进行任何的继承而是作为独立的类使用。而调料也就是奶茶饮料的配料需要继承同一个抽象类，同时在内部实现自己的方法。</p><p>​    紧接着，我们在装饰者的方法中引入被装饰者，可以通过内部组合被装饰者进行 <strong>模仿</strong>行为的同时进行增强，就像IO当中的<code>Buffer</code>。</p><p>​    我们根据上面的说明画出这一种设计的大致结构图：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210207230255.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>看了上面的设计图稿之后，我们来说明一下具体的代码实现：</p><p>首先是奶茶实体类：在奶茶的实体类里面定义两个属性， 使用一个<code>display()</code>打印信息，奶茶的实体类表示被装饰类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 奶茶实体类</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:21</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MilkTea &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private double price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public MilkTea(String name, double price) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(double price) &#123;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void display() &#123;</span><br><span class="line">        System.out.println(&quot;name &#x3D; &quot;+ name + &quot; price &#x3D; &quot; +price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是柠檬汁的被装饰类，这个被装饰类也是独立的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 柠檬汁</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:53</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class LeamonJuice &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private double price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public LeamonJuice(String name, double price) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(double price) &#123;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void display() &#123;</span><br><span class="line">        System.out.println(&quot;name &#x3D; &quot;+ name + &quot; price &#x3D; &quot; +price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调料的父类：注意这是一个抽象类，定义了调料的基本方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 调料父类</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:23</span><br><span class="line"> *&#x2F;</span><br><span class="line">public abstract class Codiment &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 为装饰类添加附加值</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    abstract void plusAdditionVal(MilkTea milkTea);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 详细信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected String description()&#123;</span><br><span class="line">        return &quot;无任何配料&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调料的子类珍珠类，这里为父类进行装饰，添加父类的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 配料：珍珠</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:27</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Pearl extends Codiment&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    void plusAdditionVal(MilkTea milkTea) &#123;</span><br><span class="line">        if(milkTea &#x3D;&#x3D; null)&#123;</span><br><span class="line">            throw new RuntimeException(&quot;对不起，请先添加奶茶&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        milkTea.setPrice(milkTea.getPrice() + 2);</span><br><span class="line">        milkTea.setName(milkTea.getName() + &quot;,&quot; +description());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 详细信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected String description()&#123;</span><br><span class="line">        return &quot;珍珠&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调料的子类椰果类，这里同样是为了父类进行装饰的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 配料：椰果</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:30</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Coconut extends Codiment&#123;</span><br><span class="line">    @Override</span><br><span class="line">    void plusAdditionVal(MilkTea milkTea) &#123;</span><br><span class="line">        if(milkTea &#x3D;&#x3D; null)&#123;</span><br><span class="line">            throw new RuntimeException(&quot;对不起，请先添加奶茶&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        milkTea.setPrice(milkTea.getPrice() + 1);</span><br><span class="line">        milkTea.setName(milkTea.getName() + &quot;,&quot; +description());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected String description() &#123;</span><br><span class="line">        return &quot;椰果&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们使用一个单元测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 单元测试</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:34</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MilkTea milkTea &#x3D; new MilkTea(&quot;原味奶茶&quot;, 5);</span><br><span class="line">        Pearl pearl &#x3D; new Pearl();</span><br><span class="line">        Coconut coconut &#x3D; new Coconut();</span><br><span class="line">        pearl.plusAdditionVal(milkTea);</span><br><span class="line">        coconut.plusAdditionVal(milkTea);</span><br><span class="line">        milkTea.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x2F;*</span><br><span class="line">打印结果：name &#x3D; 原味奶茶,珍珠,椰果 price &#x3D; 8.0</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="不使用设计模式的优缺点："><a href="#不使用设计模式的优缺点：" class="headerlink" title="不使用设计模式的优缺点："></a>不使用设计模式的优缺点：</h3><p>优点：</p><ul><li>添加一个装饰者十分简单，只需要继承抽象父类接口，同时子类只需要通过方法传入被装饰者进行装饰。</li></ul><p>缺点：</p><ul><li>我们的调料父类如果<strong>增加抽象方法</strong>，<strong>所有的子类都需要改动</strong>，这是整个子类群体来说是毁灭性的，对于编写代码的程序员来说也是毁灭性的。</li><li>可以看到装饰者已经是一种<strong>面向实现编程</strong>的状态，如果我们换一种被装饰者，需要添加更多的装饰类进行装饰。并且这些装饰者是<strong>相互独立并且不能复用的</strong></li></ul><blockquote><p>从结构图的设计就可以看出这种设计不符合<strong>面向接口编程</strong>的设计原则</p></blockquote><h3 id="总结不使用模式："><a href="#总结不使用模式：" class="headerlink" title="总结不使用模式："></a>总结不使用模式：</h3><p>​    不使用设计模式看起来没有什么大问题，但是可以从结构可以看到抽象父类以及子类的耦合过于严重，父类完全不敢动<code>abstract void plusAdditionVal(MilkTea milkTea)</code>这个抽象签名方法，并且如果需求增加一个其他的被装饰者，这些装饰奶茶的装饰者就完全“傻眼”了，因为他们完全不认识新的被装饰者，这导致程序要更多的子类来接纳新的的被装饰者，这种设计结构将导致类<strong>子类无限膨胀</strong>，没有尽头。</p><h3 id="使用设计模式："><a href="#使用设计模式：" class="headerlink" title="使用设计模式："></a>使用设计模式：</h3><p>​    从不使用设计模式可以看出，不使用设计模式最大的问题是在于调料的父类抽象方法耦合过于严重，以及被装饰类和装饰者之间存在依赖磁铁。从结构图可以看出来被装饰类和装饰类<strong>并没有明显的关联</strong>，我们之前已经说明了装饰模式更多的是对于一个被装饰类的增强，既然是增强，那么<strong>被装饰类和装饰类通常需要具备相同的抽象行为</strong>，这样才比较符合装饰模式的设计结构。</p><p>​    下面就上面的结构图进行改进，在 <strong>被装饰类</strong>和<strong>装饰类</strong>之上，再增加一层接口，调料的父类不在管理公用接口，而是可以增加自己的方法。我们改进一下结构图，只要稍微改进一下，整个结构就可以变得十分好用：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210208001255.png?ynotemdtimestamp=1613223296738" alt="img"></p><p>为了方便展示代码和理解，这里只列出了<strong>奶茶类</strong>，<strong>调料父类</strong>，<strong>配料：珍珠</strong>，以及我们最重要的公用接口进行介绍：</p><p>我们从最顶层开始，最顶层在结构上定义了一个抽象公用接口，提供装饰者以及被装饰者进行实现或者定义抽象和扩展：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 饮料的抽象类，定义饮料的通用接口</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 23:46</span><br><span class="line"> *&#x2F;</span><br><span class="line">public interface DrinkAbstract &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 装饰接口</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void plusAdditionVal();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 计算售价</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    double coat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是奶茶类，我们的奶茶类在上一个版本基础上，实现了一个新的接口，所以需要定义实现接口后的方法：</p><p>奶茶类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 奶茶实体类</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:21</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MilkTea implements DrinkAbstract&#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private double price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public MilkTea(String name, double price) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(double price) &#123;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void display() &#123;</span><br><span class="line">        System.out.println(&quot;name &#x3D; &quot;+ name + &quot; price &#x3D; &quot; +price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 增加</span><br><span class="line">    @Override</span><br><span class="line">    public void plusAdditionVal() &#123;</span><br><span class="line">        System.out.println(&quot;name &#x3D; &quot;+ name  + &quot; price &#x3D; &quot; + price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 增加</span><br><span class="line">    @Override</span><br><span class="line">    public double coat() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是调料的父类，调料的父类需要改动的内容不是很多，本质上就是把自己的抽象方法提取到父接口。这个类可以是抽象类，也可以是配料接口的通用抽象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 调料父类</span><br><span class="line"> * 这里需要实现饮料接口</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:23</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Codiment implements DrinkAbstract&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 为装饰类添加附加值</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void plusAdditionVal()&#123;</span><br><span class="line">        description();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double coat() &#123;</span><br><span class="line">        return 5.0f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 详细信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String description()&#123;</span><br><span class="line">        return &quot;无任何配料&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是配料的具体实现类配料-珍珠进行改动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 配料：珍珠</span><br><span class="line"> *</span><br><span class="line"> * @author zxd</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2021&#x2F;2&#x2F;7 22:27</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Pearl extends Codiment implements DrinkAbstract&#123;</span><br><span class="line"></span><br><span class="line">    private DrinkAbstract drinkAbstract;</span><br><span class="line"></span><br><span class="line">    public Pearl(DrinkAbstract drinkAbstract) &#123;</span><br><span class="line">        this.drinkAbstract &#x3D; drinkAbstract;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void plusAdditionVal() &#123;</span><br><span class="line">        &#x2F;&#x2F; 如果是奶茶</span><br><span class="line">        if(drinkAbstract instanceof MilkTea)&#123;</span><br><span class="line">            MilkTea drinkAbstract &#x3D; (MilkTea) this.drinkAbstract;</span><br><span class="line">            drinkAbstract.setName(drinkAbstract.getName() + &quot; -- &quot; + &quot;珍珠&quot;);</span><br><span class="line">            drinkAbstract.setPrice(drinkAbstract.getPrice() + 55);</span><br><span class="line">            description();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double coat() &#123;</span><br><span class="line">        return 5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 详细信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void description()&#123;</span><br><span class="line">        drinkAbstract.plusAdditionVal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们来看下单元测试的变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    private static void run2()&#123;</span><br><span class="line">        DrinkAbstract drinkAbstract &#x3D; new MilkTea(&quot;原味奶茶&quot;, 5);</span><br><span class="line">        Pearl codiment &#x3D; new Pearl(drinkAbstract);</span><br><span class="line">        codiment.plusAdditionVal();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       run2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x2F;*控制台结果：name &#x3D; 原味奶茶 -- 珍珠 price &#x3D; 60.0*&#x2F;</span><br></pre></td></tr></table></figure><p>可以看到我们使用装饰类对于被装饰类的属性进行了改变的同时并没有改变被装饰者的本身的行为，而是对于行为做了扩展。</p><h3 id="使用装饰器设计模式的优缺点："><a href="#使用装饰器设计模式的优缺点：" class="headerlink" title="使用装饰器设计模式的优缺点："></a>使用装饰器设计模式的优缺点：</h3><p>优点：</p><ol><li>装饰类的公用类不再需要设置抽象的方法，使得装饰实现子类也不在依赖抽象父类的抽象方法</li><li>既然装饰者和被装饰对象有相同的超类型，所以在任何需要原始对象（被包装的）的场合，就可以用装饰过的对象代替它。</li><li>装饰类和被装饰类的扩展和实现都是解耦的，不需要互相关注实现细节，装饰子类可以独自实现方法</li><li>我们解决了增加新的被装饰类之后导致装饰类大量膨胀的问题，现在可以进行简单的应用。</li></ol><p>缺点：</p><ol><li>本质上还是继承结构，而且装饰类和被装饰类<strong>必须</strong>有相同的顶级父类接口</li><li>装饰类在系统越来越复杂之后会出现明显的膨胀。</li></ol><h2 id="JAVA-IO-典型的装饰模式："><a href="#JAVA-IO-典型的装饰模式：" class="headerlink" title="JAVA IO - 典型的装饰模式："></a>JAVA IO - 典型的装饰模式：</h2><p>​    首先说明<code>JAVA IO</code>类其实本质上<strong>并不是一个十分优秀的设计</strong>（因为复杂的装饰子类和API结构），这个问题可以查看《JAVA编程思想》作者对于JAVA IO复杂难用的API以及继承结构进行过的一系列吐槽，而且JAVA IO经过后面版本的迭代改进。使得原本的方法更加复杂多变，但是不管JAVA IO设计的API如何不“便民”，这一块的设计依然是非常值得学习和思考的，也是装饰模式最典型的使用。</p><p>​    下面为一张《Head First设计模式的一张图》说明一下JAVA IO装饰设计的装饰器膨胀问题:</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210208114348.png?ynotemdtimestamp=1613223296738" alt="img"></p><blockquote><ul><li>可以看到InputStream是一个抽象类。</li><li>在<strong>JDK1.5</strong>当中，他扩展自接口<code>java.io.Closeable</code>，规定需要接入装饰的类需要实现自己的流关闭方法。</li><li>在<strong>JDK1.7</strong> 中，在<code>Closeable</code>基础上增加了<code>java.io.AutoClosable</code>来实现流的<strong>自动关闭</strong>功能。</li></ul></blockquote><p>从上面的图标也可以看到装饰器的一些缺点：</p><ol><li>装饰类之间的具有复杂的继承结构</li><li>装饰者之间虽然<strong>可以互相嵌套，但是不一定互相兼容</strong></li></ol><blockquote><p>JAVA IO对于JAVA初学者来说十分不友好，从其他语言可以看到吸取了这一点的教训，通常都把IO流这一块设计的越简单好用越好（尽量的让调用者不需要去思考IO流的细节问题）。而JAVA IO 显然设计的不是很亲民。</p></blockquote><h1 id="总结装饰器模式："><a href="#总结装饰器模式：" class="headerlink" title="总结装饰器模式："></a>总结装饰器模式：</h1><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ 装饰者和被装饰对象有相同的接口。</span><br><span class="line">+ 可以用一个或多个装饰者包装一个被装饰对象或者被装饰对象。</span><br><span class="line">+ 既然装饰者和被装饰对象有相同的超类型，所以在任何需要原始对象（被包装的）的场合，可以用装饰过的对象代替它。</span><br><span class="line">+ 装饰者可以在所委托被装饰者的行为之前或之后，加上自己的行为，以达到特定的目的。</span><br><span class="line">+ 装饰者可以无限的嵌套，因为他们本质上归属于同一个接口</span><br></pre></td></tr></table></figure><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ 装饰者很容易出现大量的小类，这让了解代码的人不容易清楚不同装饰的设计</span><br><span class="line">+ 一个依赖其他具体类型的接口导入装饰者可能会带来灾难。所以导入装饰者要非常小心谨慎，并且仔细考虑是否真的需要装饰者模式</span><br><span class="line">+ 装饰者互相嵌套可能会增加代码的复杂度，也增加扩展装饰者子类的复杂度，最终这个难题会变成调用者的难题</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>​    许多的设计模式书籍都警告过装饰器模式是一个需要<strong>谨慎考虑</strong>的设计模式，因为装饰模式很容易会造成装饰类的膨胀，同时对于特定类型接入装饰类可能会有意想不到的灾难，同时在接入装饰类的时候，需要仔细的了解公用接口和抽象类的实现，需要了解这一类装饰针对的行为，否则只是简单的继承装饰父类或者继承接口可能会有一些莫名其妙的问题。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      设计模式装饰器模式
    
    </summary>
    
    
      <category term="设计模式" scheme="https://whitestore.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://whitestore.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《墨菲定律》读书笔记</title>
    <link href="https://whitestore.top/2021/02/14/mofeidinglv/"/>
    <id>https://whitestore.top/2021/02/14/mofeidinglv/</id>
    <published>2021-02-14T03:36:31.000Z</published>
    <updated>2021-02-14T03:38:54.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《墨菲定律》读书笔记"><a href="#《墨菲定律》读书笔记" class="headerlink" title="《墨菲定律》读书笔记"></a>《墨菲定律》读书笔记</h1><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210203141524.png" alt=""></p><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><pre><code>《墨菲定律》这本书在市面上有N个版本，个人买来纯粹凑单用的书，不抱着有啥质量，但是内容实在过于没有营养，这篇文章想说一下如何避开这种坑书，以及什么样的书不值得去读。</code></pre><blockquote><p>个人买到的版本为黑龙江美术出版社的版本</p></blockquote><a id="more"></a><h1 id="推荐程度："><a href="#推荐程度：" class="headerlink" title="推荐程度："></a>推荐程度：</h1><p><strong>凑运费用的书</strong>。完全不推荐。</p><h1 id="什么样的书不建议读："><a href="#什么样的书不建议读：" class="headerlink" title="什么样的书不建议读："></a>什么样的书不建议读：</h1><p>我是不排斥读到不好的书的，看不好的书可以让自己清醒的辨识能力，下面说一下一些受争议的书的看法：</p><h2 id="没有灵魂的书："><a href="#没有灵魂的书：" class="headerlink" title="没有灵魂的书："></a>没有灵魂的书：</h2><p>我们都知道字如其人，写书也是一样的，通过文字我们可以看到作者的思想，以及作者想要传达的意思，如果一本书没有核心，更简单的说作品没有“活力”，一本书如果能折射出一个观点或者一种思想，在我看来十分有教育意义，比如《活着》</p><h2 id="段子书："><a href="#段子书：" class="headerlink" title="段子书："></a>段子书：</h2><p>非常典型的就是阐明一个道理，然后举各种例证来证明这个道理，证明完之后说一下要怎么样做，不要怎么样做。比套版还要套版，感觉是个人仔细想想都可以写出来的书。</p><h2 id="鸡汤书："><a href="#鸡汤书：" class="headerlink" title="鸡汤书："></a>鸡汤书：</h2><p>鸡汤书和段子书类似，喝起来很甜，但是喝完对自己没有任何的营养，只有油水，这次的这本书就是典型的鸡汤书。</p><h2 id="文字堆砌的书："><a href="#文字堆砌的书：" class="headerlink" title="文字堆砌的书："></a>文字堆砌的书：</h2><p>这里要特别声明书可能重量相同，但是质量不同。这类书可以参考我之前的《SpringBoot实战派》读书笔记，感觉作者单纯是为了让书变厚，然后往里面加了很多的代码，实际读下来东西都非常的初级而且没有深入，很失望。但是同样对比一下《JAVA编程思想》，虽然很厚但是一直被推崇为一本神书，当然最大的败笔是翻译毁了这本书，个人觉得比较可惜。</p><h2 id="成功学："><a href="#成功学：" class="headerlink" title="成功学："></a>成功学：</h2><p>成功确实是不能复制的，但是成功的思想和经验可以参考，这一类书之所以不建议读是因为如果没有到达一定的阶段，这类书是没有参考价值的，但是如果自己的思想到达一定的阶段确实是可以达到一定的程度的。<strong>屁股决定脑袋</strong>，请读者记住这一点</p><h1 id="摘录："><a href="#摘录：" class="headerlink" title="摘录："></a>摘录：</h1><p>下面摘录一些个人稍微认真看了并且思考了一些的内容</p><ol><li>人的第一印象是非常重要的，人的第一印象和惯性思维有时候会让我们失去判断水准，但是从人性的角度来说，第一印象决定了你在他人心中的上限。所以无论如何，塑造一个良好的第一印象是非常重要的一件事。</li><li><strong>沉锚效应</strong>，心理学名词，指的是人们在对某人某事做出判断时，易受第一印象或第一信息<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/mlK/phY0=" title="https://baike.baidu.com/item/支配">支配<i class="fa fa-external-link"></i></span>，就像沉入海底的锚一样把人们的思想固定在某处。（百度百科）为了防止沉锚效应，我么需要掌握主动权，让自己始终保持头脑清醒，不要被花言巧语迷惑。</li><li>谨慎心理舒适区：不要给自己设置心理舒适区，如果一直在自己能接受的范围之内进行学习，是很难真正获得成长或者成长很慢，需要不断的反省和思考，努力破圈。</li></ol><h1 id="反省："><a href="#反省：" class="headerlink" title="反省："></a>反省：</h1><p>远离凑单，远离鸡汤，记住这次的教训，以后即使多出些运费都不能买这种书。这篇文章对个人对大意义就是如此。</p><h1 id="收获："><a href="#收获：" class="headerlink" title="收获："></a>收获：</h1><p><strong>搜索热榜的书请慎重考虑</strong>，虽然大部分时候搜索热榜的书挺靠谱，但是不排除运营商用搜索“清仓”这种行为，作为凑单也不建议购买的书，非常后悔买到这种书，把这本书卖回去直接变成 <strong>赠送</strong>。（套路啊）</p><h1 id="个人感悟："><a href="#个人感悟：" class="headerlink" title="个人感悟："></a>个人感悟：</h1><pre><code>墨菲定律无非就是越是害怕发生的事情越会发生。事情已经发生的情况下，我们唯一的选择就是接受结果，同时我们在面对事情最好的状态就是不卑不亢，这一点几乎很难做到。读这种书让我想起了刚学编程的时候看的谭浩强C语言设计的书（也是个人买的第一本编程书），就这本书来讲真的是一本遗臭万年的技术书籍，关键是很多学校在当时居然还大肆宣传，而且从销量来看卖的还不错。</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之前的读书方法论看到居然有100多收藏，把我吓到了，后续在构思一下要写什么内容，同时买了几本关于如何写读书笔记的书好好看下，希望下一篇可以写的更好。如果想了解什么东西欢迎留言。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      墨菲定律的法则
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2021年第一个100公里纪念</title>
    <link href="https://whitestore.top/2021/02/14/note/"/>
    <id>https://whitestore.top/2021/02/14/note/</id>
    <published>2021-02-14T03:35:13.000Z</published>
    <updated>2021-02-14T03:36:03.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021年第一个100公里纪念"><a href="#2021年第一个100公里纪念" class="headerlink" title="2021年第一个100公里纪念"></a>2021年第一个100公里纪念</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><pre><code>这篇文章纯粹是留个纪念，吹个小牛的同时鼓励自己再接再厉，给自己打个卡希望读者可以找到自己可以坚持的目标并且不断持续下去。</code></pre><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210201101029.png" alt=""></p><h2 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h2><ol><li>打卡本年第一个100公里，再接再厉</li><li>说说我的养生道。</li><li>我为什么要锻炼以及如何锻炼</li><li>自己锻炼之后的切实感受</li></ol><a id="more"></a><h2 id="为什么要锻炼？"><a href="#为什么要锻炼？" class="headerlink" title="为什么要锻炼？"></a>为什么要锻炼？</h2><pre><code>我一直抱持着**有命赚钱并且要有命花钱**的理念，虽然人生也就不过3万多天，但是我还是想 **活得久一些**，不想上了年纪各种疾病，同时自己也很清楚的认识到年轻时熬的夜，迟早是要还的**。最近几个月在不断的规律作息，准备好好的练练身体，自己的生物钟基本也就定了，不管有多急的事情，都尽量按时睡觉，定时休息，每天睡够7小时。这些才是要紧的事情。</code></pre><h2 id="我的计划："><a href="#我的计划：" class="headerlink" title="我的计划："></a>我的计划：</h2><h3 id="跑步："><a href="#跑步：" class="headerlink" title="跑步："></a>跑步：</h3><pre><code>跑步的计划是其实从去年12月份就已经开始了，当时花了大半个月每天晚上步行3公里，但是感觉收效甚微，后面就开始制定跑步计划了。1月份的前半个月我是隔天跑3公里左右，但是想到自己立了一个月100公里的`Flag`，后面就变成5公里跑步了。没想到自己还真的坚持下来了，不容易。</code></pre><blockquote><p>非常感谢之前的评论，这个截图我时不时翻出来看几眼，还是非常受到鼓舞的，这大概就是《刻意练习》里面说的寻找专业的人士进行建议。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201215121220.png" alt=""></p></blockquote><h3 id="饮食："><a href="#饮食：" class="headerlink" title="饮食："></a>饮食：</h3><pre><code>之前做过一个详细的饮食计划，然而**吃**这一块比较难以坚持，因为做软件开发脑力消耗太大，饭还是要吃的。不过都是吃自己做的饭菜，而且有在控制饭量，总体感觉是可控的，慢慢来吧。诀窍是控制晚饭的摄入，晚上8点后不能吃饭，运动锻炼可以少量摄入一些食物垫垫肚子。</code></pre><p>下面简单了列了一下个人早中晚三餐吃的比较多的东西。更多是需要控制<strong>米面的摄入</strong>和 糖类的摄入。</p><table><thead><tr><th>早餐</th><th>中餐</th><th>晚餐</th></tr></thead><tbody><tr><td>玉米</td><td>饭</td><td>面条</td></tr><tr><td>肠粉</td><td>绿色蔬菜</td><td>饺子</td></tr><tr><td>包子</td><td>西红柿</td><td>鸡蛋</td></tr><tr><td>薯饼</td><td>土豆</td><td>牛奶</td></tr><tr><td>茶叶蛋</td><td>其他肉类</td><td></td></tr><tr><td></td><td>鸡腿肉</td><td></td></tr><tr><td></td><td>虾</td><td></td></tr><tr><td></td><td>玉米</td><td></td></tr></tbody></table><h2 id="锻炼之后的感受："><a href="#锻炼之后的感受：" class="headerlink" title="锻炼之后的感受："></a>锻炼之后的感受：</h2><ol><li>白天干活有精神了：这点是实实在在可以感受的，以前去上班就和阉了的茄子一样，但是现在感觉每天醒来都是精神充足的（加班令我快乐）</li><li>增强自信：锻炼真的可以增强自信心，当你完成一次又一次的打卡，你会感觉很多事情都可以做到，同时在运动完成之后的那种畅快是只有经历过才知道</li><li>缓解焦虑：运动锻炼是一种排解焦虑和压力非常好的一种方式，比看鸡汤文和鼓励师的话语要强很多。</li><li>活跃思维：《程序员健康指南》这本书诚不欺我，跑完步之后学习新知识效果确实不错，不至于看专业书的时候昏昏欲睡，还是非常有效果的。</li></ol><h2 id="如何锻炼："><a href="#如何锻炼：" class="headerlink" title="如何锻炼："></a>如何锻炼：</h2><p>每个人生活习惯不同，这里简略说下我的锻炼方式</p><ol><li>健身环：目前已经在开始吃灰了，不过周末在家的时候偶尔还是会拿出来玩一下，健身环是一款比较突破和创新的作品，对于在家运动是一个不错的选择。当然经济开销比较大。</li><li>跑步：先从3公里开始，用走+跑的方式不断进行，同时意识的调整呼吸和步伐。提高耐受力，最开始可以选择隔天跑保持目标的完成而不需要在乎质量，等到有一定的体力之后，开始<strong>刷新</strong>自己的个人记录，刷新记录可以培养成就感同时对于个人成长也是十分有帮助的。</li><li>午后散步：午后散步是指每天中午饭后去外面走个20分钟，不需要太长时间，20分钟即可，对于消化食物挺不错的，同时有助于活动血液。偶尔还能晒晒太阳比较舒服</li><li>爬山：工作之后基本把工作地的小山大山爬了一个遍，但是感觉都没啥挑战性，可能这就是一线城市吧，能有山爬爬就算不错了。</li><li>周末去公园探险：平时周末喜欢去公园散散步放松心情，缓解一下生活压力啥的，还有一点是公园免费，有的公园景色也不错，比如下面这张图：</li></ol><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210201160729192.png" alt="image-20210201160729192"></p><h2 id="如何坚持锻炼："><a href="#如何坚持锻炼：" class="headerlink" title="如何坚持锻炼："></a>如何坚持锻炼：</h2><p>个人是一个喜欢自我驱动并且乐于行动的人，下面说下我是如何坚持锻炼的，希望给有想法锻炼的人一点鼓舞：</p><h3 id="学会目标分解："><a href="#学会目标分解：" class="headerlink" title="学会目标分解："></a>学会目标分解：</h3><pre><code>很多想锻炼的人有了目标并且有了计划之后，还是坚持不下来，计划写的很漂亮，执行力却不足，这里我个人认为最大的问题是 **不懂得分解自己的目标**。另一种是把**计划做的太完美**。不懂得分解自己的目标：按照个人的例子来讲，如果让我一上来就跑100公里，我是不会想去做的，**想到这个数字就很累**，于是我简单做了一个规划。我把**100公里**拆成多个小周期或者一整个周，**每周**或者每几天完成**5分之一**就行，不在意什么时候完成，每天跑多少，只要在这一个时间内做成这件事，那就算是完成了。把计划做的太完美：越完美的计划空隙越多，个人更加偏向**简单的计划+强力的执行力**，通过尝试之后，再去做更详细的计划，这样的计划既可以符合自己的实际需求，同时也可以满足自己的心灵需要。</code></pre><h3 id="锻炼变成生活而不是作业："><a href="#锻炼变成生活而不是作业：" class="headerlink" title="锻炼变成生活而不是作业："></a>锻炼变成生活而不是作业：</h3><pre><code>很多时候我们把减肥和锻炼看成是“作业”来为难自己，我的建议是把锻炼看做是消遣，最开始不要去想自己靠锻炼去获得什么，因为锻炼不是一天两天是看的到效果的，看不到效果人就会丧失斗志，丧失斗志人就会开始找借口去逃避，最后不了了之。</code></pre><blockquote><p>锻炼确实和做作业差不多，唯一区别是你知道寒暑假不需要做作业，但是锻炼确实没有时间期限的。</p><p>另外，做作业的第一步是拿起笔而不是想做作业，所以<strong>先尝试再去思考</strong>，可能更容易坚持下去。</p></blockquote><h3 id="先做加法之后再做减法："><a href="#先做加法之后再做减法：" class="headerlink" title="先做加法之后再做减法："></a>先做加法之后再做减法：</h3><pre><code>这个观点说的也是改变思维方式，要把任务看成是完成进度条一样，可以加载慢但是只要慢慢加载就可以完成。而不是看多少没有完成，因为有时候各种琐事会妨碍我们去完成目标，聚会，活动，家事，加班等等原因，一上来做减法会不断的延后并且我们可能会寻找各种理由来说服自己 **不去做那些事**，这种时候就要抛开减法的思想，从做加法开始。当加法熟练了之后，我们便可以尝试做减法不断的鼓励自己把任务越做越少</code></pre><h3 id="做日记："><a href="#做日记：" class="headerlink" title="做日记："></a>做日记：</h3><pre><code>永远要记住**锻炼不是PS，锻炼的目的是拥有一个健康的身体**。如上面所说的，因为**锻炼短期看不到效果**，所以最好的方式就是**每天做好日记**，不管是否锻炼，每天记录和打卡，写下自己锻炼时候的心情，锻炼完之后的感受。这个日记每天都要看一遍和回顾，有助于不断的督促和勉励自我。</code></pre><blockquote><p>很多人会想，正常人谁写日记呀？我的理解是写日记可以看出自己有没有偷懒，如果你看到自己的日记每天写一写流水账，或者中间一大段时间都是没有记录的。是否会感到羞愧呢，所以充实自己的笔记是一个监督和提升的过程。</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210201111908.png" alt=""></p><h3 id="设置有难度的奖励："><a href="#设置有难度的奖励：" class="headerlink" title="设置有难度的奖励："></a>设置有难度的奖励：</h3><p>注意前提是有难度，做法也很简单，找一件自己很想要但是又不舍得买的东西，比如耳机，键盘啥的。给自己定个目标，完成了就买下自己想要的东西作为奖励。个人是通过买一个无线蓝牙耳机作为目标奖励来犒劳自己的，到手那一刻一种自豪感油然而生。</p><blockquote><p>个人认为这种法子也很适合抵制冲动消费和报复式消费。可以树立比较正确的消费观念</p></blockquote><h3 id="不太鼓励的积分制度："><a href="#不太鼓励的积分制度：" class="headerlink" title="不太鼓励的积分制度："></a>不太鼓励的积分制度：</h3><p>之前看到网上有做积分制度来做奖励的鼓励自己坚持的，个人感觉积分要 <strong>有他人的监督</strong>情况下才有可能执行，因为人的本性<strong>喜欢创造规则而自己不愿意在规则当中</strong>。所以如果你想设计一套自己的积分制度，我这里推荐是和朋友或者家人一起制定，并且积分直接和 <strong>钱</strong>挂钩，这样才会有效果。</p><h2 id="个人养生道："><a href="#个人养生道：" class="headerlink" title="个人养生道："></a>个人养生道：</h2><h4 id="喝茶"><a href="#喝茶" class="headerlink" title="喝茶"></a>喝茶</h4><p>由于老家有父亲自己种的茶叶，并且大部分时候都是<strong>自产自销</strong>，而家里也就只有我爸喜欢喝茶，从还未懂事起就跟着我爸学着喝茶，这一喝就是喝了10多年，喝到现在基本每天都要喝上一小杯，和上瘾一样。（当然个人喝的都是一些淡茶，不会喝太浓的茶）至于喝茶影响休息，我只能说可能人和人的体质不一样，我是不会出现喝茶睡不着的情况，只要想睡觉就可以睡着，感觉还是挺幸福的。</p><blockquote><p>曾经大学室友半夜在宿舍里面一群人煮火锅我也没有醒，其实有点佩服自己的睡觉功力</p></blockquote><h4 id="规律作息"><a href="#规律作息" class="headerlink" title="规律作息"></a>规律作息</h4><p>规律作息其实也挺简单的，就是放下手机，放空大脑，同时最重要是躺在床上。基本上过个十几分钟就睡着了。这里说一下熬夜和晚睡是两码事，熬夜是一种作息不规律的表现，今天10点睡，明天凌晨睡，这样对自己的身体伤害其实是很大的。</p><h4 id="用思考代替情感，而不是用情感控制思考"><a href="#用思考代替情感，而不是用情感控制思考" class="headerlink" title="用思考代替情感，而不是用情感控制思考"></a>用思考代替情感，而不是用情感控制思考</h4><p>对于工作党来说，<strong>每天下班之后的时间是自己最自由的时候</strong>，我也是喜欢晚睡的，但是每次有这种想法之后，就会马上掐断这个念头，乖乖睡觉去。做行动之前，先用头脑代替身体思考一下，是否是正确的。如果你问我如何治疗失眠，很简单，去B站搜一个高数的课程，保证5分钟就躺了（笑）</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><pre><code>今年争取跑个**1200公里**，完成了就给自己买个**PAD**或者买个电纸书。如果你也想锻炼身体，那就马上给自己定制目标，然后**行动**起来吧！</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      跑步打卡和纪念
    
    </summary>
    
    
      <category term="健康" scheme="https://whitestore.top/categories/%E5%81%A5%E5%BA%B7/"/>
    
    
      <category term="纪念" scheme="https://whitestore.top/tags/%E7%BA%AA%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>《SpringBoot实战派》读书笔记</title>
    <link href="https://whitestore.top/2021/02/14/springbootbook1/"/>
    <id>https://whitestore.top/2021/02/14/springbootbook1/</id>
    <published>2021-02-14T03:33:43.000Z</published>
    <updated>2021-02-14T03:34:52.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《SpringBoot实战派》读书笔记"><a href="#《SpringBoot实战派》读书笔记" class="headerlink" title="《SpringBoot实战派》读书笔记"></a>《SpringBoot实战派》读书笔记</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这本书是个人<strong>抽奖送的</strong>，但是看完的感觉就是心情复杂。看了几天之后算是对于SpringBoot做了一个回顾，但是脑子里没有留下印象太深的东西。这篇读书笔记个人本来不太想要写的。但是秉持着看书必须写读书笔记的习惯，还是评价一下这本书。</p><a id="more"></a><h2 id="推荐程度："><a href="#推荐程度：" class="headerlink" title="推荐程度："></a>推荐程度：</h2><p>豆瓣<strong>7.1</strong>的打分。</p><p>不值得收藏的书，也不值得购买，80元你可以买好几本更有质量的编程书。甚至买几本出名的小说也可以比这个好。</p><p>对于熟悉的人，可以拿来查漏补缺，也可以拿来做半个工具书。</p><p>如果你是了解了springboot同时想要深入SpringBoot的，这本书也是没有什么价值。没有学过SSM直接上手SpringBoot看一下。这本书还是可以看一下的。</p><h2 id="本书评价："><a href="#本书评价：" class="headerlink" title="本书评价："></a>本书评价：</h2><ul><li><p>优点</p><ul><li><p>适合初学者</p></li><li><p>适合对于spring boot从未接触的人</p></li><li><p>内容总结比较齐全，涵盖spring boot的应用</p></li></ul></li><li><p>缺点</p><ul><li><p>代码占了很多篇幅</p></li><li><p>内容比较基础和入门</p></li><li><p><strong>很厚，但是没有营养，不建议买</strong></p></li></ul></li></ul><h2 id="思维导图："><a href="#思维导图：" class="headerlink" title="思维导图："></a>思维导图：</h2><p>简单画了一下一些内容，加上自己做的一些笔记</p><p><span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvNjBzMFZCWVl6RVI=" title="https://share.mubu.com/doc/60s0VBYYzER">https://share.mubu.com/doc/60s0VBYYzER<i class="fa fa-external-link"></i></span></p><h2 id="目录截图："><a href="#目录截图：" class="headerlink" title="目录截图："></a>目录截图：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMTAxMzAxNzE2MTMucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130171613.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130171613.png<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMTAxMzAxNzE3MjIucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130171722.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130171722.png<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMTAxMzAxNzE3MzQucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130171734.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130171734.png<i class="fa fa-external-link"></i></span></p><h2 id="感悟："><a href="#感悟：" class="headerlink" title="感悟："></a>感悟：</h2><p>作为小白学习来说，这本书算是不错而且合格的书，但是技术的更迭实在太快了，这些书基本参考大于实际的使用价值。</p><p>这次的文章希望可以给想买书的人一点提醒把，这本书对于想要深入SpringBoot的人没有啥价值。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>SpringBoot的东西还是建议多看看官方文档，或者说所有的东西学习都建议看官方文档，毕竟设计出框架的人虽然不见得可以讲得很好，但是讲得东西绝对都会对的。</p><p>越来越感觉近几年写的好书越来越少，不得不跑去看以前的一些旧书，这本书还是差点意思。</p><p>技术书还是建议多做做笔记，然后思考可以学到什么再去看，这样效果会比较好。最近跑去转转上买了不少书，开始慢慢看咯。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      springboot是实战派的读书笔记
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>我的读书方法论（一）</title>
    <link href="https://whitestore.top/2021/02/14/readbookmethod1/"/>
    <id>https://whitestore.top/2021/02/14/readbookmethod1/</id>
    <published>2021-02-14T03:30:51.000Z</published>
    <updated>2021-02-14T03:33:13.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的读书方法论（一）"><a href="#我的读书方法论（一）" class="headerlink" title="我的读书方法论（一）"></a>我的读书方法论（一）</h1><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>这篇文章主要是之前的读书笔记发文有评论说让我写一篇文章介绍下如何读书和做读书笔记的，本人对于答应的事情都会尽力去完成，所以这篇文章是个人读书方面的总结。具体要不要照做就由读者自己决定了。个人用碎片时间把：《小狗钱钱》、《穷爸爸与富爸爸》、《Redis实战》、《漫步华尔街》…..还是看了不少书的。</p><a id="more"></a><blockquote><p>特别提示一下：读书经验和<code>5W1H</code>的法则几乎在哪里都是通用的。本篇文章为个人的经验分享。</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130193715.png" alt=""></p><h1 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h1><ol><li>说到做到，承诺第一。这是个人的信条。</li><li>个人买书、看书的心得和理解。</li><li>读书既是兴趣，也是个人爱好，说一下个人的读书方式和实践</li><li>适合的才是最好的，这篇文章更多的是经验参考而不是照搬</li><li><strong>如果不会规划和计划，那就先开始行动</strong>。行动派往往会有所收获</li></ol><h1 id="思维导图："><a href="#思维导图：" class="headerlink" title="思维导图："></a>思维导图：</h1><p>我把这篇文章做了一份思维导图，如果觉得文章内容太多建议可以看看思维导图：</p><p><span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvNWloSzVLdUJrbFI=" title="https://share.mubu.com/doc/5ihK5KuBklR">https://share.mubu.com/doc/5ihK5KuBklR<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvNWloSzVLdUJrbFI=" title="https://share.mubu.com/doc/5ihK5KuBklR">幕布思维导图<i class="fa fa-external-link"></i></span></p><h1 id="碎片时间"><a href="#碎片时间" class="headerlink" title="碎片时间"></a>碎片时间</h1><h2 id="什么是碎片时间？"><a href="#什么是碎片时间？" class="headerlink" title="什么是碎片时间？"></a>什么是碎片时间？</h2><p>在具体介绍之前，说明一下个人看书更多的是利用碎片时间看书。我相信工作党<strong>利用好碎片时间</strong>读书才是最重要的，因为工作一周之后周六周末还要读书真的是一件比较难的事情。</p><p>如果是在校学生，那么基本不存在碎片的时间，除非存在很长的通勤时间或者存在兼职等。至于上班党的碎片时间基本就是地铁公交车或者路上了。</p><ol><li>上班的通勤时间或者远程旅行路途的时间</li><li>发呆时间：无论工作还是学习，人脑都不可能保存100%的全神贯注，随着时间的推移，人脑会不自觉的“发呆”</li><li>任何细碎的事情开销时间，吃饭，刷牙等等</li><li>路上琐碎的时间。</li></ol><h2 id="如何利用好碎片时间？"><a href="#如何利用好碎片时间？" class="headerlink" title="如何利用好碎片时间？"></a>如何利用好碎片时间？</h2><ul><li>个人买了一个<strong>Kindle Oassis2</strong> 在地铁上看电子书，同时推荐买一个kindle看书，很轻很方便。当然要有一定的经济能力。</li><li>手机上可以用微信读书看书，或者用<strong>樊登读书</strong>进行听书，喜马拉雅听说也不错，不过我没有试过，不做评价</li><li>地铁或者公交车上看书（最常见）</li><li>阅读以前个人做的笔记（帮助反馈）</li></ul><blockquote><p>个人的KINDLE是购入二手，电纸书个人觉得买个二手完全OK，面交我也不怕有什么猫腻。如果自己看走眼也怨不得任何人。还是强烈推荐弄个电纸书看书，能抱着手机不分心看书的人一定都是很强的人，反正我是做不到（看小说除外）</p></blockquote><h2 id="碎片时间的计算："><a href="#碎片时间的计算：" class="headerlink" title="碎片时间的计算："></a>碎片时间的计算：</h2><p>下面的内容比较理想化，内容主要和自己的生活比较贴合。粗略看下即可。</p><h3 id="通勤时间：一个半小时"><a href="#通勤时间：一个半小时" class="headerlink" title="通勤时间：一个半小时"></a>通勤时间：一个半小时</h3><p>碎片时间以个人的生活为例</p><blockquote><p> 前提：手机或者电纸书。</p></blockquote><p><strong>个人上下班约等于1个半小时</strong></p><p>除开必要的20分钟路上消耗的时间，这个时间<strong>不建议看书</strong>，而是好好看路，也不要看手机。这个时间就好好走路，注意走路的姿势。</p><blockquote><p>去年个人发生过一件事情让自己在路上再也不敢玩手机，当时在过马路遇到过路拖着3个煤气罐的摩托车，差点撞到，从那天开始很少在马路上拿出过手机。</p></blockquote><p>地铁上的1个左右小时,这里合并了上下班，换线等时间进去，这里的时间可以看大概10到20页书左右，看的快可以把一本很厚的书扫完一小半，厉害的可以扫完一大半。这里提一下地铁上不建议看博客或者过于专业的内容，除非你在到了公司之后可以马上进行记录和回顾，地铁上也不建议过于深度思考，容易坐过站，而且换线次数多很容易打断思路。</p><p>通勤时间推荐：<strong>听书代替文字阅读，视频教程代替文字阅读，思维导图代替文字阅读</strong></p><h3 id="午休时间：两小时"><a href="#午休时间：两小时" class="headerlink" title="午休时间：两小时"></a>午休时间：两小时</h3><p>个人午休时间一般为<strong>10到15分钟</strong>，同时公司午休两个小时，这个时间的碎片时间可以干不少事情。</p><ol><li>吃饭<strong>半小时</strong>：由于个人一般自己做饭带饭，很少出去外面吃，所以吃饭的时间开销不是特别大</li><li>午休15分钟左右，浅睡眠即可，深睡眠被叫醒影响下午的工作</li><li>当别人在休息，你在充实自己的时候，会很开心。</li></ol><p>午休时间推荐：看专业书籍、看看视频教程、听听音乐，谢谢文章和笔记。</p><h3 id="下班后时间：三到四小时"><a href="#下班后时间：三到四小时" class="headerlink" title="下班后时间：三到四小时"></a>下班后时间：三到四小时</h3><p>这里的时间是除开了在路上的时间。下班后的时间需要好好利用，下面说下个人在做的一些内容：</p><ol><li>看些专业之外的书籍（睡前读半小时）</li><li>看专业的书籍，做好笔记和内容分类</li><li>刷题或者做练习，思考和查资料</li><li>看视频教程，边听边做笔记</li><li>系统学习，输入和输出自己所学所想</li><li>回顾和总结以前的内容</li><li>定目标，做计划，完成并且打卡</li></ol><h3 id="周六周日："><a href="#周六周日：" class="headerlink" title="周六周日："></a>周六周日：</h3><p>这一部分变动比较大，有时候会出去锻炼一下身体，有时候会在家看书或者写写文章啥的，个人没有做过特别具体的安排，这里就不做论述了。</p><ul><li>自由安排</li><li>锻炼身体</li><li>写文章</li><li>做笔记</li><li>看视频教程</li></ul><h2 id="规划自己的碎片时间"><a href="#规划自己的碎片时间" class="headerlink" title="规划自己的碎片时间"></a>规划自己的碎片时间</h2><p>上面的计算只是粗略的规划，还是建议读者有自己的规划，个人用APP作时间规划，这里就不过多展示了，否则容易被限制思维而且估计也不太贴合所有人。规划碎片时间的目的是让自己清楚什么时间要做什么事情，久而久之形成习惯之后，自然就可以总结出自己的那一套经验。</p><blockquote><p>个人比较自由，不喜欢做表格或者卡时间点，因为发现自己曾经做的具体计划最终因为琐事都放弃，所以后续个人只要在自己设置的时间完成了自己该做的事情，就算是达标了。这一点<strong>希望读者不要学</strong>，我是一个懒人，懒人有懒人的办法，哈哈。</p></blockquote><h1 id="读书之前书的准备"><a href="#读书之前书的准备" class="headerlink" title="读书之前书的准备"></a>读书之前书的准备</h1><p>读书之前你先得有一本书，同时要有一个良好的环境，下面说下读书之前的一些准备以及一些买书的方案。</p><h2 id="事前准备："><a href="#事前准备：" class="headerlink" title="事前准备："></a>事前准备：</h2><ol><li><strong>把手机塞到看不到的地方</strong></li><li>一把舒适的椅子，最好可以躺下</li><li>一个支撑书的阅读架或者任何可以把书撑起来的物品</li><li>一本想看的书，只要一本就足够</li><li><strong>Ipad或者KINDLE（视个人）</strong></li><li>一份购书清单和读书的清单</li></ol><blockquote><p>个人买的NICE202d阅读架：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMTAxMzExMjE5MjkucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131121929.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131121929.png<i class="fa fa-external-link"></i></span></p><p>个人做的打卡本：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMTAxMzExMjIxMTIucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131122112.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131122112.png<i class="fa fa-external-link"></i></span></p></blockquote><h2 id="购书清单："><a href="#购书清单：" class="headerlink" title="购书清单："></a>购书清单：</h2><ol><li>列出自己想看的所有书籍。</li><li>合适价格，多家对比。</li><li>寻找合适的购书渠道。</li><li><strong>自己是否真的想看，是否真的能看完</strong></li></ol><h2 id="如何买书？"><a href="#如何买书？" class="headerlink" title="如何买书？"></a>如何买书？</h2><p>在去年以前我很抵触<strong>买二手书</strong>这件事情，但是今年有了改观，其实二手书对于有<strong>书本洁癖</strong>的人来说是碰不得的东西，但是我个人比较偏向书本内容，也没有收藏书本的爱好，所以今年换了一种买书方式，选择在专业的二手书机构买书，买完总结好然后卖回去，循环利用。</p><h3 id="买一手书的方式："><a href="#买一手书的方式：" class="headerlink" title="买一手书的方式："></a>买一手书的方式：</h3><p>一手书现在买的已经比较少了，买的一手书一般都是自己会保留较长时间兴趣书，可能是自己喜欢的书或者一些漫画。</p><ol><li>狗东：狗东买书个人也是冲着满减去的，没有满减我也不会买，买之前找一些APP看下价格对比，价格合适我就直接下单了</li><li>当当：<strong>不建议去当当买</strong>，而且要买就乘着满100减50的时候买书，有时候存在优惠券啥的可以买</li><li>某宝：某宝买书买的比较多的是台版的小说，技术书籍买的比较少。</li></ol><h3 id="买二手书的方式："><a href="#买二手书的方式：" class="headerlink" title="买二手书的方式："></a>买二手书的方式：</h3><p>买二手书也就那么几家，所以无所谓打不打广告了。个人的策略是买入二手书之后做好记录然后抽时间卖出去这种循环利用的形式。</p><p>转转：</p><p>转转的书 <strong>大部分时候比较靠谱</strong>，小部分时候存在缺页的问题，比如个人之前在读书笔记里面的 《恶意》这本书。同时转转上的书也比较靠谱，目前个人买书没有发现和商家描述出入很大的地方。</p><p>闲鱼：</p><p>闲鱼买书基本就是两种，一种是二手贩子，不过二手贩子大多书都是盗版扫描版，纸质非常差，买过一次之后我就没有在上面买过二手贩子的书。</p><p>第二种是搬家带不走出售，这种情况比较还是比较多的，这种看一下卖家个人评价基本可以放心买了。有时候运气好可以买到几乎全新的书，比如个人去年低价购买了一本《计算机程序的构造和解释》：（个人也有一个十多斤的书架和书=-=）</p><blockquote><p>个人在闲鱼买的一本准全新的书：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMTAxMzExMjIxMzgucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131122138.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131122138.png<i class="fa fa-external-link"></i></span></p></blockquote><p>多抓鱼：</p><p>多抓鱼的书第一次买是非常实惠的，对于新用户优惠的力度很大，但是二次之后购买需要<strong>80多</strong>才包邮，所以多抓鱼并不推荐买少量的书，而是推荐大量购入书的时候买入。</p><blockquote><p>二手书对于书本爱惜的人慎入。</p></blockquote><h2 id="关于借书："><a href="#关于借书：" class="headerlink" title="关于借书："></a>关于借书：</h2><p>买书还有一种特殊的形式是借书，通过借书的形式推动自己看书也是一种办法，不过需要注意借书不能在上面进行勾画，所以需要好好爱惜。</p><p>借书的成本一般都比较低，有些公司或者学校的图书馆都提供免费的书籍借阅，还是挺不错的。<strong>建议多借一些和公司业务贴合以及专业的书，对于自己的成长也是有帮助的</strong></p><h1 id="读书笔记该怎么写："><a href="#读书笔记该怎么写：" class="headerlink" title="读书笔记该怎么写："></a>读书笔记该怎么写：</h1><p>读书笔记最主要的是自己从中<strong>学到了什么</strong>，精简自己学到的内容。最后归总到自己的笔记里面。然后就是定期回顾，不断总结和完善。</p><h2 id="读书之前思考："><a href="#读书之前思考：" class="headerlink" title="读书之前思考："></a>读书之前思考：</h2><p>读书是一件代价很大的事情（时间成本），在看书之前一定要考虑好这本书要从里面学到那些内容。下面就读书的思考说一下个人的观点。</p><ol><li><strong>我为什么要看这本书？</strong><ol><li>被人推荐</li><li>偶然得知书名</li><li>慕名已久，想看</li><li>无聊</li></ol></li><li>看了这本书之后，我要学到哪些东西？<ol><li>扩展眼界，原来这本书这么有趣</li><li>惊喜，我从书中的内容纠正了以往的观念</li><li>这本书没有营养，以后少看这种书</li><li>鸡汤书，感化心灵却没有实际意义</li></ol></li><li>画思维导图<ol><li>构图：思维导图的大致设计</li><li>想看的内容：内容进行摘录</li><li><strong>切勿模仿</strong>，思维导图是根据个人习惯来的，COPY别人的思维导图实际作用不大（个人亲身感受）</li></ol></li><li>做好阶段笔记<ol><li>第一阶段：摘录书中内容，简单批注自己的看法</li><li>第二阶段：整理思维导图，时常回顾</li><li>第三阶段：复盘和总结，提炼知识点</li></ol></li><li>这本书我要看几遍<ol><li>一遍看完：读的快还是慢，是仔细看还是大致扫一眼（个人主要是一遍看完）</li><li>至少看三遍：一遍大致了解，两遍反思内容，三遍精简内容。</li><li>在精不在多，侧重某一处内容。</li></ol></li><li><strong>这本书我要多久看完</strong><ol><li>设置一个很长的时间段，每天看多少页（<strong>很强很强的执行力</strong>）</li><li>随机阅读：有时间就读，有碎片时间就读（<strong>很强的自律性</strong>）</li><li>缩短时间，设置一个死线，在死线时间之前看完（<strong>意外情况较多，完成率较低，但是最推荐的方法</strong>）</li><li>什么时候看完不要紧，只要看完就行了（<strong>推荐看书就想睡觉的人</strong>）</li></ol></li></ol><h2 id="读书方法："><a href="#读书方法：" class="headerlink" title="读书方法："></a>读书方法：</h2><p>这里可以看一下我的其中一篇读书笔记：</p><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODc2MjkxMTM3NzEyMTYwNzgx" title="https://juejin.cn/post/6876291137712160781">https://juejin.cn/post/6876291137712160781<i class="fa fa-external-link"></i></span></p><ol><li>快速读：每页只看一秒，在5分钟内看完一本书</li><li>读三遍：每一遍都有不同的体验</li><li>想怎么读就怎么读，自由的读</li><li>每次只读30分钟，去干别的事情</li><li>读一点点，不需要全部看完</li><li>抄书</li><li>把看到的东西读出来</li><li>N/Z阅读法</li><li>找<strong>书评视频</strong></li></ol><blockquote><p>这本书也是十分推荐看的一本书，很小一本的口袋书，可以随时拿起来翻翻看，很快乐</p></blockquote><h2 id="实践书中的内容"><a href="#实践书中的内容" class="headerlink" title="实践书中的内容"></a>实践书中的内容</h2><p>读书是为了学以致用，当然也不是所有书都可以马上学以致用的，但是我们可以努力回想那些时候可以实践并且写到自己的读书笔记里面。</p><p>实现书中的内容，不管是读书还是做笔记都可以分为以下三种：</p><ol><li>克隆：说白了就是把觉得重要的点或者感兴趣的地方做标记，因人而异</li><li>深度思考：这个阶段说明你在消化书中的内容，也说明你真的把书看进去了</li><li>记录和总结：针对作者某一处的点，进行评价和讨论</li><li>举一反三，尽量批判性角度看待书中的内容。之所以说尽量是因为<strong>没有人可以完全客观的看待任何一个事物</strong>，要知道写书人的经历和读者的经历肯定是完全不同的。</li></ol><h2 id="这本书带给你什么？"><a href="#这本书带给你什么？" class="headerlink" title="这本书带给你什么？"></a>这本书带给你什么？</h2><p>这里不以书为例，以最近个人看的漫画 <strong>《进击的巨人》</strong>，网上有评论说这是除开《钢之炼金术士》的又一部神作，里面有一段是将艾伦对于自由的看法，同时个人的理解如下：</p><blockquote><p>巨人漫画：“每个人都是自由的，我为了保护重要的事情做出我的行动是我的自由，你们阻止我达成我的目的是你们的自由，我所向往的自由会阻碍你的自由，而你的自由同样会阻碍我的自由，这时候我们的信念互相冲突，为了我的自由和你们的自由，唯一方式就是战斗”。</p><p>个人观点：自由是有尺度的，没有限制的自由最终基本演变为强权和专制。越高的自由，对自由的限制就越为宽泛，我们时常用我们自己的思想妄图去 <strong>控制</strong>时间，其实这是为了达到我们自己的自由，每个人有每个人的活法，<strong>他人的自由想法是他人的意愿，与我无关</strong>，尊重他人的自由其实是一件非常难的事情。</p><p>可以举例来讲就是最近几年兴起的<strong>网络暴力</strong>，网络语言的力量是十分强大的，他控制着他人的自由。</p><p>另外举一个例证：离开了手机，你能否活下去，答案是 <strong>完全不能</strong>。所以手机实质上已经限制了我们的“自由生活”。</p></blockquote><p>每个人对于同一段内容的理解都不相同，所以读书首先要确定的是自己的立场，自己怎么看待作者想要表达的意思。如果带给自己的东西给自己的思想有所进步，同时让自己往好的方面进步，那就是对你带来好的帮助，否则带来的收效就很小。</p><p>写下自己的感受并且发表：</p><ol><li>永远要记住看书其实就是和作者对话，我们不要被作者花言巧语给骗了，看书一定要写上自己的观点，不管是同意还是不同意，主动学习和思考对于吸收和归纳书籍的内容是很有帮助的。</li><li>其次是发表自己的观点，很多人喜欢把知识藏着掖着，早些年个人也是不太喜欢分享自己的所学所想，怕别人说幼稚或者批评和错误，但是工作之后 <strong>脸皮变厚了</strong>，很多事情都敢放下脸面去做了</li><li>总结和反馈，是最好的良药，可以随身揣个小本本，遇到好东西或者好的话语直接记在本子上，其实也是一种不错的方式。</li></ol><h2 id="做好笔记-最合适的才是最好的："><a href="#做好笔记-最合适的才是最好的：" class="headerlink" title="做好笔记,最合适的才是最好的："></a>做好笔记,最合适的才是最好的：</h2><p>网上有很多人介绍自己的学习方法，比如近几年比较推崇的 <strong>电子化学习方式</strong>，个人目前也是用的这种方式，但是个人早期也是一个忠实的 <strong>纸质化学习方式执行者</strong>。至于为什么，下面说下我的理解：</p><h3 id="纸质化笔记和电子笔记对比："><a href="#纸质化笔记和电子笔记对比：" class="headerlink" title="纸质化笔记和电子笔记对比："></a>纸质化笔记和电子笔记对比：</h3><p>下面就个人理解来对比一下纸质笔记和电子笔记。说下各自的优劣以及我的做法。</p><h4 id="纸质笔记的优劣："><a href="#纸质笔记的优劣：" class="headerlink" title="纸质笔记的优劣："></a>纸质笔记的优劣：</h4><p><strong>优势</strong>：</p><ol><li>一处内容相当于理解了三遍，肌肉记忆了一遍，大脑记住了一遍，看到了一遍，对于经常做纸质笔记的人来说非常快。</li><li>读书笔记可以随取随时翻页，可以快速的阅览</li><li>纸质笔记最大的优势在于可以前后对比，同时非常快速的进行回顾</li></ol><p><strong>劣势</strong>：</p><ol><li>携带和存储不便，需要一定的环境</li><li>纸质笔记时间长了页面发黄，字体模糊等</li><li>纸质笔记的记录速度比较慢</li></ol><h4 id="电子笔记的优劣："><a href="#电子笔记的优劣：" class="headerlink" title="电子笔记的优劣："></a>电子笔记的优劣：</h4><p><strong>优势</strong>：</p><ol><li>易存储，可以存放各大APP或者网盘，迁移方便</li><li>打字的速度要比纸质笔记要快很多，记录快速</li><li>方便整理和总结。</li></ol><p><strong>劣势</strong>：</p><ol><li>电子笔记也存在丢失的问题，所以建议多备份</li><li>电子笔记一般存储在三方平台等，不能存储机密信息</li><li>电子笔记无法对比和复盘</li></ol><h3 id="为什么我不用纸质笔记"><a href="#为什么我不用纸质笔记" class="headerlink" title="为什么我不用纸质笔记"></a>为什么我不用纸质笔记</h3><ol><li>在外地工作，纸质笔记不仅不便携带，并且搬家成本很高</li><li>电子笔记可以更好的分享而纸质笔记自己偏向个人的感受</li><li>打字的速度终究快于写字的速度</li><li>快节奏的时代想静下心来写写笔记对个人来说是件难事</li></ol><h3 id="电子笔记的几点警告："><a href="#电子笔记的几点警告：" class="headerlink" title="电子笔记的几点警告："></a>电子笔记的几点警告：</h3><ul><li>首先需要确定自己会不会分神，就好比我们想打开电脑或者手机想看本书的时候，不自觉的就和别人聊天或者干其他的事情</li><li>每次只做一件事情，一次把一件事情做好，厚书读薄。</li><li>可以写一些便签，贴在最显眼的位置，反复警告自己要去实践和完成。</li><li>如果不能控制自己，最好不要买各种多样化的电子平板，否则很容易爱奇艺。</li></ul><h3 id="我是如何整理电子笔记的："><a href="#我是如何整理电子笔记的：" class="headerlink" title="我是如何整理电子笔记的："></a>我是如何整理电子笔记的：</h3><ol><li>我的笔记和文章都是按照 <strong>月份去归纳的</strong>，到目前已经记录了<strong>两年</strong>的笔记，所以一直沿用这周记录方法，很简单，按照 <code>年份+月份</code>的方式放在一个文件夹</li><li>目录很重要，先设计目录，设计标题，然后细化分类，方便自己的回顾和总结</li><li>多备份，不要完全依赖各种APP或者电脑硬盘。个人常备一块移动机械盘进行存盘</li><li><strong>养成定期备份</strong>（纸质笔记无法备份的劣势）</li></ol><h2 id="刻意练习才能越做越好："><a href="#刻意练习才能越做越好：" class="headerlink" title="刻意练习才能越做越好："></a>刻意练习才能越做越好：</h2><p>我的观点是：<strong>再好的计划和规划不如马上行动</strong>。一旦有了想看书的想法就立马下单买一本书。因为你进行了投资，所以</p><p>这里同时也推荐一下《刻意练习》这本书，这本书精简起来其实就是：有目标，达成目标不断练习，反馈，产出。</p><blockquote><p><strong>不想看书</strong>的推荐去 “樊登读书”看一下樊登的概括。基本和看一遍书类似</p></blockquote><h2 id="笔记做出自己的特色："><a href="#笔记做出自己的特色：" class="headerlink" title="笔记做出自己的特色："></a>笔记做出自己的特色：</h2><p>这一部分比较主观，还是推荐一些外力工具辅助吧。</p><ol><li>荧光笔：荧光笔适用于自己的书，同时建议多配颜色，内容标色可以有醒目的提示。目前这种形式多见于喜欢纸质笔记的人。</li><li>便签：可以买一些标签贴或者一些标签，直接贴在对应的页码进行备注，写下自己的感受和批注等</li><li>书签：书签和上面读书方法一致，个人买的实体书基本都会配一个标签，和做任务的任务进度一般，可以培养成就感</li></ol><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h1 id="怎么样才能坚持读书？"><a href="#怎么样才能坚持读书？" class="headerlink" title="怎么样才能坚持读书？"></a>怎么样才能坚持读书？</h1><h2 id="借助外力："><a href="#借助外力：" class="headerlink" title="借助外力："></a>借助外力：</h2><p>远离手机：</p><p>远离手机的方式有很多，但是我发现很多干编程的朋友都不喜欢在周末看电脑，个人比较喜欢看电脑，包括文档和学习都是看电脑完成</p><p>做一份打卡记录表：</p><p>个人目前在某拼团APP买了一本打卡本，每天记录自己打卡的进度，当然个人完成的进度不是很好，还要更加自律才行。</p><p>寻找TODO软件：</p><p>这里推荐一个APP：<strong>时光序</strong>，这个APP对于制定目标和每天打卡挺好的，并且可以设置每天打卡提醒自己完成任务。</p><p>还有一个是微信的小程序：<strong>没有土豆</strong>，非常的简单，就是一个打卡的功能，对于习惯单纯打卡功能的人比较好</p><p>最后是推荐使用番茄工作法的APP，<strong>番茄TODO</strong>，很贴合番茄工作法，比较好用。</p><p>散步放松心情：</p><p>当你学习一大段的内容或者因为某些难题困住的时候，适当放松一下也是有必要的，因为给大脑一个缓存或许思路可以解开。</p><p>凝聚注意力：</p><p>我们经常被琐事分散注意力，所以最好<strong>寻找一段连续的时间来看书</strong>，如果经常被打断看书的效率会大打折扣。同时给自己定时定量看书，比长时间看一本书效果要好，同时读书建议定时休息，有助于回顾总结和思考。</p><h2 id="自律"><a href="#自律" class="headerlink" title="自律"></a>自律</h2><pre><code>我是自学入了编程的行业，所以自律对我来说不是什么难事，自律这种东西还是靠**行动**，个人不太喜欢做太过详细的计划，只会规定每天要做什么事情，并且要做出什么样的效果，同时要对自己的进度有清醒的认知和把控，哪怕没有完成，也要自我正视，然后去寻求突破和改变。另外，**自律是无法模仿的**，每个人的的三观由他所处的环境决定，所以多想想怎么做才适合自己。</code></pre><h2 id="躲避诱惑："><a href="#躲避诱惑：" class="headerlink" title="躲避诱惑："></a>躲避诱惑：</h2><p>很多人会觉得为什么别人可以坚持做一件事情那么久，我想无非就是<strong>躲避诱惑力</strong>，没错，就是躲避诱惑，我相信绝大多数自制力强的人不是克制诱惑而是躲避诱惑，或者是<strong>真的想要改变</strong>的人才会达到真正的自律。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文从买书到读书，到最后的坚持读书都做了一些讨论，希望这些观点对你有帮助，不知不觉又码了很多的字，不知道有多少人可以坚持看完的，这是一篇完整的总结，后续还会不断的回顾这篇内容进行精简。另外，最重要的一点是<strong>不要害怕忘记</strong>，而是要想办法去<strong>留住更多的知识</strong>在自己的脑海，把东西学成自己的东西才是最重要的。好了，本文到此结束，希望这篇文章可以给文章开头的评论者一个比较满意的答复=v=</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      关于如何读一本好书以及如何读书的个人看法
    
    </summary>
    
    
      <category term="读书方法论" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
    
      <category term="读书" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>浅谈设计模式 - 观察者模式（四）</title>
    <link href="https://whitestore.top/2021/02/14/view-modal/"/>
    <id>https://whitestore.top/2021/02/14/view-modal/</id>
    <published>2021-02-14T03:28:58.000Z</published>
    <updated>2021-02-14T03:30:17.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈设计模式-观察者模式（四）"><a href="#浅谈设计模式-观察者模式（四）" class="headerlink" title="浅谈设计模式 - 观察者模式（四）"></a>浅谈设计模式 - 观察者模式（四）</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>观察者模式又叫做 <strong>发布订阅模式</strong>，这个设计模式无论在工作还是生活的应用都是非常常见的，但是在我们的代码里面应用场景并不是很多，一般这种设计模式更多的是由 <strong>消息中间件</strong>进行替代，但是在<code>swing</code>等<code>GUI</code>框架里面可以看到大量的实际使用案例。</p><a id="more"></a><h2 id="什么是观察者模式？"><a href="#什么是观察者模式？" class="headerlink" title="什么是观察者模式？"></a>什么是观察者模式？</h2><p>监听某一个对象的变化，同时可以根据对象的变化执行对应的不同方法。为了更好的解耦，监听者和发布者之间互相实现独立的接口，与此同时，<strong>观察者模式</strong>定义了对象之间的一对多依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新，如果需要更好的设计，可以通过Flag设置是否通知。值得一提的是，观察者模式和线程安全问题息息相关。</p><h2 id="观察者模式结构图："><a href="#观察者模式结构图：" class="headerlink" title="观察者模式结构图："></a>观察者模式结构图：</h2><p>观察者模式主要的是两个接口，同时一般需要在发布者对象内部维护一个订阅者的集合，这样是为了方便发布者对于订阅者的消息推送，而订阅者的接口通常为更新数据用的接口，供发布者调用推送更新数据。</p><p>观察者模式的结构图还是比较好辨认的，因为存在<strong>订阅接口</strong>和<strong>发布接口</strong>。可以看到这是一个明显的松耦合的设计，订阅者不知道发布者的具体细节，发布者也不需要关注订阅者的细节，只需要关注更新数据的接口。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131195416.png" alt=""></p><h2 id="观察者模式的特点："><a href="#观察者模式的特点：" class="headerlink" title="观察者模式的特点："></a>观察者模式的特点：</h2><ol><li>主题接口和发布者接口互相独立，同时主题接口一般需要组合订阅者在对象内部。</li><li><strong>一对多的关系</strong>，表示一个被观察者对象对应多个观察者对象的关系。</li><li>观察者模式是一种<strong>行为型模式</strong>，因为他涉及到观察的行为和发布的行为，发布的行为是抽象的，而且订阅的行为也是抽象的。</li></ol><h2 id="什么情况下使用观察者模式？"><a href="#什么情况下使用观察者模式？" class="headerlink" title="什么情况下使用观察者模式？"></a>什么情况下使用观察者模式？</h2><p>观察者模式是一个无处不在的模式，关于消息订阅，异步通信等，基本都是对于观察者模式的翻版或者直接实现。当出现一对多的情况，比如多个对象需要监听一个对象的数据改变，或者一个接口的数据需要通知多个订阅者，就可以考虑使用观察者模式实现。</p><h2 id="实际案例："><a href="#实际案例：" class="headerlink" title="实际案例："></a>实际案例：</h2><p>观察者模式在自己的构造层面用的比较少，但是在许多框架里面有用到，观察者模式更重要的是思想，所以大致看一下应用场景即可。</p><h3 id="模拟场景："><a href="#模拟场景：" class="headerlink" title="模拟场景："></a>模拟场景：</h3><p>这次的模拟场景参考<strong>基金的涨跌</strong>，我们都知道基金的涨跌是会实时告知订阅者的，所以我们将基金作为一个主题，然后人作为基金的订阅者，当基金在交易时间有涨跌的情况，就实时改变数据并且通知订阅者。</p><h4 id="使用策略模式和工厂模式？"><a href="#使用策略模式和工厂模式？" class="headerlink" title="使用策略模式和工厂模式？"></a>使用策略模式和工厂模式？</h4><p>我们回顾之前学到的两个设计模式，<strong>策略模式</strong>和<strong>工厂模式</strong>：</p><p>策略模式的结构图如下所示：</p><blockquote><p>很明显，策略模式虽然是<strong>行为型模式</strong>但是无法解决一个基金通知多个订阅者的需求，因为我们之前讲到订阅的行为和发布的行为都是需要抽象的，因为我们的基金虽然是作为主题并且可以由多个人实现，但是无法反映发布者和观察者直接松耦合这一个概念。</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131192400.png" alt=""></p><p>下面是工厂模式的结构图：</p><blockquote><p>工厂模式是<strong>创建型模式</strong>，他所关注的是<strong>对象的创建</strong>而不是关注对象的行为，这里直接否决。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131192910.png" alt=""></p></blockquote><h4 id="使用设计模式："><a href="#使用设计模式：" class="headerlink" title="使用设计模式："></a>使用设计模式：</h4><p>这里直接给出使用设计模式的形式，因为这种情况下使用观察者的设计模式的策略是最好的，他可以通过主题发布者通知所有的订阅者进行通知，我们通过设计一个基金的通用接口，提供供基金观察者注册和取消关注的接口。同时用具体的发布机构进行实现，设计一个基金的观察者模拟股民，提供对外的更新接口给基金的发布机构进行数据的推送，而基金观察者也就是股民只需要实现自己的具体业务即可。</p><p>我们同样按照观察者模式的设计结构图模仿做出一个基金的结构图设计：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210131202319.png" alt=""></p><p>我们根据上面的结构以及之前的说明设计出以下几个对应的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ FundSubject.java  基金的相关接口</span><br><span class="line">+ FundConcreteSubject.java 基金的具体实现，充当发布者</span><br><span class="line">+ FundObserver.java - 股民 - 订阅者</span><br><span class="line">+ StockholderObserver.java 具体的股民订阅者实现</span><br></pre></td></tr></table></figure><p>我们先来看一下基金的发布者，基金发布者需要维护一个基金订阅者的列表，同时需要提供对外的接口供基金订阅者进行注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基金的相关接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/31 20:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FundSubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册订阅者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fundObserver 订阅者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(FundObserver fundObserver)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除指定订阅者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fundObserver 订阅者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(FundObserver fundObserver)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知所有的订阅者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyAllObserver</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发布者的具体实现类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基金具体的实现方</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/31 20:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FundConcreteSubject</span> <span class="keyword">implements</span> <span class="title">FundSubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前的单位净值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> nownum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定所有的订阅者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;FundObserver&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FundConcreteSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(FundObserver fundObserver)</span> </span>&#123;</span><br><span class="line">        list.add(fundObserver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(FundObserver fundObserver)</span> </span>&#123;</span><br><span class="line">        list.remove(fundObserver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        list.forEach(item -&gt; item.change(nownum));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> v = <span class="keyword">new</span> Random(<span class="number">1000</span>).nextDouble();</span><br><span class="line">        <span class="comment">// 单位净值改变，通知所有的股民</span></span><br><span class="line">        nownum = v;</span><br><span class="line">        notifyAllObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们看一下订阅者，订阅者提供一个数据变动的接口，供发布者进行调用并且进行数据的通知推送和更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 股民 - 订阅者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/31 20:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FundObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基金涨跌接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">double</span> num)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面根据订阅者接口进行具体的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体的订阅者实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/31 20:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockholderObserver</span> <span class="keyword">implements</span> <span class="title">FundObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前订阅者关注的单位净值数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">double</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前股票的净值为:"</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ol><li>当我们需要扩展发布者的接口，直接实现发布的接口即可</li><li>当我们需要扩展订阅者，也可以直接通过直接实现接口即可进行处理</li><li>通常会在发布者里面维护一个订阅者的列表进行通知。</li></ol><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ol><li>上面的接口反应了一个基金每次更新数据都往订阅者推送数据。但是订阅者不一定想要收到。</li><li>订阅者不能主动的获取数据，只能够等待发布者推送数据。</li><li><strong>如何实现订阅者主动获取到发布者的数据？</strong></li><li><strong>java</strong>内置的观察者和订阅者实现了既可以由发布者推送数据给订阅者，也可以实现订阅者主动获取发布者的数据</li></ol><h4 id="JDK实现观察者模式："><a href="#JDK实现观察者模式：" class="headerlink" title="JDK实现观察者模式："></a>JDK实现观察者模式：</h4><p>JAVA官方是有实现<code>观察者模式</code>的，下面说一下JDK自带的观察者模式如何实现：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210202001753.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ JdkFundObserver.java JDK实现基金的订阅者接口</span><br><span class="line">+ JdkFundObserverConstruct.java JDK订阅者实现</span><br><span class="line">+ JdkFundSubject JDK发布者实现子类</span><br><span class="line">+ Observable JDK 发布者父类</span><br><span class="line">+ Main.java 单元测试</span><br></pre></td></tr></table></figure><p>JDK实现基金的订阅者接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK实现基金的订阅者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/1 22:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JdkFundObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK订阅者实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK订阅者实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/1 22:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkFundObserverConstruct</span> <span class="keyword">implements</span> <span class="title">JdkFundObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> JdkFundSubject) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arg == <span class="keyword">null</span>)</span><br><span class="line">                price += <span class="number">1</span>d;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                price = (<span class="keyword">double</span>) arg;</span><br><span class="line">            System.err.println(price);</span><br><span class="line">            price = ((JdkFundSubject) o).getPrice();</span><br><span class="line">            System.err.println(price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK发布者的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK发布者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/1 22:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkFundSubject</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;JdkFundObserver&gt; fundObservers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JdkFundSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fundObservers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NotifyAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        price = <span class="keyword">new</span> Random(<span class="number">1000</span>).nextDouble();</span><br><span class="line">        setChanged();</span><br><span class="line">        notifyObservers(price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JDK的发布者父类请查看：<code>java.util.Observable</code></p></blockquote><p>单元测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单元测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/1 22:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JdkFundObserver jdkFundObserver = <span class="keyword">new</span> JdkFundObserverConstruct();</span><br><span class="line">        JdkFundSubject jdkFundSubject = <span class="keyword">new</span> JdkFundSubject();</span><br><span class="line">        jdkFundSubject.addObserver(jdkFundObserver);</span><br><span class="line">        jdkFundSubject.NotifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>变成观察者和发布者</strong></p><p>发布者需要<strong>继承</strong><code>java.util.Observable</code>类。调用<code>addObserver()</code>添加对应的观察者</p><p>观察者需要<strong>实现</strong><code>java.util.Observable</code>接口。</p><p><strong>如何发送通知：</strong></p><ol><li>调用<code>setChanged()</code>(最重要的一步)，标记状态更改了状态。这一步<strong>非常重要</strong></li><li>调用<code>notifyObservers()</code>方法，发送通知给所有的观察者。</li></ol><blockquote><p>为什么需要更改状态订阅者才会接受通知？</p><p>JDK的flag标识是为了实现发布者可以手动进行通知。</p></blockquote><blockquote><p>注意：JDK的代码里面对于通知的方法没有进行方法同步（synchronized），而是使用<code>synchronized</code>锁锁住整个<code>Flag</code>的标识的改动代码，这里会遇到（可能）最坏的竞态条件是：</p><ol><li>新加入的观察者收不到通知</li><li>已经取消监听的观察者收到了通知。</li></ol></blockquote><p><strong>观察者如何接受通知：</strong></p><p>实现更新<code>update</code>的方法，参数略微不同，签名如下<code>void update(Observable o, Object arg)</code></p><ul><li>第一个参数是主题，在订阅者的<code>update()</code>方法，可以使用<code>instanceof</code>判断对应的主题进行对应的操作</li><li>第二个参数是主题携带的参数，主题通过主动传递给观察者，观察者选择是否需要更新携带参数。</li></ul><h5 id="JDK实现的观察模式特点："><a href="#JDK实现的观察模式特点：" class="headerlink" title="JDK实现的观察模式特点："></a>JDK实现的观察模式特点：</h5><ol><li>设置一个flag，可以控制发布者的通知开关，选择通知的时机</li><li>发布者通知参数的同时</li><li>JDK的发布订阅是<strong>线程安全</strong>的，使用<code>synchronized</code>对于方法加锁，同时使用线程安全容器维护所有的订阅者。同时按照订阅者添加顺序进行通知。</li></ol><h5 id="JDK实现的观察模式缺点："><a href="#JDK实现的观察模式缺点：" class="headerlink" title="JDK实现的观察模式缺点："></a>JDK实现的观察模式缺点：</h5><ol><li>通知状态变更被实现为一个被保护的方法，通知标志被保护，<strong>依赖继承</strong>。</li><li>大量的同步方法以及使用线程安全的旧集合存储观察者，<strong>效率低</strong></li><li>最大的问题在于JDK的观察者<strong>是一个类而不是一个接口</strong>。</li></ol><h2 id="总结观察者要点："><a href="#总结观察者要点：" class="headerlink" title="总结观察者要点："></a>总结观察者要点：</h2><ul><li>观察者模式定义了对象之间一对多的关系。</li><li>主题（也就是可观察者）用一个共同的接口来更新观察者的数据。</li><li>观察者和发布者之间用松耦合方式结合（loosecoupl-ing），发布者不知道观察者的细节，只知道观察者实现了观察者接口。</li><li>使用此模式时，你可从发布者处<code>推（push）</code>或<code>拉（pull）</code>数据（然而，推的方式更加“正确”）。</li><li>有多个观察者时，不可以依赖特定的通知次序。</li><li>Java有多种观察者模式的实现，包括了通用的<code>java.util.Observable</code>。</li><li>要注意<code>java.util.Observable</code>实现上所带来的一些问题。</li><li>如果有必要的话，可以实现自己的<code>Observable</code>。</li><li><code>Swing</code>大量使用观察者模式，许多<code>GUI</code>框架也是如此。</li><li>此模式也被应用在许多地方，例如：<code>JavaBeans</code>、<code>RMI</code>。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>从上面的实例可以看到，观察者模式在代码层面的应用其实真不算特别多，这个模式也如前文所说的更多的是应用在框架或者一些消息队列的模式里面。同时JDK的观察者模式也确实是一个不太好的设计。如果需要自己动手实现观察者模式，还是更加推荐自己实现。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      使用观察者模式
    
    </summary>
    
    
      <category term="设计模式" scheme="https://whitestore.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://whitestore.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础小项目 - 坦克大战</title>
    <link href="https://whitestore.top/2021/01/30/javatank/"/>
    <id>https://whitestore.top/2021/01/30/javatank/</id>
    <published>2021-01-30T07:41:47.000Z</published>
    <updated>2021-01-30T07:42:41.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA基础小项目-坦克大战"><a href="#JAVA基础小项目-坦克大战" class="headerlink" title="JAVA基础小项目 - 坦克大战"></a>JAVA基础小项目 - 坦克大战</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这个项目是之前备份电脑资料的时候看到的，不禁一阵感慨自己当初自学编程的心酸和泪水。所以分享一下自己当初写的的垃圾代码。虽然我不是任天堂忠实粉丝，但是对于90后来说坦克大战基本是人人都玩过的一款小霸王游戏机的游戏。</p><p>这个项目对于已经入行的人来说没有价值，分享出来主要是希望对于初学编程的人给一点 “吸引”吧，原来代码可以做到这么愉快的事情。这个坦克大战也是自己跟着培训机构的教学视频边看边敲的。</p><p>花了一天左右的时间把代码稍微整理了一下代码同时写了这份文档，这里分享出来。</p><p>对于入行编程的同学个人的建议如果要快速成长还是多练，多做。很多东西做多了之后，涉及自己的盲区会促使你不断的学习和进步。</p><blockquote><p>PS：代码使用Eclipse写的，这里用IDEA整理了一下代码</p><p>此代码如果阅读存在难度，建议看一下韩顺平的JAVA基础坦克大战的课程。这里的源代码也是跟着课程敲的。</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTU3NDExZzc4eT9wPTQ3" title="https://www.bilibili.com/video/BV157411g78y?p=47">https://www.bilibili.com/video/BV157411g78y?p=47<i class="fa fa-external-link"></i></span></p><p>真是一个好时代，当初这些资源还要网上翻半天</p></blockquote><a id="more"></a><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhenlUaW1lcy9UYW5rX2NsYXNzX215VGFuaw==" title="https://github.com/lazyTimes/Tank_class_myTank">https://github.com/lazyTimes/Tank_class_myTank<i class="fa fa-external-link"></i></span></p><blockquote><p>后续文档更新请看readne</p></blockquote><h2 id="项目简介："><a href="#项目简介：" class="headerlink" title="项目简介："></a>项目简介：</h2><p>个人前几年自学的时候从一个教学视频的，<strong>韩顺平老师的JAVA初级坦克大战</strong>。个人跟着视频边学边敲之后，对于编程的兴趣大大的提升。后面越学越快乐。</p><h2 id="所用技术"><a href="#所用技术" class="headerlink" title="所用技术"></a>所用技术</h2><ol><li>JAVA GUI（远古技术，<strong>千万别深入</strong>，看看即可）</li><li>JAVA</li></ol><h2 id="面向群体："><a href="#面向群体：" class="headerlink" title="面向群体："></a>面向群体：</h2><ol><li>初学JAVA者，可以看看这个项目锻炼动手能力</li><li>完全不了解什么是面向对象</li><li>对于小游戏有点兴趣的</li><li>如果你厌恶枯燥的学习，做一个小游戏或许能给你一点动力</li></ol><h2 id="项目截图："><a href="#项目截图：" class="headerlink" title="项目截图："></a>项目截图：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130151243.png" alt=""></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130151301.png" alt=""></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130151329.png" alt=""></p><h2 id="操作坦克的方法："><a href="#操作坦克的方法：" class="headerlink" title="操作坦克的方法："></a>操作坦克的方法：</h2><p>最后一版本有效，早起版本部分功能或者所有功能按键无效</p><ul><li>WASD</li><li>J：为射出子弹</li></ul><h2 id="需求文档（或许是）："><a href="#需求文档（或许是）：" class="headerlink" title="需求文档（或许是）："></a>需求文档（或许是）：</h2><p>由于当初是跟着视频做的，虽然具体的记忆忘了，但是自己跟着敲的同时忘了做需求的更新，所以这里有部分需求和思路断了。如果有不同的，后续补充GIT的README文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> * 需求：</span><br><span class="line"> * 坦克大战:</span><br><span class="line"> * 功能：</span><br><span class="line"> * 1.画出坦克，</span><br><span class="line"> * </span><br><span class="line"> * 思路：</span><br><span class="line"> * 1.首先坦克想象由五个部件组成两个矩形，一个长方形或者正方形，一个圆</span><br><span class="line"> * 一条直线</span><br><span class="line"> * </span><br><span class="line"> * 2.画坦克的时候需要使用到画笔工具</span><br><span class="line"> * 必须在构造函数初始化使用画笔工具</span><br><span class="line"> * </span><br><span class="line"> * 3.在设置方向以及画出不同方向的坦克</span><br><span class="line"> * </span><br><span class="line"> * 4.敌方坦克画出来需要使用父类方法</span><br><span class="line"> * 敌方坦克的坐标需要设置，</span><br><span class="line"> * 使用一个集合保存敌方坦克Vector集合便于删除和添加 </span><br><span class="line"> * </span><br><span class="line"> * 5.发射子弹是一个线程</span><br><span class="line"> * 具有线程的功能</span><br><span class="line"> * 另外线程对与子弹方向运动轨迹不同</span><br><span class="line"> * </span><br><span class="line"> * 6.需要把子弹画出来</span><br><span class="line"> * 在按下J键的时候发射子弹</span><br><span class="line"> * 实现连发使用集合存储</span><br><span class="line"> * </span><br><span class="line"> * 升级：</span><br><span class="line"> * 1.让敌人能够发射子弹</span><br><span class="line">解决方法</span><br><span class="line">1.敌人发射子弹是一个多线程方法，应当在敌人的run函数当中实现</span><br><span class="line">2.坦克发射子弹和移动都是坦克本身具有的功能</span><br><span class="line"> * </span><br><span class="line"> * 思路：</span><br><span class="line"> * 1.在敌人类里面需要添加一个射击方法</span><br><span class="line"> * 与我方一样，但是敌人是自动射击或者说每过几秒射击一次</span><br><span class="line"> * </span><br><span class="line"> * 2.我方坦克子弹连发</span><br><span class="line"> * 使用一个集合保存建立的对象，画出子弹使用集合中的对象</span><br><span class="line"> * 我方坦克子弹连发过快，需要限定</span><br><span class="line"> * </span><br><span class="line"> * 3.</span><br><span class="line"> * 我方坦克击中敌人坦克之后，敌人坦克就要消失</span><br><span class="line"> * 需要获取到敌人的一个定点坐标，然后界定一个范围</span><br><span class="line"> * 写一个专门的函数判断是否击中敌人</span><br><span class="line"> * </span><br><span class="line"> * 在哪里判断是否击中敌人</span><br><span class="line"> * ·因为每一颗子弹都要与所有的坦克匹配，并且每一次匹配都要</span><br><span class="line"> * 双重判断每次都要进行建立对象</span><br><span class="line"> * 图片问题没有得到解决</span><br><span class="line"> * </span><br><span class="line"> * 升级</span><br><span class="line"> * 1.需要实现敌人的坦克不断的移动使用多线程的手段实现</span><br><span class="line"> * </span><br><span class="line"> * 2.需要实现敌人能够发射子弹的功能</span><br><span class="line"> * 实现方法：</span><br><span class="line"> * 建立一个敌人的子弹集合</span><br><span class="line"> * 如何敌人何时发射子弹？</span><br><span class="line"> * 使用多重循环判断是否需要添加薪子弹</span><br><span class="line"> * </span><br><span class="line"> * 3.实现自己被子弹击中也会消失</span><br><span class="line"> * 对于摧毁坦克进行升级</span><br><span class="line"> * </span><br><span class="line"> * 4.</span><br><span class="line"> * 较难！</span><br><span class="line"> * 实现坦克不覆盖运动，</span><br><span class="line"> * 1.首先改判断在坦克类中实现</span><br><span class="line"> * 2.需要用到一个方法获取到生成的坦克类</span><br><span class="line"> * 3.对于地方其中一辆坦克的选择，都要循环与其他所有坦克进行比对</span><br><span class="line"> * 并且要事先判断是否为我方坦克</span><br><span class="line"> * 4.**对于点位的判断要判断两个点，才能够保证不会产生碰撞</span><br><span class="line"> * </span><br><span class="line"> * 5.实现选择关卡的功能</span><br><span class="line"> * 思路：</span><br><span class="line"> * 1.可以建立一个选择关卡的面板</span><br><span class="line"> * 2.暂时先实现不同的关卡敌人坦克的数量不同</span><br><span class="line"> * 3.实现闪烁功能，使用多线程的方法,注意线程的关闭</span><br><span class="line"> * 4.对于选项添加事件属性,添加事件</span><br><span class="line"> * </span><br><span class="line"> * 5.画出我方坦克击中了多少辆地方坦克</span><br><span class="line"> * 1.对于总体界面进行修改</span><br><span class="line"> * 2.显示敌人坦克的数量</span><br><span class="line"> * 扩展：</span><br><span class="line"> * 1.建立帮助文档</span><br><span class="line"> * 3.扩展:我方坦克的生命值，当生命值为0的时候游戏结束</span><br><span class="line"> * 4.记录我方击中了多少地方坦克</span><br><span class="line"> * 使用文件操作完成</span><br><span class="line"> * </span><br><span class="line"> * 6.实现重新开始的功能</span><br><span class="line"> * </span><br><span class="line"> * 7.实现存盘退出的功能</span><br><span class="line"> * 思路：</span><br><span class="line"> * 选在主界面增加两个按钮</span><br><span class="line"> * 1.记录所有坦克的坐标</span><br><span class="line"> * </span><br><span class="line"> * 8.实现暂停的功能</span><br><span class="line"> * 思路：</span><br><span class="line"> * 暂停功能可以通过一个布尔值进行判断，当按下某个按钮的时候就要进行布尔值的改变</span><br><span class="line"> * 需要暂停的对象</span><br><span class="line"> * 将多线程子弹的速度前进功能暂停</span><br><span class="line"> * 敌人坦克无法转向和前进</span><br><span class="line"> * 我方坦克无法转向和前进</span><br><span class="line"> * </span><br><span class="line"> * 9.实现播放音乐的功能</span><br><span class="line"> * 自学 - 未实现</span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> * *&#x2F;</span><br></pre></td></tr></table></figure><h2 id="版本迭代和介绍："><a href="#版本迭代和介绍：" class="headerlink" title="版本迭代和介绍："></a>版本迭代和介绍：</h2><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>代码比较多，我会抽几处理解起来比较难以理解的地方说明一下，其他的代码需要看细节。如果有不懂的欢迎在issue提出，个人只要有空一定给予答复。</p><h3 id="第一个版本"><a href="#第一个版本" class="headerlink" title="第一个版本"></a>第一个版本</h3><p>版本概述：画出坦克(version1)</p><p>我们的第一步是画出我们的坦克，画出我方坦克的方法还是非常简单的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 思路：</span><br><span class="line">* 1.首先坦克想象由五个部件组成两个矩形，一个长方形或者正方形，一个圆</span><br><span class="line">* 一条直线</span><br><span class="line">* </span><br><span class="line">* 2.画坦克的时候需要使用到画笔工具</span><br><span class="line">* 必须在构造函数初始化使用画笔工具</span><br><span class="line">* </span><br><span class="line">* 3.在设置方向以及画出不同方向的坦克</span><br></pre></td></tr></table></figure><p>拥有坦克的第一步是画出坦克</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210129160413.png" alt=""></p><p>画出坦克的核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 画坦克需要提取封装</span></span><br><span class="line"><span class="comment">     * 1.画出来之前先确定颜色，是敌人坦克还是我方坦克</span></span><br><span class="line"><span class="comment">     * 2.参数为坐标做，画笔（重要）,以及坦克类型和方向</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">paintMyTank</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, Graphics g, <span class="keyword">int</span> direct, String type)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//画之前先确定坦克的颜色</span></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"mytank"</span>: &#123;</span><br><span class="line">                g.setColor(Color.red);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"enemytank"</span>: &#123;</span><br><span class="line">                g.setColor(Color.cyan);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向上</span></span><br><span class="line">        <span class="keyword">if</span> (direct == <span class="number">0</span>) &#123;<span class="comment">//先画出我的坦克</span></span><br><span class="line">            <span class="comment">//画出左边的矩形，先设置颜色</span></span><br><span class="line">            g.fill3DRect(x, x, <span class="number">5</span>, <span class="number">30</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//画出中间的长方形</span></span><br><span class="line">            g.fill3DRect(x + <span class="number">5</span>, x + <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//画出中间圆圈,使用填充椭圆</span></span><br><span class="line">            g.fillOval(x + <span class="number">6</span>, x + <span class="number">9</span>, <span class="number">7</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//画出一条直线</span></span><br><span class="line">            g.drawLine(x + <span class="number">10</span>, x, x + <span class="number">10</span>, x + <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//画出另一边矩形</span></span><br><span class="line">            g.fill3DRect(x + <span class="number">15</span>, x, <span class="number">5</span>, <span class="number">30</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果知道数字的意思，直接将数字修改大小就可以知道效果了</p><h3 id="第二个版本"><a href="#第二个版本" class="headerlink" title="第二个版本"></a>第二个版本</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130150035.png" alt=""></p><p>版本概述：画出我方坦克不同形状，敌方坦克(version2)，我方坦克可以进行行动</p><p>在上个版本当中，我们发现我们的坦克只有一个朝向，在这个版本中，增加了坦克的不同朝向。同时增加了敌人的坦克类。</p><p>由于敌人有很多个，所以用了一个集合来维护和设置。同时加入了坐标系统，可以实现不同的坦克挪到不同的位置。</p><p>这个版本的关键代码，不是在画坦克的上面，而是在于加入了键盘的监听事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// version2.DrawTank.java 更多细节请查看</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawTank</span> <span class="keyword">extends</span> <span class="title">JPanel</span> <span class="keyword">implements</span> <span class="title">KeyListener</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 省略一大坨代码</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用wsad进行控制</span></span><br><span class="line"><span class="comment">     * 也可以改为上下左右键</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_W) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mytank.setDirect(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.mytank.move_up();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_D) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mytank.setDirect(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">this</span>.mytank.move_right();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_S) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mytank.setDirect(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">this</span>.mytank.move_down();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getKeyCode() == KeyEvent.VK_A) &#123;</span><br><span class="line">            <span class="comment">//改变方向</span></span><br><span class="line">            <span class="keyword">this</span>.mytank.setDirect(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">this</span>.mytank.move_left();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现<code>KeyListener</code>接口并且监听对应的方法。</p><p>JAVA的GUI有一个事件监听驱动模型，意思就是说我们实现对应的驱动接口，并且覆盖对应的方法，在代码运行并且触发相关事件的适合，模型就可以触发我们实现定义好的代码，这里很明显就是设计模式，有兴趣可以去了解一下</p></blockquote><h3 id="第三个版本"><a href="#第三个版本" class="headerlink" title="第三个版本"></a>第三个版本</h3><p>从这个版本就开始变得稍微复杂一点了，用了多线程的内容，因为要让我们的坦克和敌人的坦克“动”起来，其实让坦克移动和我方坦克移动的道理都是一样的：高速的<strong>擦写和描绘</strong>。和我们的鼠标以及计算机显示画面的本质都是一样的。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210129173134.png" alt=""></p><p>这个版本中，比较核心的内容是如何发射子弹和让子弹消失：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bullet</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义子弹的xy坐标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子弹的颜色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子弹的方向</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> direct;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子弹移动速度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> screed;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否越界</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">boolean</span> isOut = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 越界范围</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> outx = <span class="number">400</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 越界范围</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> outy = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bullet</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> direct)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.direct = direct;</span><br><span class="line">        <span class="keyword">this</span>.screed = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略get/set</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//坦克一旦建立就要运动</span></span><br><span class="line">        <span class="comment">//因为移动的太快，需要减慢速度</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">this</span>.direct) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    y -= screed;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    x += screed;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    y += screed;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    x -= screed;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(x + <span class="string">"..."</span> + y);</span><br><span class="line">            <span class="comment">//碰到边缘消失</span></span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; outx || y &lt; <span class="number">0</span> || y &gt; outy) &#123;</span><br><span class="line">                isOut = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 子弹什么时候消亡？</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否越界</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在坦克的内部维护一个变量<code>isOut</code>，判定有没有越界</li><li>如果出现了越界，则flag进行设置</li></ol><p>接着，在绘画的方法里面，判定有没有越界：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘画方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> g</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.paint(g);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画出背景色</span></span><br><span class="line">    g.fill3DRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">600</span>, <span class="number">400</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//画出自己的坦克</span></span><br><span class="line">    paintMyTank(mytank.getX(), mytank.getY(), g, mytank.getDirect(), mytank.getColor());</span><br><span class="line">    <span class="comment">//画出敌人的坦克</span></span><br><span class="line">    paintEnemyTank(g);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画出子弹并且确定没有越界</span></span><br><span class="line">    <span class="keyword">if</span> (mytank.but != <span class="keyword">null</span> &amp;&amp; !mytank.but.isOut) &#123;</span><br><span class="line">        g.fill3DRect(mytank.but.getX(), mytank.but.getY(), <span class="number">5</span>, <span class="number">5</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四个版本："><a href="#第四个版本：" class="headerlink" title="第四个版本："></a>第四个版本：</h3><p>从这一个版本开始，一个游戏的简单雏形已经有了，这一个版本实现了让敌人移动的同时发射子弹的功能，同时我方的坦克射击敌人的时候，可以让敌人消失</p><h4 id="怎么样让敌人可以边移动边发射子弹："><a href="#怎么样让敌人可以边移动边发射子弹：" class="headerlink" title="怎么样让敌人可以边移动边发射子弹："></a>怎么样让敌人可以边移动边发射子弹：</h4><p>我们需要在敌人的多线程<code>run</code>代码里面，然敌人进行间歇性的走动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="comment">//我们发现坦克在原地抽搐，我们要实现坦克的平稳运行</span></span><br><span class="line">   <span class="comment">//实现坦克运动不会越界</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">do</span> &#123;</span><br><span class="line">           <span class="keyword">switch</span> (<span class="keyword">this</span>.direct) &#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (y &gt; <span class="number">0</span>)</span><br><span class="line">                           y -= sreed;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (x &lt; <span class="number">500</span>)</span><br><span class="line">                           x += sreed;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           <span class="comment">// 短暂的停顿</span></span><br><span class="line">                           Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (y &lt; <span class="number">400</span>)</span><br><span class="line">                           y += sreed;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">                           x -= sreed;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//不同的方向移动的方向不同</span></span><br><span class="line">           <span class="keyword">this</span>.direct = (<span class="keyword">int</span>) (Math.random() * <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">while</span> (<span class="keyword">this</span>.isLive);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>至于生成子弹，需要定时去轮询所有的坦克，检查坦克中组合的子弹集合是否存在子弹，如果小于一定的数量，需要生成对应的子弹对象同时加入到敌人的坦克当中。由于子弹创建就会开始执行线程进行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//限定一段时间重新绘制</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断是否击中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; mytank.vecs.size(); x++) &#123;</span><br><span class="line">                <span class="comment">//每一颗子弹和每一个坦克匹配</span></span><br><span class="line">                <span class="comment">//取出一颗子弹之前判断是否有子弹</span></span><br><span class="line">                buts = mytank.vecs.get(x);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断子弹是否有效</span></span><br><span class="line">                <span class="keyword">if</span> (buts.isOut()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//取出每一个坦克与它判断</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; vec.size(); y++) &#123;</span><br><span class="line">                    <span class="comment">//判断敌方坦克是否死亡</span></span><br><span class="line">                    <span class="keyword">if</span> (vec.get(y).isLive) &#123;</span><br><span class="line">                        en = vec.get(y);</span><br><span class="line">                        <span class="comment">//记性判断是否击中操作</span></span><br><span class="line">                        hitTank(en, buts);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果子弹数小于一定数目</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; vec.size(); x++) &#123;</span><br><span class="line">                EnemyTank et = vec.get(x);</span><br><span class="line">                <span class="comment">//遍历每一辆坦克的子弹集合</span></span><br><span class="line">                <span class="keyword">if</span> (!et.isLive()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (et.vecs.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">//对于不同的坦克方向生成子弹的方向也不同</span></span><br><span class="line">                    Bullet enybut = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">switch</span> (et.getDirect()) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                            enybut = <span class="keyword">new</span> Bullet(et.getX() + <span class="number">10</span>, et.getY(), <span class="number">0</span>);</span><br><span class="line">                            <span class="comment">//将创建的子弹加入到集合当中</span></span><br><span class="line">                            et.vecs.addElement(enybut);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            enybut = <span class="keyword">new</span> Bullet(et.getX() + <span class="number">30</span>, et.getY() + <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line">                            et.vecs.addElement(enybut);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                            enybut = <span class="keyword">new</span> Bullet(et.getX() + <span class="number">10</span>, et.getY() + <span class="number">30</span>, <span class="number">2</span>);</span><br><span class="line">                            et.vecs.addElement(enybut);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                            enybut = <span class="keyword">new</span> Bullet(et.getX(), et.getY() + <span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line">                            et.vecs.addElement(enybut);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">new</span> Thread(enybut).start();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//重绘</span></span><br><span class="line">            <span class="keyword">this</span>.repaint();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在子弹类当中进行不断的数值改变：</p><p>下面的内容表示子弹的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bullet</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//隐藏一大段代码：</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">this</span>.direct) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">this</span>.y -= screed;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">this</span>.x += screed;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">this</span>.y += screed;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">this</span>.x -= screed;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//碰到边缘消失</span></span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; outx || y &lt; <span class="number">0</span> || y &gt; outy) &#123;</span><br><span class="line">                isOut = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第五个版本："><a href="#第五个版本：" class="headerlink" title="第五个版本："></a>第五个版本：</h3><p>在第五个版本当中，我们实现了开始菜单的界面，同时视线菜单的不断显示：</p><p>界面会不断的闪烁</p><p>接着，敌人增加了子弹可以摧毁我们的方法</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130145231.png" alt=""></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130145253.png" alt=""></p><p>接着，我们可以实现爆炸的效果：</p><blockquote><p>由于爆炸的效果不好截图，请看源代码</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210130145348.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现闪烁功能</span></span><br><span class="line"><span class="comment"> * 重构坦克 - 第五版</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/29 23:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SelectIsSallup</span> <span class="keyword">extends</span> <span class="title">JPanel</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paint(g);</span><br><span class="line">        g.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">        <span class="keyword">if</span> (times % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//画出文字</span></span><br><span class="line">            Font font1 = <span class="keyword">new</span> Font(<span class="string">"华文新魏"</span>, Font.BOLD, <span class="number">20</span>);</span><br><span class="line">            <span class="comment">//设置字体的颜色</span></span><br><span class="line">            g.setColor(Color.yellow);</span><br><span class="line">            g.setFont(font1);</span><br><span class="line">            g.drawString(<span class="string">"stage 1"</span>, <span class="number">200</span>, <span class="number">150</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">750</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (times &gt; <span class="number">500</span>)</span><br><span class="line">                times = <span class="number">0</span>;</span><br><span class="line">            times++;</span><br><span class="line">            <span class="keyword">this</span>.repaint();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何让敌人的子弹对我们造成伤害："><a href="#如何让敌人的子弹对我们造成伤害：" class="headerlink" title="如何让敌人的子弹对我们造成伤害："></a>如何让敌人的子弹对我们造成伤害：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 建立一个方法，判断是否产生碰撞</span></span><br><span class="line"><span class="comment"> * 是否攻击了其他的坦克</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isTouchOther</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据自己的方向进行选择判断</span></span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>.direct) &#123;</span><br><span class="line">            <span class="comment">// 坦克向上走的时候</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="comment">// 取出所有的坦克对象</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; enevec.size(); x++) &#123;</span><br><span class="line">                    EnemyTank et = enevec.get(x);</span><br><span class="line">                    <span class="comment">//如果不是自己的坦克</span></span><br><span class="line">                    <span class="keyword">if</span> (et != <span class="keyword">this</span>) &#123;</span><br><span class="line">                        <span class="comment">//如果敌人的坦克朝上或者朝下的时候</span></span><br><span class="line">                        <span class="keyword">if</span> (et.direct == <span class="number">0</span> || et.direct == <span class="number">2</span>) &#123;</span><br><span class="line">                            <span class="comment">//判断边界</span></span><br><span class="line">                            <span class="comment">//对于第一个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x &lt;= et.x + <span class="number">20</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y &lt;= et.y + <span class="number">30</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//对于第二个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x + <span class="number">20</span> &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x + <span class="number">20</span> &lt;= et.x + <span class="number">20</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y &lt;= et.y + <span class="number">30</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//如果敌人是朝左边或者右边的时候</span></span><br><span class="line">                        <span class="keyword">if</span> (et.direct == <span class="number">1</span> || et.direct == <span class="number">3</span>) &#123;</span><br><span class="line">                            <span class="comment">//判断边界</span></span><br><span class="line">                            <span class="comment">//对于第一个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x &lt;= et.x + <span class="number">30</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y &lt;= et.y + <span class="number">20</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//对于第二个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x + <span class="number">20</span> &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x + <span class="number">20</span> &lt;= et.x + <span class="number">30</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y &lt;= et.y + <span class="number">20</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//坦克想右边走的时候</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="comment">// 取出所有的坦克对象</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; enevec.size(); x++) &#123;</span><br><span class="line">                    EnemyTank et = enevec.get(x);</span><br><span class="line">                    <span class="comment">//如果不是自己的坦克</span></span><br><span class="line">                    <span class="keyword">if</span> (et != <span class="keyword">this</span>) &#123;</span><br><span class="line">                        <span class="comment">//如果敌人的坦克朝上或者朝下的时候</span></span><br><span class="line">                        <span class="keyword">if</span> (et.direct == <span class="number">0</span> || et.direct == <span class="number">2</span>) &#123;</span><br><span class="line">                            <span class="comment">//判断边界</span></span><br><span class="line">                            <span class="comment">//对于第一个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x + <span class="number">30</span> &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x + <span class="number">30</span> &lt;= et.x + <span class="number">20</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y &lt;= et.y + <span class="number">30</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//对于第二个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x + <span class="number">30</span> &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x + <span class="number">30</span> &lt;= et.x + <span class="number">20</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y &lt;= et.y + <span class="number">30</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//如果敌人是朝左边或者右边的时候</span></span><br><span class="line">                        <span class="keyword">if</span> (et.direct == <span class="number">1</span> || et.direct == <span class="number">3</span>) &#123;</span><br><span class="line">                            <span class="comment">//判断边界</span></span><br><span class="line">                            <span class="comment">//对于第一个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x + <span class="number">30</span> &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x + <span class="number">30</span> &lt;= et.x + <span class="number">30</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y + <span class="number">20</span> &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y &lt;= et.y + <span class="number">20</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//对于第二个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x + <span class="number">30</span> &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x + <span class="number">30</span> &lt;= et.x + <span class="number">30</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y + <span class="number">20</span> &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y &lt;= et.y + <span class="number">20</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 坦克想下的时候</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="comment">// 取出所有的坦克对象</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; enevec.size(); x++) &#123;</span><br><span class="line">                    EnemyTank et = enevec.get(x);</span><br><span class="line">                    <span class="comment">//如果不是自己的坦克</span></span><br><span class="line">                    <span class="keyword">if</span> (et != <span class="keyword">this</span>) &#123;</span><br><span class="line">                        <span class="comment">//如果敌人的坦克朝上或者朝下的时候</span></span><br><span class="line">                        <span class="keyword">if</span> (et.direct == <span class="number">0</span> || et.direct == <span class="number">2</span>) &#123;</span><br><span class="line">                            <span class="comment">//判断边界</span></span><br><span class="line">                            <span class="comment">//对于第一个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x &lt;= et.x + <span class="number">20</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y + <span class="number">30</span> &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y + <span class="number">30</span> &lt;= et.y + <span class="number">30</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//对于第二个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x + <span class="number">20</span> &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x + <span class="number">20</span> &lt;= et.x + <span class="number">20</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y + <span class="number">30</span> &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y + <span class="number">30</span> &lt;= et.y + <span class="number">30</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//如果敌人是朝左边或者右边的时候</span></span><br><span class="line">                        <span class="keyword">if</span> (et.direct == <span class="number">1</span> || et.direct == <span class="number">3</span>) &#123;</span><br><span class="line">                            <span class="comment">//判断边界</span></span><br><span class="line">                            <span class="comment">//对于第一个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x &lt;= et.x + <span class="number">30</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y + <span class="number">30</span> &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y + <span class="number">30</span> &lt;= et.y + <span class="number">20</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//对于第二个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x + <span class="number">20</span> &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x + <span class="number">20</span> &lt;= et.x + <span class="number">30</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y + <span class="number">30</span> &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y + <span class="number">30</span> &lt;= et.y + <span class="number">20</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 坦克向左移动的时候</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="comment">// 取出所有的坦克对象</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; enevec.size(); x++) &#123;</span><br><span class="line">                    EnemyTank et = enevec.get(x);</span><br><span class="line">                    <span class="comment">//如果不是自己的坦克</span></span><br><span class="line">                    <span class="keyword">if</span> (et != <span class="keyword">this</span>) &#123;</span><br><span class="line">                        <span class="comment">//如果敌人的坦克朝上或者朝下的时候</span></span><br><span class="line">                        <span class="keyword">if</span> (et.direct == <span class="number">0</span> || et.direct == <span class="number">2</span>) &#123;</span><br><span class="line">                            <span class="comment">//判断边界</span></span><br><span class="line">                            <span class="comment">//对于第一个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x &lt;= et.x + <span class="number">20</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y &lt;= et.y + <span class="number">30</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//对于第二个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x &lt;= et.x + <span class="number">20</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y + <span class="number">20</span> &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y + <span class="number">20</span> &lt;= et.y + <span class="number">30</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//如果敌人是朝左边或者右边的时候</span></span><br><span class="line">                        <span class="keyword">if</span> (et.direct == <span class="number">1</span> || et.direct == <span class="number">3</span>) &#123;</span><br><span class="line">                            <span class="comment">//判断边界</span></span><br><span class="line">                            <span class="comment">//对于第一个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x &lt;= et.x + <span class="number">30</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y &lt;= et.y + <span class="number">20</span>) &#123;</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//对于第二个点进行判断</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= et.x &amp;&amp; <span class="keyword">this</span>.x &lt;= et.x + <span class="number">30</span></span><br><span class="line">                                    &amp;&amp; <span class="keyword">this</span>.y + <span class="number">20</span> &gt;= et.y &amp;&amp; <span class="keyword">this</span>.y + <span class="number">20</span> &lt;= et.y + <span class="number">20</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="最终版本："><a href="#最终版本：" class="headerlink" title="最终版本："></a>最终版本：</h3><p>在最终的版本当中，一个坦克大战的基本游戏算是完成了，当然还有很多需要完成点。</p><p>这里主要提示一下暂停这一个功能点：</p><p>暂停的主要思想是为坦克加一个状态去控制坦克的所有行为。让暂停的flag为false的时候，线程不在执行，绘画每次都是绘制在同一个位置。这样就造成了“暂停”的假象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暂停功能</span></span><br><span class="line"><span class="keyword">if</span>(e.getKeyCode()==KeyEvent.VK_P)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.clickcount%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        mytank.setSuspend(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        mytank.setSuspend(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用循环将坦克类中的子弹速度变成0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;vec.size(); x++)</span><br><span class="line">    &#123;</span><br><span class="line">        en = vec.get(x);</span><br><span class="line">        <span class="comment">//敌方坦克移动速度归于0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//坦克不允许移动</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.clickcount%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            en.setSuspend(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            en.setSuspend(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;en.vecs.size(); y++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//子弹的速度变成0</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.clickcount%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                en.vecs.get(y).setSuspend(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                en.vecs.get(y).setSuspend(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clickcount++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>这个文档不是最终版本，如果有不懂的欢迎提issue，承诺给予答复但是不会再改动代码了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      坦克大战的源代码学习使用
    
    </summary>
    
    
      <category term="自学编程" scheme="https://whitestore.top/categories/%E8%87%AA%E5%AD%A6%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://whitestore.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>浅谈设计模式 - 策略模式（三）</title>
    <link href="https://whitestore.top/2021/01/30/strategy1/"/>
    <id>https://whitestore.top/2021/01/30/strategy1/</id>
    <published>2021-01-30T07:39:29.000Z</published>
    <updated>2021-01-30T07:41:34.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈设计模式-策略模式（三）"><a href="#浅谈设计模式-策略模式（三）" class="headerlink" title="浅谈设计模式 - 策略模式（三）"></a>浅谈设计模式 - 策略模式（三）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次我们来讲解一下策略模式，策略模式是我们日常开发天天都在用的“模式”，最简单<code>if/else</code>就是策略，而我们用不同的策略（分支）来实现结果的区分。所以策略模式是非常重要的模式，也是理解和应用最为简单的方式（大概）。</p><p>这里再次提醒：不要过分拘泥于设计模式的类和形式，只要记住一点：将<strong>变与不变抽离的过程</strong>就是设计模式</p><a id="more"></a><h2 id="什么是策略模式？"><a href="#什么是策略模式？" class="headerlink" title="什么是策略模式？"></a>什么是策略模式？</h2><p>策略模式按照最简单的理解就是对<code>if/else</code>的解耦，也是他最常用的场景，最典型的应用场景就是购物的时候，选择用优惠券，还是满2件送一件，或者凑够多少金额满减等等，按照一般的写法，我们经常会写出大量的<code>if/else</code>，在代码量较少的时候，这种写的方式既简单又方便，但是一旦代码复杂，复杂的<code>if/else</code>会让代码越来越屎，策略模式也是为了解决此问题而产生的。</p><p>策略模式是一种<strong>行为型模式</strong>，他将一类相似的行为解耦，并且将策略封装到具体的策略实现类。</p><h2 id="策略模式结构图："><a href="#策略模式结构图：" class="headerlink" title="策略模式结构图："></a>策略模式结构图：</h2><p>下面用一张烂大街的图描绘一下策略模式的结构，切记落实设计模式到代码之后，你会对这个图的印象更加深刻。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210126230854.png" alt=""></p><p>下面给出一张工厂模式的图，会发现他们长得非常像：</p><blockquote><p>工厂模式可以看这一篇：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTIyMDY1NzkyNjQ1MjAxOTM0" title="https://juejin.cn/post/6922065792645201934">工厂模式<i class="fa fa-external-link"></i></span></p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210126230938.png" alt=""></p><h2 id="什么情况下使用策略模式？"><a href="#什么情况下使用策略模式？" class="headerlink" title="什么情况下使用策略模式？"></a>什么情况下使用策略模式？</h2><ol><li>当代码充斥大量<code>if/else</code>并且他们只是行为不同的时候，建议使用</li><li>将复杂的策略内容封装到单独的类情况下，比如我们的策略内容需要进行非常复杂的计算</li></ol><h2 id="策略模式的特点："><a href="#策略模式的特点：" class="headerlink" title="策略模式的特点："></a>策略模式的特点：</h2><ol><li>将相似的行为进行封包，客户端指定策略已达到不同行为的切换</li><li>将复杂的业务实现逻辑代码封装到单独的策略，可以通过context组合使用策略</li></ol><h2 id="工厂模式和策略模式的异同："><a href="#工厂模式和策略模式的异同：" class="headerlink" title="工厂模式和策略模式的异同："></a>工厂模式和策略模式的异同：</h2><p>相同点：</p><ol><li>策略的”执行对象”和工厂生产的“抽象对象”，他们都具有<strong>相似的行为</strong>。</li><li>都是为了抽离<strong>过程和结果</strong>实现本身。</li></ol><p>不同点：</p><ol><li>工厂模式是为了创建对象，而策略是为了解决复杂的<code>if/else</code>嵌套</li><li>工厂模式只需要传递工厂需要的参数，而策略模式则需要具体的实现类支撑。</li><li>工厂模式是<strong>创建型</strong>设计模式，而策略模式是<strong>行为型</strong>模式。前者专注于对象的<strong>创建过程</strong>，后者专注于<strong>对象的具体行为</strong></li></ol><blockquote><p>如果上面不够清晰，那么下面我给出一个具体一些的案例来说说他们的区别：</p><p>​    我们都知道低价手机的生产基本都是找代工厂，而代工厂可能不止生产一个品牌的手机，他可能承接多个品牌的手机生产，经销商让工厂生产指定的手机，而工厂负责手机的“创建”，这一模式就是典型的 <strong>工厂模式</strong>，而工厂根据不同的手机品牌，投入不同的生产材料和生成力，这个抉择的过程就是<strong>策略模式</strong>。</p></blockquote><h2 id="实际案例："><a href="#实际案例：" class="headerlink" title="实际案例："></a>实际案例：</h2><p>光有理论是不够的，我们来实际操作一下策略模式。这次的场景模拟个人觉得还挺有意思的，看下具体的内容：</p><h3 id="场景模拟："><a href="#场景模拟：" class="headerlink" title="场景模拟："></a>场景模拟：</h3><p>​    一些交易的系统，在遇到特殊情况的时候，需要进行网络监控或者管理，有时候需要根据某种条件下触发监控或者报警，比如网关接受一笔交易，需要根据交易的校验情况，在不同的校验代码段进行钉钉机器人<strong>报警</strong>，下面给出几种情况：</p><ul><li>查不出必要数据的时候，给出对应的告警。提醒运营人员排查线上环境</li><li>当数据量到达指定的限制量的时候，给出风险告警。</li><li>当出现黑名单人员进行交易拦截的时候，进行日志记录，不进行警告</li></ul><p>… </p><h3 id="不使用设计模式："><a href="#不使用设计模式：" class="headerlink" title="不使用设计模式："></a>不使用设计模式：</h3><p>兵来将挡，谁来土掩，发现那里需要告警，就往对应的地方添加代码，这样子做完成任务是很快，当然代码烂起来也是很快的。下面看一下具体的实现：</p><blockquote><p>看到这里下面的代码有可能会觉得，不是说策略模式是用来解决<code>if/else</code>的么，你这看上去也没有什么<code>if/else</code>呀，这时候就是仁者见仁智者见智了，我还是保持一个观点：设计模式用来解决实际问题，而不是拘泥于套版。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略模式：</span></span><br><span class="line"><span class="comment"> * 不使用设计模式实现告警</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/26 23:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 不使用模式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接受交易"</span>);</span><br><span class="line">        service1();</span><br><span class="line">        service2();</span><br><span class="line">        service3();</span><br><span class="line">        System.out.println(<span class="string">"完成交易"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟触发了业务场景1</span></span><br><span class="line"><span class="comment">     * 出现机房断电或者查不出必要数据的时候，给出对应的告警。提醒运营人员排查线上环境</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">service1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 为了模拟异常情况，我们用 1/0 触发一个异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 程序到了这一步算不下去了</span></span><br><span class="line">            <span class="keyword">int</span> result = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            System.out.println(<span class="string">"具体的业务"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">"警告，服务器出现异常"</span>);</span><br><span class="line">            System.out.println(<span class="string">"开始执行报警"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.err.println(<span class="string">"执行报警完成"</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟触发了业务场景2</span></span><br><span class="line"><span class="comment">     * 当数据量到达指定的限制量的时候，给出风险告警。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">service2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> limit = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">2000</span>;</span><br><span class="line">        <span class="keyword">if</span>(count &gt; limit)&#123;</span><br><span class="line">            System.out.println(<span class="string">"开始执行报警"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//.....</span></span><br><span class="line">            <span class="comment">// logger.info("警告，当前数据请求量达到限制值")</span></span><br><span class="line">            System.err.println(<span class="string">"执行报警完成"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟触发了业务场景3</span></span><br><span class="line"><span class="comment">     * 当出现黑名单人员进行交易拦截的时候，进行日志记录，不进行警告</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">service3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">// 触犯黑名单：</span></span><br><span class="line">            <span class="comment">// logger.info("警告，当前请求");</span></span><br><span class="line">            <span class="comment">// 提前退出，结束交易</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"正常完成下面的步骤"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面的所示，单就这个类就以肉眼可见的速度在膨胀代码，特别是如果我们在告警的代码需要大量的操作的时候，我们会把<strong>告警的业务和原有的业务逻辑不断纠缠</strong>，最后代码就变成了 <strong>面向实现编程</strong>，下一个接手的人看到这样的代码，也会接着往后面累加，一个臃肿的结构就此诞生了。</p><p>上面的代码存在如下的问题：</p><ol><li>当我们需要新增一处监控的时候，需要在对应的代码块增加监控和报警的逻辑</li><li>所有的改动都在一处，如果代码内容复杂会造成业务逻辑混淆</li><li>当告警的业务日趋复杂，告警的代码将变得难以维护</li></ol><h3 id="使用工厂模式："><a href="#使用工厂模式：" class="headerlink" title="使用工厂模式："></a>使用工厂模式：</h3><p>没有学习策略模式的时候，我们尝试使用工厂模式尝试改写一下这一段代码，同时在使用工厂模式之前，我们回顾一下<strong>工厂模式</strong>的图，下面画图:</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210128225036.png" alt=""></p><p>下面是使用工厂模式设计出来的关系类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ BlackListStrategy.java 黑名单策略</span><br><span class="line">+ NoResultStrategy.java 无返回值</span><br><span class="line">+ QuantityStrategy.java 数量监控策略</span><br><span class="line">+ 测试类</span><br><span class="line">+ StrategyFactory.java 策略工厂，负责生产需要的策略</span><br></pre></td></tr></table></figure><p>策略工厂，用于生产策略:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> : com.headfirst.strategy.factory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> : 策略工厂，根据参数生产对应的策略条件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> on : 2021/1/27 13:24</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> service</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CaveatStrategy <span class="title">createStrategy</span><span class="params">(String service)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 数量监控</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.equals(service, <span class="string">"quantity"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> QuantityStrategy();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Objects.equals(service, <span class="string">"noresult"</span>))&#123;</span><br><span class="line">            <span class="comment">// 没有返回值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NoResultStrategy();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Objects.equals(service, <span class="string">"blacklist"</span>))&#123;</span><br><span class="line">            <span class="comment">// 黑名单</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BlackListStrategy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黑名单策略类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当出现黑名单人员进行交易拦截的时候，进行日志记录，不进行警告</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/28 21:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListStrategy</span> <span class="keyword">implements</span> <span class="title">CaveatStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = Boolean.parseBoolean(params.get(<span class="string">"flag"</span>).toString());</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.err.println(<span class="string">"触犯黑名单列表，但不警告"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数量监控策略类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> : com.headfirst.strategy.use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> : 数量监控</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> on : 2021/1/27 13:27</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuantityStrategy</span> <span class="keyword">implements</span> <span class="title">CaveatStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> limit = Integer.parseInt(params.get(<span class="string">"limit"</span>).toString());</span><br><span class="line">        <span class="keyword">int</span> count = Integer.parseInt(params.get(<span class="string">"count"</span>).toString());</span><br><span class="line">        <span class="keyword">if</span>(count &gt; limit)&#123;</span><br><span class="line">            System.err.println(<span class="string">"警告，当前数据内容无法获取返回值"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单元测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/28 22:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟交易流转参数对象</span></span><br><span class="line">        Map&lt;String, Object&gt; objectObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        StrategyFactory strategyFactory = <span class="keyword">new</span> StrategyFactory();</span><br><span class="line">        CaveatStrategy strategy = strategyFactory.createStrategy(<span class="string">"quantity"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表示除数和被除数</span></span><br><span class="line">        objectObjectHashMap.put(<span class="string">"limit"</span>, <span class="string">"1000"</span>);</span><br><span class="line">        objectObjectHashMap.put(<span class="string">"count"</span>, <span class="string">"2000"</span>);</span><br><span class="line">        strategy.warning(objectObjectHashMap);</span><br><span class="line"></span><br><span class="line">        strategy = strategyFactory.createStrategy(<span class="string">"noresult"</span>);</span><br><span class="line">        objectObjectHashMap.put(<span class="string">"divisor"</span>, <span class="string">"1"</span>);</span><br><span class="line">        objectObjectHashMap.put(<span class="string">"dividend"</span>, <span class="string">"0"</span>);</span><br><span class="line">        strategy.warning(objectObjectHashMap);</span><br><span class="line"></span><br><span class="line">        strategy = strategyFactory.createStrategy(<span class="string">"blacklist"</span>);</span><br><span class="line">        objectObjectHashMap.put(<span class="string">"flag"</span>, <span class="keyword">true</span>);</span><br><span class="line">        strategy.warning(objectObjectHashMap);</span><br><span class="line">    &#125;<span class="comment">/*结果如下：</span></span><br><span class="line"><span class="comment">    警告，当前数据内容无法获取返回值</span></span><br><span class="line"><span class="comment">    触犯黑名单列表，但不警告</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码存在如下的问题：</p><ol><li>策略工厂虽然解决了策略的生产问题，但是需要自己指定策略，而且每次更换策略内容会导致工厂的代码也需要随之改动</li><li>维护和扩展都需要依赖工厂，我们每多一个策略都需要更换工厂的内容</li><li>当告警的业务日趋复杂，工厂的代码将会越发的臃肿</li></ol><h3 id="使用策略模式："><a href="#使用策略模式：" class="headerlink" title="使用策略模式："></a>使用策略模式：</h3><p>在具体的实现之前，我们根据上面提到的图，照着模样画葫芦画一个图出来:</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210128230115.png" alt=""></p><p>策略的实现类在上上面的工厂模式，这里给出上下文以及使用的具体方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ StrategyContext 策略上下文</span><br><span class="line">+ 策略模式的单元测试</span><br></pre></td></tr></table></figure><p>策略类的上下文：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略的上下文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/28 22:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CaveatStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StrategyContext</span><span class="params">(CaveatStrategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStrategy</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>&#123;</span><br><span class="line">        strategy.warning(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>策略模式的单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单元测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/28 22:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用策略模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; objectObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        objectObjectHashMap.put(<span class="string">"limit"</span>, <span class="string">"1000"</span>);</span><br><span class="line">        objectObjectHashMap.put(<span class="string">"count"</span>, <span class="string">"2000"</span>);</span><br><span class="line">        objectObjectHashMap.put(<span class="string">"divisor"</span>, <span class="string">"1"</span>);</span><br><span class="line">        objectObjectHashMap.put(<span class="string">"dividend"</span>, <span class="string">"0"</span>);</span><br><span class="line">        objectObjectHashMap.put(<span class="string">"flag"</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        CaveatStrategy blackListStrategy = <span class="keyword">new</span> BlackListStrategy();</span><br><span class="line">        CaveatStrategy noResultStrategy = <span class="keyword">new</span> NoResultStrategy();</span><br><span class="line">        CaveatStrategy quantityStrategy = <span class="keyword">new</span> QuantityStrategy();</span><br><span class="line">        <span class="comment">// 三种策略独立</span></span><br><span class="line">        StrategyContext strategyContext = <span class="keyword">new</span> StrategyContext(blackListStrategy);</span><br><span class="line">        strategyContext.doStrategy(objectObjectHashMap);</span><br><span class="line">        StrategyContext strategyContext2 = <span class="keyword">new</span> StrategyContext(noResultStrategy);</span><br><span class="line">        strategyContext2.doStrategy(objectObjectHashMap);</span><br><span class="line">        StrategyContext strategyContext3 = <span class="keyword">new</span> StrategyContext(quantityStrategy);</span><br><span class="line">        strategyContext3.doStrategy(objectObjectHashMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化一下：</span></span><br><span class="line">        StrategyContext strategyContext4 = <span class="keyword">new</span> StrategyContext(blackListStrategy);</span><br><span class="line">        strategyContext4.doStrategy(objectObjectHashMap);</span><br><span class="line">        strategyContext4 = <span class="keyword">new</span> StrategyContext(noResultStrategy);</span><br><span class="line">        strategyContext4.doStrategy(objectObjectHashMap);</span><br><span class="line">        strategyContext4 = <span class="keyword">new</span> StrategyContext(quantityStrategy);</span><br><span class="line">        strategyContext4.doStrategy(objectObjectHashMap);</span><br><span class="line">    &#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment">    触犯黑名单列表，但不警告</span></span><br><span class="line"><span class="comment">    警告，当前数据内容无法获取返回值</span></span><br><span class="line"><span class="comment">    触犯黑名单列表，但不警告</span></span><br><span class="line"><span class="comment">    警告，当前数据内容无法获取返回值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的内容可以看出，我们只需要把策略传给上下文，上下文会根据传入的策略自动匹配对应的策略执行报警。</p><p>但是我们也发现了一些问题：</p><ol><li>代码存在new策略类，这又回到以前不使用工厂的时候情况了</li><li>如果我们用策略组合，虽然少了很多的if/else，但是建立策略的细节依旧在客户端。</li></ol><p>答案已经很明显了，策略和工厂双方各有利弊，果断用策略和工厂模式组合起来进行重写。</p><h3 id="简单工厂和策略模式结合："><a href="#简单工厂和策略模式结合：" class="headerlink" title="简单工厂和策略模式结合："></a>简单工厂和策略模式结合：</h3><p>工厂和策略结合之后，这里我们结合context上下文和工厂看一下效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 改写策略的上下文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/28 22:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CaveatStrategyFactory caveatStrategyFactory = <span class="keyword">new</span> CaveatStrategyFactory();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStrategy</span><span class="params">(String service, Map&lt;String, Object&gt; params)</span></span>&#123;</span><br><span class="line">        caveatStrategyFactory.createStrategy(service).warning(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个工厂和上面工厂模式的工厂没有区别，个人为了区分换了个名字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 警告策略的生成厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/26 23:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CaveatStrategyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> service 策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CaveatStrategy <span class="title">createStrategy</span><span class="params">(String service)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 数量监控</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.equals(service, <span class="string">"quantity"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> QuantityStrategy();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Objects.equals(service, <span class="string">"noresult"</span>))&#123;</span><br><span class="line">            <span class="comment">// 没有返回值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NoResultStrategy();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Objects.equals(service, <span class="string">"blacklist"</span>))&#123;</span><br><span class="line">            <span class="comment">// 黑名单</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BlackListStrategy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码有了如下的好处：</p><ol><li>客户端不在需要手动new对象，由工厂来完成</li><li>指定策略只需要的参数和指定策略的名称，上下文“自动”帮我们完成结果</li><li>将策略的<strong>生成过程</strong>和策略的<strong>执行过程</strong>更进一步的解耦</li></ol><p>到此，这样的代码可维护性和阅读性能大大提高，后续如果还需要扩展策略直接实现抽象接口同时工厂新增判断，然后客户端指定新的策略服务名称即可让整个流程自动化。</p><p>顺带一提的是，策略和简单工厂的结合是受到了 <strong>《大话设计模式》</strong>的启发，大致的思路也做了参考，顿时感觉这样才算是有点学以致用的感觉，撸完代码的感觉还是非常快乐。</p><h3 id="更好的“策略”："><a href="#更好的“策略”：" class="headerlink" title="更好的“策略”："></a>更好的“策略”：</h3><p>上面的代码还不是最优的，在spring当中，我们的策略一般会作为一个<strong>bean</strong>使用，而不需要每次都使用<code>new</code>去构建我们的策略，因为我们的策略基本都是<strong>单例</strong>的。下面给出一些建议的写法：</p><p>这里我们按照单独的策略类为例，他应该如下：</p><p><strong>被spring管理的策略bean:</strong></p><ul><li>NoResultStrategyImpl 无返回值的策略实现bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无结果的业务实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/28 23:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoResultStrategyImpl</span> <span class="keyword">implements</span> <span class="title">CaveatStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一般此处会组合一些mapper或者引入一些日志记录logger</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// loggger.info("记录需要的信息");</span></span><br><span class="line">        <span class="keyword">int</span> divisor = Integer.parseInt(params.get(<span class="string">"divisor"</span>).toString());</span><br><span class="line">        <span class="keyword">int</span> dividend = Integer.parseInt(params.get(<span class="string">"dividend"</span>).toString());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> result = dividend / divisor;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">"警告，服务器出现异常"</span>);</span><br><span class="line">            System.out.println(<span class="string">"开始执行报警"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// logger.info("日志记录");</span></span><br><span class="line">            System.err.println(<span class="string">"执行报警完成"</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行一些策略等</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SpringCaveaStrategy spring<strong>工具类</strong>，使用工具类获取注解对应的bean，这样可以实现从一个接口获取他所管理的多个子类（建议自定义service的Bean名称防止冲突）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Spring 工具获取指定的Bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/28 23:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCaveaStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用spring编写的工具类进行bean的获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CaveatStrategy <span class="title">getBean</span><span class="params">(String service)</span></span>&#123;</span><br><span class="line">        <span class="comment">// return SpringUtils.getBean(service);</span></span><br><span class="line">        <span class="comment">// 不建议直接调用，做一下null指针判断</span></span><br><span class="line">        <span class="keyword">return</span> SpringUtils.getBean(service).warning(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在最后我们结合spring实现 <strong>单例</strong>之后，我们成功将 单例 + 策略 + 简单工厂进行了整合，这样的代码写起来才爽呀，然而现实生活中我们大多数在一个已经建立好的结构上做优化，这时候就需要更多思考了……</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>本文在策略模式上做了进一步的深入思考，我对比了一下简单工厂和策略工厂，这两个模式可以说长得还是非常像的，仅仅靠这些简单的案例是不够的，还需要更多的灵活运用。</p><p>个人学习的思路一致按照 模仿 -&gt; 熟练 -&gt;创新，同时按照自己的理解去设计场景，这样给自己的学习是很大的，能看到自己知识的模糊点。</p><p>如果这篇文章对你有帮助或者有任何建议意见欢迎讨论。后续会更新更多关于设计模式的内容。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      行为型模式
    
    </summary>
    
    
      <category term="设计模式" scheme="https://whitestore.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://whitestore.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈设计模式 - 简单工厂模式（二）</title>
    <link href="https://whitestore.top/2021/01/30/simplefactory/"/>
    <id>https://whitestore.top/2021/01/30/simplefactory/</id>
    <published>2021-01-30T07:37:37.000Z</published>
    <updated>2021-01-30T07:39:07.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈设计模式-简单工厂模式（二）"><a href="#浅谈设计模式-简单工厂模式（二）" class="headerlink" title="浅谈设计模式 - 简单工厂模式（二）"></a>浅谈设计模式 - 简单工厂模式（二）</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    对于学习设计模式，我推荐：<strong>《HeadFirst设计模式》</strong>和<strong>《大话设计模式》</strong>。另外设计模式推崇学以致用。看到任何知识之前，先想想我能学到什么，带着问题去看待问题，将会使得学习事半功倍，否则就是事倍功半。</p><p>​    不要过分拘泥于设计模式的类和形式，只要记住一点：将<strong>变与不变抽离的过程</strong>就是设计模式</p><a id="more"></a><h3 id="为什么设计模式学了就忘？"><a href="#为什么设计模式学了就忘？" class="headerlink" title="为什么设计模式学了就忘？"></a>为什么设计模式学了就忘？</h3><ul><li>不敢尝试（当然也不要过度自信，看到代码就想用设计模式）</li><li>过于关注设计模式的结构，忘记了业务本身。<ul><li>很多时候我们拘泥于形式和设计，纠结于用什么设计模式，其实设计模式本身就是继承，封装，多态的三者结合，很多时候只要可以解决问题，就不需要用过多的技巧</li></ul></li><li>学习之前神志不清<ul><li>大致就是邯郸学步，看到别人学设计模式，自己也跑去学设计模式</li></ul></li></ul><p>很多人学了设计模式之后隔了一段时间之后，发现自己不使用，忘得一干二净（我也是）。所以希望这些设计模式更多的是结合一些比较实际一点的需求（尽量），毕竟设计模式学了就是拿来用的，如果不用不如不要学，去看点动漫电视剧啥的放松一下。</p><h2 id="什么是简单工厂模式？"><a href="#什么是简单工厂模式？" class="headerlink" title="什么是简单工厂模式？"></a>什么是简单工厂模式？</h2><h3 id="现实理解："><a href="#现实理解：" class="headerlink" title="现实理解："></a>现实理解：</h3><p>简单工厂从字面意思来看，就如同我们平常的工厂一般，我们想要重复的生产某样物品，就需要建设工厂不断生产。我们需要给工厂下达指令，比如生产一批“苹果”，生成一批“香蕉”。我们只需要只会工厂生产，而不需要去理会内部的细节。</p><h3 id="工厂模式："><a href="#工厂模式：" class="headerlink" title="工厂模式："></a>工厂模式：</h3><p>简单工厂模式，是一种<strong>创建型设计模式</strong>，定义简单工厂，负责为具体操作对象生成需要的操作类，把创建对象和使用对象进行分开，使用对象方只需要传入调用简单工厂的工厂方法进行创建对象。</p><h2 id="简单工厂的特点："><a href="#简单工厂的特点：" class="headerlink" title="简单工厂的特点："></a>简单工厂的特点：</h2><ol><li>返回抽象的接口或者父类，由工厂管理子类创建过程</li><li>让创建过程变成一个黑盒</li><li>封闭创建过程，客户端只需要关注结果。</li></ol><h2 id="工厂模式优缺点："><a href="#工厂模式优缺点：" class="headerlink" title="工厂模式优缺点："></a>工厂模式优缺点：</h2><p>优点：</p><ol><li>使用创建工厂的方法，我们实现了获取具体对象和生产对象的解耦，由生产对象的工厂通过我们传入的参数生产对应的对象，调用方只需要传递需要生产的对象来实现具体的效果。</li><li>解耦了创建和被创建的过程。</li><li>根据不同的逻辑判断生成不同的具体对象。</li></ol><p>缺点：</p><ol><li>每增加一个工厂对象具体的实现类，就需要增加<code>if/else</code>不利于维护</li><li>大量的子类会造成工厂类的迅速膨胀和臃肿</li><li>简单工厂的方法一般处理简单的业务逻辑，如果创建逻辑复杂不建议使用。</li></ol><h2 id="实际案例："><a href="#实际案例：" class="headerlink" title="实际案例："></a>实际案例：</h2><p>下面的案例是个人理解，可能存在偏差，不同人理解有差异。欢迎给出建议。</p><h3 id="场景模拟："><a href="#场景模拟：" class="headerlink" title="场景模拟："></a>场景模拟：</h3><p>​    我们以经典的任天堂游戏坦克大战为例，在进入游戏的关卡的时候，会出现我方的坦克和敌人的坦克，我方坦克和地方坦克不仅形状不同，而且很脆，但是敌人的坦克根据颜色需要打好几枪才会毁灭，那么如果用代码来模拟是什么样的呢？</p><h3 id="不使用设计模式："><a href="#不使用设计模式：" class="headerlink" title="不使用设计模式："></a>不使用设计模式：</h3><p>根据场景，我设计了如下的图表</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210125224612.png" alt=""></p><p>​    按照正常方式，我们的定义了一个坦克的父类，接着我们需要定义三个子类来继承父类坦克，以实现自己的扩展。当我们需要创建坦克的时候，我们需要纠结所有的细节，比如到底是创建我方坦克还是敌人坦克，我方的坦克位置，敌人的坦克位置，我方的血量，敌人的血量，等等，<strong>从创建坦克到销毁坦克的所有过程，都由我们进行参与。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ 坦克抽象类 Tank.java</span><br><span class="line">+ 老鼠坦克 MouseTank.java</span><br><span class="line">+ 我方坦克 MyTank.java</span><br><span class="line">+ 巨型坦克 BigTank.java</span><br><span class="line">+ 测试类 Main.java</span><br></pre></td></tr></table></figure><p>具体的代码实现如下：</p><ul><li>坦克的抽象类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 坦克的抽象类，定义坦克的行为</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 0:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Tank</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 坦克hp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 坦克子弹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> List&lt;Object&gt; bullet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动的方法s</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 攻击</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>老鼠坦克</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 老鼠坦克</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 22:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MouseTank</span> <span class="keyword">extends</span> <span class="title">Tank</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"长得尖尖的，很像老鼠"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MouseTank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 坦克假设只有一条命</span></span><br><span class="line">        hp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">        bullet = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化添加六发子弹</span></span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"老鼠坦克移动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"老鼠坦克开枪"</span>);</span><br><span class="line">        <span class="comment">// ..弹出子弹</span></span><br><span class="line">        <span class="keyword">if</span> (bullet.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"老鼠坦克没有子弹了"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 老鼠坦克一次性开两枪</span></span><br><span class="line">        bullet.remove(bullet.get(bullet.size() - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"停止"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 一旦创建就开始移动</span></span><br><span class="line">            move();</span><br><span class="line">            <span class="comment">// 漫无目的开枪</span></span><br><span class="line">            attack();</span><br><span class="line">            attack();</span><br><span class="line">            <span class="comment">// 做完一轮操作歇一秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 随机停止</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> Random(<span class="number">100</span>).nextInt() % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>巨型坦克</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 巨型坦克</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 22:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigTank</span> <span class="keyword">extends</span> <span class="title">Tank</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"巨型坦克"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BigTank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 带颜色的坦克有很多条命</span></span><br><span class="line">        hp = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">        bullet = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化添加三发子弹</span></span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"巨型坦克移动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"巨型坦克开枪"</span>);</span><br><span class="line">        <span class="comment">// ..弹出子弹</span></span><br><span class="line">        <span class="keyword">if</span> (bullet.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"巨型坦克没有子弹了"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 老鼠坦克一次性开两枪</span></span><br><span class="line">        bullet.remove(bullet.get(bullet.size() - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"巨型坦克停止"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 一旦创建就开始移动</span></span><br><span class="line">            move();</span><br><span class="line">            <span class="comment">// 漫无目的开枪</span></span><br><span class="line">            attack();</span><br><span class="line">            <span class="comment">// 做完一轮操作歇两秒，</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 随机停止，活动没有老鼠坦克频繁</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> Random(<span class="number">1000</span>).nextInt() % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我方坦克</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我方坦克</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 21:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTank</span> <span class="keyword">extends</span> <span class="title">Tank</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我方坦克假设只有一条命</span></span><br><span class="line">        hp = <span class="number">1</span>;</span><br><span class="line">        bullet = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化添加三发子弹</span></span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">        bullet.add(<span class="keyword">new</span> Object());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"移动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"攻击地方坦克"</span>);</span><br><span class="line">        <span class="comment">// ..弹出子弹</span></span><br><span class="line">        <span class="keyword">if</span>(bullet.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"没有子弹了"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bullet.remove(bullet.get(bullet.size() -<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"停止"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类：</li></ul><blockquote><p>建议使用单元测试，这里图方便没有用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这种频繁的new，让我们逐渐变成面向过程编程。。。。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 虽然我们可以自己生产坦克，但是我们每次都需要自己手动去生产对应的坦克。这种频繁的new 操作</span></span><br><span class="line">        Tank bigTank1 = <span class="keyword">new</span> BigTank();</span><br><span class="line">        Tank bigTank2 = <span class="keyword">new</span> BigTank();</span><br><span class="line">        Tank bigTank3 = <span class="keyword">new</span> BigTank();</span><br><span class="line">        Tank bigTank4 = <span class="keyword">new</span> BigTank();</span><br><span class="line">        <span class="comment">// 有多少个对象，就有多少个new</span></span><br><span class="line">        Tank mouseTank1 = <span class="keyword">new</span> MouseTank();</span><br><span class="line">        Tank mouseTank2 = <span class="keyword">new</span> MouseTank();</span><br><span class="line">        Tank mouseTank3 = <span class="keyword">new</span> MouseTank();</span><br><span class="line">        Tank mouseTank4 = <span class="keyword">new</span> MouseTank();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 我方坦克，需要自己操作</span></span><br><span class="line">        Tank myTank1 = <span class="keyword">new</span> MyTank();</span><br><span class="line">        Tank myTank2 = <span class="keyword">new</span> MyTank();</span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">/*//运行结果：</span></span><br><span class="line"><span class="comment">        停止</span></span><br><span class="line"><span class="comment">        老鼠坦克移动</span></span><br><span class="line"><span class="comment">        老鼠坦克开枪</span></span><br><span class="line"><span class="comment">        老鼠坦克开枪</span></span><br><span class="line"><span class="comment">        停止</span></span><br><span class="line"><span class="comment">        老鼠坦克移动</span></span><br><span class="line"><span class="comment">        老鼠坦克开枪</span></span><br><span class="line"><span class="comment">        巨型坦克移动</span></span><br><span class="line"><span class="comment">        巨型坦克开枪</span></span><br><span class="line"><span class="comment">        老鼠坦克开枪</span></span><br><span class="line"><span class="comment">        老鼠坦克没有子弹了</span></span><br><span class="line"><span class="comment">        停止</span></span><br><span class="line"><span class="comment">        老鼠坦克移动</span></span><br><span class="line"><span class="comment">        老鼠坦克开枪</span></span><br><span class="line"><span class="comment">        老鼠坦克没有子弹了</span></span><br><span class="line"><span class="comment">        老鼠坦克开枪</span></span><br><span class="line"><span class="comment">        老鼠坦克没有子弹了</span></span><br><span class="line"><span class="comment">        巨型坦克移动</span></span><br><span class="line"><span class="comment">        巨型坦克开枪</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure><h4 id="上面的代码有什么问题："><a href="#上面的代码有什么问题：" class="headerlink" title="上面的代码有什么问题："></a>上面的代码有什么问题：</h4><p>咋看一下好像没啥问题呀，我们既有定义抽象的父类，同时又定义了子类去继承，在需要的时候我们直接new就是了。</p><p>其实问题就出在new这一步，可以说我们<strong>写烂代码的第一步就是new</strong>。因为我们掉进了“细节”的陷阱，下面我们分析一下我们的代码有什么问题：</p><ol><li>我要加一个坦克，虽然可以继承，但是如果要加入到战场，需要我们记住新坦克，并且new出来</li><li>我想要老鼠坦克，却不小心new了一个普通地方坦克，当代码较少的时候可能没啥问题，但是如果代码多了，我们要花大量时间查找</li><li>我们的测试类掌控了一切，他的活太重了，不仅需要new，还需要new之后的所有操作。</li></ol><h3 id="用简单工厂模式改进："><a href="#用简单工厂模式改进：" class="headerlink" title="用简单工厂模式改进："></a>用简单工厂模式改进：</h3><p>既然知道了有什么问题，那么我们可以加入一个简单工厂类来管理坦克的创建过程</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210126000032.png" alt=""></p><p>增加工厂类 <code>TankFactory.java</code></p><p>用工厂来管理具体的坦克创建过程:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 坦克工厂，专门负责生产坦克</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 22:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TankFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建坦克</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tank <span class="title">createTank</span><span class="params">(String check)</span></span>&#123;</span><br><span class="line">        Tank tank = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(Objects.equals(check, <span class="string">"my"</span>))&#123;</span><br><span class="line">            tank = <span class="keyword">new</span> MyTank();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Objects.equals(check, <span class="string">"mouse"</span>))&#123;</span><br><span class="line">            tank = <span class="keyword">new</span> MouseTank();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(check, <span class="string">"big"</span>))&#123;</span><br><span class="line">            tank = <span class="keyword">new</span> BigTank();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"当前坦克不支持生产"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tank;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们重写单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单元测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/25 22:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们将生产坦克的过程全部交给了工厂来处理</span></span><br><span class="line"><span class="comment">     * 可能还是奇怪，这和刚才没有什么区别呀？</span></span><br><span class="line"><span class="comment">     * 我们来看下区别：</span></span><br><span class="line"><span class="comment">     * 1. 创建的过程没有了，虽然是一个简单的new，但是new的过程交给了工厂</span></span><br><span class="line"><span class="comment">     * 2. 我们后续如果要在坦克加入别的东西，只需要去改工厂类和具体的实现类，不需要该此处代码</span></span><br><span class="line"><span class="comment">     * 3. 如果不支持的操作，工厂还可以通知我们这样做不对</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TankFactory tankFactory = <span class="keyword">new</span> TankFactory();</span><br><span class="line"></span><br><span class="line">        Tank my = tankFactory.createTank(<span class="string">"my"</span>);</span><br><span class="line">        Tank mouse = tankFactory.createTank(<span class="string">"mouse"</span>);</span><br><span class="line">        Tank big = tankFactory.createTank(<span class="string">"big"</span>);</span><br><span class="line">        <span class="comment">// 我要一个没有的设计过的坦克</span></span><br><span class="line">        Tank mybig = tankFactory.createTank(<span class="string">"mybig"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">/*//</span></span><br><span class="line"><span class="comment">    运行结果：</span></span><br><span class="line"><span class="comment">    Exception in thread "main" 老鼠坦克移动</span></span><br><span class="line"><span class="comment">    巨型坦克移动</span></span><br><span class="line"><span class="comment">    老鼠坦克开枪</span></span><br><span class="line"><span class="comment">    巨型坦克开枪</span></span><br><span class="line"><span class="comment">    老鼠坦克开枪</span></span><br><span class="line"><span class="comment">    java.lang.UnsupportedOperationException: 当前坦克不支持生产</span></span><br><span class="line"><span class="comment">at com.headfirst.factory.use.TankFactory.createTank(TankFactory.java:27)</span></span><br><span class="line"><span class="comment">at com.headfirst.factory.use.Main.main(Main.java:33)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="改进之后有什么变化："><a href="#改进之后有什么变化：" class="headerlink" title="改进之后有什么变化："></a>改进之后有什么变化：</h4><ol><li>首先，我们把创建的具体过程交给了工厂，不在需要关注创建的细节</li><li>如果需要修改创建的过程，不需要改客户端代码，只需要修改工厂的代码</li><li>扩展同样只需要继承工厂的生产抽象对象即可。</li></ol><h2 id="简单工厂模式在spring中的体现："><a href="#简单工厂模式在spring中的体现：" class="headerlink" title="简单工厂模式在spring中的体现："></a>简单工厂模式在spring中的体现：</h2><p><code>@Bean</code>注解让我们可以在被Spring管理的对象定义Bean的创建过程，而此时这个类就类似一个工厂，对象的创建细节被封装在具体的方法之中，同时这种方式也是一种<code>单例设计模式</code>，我们定义的<code>@Bean</code>是单例的，在需要的地方可以使用<code>Spring</code>的注解进行注入而不需要自己new对象。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>案例可能不是十分贴切，因为仅仅只有一个new方法是不需要用工厂模式的，但是这里是个人思考之后觉得最能够联想到的情况，就使用了坦克这个例子作为文章的主体。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      简单工厂模式是一种创建型模式
    
    </summary>
    
    
      <category term="设计模式" scheme="https://whitestore.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://whitestore.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《小狗钱钱》读书笔记</title>
    <link href="https://whitestore.top/2021/01/23/moneydog/"/>
    <id>https://whitestore.top/2021/01/23/moneydog/</id>
    <published>2021-01-23T07:02:39.000Z</published>
    <updated>2021-01-23T07:11:11.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《小狗钱钱》读书笔记"><a href="#《小狗钱钱》读书笔记" class="headerlink" title="《小狗钱钱》读书笔记"></a>《小狗钱钱》读书笔记</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>小狗钱钱算是真正意义上个人第一本理财书，作者用故事向读者讲述理财，不管是学习还是单纯当一个故事去看，个人都觉得作者非常有教育意义。这本书和《穷爸爸与富爸爸》一样是对理财的启蒙书，但是他的“下部”更多的是探讨活着的意义，以及好好做人等一些方面的道理。</p><a id="more"></a><h2 id="推荐指数："><a href="#推荐指数：" class="headerlink" title="推荐指数："></a>推荐指数：</h2><p>这本书不管什么年龄段都非常有启发意义，用一个类似童话般的故事，告诉人们理财和做人的道理，我们没有主角那边幸运而奇妙的事情，但是确实可以通过行动来改变自身。</p><h2 id="思维导图："><a href="#思维导图：" class="headerlink" title="思维导图："></a>思维导图：</h2><p>下面是个人的思维导图笔记，这次没有参考别人怎么写的，完全按照自己的想法进行：</p><p>【<strong><span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvM1Q3UmQ3cENRZFI=" title="https://share.mubu.com/doc/3T7Rd7pCQdR">https://share.mubu.com/doc/3T7Rd7pCQdR<i class="fa fa-external-link"></i></span></strong>】</p><h2 id="复读："><a href="#复读：" class="headerlink" title="复读："></a>复读：</h2><p>下面的内容其实和看书一样了，不喜欢就跳过吧。大致讲了下个人读书的记忆。为什么要<strong>复读</strong>，一方面自己实在是喜欢这本书，另一方面是记录一下希望以后还能怀着感激的心情回想起来，就和书中所讲的一样，重要的不是你想要做什么，而是你做过什么。</p><p>本书分为上下两部，上部讲述如何造就“甜甜圈”的外圈，而下部则告诉读者要丰富“甜甜圈”的中心，因为最重要的往往是看不见的，<strong>许多人具有相似的‘圆圈’，但他们的‘圆孔’却各不相同。</strong></p><p>以下内容全凭记忆复述。=-=</p><h3 id="上部："><a href="#上部：" class="headerlink" title="上部："></a>上部：</h3><p>吉娅在一个由原本的富人转为濒临破产的中产家庭，父母因为经济拮据经常争吵，每天不断的抱怨和压抑笼罩着吉娅的家庭，而吉娅则一直想要逃离这种家庭，同时认为自己去美国的梦想永远不会实现。</p><p>某一天在吉娅的院子里躺着一条受了重伤的小狗，吉娅因为同情心请求父母收留，父母在软磨硬泡之下终于答应收留，然而正是这条小狗，改写了吉娅一家的未来。而父亲为小狗称之为“钱钱”，也是故事的开端。因为在未来“钱”真的像“小狗”一样靠近吉娅一家。</p><p>照顾“钱钱”一段时间之后，某一天吉娅救下不小心掉入水中的“钱钱”，钱钱在被救起之后，竟然开口说话，并且告诉吉娅它可以帮助吉娅完成自己的梦想，同时改变家庭状况。但是前提是吉娅真的<strong>想要</strong>改变</p><p>“钱钱”告诉吉娅首先准备“梦想相册”和“成功日记”，还有一个“梦想储蓄罐”，“梦想相册”记录自己最想做的十件事情，并且从中挑选三件最重要的事情。吉娅用挑选了下了<strong>去美国</strong>，<strong>买笔记本</strong>、<strong>帮助父母摆脱负债</strong>。钱钱告诉吉娅每天需要把自己的每一份零花钱分成三份，把一半以上放入储蓄罐里面作为启动资金（个人理解），剩下一小半，一大半投入到自己的梦想，留下最后一部分，作为自己的零花钱。（事实证明，如果从小时候养成存钱和规划资产的习惯，大部分人在工作以后，基本都会有不错的启动资金。当然我没做到，哈哈）</p><p>妈妈知道吉娅梦想并且听说储蓄罐的事情之后嘲笑吉娅存钱的速度，实现梦想早就成为老奶奶了，而吉娅因为自尊心大哭一场，并且更加下定决定要实现自己的去美国读书的梦想，而小狗钱钱则说：在你实现梦想的道路上会有无数的人来阻止你自己，有时候甚至会是自己最亲的人。</p><p>吉娅受挫之后，决心想办法挣钱达成梦想，但是她发现没有任何思路，深思熟虑之下，她鼓起勇气找到堂兄，在堂兄数数落成只会玩洋娃娃的小女孩之后，还是给了吉娅建议，讲述自己卖面包赚钱的事情，并且告诉吉娅赚钱的机会往往在人们最需要同时他们最不愿意做的事情上面。同时也告诉吉娅要去寻找自己想做并且对工作能充满热情的工作方式，<strong>因为堂兄就是因为喜欢面包所以他很乐意为他人送自己喜爱的面包</strong>。吉娅在连续好几天的思考之后，发现了帮邻居“遛狗”这一条路，同时发现“”，就这样吉娅认识了更多的人。</p><p>吉娅“遛狗”一段时间之后，“钱钱”的原主人金先生派人找到吉娅一家，并且希望吉娅能带“钱钱”见他，吉娅起初害怕会说话的“钱钱”被人夺走，但是还是捡了金先生，然而金先生和吉娅想的不一样，是一个富有知识和亲和的富人，但是因为车祸无法自由行动，钱钱是金先生的上一家主人，因为车祸导致钱钱走失，吉娅讲述自己照顾钱钱的经历收到金先生的喜爱，并且答应有偿让吉娅每周带钱钱来看望他，吉娅当然欣然接受。</p><p>在吉娅打工之路不断扩展的时候，钱钱在某一天问吉娅是否有记录成功日记，吉娅说自己因为琐事忘记写，遭到钱钱的警告，不管发生任何事情，都不要忘记写成功日记，如果不去写成功日记，那么成功只会离吉娅越来越远，很多人非常努力却从来记不住自己做过什么，他们逐渐偏离自己的目标，忘记自己的梦想。（和想要减肥是一个道理）。</p><p>吉娅和金先生分享成功笔记和梦想相册，让金先生很感兴趣，金先生和吉娅讲了一个“鹅”的故事，提醒吉娅要培养自己的“鹅”，同时不要让别人夺走或者杀死自己的“鹅”。吉娅从金先生学到了很多道理。</p><p>吉娅的“遛狗”事业不断扩大，但是因为需要的遛狗的人越来越多，吉娅逐渐力不从心，吉娅在堂兄的建议之下，找到自己的好朋友为自己遛狗，并且从朋友的“工资”当中抽取一部分作为“推荐费”，吉娅起初觉得很愧疚，因为自己没有工作却要从自己朋友的那里得到报酬，而金先生开导了她，告诉她说你为你的朋友提供的金点子，不仅让你可以赚钱，也让你的朋友赚到了钱，而你的朋友也很乐意为你工作，这是你应得的。</p><p>吉娅和堂兄以及小伙伴认识了贵妇，而在探险的过程中成功守住了财产，贵妇为了报答吉娅等小伙伴，提议一起建立一个基金小队，一起投资购买股票和基金，妇人提议购买购买基金的方法，要购买跨国公司的股票，并且要做好长期持有的准备。在他们刚开始购买股票的半年，基金大跌，此时堂兄觉得基金要亏钱想要取出来但是被阻止了，又过了半年之后，基金翻倍了，此时堂兄想要把利润取出来庆祝一下，也被贵妇阻止了，而此吉娅和伙伴们分享了“鹅”的故事受到了大伙们的欢迎，同时贵妇推荐吉娅去学校把理财的观念传播给学校，想让吉娅上台进行演讲。</p><p>吉娅由于害怕上台演讲，而钱钱让吉娅去看成功日记，吉娅通过日记成功的摆脱了内心的恐惧，同时在小伙伴和父母邻居的支持下，吉娅更是非常棒的分享了自己的经历，出色的完成了演讲。</p><p>故事到这里差不多就告一段落了，至此是个人回忆的全部内容，比如金先生帮助吉娅父母拜托了负债问题，而吉娅和父母谈心之后，父亲清楚自己想要做的事情之后，出去创业。</p><p>到上部的最后，小狗钱钱说以后再也不能说话了，钱钱告诉吉娅说你得到某样东西的时候，必然会失去一些东西，但是永远不要去怀念已经失去的东西的，而是要好好想想自己现在拥有的东西。</p><h3 id="下部："><a href="#下部：" class="headerlink" title="下部："></a>下部：</h3><p>下部我觉得有必要认真品味一下，下部个人认为是作者所认知的做人的正确准则，同时用故事告诉我们嫉妒是如何让一个人变得狭隘，嘲笑他人的缺点最后给吉娅造成多大的麻烦，国王硬币的正反面给人带来的思考，吹牛高傲的人是如此的无知和无力，尽管他们说的话有时候很有道理，但是并不能掩盖脆弱和无知，告诉读者不管你的对手多么强大，都要想尽办法克服“失败”的恐惧，吉娅在“外在”形象丰富的同时，也带来了不少问题。第二部主要讲了吉娅的个人成长。还是十分有意思的。</p><h2 id="精句摘录："><a href="#精句摘录：" class="headerlink" title="精句摘录："></a>精句摘录：</h2><ol><li>许多人具有相似的‘圆圈’，但他们的‘圆孔’却各不相同。</li><li>在你的生命中没有什么比寻找白色石头更重要的事情了。如果不去寻找，当然可以避免很多危险与问题，可你也将无法获得你本来能够得到的幸福。</li><li>哪里都有可爱的人，当然也有不那么可爱的人。不可能所有人都是友好的。这不以人的意志为转移。有些人连自己都不喜欢，因而也不会去喜欢别人。</li><li>取决于你怎么想。如果你只想着自己将要失去一些东西，那就肯定会痛苦。但如果你更多地想到我们在一起经历过那么多美好的事情，快乐和感激之情就会占据上风。</li></ol><h2 id="感悟："><a href="#感悟：" class="headerlink" title="感悟："></a>感悟：</h2><p>​    “永远不要杀死你的鹅”是我认为能从书中学到的最好的东西，同时“甜甜圈”和“白色石头”，是需要不断思考的，我从这本书里面学到了许多对自己有用的东西。</p><p>​    成功日记和知识的笔记是很重要的，如果我们要知道自己的知识是否正确，以及自己做的事情是否正确，那么最好的方式无疑就是分享出去，分享给你的朋友和家人，让他们用他们的思考去看待这件事。如果你做的事情得到大多数人的认可。</p><p>​    永远记住在过上自己想要生活的道路上，人永远都不是孤独的。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>个人还是很喜欢小狗钱钱这本书的。我时常会想起这本书的故事，想起吉娅和小狗钱钱，我也时常在思考自己脑海的巨人和侏儒，我也在对抗侏儒，站在巨人的肩膀上思考。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      理财的入门书,强烈推荐
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>《穷爸爸与富爸爸》读书笔记</title>
    <link href="https://whitestore.top/2021/01/18/licai/"/>
    <id>https://whitestore.top/2021/01/18/licai/</id>
    <published>2021-01-18T15:46:05.000Z</published>
    <updated>2021-01-18T15:47:10.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《穷爸爸与富爸爸》读书笔记"><a href="#《穷爸爸与富爸爸》读书笔记" class="headerlink" title="《穷爸爸与富爸爸》读书笔记"></a>《穷爸爸与富爸爸》读书笔记</h1><p>[TOC]</p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这本书是我在地铁上的碎片时间用Kindle看完的，也是这本书我才知道“财商”这东西，说实话，中国人的理财方面的知识确实是过于缺乏，而财商则是一生受用的知识，学完这本书之后，我最大感受是一定不能局限在自己的专业知识，俗话说技多不压身，但是也不需要样样精通，只需要找到自己最擅长的事情并且不断的投资自己的大脑。这个时代只有不断学习并且学的够快你才会有竞争力。</p><a id="more"></a><h2 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h2><ol><li>学校的教育让我们成为一个很好的雇员，而缺少了学校的庇佑，我们的理财却依然如一个小孩</li><li>财商是中国人最为欠缺的一门课，如果不知道怎么管理你的钱包，推荐看看这本书</li><li>富爸爸有富人的思想所以是富人，穷爸爸有“穷人”的思想所以很穷</li><li>学习财商知识，让自己终身受用，年轻更应该投资自己的大脑</li><li>整理自己的读书笔记=-=</li></ol><h2 id="推荐指数："><a href="#推荐指数：" class="headerlink" title="推荐指数："></a>推荐指数：</h2><p>入门理财必读书籍，强烈推荐。（另一本是《小狗钱钱》）</p><p>如果你不知道怎么管理自己的财产，以及如果连财产究竟是什么，那么一定要好好读一读这本书</p><h2 id="知识导图："><a href="#知识导图：" class="headerlink" title="知识导图："></a>知识导图：</h2><p>思维导图真的是一个很好的东西，这里分享一个写的非常棒的思维导图：</p><p><span class="exturl" data-url="aHR0cHM6Ly9tdWJ1LmNvbS9kb2MvZXhwbG9yZS8zMjA5NCNt" title="https://mubu.com/doc/explore/32094#m">https://mubu.com/doc/explore/32094#m<i class="fa fa-external-link"></i></span></p><p>个人的思维导图（有参考上面的导图）：</p><p><span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvNm5lZDV2MFY2aVI=" title="https://share.mubu.com/doc/6ned5v0V6iR">https://share.mubu.com/doc/6ned5v0V6iR<i class="fa fa-external-link"></i></span></p><h2 id="本书作者的思想："><a href="#本书作者的思想：" class="headerlink" title="本书作者的思想："></a>本书作者的思想：</h2><ol><li>激励人们学更多的知识</li><li>万丈高楼平地起，希望告诫人们打好基础</li><li>告诉每个人都能取得巨大的财富</li><li>告诉人们条条大路通罗马</li><li>告诉人们财务的知识不是深奥的科学</li></ol><h2 id="文章概述："><a href="#文章概述：" class="headerlink" title="文章概述："></a>文章概述：</h2><p>文章开头作者开门见山的讲了自己有一个穷爸爸和一个富爸爸，富爸爸敢于尝试，积极思考，选择人迹罕至的道路。而穷爸爸则像大部分人一样努力工作，却永远都逃离不了“老鼠赛跑”：</p><h3 id="钱的力量："><a href="#钱的力量：" class="headerlink" title="钱的力量："></a>钱的力量：</h3><p>作者用自己亲身经历的一堂课：小时候为了向富爸爸请教富裕的窍门，而富爸爸用生活和雇员，以及刁难让作者体会到了生活的力量，金钱的重要性，而我们多数人的生活都是为了赚钱，所以很多人把生活=赚钱，所以他们活的很累，因为他们用钱来对付自己，下面简单概括一下钱的力量：</p><ol><li>老鼠赛跑，什么是老鼠赛跑：通过努力工作换取报酬，用报酬支出来补贴家用，越高的薪水带来越高的支出，就像老鼠在笼子里赛跑，虽然他每年不断的努力奔跑，但是始终脱离不了牢笼。</li><li>穷人由于欲望和恐惧为了富人努力工作，所以穷人每天都在思考如何获得更高的报酬，而富人则想用越低的成本雇佣人来为自己工作。工资的高低一定是由于你能创造多少的价值。</li><li>如果失去工作，那么我将无法存活，仔细思考如果没有了工作，没有了收入，你的资产项可以支撑你存活多久。</li><li>不需要自己亲自参与而能够为自己创造价值，这就是钱的力量</li></ol><h3 id="什么是资产："><a href="#什么是资产：" class="headerlink" title="什么是资产："></a>什么是资产：</h3><p>首先要确定的一点是：钱不是财产，而是大家认可的有价值的物品。</p><ol><li>不需要本人到场能正常运作的业务</li><li>股票、债券、共同基金</li><li>能产生收入的房地产</li><li>版税：音乐、手稿、专利</li><li>其他任何有价值、可产生收入或有增值潜力并有很好销路的东西</li></ol><h3 id="为什么要学习财务知识："><a href="#为什么要学习财务知识：" class="headerlink" title="为什么要学习财务知识："></a>为什么要学习财务知识：</h3><ol><li>聪明人总是雇佣比自己更聪明的人</li><li>你的努力工作造就了别人的事业而不是自己的事业</li><li>无知造就恐惧，知识创造财富</li><li>学校教会每一个人成为一个完美的打工人，却从没有任何课程教会你如何创造财富。</li><li>学习财务能让你更清晰的了解财务报表，把控未来趋势</li><li>单靠一项专业技能，只能通过努力工作来获得资产。</li></ol><h3 id="关注自己的事业："><a href="#关注自己的事业：" class="headerlink" title="关注自己的事业："></a>关注自己的事业：</h3><ol><li>麦当劳的创始人虽然干过店员，卖过汉堡，但是他真正的资产项是房地产，他让店铺开往世界各地</li><li>虽然麦当劳的汉堡做的不是最好吃的，许多专业人员能做出更好吃的汉堡，但是他用最极致的服务和热情赢得顾客的青睐</li><li>从长远来看，教育比金钱更有价值</li><li>寻找职业的时候，唯一能得到的就是学到什么，得到什么技能 </li><li>人只靠一项专业技能是很难活下去的，不要将眼光局限于自己的职业</li><li>鼓励工作要跳出自己的舒适圈，同时尝试多个部门的工作</li></ol><h3 id="穷人和富人的挣钱方式对比："><a href="#穷人和富人的挣钱方式对比：" class="headerlink" title="穷人和富人的挣钱方式对比："></a>穷人和富人的挣钱方式对比：</h3><table><thead><tr><th>富人</th><th>穷人</th></tr></thead><tbody><tr><td>1. 挣钱</td><td>1. 挣钱</td></tr><tr><td>2. 支出</td><td>2. 纳税</td></tr><tr><td>3. 纳税</td><td>3. 支出</td></tr></tbody></table><h3 id="小鸡思想："><a href="#小鸡思想：" class="headerlink" title="小鸡思想："></a>小鸡思想：</h3><ol><li>天要塌下来了，厕所坏了：过多的思考和顾虑，有可能会让自己错失一个良好的机会</li><li>把“不想要”变成“想要”：我不想要平庸的生活，我不想要努力的工作让老板财富自由，我想要更多的时间来支付自己，用更少的时间来支付工作。</li><li>如果没有 <strong>一点点的贪婪</strong>，那么小鸡就会不断的找上门，让你懒惰和舒适</li><li>我们或多或少会存在某种自我怀疑，而正是自我怀疑让我们趋利避害，聪明并不是前进的阻碍，更多的是缺乏自信，成功往往眷顾于有勇气并且有自信的人。</li><li>正是因为小鸡的“无知”和“自大”，当失去金钱的时候，他们往往认为<strong>这不重要</strong></li><li>小鸡永远选择总是为了他人打工<ol><li>为老板打工</li><li>为房东打工</li><li>为了爱情打工</li></ol></li></ol><h3 id="财商："><a href="#财商：" class="headerlink" title="财商："></a>财商：</h3><ol><li>第一是会计知识<ol><li>掌握财务报表，分析业务优势和弱势</li><li>如果想建立自己的帝国，财务知识是十分重要的</li></ol></li><li>致富并<strong>不以牺牲舒适生活</strong>为代价地支付账单</li><li>用资产项和现金流支付和购买想要的物品，而使用积蓄。</li><li><strong>先予后取</strong>：先有付出才有收获：不管是出于贫穷还是富裕，乐善好施永远是最好的手段</li><li><strong>首先支付自己</strong>，自律的力量：自律的人才谈得上改变自己：时间是人生最为宝贵的资产<ol><li>养成最后将金钱支付给别人的思想，让恐惧和包袱留给他人</li><li>用最小的利息和贷款来偿还债务，因为时间是最大的杀手</li></ol></li><li>不要背上<strong>数额过大的财务包袱</strong><ol><li>中国人买房，年纪轻轻就背上债务，所以他们最终只能选择不断的努力工作来换取报酬。</li><li>永远不要让你的老板知道你有债务压力</li><li>警惕容易被误认为资产的负债，高昂的手机，奢侈品，一切随时间贬值的物品</li></ol></li></ol><h3 id="付诸行动："><a href="#付诸行动：" class="headerlink" title="付诸行动："></a>付诸行动：</h3><ol><li>我需要一个超现实的理由：精神的力量。强烈的愿望唤醒无限的动力</li><li>每天作出自己的选择：选择的力量，这是人们希望生活在一个自由国度的主要原因。我们需要<strong>有作出选择的权力</strong>。</li><li>慎重地选择朋友：关系的力量。选择能帮助你创造资产给出好的建议的朋友，同时不要把时间投资在低质量的社交，这对你没有任何好处。</li><li>掌握一种模式，然后再学习一种新的模式：<strong>快速学习的力量</strong>。这个时代不需要你去学习太多的东西，而是看你学的有多快。寻找捷径是最好的学习方式</li><li>首先支付自己：自律的力量。用紧张的资金来刺激自己赚钱的想法和渠道。创造你自己的事业所必备的最重要的三种管理技能是：<ol><li>现金流量管理；</li><li>人事管理；</li><li>个人时间管理。</li></ol></li><li>给你的经纪人以优厚报酬：好建议的力量。寻找一个称职的经济人来帮助你发掘潜在的资产项。</li><li>做一个印第安给予者‛：无私的力量。在得到任何想要的物品之前，你必须先得进行付出</li><li>资产用来购买奢侈品：集中的力量</li><li>对英雄的崇拜：神话的力量。</li><li>先予后取：给予的力量。要想获得任何东西之前，你需要付出代价。</li></ol><h2 id="开始之前需要做的事情"><a href="#开始之前需要做的事情" class="headerlink" title="开始之前需要做的事情"></a>开始之前需要做的事情</h2><ol><li><strong>停下你手头的活儿。</strong>思考什么才是最正确的事情，对你最有帮助的事情，神志不清不仅没有效率并且没有成果</li><li>投资购买能够投资自己头脑的书，并且反复的思考和实践</li><li>寻找一桩好的生意，一家好的企业，一个合适的人，一位合适的投资者，或任何类似的东西，就如同约会一样。</li><li>小心<strong>小鸡思想</strong>充斥你的脑海，不要成为行动矮子。</li></ol><h2 id="个人规避负债的一些方法："><a href="#个人规避负债的一些方法：" class="headerlink" title="个人规避负债的一些方法："></a>个人规避负债的一些方法：</h2><p>二手书：</p><p>以前个人是很抵制二手书的，但是最近开始逐渐改观，发现有的有些书被定义为二手实在是埋没了好书，个人从以下几个平台实际收过几本品相都不错的书：</p><ol><li>闲鱼：有很多卖家（包括我）经常挂着很多书没法卖出去，很显然，现代人看纸质书的终究是小部分。</li><li>多抓鱼：目前个人买书的主力平台，另外就是推荐买书一定要来这个平台，非常不错。</li><li>转转：一直觉得这平台一般，图书和主要页面割裂感太严重了，不过转转的书确实都不错，值得推荐（如果不介意有些书没有封面的话），基本来买的书内页都是比较干净整洁的。</li></ol><p>电子产品：</p><p>不知道有没有人发现，现在电子产品已经如同空气一般进入我们的生活。视频，网络小说，自媒体，综艺，手游等等一系列的物品已经充斥了我们的脑海，这些东西之所以吸引我们是因为他不需要思考。但是永远要记住，虚假的快乐是暂时的，而知识带来的快乐却是无穷的。</p><p>减少玩手机的时间，你会发现你的时间比你想象的要多很多。</p><p>烟、酒、槟榔：</p><p>很多人跟我说这三样花的钱攒十几年都够买辆车了，想了下好像确实是，这三样东西可以说是中国人际交往的三大神器，但是个人实在是不喜欢这些东西，曾经有认真去学过抽烟，但是确实没有GET到点。</p><p>从资产的角度来看，这些东西都是负债</p><p>手机：</p><p>个人不知道超过2000以上的手机是什么样的，一般买手机都是等产品快要退市或者非常大的优惠力度的情况下才会想去换新。</p><p>电脑：</p><p>个人建议是一步到位，一定要思考清楚自己是否是冲动消费</p><p>电子书：</p><p>个人推荐使用 <strong>ipad + kindle</strong> 的组合，ipad用来做笔记和看pdf，kindle在地铁和通勤碎片时间看书，效率还是挺高的。</p><p>理财：</p><ol><li>寻找一个能长期增值的物品，比如基金。</li><li>不要讲钱放在一个篮子，将钱分成好几份，可以参考标准普尔家庭资产象限图</li><li>存钱不是理财，只会让钱的力量越来越弱</li><li>最好能开创自己的副业，尽量找一种不需要自己参与的方式。</li></ol><h2 id="收获："><a href="#收获：" class="headerlink" title="收获："></a>收获：</h2><ol><li>用<strong>金钱来投资大脑</strong>永远是稳赚不赔的买卖。</li><li>不要轻易背上负债，哪怕一分钱也要思考为什么要付出你的资产</li><li>穷人用努力劳动和跳槽以期望获得更多的财富，而富人则雇佣比自己更聪明的人来为自己工作</li><li>只有用思考代替情感，才算是迈上财富之路的第一步。</li><li>最容易的道路往往会越走越艰难，而最艰难的道路往往会越走越容易</li><li>不要用金钱的力量来对付自己，而是要让金钱来为你工作</li><li>穷人有不好的习惯，一个普遍的坏习惯是随便动用储蓄</li><li>你的世界就是你的一面镜子，拥有美好的心灵好事都会发生在你的身边</li><li>穷人之所以穷是因为穷人有不良的用钱习惯。</li><li>要学会驾驭风险而不是规避风险，富人往往是最会规避风险的人</li><li>失败是成功之母，没有失败就没有成功，没有人能保证永远的一帆风顺，敢于承担风险并且挑战来减少风险，这才是成为强者的道路</li><li>让钱为我们工作，这才是真正的力量。如果你为钱工作，你就把力量给了雇主，如果让钱为你工作，你就控制了这种力量</li><li>一件事情的成败并不重要，重要的是你们曾经尝试过</li><li>改变自己比改变他人更容易</li></ol><h2 id="精选短句："><a href="#精选短句：" class="headerlink" title="精选短句："></a>精选短句：</h2><p>一些人在生活推着他转的同时，抓住生活赐予的每个 机会；而另一些人则听任生活的摆布，不去与生活抗 争。他们埋怨生活的不公平，因此就去讨厌老板，讨 厌工作，讨厌家人，他们不知道生活也赐予了他们机 会。</p><p>如果你是那种没有毅力的人，你 将放弃生活对你的每一次推动。这样的话，你的一生 会过得稳稳当当，不做错事、随时准备着当永远不会 发生的事情发生时解救自己，然后，在无聊中老死。 你会有许多像你一样的朋友，希望生活稳定、处世无 误。但事实是，你对生活屈服了，不敢承担风险。你 的确想赢，但失去的恐惧超过了成功的兴奋，事实是 从内心深处，你就始终认为你不可能，所以你选择了稳定。</p><p>重要的是运用这些感情为 你们的长期利益谋利，<strong>别让你们的感情控制了思想</strong>。 大多数人让他们的恐惧和贪婪之心来支配自己，这是 无知的开始。因为害怕或贪婪，大多数人生活在挣工 资、加薪、劳动保护之中，而不问这种感情支配思想 的生活之路通向哪里。</p><p>希望你们永远记住这次谈话，我希望你们多想想 马丁太太，多想想那头驴。永远别忘记，会有两种感 情——<strong>恐惧和欲望</strong>，使你落入一生中最大的陷阱，如 果你让它们来控制自己的思想，你的一生就会生活在 恐惧中，<strong>从不探求你的梦想，这是残酷的。为钱工作， 以为钱能买来快乐，这也是残酷的。</strong>半夜醒来想着许多的账单要付是一种可怕的生活方式，<strong>以工资的高低 来安排生活不是真正的生活</strong>。这些都很残酷，而我希 望你们能避开这些陷阱，如果可能的话，别让这些问 题在你们身上发生，<strong>别让钱支配你们的生活</strong>。</p><p><strong>如果人们灵活一些，保持开放的头脑并 不断学习，他们将在这些变化中一天比一天富有。</strong>如 果认为钱能解决一切问题，恐怕这些人的日子就会不 太好过。知识才能解决问题并创造财富，不<strong>是凭财务 知识挣来的钱很快就会消失</strong>。</p><p><strong>许多人只会管理没有自己聪明的人或者没有自己能力强的人</strong>，比如工作中的下属。许多中层管理人员一直停留在中级管理层而得不到提升，就是因为他们只知道如何同职位低于自己的人一道工作，却不善于同比自己职位高的人一道工作。真正的技能是能够管理在某些技术领域比你更聪明的人并给他们以优厚的报酬。这也是公司拥有一个顾问委员会的原因，你应该有这种顾问，而这也是你的财商。</p><h2 id="精句摘录："><a href="#精句摘录：" class="headerlink" title="精句摘录："></a>精句摘录：</h2><ol><li>真实地看待你的感情，以你喜欢的方式运用你的头脑和感情，而不是与自己作对。</li><li>我想教你们学会<strong>支配钱</strong>，而不是害怕它，这在 学校里是学不到的。如果你不学，你就会变成钱的<strong>奴隶</strong>。</li><li>你有收入时得<strong>交税</strong>，当你消费时也得<strong>交税</strong>。 你存钱时得<strong>交税</strong>，你死时还得<strong>交税</strong></li><li>穷人和破产者之间的区别是：破产是暂时的，而贫穷是永 久的。</li><li>如果你需要一本百科全书，千万别找百科全书推销员。</li><li>富人买入资产，中产阶级和穷人买入负债</li><li>最重要的专门技能是销售和懂得市场营销。销售 技能是个人成功的基本技能，它涉及到与其他人的交 往，包括与顾客、雇员、老板、配偶和孩子的交往。 而交际能力，如书面表达、口头表达及谈判能力等对 于一个人的成功更是至关重要。</li><li><strong>世界上到处都是有才华的穷人</strong></li><li>如果你坚持不愿意学习新东西，愿意仅在你的领 域里成为专家，那么你一定要确信你工作的公司是有 工会的，并且工会会保护专门人才。</li><li>在选择某种特定的职业之前或者在陷入为生计而 忙碌工作的‚老鼠赛跑‛之前，要仔细看看脚下的道 路，弄清楚自己到底需要获得什么技能。</li><li>你把金钱看得越重要，你就会为金钱工作得越辛苦。如果你能够懂得‘金<strong>钱不是真实的资产</strong>’这一道理，你就会更快地富起来。</li><li>如果你不能下定决心，就永远也学不会如何赚钱。要知道，机会总是转 瞬即逝，要想成功必须迅速作出决定。</li><li>但生活 可不是这样的教法。你知道吗，生活才是最好的老师， 大多数时候，生活并不对你说些什么，它只是推着你 转，每一次推，它都像是在说‘喂，醒一醒，有些东 西我想让你学学‛</li><li>假如你弄懂了生活这门大课， 做任何事情你都会游刃有余。但就算你学不会，生活照样会推着你转</li></ol><h2 id="文章感悟："><a href="#文章感悟：" class="headerlink" title="文章感悟："></a>文章感悟：</h2><pre><code>要记得投资和赌博是两码事，投资是由目标可预见性的资产增资行为，而赌博则是把钱投到一些高风险的收益产品的然后进行祈祷。这是由本质区别的，而很多人却是混为一谈。努力提高自己的财商知识并且付诸行动，我们才不会像书中的小鸡一样，只求活着安逸或者舒适。这本书的作者是一个房地产的老板，对于书中的大部分内容，对我一个阶级社会来说可能并没有什么特别大的作用，穷人依旧是穷人，而富人则会越来越富，但是这本书不是告诉**你怎么成为一个富人，也不是告诉你怎么投资**，而是用各种方式告诉你怎么样从根本上转变思想。在获得回报之前必须要付出行动，只有行动和实践，同时，在年轻的时候一定要多存钱，对于一些冒险的行为最好在30岁之前完成，因为你还有东山再起的机会。</code></pre><h1 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h1><p>你不理财，财不理你，看再多的书不如从最简单的行动开始，比如从现在开始管理自己的钱财，下面有几种个人实践的参考方式：</p><ul><li><strong>标准普尔家庭资产象限图</strong>：可以去看看相关资料，挺有帮助的</li><li><strong>鲨鱼记账</strong>：个人觉得非常好用的 APP，目前已经坚持将近半年</li><li><strong>记账小本本</strong>：能揣兜里最好，时不时还可以翻一翻</li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>我认为书中有一句说的很好，“做你心中认为正确的事情，因为你不管怎么做都会受到批评，如果你做的话，会受到指责，如果你不做，还是会受到指责”。最重要的事情不是你曾经想过，而是你曾经想过并且真正去做过，这本书是推动你去做你想做的事情，而不是每天去观察别人的美好，改变世界和改变他人，以及改变他人在如今每一个都几乎不可能，我们最能做到，能做到最好的，就是改变自己。</p><p>文章篇幅较长，感谢观看。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      理财入门书籍阅读,关注现金流
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="理财" scheme="https://whitestore.top/tags/%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter压力测试回顾(四)</title>
    <link href="https://whitestore.top/2021/01/18/jmeter-test4/"/>
    <id>https://whitestore.top/2021/01/18/jmeter-test4/</id>
    <published>2021-01-18T15:35:19.000Z</published>
    <updated>2021-01-18T15:45:14.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾Jmeter压力测试（四）"><a href="#回顾Jmeter压力测试（四）" class="headerlink" title="回顾Jmeter压力测试（四）"></a>回顾Jmeter压力测试（四）</h1><p>下面部分为非GUI部分的内容实战。</p><a id="more"></a><h2 id="非GUI部分"><a href="#非GUI部分" class="headerlink" title="非GUI部分"></a>非GUI部分</h2><h2 id="阿里云安装jmeter（jmeter5）"><a href="#阿里云安装jmeter（jmeter5）" class="headerlink" title="阿里云安装jmeter（jmeter5）"></a>阿里云安装jmeter（jmeter5）</h2><ol><li>配置JDK1.8的环境，Linux配置Jdk请自行查找相关资料</li><li>阿里云安装jmeter，移动到自己喜欢的位置</li></ol><blockquote><p>下载方式：<code>wget https://apachemirror.sg.wuchna.com//jmeter/binaries/apache-jmeter-5.4.tgz</code></p></blockquote><ol start="3"><li>启动非GUI测试：我们可以在window上使用gui版本编写好对应的jmx，然后再执行压测。</li></ol><h3 id="Jmeter非GUI界面-参数讲解-必须掌握"><a href="#Jmeter非GUI界面-参数讲解-必须掌握" class="headerlink" title="Jmeter非GUI界面 参数讲解(必须掌握)"></a>Jmeter非GUI界面 参数讲解(必须掌握)</h3><p>在进行实战之前了解一下基本的参数：</p><p>官方配置文件地址： <span class="exturl" data-url="aHR0cDovL2ptZXRlci5hcGFjaGUub3JnL3VzZXJtYW51YWwvZ2V0LXN0YXJ0ZWQuaHRtbA==" title="http://jmeter.apache.org/usermanual/get-started.html">http://jmeter.apache.org/usermanual/get-started.html<i class="fa fa-external-link"></i></span></p><h4 id="基础命令参数："><a href="#基础命令参数：" class="headerlink" title="基础命令参数："></a>基础命令参数：</h4><ul><li><strong>-h</strong>     帮助</li><li><strong>-n</strong>     非GUI模式</li><li><strong>-t</strong>     指定要运行的 JMeter 测试脚本文件</li><li><strong>-l</strong>      记录结果的文件 每次运行之前，(要确保之前没有运行过,即xxx.jtl不存在，不然报错)</li><li><strong>-r</strong>      Jmter.properties文件中指定的所有远程服务器</li><li><strong>-e</strong>      在脚本运行结束后生成html报告</li><li><strong>-o</strong>      用于存放html报告的目录（目录要为空，不然报错）</li></ul><p>案例如下：</p><h3 id="如何使用linux-jmeter压测？"><a href="#如何使用linux-jmeter压测？" class="headerlink" title="如何使用linux jmeter压测？"></a>如何使用linux jmeter压测？</h3><p>下面的教程为构建一个最简单的压测方式：</p><ol><li>构建一个简单的http压测请求，使用如下的方式：</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210118223554.png" alt=""></p><ol start="2"><li>保存为<code>.jmx</code>后缀的文件</li><li>将文件的内容上传到服务器，命令行进入到对应的Bin目录下面</li><li>执行命令：<code>./jmeter -n -t ./plan/LinuxPlan.jmx -l ./plan/result.jtl -e -o ./resultreport</code></li></ol><blockquote><p>上面的命令效果如下：：</p><p>-l 指定了结果文件的存放位置</p><p>-o 指定html报告的目录位置</p><p>-t 指定了脚本文件的存放位置</p><p>-n 代表使用非GUI模式运行</p></blockquote><h3 id="Jmeter压测减少资源使用的一些建议，即压测结果更准确"><a href="#Jmeter压测减少资源使用的一些建议，即压测结果更准确" class="headerlink" title="Jmeter压测减少资源使用的一些建议，即压测结果更准确"></a>Jmeter压测减少资源使用的一些建议，即压测结果更准确</h3><p>1、使用非GUI模式：jmeter -n -t test.jmx -l result.jtl</p><p>2、少使用Listener， 如果使用-l参数，它们都可以被删除或禁用。</p><p>3、在加载测试期间不要使用“查看结果树”或“查看结果”表监听器，只能在脚本阶段使用它们来调试脚本。</p><p>4、包含控制器在这里没有帮助，因为它将文件中的所有测试元素添加到测试计划中。]</p><p>5、不要使用功能模式,使用CSV输出而不是XML</p><p>6、只保存你需要的数据,尽可能少地使用断言</p><p>7、如果测试需要大量数据，可以提前准备好测试数据放到数据文件中，以CSV Read方式读取。</p><p>8、用内网压测，减少其他带宽影响压测结果</p><p>9、如果压测大流量，尽量用多几个节点以非GUI模式向服务器施压</p><p>官方推荐 ：<span class="exturl" data-url="aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9qbWV0ZXIvdXNlcm1hbnVhbC9iZXN0LXByYWN0aWNlcy5odG1sI2xlYW5fbWVhbg==" title="http://jakarta.apache.org/jmeter/usermanual/best-practices.html#lean_mean">http://jakarta.apache.org/jmeter/usermanual/best-practices.html#lean_mean<i class="fa fa-external-link"></i></span></p><h2 id="Jmeter压测结果聚合报告分析"><a href="#Jmeter压测结果聚合报告分析" class="headerlink" title="Jmeter压测结果聚合报告分析"></a>Jmeter压测结果聚合报告分析</h2><p>一般情况下，我们可以根据<code>-o</code>这个参数在Linux中生成对应的聚合报告，根据聚合报告我们可以分析压测的结果</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210118224902.png" alt=""></p><p>根据上面的聚合报告，我们可以从<code>index.html</code>当中看到基本的聚合报告分析内容和结果。</p><h3 id="dashboard结果分析："><a href="#dashboard结果分析：" class="headerlink" title="dashboard结果分析："></a>dashboard结果分析：</h3><p>​<br>    2）APDEX(Application performance Index)<br>        apdex:应用程序性能指标,范围在0~1之间，1表示达到所有用户均满意<br>        T(Toleration threshold)：可接受阀值<br>        F(Frustration threshold)：失败阀值</p><pre><code>3）Requests Summary    OK:成功率    KO:失败率4）Statistics 统计数据    lable:sampler采样器名称    samples:请求总数，并发数*循环次数    KO:失败次数    Error%:失败率    Average:平均响应时间    Min:最小响应时间    Max:最大响应时间    90th pct: 90%的用户响应时间不会超过这个值（关注这个就可以了）    2ms,3ms,4,5,2,6,8,3,9    95th pct: 95%的用户响应时间不会超过这个值    99th pct: 99%的用户响应时间不会超过这个值 (存在极端值)    throughtput:Request per Second吞吐量 qps    received:每秒从服务器接收的数据量    send：每秒发送的数据量</code></pre><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210118224707.png" alt=""></p><h4 id="Test-and-Report-informations"><a href="#Test-and-Report-informations" class="headerlink" title="Test and Report informations"></a>Test and Report informations</h4><ul><li>Source file：jtl文件名</li><li>Start Time ：压测开始时间</li><li>End Time ：压测结束时间</li><li>Filter for display：过滤器</li><li>Lable:sampler：采样器名称</li></ul><h4 id="APDEX-Application-performance-Index"><a href="#APDEX-Application-performance-Index" class="headerlink" title="APDEX(Application performance Index)"></a>APDEX(Application performance Index)</h4><p>apdex:应用程序性能指标,范围在0~1之间，1表示达到所有用户均满意</p><ul><li>T(Toleration threshold)：可接受阀值</li><li>F(Frustration threshold)：失败阀值</li></ul><h4 id="Requests-Summary"><a href="#Requests-Summary" class="headerlink" title="Requests Summary:"></a>Requests Summary:</h4><ul><li>OK:成功率</li><li>KO:失败率</li></ul><h4 id="Statistics-统计数据"><a href="#Statistics-统计数据" class="headerlink" title="Statistics 统计数据"></a>Statistics 统计数据</h4><p>这一部分是主要内容：</p><ul><li>lable: sampler的名称</li><li>Samples: 一共发出去多少请求,例如10个用户，循环10次，则是 100</li><li>Average: 平均响应时间</li><li>Median: 中位数，也就是 50％ 用户的响应时间</li><li>90% Line : 90％ 用户的响应不会超过该时间 （90% of the samples took no more than this time. The remaining samples at least as long as this）</li><li>95% Line : 95％ 用户的响应不会超过该时间</li><li>99% Line : 99％ 用户的响应不会超过该时间</li><li>min : 最小响应时间</li><li>max : 最大响应时间</li><li>Error%：错误的请求的数量/请求的总数</li><li>**Throughput： 吞吐量——默认情况下表示每秒完成的请求数（Request per Second) 可类比为qps<pre><code>KB/Sec: 每秒接收数据量**</code></pre></li></ul><h3 id="charts讲解"><a href="#charts讲解" class="headerlink" title="charts讲解"></a>charts讲解</h3><h4 id="Over-Time（随着时间的变化）"><a href="#Over-Time（随着时间的变化）" class="headerlink" title="Over Time（随着时间的变化）"></a>Over Time（随着时间的变化）</h4><ul><li>Response Times Over Time：响应时间变化趋势</li><li>Response Time Percentiles Over Time (successful responses)：最大，最小，平均，用户响应时间分</li><li>Active Threads Over Time：并发用户数趋势</li><li>Bytes Throughput Over Time：每秒接收和请求字节数变化，蓝色表示发送，黄色表示接受</li><li>Latencies Over Time：平均响应延时趋势</li><li>Connect Time Over Time    ：连接耗时趋势</li></ul><h4 id="Throughput"><a href="#Throughput" class="headerlink" title="Throughput"></a>Throughput</h4><ul><li>Hits Per Second (excluding embedded resources):每秒点击次数</li><li>Codes Per Second (excluding embedded resources)：每秒状态码数量</li><li>Transactions Per Second：即TPS，每秒事务数</li><li>Response Time Vs Request：响应时间和请求数对比</li><li>Latency Vs Request：延迟时间和请求数对比</li></ul><h4 id="Response-Times"><a href="#Response-Times" class="headerlink" title="Response Times"></a>Response Times</h4><ul><li>Response Time Percentiles：响应时间百分比</li><li>Response Time Overview：响应时间概述</li><li>Time Vs Threads：活跃线程数和响应时间</li><li>Response Time Distribution：响应时间分布图</li></ul><h1 id="安装常见问题"><a href="#安装常见问题" class="headerlink" title="安装常见问题"></a>安装常见问题</h1><p>问题1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz95j86y235aroi85ht0Z bin]# .&#x2F;jmeter-server</span><br><span class="line">Created remote object: UnicastServerRef2 [liveRef: [endpoint:[:39308](local),objID:[24e78a63:16243c70661:-7fff, 7492480871343944173]]]</span><br><span class="line">Server failed to start: java.rmi.RemoteException: Cannot start. Unable to get local host IP address.; nested exception is:</span><br><span class="line">java.net.UnknownHostException: iZwz95j86y235aroi85ht0Z: iZwz95j86y235aroi85ht0Z: Name or service not known</span><br><span class="line">An error occurred: Cannot start. Unable to get local host IP address.; nested exception is:</span><br><span class="line">java.net.UnknownHostException: iZwz95j86y235aroi85ht0Z: iZwz95j86y235aroi85ht0Z: Name or service not known</span><br></pre></td></tr></table></figure><p>解决方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hostname  命令获取机器名称，追加一个映射  iZwz95j86y235aroi85ht0Z</span><br><span class="line">vim &#x2F;etc&#x2F;hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">120.79.160.143 iZwz95j86y235aroi85ht0Z</span><br><span class="line"></span><br><span class="line">windows用户 修改c:\windows\system32\drivers\etc\hosts文件，增加一条域名 与IP的映射</span><br></pre></td></tr></table></figure><ol start="2"><li>问题如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz95j86y235aroi85ht0Z bin]# .&#x2F;jmeter-server</span><br><span class="line">Server failed to start: java.rmi.server.ExportException: Listen failed on port: 0; nested exception is:</span><br><span class="line">java.io.FileNotFoundException: rmi_keystore.jks (No such file or directory)</span><br><span class="line">An error occurred: Listen failed on port: 0; nested exception is:</span><br><span class="line">java.io.FileNotFoundException: rmi_keystore.jks (No such file or directory)</span><br></pre></td></tr></table></figure><p>解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">拥有RMI over SSL的有效密钥库，或者禁用了SSL。</span><br><span class="line">1、禁用SSL</span><br><span class="line">  jmeter.property里面 server.rmi.ssl.disable 改为 true，表示禁用</span><br></pre></td></tr></table></figure><p>3、问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ949uw2xehZ bin]# .&#x2F;jmeter</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error&#x3D;&#39;Cannot allocate memory&#39; (errno&#x3D;12)</span><br><span class="line">#</span><br><span class="line"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"># Native memory allocation (mmap) failed to map 1073741824 bytes for committing reserved memory.</span><br><span class="line"># An error report file with more information is saved as:</span><br><span class="line"># &#x2F;usr&#x2F;local&#x2F;jmeter&#x2F;apache-jmeter-4.0&#x2F;bin&#x2F;hs_err_pid5855.log</span><br></pre></td></tr></table></figure><p>解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">编辑jmeter</span><br><span class="line">搜索 : &quot;$&#123;HEAP:&#x3D;&quot;-Xms1g -Xmx1g -XX:MaxMetaspaceSize&#x3D;256m&quot;&#125;&quot;</span><br><span class="line">改变初始堆内存和最大堆内存</span><br></pre></td></tr></table></figure><p>4、仅修改 server_port 即可,下面两者一样</p><p>server.rmi.localport=8899 表示slave server启动显示的端口</p><p>server_port=8899  表示master机器要远程连接的端口   即 remote_hosts=xxxx:8899</p><p>5、jmeter 分布式性能测试（多网卡配置）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- jmeter 分布式性能测试（多网卡配置） --&gt;</span><br><span class="line">我们要在多网卡的服务器上开启RMI服务的话必须指定IP，使他们能够在同一个网段内。 </span><br><span class="line"></span><br><span class="line">需要以下几步（假定所有机器都在10.120.11.*网段,agent服务器为linux,controller服务器为windows）：</span><br><span class="line"></span><br><span class="line">1、 修改agent服务器，指定agent机器的IP</span><br><span class="line">修改jmeter-server文件</span><br><span class="line"># vi jmeter-server</span><br><span class="line">修改RMI_HOST_DEF&#x3D;-Djava.rmi.server.hostname&#x3D;xxx.xxx.xxx.xxx(需要连接的IP)</span><br><span class="line"></span><br><span class="line">2、修改server服务器，指定server机器的IP</span><br><span class="line"></span><br><span class="line">修改jmeter.bat文件 </span><br><span class="line"></span><br><span class="line">新增set rmi_host&#x3D;-Djava.rmi.server.hostname&#x3D;10.120.11.214</span><br><span class="line"></span><br><span class="line">修改set ARGS&#x3D;%DUMP% %HEAP% %NEW% %SURVIVOR% %TENURING% %PERM% %DDRAW% %rmi_host%</span><br></pre></td></tr></table></figure><p>6、确定在controller机器上安装jdk,版本和jmeter一致，配置环境变量：Java_home等</p><ul><li><p>在Agent机器上安装jdk，配置环境变量：Java_home和JMeter_home</p></li><li><p>安装目录不要带空格，最好都是简短的英文路径</p></li></ul><p>7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。</p><pre><code>如果使用csv进行参数化，则需要把参数文件在每台slave上拷一份且路径需要设置成一样的。总样本数 = 线程数 * 循环次数 * 执行机总数</code></pre><p>8、连接失败原因排查</p><p>以下步骤进行排查：</p><pre><code>1. jmeter-server是否启动；2. 是否联网 3. ping 服务器IP是否畅通. 4. telnet 端口 192.168.3.10 1099 5. 检查服务器的防火墙是否关闭。 6. 阿里云安全策略是否正常</code></pre><p>9、出现：”could not find ApacheJmeter_core.jar”</p><pre><code>**解决：在Agent机器安装jdk，并设置环境变量**</code></pre><p>10、出现：”Bad call to remote host”</p><p>解决：检查被控制机器上的jmeter-server有没有启动，或者remote_hosts的配置是否正确。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      Jmeter压力测试回顾最后部分
    
    </summary>
    
    
      <category term="压力测试" scheme="https://whitestore.top/categories/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="jmeter" scheme="https://whitestore.top/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter压力测试回顾(三)</title>
    <link href="https://whitestore.top/2021/01/18/jmeter-test3/"/>
    <id>https://whitestore.top/2021/01/18/jmeter-test3/</id>
    <published>2021-01-18T15:35:12.000Z</published>
    <updated>2021-01-18T15:43:54.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾Jmeter压力测试（三）"><a href="#回顾Jmeter压力测试（三）" class="headerlink" title="回顾Jmeter压力测试（三）"></a>回顾Jmeter压力测试（三）</h1><h1 id="GUI实战部分"><a href="#GUI实战部分" class="headerlink" title="GUI实战部分"></a>GUI实战部分</h1><p>通过菜单了解Jmeter大致的内容之后，我们依靠实战来更深入的理解各种功能</p><a id="more"></a><h2 id="线程组的基本使用："><a href="#线程组的基本使用：" class="headerlink" title="线程组的基本使用："></a>线程组的基本使用：</h2><p>准备部分：</p><ol><li>准备一个springBoot项目，或者找一个可以访问的接口，当然最好不要访问一些外网IP，容易误认为攻击封IP</li><li>比如个人写了一个简单的DEMO：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/jmeter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmeterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/runTest1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">testThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello-world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1 添加-&gt;threads-&gt;线程组（控制总体并发）</p><p>案例：如下图所示，添加一个20个线程，循环1次的线程组，在2秒内完成</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109174815.png" alt=""></p><ul><li>线程数：虚拟用户数。一个虚拟用户占用一个进程或线程</li><li>准备时长（Ramp-Up Period(in seconds)）：全部线程启动的时长，比如100个线程，20秒，则表示20秒内100个线程都要启动完成，每秒启动5个线程</li><li>循环次数：每个线程发送的次数，假如值为5，100个线程，则会发送500次请求，可以勾选永远循环    </li></ul><p>2 线程组 -&gt; 添加-&gt; Sampler(采样器) -&gt; Http请求</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109193233.png" alt=""></p><p>一个线程组下面可以增加几个Sampler</p><ul><li>名称：采样器名称</li><li>注释：对这个采样器的描述</li><li>web服务器：<ul><li>默认协议是http</li><li>默认端口是80</li><li>服务器名称或IP ：请求的目标服务器名称或IP地址</li></ul></li><li>路径：服务器URL        </li><li><strong>Use multipart/from-data for HTTP POST</strong> ：当发送POST请求时，使用`Use multipart/from-data方法发送，默认不选中。</li></ul><blockquote><p>吐槽：感觉中间的选框太小了</p></blockquote><p>3 请求-查看测试结果</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109193752.png" alt=""></p><p>如之前介绍菜单所说，还需要增加一个监听器，收集请求的最终结果。</p><p>操作如下：线程组-&gt;添加-&gt;监听器-&gt;察看结果树</p><p>如上图所示，最终的测试结果都是正确，两秒内开启20个线程并发访问，压力还是比较小的。</p><h2 id="断言的基本使用"><a href="#断言的基本使用" class="headerlink" title="断言的基本使用"></a>断言的基本使用</h2><p>上面的案例是一个最简单的线程组的使用，有点类似postMan请求接口。下面了解一下断言是如何使用的。</p><ol><li>增加断言: 线程组 -&gt; 添加 -&gt; 断言 -&gt; 响应断言</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109194054.png" alt=""></p><p>下面增加一个相应的断言，响应断言里面的选择内容如下：</p><p>测试字段：根据测试字段匹配结果，</p><p>中间：apply to(应用范围):<br>    <code>Main sample only:</code> 仅当前父取样器 进行断言，一般一个请求，如果发一个请求会触发多个，否则就使用<code>sub sample</code>（比较少用） </p><p>匹配规则：一些逻辑的匹配规则，比如包含，匹配，相等</p><p>这一块的组合形式比较丰富，下面简单举几个例子：</p><ul><li>响应文本：即响应的数据，比如json等文本</li><li>响应代码：http的响应状态码，比如200，302，404这些</li><li>响应信息：http响应代码对应的响应信息，例如：OK, Found</li><li>Response Header: 响应头</li></ul><p>模式匹配规则：</p><ul><li>包括：包含在里面就成功</li><li>匹配：响应内容完全匹配，不区分大小写</li><li>equals：完全匹配，区分大小写</li></ul><p>断言结果监听器: 线程组-&gt; 添加 -&gt; 监听器 -&gt; 断言结果</p><p>里面的内容是sampler采样器的名称<br>断言失败，查看结果树任务结果颜色标红(通过结果数里面双击不通过的记录，可以看到错误信息)</p><p>2、响应断言案例：</p><p>给出一个请求的信息内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Thread Name:20线程2秒内容完成 1-1</span><br><span class="line">Sample Start:2021-01-09 19:57:43 CST</span><br><span class="line">Load time:1</span><br><span class="line">Connect Time:0</span><br><span class="line">Latency:1</span><br><span class="line">Size in bytes:173</span><br><span class="line">Sent bytes:134</span><br><span class="line">Headers size in bytes:162</span><br><span class="line">Body size in bytes:11</span><br><span class="line">Sample Count:1</span><br><span class="line">Error Count:0</span><br><span class="line">Data type (&quot;text&quot;|&quot;bin&quot;|&quot;&quot;):text</span><br><span class="line">Response code:200</span><br><span class="line">Response message:</span><br></pre></td></tr></table></figure><p>下面创建一个响应断言：</p><p>我们指定响应文本为：Hello-world，测试字段为响应文本，在下方输入<code>hello-world</code>用于增加断言的信息。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109200104.png" alt=""></p><p>在查看結果树里面就可以看到对应的信息内容了</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110135332.png" alt=""></p><p>大小断言：可以断言响应请求里面的size大小，单位为<code>Byte</code></p><p>断言的功能相对比较简单，这里仅仅列出了一些简单案例</p><h2 id="聚合报告分析"><a href="#聚合报告分析" class="headerlink" title="聚合报告分析"></a>聚合报告分析</h2><p>操作方式：新增聚合报告：线程组-&gt;添加-&gt;监听器-&gt;聚合报告（Aggregate Report）</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110135654.png" alt=""></p><p>介绍一下英文版的内容对应列的含义</p><ul><li>lable: sampler的名称</li><li>Samples: 一共发出去多少请求,例如10个用户，循环10次，则是 100</li><li>Average: 平均响应时间</li><li>Median: 中位数，也就是 50％ 用户的响应时间</li><li>90% Line : 90％ 用户的响应不会超过该时间 （90% of the samples took no more than this time. The remaining samples at least as long as this）</li><li>95% Line : 95％ 用户的响应不会超过该时间</li><li>99% Line : 99％ 用户的响应不会超过该时间</li><li>min : 最小响应时间</li><li>max : 最大响应时间</li><li>Error%：错误的请求的数量/请求的总数</li><li>**Throughput： 吞吐量——默认情况下表示每秒完成的请求数（Request per Second) 可类比为qps<pre><code>KB/Sec: 每秒接收数据量**</code></pre></li></ul><p>新增聚合报告之后，就可以在聚合报告里面看到对应的结果，注意聚合报告的内容都是累加的</p><h2 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h2><p>如果想要设置一些常用的变量配置放到当前的线程组里面，可以使用如下的方式</p><p>作用：</p><p>很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用(比如服务器地址)</p><p>操作方法：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110165045.png" alt=""></p><p>线程组-&gt;add -&gt; Config Element(配置原件)-&gt; User Definde Variable（用户定义的变量）</p><p>如上图配置完成之后，引用方式如下：${XXX}，在接口中变量中使用，如下所示：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110165240.png" alt=""></p><h2 id="CSV可变参数"><a href="#CSV可变参数" class="headerlink" title="CSV可变参数"></a>CSV可变参数</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110170707.png" alt=""></p><p>1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; CSV data set config (CSV数据文件设置)</p><p>我们在电脑的任意位置配置txt文件，配置方式如下：</p><p>新建一个txt文件，同时注意使用utf-8的编码进行保存。</p><p>2、在读取的配置文件里面，同时使用多个自定义参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">username,password,gender</span><br><span class="line">zhangsan,test001,1</span><br><span class="line">lisi,test002,2</span><br><span class="line">wanglaowu,test003,2</span><br><span class="line">laoliu,test004,1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110183037.png" alt=""></p><p>接着我们可以唉csv可变参数里面按照要求进行配置：</p><ul><li>文件名：csv文件的名字</li><li>文件编码：当前文件的编码格式</li><li>变量名称：对应标头，用逗号分隔</li><li>忽略首行：蛀牙要设置变量名称的时候才会生效</li><li>分隔符：默认分隔符为逗号</li><li>是否带有引号：(未验证)</li><li>遇到文件结束符之后再次循环：意味着是否需要重复的读取文件的内容</li><li>遇到文件结束符终止线程：只读一遍文件</li><li>线程共享模式：默认应用当前<strong>所有</strong>线程组</li></ul><h2 id="JDBC-request压测Mysql"><a href="#JDBC-request压测Mysql" class="headerlink" title="JDBC request压测Mysql"></a>JDBC request压测Mysql</h2><h3 id="简单应用入门："><a href="#简单应用入门：" class="headerlink" title="简单应用入门："></a>简单应用入门：</h3><p>在正式进行使用之前，需要随意建立一个数据库或表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;admin&#96;  (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;account&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  &#96;password&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  &#96;power&#96; int(11) NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 52 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br></pre></td></tr></table></figure><p>使用Jdbc进行压力测试，需要依赖jar包实现，不同的版本jar包压测的结果可能会有出入</p><ol><li>Thread Group -&gt; add -&gt; sampler -&gt; jdbc request</li></ol><p>这时候进行请求是肯定无效的，我们只是建立的一个采样器：</p><ol start="2"><li>jar包添加  mysql-connector-java-5.1.30.jar </li></ol><p>我们需要在配置元件里面，对于个人的JDBC进行配置</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110191818.png" alt=""></p><ol start="3"><li>JDBC connection Configuration 配置</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110195206.png" alt=""></p><p>Max number of connections：最大连接数</p><p>Time-between-eviction-runs-millis：指定空闲连接检查、废弃连接清理、空闲连接池大小调整之间的操作时间间隔</p><p>variable name for created pool：创建池的变量名</p><p>Auto commit：是否自动提交</p><p>Transaction Isolation：事务隔离级别（注意Mysql默认级别为读已提交）</p><p>Preinit Pool：预初始化池</p><p>Test while idle：空闲线程测试</p><p>Soft Min Evictable Idle Time：软最小可收回空闲时间</p><p>Validation Query：验证查询</p><p>最下面的部分为JDBC连接，最后一项是连接的参数配置。</p><p>DataBase URL : 数据库连接地址 jdbc:mysql://127.0.0.1:3306/blog<br>JDBC Driver Class : 数据库驱动，选择对应的mysql<br>username：数据库用户名<br>password：数据库密码</p><ol start="4"><li>将<code>mysql-connector-java.xxx.jar</code>拷贝到jmeter的classpath目录：（核心步骤）</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110200116.png" alt=""></p><ol start="5"><li>注意一下配置一定要准确，否则请求会抛出错误，请求失败也不要慌，多看看返回的提示信息，个人在实验的过程中也不是一次成功的：</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110200938.png" alt=""></p><ol start="6"><li>发起测试请求：</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110201135.png" alt=""></p><p>下面的数据为随便录入的一些数据，可以参考自己的测试结果</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210110201155.png" alt=""></p><h3 id="查询参数："><a href="#查询参数：" class="headerlink" title="查询参数："></a>查询参数：</h3><p>GUI在查询参数这一部分不是十分好，下面说下如果需要使用？这一类形式替换要如何处理</p><p>如果使用占位符，在jmeter的GUI界面，需要使用括号进行替换，（1）代表取第一个参数。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210111001343.png" alt=""></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210111001434.png" alt=""></p><p>下面为填入的内容介绍：</p><p><strong>Variable name：</strong>这里写入数据库连接池的名字（和JDBC Connection Configuration名字保持一致 ）<br><strong>Query：</strong>里面填入查询数据库数据的SQL语句（填写的SQL语句末尾不要加“；”）<br><strong>parameter valus：</strong>数据的参数值<br><strong>parameter types：</strong>数据的参数类型<br><strong>cariable names：</strong>保存SQL语句返回结果的变量名<br><strong>result cariable name：</strong>创建一个对象变量，保存所有返回结果<br><strong>query timeout：</strong>查询超时时间<br><strong>handle result set：</strong>定义如何处理由callable statements语句返回的结果</p><h2 id="分布式压测"><a href="#分布式压测" class="headerlink" title="分布式压测"></a>分布式压测</h2><p>官网教程： <span class="exturl" data-url="aHR0cDovL2ptZXRlci5hcGFjaGUub3JnL3VzZXJtYW51YWwvam1ldGVyX2Rpc3RyaWJ1dGVkX3Rlc3Rpbmdfc3RlcF9ieV9zdGVwLmh0bWw=" title="http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html">http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html<i class="fa fa-external-link"></i></span></p><ul><li>普通压测：单台机可以对目标机器产生的压力比较小，受限因素包括CPU，网络，IO等</li><li>分布式压测：利用多台机器向目标机器产生压力，模拟几万用户并发访问</li></ul><p>由于分布式的压测一般对于服务器的配置要求较高，个人一个弱鸡服务器就不献丑了，这里推荐一篇分布式压测文章推荐：</p><p>简书文章：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC81YzA0NzkyYzMxYjY=" title="https://www.jianshu.com/p/5c04792c31b6">https://www.jianshu.com/p/5c04792c31b6<i class="fa fa-external-link"></i></span></p><p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9qbWV0ZXIuYXBhY2hlLm9yZy91c2VybWFudWFsL2ptZXRlcl9kaXN0cmlidXRlZF90ZXN0aW5nX3N0ZXBfYnlfc3RlcC5odG1s" title="https://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html">https://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html<i class="fa fa-external-link"></i></span></p><p>Jmeter分布式压测原理(了解)</p><p>1、总控机器的节点master，其他产生压力的机器叫“肉鸡” server</p><p>2、master会把压测脚本发送到 server上面</p><p>3、执行的时候，server上只需要把jmeter-server打开就可以了，不用启动jmeter</p><p>4、结束后，server会把压测数据回传给master,然后master汇总输出报告</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      压力测试回顾第三部分
    
    </summary>
    
    
      <category term="压力测试" scheme="https://whitestore.top/categories/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="jmeter" scheme="https://whitestore.top/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter压力测试回顾(二)</title>
    <link href="https://whitestore.top/2021/01/18/jmeter-test1/"/>
    <id>https://whitestore.top/2021/01/18/jmeter-test1/</id>
    <published>2021-01-18T15:35:05.000Z</published>
    <updated>2021-01-18T15:42:44.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾Jmeter压力测试（二）"><a href="#回顾Jmeter压力测试（二）" class="headerlink" title="回顾Jmeter压力测试（二）"></a>回顾Jmeter压力测试（二）</h1><p>本部分内容为第一小节，介绍第一部分的Jmter测试内容，新建测试计划之后，点击<code>添加</code>,可以看到一个测试计划单所有菜单内容。</p><a id="more"></a><p>主要介绍的菜单为常用菜单，对于个人不常用的功能会进行忽略。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109121653.png" alt=""></p><h2 id="测试计划菜单介绍"><a href="#测试计划菜单介绍" class="headerlink" title="测试计划菜单介绍"></a>测试计划菜单介绍</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109181129.png" alt=""></p><h2 id="线程（用户）"><a href="#线程（用户）" class="headerlink" title="线程（用户）"></a>线程（用户）</h2><ul><li>线程组：线程组元素是任何测试计划的起点。所有控制器和采样器必须在线程组下</li><li>setUp Thread Group：一种特殊类型的ThreadGroup的，可用于执行预测试操作。这些线程的行为完全像一个正常的线程组元件。不同的是，这些类型的线程执行测试前进行定期线程组的执行。</li><li>teardown thread group：一种特殊类型的ThreadGroup的，可用于执行测试后动作。这些线程的行为完全像一个正常的线程组元件。不同的是，这些类型的线程执行测试结束后执行定期的线程组。</li></ul><blockquote><p>这里可能还是不太懂，可以参考junit的setup ，teardown</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109181048.png" alt=""></p><h2 id="配置元件"><a href="#配置元件" class="headerlink" title="配置元件"></a>配置元件</h2><p>配置元件（config element）用于提供对静态数据配置的支持。CSV Data Set config 可以将本地数据文件形成数据池（Data Pool），而对应于HTTP Request Sampler和 TCP Request Sampler等类型的配制无件则可以修改Sampler的默认数据。（例如，HTTP Cookie Manager 可以用于对 HTTP Request Sampler 的cookie 进行管理）</p><h2 id="监听器："><a href="#监听器：" class="headerlink" title="监听器："></a>监听器：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109181245.png" alt=""></p><p>监听器，顾名思义就是用来监听测试结果的，可以看到对应的请求需要配置不同的监听器。最常用的功能是 <strong>查看结果树</strong>，<strong>聚合报告</strong>等，在后续的功能介绍中会进行具体的使用：</p><h2 id="定时器："><a href="#定时器：" class="headerlink" title="定时器："></a>定时器：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109182306.png" alt=""></p><p>定时器个人没有进行过实践，略过。。。。。</p><h2 id="前置处理器："><a href="#前置处理器：" class="headerlink" title="前置处理器："></a>前置处理器：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109182410.png" alt=""></p><p>用于在实际的请求发出之前对即将发出的请求进行特殊处理。例如，HTTP URL重写修复符则可以实现URL重写，当RUL中有sessionID 一类的session信息时，可以通过该处理器填充发出请求的实际的sessionID 。</p><h2 id="后置处理器："><a href="#后置处理器：" class="headerlink" title="后置处理器："></a>后置处理器：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109182703.png" alt=""></p><p>用于对Sampler 发出请求后得到的服务器响应进行处理。一般用来提取响应中的特定数据（类似LoadRunner测试工具中的关联概念）。例如，XPath Extractor 则可以用于提取响应数据中通过给定XPath 值获得的数据。</p><h2 id="断言："><a href="#断言：" class="headerlink" title="断言："></a>断言：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109182827.png" alt=""></p><p>断言用于检查测试中得到的相应数据等是否符合预期，断言一般用来设置检查点，用以保证性能测试过程中的数据交互是否与预期一致。</p><blockquote><p>请注意，断言适用于其<a href="#scoping_rules">范围内的</a>所有采样器。要将声明限制为单个采样器，请将该声明添加为采样器的子代。</p></blockquote><h2 id="测试片段："><a href="#测试片段：" class="headerlink" title="测试片段："></a>测试片段：</h2><p>“测试片段”元素是一种特殊类型的<a href="#controllers">控制器</a>，它与线程组元素位于同一级别的“测试计划”树上。它与线程组的区别在于，除非<a href="../usermanual/component_reference.html#Module_Controller">模块控制器</a>或<a href="../usermanual/component_reference.html#Include_Controller">Include_Controller</a>引用它，否则它不会执行。该元素仅用于测试计划中的代码重用</p><h2 id="非测试元件："><a href="#非测试元件：" class="headerlink" title="非测试元件："></a>非测试元件：</h2><p>可以在这里找到对应的Http代理服务器设置，可以配置http代理，方便进行代理服务器进行并发测试。</p><h2 id="各元件启动顺序："><a href="#各元件启动顺序：" class="headerlink" title="各元件启动顺序："></a>各元件启动顺序：</h2><ol><li>配置元素</li><li>预处理器</li><li>计时器</li><li>取样器</li><li>后处理器（除非SampleResult为<code>null</code>）</li><li>断言（除非SampleResult为<code>null</code>）</li><li>侦听器（除非SampleResult为<code>null</code>）</li></ol><blockquote><p>请注意，计时器，断言，预处理器和后处理器仅在有适用于其的采样器时才进行处理。逻辑控制器和采样器按照它们在树中出现的顺序进行处理。其他测试元素将根据其发现范围和测试元素的类型进行处理。[在一个类型内，元素按照它们在树中出现的顺序进行处理]。</p></blockquote><h1 id="线程组的菜单介绍："><a href="#线程组的菜单介绍：" class="headerlink" title="线程组的菜单介绍："></a>线程组的菜单介绍：</h1><h2 id="取样器："><a href="#取样器：" class="headerlink" title="取样器："></a>取样器：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109184654.png" alt=""></p><p>采样器告诉JMeter将请求发送到服务器并等待响应。它们按照在树中出现的顺序进行处理。控制器可用于修改采样器的重复次数。</p><p>JMeter采样器包括：</p><ul><li>FTP请求</li><li>HTTP请求（也可用于SOAP或REST Web服务）</li><li>JDBC请求</li><li>Java对象请求</li><li>JMS请求</li><li>JUnit测试请求</li><li>LDAP要求</li><li>邮件要求</li><li>操作系统进程请求</li><li>TCP请求</li></ul><p><strong>切记在测试计划中添加一个侦听器</strong>，否则最终的结果是看不到的</p><h2 id="逻辑控制器："><a href="#逻辑控制器：" class="headerlink" title="逻辑控制器："></a>逻辑控制器：</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109190006.png" alt=""></p><p>逻辑控制器使您可以自定义JMeter用于确定何时发送请求的逻辑，为了理解逻辑控制器对测试计划的影响，考虑以下测试树</p><blockquote><ul><li><p>Test Plan</p></li><li><ul><li><p>Thread Group</p></li><li><ul><li><p>Once Only Controller</p></li><li><ul><li>Login Request (an <a href="../usermanual/component_reference.html#HTTP_Request">HTTP Request</a>)</li></ul></li><li><p>Load Search Page (HTTP Sampler)</p></li><li><p><strong>Interleave Controller</strong></p></li><li><ul><li><strong>Search “A” (HTTP Sampler)</strong></li><li><strong>Search “B” (HTTP Sampler)</strong></li><li><strong>HTTP default request (Configuration Element)</strong></li></ul></li><li><p>HTTP default request (Configuration Element)</p></li><li><p>Cookie Manager (Configuration Element)</p></li></ul></li></ul></li></ul></blockquote><p>可以看到，使用逻辑控制器可以组合出各种复杂的请求。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      jmeter压力测试回顾
    
    </summary>
    
    
      <category term="压力测试" scheme="https://whitestore.top/categories/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="jmeter" scheme="https://whitestore.top/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter压力测试回顾(一)</title>
    <link href="https://whitestore.top/2021/01/18/jmeter-test1/"/>
    <id>https://whitestore.top/2021/01/18/jmeter-test1/</id>
    <published>2021-01-18T15:34:49.000Z</published>
    <updated>2021-01-18T15:41:23.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾jmeter压力测试（一）"><a href="#回顾jmeter压力测试（一）" class="headerlink" title="回顾jmeter压力测试（一）"></a>回顾jmeter压力测试（一）</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这一部分是个人对于很久之前笔记进行整理，有需要的时候再进行回顾。</p><a id="more"></a><h2 id="什么是压力测试？"><a href="#什么是压力测试？" class="headerlink" title="什么是压力测试？"></a>什么是压力测试？</h2><p>顾名思义：压力测试，就是  被测试的系统，在一定的访问压力下，看程序运行是否稳定/服务器运行是否稳定（资源占用情况）</p><p>比如： 2000个用户同时到一个购物网站购物，这些用户打开页面的速度是否会变慢，或者网站是否会奔溃，为了保证系统的正常可用，一般都会使用压力测试来测试网站的性能和瓶颈</p><h2 id="什么是apach-Jmeter"><a href="#什么是apach-Jmeter" class="headerlink" title="什么是apach Jmeter:"></a>什么是apach Jmeter:</h2><p>以下摘自百度百科：</p><p>Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/lsI/mnI3liqHnqIvluo8vNDE0ODgzNg==" title="https://baike.baidu.com/item/小服务程序/4148836">小服务程序<i class="fa fa-external-link"></i></span>、CGI 脚本、Java 对象、数据库、<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9GVFAvMTM4Mzk=" title="https://baike.baidu.com/item/FTP/13839">FTP<i class="fa fa-external-link"></i></span> 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能/<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/lm57lvZLmtYvor5UvMTkyNTczMg==" title="https://baike.baidu.com/item/回归测试/1925732">回归测试<i class="fa fa-external-link"></i></span>，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/kvb/nlKjmraPliJnooajovr7lvI8vNjU1NTQ4NA==" title="https://baike.baidu.com/item/使用正则表达式/6555484">使用正则表达式<i class="fa fa-external-link"></i></span>创建断言。</p><h2 id="常用压力测试工具比较："><a href="#常用压力测试工具比较：" class="headerlink" title="常用压力测试工具比较："></a>常用压力测试工具比较：</h2><h3 id="loadrunner"><a href="#loadrunner" class="headerlink" title="loadrunner"></a>loadrunner</h3><pre><code>性能稳定，压测结果及细粒度大，可以自定义脚本进行压测，但是太过于重大，功能比较繁多。并且是一个**收费软件**</code></pre><h3 id="apache-ab-单接口压测最方便"><a href="#apache-ab-单接口压测最方便" class="headerlink" title="apache ab(单接口压测最方便)"></a>apache ab(单接口压测最方便)</h3><pre><code>模拟多线程并发请求,ab命令对发出负载的计算机要求很低，既不会占用很多CPU，也不会占用太多的内存，但却会给目标服务器造成巨大的**负载**, 简单DDOS攻击等。</code></pre><h3 id="webbench"><a href="#webbench" class="headerlink" title="webbench"></a>webbench</h3><pre><code>webbench首先fork出多个子进程，每个子进程都循环做web访问测试。子进程把访问的结果通过pipe告诉父进程，父进程做最终的统计结果。</code></pre><h2 id="Apache-JMeter的功能"><a href="#Apache-JMeter的功能" class="headerlink" title="Apache JMeter的功能:"></a>Apache JMeter的功能:</h2><ul><li>网络-HTTP，HTTPS（Java，NodeJS，PHP，ASP.NET等）</li><li>SOAP / REST Web服务</li><li>FTP</li><li>支持JDBC的数据库</li><li>LDAP</li><li>通过JMS的面向消息的中间件（MOM）</li><li>邮件-SMTP（S），POP3（S）和IMAP（S）</li><li>本机命令或Shell脚本</li><li>TCP协议</li><li>Java对象</li></ul><h2 id="使用场景及优点"><a href="#使用场景及优点" class="headerlink" title="使用场景及优点"></a>使用场景及优点</h2><p>1）功能测试<br>2）压力测试<br>3）分布式压力测试<br>4）纯java开发<br>5）上手容易，高性能<br>4）提供测试数据分析<br>5）各种报表数据图形展示</p><h2 id="如何学习："><a href="#如何学习：" class="headerlink" title="如何学习："></a>如何学习：</h2><p>注意，对于实操性非常强的软件来说，jmeter更多的是适合上机实操而不是理论记忆。目前还是推荐结合各种实际场景结合博客能更加深入的把握各种功能的使用。</p><p>官方网站：<span class="exturl" data-url="aHR0cHM6Ly9qbWV0ZXIuYXBhY2hlLm9yZy8=" title="https://jmeter.apache.org/">https://jmeter.apache.org/<i class="fa fa-external-link"></i></span></p><p>社区：<span class="exturl" data-url="aHR0cHM6Ly90ZXN0ZXJob21lLmNvbS8=" title="https://testerhome.com/">https://testerhome.com/<i class="fa fa-external-link"></i></span> （由于个人主要为后端这里主要为测试的社区，里面有不少测试的干货，感兴趣可以了解）</p><h2 id="我要怎么做？"><a href="#我要怎么做？" class="headerlink" title="我要怎么做？"></a>我要怎么做？</h2><h3 id="配置jdk环境："><a href="#配置jdk环境：" class="headerlink" title="配置jdk环境："></a>配置jdk环境：</h3><p>由于Jmeter是由java编写的，使用之前需要事先安装安装<strong>jdk1.8</strong>以上版本以上的号环境，由于Jdk的配置网上一抓一大把，这里不做过多的介绍</p><h3 id="下载Jmeter："><a href="#下载Jmeter：" class="headerlink" title="下载Jmeter："></a>下载Jmeter：</h3><p>目前最新版本的<code>Jmeter5.4</code>需要JDK1.8的支持：</p><p>官方下载地址：<span class="exturl" data-url="aHR0cHM6Ly9qbWV0ZXIuYXBhY2hlLm9yZy9kb3dubG9hZF9qbWV0ZXIuY2dp" title="https://jmeter.apache.org/download_jmeter.cgi">https://jmeter.apache.org/download_jmeter.cgi<i class="fa fa-external-link"></i></span></p><p>windows：<span class="exturl" data-url="aHR0cHM6Ly9hcGFjaGVtaXJyb3Iuc2cud3VjaG5hLmNvbS8vam1ldGVyL2JpbmFyaWVzL2FwYWNoZS1qbWV0ZXItNS40LnRneg==" title="https://apachemirror.sg.wuchna.com//jmeter/binaries/apache-jmeter-5.4.tgz">https://apachemirror.sg.wuchna.com//jmeter/binaries/apache-jmeter-5.4.tgz<i class="fa fa-external-link"></i></span></p><p>Linux：<span class="exturl" data-url="aHR0cHM6Ly9hcGFjaGVtaXJyb3Iuc2cud3VjaG5hLmNvbS8vam1ldGVyL2JpbmFyaWVzL2FwYWNoZS1qbWV0ZXItNS40LnppcA==" title="https://apachemirror.sg.wuchna.com//jmeter/binaries/apache-jmeter-5.4.zip">https://apachemirror.sg.wuchna.com//jmeter/binaries/apache-jmeter-5.4.zip<i class="fa fa-external-link"></i></span></p><p>下载完成之后进行对应的解压即可：</p><h2 id="jmeter包结构解释："><a href="#jmeter包结构解释：" class="headerlink" title="jmeter包结构解释："></a>jmeter包结构解释：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bin：最常用的包,里面包含了各种可执行文件</span><br><span class="line">docs：java doc文档</span><br><span class="line">extras：插件拓展的包</span><br><span class="line">    + lib:核心的依赖包</span><br><span class="line">    + ext:核心包</span><br><span class="line">    + junit:单元测试包</span><br><span class="line">licenses：开源许可</span><br><span class="line">lib：源码包</span><br><span class="line">printable_docs：官方文档</span><br><span class="line">NOTICE JMeter 简单信息说明</span><br><span class="line">README.md JMeter 官方基本介绍</span><br></pre></td></tr></table></figure><p>先介绍一下最常用的Bin包内容：</p><pre><code>jmeter.bat: windows启动文件：jmeter: mac或者linux启动文件：jmeter-server：mac或者Liunx分布式压测使用的启动文件jmeter-server.bat：mac或者Liunx分布式压测使用的启动文件jmeter.properties: 核心配置文件</code></pre><h2 id="改变jmeter的GUI界面语言版本"><a href="#改变jmeter的GUI界面语言版本" class="headerlink" title="改变jmeter的GUI界面语言版本"></a>改变jmeter的GUI界面语言版本</h2><h3 id="控制台修改"><a href="#控制台修改" class="headerlink" title="控制台修改"></a>控制台修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu -&gt; options -&gt; choose language</span><br></pre></td></tr></table></figure><h3 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h3><pre><code>bin目录 -&gt;` jmeter.properties`默认 `#language=en`改为` language=zh_CN `</code></pre><h2 id="详细介绍："><a href="#详细介绍：" class="headerlink" title="详细介绍："></a>详细介绍：</h2><p>由于实操性比较强，对于jmeter详细功能的介绍，最终还是建议落实到各种尝试，同时如果平时接触不到的话，完全可以等到使用的时候再进行回顾。</p><p>另外，jmeter无论对于开发和测试都是有帮助的，对于测试来说基本是必须会的一个技能，作为开发在平时某些情况下也可能会用到</p><h1 id="摘抄："><a href="#摘抄：" class="headerlink" title="摘抄："></a>摘抄：</h1><h2 id="接口测试的要点："><a href="#接口测试的要点：" class="headerlink" title="接口测试的要点："></a>接口测试的要点：</h2><p>下面是根据博客截图，具体请看<strong>“如何学习”</strong>这一篇章。</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20210109193629.png" alt=""></p><h2 id="接口响应状态码："><a href="#接口响应状态码：" class="headerlink" title="接口响应状态码："></a>接口响应状态码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">http 请求状态码详细</span><br><span class="line">使用 ASP.NET&#x2F;PHP&#x2F;JSP 或者 javascript 都会用到 http 的不同状态，一些常见的状态码</span><br><span class="line">为：</span><br><span class="line"></span><br><span class="line">200 – 服务器成功返回网页 404 – 请求的网页不存在 503 – 服务不可用</span><br><span class="line"></span><br><span class="line">1xx（临时响应）</span><br><span class="line">表示临时响应并需要请求者继续执行操作的状态代码</span><br><span class="line">100 （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的</span><br><span class="line">第一部分，正在等待其余部分。</span><br><span class="line">101 （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。</span><br><span class="line">2xx （成功）</span><br><span class="line">表示成功处理了请求的状态代码</span><br><span class="line">200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网</span><br><span class="line">页。</span><br><span class="line">201 （已创建） 请求成功并且服务器创建了新的资源。</span><br><span class="line">202 （已接受） 服务器已接受请求，但尚未处理。</span><br><span class="line">203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。</span><br><span class="line">204 （无内容） 服务器成功处理了请求，但没有返回任何内容。</span><br><span class="line">205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。</span><br><span class="line">206 （部分内容） 服务器成功处理了部分 GET 请求。</span><br><span class="line"></span><br><span class="line">3xx （重定向）</span><br><span class="line">。 表示要完成请求，需要进一步操作。  通常，这些状态代码用来重定向</span><br><span class="line">300 （多种选择） 针对请求，服务器可执行多种操作。服务器可根据请求者 (user</span><br><span class="line">agent) 选择一项操作，或提供操作列表供请求者选择。</span><br><span class="line">301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET</span><br><span class="line">或 HEAD 请求的响应）时，会自动将请求者转到新位置。</span><br><span class="line">302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用</span><br><span class="line">原有位置来进行以后的请求。</span><br><span class="line">303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响</span><br><span class="line">应时，服务器返回此代码。</span><br><span class="line">304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，</span><br><span class="line">不会返回网页内容。</span><br><span class="line">305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响</span><br><span class="line">应，还表示请求者应使用代理。</span><br><span class="line">307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使</span><br><span class="line">用原有位置来进行以后的请求。</span><br><span class="line"></span><br><span class="line">4xx（请求错误）</span><br><span class="line">这些状态代码表示请求可能出错，妨碍了服务器的处理</span><br><span class="line">400 （错误请求） 服务器不理解请求的语法。</span><br><span class="line">401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此</span><br><span class="line">响应。</span><br><span class="line">403 （禁止） 服务器拒绝请求。</span><br><span class="line">404 （未找到） 服务器找不到请求的网页。</span><br><span class="line">405 （方法禁用） 禁用请求中指定的方法。</span><br><span class="line">406 （不接受） 无法使用请求的内容特性响应请求的网页。</span><br><span class="line">407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授</span><br><span class="line">权使用代理。</span><br><span class="line">408 （请求超时） 服务器等候请求时发生超时。</span><br><span class="line">409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲</span><br><span class="line">突的信息。</span><br><span class="line">410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。</span><br><span class="line">411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</span><br><span class="line">412 （未满足前提条件）服务器未满足请求者在请求中设置的其中一个前提条件。</span><br><span class="line">413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的</span><br><span class="line">处理能力。</span><br><span class="line">414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</span><br><span class="line">415 （不支持的媒体类型） 请求的格式不受请求页面的支持。</span><br><span class="line">416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此</span><br><span class="line">状态代码。</span><br><span class="line">417 （未满足期望值） 服务器未满足”期望”请求标头字段的要求。</span><br><span class="line">关注公众号--测试驿栈</span><br><span class="line">博客地址： https:&#x2F;&#x2F;testerhome.com&#x2F;topics&#x2F;21318</span><br><span class="line">5xx（服务器错误）</span><br><span class="line">。 这些状态代码表示服务器在尝试处理请求时发生内部错误。  这些错误可能是服务</span><br><span class="line">器本身的错误</span><br><span class="line">500 （服务器内部错误） 服务器遇到错误，无法完成请求。</span><br><span class="line">501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求</span><br><span class="line">方法时可能会返回此代码。</span><br><span class="line">502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</span><br><span class="line">503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这</span><br><span class="line">只是暂时状态。</span><br><span class="line">504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</span><br><span class="line">505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</span><br><span class="line">428 Precondition Required (要求先决条件)</span><br><span class="line">429 Too Many Requests (太多请求)</span><br><span class="line">431 Request Header Fields Too Large (请求头字段太大)</span><br><span class="line">511 Network Authentication Required (要求网络认证)</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      个人笔记回顾
    
    </summary>
    
    
      <category term="压力测试" scheme="https://whitestore.top/categories/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="jmeter" scheme="https://whitestore.top/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>职场的自我个人提升（一）</title>
    <link href="https://whitestore.top/2021/01/15/live1/"/>
    <id>https://whitestore.top/2021/01/15/live1/</id>
    <published>2021-01-15T13:53:37.000Z</published>
    <updated>2021-01-15T13:54:51.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自我提升"><a href="#自我提升" class="headerlink" title="自我提升"></a>自我提升</h1><p>之前在微信公众号看到某个广告，加薪课？感觉有点意思，专门讲职场的，结果看了半小时就停不下来了，虽然是免费的三天课程，而且可以看出来还是拉潜在买家的，但是干货不少，还是有非常多值得学习的内容，这里分享出来，直播是三天时间，大概5 6 个小时，但是值得思考的东西确实不少，这里不做过多的介绍和笔记，直接看思维导图比较直观。</p><p>由于内容实在太多，这里用<strong>幕布</strong>笔记进行分享：</p><p>连接：<strong><span class="exturl" data-url="aHR0cHM6Ly9zaGFyZS5tdWJ1LmNvbS9kb2MvN1U4YUlXOG56NlI=" title="https://share.mubu.com/doc/7U8aIW8nz6R">https://share.mubu.com/doc/7U8aIW8nz6R<i class="fa fa-external-link"></i></span></strong></p><p>（如果侵权或者有损机构利益请私信联系进行删除，谢谢！）</p><a id="more"></a><h1 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h1><ul><li>自信和努力可以改变一个人</li><li>有目标比努力更加重要</li><li>分清职业和事业，职业!=事业</li><li>大目标，小计划</li><li>自律改变人生</li></ul><h1 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h1><p>自从疫情以来我就一直在思考，如果我没了工作，没了收入，发现自己没有对未来的任何一点设想，感觉有点后怕，于是我看了有关财商、职场、身体健康的的东西，努力寻找自己的目标，寻找自己存在的意义以及对社会的责任和使命。</p><p><strong>人最大的敌人永远是自己，改变自己就是最大的进步</strong></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      关于职场的自我提升，我有话要说
    
    </summary>
    
    
      <category term="职场" scheme="https://whitestore.top/categories/workplace/"/>
    
    
      <category term="生活" scheme="https://whitestore.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>《活着》读书笔记</title>
    <link href="https://whitestore.top/2021/01/15/live2/"/>
    <id>https://whitestore.top/2021/01/15/live2/</id>
    <published>2021-01-15T13:53:17.000Z</published>
    <updated>2021-01-15T13:55:48.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《活着》读书笔记"><a href="#《活着》读书笔记" class="headerlink" title="《活着》读书笔记"></a>《活着》读书笔记</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这本书可能很多人看过了，也可能很多了没看，《活着》确实是百看不厌的经典，个人精读了一遍之后，总是会回想起福贵的一生，福贵看似苦难却极其丰富的一生，给了很多人思考，下面就此来分析一下这本书，本文章内容<strong>包含剧透</strong>，请谨慎观看。《活着》的电影一直没有看，有时间可以去看看，不过现在可能不太好找。</p><a id="more"></a><h2 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h2><ol><li>回顾个人的读书感受</li><li>为什么要读这本书？读书收获</li><li>对于这本书做一个总结。</li></ol><h2 id="推荐程度："><a href="#推荐程度：" class="headerlink" title="推荐程度："></a>推荐程度：</h2><p>必读好书，对于价值观的触动比较大，也是一部值得深思的作品</p><h2 id="全书概览"><a href="#全书概览" class="headerlink" title="全书概览"></a>全书概览</h2><p>我将这本书的内容，按照个人的理解进行了大致梳理</p><ol><li>年少轻狂：吃喝嫖赌样样来，天不怕地不怕，活生生的土地主。</li><li>命运转折：赌博输光钱财，苦难一生的开端</li><li>生活巨变：辛苦工作，养活家人</li><li>短暂的幸福：妻子回归，儿子出生。</li><li>命运又一次转折：为妻子找大夫，结果被抓去当“炮灰”。但是命运眷顾活了下来</li><li>母亲去世，儿子有庆出生，女儿变哑</li><li>二龙因地主被枪毙，富贵幸免于难</li><li>儿子为输血死在医院。</li><li>女儿出嫁，王二喜入赘，短暂的幸福</li><li>女儿生孩子去世，妻子去世。剩下二喜和富贵以及外孙</li><li>二喜意外身亡，剩下富贵和外孙</li><li>外孙生病吃豆子被噎死，富贵孤生一人</li><li>最终买了老牛，苦难一生来到尽头</li></ol><h2 id="收获："><a href="#收获：" class="headerlink" title="收获："></a>收获：</h2><ol><li>酸甜苦辣不是人生的全部</li><li>条条大路通罗马，但是有的人生在罗马</li><li>生命只是静静的活着，只是单纯的为了活着</li><li>生存永远是第一需要</li></ol><h2 id="个人感悟："><a href="#个人感悟：" class="headerlink" title="个人感悟："></a>个人感悟：</h2><p>看到豆瓣书评上面很多人去批判历史，但是历史终究是死物。个人并不想对本书的历史背景发表任何看法。</p><p>每一个人都有各自的想法，每一个人都按照各自的想法存活于这个世界，有得人想成就伟业，也有人甘愿做一个普通人，作者没有从任何的是非对错去看待一个人，而是用一个人的一生来诠释到底什么是活着，人到底为什么而活，这本书最大的特点是里面<strong>几乎没有作者个人感情色彩</strong>，本书现实全程寥寥几笔“我”和福贵的讲述，大部分的篇幅都在讲述福贵，富贵的不单单为了自己而活，他肩负的回忆和幸福让他度过了漫长的岁月，可能和书中所说的一样，很多人老了都不记得自己年轻的时候记忆，但是富贵却能像讲述故事一样像他人讲述自己。富贵为了家人而活，为了能不断的回忆过往的幸福，苦难净化了他的一生。</p><p>从另一个角度来看，福贵输光家产，家破父亡，但是后来却因为这件事活下来，而春生用福贵儿子有庆的命换了自己的命最终还是用上吊方式结束了自己的生命，也可以看到对于善恶终有报的观点诠释。</p><p>富贵本书的苦难有以下几种：</p><ol><li>穷困潦倒</li><li>亲人相继离世</li><li>孤独</li><li>劳累</li><li>战乱</li><li>丧偶</li><li>子女早逝<br>……</li></ol><p>每一份苦难在如今看来大部分人几乎是无法忍受的，但是福贵却用一生接受这份苦难，并且没有一句怨言。时代在改变，我们必然不会经历福贵那样颠沛流离的时代，但是现代人对于苦难的承受能力却越来越不足，这是值得每一个人进行反思的。面对命运和不公，我们是屈服忍辱，还是迎接挑战，是安稳一生，还是风雨飘摇，每个人都有不同的选择。</p><h2 id="精句摘录："><a href="#精句摘录：" class="headerlink" title="精句摘录："></a>精句摘录：</h2><ol><li>做人不能忘记四条,话不要说错,床不要睡错,门槛不要踏错,口袋不要摸错</li><li><strong>人是为活着本身而活着的，而不是为了活着之外的任何事物所活着</strong></li><li>少年去游荡，中年想掘藏，老年做和尚</li><li>小鸡长大了就变成了鹅，鹅长大了就变成了羊，羊长大了就变成了牛</li><li>人的幸福要等到最后，在他生前和葬礼前，无人有权说他幸福</li></ol><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>这本书我是不敢再看第二遍了，富贵生命的长度和厚度都令人动容，每个人都有自己的想法，但是对于每一个人来说，生命的长度和厚度都不尽相同，对于每一个人来说，生命的长度和厚度是同等重要的，不管是富贵还是穷困，活着就要感谢，极度认真的过好每一天，这样也就足够了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      人是为了活着而活着，不是为了活着之外的任何事物活着
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://whitestore.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书" scheme="https://whitestore.top/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>一文弄懂spring validate</title>
    <link href="https://whitestore.top/2021/01/06/springvalidate/"/>
    <id>https://whitestore.top/2021/01/06/springvalidate/</id>
    <published>2021-01-06T15:48:50.000Z</published>
    <updated>2021-01-06T15:50:17.105Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>校验参数在以前基本都是使用大量的if/else，稍微方便一点的可以使用反射+自定义注解的形式，但是复用性不是很好，并且每个人对于的自定义注解有着自己的使用习惯，不过好在spring开发了validated框架用于注解校验，可以节省很多的校验<code>ifelse</code>代码，这篇文章通篇介绍了如何使用spring validated。</p><a id="more"></a><h1 id="文章目的："><a href="#文章目的：" class="headerlink" title="文章目的："></a>文章目的：</h1><ol><li>了解 <strong>validate</strong> 校验，以及使用注解对于参数进行快速校验</li><li>关于统一全局异常处理，以及一些踩坑问题</li><li>如何快速的集成和使用 <strong>spring validate</strong></li><li>讨论<code>list\&lt;Object\&gt;</code>校验的问题，分析如何使用list对象内容校验</li></ol><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>spring Validation 是一种参数检验工具,集成在spring-context包中, 常用于spring mvc中Controller的参数处理,主要针对整个实体类的多个可选域进行判定.对于不合格的数据信息springMVC会把它保存在错误对象中，这些错误信息我们也可以通过SpringMVC提供的标签在前端JSP页面上进行展示。</p><p>实现方式，一般使用较多的是两个注解：<code>@Validated</code>、<code>@Valid</code>，下面简单介绍一下以及分析他们的区别</p><ol><li>实现<code>Validator</code>,利用<code>BindingResult</code>获取Errors信息</li><li>采用<code>@Valid</code> 以及 <code>JSR-303</code>中的参数判定注解</li></ol><h2 id="Valid和-Validated区别"><a href="#Valid和-Validated区别" class="headerlink" title="@Valid和@Validated区别"></a><code>@Valid</code>和<code>@Validated</code>区别</h2><table><thead><tr><th>区别</th><th>@Valid</th><th>@Validated</th></tr></thead><tbody><tr><td>提供者</td><td>JSR-303规范</td><td>Spring</td></tr><tr><td><strong>是否支持分组</strong></td><td>不支持</td><td>支持</td></tr><tr><td>标注位置</td><td>METHOD, FIELD, CONSTRUCTOR, PARAMETER, TYPE_USE</td><td>TYPE, METHOD, PARAMETER</td></tr><tr><td><strong>嵌套校验</strong></td><td>支持</td><td>不支持</td></tr></tbody></table><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p>网上有很多类似表格，这里直接COPY了一份，对于不同的api版本可能出现部分注解过时等情况，注意！</p><table><thead><tr><th align="left">meta-data</th><th align="left">comment</th><th align="left">version</th></tr></thead><tbody><tr><td align="left">@Null</td><td align="left">对象，为空</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@NotNull</td><td align="left">对象，不为空</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@AssertTrue</td><td align="left">布尔，为True</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@AssertFalse</td><td align="left">布尔，为False</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Min(value)</td><td align="left">数字，最小为value</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Max(value)</td><td align="left">数字，最大为value</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@DecimalMin(value)</td><td align="left">数字，最小为value</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@DecimalMax(value)</td><td align="left">数字，最大为value</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Size(max, min)</td><td align="left">min&lt;=value&lt;=max</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Digits (integer, fraction)</td><td align="left">数字，某个范围内</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Past</td><td align="left">日期，过去的日期</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Future</td><td align="left">日期，将来的日期</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Pattern(value)</td><td align="left">字符串，正则校验</td><td align="left">Bean Validation 1.0</td></tr><tr><td align="left">@Email</td><td align="left">字符串，邮箱类型</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@NotEmpty</td><td align="left">集合，不为空</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@NotBlank</td><td align="left">字符串，不为空字符串</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@Positive</td><td align="left">数字，正数</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@PositiveOrZero</td><td align="left">数字，正数或0</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@Negative</td><td align="left">数字，负数</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@NegativeOrZero</td><td align="left">数字，负数或0</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@PastOrPresent（时间）</td><td align="left">过去或者现在</td><td align="left">Bean Validation 2.0</td></tr><tr><td align="left">@FutureOrPresent（时间）</td><td align="left">将来或者现在</td><td align="left">Bean Validation 2.0</td></tr></tbody></table><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>springvalidation入门使用都十分的简单，基本十分钟不到就能快速的集成，目前springboot的项目已经越来越多，所以本文基本都是基于<strong>springboot</strong>构建的</p><p><strong>第一步：pom.xml 加入注解</strong></p><p>这里为了方便版本控制增加了版本控制配置：</p><blockquote><p>注意：hibernate-validate 的版本到本文为止已经出现了7.0.0，这个版本的校验做了不少的改动。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmpib3NzLm9yZy9oaWJlcm5hdGUvc3RhYmxlL3ZhbGlkYXRvci9yZWZlcmVuY2UvZW4tVVMvaHRtbF9zaW5nbGUvP3Y9Ny4wI192YWxpZGF0aW5nX2NvbnN0cmFpbnRz" title="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=7.0#_validating_constraints">https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=7.0#_validating_constraints<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hibernate-validate.version</span>&gt;</span>5.2.0.Final<span class="tag">&lt;/<span class="name">hibernate-validate.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>增加完配置之后，增加对应的maven依赖，需要引入如下两个依赖配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--jsr 303--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hibernate validator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意使用了版本控制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate-validate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加完这两个注解之后，不要急着先进行其他的编写，可以先进行</p><p><strong>第二步：增加注解</strong></p><p>这里给出一个案例进行参考，验证对象增加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProduct</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">7</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^(([1-9]&#123;1&#125;\\d*)|([0]&#123;1&#125;))(\\.(\\d)&#123;0,2&#125;)?$"</span>)</span><br><span class="line">    <span class="keyword">private</span> String tranAmount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">3</span>,min = <span class="number">3</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^[A-Z]&#123;3&#125;$"</span>)</span><br><span class="line">    <span class="keyword">private</span> String currency;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">private</span> String tranReason;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">private</span> String gatherName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> String business_type;</span><br><span class="line"></span><br><span class="line">    /</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> String pay_channel;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// .......其他校验</span></span><br><span class="line">    <span class="comment">// 过滤 get/set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>controller</code>层增加<code>@Validated</code>注解，加入之后成为如下的效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">(@Validated @RequestBody Product requestString, BindingResult bindResult)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 统一处理校验注解的错误信息</span></span><br><span class="line">        Result stringBuilder = dealWithError(bindResult);</span><br><span class="line">        <span class="keyword">if</span> (stringBuilder != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> stringBuilder;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">// 自己的业务处理...</span></span><br><span class="line">        <span class="keyword">return</span> ....;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三步：验证注解是否生效</strong></p><p>到这一步就可以直接请求接口，在接口处进行断点，如果请求正确会直接进入对应的断点，否则会抛出如下案例所示的异常信息，如果校验不通过，会抛出<code>MethodArgumentNotValidException</code>或者<code>ConstraintViolationException</code>异常，下面是案例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2021-01-01T12:08:49.859+00:00"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</span><br><span class="line">    <span class="attr">"trace"</span>: <span class="string">"org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors\nField error in object 'product' on field 'name': rejected value [null]; codes [NotBlank.product.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.name,name]; arguments []; default message ......"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Validation failed for object='product'. Error count: 1"</span>,</span><br><span class="line">    <span class="attr">"errors"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"codes"</span>: [</span><br><span class="line">                <span class="string">"NotBlank.product.name"</span>,</span><br><span class="line">                <span class="string">"NotBlank.name"</span>,</span><br><span class="line">                <span class="string">"NotBlank.java.lang.String"</span>,</span><br><span class="line">                <span class="string">"NotBlank"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"arguments"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"codes"</span>: [</span><br><span class="line">                        <span class="string">"product.name"</span>,</span><br><span class="line">                        <span class="string">"name"</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">"arguments"</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">"defaultMessage"</span>: <span class="string">"name"</span>,</span><br><span class="line">                    <span class="attr">"code"</span>: <span class="string">"name"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"defaultMessage"</span>: <span class="string">"不能为空"</span>,</span><br><span class="line">            <span class="attr">"objectName"</span>: <span class="string">"product"</span>,</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"name"</span>,</span><br><span class="line">            <span class="attr">"rejectedValue"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"bindingFailure"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"code"</span>: <span class="string">"NotBlank"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"//test/valid"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，一个对象的注解校验基本实现了，但是我们发现注解校验的方式抛出的异常信息不是十分友好，基本都会配合统一的异常处理来处理请求参数的问题，下面后文会单独讲如何使用全局异常处理来统一的处理异常信息。</p><h2 id="自定义注解校验："><a href="#自定义注解校验：" class="headerlink" title="自定义注解校验："></a>自定义注解校验：</h2><p>如果默认的注解规则无法满足业务需求，这时候validator提供了自定义注解的形式帮助开发者可以进行自定的规则校验。</p><p>第一步：定义自定义注解：</p><p>首先第一步是确定自己需要自定义的注解：比如我这里定义了一个检查时间格式的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期格式校验注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.EAN;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotBlank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="comment">// 注意这里有静态导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</span><br><span class="line"></span><br><span class="line"><span class="comment">// javadoc 文档标识</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">// 可以注入的类型，字段和参数类型</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;PARAMETER, FIELD&#125;)</span><br><span class="line"><span class="comment">// 运行时生效</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="comment">// 触发校验的对象</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = &#123;TimeValidator<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">Time</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须</span></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "时间格式校验失败"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须</span></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    String value = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面部分可以忽略</span></span><br><span class="line">    <span class="meta">@Target</span>(&#123; FIELD, METHOD, PARAMETER, ANNOTATION_TYPE &#125;)</span><br><span class="line">    <span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@interface</span> List &#123;</span><br><span class="line">        Time[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Constraint</code>注解声明约束及其可配置属性，同时在对应的真实注解处理类<code>TimeValidator</code>里面，可以随意的注入需要的<code>bean</code>（<code>AutoWired</code>等）</p><p>注意除开<code>value</code>这个属性之外，其他三个属性<code>message</code>、<code>groups</code>、<code>payload</code>都是<strong>必须要</strong>定义的，否则进行校验的时候，会抛出如下的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HV000074: com.xxx.xxx.valid.annotation.Time contains Constraint annotation, but does not contain a groups parameter.</span><br></pre></td></tr></table></figure><p>对于注解的解释：</p><ul><li><code>@Retention(RUNTIME)</code>：指定此类型的注释将在运行时通过反射方式可用</li><li><code>@Constraint</code>：指定用于验证元素的验证器</li><li><code>@Target</code>：注解的标识范围，比如这里注解可以是参数或者字段</li></ul><p>对应的三个固定参数含义：</p><ul><li><p><code>message</code> 定制化的提示信息，主要是从ValidationMessages.properties里提取，也可以依据实际情况进行定制</p></li><li><p><code>groups</code>这里主要进行将validator进行分类，不同的类group中会执行不同的validator操作</p></li><li><p><code>payload</code> 主要是针对bean的，使用不多。</p></li></ul><p>第二步：定义真实注解处理类：</p><p>需要实现接口<code>ConstraintValidator</code>，泛型的第一个参数为注解类，第二个参数为具体校验对象的类型</p><p>下面定义校验时间格式是否正确的一个案例，写的非常粗浅。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">Time</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化注解的校验内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> constraintAnnotation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Time constraintAnnotation)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"test"</span> + constraintAnnotation);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    具体校验代码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext constraintContext)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>);</span><br><span class="line">        simpleDateFormat.setLenient(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isValid = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            simpleDateFormat.parse(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            isValid = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果校验失败，设置自定义错误信息</span></span><br><span class="line">        <span class="keyword">if</span> ( !isValid ) &#123;</span><br><span class="line">            constraintContext.disableDefaultConstraintViolation();</span><br><span class="line">            constraintContext.buildConstraintViolationWithTemplate(</span><br><span class="line">                    <span class="string">"&#123;com.zxd.interview.valid.annotation."</span> +</span><br><span class="line">                            <span class="string">"Time.message&#125;"</span></span><br><span class="line">            )</span><br><span class="line">            .addConstraintViolation();<span class="comment">//很重要的一步，需要将自定义的信息提示模板加入</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isValid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>ConstraintValidator</code>接口内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">A</span> <span class="keyword">extends</span> <span class="title">Annotation</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">初始化验证器，为isValid(Object, ConstraintValidatorContext)调用做准备。传递给定约束声明的约束注释。</span></span><br><span class="line"><span class="comment">保证在使用此实例进行验证之前调用此方法。</span></span><br><span class="line"><span class="comment">默认的实现是no-op。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(A constraintAnnotation)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现验证逻辑。值的状态不能被改变。</span></span><br><span class="line"><span class="comment">该方法可以并发访问，实现必须确保线程安全。</span></span><br><span class="line"><span class="comment"><span class="doctag">@value</span>：被校验的值</span></span><br><span class="line"><span class="comment"><span class="doctag">@ConstraintValidatorContext</span> 校验上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(T value, ConstraintValidatorContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后只需要将注解应用到对应的对象上面，在请求的时候就可以进行对应的参数校验了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">// 自己定义的注解</span></span><br><span class="line">    <span class="meta">@Time</span></span><br><span class="line">    <span class="keyword">private</span> String time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略get/set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>HV000074</code>这个错误是如何来的？：</p><p>首先我们需要明确一点：javax.validator - JSR303的规范是由<strong>Hibernate validate</strong>作为标准实现的，也就是说虽然Spring已经为我们进行了适配，但是在校验的时候依然使用的Hibernate Validator，所以我们定义自定义的注解需要按照固定的要求规范：</p><p>旧版本的文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmpib3NzLm9yZy9oaWJlcm5hdGUvdmFsaWRhdG9yLzQuMi9yZWZlcmVuY2UvZW4tVVMvaHRtbF9zaW5nbGUv" title="https://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html_single/">https://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html_single/<i class="fa fa-external-link"></i></span></p><p>较新版本的文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmpib3NzLm9yZy9oaWJlcm5hdGUvc3RhYmxlL3ZhbGlkYXRvci9yZWZlcmVuY2UvZW4tVVMvaHRtbF9zaW5nbGUvP3Y9Ny4wI192YWxpZGF0aW5nX2NvbnN0cmFpbnRz" title="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=7.0#_validating_constraints">https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=7.0#_validating_constraints<i class="fa fa-external-link"></i></span></p><p><code>org.hibernate.validator.internal.util.logging</code>下面的几个包中定义了日志以及异常信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String getConstraintWithoutMandatoryParameterException = <span class="string">"HV000074: %2$s contains Constraint annotation, but does not contain a %1$s parameter."</span>;</span><br></pre></td></tr></table></figure><p>具体的提示信息如下图所示：<code>org.hibernate.validator.internal.util.logging.Log_$logger</code></p><p>注解定义了如下的异常信息提示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Message</span>(</span><br><span class="line">     id = <span class="number">74</span>,</span><br><span class="line">     value = <span class="string">"%2$s contains Constraint annotation, but does not contain a %1$s parameter."</span></span><br><span class="line"> )</span><br><span class="line"> <span class="function">ConstraintDefinitionException <span class="title">getConstraintWithoutMandatoryParameterException</span><span class="params">(String var1, String var2)</span></span>;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>注意以下几个点：</p><ul><li>静态字段和属性无法验证。</li><li>建议在一个类中坚持使用字段 <em>或</em>属性注释。不建议对字段<em>和</em>随附的getter方法进行注释<em>，</em>因为这将导致对该字段进行两次验证。</li></ul></blockquote><h2 id="使用-Validator-校验："><a href="#使用-Validator-校验：" class="headerlink" title="使用 Validator 校验："></a>使用 <code>Validator</code> 校验：</h2><p>下面介绍一下使用<code>Validator</code>要如何校验，简单的使用可以使用<code>Validation.buildDefaultValidatorFactory()</code>获取<code>ValidatorFactory</code>，通过<code>factory.getValidator()</code>获取对应的校验器<code>Validator</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">    ValidatorFactory factory = Validation.buildDefaultValidatorFactory();</span><br><span class="line">    Validator validator = factory.getValidator();</span><br><span class="line">    Set&lt;ConstraintViolation&lt;Product&gt;&gt; validate = validator.validate(product);</span><br><span class="line">    Map&lt;Object, Object&gt; objectObjectMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    validate.forEach(item -&gt; &#123;</span><br><span class="line">        <span class="comment">//            System.err.println("item = "+ item);</span></span><br><span class="line">        String message = item.getMessage();</span><br><span class="line">        <span class="comment">//            System.err.println("message " + message);</span></span><br><span class="line">        objectObjectMap.put(item.getPropertyPath(), message);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    objectObjectMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">        System.err.println(<span class="string">"key = "</span> + k + <span class="string">" value = "</span> + v);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面构建一个工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Validator validator =</span><br><span class="line">            Validation.byProvider(HibernateValidator<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">configure</span>()</span></span><br><span class="line"><span class="class">            .<span class="title">failFast</span>(<span class="title">true</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">buildValidatorFactory</span>()</span></span><br><span class="line"><span class="class">            .<span class="title">getValidator</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SmartValidator validatorAdapter = <span class="keyword">new</span> SpringValidatorAdapter(validator);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Validator <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> validator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SmartValidator <span class="title">getValidatorAdapter</span><span class="params">(Validator validator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> validatorAdapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验参数，用于普通参数校验 [未测试！]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validateParams</span><span class="params">(Object... params)</span> </span>&#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;Object&gt;&gt; constraintViolationSet = validator.validate(params);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!constraintViolationSet.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConstraintViolationException(constraintViolationSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groups</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">validate</span><span class="params">(T object, Class&lt;?&gt;... groups)</span> </span>&#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolationSet = validator.validate(object, groups);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!constraintViolationSet.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConstraintViolationException(constraintViolationSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验对象</span></span><br><span class="line"><span class="comment">     * 使用与 Spring 集成的校验方式。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 待校验对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groups 待校验的组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BindException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">validateBySpring</span><span class="params">(T object, Class&lt;?&gt;... groups)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BindException </span>&#123;</span><br><span class="line">        DataBinder dataBinder = getBinder(object);</span><br><span class="line">        dataBinder.validate((Object[]) groups);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dataBinder.getBindingResult().hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BindException(dataBinder.getBindingResult());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">DataBinder <span class="title">getBinder</span><span class="params">(T object)</span> </span>&#123;</span><br><span class="line">        DataBinder dataBinder = <span class="keyword">new</span> DataBinder(object, ClassUtils.getShortName(object.getClass()));</span><br><span class="line">        dataBinder.setValidator(getValidatorAdapter(validator));</span><br><span class="line">        <span class="keyword">return</span> dataBinder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的工具类代码来源于文章：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yNDMyZDBmNTFjMGU=" title="https://www.jianshu.com/p/2432d0f51c0e">https://www.jianshu.com/p/2432d0f51c0e<i class="fa fa-external-link"></i></span></p><h2 id="定义分组校验："><a href="#定义分组校验：" class="headerlink" title="定义分组校验："></a>定义分组校验：</h2><p>有时候我们需要某个对象在这个接口是必填的，而在另一个参数里面又不需要必填，比如我们使用dto接受更新或者新增的参数，新增不需要校验<code>主键</code>或者其他的字段信息，但是注解校验器却拦截返回错误信息，这种情况下就需要使用分组校验的方法。</p><p>第一步：设置分组接口：</p><p>建议继承Default，因为默认的<code>groups</code>就是<code>groups = {Default.class}</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupUpdate</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：在需要分组校验的注解上增加groups</p><p>例如我在对象某个注解增加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotBlank</span>(groups = &#123;GroupUpdate<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">String</span> <span class="title">name</span></span>;</span><br></pre></td></tr></table></figure><p>第三步：在@validated中加入对应的分组：</p><p>这里定义了两个接口来代替新增和修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新接口</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test/update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">update</span><span class="params">(@Validated(GroupUpdate.class)</span> Product product) <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">    System.err.println(product);</span><br><span class="line">     <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新增接口</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">add</span><span class="params">(@Validated Product product)</span> <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">    System.err.println(product);</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四步：分组校验结果：</p><p>按照同样的参数请求两个接口，分组的不同出现了不同的情况</p><p>可以看到指定分组之后，如果validated里面没有指定group，在校验的时候将会跳过指定分组的校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.validation.BeanPropertyBindingResult: <span class="number">2</span> errors</span><br><span class="line">Field error in object <span class="string">'product'</span> on field <span class="string">'name'</span>: .....</span><br><span class="line">Field error in object <span class="string">'product'</span> on field <span class="string">'time'</span>: .....</span><br><span class="line">org.springframework.validation.BeanPropertyBindingResult: <span class="number">1</span> errors</span><br><span class="line">Field error in object <span class="string">'product'</span> on field <span class="string">'time'</span>: .....</span><br></pre></td></tr></table></figure><h3 id="分组继承："><a href="#分组继承：" class="headerlink" title="分组继承："></a>分组继承：</h3><p>自定义的分组可以使用继承方式进行校验，比如我们将很多个分组封装到一个特定的分组里面，方便我们自由组合多个自定义分组下面请看如下的案例：</p><p>首先是实体对象，通过继承的形式的形式，对于校验对象来说继承会将父对象的属性一并校验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bag</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"><span class="comment">// 分组使用 GroupAdd</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"颜色不能为空"</span>,groups = &#123;GroupAdd<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">color</span></span>;</span><br><span class="line">  <span class="comment">// get/set省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义对应的分组，比如我们将增删改操作的分组集成到一个叫做<code>操作</code>的分组里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupsOpration</span> <span class="keyword">extends</span> <span class="title">GroupUpdate</span>,<span class="title">GroupDel</span>,<span class="title">GroupAdd</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupUpdate</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupDel</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupAdd</span> <span class="keyword">extends</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面分别定义对应的接口进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试组继承</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ParamException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/test/bag1"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">bag1</span><span class="params">(@Validated(GroupsOpration.class)</span> Bag product) <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">       System.err.println(product);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试组继承</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ParamException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/test/bag2"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">bag2</span><span class="params">(@Validated Bag product)</span> <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">       System.err.println(product);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>分别请求<code>/bag1</code>和<code>/bag2</code>得到如下的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Resolved [org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: <span class="number">2</span> errors</span><br><span class="line">Resolved [org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: <span class="number">1</span> error</span><br></pre></td></tr></table></figure><h2 id="如何处理validated异常信息"><a href="#如何处理validated异常信息" class="headerlink" title="如何处理validated异常信息"></a>如何处理validated异常信息</h2><h3 id="第一种：统一全局异常处理"><a href="#第一种：统一全局异常处理" class="headerlink" title="第一种：统一全局异常处理"></a>第一种：统一全局异常处理</h3><p>全局统一异常处理算是用的比较多的一种，可以解决基础的常见异常问题结果都返回，也可以使用</p><p>基本都写法和格式如下：</p><ol><li>在<code>类名</code>注明：<code>@ControllerAdvice</code>或者<code>@RestControllerAdvice</code>，分别对应<code>@Controller</code>和<code>@RestController</code>，至于这两个注解的区别可以自行进行学习和补充。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line">@<span class="meta">@RestControllerAdvice</span></span><br></pre></td></tr></table></figure><ol start="2"><li>对应的方法内部，使用<code>@ExceptionHandler</code>进行方法标注，在请求参数里面配套使用,即可对于指定的异常，如果在参数里面加入特定异常，那么在执行改方法的时候，会将对应的对象进行方法参数注入，这样就可以拿到抛出异常的对象信息进行自定义的异常处理了。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(&#123;Exception<span class="class">.<span class="keyword">class</span>&#125;)//主要注解</span></span><br><span class="line"><span class="class">@<span class="title">ResponseStatus</span>(<span class="title">HttpStatus</span>.<span class="title">OK</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">allError</span>(<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>下面是一个最终完整的案例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">//@ControllerAdvice 对应 @Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDealHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截未知的运行时异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(IllegalStateException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">notFount</span>(<span class="title">IllegalStateException</span> <span class="title">e</span>)</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">doSomethings</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(BindException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">bindError</span>(<span class="title">BindException</span> <span class="title">bind</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;ConstraintViolationException<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">HttpStatus</span>.<span class="title">OK</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">handleConstraintViolationException</span>(<span class="title">ConstraintViolationException</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;Exception<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">HttpStatus</span>.<span class="title">OK</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">allError</span>(<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="统一异常处理无法生效？"><a href="#统一异常处理无法生效？" class="headerlink" title="统一异常处理无法生效？"></a>统一异常处理无法生效？</h4><p>1.确保注解@RestControllerAdvice/@ControllerAdvice的类被<strong>spring容器管理到</strong>。</p><blockquote><p>  ①spring boot Java配置检查@SpringBootApplication(<strong>scanBasePackages</strong> = )（scanBasePackages 配置的包是否包含这个类默认情况下spring boot项目扫描的是@SpringBootApplication注解所在类的包及子包）</p><p>  ② xml配置的spring 普通项目检查<strong>&lt;context:component-scan base-package=”com.test”/&gt;</strong></p></blockquote><ol start="2"><li><p>检查项目中所有的切面编程，<strong>是否在某个切面将异常try-catch然后没有扔出来</strong>。常见的就是切面的环绕处理，捕获了异常忘记抛出来。</p></li><li><p>检查项目中是否有其他的相同的全局异常处理类，例如BaseController中<strong>是否已经定义</strong>了</p></li></ol><p>如果上面的排查方式都都尝试还是无法正常校验的话可能就是出现所谓统一全局处理的坑了，下面会讲解到对应的坑，如果 <strong>问题超过15分钟还没自我通过自己努力尽力解决</strong>，那么就赶紧上网找资料吧，碰运气基本都可以完美解决。</p><h3 id="第二种：控制器进行特定异常处理"><a href="#第二种：控制器进行特定异常处理" class="headerlink" title="第二种：控制器进行特定异常处理"></a>第二种：控制器进行特定异常处理</h3><p>一般这种使用方式比较少，毕竟有全局异常处理的情况下很少去使用控制器层的异常处理，某些特殊情况可以用到，了解即可。</p><p>和全局异常处理器类似，只不过定义方法修改到了对应的controller控制器层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestValid</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注解校验接口</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/valid"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">test</span><span class="params">(@Validated Product product)</span> <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">        System.err.println(product);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ParamException(<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    在控制器层处理异常信息，仅仅适用于当前控制器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">processException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        System.err.println(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三种：BindingResult对象处理异常信息："><a href="#第三种：BindingResult对象处理异常信息：" class="headerlink" title="第三种：BindingResult对象处理异常信息："></a>第三种：BindingResult对象处理异常信息：</h3><p>除开上面的方式之外，validate还提供<code>BindResult</code>对象封装异常信息，需要将该对象 <strong>紧跟</strong><code>@Validated</code>注解，就可以在校验失败之后在<code>BindResult</code>对象里面进行自定义的异常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试组继承</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> product</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParamException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test/bag1"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">bag1</span><span class="params">(@Validated(GroupsOpration.class)</span> Bag product, BindingResult bindingResult) <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">    <span class="comment">// 异常信息处理</span></span><br><span class="line">    <span class="keyword">if</span>(bindingResult.hasErrors())&#123;</span><br><span class="line">        List&lt;FieldError&gt; fieldErrors = bindingResult.getFieldErrors();</span><br><span class="line">        Map&lt;Object, Object&gt; objectObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (FieldError fieldError : fieldErrors) &#123;</span><br><span class="line">            objectObjectHashMap.put(fieldError.getField(), fieldError.getRejectedValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> objectObjectHashMap;</span><br><span class="line">    &#125;</span><br><span class="line">    System.err.println(product);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"color"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"time"</span>: <span class="string">"222"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统一全局处理器的坑："><a href="#统一全局处理器的坑：" class="headerlink" title="统一全局处理器的坑："></a>统一全局处理器的坑：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(IllegalStateException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">notFount</span>(<span class="title">IllegalStateException</span> <span class="title">e</span>)</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 处理异常结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果 @ExceptionHandler 注解中未声明要处理的异常类型，则默认为参数列表中的异常类型。注意只能绑定一个参数，如果在<strong>参数列表指定多个异常参数将无法生效</strong>，比如如下的写法是错误的，为什么会有这种情况，需要研究源码才能的得出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>()</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">notFount</span><span class="params">(Exception e,BindException bindExce, RuntimeException run)</span> </span>&#123; <span class="comment">// 这里指定多个Exception将无法生效</span></span><br><span class="line">    <span class="comment">// 处理异常结果</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的写法会出现如下的异常，大致的意思是找不到合适的解析器，就是说spring找不到合适的异常解析器去解析分发异常的请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not resolve parameter [<span class="number">2</span>] in <span class="keyword">public</span> java.lang.Object com.zxd.interview.valid.ExceptionDealHandler.notFount(java.lang.Exception,org.springframework.validation.BindException,java.lang.RuntimeException): No suitable resolver</span><br></pre></td></tr></table></figure><p>但是万事没有绝对，下面这种写法是可行的，在抛出<code>BindException</code>的异常之后，异常处理器将会正常的处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>()</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">notFount</span><span class="params">(Exception e,BindException bindExce)</span> </span>&#123;<span class="comment">//BindException 正常拦截处理</span></span><br><span class="line">    <span class="comment">// 处理异常结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前个人猜测是在定义参数类型的时候，定义的异常类上面出现“雷同”的<strong>构造方法</strong>，而spring在进行反射解析时候找到了对应的重复构造方法，导致无法生成代理对象完成异常处理，导致导致抛出异常。总的来说和spring validate的代理机制有关，有兴趣的小伙伴可以自行研究一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">自定义异常类1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    BusinessException(String code1, String code2, <span class="keyword">int</span> code3)&#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">自定义异常类2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamException</span><span class="params">(String code, String message, String error)</span></span>&#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这种写法是<strong>错误的</strong>，即使他们的构造方法不同，在抛出异常的时候依然出现了问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ExceptionHandler</span>()</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">errors</span><span class="params">(ParamException e, BusinessException busine)</span></span>&#123;<span class="comment">//错误的写法</span></span><br><span class="line">    <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议的写法，也是最稳妥的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(ParamException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">errors</span>(<span class="title">ParamException</span> <span class="title">e</span>)</span>&#123;<span class="comment">//错误的写法</span></span><br><span class="line">    <span class="keyword">return</span> HttpStatus.ACCEPTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，还是不建议使用<code>@ExceptionHandler()</code>这种形式，会发生各种莫名其妙的问题。</p><h3 id="总结自定义异常"><a href="#总结自定义异常" class="headerlink" title="总结自定义异常"></a>总结自定义异常</h3><p>根据上面的分析可以看出，统一全局异常处理如果不好好处理，很容易出现各种莫名其妙的问题，所以总结一下统一全局异常处理需要注意的点：</p><ul><li>建议一个异常处理对应一个方法，不要定义多个异常用一个方法处理，<strong>特别是自定义的异常类</strong></li><li>注意统一异常处理的异常处理优先级按照<strong>方法定义的顺序进行</strong>，比如如果出现BindException以及Exception，如果抛出的异常是BindException处理方法则优先定义则执行这一步，否则执行最大的<code>Exception</code></li><li>注意注解的异常拦截和方法参数的异常类<strong>保持一致</strong>，否则spring mvc 代理将抛出异常。</li></ul><h1 id="怎样校验list-lt-Object-gt-（重点）"><a href="#怎样校验list-lt-Object-gt-（重点）" class="headerlink" title="怎样校验list&lt;Object&gt;（重点）"></a>怎样校验<code>list&lt;Object&gt;</code>（重点）</h1><p>一般来说sprIng validate使用基本多看看文档或者找找博客都能解决，但是笔者遇到一个很纠结的问题，请看如下的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/createBatch"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">createBatch</span><span class="params">(@RequestBody @Validated List&lt;ApiPaymentMsgDto&gt; list, BindingResult bindResult, HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.build(<span class="number">401</span>, <span class="string">"请求参数为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//.....省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用JSON数据跑接口测试发现<strong>无法对<code>list&lt;Bean&gt;</code>对象进行校验！</strong>，那么这个问题就比较蛋疼了，因为集合的对象校验还是用的非常多的，下面针对这个“坑”讨论一下产生的原因和解决方式。</p><h2 id="为什么无法校验List-lt-Object-gt"><a href="#为什么无法校验List-lt-Object-gt" class="headerlink" title="为什么无法校验List&lt;Object&gt;?"></a>为什么无法校验<code>List&lt;Object&gt;</code>?</h2><p>查阅了很多资料之后，我找到了stackflow一篇文章的解释，文章原文如下：</p><blockquote><p>StackFlow文章地址：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTcyMDc3NjYvc3ByaW5nLW12Yy12YWxpZC1vbi1saXN0LW9mLWJlYW5zLWluLXJlc3Qtc2VydmljZQ==" title="https://stackoverflow.com/questions/17207766/spring-mvc-valid-on-list-of-beans-in-rest-service">https://stackoverflow.com/questions/17207766/spring-mvc-valid-on-list-of-beans-in-rest-service<i class="fa fa-external-link"></i></span></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Section 3.1.3 of the JSR-303 Specification says that:</span><br><span class="line"></span><br><span class="line">In addition to supporting instance validation, validation of graphs of object is also supported. The result of a graph validation is returned as a unified set of constraint violations. Consider the situation where bean X contains a field of type Y. By annotating field Y with the @Valid annotation, the Validator will validate Y (and its properties) when X is validated. The exact type Z of the value contained in the field declared of type Y (subclass, implementation) is determined at runtime. The constraint definitions of Z are used. This ensures proper polymorphic behavior for associations marked @Valid.</span><br><span class="line"></span><br><span class="line">Collection-valued, array-valued and generally Iterable fields and properties may also be decorated with the @Valid annotation. This causes the contents of the iterator to be validated. Any object implementing java.lang.Iterable is supported.</span><br></pre></td></tr></table></figure><p>下面是英文的机翻：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">JSR-303规范的3.1.3节说:</span><br><span class="line">除了支持实例验证外，还支持对象图形的验证。</span><br><span class="line">图形验证的结果作为约束违反的统一集合返回。</span><br><span class="line">考虑bean X包含一个类型为Y的字段的情况，通过使用@Valid注释字段Y，验证器将在验证X时验证Y(及其属性)。</span><br><span class="line">类型Y(子类，实现)声明的字段中包含的值的确切类型Z是在运行时确定的。</span><br><span class="line">使用Z的约束定义。</span><br><span class="line">这确保标记为@Valid的关联具有正确的多态行为。</span><br><span class="line"></span><br><span class="line">集合值、数组值以及通常可迭代的字段和属性也可以用@Valid注释进行装饰。</span><br><span class="line">这将导致验证迭代器的内容。</span><br><span class="line">任何实现java.lang的对象。</span><br><span class="line">支持Iterable。</span><br></pre></td></tr></table></figure><p><code>@Valid</code>是JSR-303批注，JSR-303适用于JavaBeans的验证。A<code>java.util.List</code>不是JavaBean（根据JavaBean的<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YWVlLzUvdHV0b3JpYWwvZG9jL2JuYWlyLmh0bWw=" title="https://docs.oracle.com/javaee/5/tutorial/doc/bnair.html">官方描述<i class="fa fa-external-link"></i></span>），因此不能使用兼容JSR-303的验证器直接对其进行验证。这有两个观察结果支持。</p><h2 id="简单粗暴的方式："><a href="#简单粗暴的方式：" class="headerlink" title="简单粗暴的方式："></a>简单粗暴的方式：</h2><p>最为简单粗暴的方式是既然不能自动校验，那我们换成手动好了，这种方式的优缺点如下：</p><p>优点：</p><ol><li>校验的细节由自己决定，可以附加业务的校验，也可以自由灵活的组合</li><li>可以编写健壮的工具类代码，甚至脱离spring validator（指hibernate validator）</li></ol><p>缺点：</p><ol><li>代码复用性差，这个和编程水平有关，工具类也分写的好和写的差</li><li>因为需要思考细节，容易出逻辑漏洞和其他BUG，所谓做的越多越容易出错就是这个道理</li><li>需要学习更多的api使用，增加学习成本</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 校验集合bean内容是否符合校验规则</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    返回样例：</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">           "status": 401,</span></span><br><span class="line"><span class="comment">           "msg": "第 1 条信息：手机号必须为11位,币种必须是3位大写字母|第 2 条信息：币种必须是3位大写字母,手机号必须为11位",</span></span><br><span class="line"><span class="comment">           "data": null</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> apiObj 接口传输对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ZmtResult <span class="title">validListBean</span><span class="params">(List&lt;ApiPaymentMsgDto&gt; apiObj)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (CollectionUtils.isEmpty(apiObj)) &#123;</span><br><span class="line">           <span class="keyword">return</span> ZmtResult.build(<span class="number">401</span>, <span class="string">"请求参数为空"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; apiObj.size(); i++) &#123;</span><br><span class="line">           ApiPaymentMsgDto apiPaymentMsgDto = apiObj.get(i);</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">null</span> == apiPaymentMsgDto) &#123;</span><br><span class="line">               <span class="keyword">return</span> ZmtResult.build(<span class="number">400</span>, <span class="string">"第 %s 条信息请求参数为空"</span>, i);</span><br><span class="line">           &#125;</span><br><span class="line">           Validator validator = ValidatorUtil.getValidator();</span><br><span class="line">           Set&lt;ConstraintViolation&lt;ApiPaymentMsgDto&gt;&gt; validate = validator.validate(apiPaymentMsgDto);</span><br><span class="line">           <span class="comment">// 如果不存在校验异常，则返回空信息</span></span><br><span class="line">           <span class="keyword">if</span> (org.apache.commons.collections.CollectionUtils.isEmpty(validate)) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           builder.append(String.format(<span class="string">"第 %s 条信息："</span>, i + <span class="number">1</span>));</span><br><span class="line">           <span class="keyword">for</span> (ConstraintViolation&lt;ApiPaymentMsgDto&gt; apiPaymentMsgDtoConstraintViolation : validate) &#123;</span><br><span class="line">               builder.append(apiPaymentMsgDtoConstraintViolation.getMessage());</span><br><span class="line">               builder.append(<span class="string">","</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           builder.deleteCharAt(builder.length() - <span class="number">1</span>);</span><br><span class="line">           builder.append(<span class="string">"|"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 如果存在错误信息，返回错误提示，否则返回空对象证明没有异常</span></span><br><span class="line">       <span class="keyword">if</span> (builder.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           builder.deleteCharAt(builder.length() - <span class="number">1</span>);</span><br><span class="line">           <span class="keyword">return</span> ZmtResult.build(<span class="number">401</span>, builder.toString());</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="一种优雅的设计解决方案："><a href="#一种优雅的设计解决方案：" class="headerlink" title="一种优雅的设计解决方案："></a>一种优雅的设计解决方案：</h2><p>看下stackFlow的一位老哥的解决办法：</p><p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjgxNTA0MDUvdmFsaWRhdGlvbi1vZi1hLWxpc3Qtb2Ytb2JqZWN0cy1pbi1zcHJpbmcvMzYzMTM2MTUjMzYzMTM2MTU=" title="https://stackoverflow.com/questions/28150405/validation-of-a-list-of-objects-in-spring/36313615#36313615">https://stackoverflow.com/questions/28150405/validation-of-a-list-of-objects-in-spring/36313615#36313615<i class="fa fa-external-link"></i></span> （需要翻墙）</p><p>下面是机翻的版本：</p><blockquote><p>我发现了另一种有效的方法。基本的问题是您想要一个列表作为服务的输入有效负载，但是javax验证不会验证列表，只验证JavaBean。诀窍是使用一个自定义的list类，它既是list又是JavaBean:</p></blockquote><p>根据大佬的说明，我尝试实现了一个针对校验使用的list，注意需要提供get/set方法，以及使用泛型，在连接里面进行了模板代码和实现，可以直接拿去复制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为了兼容注解校验使用的一种设计</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&#123;<span class="doctag">@link</span> #&#123;https://stackoverflow.com/questions/28150405/validation-of-a-list-of-objects-in-spring/36313615#36313615&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/3 23:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;E&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidatorList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = <span class="keyword">new</span> ArrayList&lt;E&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidatorList</span><span class="params">(List&lt;E&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个设计由于代码内容过长这里贴链接了：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ludGVydmlldy9ibG9iL21hc3Rlci9zcmMvbWFpbi9qYXZhL2NvbS96eGQvaW50ZXJ2aWV3L3ZhbGlkL3V0aWxzL1ZhbGlkYXRvckxpc3QuamF2YQ==" title="https://gitee.com/lazyTimes/interview/blob/master/src/main/java/com/zxd/interview/valid/utils/ValidatorList.java">https://gitee.com/lazyTimes/interview/blob/master/src/main/java/com/zxd/interview/valid/utils/ValidatorList.java<i class="fa fa-external-link"></i></span></p><p>先不管其他的问题，先验证一下是否可以正常使用，而实际的体验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试stackflow 的一种优雅设计，可以实现对应的list 集合bean对象校验</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> products      校验对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bindingResult 异常绑定器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParamException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test/testvalidList"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">testvalidList</span><span class="params">(@RequestBody @Validated ValidatorList&lt;Product&gt; products, BindingResult bindingResult)</span> <span class="keyword">throws</span> ParamException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">        List&lt;FieldError&gt; fieldErrors = bindingResult.getFieldErrors();</span><br><span class="line">        fieldErrors.forEach(item -&gt; &#123;</span><br><span class="line">            String defaultMessage = item.getDefaultMessage();</span><br><span class="line">            System.err.println(defaultMessage);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.err.println(products);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是个人经过了研究的结果，不得不感叹思路真心很不错，目前个人使用正常，如果有问题欢迎下方留言讨论</p><h1 id="其他扩展"><a href="#其他扩展" class="headerlink" title="其他扩展"></a>其他扩展</h1><h2 id="JSR-303："><a href="#JSR-303：" class="headerlink" title="JSR - 303："></a>JSR - 303：</h2><p>Hibernate Validator 是 Bean Validation 的参考实现，说白了<code>Hibernate Validator</code>就是<code>JSR-303</code>。</p><p>下载 JSR 303 – Bean Validation 规范 <span class="exturl" data-url="aHR0cDovL2pjcC5vcmcvZW4vanNyL2RldGFpbD9pZD0zMDM=" title="http://jcp.org/en/jsr/detail?id=303">http://jcp.org/en/jsr/detail?id=303<i class="fa fa-external-link"></i></span></p><h2 id="Hibernate-validator："><a href="#Hibernate-validator：" class="headerlink" title="Hibernate - validator："></a>Hibernate - validator：</h2><p>如果想要深入了解源代码实现，有必要研究一下<code>Hibernate - validator</code>的文档，从官方文档学习是一个推荐的方法：</p><p>旧版本的文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmpib3NzLm9yZy9oaWJlcm5hdGUvdmFsaWRhdG9yLzQuMi9yZWZlcmVuY2UvZW4tVVMvaHRtbF9zaW5nbGUv" title="https://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html_single/">https://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html_single/<i class="fa fa-external-link"></i></span></p><p>较新版本的文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmpib3NzLm9yZy9oaWJlcm5hdGUvc3RhYmxlL3ZhbGlkYXRvci9yZWZlcmVuY2UvZW4tVVMvaHRtbF9zaW5nbGUvP3Y9Ny4wI192YWxpZGF0aW5nX2NvbnN0cmFpbnRz" title="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=7.0#_validating_constraints">https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/?v=7.0#_validating_constraints<i class="fa fa-external-link"></i></span></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>在学习过程中尝试看源代码，但是后来发现个人源代码学习经验不足，胡乱的看代码是很那坚持的，看了几个小时之后突然醒悟了，还是要从官方给的案例和文档的中，从易到难，而不是一上来就直接看源码，既缺少了大局，而且收效也低。</p><p>另外有条件尽可能上<code>stackflow</code>，里面大神真的多，可以学到很多很棒棒的设计。</p><p>文章字数比较多，感谢观看，如果觉得本文差强人意，可以查看下面的内容，里面的最后两篇文章有关于一部分原理对接讲解可以看一看，个人了解不够深入就不写出来误人子弟了。</p><h1 id="巨人的肩膀："><a href="#巨人的肩膀：" class="headerlink" title="巨人的肩膀："></a>巨人的肩膀：</h1><p>Validation in Spring Boot：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFlbGR1bmcuY29tL3NwcmluZy1ib290LWJlYW4tdmFsaWRhdGlvbg==" title="https://www.baeldung.com/spring-boot-bean-validation">https://www.baeldung.com/spring-boot-bean-validation<i class="fa fa-external-link"></i></span></p><p>Spring Validation最佳实践及其实现原理，参数校验没那么简单！：<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMzQ3MTc0Mg==" title="https://segmentfault.com/a/1190000023471742">https://segmentfault.com/a/1190000023471742<i class="fa fa-external-link"></i></span></p><p>spring官方那个案例：<span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vZ3VpZGVzL2dzL3ZhbGlkYXRpbmctZm9ybS1pbnB1dC8=" title="https://spring.io/guides/gs/validating-form-input/">https://spring.io/guides/gs/validating-form-input/<i class="fa fa-external-link"></i></span></p><p>Java Bean Validation（参数校验） 最佳实践： <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc29mdGlkZWEvcC85NzEyNTcxLmh0bWw=" title="https://www.cnblogs.com/softidea/p/9712571.html">https://www.cnblogs.com/softidea/p/9712571.html<i class="fa fa-external-link"></i></span></p><p>这么写参数校验(validator)就不会被劝退了~：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzOTAyODExMjc1Mjc4I2hlYWRpbmctMA==" title="https://juejin.cn/post/6844903902811275278#heading-0">https://juejin.cn/post/6844903902811275278#heading-0<i class="fa fa-external-link"></i></span></p><p>springMVC Validation 参数检验工具：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85OTljNmMxMGE1YzY=" title="https://www.jianshu.com/p/999c6c10a5c6">https://www.jianshu.com/p/999c6c10a5c6<i class="fa fa-external-link"></i></span></p><p>Bean Validation: Integrating JSR-303 with Spring：<span class="exturl" data-url="aHR0cDovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMjA1MDgwMzA0NTkvaHR0cDovL2Jsb2cub3JhbmdlMTEubmwvMjAwOS8wOC8wNC9iZWFuLXZhbGlkYXRpb24taW50ZWdyYXRpbmctanNyLTMwMy13aXRoLXNwcmluZy8=" title="http://web.archive.org/web/20120508030459/http://blog.orange11.nl/2009/08/04/bean-validation-integrating-jsr-303-with-spring/">http://web.archive.org/web/20120508030459/http://blog.orange11.nl/2009/08/04/bean-validation-integrating-jsr-303-with-spring/<i class="fa fa-external-link"></i></span></p><p>Validation and Exception Handling with Spring：<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL3NwcmFuZy92YWxpZGF0aW9uLWFuZC1leGNlcHRpb24taGFuZGxpbmctd2l0aC1zcHJpbmctYmE0NGIzZWUwNzIz" title="https://medium.com/sprang/validation-and-exception-handling-with-spring-ba44b3ee0723">https://medium.com/sprang/validation-and-exception-handling-with-spring-ba44b3ee0723<i class="fa fa-external-link"></i></span></p><p>@ControllerAdvice + @ExceptionHandler 全局处理 Controller 层异常：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpbmdpbmJsdWUvYXJ0aWNsZS9kZXRhaWxzLzcwMTg2NTg2" title="https://blog.csdn.net/kinginblue/article/details/70186586">https://blog.csdn.net/kinginblue/article/details/70186586<i class="fa fa-external-link"></i></span></p><p><strong>【Spring源码分析】40-Spring Validation参数校验的使用与原理</strong>：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoZW5jaGFvaGFvMTIzMjEvYXJ0aWNsZS9kZXRhaWxzLzEwMDE2Mzk5MQ==" title="https://blog.csdn.net/shenchaohao12321/article/details/100163991">https://blog.csdn.net/shenchaohao12321/article/details/100163991<i class="fa fa-external-link"></i></span></p><p><strong>SpringBoot + Validator 参数校验配置 - - - [深度]</strong>：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yNDMyZDBmNTFjMGU=" title="https://www.jianshu.com/p/2432d0f51c0e">https://www.jianshu.com/p/2432d0f51c0e<i class="fa fa-external-link"></i></span></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      对象校验是一个十分恼火的问题，但是好在有脚手架可以给我们开箱即用
    
    </summary>
    
    
      <category term="java" scheme="https://whitestore.top/categories/java/"/>
    
    
      <category term="spring" scheme="https://whitestore.top/tags/spring/"/>
    
  </entry>
  
</feed>
