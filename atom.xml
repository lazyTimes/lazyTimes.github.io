<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LazyTimes的博客</title>
  
  <subtitle>生死有命，富贵在天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lazytime.site/"/>
  <updated>2020-10-06T16:23:21.928Z</updated>
  <id>http://lazytime.site/</id>
  
  <author>
    <name>阿东</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机程序的构造和解释-笔记(一)</title>
    <link href="http://lazytime.site/2020/10/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E8%A7%A3%E9%87%8A-%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://lazytime.site/2020/10/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E8%A7%A3%E9%87%8A-%E7%AC%94%E8%AE%B0-%E4%B8%80/</id>
    <published>2020-10-06T16:20:33.000Z</published>
    <updated>2020-10-06T16:23:21.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么要学计算机程序的构造与解释"><a href="#为什么要学计算机程序的构造与解释" class="headerlink" title="为什么要学计算机程序的构造与解释"></a>为什么要学计算机程序的构造与解释</h2><p><a href="http://blog.zhaojie.me/2009/07/recommended-reading-2-sicp.html" target="_blank" rel="noopener">http://blog.zhaojie.me/2009/07/recommended-reading-2-sicp.html</a> 很老的一个帖子上的推荐</p><ul><li>了解任何东西，思想最重要</li><li>抽象的思维，如何从简单到复杂</li><li>用不同的角度去考虑用咒语来实现功能</li><li>学习任何语言思想最重要的是思想本身，而scheme由于语言天生的自由性，可以极大的发挥程序员的思想空间</li><li>学习思考问题的方式，以及解题思路</li></ul><p><a href="https://www.jianshu.com/p/0e6365f4bb03?utm_campaign=shakespeare" target="_blank" rel="noopener">https://www.jianshu.com/p/0e6365f4bb03?utm_campaign=shakespeare</a> 简书上面做的一个回答</p><a id="more"></a><h2 id="一些感谢："><a href="#一些感谢：" class="headerlink" title="一些感谢："></a>一些感谢：</h2><ol><li>文科生学这个表表示虽然痛苦，但是会努力一步一步的学习</li><li>写出来是监督自己产出，这门语言非常深奥和困难，借助视频和书籍慢慢啃</li><li>一定要深入的理解黑盒抽象的思维，解题的思路大于题目本身的意义</li><li>持续更新，用文章输出来勉励和督促自己。</li></ol><h1 id="第一节课-上课笔记"><a href="#第一节课-上课笔记" class="headerlink" title="第一节课 上课笔记"></a>第一节课 上课笔记</h1><h2 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h2><ol><li>y^2 = x &amp;&amp; y&gt;= 0</li><li>亚历山大的连续平方根</li><li>知道规则不等于可以运用规则</li><li>复杂度控制<ol><li>黑盒抽象</li><li>猜测-&gt;验证结果</li></ol></li><li>寻找函数的不动点<ol><li>输入</li><li>输出</li></ol></li><li>线性组合的基本方法</li><li>构建大型程序<ol><li>流</li><li>OOP</li></ol></li></ol><h2 id="黑盒抽象"><a href="#黑盒抽象" class="headerlink" title="黑盒抽象"></a>黑盒抽象</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926145204.png?ynotemdtimestamp=1601964191688" alt="img"></p><h2 id="元语言抽象"><a href="#元语言抽象" class="headerlink" title="元语言抽象"></a>元语言抽象</h2><ol><li>数据抽象：如何组合程序的基本元素，构造更复杂的结构</li><li>过程抽象：如何将复杂的结构抽象出高层组件，提供更高维度的组合型</li><li>模块化，通过高抽象层次的组织方法，提高系统的模块性</li></ol><h2 id="约定接口"><a href="#约定接口" class="headerlink" title="约定接口"></a>约定接口</h2><ol><li>对应计算机的输入与输出</li><li>使用黑盒不需要知道内部结构，只需要知道约定俗称的接口的功能</li></ol><h2 id="在进行正式SCIP学习之前，需要安装环境"><a href="#在进行正式SCIP学习之前，需要安装环境" class="headerlink" title="在进行正式SCIP学习之前，需要安装环境"></a>在进行正式SCIP学习之前，需要安装环境</h2><h3 id="1-下载-DrRacket"><a href="#1-下载-DrRacket" class="headerlink" title="1. 下载 DrRacket"></a>1. 下载 DrRacket</h3><p>直接访问：<a href="https://racket-lang.org/" target="_blank" rel="noopener">https://racket-lang.org/</a></p><p>找到自己对应的内容下载页面</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926152047.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>下载完安装包之后，就可以进行安装操作了</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154022.png?ynotemdtimestamp=1601964191688" alt="img"></p><p>注意不要安装在C盘，一般习惯是直接切换一个盘符，直接安装到D盘即可</p><p>安装好之后，你在桌面上可能找不到你要的东西，所以请查看一下你的开始菜单（MAC不了解，这里只能说明windows的地址，抱歉）</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154221.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="3-DrRacket"><a href="#3-DrRacket" class="headerlink" title="3. DrRacket"></a>3. DrRacket</h3><p>这个界面怎么说呢，如果你用过C语言的编辑器（没错就是老掉牙的那个），其实感觉还行，但是如果经常使用中文的菜单可能不习惯</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154557.png?ynotemdtimestamp=1601964191688" alt="img"></p><p>没关系，在HELP里面，可以切换：</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154650.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="4-安装-SICP-Package"><a href="#4-安装-SICP-Package" class="headerlink" title="4. 安装 SICP Package"></a>4. 安装 SICP Package</h3><ol><li>选择<code>File</code> -&gt; <code>Package Manger</code></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154758.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>在标红的地方，输入<code>sicp</code></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200929214408.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>下载比较建议挂个梯子下载，需要访问github进行安装包的下载</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155047.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>安装成功之后，大概类似这种界面</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155154.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="5-测试-SICP-package-安装成功与否"><a href="#5-测试-SICP-package-安装成功与否" class="headerlink" title="5. 测试 SICP package 安装成功与否"></a>5. 测试 SICP package 安装成功与否</h3><ol><li>首先在顶部输入<code>#lang sicp</code>然后<code>run</code>一下，如果看到下面的语言切换了，说明成功了。</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155408.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>接着输入如下的方法：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#lang sicp</span><br><span class="line">(define (increase x) (+ x 1))</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155727.png?ynotemdtimestamp=1601964191688" alt="img"></p><ol><li>文件夹管理的包：<code>files-viewer</code>，类似插件，安装方式如下：</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926160110.png?ynotemdtimestamp=1601964191688" alt="img"></p><h2 id="Sicp简单了解"><a href="#Sicp简单了解" class="headerlink" title="Sicp简单了解"></a>Sicp简单了解</h2><h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(+ 3  8)</span><br><span class="line">(* 3 (+ 7 19.5))</span><br><span class="line">(+ (+ 5 4) (* 6 (- 9 4)))</span><br></pre></td></tr></table></figure><ol><li>3 + 8 的和</li><li>3 * (7 + 19.5)</li></ol><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>组织函数：</p><p>最简单的组织一个定义方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define (square x) (* x x))</span><br></pre></td></tr></table></figure><p>使用lambda表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define square (lambda (x) (* x x)) )</span><br></pre></td></tr></table></figure><p>定义的组织函数本身也可以作为内容的一部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (sq x) (* x x))</span><br><span class="line">  (define (sum x y) (* (sq x) (sq y)))</span><br></pre></td></tr></table></figure><p>这样设计的好处：</p><ol><li>可以让程序员灵活的搭配组织简单的程序形成复杂的程序</li><li>没有语言的约束，只有基本的语法规则</li></ol><p>坏处：</p><ol><li>你无法知道哪些是定义，哪些是引用</li><li>程序的可读性较差</li></ol><h4 id="条件语句："><a href="#条件语句：" class="headerlink" title="条件语句："></a>条件语句：</h4><h5 id="cond：可以理解为switch-p1-p2-p3-p4-p5-p6"><a href="#cond：可以理解为switch-p1-p2-p3-p4-p5-p6" class="headerlink" title="cond：可以理解为switch ( (p1 p2) (p3 p4) (p5 p6) )"></a>cond：可以理解为switch ( (p1 p2) (p3 p4) (p5 p6) )</h5><p>如果没有唯一的一个cond 的值，则cond 会没有定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cond (&lt;p1&gt; &lt;e1&gt;)</span><br><span class="line"></span><br><span class="line">    (&lt;p2&gt; &lt;e2&gt;)</span><br><span class="line"></span><br><span class="line">             .......</span><br><span class="line"></span><br><span class="line">            (&lt;pn&gt; &lt;en&gt;))</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">(cond (&lt;p1&gt; &lt;e1&gt;)</span><br><span class="line"></span><br><span class="line">    (&lt;p2&gt; &lt;e2&gt;)</span><br><span class="line"></span><br><span class="line">             .......</span><br><span class="line"></span><br><span class="line">            (else &lt;en&gt;))</span><br></pre></td></tr></table></figure><p>应用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(define (sq3 y)</span><br><span class="line">  ((cond ((&gt; y 0) y)</span><br><span class="line">  ((&#x3D; y 0) 0)</span><br><span class="line">  ((&lt; y 0) (- y)))))</span><br></pre></td></tr></table></figure><p>另一种写法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(define (sq5 k)</span><br><span class="line">  (cond ((&lt; k 0) (- k))</span><br><span class="line">  (else k)))</span><br></pre></td></tr></table></figure><h5 id="if：是一种语法糖"><a href="#if：是一种语法糖" class="headerlink" title="if：是一种语法糖:"></a>if：是一种语法糖:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(define (zz x)</span><br><span class="line">  (if (&gt; x 0)</span><br><span class="line">      (-1)</span><br><span class="line">      x))</span><br></pre></td></tr></table></figure><ol><li>把自己的作为结果，带入到函数当中求值返回</li></ol><h5 id="and-…"><a href="#and-…" class="headerlink" title="(and  ….. )"></a>(and <e1> ….. <e2>)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (test t) </span><br><span class="line">  (and  (&gt; t 5) (&lt; t 1)))</span><br></pre></td></tr></table></figure><h5 id="or-…"><a href="#or-…" class="headerlink" title="(or ….. )"></a>(or<e1> ….. <e2>)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (test t) </span><br><span class="line">  (or (&gt; t 5) (&lt; t 1)))</span><br></pre></td></tr></table></figure><h5 id="not-…"><a href="#not-…" class="headerlink" title="(not ….. )"></a>(not<e1> ….. <e2>)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (test t) </span><br><span class="line">  (not (&gt; t 5) (&lt; t 1)))</span><br></pre></td></tr></table></figure><h3 id="什么是正则序求值，什么是应用序求值"><a href="#什么是正则序求值，什么是应用序求值" class="headerlink" title="什么是正则序求值，什么是应用序求值"></a>什么是正则序求值，什么是应用序求值</h3><p>结论：Lisp使用的是应用序求值</p><p>正则序求值：使用过程组合，层层的代换展开运算，最后完全展开运算完成的这个过程就叫做正则序求值（可以理解为懒加载，在只有实际使用到参数的时候，才会带入参数运算）</p><p>应用序求值：应用序求值，先对每一个形式参数带入实际的值进行实际的运算操作，直到返回最终结果</p><p>为什么Lisp使用应用序求值？</p><ol><li>减少没有必要的计算，比如说正则序列求值，需要将一步完成的计算继续拆分为更多步骤</li><li>正则的结果不一定完全正确（特殊案例）</li></ol><h3 id="课后练习："><a href="#课后练习：" class="headerlink" title="课后练习："></a>课后练习：</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926164058.png?ynotemdtimestamp=1601964191688" alt="img"></p><h3 id="非常好的一个问题："><a href="#非常好的一个问题：" class="headerlink" title="非常好的一个问题："></a>非常好的一个问题：</h3><p>在定义的时候，如下面所示的括号有无的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(define (d) (* 5 5))</span><br><span class="line">(define d (* 5 5)) </span><br><span class="line">&gt; 输入 a &#x3D; 5</span><br><span class="line">结果 25</span><br><span class="line">&gt; 输入 d &#x3D; 5</span><br><span class="line">结果 25</span><br><span class="line">两者内部的细节区别：</span><br><span class="line">(define (d) (* 5 5)) -&gt; 运行的是一个复合公式</span><br><span class="line">(define d (* 5 5))  -&gt; 函数的结果</span><br></pre></td></tr></table></figure><h3 id="课后练习-1-2"><a href="#课后练习-1-2" class="headerlink" title="课后练习 1.2"></a>课后练习 1.2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#x2F; (+ 5 4 (-2 (-3 (+ 6 (&#x2F; 4 5))))) (* 3 (- 6 2) (- 2 7)))</span><br></pre></td></tr></table></figure><p>解决思路：其实挺简单的，画树就行</p><h3 id="课后练习-1-3"><a href="#课后练习-1-3" class="headerlink" title="课后练习 1.3"></a>课后练习 1.3</h3><p>题目：求较大两数的两树之和？</p><p>分析：</p><p>使用双层if判断</p><p>拆分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(define (maxVal3 x y z)</span><br><span class="line">  (if (&gt; x y)</span><br><span class="line">      (if (&gt; y z) (* x y)</span><br><span class="line">          (* x z))</span><br><span class="line">      (* z y)))</span><br></pre></td></tr></table></figure><h3 id="课后练习-1-4"><a href="#课后练习-1-4" class="headerlink" title="课后练习 1.4"></a>课后练习 1.4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define (a-plus-abs-b a b) ((if (&gt; b 0) + -) a b))</span><br></pre></td></tr></table></figure><ol><li>if (b &gt; 0)<ol><li>+ a b</li></ol></li><li>if(b &lt; 0)<ol><li>- a b</li></ol></li></ol><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><blockquote><p><strong>可知，由于(define (p) (p))， 如果出现了对（p）求值的情况， 就会陷入循环 scheme中的解释器本身就是应用序的，函数的求值会先对每一个参数进行求值， 　　　 然后把参数的值代入函数，若对(test 0 (p))使用应用序,那么（p）就会被求值， 　　 进入死循环中。而正则序是“完全展开而后规约”，在展开之后，由if条件判断，然后 　　 对0求值，由于（p）不会进行求值，最终函数可以正确返回0值。 （Guile中测试此程序确会进入死循环。）</strong></p><p>PS：这一段网上摘录的答案还不是很了解，还没有进行实际的验证</p></blockquote>]]></content>
    
    <summary type="html">
    
      计算机程序的构造和解释，
    
    </summary>
    
    
      <category term="-Scheme" scheme="http://lazytime.site/categories/Scheme/"/>
    
    
      <category term="书籍" scheme="http://lazytime.site/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>模仿游戏-观后感</title>
    <link href="http://lazytime.site/2020/10/07/%E6%A8%A1%E4%BB%BF%E6%B8%B8%E6%88%8F-%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>http://lazytime.site/2020/10/07/%E6%A8%A1%E4%BB%BF%E6%B8%B8%E6%88%8F-%E8%A7%82%E5%90%8E%E6%84%9F/</id>
    <published>2020-10-06T16:11:46.000Z</published>
    <updated>2020-10-06T16:15:06.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模仿游戏-观后感"><a href="#模仿游戏-观后感" class="headerlink" title="模仿游戏-观后感"></a>模仿游戏-观后感</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    在某次看技术文章的时候，从评论里面看到了这部电影，去搜了一下，发现可能真的是一部比较冷门的电影，看完之后，顿时感觉发现了宝藏，更进一步的讲，对于每一位从事技术行业，或者从事结果性工作的职业工作者，或者涉及单纯的普通人，都推荐好好品味这一部电影。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>二战期间，盟军苦于德国的秘密系统”英格玛“无法破译，政府召集了一批民间数学家、逻辑学家进行秘密破解工作，图灵（本尼迪克特·康伯巴奇 Benedict Cumberbatch 饰）就是其中之一。计划刚开始图灵遭到了以休（马修·古迪 Matthew Goode）为首的组员和领导的排斥，幸好军情处部长孟席斯（马克·斯特朗 Mark Strong 饰）帮助他立项研究破译密码的机器，而图灵则变成了负责人，招收了新的成员琼（凯拉·奈特莉 Keira Knightley）开始了艰难的工作。琼很快就迷上了图灵，由于她的帮助所有组员空前的团结，并于两年后成功破解德军的密码。图灵一度与琼订婚，但实际上他隐瞒了一个秘密，因为这个秘密他也遭受了非人的待遇……<br>　　本片改编自安德鲁·霍奇斯编著的《艾伦·图灵传》，上映后获得了第87届奥斯卡最佳改编剧本奖。 <a href="https://movie.douban.com/help/movie#t0-qs" target="_blank" rel="noopener">©豆瓣</a></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><ol><li>不论多么伟大的人物，人们永远看见他们想看见的：荣耀、辉煌，但是即使是绝世天才，也永远看不到他们背后的努力和奋斗。</li><li>天才和疯子可能真的是有一线之差。</li><li>一个成功的背后可能只是猜测，甚至只是源于相信的力量。</li><li>固执的坚守自己的想法可能比想象中要难上太多。</li><li>在某些情况下，不认为自己孤独的人，可能才是世界上最孤独的人</li><li>人和机器的区别到底是什么，正如模仿游戏的标题，人可以做出选择，但是机器却不可以。</li></ol><h2 id="推荐度"><a href="#推荐度" class="headerlink" title="推荐度"></a>推荐度</h2><p>4 星</p><h2 id="说说收获"><a href="#说说收获" class="headerlink" title="说说收获"></a>说说收获</h2><ol><li>虽然我是恐同的人，但是看了电影之后，我有了些许的改观</li><li>人们往往只看中结果，却无人会去关注其中的过程和艰辛</li><li>非凡的人终究会被世人铭记，只是时间的早晚而已</li><li>要造就非凡的事业，需要非凡的努力，当然，在此之前，需要一颗非凡的头脑</li><li>拥有一个真正理解并且支持你的朋友，可能是世界上除开父母之外，最值得珍惜的财富。</li><li>或许每一个技术人员，都是孤独并且可悲的人，但是从来不自知。</li></ol><h2 id="精句"><a href="#精句" class="headerlink" title="精句"></a>精句</h2><ol><li>人类惧怕和自己不一样的东西，所以制定了这样那样的规定。</li><li>有时候，正是那些人们认为的无用之人，成就了无人所成之事。</li><li>喜欢暴力吗？因为它让人感觉不错。人们发现暴力带来深深的满足感，但除去这些满足感，暴力行为会变得非常空洞。</li><li>你需要我大于我需要你。</li><li>撒谎最煎熬的时候就是明知道别人在等你撒谎的时候。如果别人在等着你撒谎。你不能只是给他们制造一个谎言。</li><li>不懂你的人为你的成就喝彩，懂你的人为你的付出心疼。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>希望世界上的所有程序员，都好好的过好这灿烂的人生，除开编程之外，多出去看看瞧一瞧，挣再多的钱，也抵不过进一次医院，祝愿每一位工作者能去寻找并且实现自己的美好梦想。</p>]]></content>
    
    <summary type="html">
    
      或许每一个技术人员，都是孤独并且可悲的人，但是从来不自知
    
    </summary>
    
    
      <category term="程序人生" scheme="http://lazytime.site/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="电影" scheme="http://lazytime.site/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>JDK 1.8 LAMBADA表达式</title>
    <link href="http://lazytime.site/2020/09/25/JDK-1-8-LAMBADA%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://lazytime.site/2020/09/25/JDK-1-8-LAMBADA%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-09-25T15:57:19.000Z</published>
    <updated>2020-09-25T15:59:15.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lambada-表达式资料参考"><a href="#Lambada-表达式资料参考" class="headerlink" title="Lambada 表达式资料参考"></a>Lambada 表达式资料参考</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>现在的工作当中对于jdk1.8的lambada表达式使用越来越频繁，但是对于内部的一些细节却不是特别的清楚</p><p>这里借鉴了几篇博客，对比了之后对于博客到推荐进行了排序，同时也整理了这几篇博客提到的个人觉得比较重要到部分进行了验证</p><a id="more"></a><h2 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h2><p><strong><a href="https://objcoding.com/2019/03/04/lambda/" target="_blank" rel="noopener">https://objcoding.com/2019/03/04/lambda/</a></strong> 一篇博客，介绍的比较到位，虽然文章很长但是通篇看完完全没有想点右上角的冲动</p><h2 id="第二篇"><a href="#第二篇" class="headerlink" title="第二篇"></a>第二篇</h2><p><a href="https://juejin.im/post/5abc9ccc6fb9a028d6643eea" target="_blank" rel="noopener">https://juejin.im/post/5abc9ccc6fb9a028d6643eea</a></p><p>关于lambada的十个案例</p><h3 id="重点部分："><a href="#重点部分：" class="headerlink" title="重点部分："></a>重点部分：</h3><h4 id="Q：如何在lambda表达式中加入谓词？"><a href="#Q：如何在lambda表达式中加入谓词？" class="headerlink" title="Q：如何在lambda表达式中加入谓词？"></a>Q：如何在lambda表达式中加入谓词？</h4><h3 id="A：解答"><a href="#A：解答" class="headerlink" title="A：解答"></a>A：解答</h3><p>首先代码如下，按照个人理解，其实本质就是把用户的操作“拼接”，包括筛选，合并等操作，依赖<code>java.util.function.Predicate</code>此接口实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 甚至可以用and()、or()逻辑函数来合并Predicate，</span><br><span class="line">&#x2F;&#x2F; 例如要找到所有以J开始，长度为四个字母的名字，你可以合并两个Predicate并传入</span><br><span class="line">Predicate&lt;String&gt; startsWithJ &#x3D; (n) -&gt; n.startsWith(&quot;J&quot;);</span><br><span class="line">Predicate&lt;String&gt; fourLetterLong &#x3D; (n) -&gt; n.length() &#x3D;&#x3D; 4;</span><br><span class="line">names.stream()</span><br><span class="line">    .filter(startsWithJ.and(fourLetterLong))</span><br><span class="line">    .forEach((n) -&gt; System.out.print(&quot;nName, which starts with &#39;J&#39; and four letter long is : &quot; + n));</span><br></pre></td></tr></table></figure><h2 id="第三篇"><a href="#第三篇" class="headerlink" title="第三篇"></a>第三篇</h2><p><a href="https://segmentfault.com/a/1190000009186509" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009186509</a></p><p>关于lambada的一个详解</p><blockquote><p>版权声明：本文由<em>吴仙杰</em>创作整理，转载请注明出处：<a href="https://segmentfault.com/a/1190000009186509" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009186509</a></p></blockquote><h2 id="第四篇"><a href="#第四篇" class="headerlink" title="第四篇"></a>第四篇</h2><p><a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html" target="_blank" rel="noopener">https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html</a></p><p>Oracale官方案例</p><p><a href="https://blog.csdn.net/renfufei/article/details/24600507" target="_blank" rel="noopener">https://blog.csdn.net/renfufei/article/details/24600507</a></p><p>比较久远到一个文章，更多是批判的角度看待lambada</p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ol><li>介绍了stream 的基本概念<ol><li>简写的依据 - 函数接口 和类型推断机制</li></ol></li><li>函数式编程和匿名内部类的区别<ol><li>使用上区别</li><li>JVM上的本质区别</li></ol></li><li>JDK8 对于容器到扩展方法，其中部分是为了配合函数式编程而出现的<ol><li>Collections</li><li>Map</li></ol></li><li>Stream API 介绍stream 的常用方法以及基本特性<ol><li><code>sort()</code></li><li></li></ol></li><li>stream内部实现的简单了解<ol><li>用户的操作如何记录？</li><li>操作如何叠加？</li><li>叠加之后的操作如何执行？</li><li>执行后的结果（如果有）在哪里？</li></ol></li></ol><h2 id="重点部分"><a href="#重点部分" class="headerlink" title="重点部分"></a>重点部分</h2><h3 id="Q：匿名内部类和lambada表达式的关键区别"><a href="#Q：匿名内部类和lambada表达式的关键区别" class="headerlink" title="Q：匿名内部类和lambada表达式的关键区别"></a>Q：匿名内部类和lambada表达式的关键区别</h3><h3 id="A-回答"><a href="#A-回答" class="headerlink" title="A 回答"></a>A 回答</h3><h4 id="this的指向对象"><a href="#this的指向对象" class="headerlink" title="this的指向对象"></a><strong>this</strong>的指向对象</h4><ul><li>匿名内部类：<code>this</code> 指向的是匿名内部类的所属对象</li><li>lambada：<code>this</code> 指向当前运行的类，也就是当前运行的对象</li></ul><h4 id="jvm层面"><a href="#jvm层面" class="headerlink" title="jvm层面"></a>jvm层面</h4><ul><li>匿名内部类：会生成一个 <code>$1</code>到匿名内部类的对象，使用<code>new</code>指令生成对象并且执行</li><li>lambada：会生成一个私有方法，使用<code>invokedynamic</code>指令调用</li></ul><p>匿名内部类的编译过程</p><p>为了更好到理解，自己做了一个实验</p><ol><li>创建一个基本的匿名内部类到方法</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200505103819.png?ynotemdtimestamp=1601045594695" alt="img"></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 匿名内部类和lambada的区别</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void test1() throws InterruptedException &#123;</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                String name &#x3D; Thread.currentThread().getName();</span><br><span class="line">                System.err.println(name + &quot; is run as a thread &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>查看classes ，可以看到编译后的class 文件如下，看到明显多出来一个<code>LambadaTest1$1.class</code> 这事啥东西？</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200505103923.png?ynotemdtimestamp=1601045594695" alt="img"></p><ol><li>打开<code>cmd</code>使用<code>cd</code>命令移动到改目录下面</li></ol><blockquote><p>小技巧1：</p><p>编译后到classes 如果想要直接查看class 文件的反编译到内容，可以直接把class 文件拖拽到 idea 里面进行打开，就可以看到class 到反编译内容<del>~</del></p></blockquote><ol><li>反编译的内容如下，可以看到匿名内部类的编译后的内容经过解释之后，<strong>实际上是创建了一个匿名内部类的对象</strong></li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200505104143.png?ynotemdtimestamp=1601045594695" alt="img"></p><ol><li>在第一步的基础上，我们除了打印线程的名称，还可以打印<code>this</code> 看一下匿名内部类的this 是啥东西，我打印之后得到到匿名内部类的 this 如下: <code>com.jdk.lambada.LambadaTest1$1@2fd014c6</code></li></ol><blockquote><p>小技巧2：</p><p>如何使用javap 查看java的汇编指令呢？</p><p>以上面到案例为例：</p><ol><li>打开<code>cmd</code>，进入对应的class目录，我们可以执行<code>javap &lt;options&gt; &lt;classes&gt;</code>的格式进行翻译操作</li><li>执行<code>javap -c -l -p xxx</code>，得到结果:</li></ol><p>选项的含义？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-help  --help  -?        输出此用法消息</span><br><span class="line">-version                 版本信息，其实是当前javap所在jdk的版本信息，不是class在哪个jdk下生成的。</span><br><span class="line">-v  -verbose             输出附加信息（包括行号、本地变量表，反汇编等详细信息）</span><br><span class="line">-l                         输出行号和本地变量表</span><br><span class="line">-public                    仅显示公共类和成员</span><br><span class="line">-protected               显示受保护的&#x2F;公共类和成员</span><br><span class="line">-package                 显示程序包&#x2F;受保护的&#x2F;公共类 和成员 (默认)</span><br><span class="line">-p  -private             显示所有类和成员</span><br><span class="line">-c                       对代码进行反汇编</span><br><span class="line">-s                       输出内部类型签名</span><br><span class="line">-sysinfo                 显示正在处理的类的系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">-constants               显示静态最终常量</span><br><span class="line">-classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">-bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure></blockquote><ol><li>为了更进一步了解底层的jvm指令执行，使用<code>javap -c -l -p xxx</code>反编译结果如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Compiled from &quot;LambadaTest1.java&quot;</span><br><span class="line">public class com.jdk.lambada.LambadaTest1 &#123;</span><br><span class="line">  public com.jdk.lambada.LambadaTest1();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 11: 0</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       5     0  this   Lcom&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1;</span><br><span class="line"></span><br><span class="line">  public void test1() throws java.lang.InterruptedException;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  &#x2F;&#x2F; class java&#x2F;lang&#x2F;Thread</span><br><span class="line">       3: dup</span><br><span class="line">       4: new           #3                  &#x2F;&#x2F; class com&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1$1</span><br><span class="line">       7: dup</span><br><span class="line">       8: aload_0</span><br><span class="line">       9: invokespecial #4                  &#x2F;&#x2F; Method com&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1$1.&quot;&lt;init&gt;&quot;:(Lcom&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1;)V</span><br><span class="line">      12: invokespecial #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.&quot;&lt;init&gt;&quot;:(Ljava&#x2F;lang&#x2F;Runnable;)V</span><br><span class="line">      15: invokevirtual #6                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.start:()V</span><br><span class="line">      18: ldc2_w        #7                  &#x2F;&#x2F; long 2000l</span><br><span class="line">      21: invokestatic  #9                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.sleep:(J)V</span><br><span class="line">      24: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 19: 0</span><br><span class="line">      line 24: 15</span><br><span class="line">      line 25: 18</span><br><span class="line">      line 27: 24</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0      25     0  this   Lcom&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，匿名内部类使用了 <code>new</code>到指令来实现匿名对象的生成，调用<code>invokespecial</code>执行内部的<code>run</code>方法</p><p>接下来我们看下Lambada简写上面的匿名内部类代码</p><p>lambada表达式编译过程</p><ol><li>和上面的流程类似，这里直接略过一些不必要的点，代码如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @program: lambada</span><br><span class="line"> * @description: 测试jdk1.8</span><br><span class="line"> * @author: zhaoxudong</span><br><span class="line"> * @create: 2020-05-05 11:42</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            System.err.println(&quot; test&quot; + Thread.currentThread().getName() + &quot; is run as a thread &quot; );</span><br><span class="line">        &#125;).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(5L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>同样的，我们先把class文件放到<code>idea</code>下面查看反编译之后到代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="line">&#x2F;&#x2F; (powered by Fernflower decompiler)</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public Test() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        (new Thread(() -&gt; &#123;</span><br><span class="line">            System.err.println(&quot; test&quot; + Thread.currentThread().getName() + &quot; is run as a thread &quot;);</span><br><span class="line">        &#125;)).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(5L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>打开class所在目录，我们会发现lambada并没有像匿名内部类一样创建了一个$1 的对象，那么他是如何实现的？</li><li>我们使用<code>javap -c -l -p xxx</code> 翻译class 得到到结果如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">  public Test();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 9: 0</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       5     0  this   LTest;</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]) throws java.lang.InterruptedException;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  &#x2F;&#x2F; class java&#x2F;lang&#x2F;Thread</span><br><span class="line">       3: dup</span><br><span class="line">       4: invokedynamic #3,  0              &#x2F;&#x2F; InvokeDynamic #0:run: ()Ljava&#x2F;lang&#x2F;Runnable;</span><br><span class="line">       9: invokespecial #4                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.&quot;&lt;init&gt;&quot;:(Ljava&#x2F;lang&#x2F;Runnable;)V</span><br><span class="line">      12: invokevirtual #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.start:()V</span><br><span class="line">      15: getstatic     #6                  &#x2F;&#x2F; Field java&#x2F;util&#x2F;concurrent&#x2F;TimeUnit.SECONDS:Ljava&#x2F;util&#x2F;concurrent&#x2F;TimeUnit;</span><br><span class="line">      18: ldc2_w        #7                  &#x2F;&#x2F; long 5l</span><br><span class="line">      21: invokevirtual #9                  &#x2F;&#x2F; Method java&#x2F;util&#x2F;concurrent&#x2F;TimeUnit.sleep:(J)V</span><br><span class="line">      24: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 12: 0</span><br><span class="line">      line 14: 12</span><br><span class="line">      line 15: 15</span><br><span class="line">      line 16: 24</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0      25     0  args   [Ljava&#x2F;lang&#x2F;String;</span><br><span class="line"></span><br><span class="line">  private static void lambda$main$0();</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #10                 &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.err:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">       3: new           #11                 &#x2F;&#x2F; class java&#x2F;lang&#x2F;StringBuilder</span><br><span class="line">       6: dup</span><br><span class="line">       7: invokespecial #12                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">      10: ldc           #13                 &#x2F;&#x2F; String  test</span><br><span class="line">      12: invokevirtual #14                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      15: invokestatic  #15                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.currentThread:()Ljava&#x2F;lang&#x2F;Thread;</span><br><span class="line">      18: invokevirtual #16                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.getName:()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">      21: invokevirtual #14                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      24: ldc           #17                 &#x2F;&#x2F; String  is run as a thread</span><br><span class="line">      26: invokevirtual #14                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      29: invokevirtual #18                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.toString:()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">      32: invokevirtual #19                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">      35: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 13: 0</span><br><span class="line">      line 14: 35</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比匿名内部类和lambada表达式可以明显发现，Lambada的不同在于使用了<code>私有方法</code> 加上 <code>invokedynamic</code>指令进行编译，而不会产生一个匿名内部类的对象class文件。</p><ol><li>我们可以看下Lambada的 <code>this</code>打印的是什么东西</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            System.err.println(&quot; test&quot; + Thread.currentThread().getName() + &quot; is run as a thread &quot; );</span><br><span class="line">            System.err.println(&quot;lambada this is &#x3D; &quot; + this);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(5L);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>这里惊讶的发现,编译居然无法通过！！！！</strong></p><p>我们再对比使用匿名内部类的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    new Thread(new Runnable() &#123;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            String name &#x3D; Thread.currentThread().getName();</span><br><span class="line">            System.err.println(name + &quot; is run as a thread &quot; + this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    Thread.sleep(2000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方式可以正常编译通过并且运行，由此我们可以发现lambada的<code>this</code> 和匿名内部类的 <code>this</code>有着本质的区别</p><ol><li>我们无法使用正常到方式打印this, 我们换一种方式，这里稍微调整代码，最后的代码如下:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @program: lambada</span><br><span class="line"> * @description: 测试jdk1.8</span><br><span class="line"> * @author: zhaoxudong</span><br><span class="line"> * @create: 2020-05-05 11:42</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    Runnable run &#x3D; () -&gt;&#123;</span><br><span class="line">        System.err.println(this);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new Thread(new Test().run).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(5L);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上面的代码，可以得到结果<code>test</code></p><blockquote><p>在匿名内部类如何得到结果呢？</p><p>可以看下面的代码，结果依然是打印 <code>test</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @program: smartframwork</span><br><span class="line"> * @description: lambada表达式学习1</span><br><span class="line"> * @author: zhaoxudong</span><br><span class="line"> * @create: 2020-05-05 10:29</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class LambadaTest1 &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                String name &#x3D; Thread.currentThread().getName();</span><br><span class="line">                System.err.println(name + &quot; is run as a thread &quot; + this);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public String toString() &#123;</span><br><span class="line">                return &quot;test&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;LambadaTest1&#123;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><p>匿名内部类：<code>this</code> 指向的是匿名内部类的所属对象（<strong>也就是Runnable</strong>）</p><p>lambada：<code>this</code> 指向当前运行的类（<strong>也就是Test</strong>），也就是当前运行的对象</p><h3 id="Q：Java8里面的java-util-Spliterator接口有什么用？"><a href="#Q：Java8里面的java-util-Spliterator接口有什么用？" class="headerlink" title="Q：Java8里面的java.util.Spliterator接口有什么用？"></a>Q：Java8里面的java.util.Spliterator接口有什么用？</h3><h3 id="A：参考博客"><a href="#A：参考博客" class="headerlink" title="A：参考博客"></a>A：参考博客</h3><p><a href="https://segmentfault.com/q/1010000007087438" target="_blank" rel="noopener">思否</a></p><p>一句话概括：为了多线程并行遍历元素而设计到迭代器</p><p>版本：JDK1.8</p><p>目的：简化复杂到并行迭代程序编写</p><p>参考：Java7的Fork/Join(分支/合并)框架</p><p><a href="https://blog.csdn.net/silver9886/article/details/87917823" target="_blank" rel="noopener">CSDN上面到解答</a></p><p><a href="https://ifeve.com/java8-stream-中spliterator的使用一/" target="_blank" rel="noopener">JAVA8 stream 中Spliterator的使用(一)</a></p><p><a href="https://ifeve.com/java8-stream-中spliterator的使用二/" target="_blank" rel="noopener">JAVA8 stream 中Spliterator的使用(二)</a></p>]]></content>
    
    <summary type="html">
    
      使用lambada表达式处理
    
    </summary>
    
    
      <category term="JDK1.8" scheme="http://lazytime.site/categories/JDK1-8/"/>
    
    
      <category term="LAMBAD" scheme="http://lazytime.site/tags/LAMBAD/"/>
    
  </entry>
  
  <entry>
    <title>Mindoc 安装与部署</title>
    <link href="http://lazytime.site/2020/09/25/Mindoc-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <id>http://lazytime.site/2020/09/25/Mindoc-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</id>
    <published>2020-09-25T15:49:40.000Z</published>
    <updated>2020-09-25T15:50:32.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mindoc-安装与部署"><a href="#Mindoc-安装与部署" class="headerlink" title="Mindoc 安装与部署"></a>Mindoc 安装与部署</h1><p>地址： <a href="https://www.iminho.me/wiki/docs/mindoc/mindoc-summary.md" target="_blank" rel="noopener">https://www.iminho.me/wiki/docs/mindoc/mindoc-summary.md</a></p><h2 id="第一步-下载可执行文件"><a href="#第一步-下载可执行文件" class="headerlink" title="第一步 下载可执行文件"></a>第一步 下载可执行文件</h2><p>请从 <a href="https://github.com/lifei6671/mindoc/releases" target="_blank" rel="noopener">https://github.com/lifei6671/mindoc/releases</a> 下载最新版的可执行文件，一般文件名为 mindoc_windows_amd.zip .</p><h2 id="第二步-解压压缩包"><a href="#第二步-解压压缩包" class="headerlink" title="第二步 解压压缩包"></a>第二步 解压压缩包</h2><p>请将刚才下载的文件解压，推荐使用好压解压到任意目录。建议不用用中文目录名称。</p><h2 id="第三步-创建数据库"><a href="#第三步-创建数据库" class="headerlink" title="第三步 创建数据库"></a>第三步 创建数据库</h2><p>如果你使用的 mysql 数据库，请创建一个编码为utf8mb4格式的数据库，如果没有GUI管理工具，推荐用下面的脚本创建：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mindoc_db  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><hr><p>如果你使用的是 sqlite 数据库，请将 conf/app.conf 中的数据库配置成如下,系统会自动创建 sqlite 数据库文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db_adapter&#x3D;sqlite3</span><br><span class="line">db_database&#x3D;mindoc_db</span><br></pre></td></tr></table></figure><h2 id="第四步-配置数据库"><a href="#第四步-配置数据库" class="headerlink" title="第四步 配置数据库"></a>第四步 配置数据库</h2><p>请将刚才解压目录下 conf/app.conf.example 重名为 app.conf。同时配置如下节点：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库配置</span></span><br><span class="line"><span class="attr">db_adapter</span>=mysql</span><br><span class="line"><span class="comment">#mysql数据库的IP</span></span><br><span class="line"><span class="attr">db_host</span>=<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql数据库的端口号一般为3306</span></span><br><span class="line"><span class="attr">db_port</span>=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#刚才创建的数据库的名称</span></span><br><span class="line"><span class="attr">db_database</span>=mindoc_db</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问数据库的账号和密码</span></span><br><span class="line"><span class="attr">db_username</span>=root</span><br><span class="line"><span class="attr">db_password</span>=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>在 MinDoc 根目录下使用命令行执行如下命令，用于初始化数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mindoc_windows_amd64.exe install</span><br></pre></td></tr></table></figure><p>稍等一分钟，程序会自动初始化数据库，并创建一个超级管理员账号：<code>admin</code> 密码：<code>123456</code></p><h2 id="第五步-启动程序"><a href="#第五步-启动程序" class="headerlink" title="第五步 启动程序"></a>第五步 启动程序</h2><p>如果你设置了环境变量，但是没有重启电脑，请在cmd命令行启动 mindoc_windows_amd64.exe 程序。</p><p>如果你设置了环境变量，并且重启了电脑，双击 mindoc_windows_amd64.exe 即可。</p><p>此时访问 <a href="http://localhost:8181/" target="_blank" rel="noopener">http://localhost:8181</a> 就能访问 MinDoc 了。</p>]]></content>
    
    <summary type="html">
    
      使用mindoc的一次实践
    
    </summary>
    
    
      <category term="日常" scheme="http://lazytime.site/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="文档" scheme="http://lazytime.site/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch Linux安装教程</title>
    <link href="http://lazytime.site/2020/08/29/elasticsearch-Linux%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://lazytime.site/2020/08/29/elasticsearch-Linux%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2020-08-29T15:13:52.000Z</published>
    <updated>2020-08-29T15:21:43.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="elasticsearch-Linux安装教程"><a href="#elasticsearch-Linux安装教程" class="headerlink" title="elasticsearch Linux安装教程"></a>elasticsearch Linux安装教程</h1><a id="more"></a><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol><li><p>安装Jdk环境</p><ol><li>省略</li></ol></li><li><p>下载官方的es包放在usr目录下</p></li><li><p>在/usr目录下建立一个文件夹</p><p><strong>注意这里不能使用root用户进行安装！！！</strong></p><p><strong>注意这里不能使用root用户进行安装！！！</strong></p><p><strong>注意这里不能使用root用户进行安装！！！</strong></p><ol><li><p>groupadd elsearch</p></li><li><p>useradd elsearch -g elsearch</p><p>//该命令是更改该文件夹下所属的用户组的权限</p></li><li><p>chown -R elsearch:elsearch elasticsearch-5.6.3</p></li></ol></li><li><p>修改config 目录下的yml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。</span><br><span class="line"></span><br><span class="line">cluster.name: my-es</span><br><span class="line"></span><br><span class="line">\#节点名称</span><br><span class="line"></span><br><span class="line">node.name: node-1  </span><br><span class="line"></span><br><span class="line">\#设置索引数据的存储路径</span><br><span class="line"></span><br><span class="line">path.data: &#x2F;usr&#x2F;export&#x2F;servers&#x2F;data  </span><br><span class="line"></span><br><span class="line">\#设置日志的存储路径</span><br><span class="line"></span><br><span class="line">path.logs: &#x2F;usr&#x2F;export&#x2F;servers&#x2F;logs  </span><br><span class="line"></span><br><span class="line">\#设置当前的ip地址,通过指定相同网段的其他节点会加入该集群中</span><br><span class="line"></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line">\#设置对外服务的http端口</span><br><span class="line"></span><br><span class="line">http.port: 9200  </span><br><span class="line"></span><br><span class="line">\#设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点</span><br><span class="line"></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;node-1&quot;]</span><br><span class="line"></span><br><span class="line">记得修改下列两条</span><br><span class="line">bootstrap.memory_lock: false</span><br><span class="line">bootstrap.system_call_filter: false</span><br></pre></td></tr></table></figure></li></ol><p>配置elasticsearch 用户以及权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;usr&#x2F;export&#x2F;servers&#x2F;data</span><br><span class="line"></span><br><span class="line">mkdir -p &#x2F;usr&#x2F;export&#x2F;servers&#x2F;logs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chown -R es:es &#x2F;usr&#x2F;export&#x2F;servers&#x2F;elasticsearch</span><br><span class="line"></span><br><span class="line">chown -R es:es &#x2F;usr&#x2F;export&#x2F;servers&#x2F;data</span><br><span class="line"></span><br><span class="line">chown -R es:es &#x2F;usr&#x2F;export&#x2F;servers&#x2F;logs</span><br></pre></td></tr></table></figure><ol><li><p>切换用户 su es</p></li><li><p>集群启动 bin/elasic。</p></li><li><p><strong>报错！！</strong></p><blockquote><p>1.[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536] 意思是说你的进程不够用了</p><p>解决办法 切到root 用户：进入到security目录下的limits.conf；执行命令 在文件的末尾添加下面的参数值：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> vim &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br><span class="line">前面的*符号必须带上，然后重新启动就可以了。执行完成后可以使用命令 ulimit -n 查看进程数</span><br></pre></td></tr></table></figure><blockquote><p>2.[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] 需要修改系统变量的最大值了</p><p>解决方案：切换到root用户修改配置sysctl.conf 增加配置值： vm.max_map_count=655360</p><p>执行命令 sysctl -p 这样就可以了，然后重新启动ES服务 就可以了</p></blockquote><blockquote><p>3.[3] snamp centerOs6 不支持 snamp 需要在 yml 中修改配置</p><p>解决方案</p><p>bootstrap.system_call_filter: false</p></blockquote></li></ol><h2 id="基本错误处理"><a href="#基本错误处理" class="headerlink" title="基本错误处理"></a>基本错误处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">原因：无法创建本地文件问题,用户最大可创建文件数太小</span><br><span class="line"></span><br><span class="line">解决方案：切换到root用户，编辑limits.conf配置文件，  添加类似如下内容：</span><br><span class="line"></span><br><span class="line">vi &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line"></span><br><span class="line">添加如下内容: 注意*不要去掉了</span><br><span class="line"></span><br><span class="line">\* soft nofile 65536</span><br><span class="line"></span><br><span class="line">\* hard nofile 131072</span><br><span class="line"></span><br><span class="line">备注：* 代表Linux所有用户名称（比如  hadoop）</span><br><span class="line"></span><br><span class="line">需要保存、退出、重新登录才可生效。</span><br><span class="line">原因：无法创建本地线程问题,用户最大可创建线程数太小</span><br><span class="line"></span><br><span class="line">解决方案：切换到root用户，进入limits.d目录下，修改90-nproc.conf 配置文件。</span><br><span class="line"></span><br><span class="line">vi &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;90-nproc.conf</span><br><span class="line"></span><br><span class="line">找到如下内容：</span><br><span class="line"></span><br><span class="line">\* soft nproc 1024</span><br><span class="line"></span><br><span class="line">\#修改为</span><br><span class="line"></span><br><span class="line">\* soft nproc 4096</span><br><span class="line">原因：最大虚拟内存太小</span><br><span class="line"></span><br><span class="line">每次启动机器都手动执行下。</span><br><span class="line"></span><br><span class="line">root用户执行命令：</span><br><span class="line"></span><br><span class="line">执行命令：sysctl -w  vm.max_map_count&#x3D;262144</span><br><span class="line">sudo sysctl -w vm.max_map_count&#x3D;262144</span><br><span class="line">查看修改结果命令：sysctl -a|grep  vm.max_map_count  看是否已经修改</span><br><span class="line"></span><br><span class="line">永久性修改策略：</span><br><span class="line"></span><br><span class="line">echo &quot;vm.max_map_count&#x3D;262144&quot; &gt;&gt;  &#x2F;etc&#x2F;sysctl.echo </span><br><span class="line">或者</span><br><span class="line">&#x2F;&#x2F; 拷贝一本临时文件并且覆盖</span><br><span class="line">echo &quot;vm.max_map_count&#x3D;262144&quot; &gt;&gt; &#x2F;tmp&#x2F;system_sysctl.conf</span><br><span class="line">mv &#x2F;tmp&#x2F;system_sysctl.conf &#x2F;etc&#x2F;sysctl.conf</span><br></pre></td></tr></table></figure><p>更多问题自行百度解决…</p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><blockquote><p>查看集群状态：localhost:9200/_cat/health?v 查看索引列表：localhost:9200/_cat/indices?v</p></blockquote><p>添加一个索引: curl -XPUT ‘<a href="http://xn--IP-wz2cm89g:9200/dept/employee/32" target="_blank" rel="noopener">http://主机IP:9200/dept/employee/32</a>‘ -d ‘{ “empname”: “emp32”}’</p><h3 id="配置重点"><a href="#配置重点" class="headerlink" title="配置重点:"></a>配置重点:</h3><p><strong>centeros 6 版本执行下列方法</strong></p><ol><li>开放Linux 9200 端口</li><li>vi /etc/sysconfig/iptables</li><li>加入内容并保存：-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT</li><li>/etc/init.d/iptables restart</li><li>/sbin/iptables -L -n</li></ol><h1 id="安装head-插件"><a href="#安装head-插件" class="headerlink" title="安装head 插件"></a>安装head 插件</h1><h3 id="1-解压插件-如果不存在需要安装解压软件"><a href="#1-解压插件-如果不存在需要安装解压软件" class="headerlink" title="1.解压插件 (如果不存在需要安装解压软件)"></a>1.解压插件 (如果不存在需要安装解压软件)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zip unzip</span><br></pre></td></tr></table></figure><h3 id="2-安装nodeJS支持-执行如下命令"><a href="#2-安装nodeJS支持-执行如下命令" class="headerlink" title="2.安装nodeJS支持,执行如下命令"></a>2.安装nodeJS支持,执行如下命令</h3><h2 id="具体参考链接"><a href="#具体参考链接" class="headerlink" title="具体参考链接"></a>具体参考链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. curl -sL https:&#x2F;&#x2F;rpm.nodesource.com&#x2F;setup_8.x | bash -</span><br><span class="line"></span><br><span class="line">2. yum install -y nodejs</span><br><span class="line"></span><br><span class="line">3. npm install grunt --save-dev</span><br><span class="line"></span><br><span class="line">4. 修改head目录下面的 .&#x2F;_site&#x2F;app.js</span><br><span class="line"></span><br><span class="line">   （无法安装请查看nodejs安装教程）</span><br><span class="line">5. npm install phantomjs-prebuilt@2.1.16 --ignore-scripts(必要依赖)</span><br><span class="line"></span><br><span class="line">在 head 根目录下执行: npm run start</span><br><span class="line"></span><br><span class="line">6. 如果连接不上需要执行下列命令</span><br><span class="line">    vi el&#x2F;config&#x2F;elasticsearch.yml</span><br><span class="line">    </span><br><span class="line">    添加如下</span><br><span class="line">    允许远程访问</span><br><span class="line">    http.cors.enabled: true</span><br><span class="line">    http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure><h3 id="3-app-js修改大概位置"><a href="#3-app-js修改大概位置" class="headerlink" title="3.app.js修改大概位置"></a>3.app.js修改大概位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">init: function(parent) &#123;</span><br><span class="line">    this._super();</span><br><span class="line">    this.prefs &#x3D; services.Preferences.instance();</span><br><span class="line">    this.base_uri &#x3D; this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http:&#x2F;&#x2F;10.215.4.166:9200&quot;;</span><br><span class="line">    if( this.base_uri.charAt( this.base_uri.length - 1 ) !&#x3D;&#x3D; &quot;&#x2F;&quot; ) &#123;</span><br><span class="line">    &#x2F;&#x2F; XHR request fails if the URL is not ending with a &quot;&#x2F;&quot;</span><br><span class="line">    this.base_uri +&#x3D; &quot;&#x2F;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-更换grunt"><a href="#4-更换grunt" class="headerlink" title="4.更换grunt"></a>4.更换grunt</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yo bower grunt-cli gulp</span><br></pre></td></tr></table></figure><h2 id="5-添加索引目录位置"><a href="#5-添加索引目录位置" class="headerlink" title="5.添加索引目录位置"></a>5.添加索引目录位置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi ~&#x2F;.bash_profile</span><br><span class="line"></span><br><span class="line"># .bash_profile</span><br><span class="line"></span><br><span class="line"># Get the aliases and functions</span><br><span class="line"></span><br><span class="line">if [ -f ~&#x2F;.bashrc ]; then</span><br><span class="line">        . ~&#x2F;.bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># User specific environment and startup programs</span><br><span class="line"></span><br><span class="line">PATH&#x3D;$PATH:$HOME&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;src&#x2F;node-v8.2.1-linux-x86&#x2F;bin</span><br></pre></td></tr></table></figure><h2 id="6-补充内容"><a href="#6-补充内容" class="headerlink" title="6.补充内容"></a>6.补充内容</h2><blockquote><p>现在使用的较多的多半为elasticsearch-head 插件或者自己开发界面以及api接口</p></blockquote><h3 id="springboot-elasticsearch-部署的配置文件"><a href="#springboot-elasticsearch-部署的配置文件" class="headerlink" title="springboot-elasticsearch 部署的配置文件"></a>springboot-elasticsearch 部署的配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.data.elasticsearch.cluster-name&#x3D;my-es</span><br><span class="line">#注意： 此处不能和elasticsearch服务一致，因为有可能出现端口攻击问题导致服务器崩溃</span><br><span class="line">spring.data.elasticsearch.cluster-nodes&#x3D;192.168.1.73:9300</span><br><span class="line">spring.data.elasticsearch.repositories.enabled&#x3D;true</span><br></pre></td></tr></table></figure><h3 id="接口的注入"><a href="#接口的注入" class="headerlink" title="接口的注入"></a>接口的注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component </span><br><span class="line">&#x2F;&#x2F;@Repository</span><br><span class="line">public interface ArticleRepository extends ElasticsearchRepository&lt;Article, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      安装教程
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://lazytime.site/categories/elasticsearch/"/>
    
    
      <category term="linux" scheme="http://lazytime.site/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>RocketMq消息队列中间件安装(linux)</title>
    <link href="http://lazytime.site/2020/08/29/RocketMq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E8%A3%85-linux/"/>
    <id>http://lazytime.site/2020/08/29/RocketMq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E8%A3%85-linux/</id>
    <published>2020-08-29T14:57:53.000Z</published>
    <updated>2020-08-29T15:13:11.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="1-下载maven的tar-gz包"><a href="#1-下载maven的tar-gz包" class="headerlink" title="1. 下载maven的tar.gz包"></a>1. 下载maven的tar.gz包</h2><h2 id="2-设置-etc-profile文件加入MAVEN-HOME"><a href="#2-设置-etc-profile文件加入MAVEN-HOME" class="headerlink" title="2. 设置/etc/profile文件加入MAVEN_HOME"></a>2. 设置/etc/profile文件加入MAVEN_HOME</h2><blockquote><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><h2 id="yum-install-curl-devel-expat-devel-gettext-devel"><a href="#yum-install-curl-devel-expat-devel-gettext-devel" class="headerlink" title="yum install curl-devel expat-devel gettext-devel"></a>yum install curl-devel expat-devel gettext-devel</h2></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; unzip rocketmq-all-4.3.0-source-release.zip</span><br><span class="line">&gt; cd rocketmq-all-4.3.0&#x2F;</span><br><span class="line">&gt; mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line">&gt; cd distribution&#x2F;target&#x2F;apache-rocketmq</span><br></pre></td></tr></table></figure><h2 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; nohup sh bin&#x2F;mqnamesrv &amp;</span><br><span class="line">  &gt; tail -f ~&#x2F;logs&#x2F;rocketmqlogs&#x2F;namesrv.log</span><br><span class="line">  The Name Server boot success...</span><br><span class="line">  </span><br><span class="line">   &gt; nohup sh bin&#x2F;mqbroker -n localhost:9876 &amp;</span><br><span class="line">  &gt; tail -f ~&#x2F;logs&#x2F;rocketmqlogs&#x2F;broker.log </span><br><span class="line">  The broker[%s, 172.30.30.233:10911] boot success...</span><br></pre></td></tr></table></figure><h2 id="4-启动消费者"><a href="#4-启动消费者" class="headerlink" title="4.启动消费者"></a>4.启动消费者</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; export NAMESRV_ADDR&#x3D;localhost:9876</span><br><span class="line"> &gt; sh bin&#x2F;tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line"> SendResult [sendStatus&#x3D;SEND_OK, msgId&#x3D; ...</span><br><span class="line"></span><br><span class="line"> &gt; sh bin&#x2F;tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br><span class="line"> ConsumeMessageThread_%d Receive New Messages: [MessageExt...</span><br></pre></td></tr></table></figure><h4 id="5-关闭"><a href="#5-关闭" class="headerlink" title="5.关闭"></a>5.关闭</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; sh bin&#x2F;mqshutdown broker</span><br><span class="line">The mqbroker(36695) is running...</span><br><span class="line">Send shutdown request to mqbroker(36695) OK</span><br><span class="line"></span><br><span class="line">&gt; sh bin&#x2F;mqshutdown namesrv</span><br><span class="line">The mqnamesrv(36664) is running...</span><br><span class="line">Send shutdown request to mqnamesrv(36664) OK</span><br></pre></td></tr></table></figure><h1 id="可视化工具下载与安装"><a href="#可视化工具下载与安装" class="headerlink" title="可视化工具下载与安装"></a>可视化工具下载与安装</h1><p>RoekerMQ4.x可视化控制台讲解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、下载 https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;rocketmq-externals</span><br><span class="line">2、编译打包  mvn clean package -Dmaven.test.skip&#x3D;true</span><br><span class="line">3、target目录 通过java -jar的方式运行</span><br><span class="line"></span><br><span class="line">4、无法连接获取broker信息</span><br><span class="line">1）修改配置文件,名称路由地址为 namesrvAddr，例如我本机为</span><br><span class="line">2）src&#x2F;main&#x2F;resources&#x2F;application.properties</span><br><span class="line">rocketmq.config.namesrvAddr&#x3D;192.168.0.101:9876</span><br><span class="line"></span><br><span class="line">5、默认端口 localhost:8080</span><br><span class="line"></span><br><span class="line">6、注意：</span><br><span class="line">在阿里云，腾讯云或者虚拟机，记得检查端口号和防火墙是否启动</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      消息中间件
    
    </summary>
    
    
      <category term="消息中间件" scheme="http://lazytime.site/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="RocketMq" scheme="http://lazytime.site/tags/RocketMq/"/>
    
  </entry>
  
  <entry>
    <title>Oracle常用命令大全（很有用，做笔记）</title>
    <link href="http://lazytime.site/2020/08/29/Oracle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%EF%BC%88%E5%BE%88%E6%9C%89%E7%94%A8%EF%BC%8C%E5%81%9A%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://lazytime.site/2020/08/29/Oracle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%EF%BC%88%E5%BE%88%E6%9C%89%E7%94%A8%EF%BC%8C%E5%81%9A%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2020-08-29T14:55:04.000Z</published>
    <updated>2020-08-29T14:57:08.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Oracle常用命令大全（很有用，做笔记）"><a href="#Oracle常用命令大全（很有用，做笔记）" class="headerlink" title="Oracle常用命令大全（很有用，做笔记）"></a><a href="https://www.cnblogs.com/flgg/p/6136586.html" target="_blank" rel="noopener">Oracle常用命令大全（很有用，做笔记）</a></h1><p>单纯参考别人的博客记录，紧急时候帮助很大</p><a id="more"></a><p>一、ORACLE的启动和关闭 1、在单机环境下 要想启动或关闭ORACLE系统必须首先切换到ORACLE用户，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure><p>a、启动ORACLE系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oracle&gt;svrmgrl </span><br><span class="line">SVRMGR&gt;connect internal </span><br><span class="line">SVRMGR&gt;startup </span><br><span class="line">SVRMGR&gt;quit</span><br></pre></td></tr></table></figure><p>b、关闭ORACLE系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oracle&gt;svrmgrl </span><br><span class="line">SVRMGR&gt;connect internal </span><br><span class="line">SVRMGR&gt;shutdown </span><br><span class="line">SVRMGR&gt;quit</span><br></pre></td></tr></table></figure><p>启动oracle9i数据库命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ sqlplus &#x2F;nolog </span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 9.2.0.1.0 - Production on Fri Oct 31 13:53:53 2003 </span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2002, Oracle Corporation.  All rights reserved. </span><br><span class="line"></span><br><span class="line">SQL&gt; connect &#x2F; as sysdba  </span><br><span class="line">Connected to an idle instance. </span><br><span class="line">SQL&gt; startup^C </span><br><span class="line"></span><br><span class="line">SQL&gt; startup </span><br><span class="line">ORACLE instance started.</span><br></pre></td></tr></table></figure><p>2、在双机环境下 要想启动或关闭ORACLE系统必须首先切换到root用户，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">su － root </span><br><span class="line"></span><br><span class="line">a、启动ORACLE系统 </span><br><span class="line">hareg －y oracle </span><br><span class="line"></span><br><span class="line">b、关闭ORACLE系统 </span><br><span class="line">hareg －n oracle </span><br><span class="line"></span><br><span class="line">Oracle数据库有哪几种启动方式</span><br></pre></td></tr></table></figure><p>说明：</p><p>有以下几种启动方式： 1、startup nomount 非安装启动，这种方式启动下可执行：重建控制文件、重建数据库</p><p>读取init.ora文件，启动instance，即启动SGA和后台进程，这种启动只需要init.ora文件。</p><p>2、startup mount dbname 安装启动，这种方式启动下可执行： 数据库日志归档、 数据库介质恢复、 使数据文件联机或脱机， 重新定位数据文件、重做日志文件。</p><p>执行“nomount”，然后打开控制文件，确认数据文件和联机日志文件的位置， 但此时不对数据文件和日志文件进行校验检查。</p><p>3、startup open dbname 先执行“nomount”，然后执行“mount”，再打开包括Redo log文件在内的所有数据库文件， 这种方式下可访问数据库中的数据。</p><p>4、startup，等于以下三个命令 startup nomount alter database mount alter database open</p><p>5、startup restrict 约束方式启动 这种方式能够启动数据库，但只允许具有一定特权的用户访问 非特权用户访问时，会出现以下提示： ERROR： ORA-01035: ORACLE 只允许具有 RESTRICTED SESSION 权限的用户使用</p><p>6、startup force 强制启动方式 当不能关闭数据库时，可以用startup force来完成数据库的关闭 先关闭数据库，再执行正常启动数据库命令</p><p>7、startup pfile=参数文件名 带初始化参数文件的启动方式 先读取参数文件，再按参数文件中的设置启动数据库 例：startup pfile=E:Oracleadminoradbpfileinit.ora</p><p>8、startup EXCLUSIVE 二、用户如何有效地利用数据字典 　ORACLE的数据字典是数据库的重要组成部分之一，它随着数据库的产生而产生, 随着数据库的变化而变化, 体现为sys用户下的一些表和视图。数据字典名称是大写的英文字符。</p><p> 数据字典里存有用户信息、用户的权限信息、所有数据对象信息、表的约束条件、统计分析数据库的视图等。 我们不能手工修改数据字典里的信息。</p><p>很多时候，一般的ORACLE用户不知道如何有效地利用它。</p><p>dictionary　　　全部数据字典表的名称和解释，它有一个同义词dict  dict_column　　 全部数据字典表里字段名称和解释</p><p> 如果我们想查询跟索引有关的数据字典时，可以用下面这条SQL语句:</p><p> SQL&gt;select * from dictionary where instr(comments,’index’)&gt;0;</p><p> 如果我们想知道user_indexes表各字段名称的详细含义，可以用下面这条SQL语句:</p><p> SQL&gt;select column_name,comments from dict_columns where table_name=’USER_INDEXES’;</p><p> 依此类推，就可以轻松知道数据字典的详细名称和解释，不用查看ORACLE的其它文档资料了。</p><p> 下面按类别列出一些ORACLE用户常用数据字典的查询使用方法。</p><p> 1、用户</p><p> 查看当前用户的缺省表空间  SQL&gt;select username,default_tablespace from user_users;</p><p> 查看当前用户的角色  SQL&gt;select * from user_role_privs;</p><p> 查看当前用户的系统权限和表级权限  SQL&gt;select * from user_sys_privs;  SQL&gt;select * from user_tab_privs;</p><p> 2、表</p><p> 查看用户下所有的表  SQL&gt;select * from user_tables;</p><p> 查看名称包含log字符的表  SQL&gt;select object_name,object_id from user_objects  where instr(object_name,’LOG’)&gt;0;</p><p> 查看某表的创建时间  SQL&gt;select object_name,created from user_objects where object_name=upper(‘&amp;table_name’);</p><p> 查看某表的大小  SQL&gt;select sum(bytes)/(1024*1024) as “size(M)” from user_segments  where segment_name=upper(‘&amp;table_name’);</p><p> 查看放在ORACLE的内存区里的表  SQL&gt;select table_name,cache from user_tables where instr(cache,’Y’)&gt;0;</p><p> 3、索引</p><p> 查看索引个数和类别  SQL&gt;select index_name,index_type,table_name from user_indexes order by table_name;</p><p> 查看索引被索引的字段  SQL&gt;select * from user_ind_columns where index_name=upper(‘&amp;index_name’);</p><p> 查看索引的大小  SQL&gt;select sum(bytes)/(1024*1024) as “size(M)” from user_segments  where segment_name=upper(‘&amp;index_name’);</p><p> 4、序列号</p><p> 查看序列号，last_number是当前值  SQL&gt;select * from user_sequences;</p><p> 5、视图</p><p> 查看视图的名称  SQL&gt;select view_name from user_views;</p><p> 查看创建视图的select语句  SQL&gt;set view_name,text_length from user_views;  SQL&gt;set long 2000; 说明：可以根据视图的text_length值设定set long 的大小  SQL&gt;select text from user_views where view_name=upper(‘&amp;view_name’);</p><p> 6、同义词</p><p> 查看同义词的名称  SQL&gt;select * from user_synonyms;</p><p> 7、约束条件</p><p> 查看某表的约束条件  SQL&gt;select constraint_name, constraint_type,search_condition, r_constraint_name  from user_constraints where table_name = upper(‘&amp;table_name’);</p><p> SQL&gt;select c.constraint_name,c.constraint_type,cc.column_name  from user_constraints c,user_cons_columns cc  where c.owner = upper(‘&amp;table_owner’) and c.table_name = upper(‘&amp;table_name’)  and c.owner = cc.owner and c.constraint_name = cc.constraint_name  order by cc.position;</p><p> 8、存储函数和过程</p><p> 查看函数和过程的状态  SQL&gt;select object_name,status from user_objects where object_type=’FUNCTION’;  SQL&gt;select object_name,status from user_objects where object_type=’PROCEDURE’;</p><p> 查看函数和过程的源代码  SQL&gt;select text from all_source where owner=user and name=upper(‘&amp;plsql_name’);</p><p>三、查看数据库的SQL 1、查看表空间的名称及大小</p><p> select t.tablespace_name, round(sum(bytes/(1024*1024)),0) ts_size  from dba_tablespaces t, dba_data_files d  where t.tablespace_name = d.tablespace_name  group by t.tablespace_name;</p><p>2、查看表空间物理文件的名称及大小</p><p> select tablespace_name, file_id, file_name,  round(bytes/(1024*1024),0) total_space  from dba_data_files  order by tablespace_name;</p><p>3、查看回滚段名称及大小</p><p> select segment_name, tablespace_name, r.status,  (initial_extent/1024) InitialExtent,(next_extent/1024) NextExtent,  max_extents, v.curext CurExtent  From dba_rollback_segs r, v$rollstat v  Where r.segment_id = v.usn(+)  order by segment_name ;</p><p>4、查看控制文件</p><p> select name from v$controlfile;</p><p>5、查看日志文件</p><p> select member from v$logfile;</p><p>6、查看表空间的使用情况</p><p> select sum(bytes)/(1024*1024) as free_space,tablespace_name  from dba_free_space  group by tablespace_name;</p><p> SELECT A.TABLESPACE_NAME,A.BYTES TOTAL,B.BYTES USED, C.BYTES FREE,  (B.BYTES<em>100)/A.BYTES “% USED”,(C.BYTES</em>100)/A.BYTES “% FREE”  FROM SYS.SM$TS_AVAIL A,SYS.SM$TS_USED B,SYS.SM$TS_FREE C  WHERE A.TABLESPACE_NAME=B.TABLESPACE_NAME AND A.TABLESPACE_NAME=C.TABLESPACE_NAME;</p><p>7、查看数据库库对象</p><p> select owner, object_type, status, count(*) count# from all_objects group by owner, object_type, status;</p><p>8、查看数据库的版本</p><p> Select version FROM Product_component_version  Where SUBSTR(PRODUCT,1,6)=’Oracle’;</p><p>9、查看数据库的创建日期和归档方式</p><p> Select Created, Log_Mode, Log_Mode From V$Database; 四、ORACLE用户连接的管理</p><p>用系统管理员，查看当前数据库有几个用户连接：</p><p>SQL&gt; select username,sid,serial# from v$session;</p><p>如果要停某个连接用</p><p>SQL&gt; alter system kill session ‘sid,serial#’;</p><p>如果这命令不行,找它UNIX的进程数</p><p>SQL&gt; select pro.spid from v$session ses,v$process pro where ses.sid=21 and ses.paddr=pro.addr;</p><p>说明：21是某个连接的sid数</p><p>然后用 kill 命令杀此进程号。</p><p>五、SQL<em>PLUS使用 a、近入SQL</em>Plus $sqlplus 用户名/密码</p><p>退出SQL*Plus SQL&gt;exit</p><p>b、在sqlplus下得到帮助信息 列出全部SQL命令和SQL*Plus命令 SQL&gt;help 列出某个特定的命令的信息 SQL&gt;help 命令名</p><p>c、显示表结构命令DESCRIBE SQL&gt;DESC 表名</p><p>d、SQL*Plus中的编辑命令 显示SQL缓冲区命令 SQL&gt;L</p><p>修改SQL命令 首先要将待改正行变为当前行 SQL&gt;n 用CHANGE命令修改内容 SQL&gt;c/旧/新 重新确认是否已正确 SQL&gt;L</p><p>使用INPUT命令可以在SQL缓冲区中增加一行或多行 SQL&gt;i SQL&gt;输入内容</p><p>e、调用外部系统编辑器 SQL&gt;edit 文件名 可以使用DEFINE命令设置系统变量EDITOR来改变文本编辑器的类型，在login.sql文件中定义如下一行 DEFINE_EDITOR=vi</p><p>f、运行命令文件 SQL&gt;START test SQL&gt;@test</p><p>常用SQL*Plus语句 a、表的创建、修改、删除 创建表的命令格式如下： create table 表名 （列说明列表）；</p><p>为基表增加新列命令如下： ALTER TABLE 表名 ADD （列说明列表） 例：为test表增加一列Age，用来存放年龄  sql&gt;alter table test  add （Age number(3)）；</p><p>修改基表列定义命令如下： ALTER TABLE 表名 MODIFY （列名 数据类型） 例：将test表中的Count列宽度加长为10个字符  sql&gt;alter atble test  modify （County char(10)）；</p><p>b、将一张表删除语句的格式如下： DORP TABLE 表名； 例：表删除将同时删除表的数据和表的定义 sql&gt;drop table test</p><p>c、表空间的创建、删除</p><p>六、ORACLE逻辑备份的SH文件</p><p>完全备份的SH文件：exp_comp.sh</p><p>rq=<code>date +&quot;%m%d&quot;</code></p><p>su - oracle -c “exp system/manager full=y inctype=complete file=/oracle/export/db_comp$rq.dmp”</p><p>累计备份的SH文件：exp_cumu.sh</p><p>rq=<code>date +&quot;%m%d&quot;</code></p><p>su - oracle -c “exp system/manager full=y inctype=cumulative file=/oracle/export/db_cumu$rq.dmp”</p><p>增量备份的SH文件: exp_incr.sh</p><p>rq=<code>date +&quot;%m%d&quot;</code></p><p>su - oracle -c “exp system/manager full=y inctype=incremental file=/oracle/export/db_incr$rq.dmp”</p><p>root用户crontab文件 /var/spool/cron/crontabs/root增加以下内容</p><p>0 2 1 * * /oracle/exp_comp.sh</p><p>30 2 * * 0-5 /oracle/exp_incr.sh</p><p>45 2 * * 6 /oracle/exp_cumu.sh</p><p>当然这个时间表可以根据不同的需求来改变的，这只是一个例子。</p><p>七、ORACLE 常用的SQL语法和数据对象</p><p>一.数据控制语句 (DML) 部分</p><p>1.INSERT (往数据表里插入记录的语句)</p><p>INSERT INTO 表名(字段名1, 字段名2, ……) VALUES ( 值1, 值2, ……); INSERT INTO 表名(字段名1, 字段名2, ……) SELECT (字段名1, 字段名2, ……) FROM 另外的表名;</p><p>字符串类型的字段值必须用单引号括起来, 例如: ’GOOD DAY’ 如果字段值里包含单引号’ 需要进行字符串转换, 我们把它替换成两个单引号’’. 字符串类型的字段值超过定义的长度会出错, 最好在插入前进行长度校验.</p><p>日期字段的字段值可以用当前数据库的系统时间SYSDATE, 精确到秒 或者用字符串转换成日期型函数TO_DATE(‘2001-08-01’,’YYYY-MM-DD’) TO_DATE()还有很多种日期格式, 可以参看ORACLE DOC. 年-月-日 小时:分钟:秒 的格式YYYY-MM-DD HH24:MI:SS</p><p>INSERT时最大可操作的字符串长度小于等于4000个单字节, 如果要插入更长的字符串, 请考虑字段用CLOB类型, 方法借用ORACLE里自带的DBMS_LOB程序包.</p><p>INSERT时如果要用到从1开始自动增长的序列号, 应该先建立一个序列号 CREATE SEQUENCE 序列号的名称 (最好是表名+序列号标记) INCREMENT BY 1 START WITH 1 MAXVALUE 99999 CYCLE NOCACHE; 其中最大的值按字段的长度来定, 如果定义的自动增长的序列号 NUMBER(6) , 最大值为999999 INSERT 语句插入这个字段值为: 序列号的名称.NEXTVAL</p><p>2.DELETE (删除数据表里记录的语句)</p><p>DELETE FROM表名 WHERE 条件;</p><p>注意：删除记录并不能释放ORACLE里被占用的数据块表空间. 它只把那些被删除的数据块标成unused.</p><p>如果确实要删除一个大表里的全部记录, 可以用 TRUNCATE 命令, 它可以释放占用的数据块表空间 TRUNCATE TABLE 表名; 此操作不可回退.</p><p>3.UPDATE (修改数据表里记录的语句)</p><p>UPDATE表名 SET 字段名1=值1, 字段名2=值2, …… WHERE 条件;</p><p>如果修改的值N没有赋值或定义时, 将把原来的记录内容清为NULL, 最好在修改前进行非空校验; 值N超过定义的长度会出错, 最好在插入前进行长度校验..</p><p>注意事项: A. 以上SQL语句对表都加上了行级锁,  确认完成后, 必须加上事物处理结束的命令 COMMIT 才能正式生效,  否则改变不一定写入数据库里.  如果想撤回这些操作, 可以用命令 ROLLBACK 复原.</p><p>B. 在运行INSERT, DELETE 和 UPDATE 语句前最好估算一下可能操作的记录范围,  应该把它限定在较小 (一万条记录) 范围内,. 否则ORACLE处理这个事物用到很大的回退段.  程序响应慢甚至失去响应. 如果记录数上十万以上这些操作, 可以把这些SQL语句分段分次完成,  其间加上COMMIT 确认事物处理. 二.数据定义 (DDL) 部分</p><p>1.CREATE (创建表, 索引, 视图, 同义词, 过程, 函数, 数据库链接等)</p><p>ORACLE常用的字段类型有 CHAR 固定长度的字符串 VARCHAR2 可变长度的字符串 NUMBER(M,N) 数字型M是位数总长度, N是小数的长度 DATE 日期类型</p><p>创建表时要把较小的不为空的字段放在前面, 可能为空的字段放在后面</p><p>创建表时可以用中文的字段名, 但最好还是用英文的字段名</p><p>创建表时可以给字段加上默认值, 例如 DEFAULT SYSDATE 这样每次插入和修改时, 不用程序操作这个字段都能得到动作的时间</p><p>创建表时可以给字段加上约束条件 例如 不允许重复 UNIQUE, 关键字 PRIMARY KEY</p><p>2.ALTER (改变表, 索引, 视图等)</p><p>改变表的名称 ALTER TABLE 表名1 TO 表名2;</p><p>在表的后面增加一个字段 ALTER TABLE表名 ADD 字段名 字段名描述;</p><p>修改表里字段的定义描述 ALTER TABLE表名 MODIFY字段名 字段名描述;</p><p>给表里的字段加上约束条件 ALTER TABLE 表名 ADD CONSTRAINT 约束名 PRIMARY KEY (字段名); ALTER TABLE 表名 ADD CONSTRAINT 约束名 UNIQUE (字段名);</p><p>把表放在或取出数据库的内存区 ALTER TABLE 表名 CACHE; ALTER TABLE 表名 NOCACHE;</p><p>3.DROP (删除表, 索引, 视图, 同义词, 过程, 函数, 数据库链接等)</p><p>删除表和它所有的约束条件 DROP TABLE 表名 CASCADE CONSTRAINTS;</p><p>4.TRUNCATE (清空表里的所有记录, 保留表的结构)</p><p>TRUNCATE 表名;</p><p>三.查询语句 (SELECT) 部分</p><p>SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] WHERE 条件;</p><p>字段名可以带入函数 例如: COUNT(*), MIN(字段名), MAX(字段名), AVG(字段名), DISTINCT(字段名),  TO_CHAR(DATE字段名,’YYYY-MM-DD HH24:MI:SS’)</p><p>NVL(EXPR1, EXPR2)函数 解释: IF EXPR1=NULL  RETURN EXPR2 ELSE  RETURN EXPR1</p><p>DECODE(AA﹐V1﹐R1﹐V2﹐R2….)函数 解释: IF AA=V1 THEN RETURN R1 IF AA=V2 THEN RETURN R2 ..… ELSE RETURN NULL</p><p>LPAD(char1,n,char2)函数 解释: 字符char1按制定的位数n显示，不足的位数用char2字符串替换左边的空位</p><p>字段名之间可以进行算术运算 例如: (字段名1*字段名1)/3</p><p>查询语句可以嵌套 例如: SELECT …… FROM (SELECT …… FROM表名1, [表名2, ……] WHERE 条件) WHERE 条件2;</p><p>两个查询语句的结果可以做集合操作 例如: 并集UNION(去掉重复记录), 并集UNION ALL(不去掉重复记录), 差集MINUS, 交集INTERSECT</p><p>分组查询 SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] GROUP BY字段名1 [HAVING 条件] ;</p><p>两个以上表之间的连接查询</p><p>SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] WHERE  表名1.字段名 = 表名2. 字段名 [ AND ……] ;</p><p>SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] WHERE  表名1.字段名 = 表名2. 字段名(+) [ AND ……] ;</p><p>有(+)号的字段位置自动补空值</p><p>查询结果集的排序操作, 默认的排序是升序ASC, 降序是DESC</p><p>SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] ORDER BY字段名1, 字段名2 DESC;</p><p>字符串模糊比较的方法</p><p>INSTR(字段名, ‘字符串’)&gt;0 字段名 LIKE ‘字符串%’ [‘%字符串%’]</p><p>每个表都有一个隐含的字段ROWID, 它标记着记录的唯一性.</p><p>四.ORACLE里常用的数据对象 (SCHEMA)</p><p>1.索引 (INDEX)</p><p>CREATE INDEX 索引名ON 表名 ( 字段1, [字段2, ……] ); ALTER INDEX 索引名 REBUILD;</p><p>一个表的索引最好不要超过三个 (特殊的大表除外), 最好用单字段索引, 结合SQL语句的分析执行情况, 也可以建立多字段的组合索引和基于函数的索引</p><p>ORACLE8.1.7字符串可以索引的最大长度为1578 单字节 ORACLE8.0.6字符串可以索引的最大长度为758 单字节</p><p>2.视图 (VIEW)</p><p>CREATE VIEW 视图名AS SELECT …. FROM …..; ALTER VIEW视图名 COMPILE;</p><p>视图仅是一个SQL查询语句, 它可以把表之间复杂的关系简洁化.</p><p>3.同义词 (SYNONMY) CREATE SYNONYM同义词名FOR 表名; CREATE SYNONYM同义词名FOR 表名@数据库链接名;</p><p>4.数据库链接 (DATABASE LINK) CREATE DATABASE LINK数据库链接名CONNECT TO 用户名 IDENTIFIED BY 密码 USING ‘数据库连接字符串’;</p><p>数据库连接字符串可以用NET8 EASY CONFIG或者直接修改TNSNAMES.ORA里定义.</p><p>数据库参数global_name=true时要求数据库链接名称跟远端数据库名称一样</p><p>数据库全局名称可以用以下命令查出 SELECT * FROM GLOBAL_NAME;</p><p>查询远端数据库里的表 SELECT …… FROM 表名@数据库链接名;</p><p>五.权限管理 (DCL) 语句</p><p>1.GRANT 赋于权限 常用的系统权限集合有以下三个: CONNECT(基本的连接), RESOURCE(程序开发), DBA(数据库管理) 常用的数据对象权限有以下五个: ALL ON 数据对象名, SELECT ON 数据对象名, UPDATE ON 数据对象名, DELETE ON 数据对象名, INSERT ON 数据对象名, ALTER ON 数据对象名</p><p>GRANT CONNECT, RESOURCE TO 用户名; GRANT SELECT ON 表名 TO 用户名; GRANT SELECT, INSERT, DELETE ON表名 TO 用户名1, 用户名2;</p><p>2.REVOKE 回收权限</p><p>REVOKE CONNECT, RESOURCE FROM 用户名; REVOKE SELECT ON 表名 FROM 用户名; REVOKE SELECT, INSERT, DELETE ON表名 FROM 用户名1, 用户名2;</p><p>查询数据库中第63号错误： select orgaddr,destaddr from sm_histable0116 where error_code=’63’;</p><p>查询数据库中开户用户最大提交和最大下发数： select MSISDN,TCOS,OCOS from ms_usertable；</p><p>查询数据库中各种错误代码的总和： select error_code,count(*) from sm_histable0513 group by error_code order by error_code;</p><p>查询报表数据库中话单统计种类查询。 select sum(Successcount) from tbl_MiddleMt0411 where ServiceType2=111 select sum(successcount),servicetype from tbl_middlemt0411 group by servicetype</p>]]></content>
    
    <summary type="html">
    
      Oracle常用命令大全（很有用，做笔记）
    
    </summary>
    
    
      <category term="数据库" scheme="http://lazytime.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="oracle" scheme="http://lazytime.site/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>linux Docker 安装方法</title>
    <link href="http://lazytime.site/2020/08/29/linux-Docker-%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/"/>
    <id>http://lazytime.site/2020/08/29/linux-Docker-%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/</id>
    <published>2020-08-29T14:52:18.000Z</published>
    <updated>2020-08-29T14:53:50.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-linux-Docker-安装方法"><a href="#1-linux-Docker-安装方法" class="headerlink" title="1. linux Docker 安装方法"></a>1. linux Docker 安装方法</h1><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>64-bit 系统</li><li>kernel 3.10+ （内核为 3.1 以上）</li><li>linux 系统</li></ul><a id="more"></a><h2 id="检查内核版本，返回的值大于3-10即可"><a href="#检查内核版本，返回的值大于3-10即可" class="headerlink" title="检查内核版本，返回的值大于3.10即可"></a>检查内核版本，返回的值大于3.10即可</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><h2 id="更新yum"><a href="#更新yum" class="headerlink" title="更新yum"></a>更新yum</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><h2 id="添加yum仓库（直接拷贝即可）"><a href="#添加yum仓库（直接拷贝即可）" class="headerlink" title="添加yum仓库（直接拷贝即可）"></a>添加yum仓库（直接拷贝即可）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tee &#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">[dockerrepo]</span><br><span class="line">name&#x3D;Docker Repository</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;yum.dockerproject.org&#x2F;repo&#x2F;main&#x2F;centos&#x2F;$releasever&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;yum.dockerproject.org&#x2F;gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-engine</span><br></pre></td></tr></table></figure><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure><h2 id="验证安装是否成功-有client和service两部分表示docker安装启动都成功了"><a href="#验证安装是否成功-有client和service两部分表示docker安装启动都成功了" class="headerlink" title="验证安装是否成功(有client和service两部分表示docker安装启动都成功了)"></a>验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h2 id="查看当前进程"><a href="#查看当前进程" class="headerlink" title="查看当前进程"></a>查看当前进程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h1 id="2-什么是Dokcer"><a href="#2-什么是Dokcer" class="headerlink" title="2. 什么是Dokcer"></a>2. 什么是Dokcer</h1><p>一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口；</p><p>使用go语言编写，在LCX（linux容器）基础上进行的封装</p><h2 id="简单来说："><a href="#简单来说：" class="headerlink" title="简单来说："></a>简单来说：</h2><p>1）就是可以快速部署启动应用 2）实现虚拟化，完整资源隔离 3）一次编写，四处运行（有一定的限制，比如Docker是基于Linux 64bit的，无法在32bit的linux/Windows/unix环境下使用）</p><h2 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h2><p>开箱即用，快速部署，可移植性强，环境隔离</p><p>1、提供一次性的环境，假如需要安装Mysql，则需要安装很多依赖库、版本等，如果使用Docker则通过镜像就可以直接启动运行</p><p>2、快速动态扩容，使用docker部署了一个应用，可以制作成镜像，然后通过Dokcer快速启动</p><p>3、组建微服务架构，可以在一个机器上模拟出多个微服务，启动多个应用</p><p>4、更好的资源隔离和共享</p><h2 id="linux-简介："><a href="#linux-简介：" class="headerlink" title="linux 简介："></a>linux 简介：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Linux Standard Base的缩写，lsb_release命令用来显示LSB和特定版本的相关信息</span><br><span class="line">命令： lsb_release -a </span><br><span class="line">阿里云安装手册：</span><br><span class="line">https:&#x2F;&#x2F;help.aliyun.com&#x2F;document_detail&#x2F;51853.html?spm&#x3D;a2c4g.11186623.6.820.RaToNY</span><br><span class="line"></span><br><span class="line">常见问题：</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;daluguishou&#x2F;article&#x2F;details&#x2F;52080250</span><br><span class="line">Docker 镜像 - Docker images：</span><br><span class="line">            容器运行时的只读模板，操作系统+软件运行环境+用户程序</span><br><span class="line"></span><br><span class="line">            class User&#123;</span><br><span class="line">            private String userName;</span><br><span class="line">            private int age;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Docker 容器 - Docker containers：</span><br><span class="line">容器包含了某个应用运行所需要的全部环境</span><br><span class="line"></span><br><span class="line"> User user &#x3D; new User()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Docker 仓库 - Docker registeries： </span><br><span class="line">用来保存镜像，有公有和私有仓库，好比Maven的中央仓库和本地私服</span><br><span class="line">镜像仓库：</span><br><span class="line"></span><br><span class="line">（参考）配置国内镜像仓库：https:&#x2F;&#x2F;blog.csdn.net&#x2F;zzy1078689276&#x2F;article&#x2F;details&#x2F;77371782</span><br><span class="line"></span><br><span class="line">对比面向对象的方式</span><br><span class="line">Dokcer 里面的镜像 : Java里面的类 Class</span><br><span class="line">Docker 里面的容器 : Java里面的对象 Object</span><br><span class="line">通过类创建对象，通过镜像创建容器</span><br></pre></td></tr></table></figure><h2 id="阿里云安装linux-docker-centeros7-版本"><a href="#阿里云安装linux-docker-centeros7-版本" class="headerlink" title="阿里云安装linux docker (centeros7 版本)"></a>阿里云安装linux docker (centeros7 版本)</h2><h2 id="使用脚本安装-Docker"><a href="#使用脚本安装-Docker" class="headerlink" title="使用脚本安装 Docker"></a>使用脚本安装 Docker</h2><p>1、使用 <code>sudo</code> 或 <code>root</code> 权限登录 Centos。</p><p>2、确保 yum 包更新到最新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update</span><br></pre></td></tr></table></figure><p>3、执行 Docker 安装脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br></pre></td></tr></table></figure><p>执行这个脚本会添加 <code>docker.repo</code> 源并安装 Docker。</p><p>4、启动 Docker 进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br></pre></td></tr></table></figure><p>5、验证 <code>docker</code> 是否安装成功并在容器中执行一个测试的镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>到此，docker 在 CentOS 系统的安装完成。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Docker 镜像 - Docker images：</span><br><span class="line">容器运行时的只读模板，操作系统+软件运行环境+用户程序</span><br><span class="line"> </span><br><span class="line"> class User&#123;</span><br><span class="line">private String userName;</span><br><span class="line">private int age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Docker 容器 - Docker containers：</span><br><span class="line">    容器包含了某个应用运行所需要的全部环境</span><br><span class="line"></span><br><span class="line">    User user &#x3D; new User()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Docker 仓库 - Docker registeries： </span><br><span class="line">    用来保存镜像，有公有和私有仓库，好比Maven的中央仓库和本地私服</span><br><span class="line">    镜像仓库：</span><br><span class="line"></span><br><span class="line">（参考）配置国内镜像仓库：</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;zzy1078689276&#x2F;article&#x2F;details&#x2F;77371782</span><br><span class="line"></span><br><span class="line">对比面向对象的方式</span><br><span class="line">Dokcer 里面的镜像 : Java里面的类 Class</span><br><span class="line">Docker 里面的容器 : Java里面的对象 Object</span><br><span class="line">通过类创建对象，通过镜像创建容器</span><br></pre></td></tr></table></figure><h1 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h1><p>常用命令（安装部署好Dokcer后，执行的命令是docker开头）,xxx是镜像名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">搜索镜像：docker search xxx</span><br><span class="line"></span><br><span class="line">列出当前系统存在的镜像：docker images</span><br><span class="line"></span><br><span class="line">拉取镜像：docker pull xxx</span><br><span class="line">xxx是具体某个镜像名称(格式 REPOSITORY:TAG)</span><br><span class="line">REPOSITORY：表示镜像的仓库源,TAG：镜像的标签</span><br><span class="line"></span><br><span class="line">运行一个容器：docker run -d --name &quot;xdclass_mq&quot; -p 5672:5672 -p 15672:15672 rabbitmq:management</span><br><span class="line">docker run - 运行一个容器</span><br><span class="line">-d 后台运行</span><br><span class="line">-p 端口映射</span><br><span class="line">rabbitmq:management  (格式 REPOSITORY:TAG)，如果不指定tag，默认使用最新的</span><br><span class="line">--name &quot;xxx&quot;</span><br><span class="line"></span><br><span class="line">列举当前运行的容器：docker ps</span><br><span class="line"></span><br><span class="line">检查容器内部信息：docker inspect 容器名称</span><br><span class="line"></span><br><span class="line">删除镜像：docker rmi IMAGE_NAME</span><br><span class="line"> 强制移除镜像不管是否有容器使用该镜像 增加 -f 参数，</span><br><span class="line"></span><br><span class="line">停止某个容器：docker stop 容器名称</span><br><span class="line"></span><br><span class="line">启动某个容器：docker start 容器名称</span><br><span class="line"></span><br><span class="line">移除某个容器： docker rm 容器名称 （容器必须是停止状态）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">文档：</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;permike&#x2F;article&#x2F;details&#x2F;51879578</span><br></pre></td></tr></table></figure><h1 id="3-Docker部署Nginx服务器"><a href="#3-Docker部署Nginx服务器" class="headerlink" title="3. Docker部署Nginx服务器"></a>3. Docker部署Nginx服务器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">简介：讲解使用Docker部署Nginx服务器实战</span><br><span class="line">1、获取镜像 </span><br><span class="line">docker run (首先会从本地找镜像，如果有则直接启动，没有的话，从镜像仓库拉起，再启动)</span><br><span class="line"></span><br><span class="line">docker search nignx</span><br><span class="line">2、列举</span><br><span class="line">docker images</span><br><span class="line">3、拉取</span><br><span class="line">docker pull nignx</span><br><span class="line">3、启动</span><br><span class="line">docker run -d --name &quot;xdclass_nginx&quot; -p 8088:80 nginx</span><br><span class="line">docker run -d --name &quot;xdclass_nginx2&quot; -p 8089:80 nginx</span><br><span class="line">docker run -d --name &quot;xdclass_nginx3&quot; -p 8090:80 nginx</span><br><span class="line">4、访问</span><br><span class="line">如果是阿里云服务，记得配置安全组，腾讯云也需要配置，这个就是一个防火墙</span><br></pre></td></tr></table></figure><h1 id="4-构建自己的私人镜像"><a href="#4-构建自己的私人镜像" class="headerlink" title="4. 构建自己的私人镜像"></a>4. 构建自己的私人镜像</h1><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1)登录： docker login --username&#x3D;794666918@qq.com registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">2) 推送本地镜像：</span><br><span class="line">docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass&#x2F;xdclass_images:[镜像版本号]</span><br><span class="line">例子：</span><br><span class="line">docker tag 2f415b0e9a6e registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass&#x2F;xdclass_images:xd_rabbitmq-v1.0.2</span><br><span class="line"></span><br><span class="line">docker push registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass&#x2F;xdclass_images:xd_rabbitmq-v1.0.2</span><br><span class="line"></span><br><span class="line">3)拉取镜像</span><br><span class="line">线上服务器拉取镜像：</span><br><span class="line">docker login --username&#x3D;794666918@qq.com registry.cn-shenzhen.aliyuncs.com</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass&#x2F;xdclass_images:xd_rabbitmq-v1.0.2</span><br><span class="line"></span><br><span class="line">启动容器：</span><br><span class="line">docker run -d --name &quot;xdclass_mq&quot; -p 5672:5672 -p 15672:15672 2f415b0e9a6e</span><br><span class="line">1. 登录阿里云Docker Registry</span><br><span class="line">$ sudo docker login --username&#x3D;xiaolaodong11 registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</span><br><span class="line"></span><br><span class="line">您可以在产品控制台首页修改登录密码。</span><br><span class="line"></span><br><span class="line">2. 从Registry中拉取镜像</span><br><span class="line">$ sudo docker pull registry.cn-shenzhen.aliyuncs.com&#x2F;zxd-registry&#x2F;zxd-res:[镜像版本号]</span><br><span class="line">3. 将镜像推送到Registry</span><br><span class="line">$ sudo docker login --username&#x3D;xiaolaodong11 registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">$ sudo docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com&#x2F;zxd-registry&#x2F;zxd-res:[镜像版本号]</span><br><span class="line">$ sudo docker push registry.cn-shenzhen.aliyuncs.com&#x2F;zxd-registry&#x2F;zxd-res:[镜像版本号]</span><br><span class="line">请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。</span><br><span class="line"></span><br><span class="line">4. 选择合适的镜像仓库地址</span><br><span class="line">从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。</span><br><span class="line"></span><br><span class="line">如果您使用的机器位于经典网络，请使用 registry-internal.cn-shenzhen.aliyuncs.com 作为Registry的域名登录，并作为镜像命名空间前缀。</span><br><span class="line">如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-shenzhen.aliyuncs.com 作为Registry的域名登录，并作为镜像命名空间前缀。</span><br><span class="line">5. 示例</span><br><span class="line">使用&quot;docker tag&quot;命令重命名镜像，并将它通过专有网络地址推送至Registry。</span><br><span class="line"></span><br><span class="line">$ sudo docker images</span><br><span class="line">REPOSITORY                                                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">registry.aliyuncs.com&#x2F;acs&#x2F;agent                                    0.7-dfb6816         37bb9c63c8b2        7 days ago          37.89 MB</span><br><span class="line">$ sudo docker tag 37bb9c63c8b2 registry-vpc.cn-shenzhen.aliyuncs.com&#x2F;acs&#x2F;agent:0.7-dfb6816</span><br><span class="line">使用&quot;docker images&quot;命令找到镜像，将该镜像名称中的域名部分变更为Registry专有网络地址。</span><br><span class="line"></span><br><span class="line">$ sudo docker push registry-vpc.cn-shenzhen.aliyuncs.com&#x2F;acs&#x2F;agent:0.7-dfb6816</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      linux安装docker
    
    </summary>
    
    
      <category term="linux" scheme="http://lazytime.site/categories/linux/"/>
    
    
      <category term="docker" scheme="http://lazytime.site/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>jmeter压力测试学习</title>
    <link href="http://lazytime.site/2020/08/29/jmeter%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://lazytime.site/2020/08/29/jmeter%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-29T14:44:19.428Z</published>
    <updated>2020-08-29T14:51:20.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>jmeter 作为实操性的软件，更注重练习，理论作为参考掌握即可，不需要去具体的纠结</p><a id="more"></a><h1 id="1-目前用的常用测试工具对比"><a href="#1-目前用的常用测试工具对比" class="headerlink" title="1. 目前用的常用测试工具对比"></a>1. 目前用的常用测试工具对比</h1><h2 id="1、loadrunner"><a href="#1、loadrunner" class="headerlink" title="1、loadrunner"></a>1、loadrunner</h2><p>​    性能稳定，压测结果及细粒度大，可以自定义脚本进行压测，但是太过于重大，功能比较繁多</p><p>​    1、loadrunner</p><h2 id="2、apache-ab-单接口压测最方便"><a href="#2、apache-ab-单接口压测最方便" class="headerlink" title="2、apache ab(单接口压测最方便)"></a>2、apache ab(单接口压测最方便)</h2><p>​    模拟多线程并发请求,ab命令对发出负载的计算机要求很低，既不会占用很多CPU，也不会占用太多的内存，但却会给目标服务器造成巨大的负载, 简单DDOS攻击等</p><h2 id="3、webbench"><a href="#3、webbench" class="headerlink" title="3、webbench"></a>3、webbench</h2><p>​    webbench首先fork出多个子进程，每个子进程都循环做web访问测试。子进程把访问的结果通过pipe告诉父进程，父进程做最终的统计结果。</p><h1 id="2-Jmeter基本介绍和使用场景"><a href="#2-Jmeter基本介绍和使用场景" class="headerlink" title="2. Jmeter基本介绍和使用场景"></a>2. Jmeter基本介绍和使用场景</h1><h2 id="1、压测不同的协议和应用"><a href="#1、压测不同的协议和应用" class="headerlink" title="1、压测不同的协议和应用"></a>1、压测不同的协议和应用</h2><p>​    1) Web - HTTP, HTTPS (Java, NodeJS, PHP, <a href="http://ASP.NET" target="_blank" rel="noopener">ASP.NET</a>, …)     2) SOAP / REST Webservices     3) FTP     4) Database via JDBC     5) LDAP 轻量目录访问协议     6) Message-oriented middleware (MOM) via JMS     7) Mail - SMTP(S), POP3(S) and IMAP(S)     8) TCP等等</p><h2 id="2、使用场景及优点"><a href="#2、使用场景及优点" class="headerlink" title="2、使用场景及优点"></a>2、使用场景及优点</h2><p>1）功能测试     </p><p>2）压力测试     </p><p>3）分布式压力测试     </p><p>4）纯java开发     </p><p>5）上手容易，高性能     </p><p>6）提供测试数据分析     </p><p>7）各种报表数据图形展示</p><h1 id="3-本地快速安装Jmeter4-x"><a href="#3-本地快速安装Jmeter4-x" class="headerlink" title="3. 本地快速安装Jmeter4.x"></a>3. 本地快速安装Jmeter4.x</h1><h2 id="1、需要安装JDK8。或者JDK9-JDK10-建议不要使用jre10"><a href="#1、需要安装JDK8。或者JDK9-JDK10-建议不要使用jre10" class="headerlink" title="1、需要安装JDK8。或者JDK9,JDK10 (建议不要使用jre10)"></a>1、需要安装JDK8。或者JDK9,JDK10 (建议不要使用jre10)</h2><h2 id="2、快速下载"><a href="#2、快速下载" class="headerlink" title="2、快速下载"></a>2、快速下载</h2><p>​    windows： <a href="http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.zip" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.zip</a>     </p><p>mac或者linux：<a href="http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.tgz" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.tgz</a></p><h2 id="3、文档地址：http-jmeter-apache-org-usermanual-get-started-html"><a href="#3、文档地址：http-jmeter-apache-org-usermanual-get-started-html" class="headerlink" title="3、文档地址：http://jmeter.apache.org/usermanual/get-started.html"></a>3、文档地址：<a href="http://jmeter.apache.org/usermanual/get-started.html" target="_blank" rel="noopener">http://jmeter.apache.org/usermanual/get-started.html</a></h2><h2 id="4、建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的-keytool工具"><a href="#4、建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的-keytool工具" class="headerlink" title="4、建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的 keytool工具"></a>4、建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的 keytool工具</h2><h1 id="4-jemeter-目录结构"><a href="#4-jemeter-目录结构" class="headerlink" title="4. jemeter 目录结构"></a>4. jemeter 目录结构</h1><h2 id="bin-核心可执行文件，包含配置"><a href="#bin-核心可执行文件，包含配置" class="headerlink" title="bin:核心可执行文件，包含配置"></a>bin:核心可执行文件，包含配置</h2><p>jmeter.bat: windows启动文件：     </p><p>jmeter: mac或者linux启动文件：     </p><p>jmeter-server：mac或者Liunx分布式压测使用的启动文件  </p><p>jmeter-server.bat：mac或者Liunx分布式压测使用的启动文件     </p><p>jmeter.properties: 核心配置文件 </p><h2 id="extras：插件拓展的包"><a href="#extras：插件拓展的包" class="headerlink" title="extras：插件拓展的包"></a>extras：插件拓展的包</h2><p>lib:核心的依赖包     </p><p>ext:核心包     </p><p>junit:单元测试包</p><h1 id="5-改变jmeter的GUI界面语言版本"><a href="#5-改变jmeter的GUI界面语言版本" class="headerlink" title="5. 改变jmeter的GUI界面语言版本"></a>5. 改变jmeter的GUI界面语言版本</h1><h2 id="1、控制台修改"><a href="#1、控制台修改" class="headerlink" title="1、控制台修改"></a>1、控制台修改</h2><p>​    <code>menu -&gt; options -&gt; choose language</code></p><h2 id="2、配置文件修改"><a href="#2、配置文件修改" class="headerlink" title="2、配置文件修改"></a>2、配置文件修改</h2><p>​    <code>bin目录 -&gt; jmeter.properties     默认 #language=en     改为 language=zh_CN</code></p><h1 id="6-jemeter-菜单介绍"><a href="#6-jemeter-菜单介绍" class="headerlink" title="6. jemeter 菜单介绍"></a>6. jemeter 菜单介绍</h1><h2 id="1、添加-gt-threads-gt-线程组（控制总体并发）"><a href="#1、添加-gt-threads-gt-线程组（控制总体并发）" class="headerlink" title="1、添加-&gt;threads-&gt;线程组（控制总体并发）"></a>1、添加-&gt;threads-&gt;线程组（控制总体并发）</h2><ul><li>线程数：虚拟用户数。一个虚拟用户占用一个进程或线程</li><li>准备时长（Ramp-Up Period(in seconds)）：全部线程启动的时长，比如100个线程，20秒，则表示20秒内100个线程都要启动完成，每秒启动5个线程</li><li>循环次数：每个线程发送的次数，假如值为5，100个线程，则会发送500次请求，可以勾选永远循环</li></ul><h2 id="2、线程组-gt-添加-gt-Sampler-采样器-gt-Http-（一个线程组下面可以增加几个Sampler）"><a href="#2、线程组-gt-添加-gt-Sampler-采样器-gt-Http-（一个线程组下面可以增加几个Sampler）" class="headerlink" title="2、线程组-&gt;添加-&gt; Sampler(采样器) -&gt; Http （一个线程组下面可以增加几个Sampler）"></a>2、线程组-&gt;添加-&gt; Sampler(采样器) -&gt; Http （一个线程组下面可以增加几个Sampler）</h2><ul><li>名称：采样器名称</li><li>注释：对这个采样器的描述</li><li>web服务器：<ul><li>默认协议是http</li><li>默认端口是80</li><li>服务器名称或IP ：请求的目标服务器名称或IP地址</li></ul></li><li>路径：服务器URL</li><li><strong>Use multipart/from-data for HTTP POST</strong> ：当发送POST请求时，使用Use multipart/from-data方法发送，默认不选中。</li></ul><h2 id="3、查看测试结果"><a href="#3、查看测试结果" class="headerlink" title="3、查看测试结果"></a>3、查看测试结果</h2><h3 id="线程组-gt-添加-gt-监听器-gt-察看结果树"><a href="#线程组-gt-添加-gt-监听器-gt-察看结果树" class="headerlink" title="线程组-&gt;添加-&gt;监听器-&gt;察看结果树"></a>线程组-&gt;添加-&gt;监听器-&gt;察看结果树</h3><h1 id="7-断言的基本使用"><a href="#7-断言的基本使用" class="headerlink" title="7. 断言的基本使用"></a>7. 断言的基本使用</h1><h2 id="1-增加断言-线程组-gt-添加-gt-断言-gt-响应断言"><a href="#1-增加断言-线程组-gt-添加-gt-断言-gt-响应断言" class="headerlink" title="1. 增加断言: 线程组 -&gt; 添加 -&gt; 断言 -&gt; 响应断言"></a>1. 增加断言: 线程组 -&gt; 添加 -&gt; 断言 -&gt; 响应断言</h2><p>apply to(应用范围):     Main sample only: 仅当前父取样器 进行断言，一般一个请求，如果发一个请求会触发多个，则就有sub sample（比较少用）</p><h2 id="2-要测试的响应字段："><a href="#2-要测试的响应字段：" class="headerlink" title="2.要测试的响应字段："></a>2.要测试的响应字段：</h2><ul><li>响应文本：即响应的数据，比如json等文本</li><li>响应代码：http的响应状态码，比如200，302，404这些</li><li>响应信息：http响应代码对应的响应信息，例如：OK, Found</li><li>Response Header: 响应头</li></ul><h2 id="3-模式匹配规则："><a href="#3-模式匹配规则：" class="headerlink" title="3.模式匹配规则："></a>3.模式匹配规则：</h2><ul><li>包括：包含在里面就成功</li><li>匹配：响应内容完全匹配，不区分大小写</li><li>equals：完全匹配，区分大小写</li></ul><h2 id="4-断言结果监听器-线程组-gt-添加-gt-监听器-gt-断言结果"><a href="#4-断言结果监听器-线程组-gt-添加-gt-监听器-gt-断言结果" class="headerlink" title="4.断言结果监听器: 线程组-&gt; 添加 -&gt; 监听器 -&gt; 断言结果"></a>4.断言结果监听器: 线程组-&gt; 添加 -&gt; 监听器 -&gt; 断言结果</h2><p>里面的内容是sampler采样器的名称     断言失败，查看结果树任务结果颜色标红(通过结果数里面双击不通过的记录，可以看到错误信息)</p><h2 id="5-每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总"><a href="#5-每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总" class="headerlink" title="5.每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总"></a>5.每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总</h2><h1 id="8-Jmeter压测结果聚合报告分析"><a href="#8-Jmeter压测结果聚合报告分析" class="headerlink" title="8. Jmeter压测结果聚合报告分析"></a>8. Jmeter压测结果聚合报告分析</h1><h2 id="1-新增聚合报告：线程组-gt-添加-gt-监听器-gt-聚合报告（Aggregate-Report）"><a href="#1-新增聚合报告：线程组-gt-添加-gt-监听器-gt-聚合报告（Aggregate-Report）" class="headerlink" title="1.新增聚合报告：线程组-&gt;添加-&gt;监听器-&gt;聚合报告（Aggregate Report）"></a>1.新增聚合报告：线程组-&gt;添加-&gt;监听器-&gt;聚合报告（Aggregate Report）</h2><ul><li>lable: sampler的名称</li><li>Samples: 一共发出去多少请求,例如10个用户，循环10次，则是 100</li><li>Average: 平均响应时间</li><li>Median: 中位数，也就是 50％ 用户的响应时间</li><li>90% Line : 90％ 用户的响应不会超过该时间 （90% of the samples took no more than this time. The remaining samples at least as long as this）</li><li>95% Line : 95％ 用户的响应不会超过该时间</li><li>99% Line : 99％ 用户的响应不会超过该时间</li><li>min : 最小响应时间</li><li>max : 最大响应时间</li><li>Error%：错误的请求的数量/请求的总数</li><li><strong>Throughput： 吞吐量——默认情况下表示每秒完成的请求数（Request per Second) 可类比为qps     KB/Sec: 每秒接收数据量</strong></li></ul><h2 id="2-为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用-比如服务器地址"><a href="#2-为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用-比如服务器地址" class="headerlink" title="2.为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用(比如服务器地址)"></a>2.为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用(比如服务器地址)</h2><h3 id="1、线程组-gt-add-gt-Config-Element-配置原件-gt-User-Definde-Variable（用户定义的变量）"><a href="#1、线程组-gt-add-gt-Config-Element-配置原件-gt-User-Definde-Variable（用户定义的变量）" class="headerlink" title="1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; User Definde Variable（用户定义的变量）"></a>1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; User Definde Variable（用户定义的变量）</h3><h3 id="2、引用方式-XXX-，在接口中变量中使用"><a href="#2、引用方式-XXX-，在接口中变量中使用" class="headerlink" title="2、引用方式${XXX}，在接口中变量中使用"></a>2、引用方式${XXX}，在接口中变量中使用</h3><h3 id="3、原始查看结果树和非原生查看（基础按钮）"><a href="#3、原始查看结果树和非原生查看（基础按钮）" class="headerlink" title="3、原始查看结果树和非原生查看（基础按钮）"></a>3、原始查看结果树和非原生查看（基础按钮）</h3><h1 id="9-CSV可变参数压测（重要）"><a href="#9-CSV可变参数压测（重要）" class="headerlink" title="9. CSV可变参数压测（重要）"></a>9. CSV可变参数压测（重要）</h1><p><strong>实战操作jmeter读取CSV和Txt文本文件里面的参数进行压测</strong></p><h2 id="1、线程组-gt-add-gt-Config-Element-配置原件-gt-CSV-data-set-config-CSV数据文件设置"><a href="#1、线程组-gt-add-gt-Config-Element-配置原件-gt-CSV-data-set-config-CSV数据文件设置" class="headerlink" title="1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; CSV data set config (CSV数据文件设置)"></a>1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; CSV data set config (CSV数据文件设置)</h2><h2 id="2、在读取的配置文件里面，同时使用多个自定义参数"><a href="#2、在读取的配置文件里面，同时使用多个自定义参数" class="headerlink" title="2、在读取的配置文件里面，同时使用多个自定义参数"></a>2、在读取的配置文件里面，同时使用多个自定义参数</h2><p>如果是多个参数需要同时引用，则在CSV数据文件里面设置加多个字段 Variabled names(comma-delitited): csv_name,csv_pwd</p><h1 id="10、JDBC-request压测Mysql"><a href="#10、JDBC-request压测Mysql" class="headerlink" title="10、JDBC request压测Mysql"></a>10、JDBC request压测Mysql</h1><h2 id="1、Thread-Group-gt-add-gt-sampler-gt-jdbc-request"><a href="#1、Thread-Group-gt-add-gt-sampler-gt-jdbc-request" class="headerlink" title="1、Thread Group -&gt; add -&gt; sampler -&gt; jdbc request"></a>1、Thread Group -&gt; add -&gt; sampler -&gt; jdbc request</h2><h2 id="2、jar包添加-mysql-connector-java-5-1-30-jar"><a href="#2、jar包添加-mysql-connector-java-5-1-30-jar" class="headerlink" title="2、jar包添加 mysql-connector-java-5.1.30.jar"></a>2、jar包添加 mysql-connector-java-5.1.30.jar</h2><h2 id="3、JDBC-connection-Configuration-配置"><a href="#3、JDBC-connection-Configuration-配置" class="headerlink" title="3、JDBC connection Configuration 配置"></a>3、JDBC connection Configuration 配置</h2><p><strong>JDBC request-&gt;add -&gt; config element -&gt; JDBC connection configuration</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">核心配置</span><br><span class="line">Max Number of connections : 最大连接数</span><br><span class="line">MAX wait :最大等待时间</span><br><span class="line">Auto Commit: 是否自动提交事务</span><br><span class="line"></span><br><span class="line">DataBase URL : 数据库连接地址 jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;blog</span><br><span class="line">JDBC Driver Class : 数据库驱动，选择对应的mysql</span><br><span class="line">username:数据库用户名</span><br><span class="line">password:数据库密码</span><br></pre></td></tr></table></figure><h1 id="11-request压测Mysql-select语句"><a href="#11-request压测Mysql-select语句" class="headerlink" title="11. request压测Mysql, select语句"></a>11. request压测Mysql, select语句</h1><ul><li>个人测试1</li></ul><p>\</p><ul><li>个人测试2<ul><li>注意：需要添加一个全局的debug采集器采集查询结果</li><li>可以看到如图所示结果</li></ul></li></ul><h2 id="1-Debug-Sampler使用（结果树中查看）"><a href="#1-Debug-Sampler使用（结果树中查看）" class="headerlink" title="1. Debug Sampler使用（结果树中查看）"></a>1. Debug Sampler使用（结果树中查看）</h2><p>​    Thread Group -&gt; add -&gt; sampler -&gt; debug sampler</p><h2 id="2-参数讲解：-sql结尾不要加”-”"><a href="#2-参数讲解：-sql结尾不要加”-”" class="headerlink" title="2. 参数讲解：(sql结尾不要加”;”)"></a>2. 参数讲解：(sql结尾不要加”;”)</h2><ul><li>variable name of pool declared in JDBC connection configuration（和配置文件同名）</li><li>Query Type 查询类型</li><li>parameter values 参数值</li><li>parameter types 参数类型</li><li>variable names sql执行结果变量名</li><li>result variable names 所有结果当做一个对象存储</li><li>query timeouts 查询超时时间</li><li>handle results 处理结果集</li></ul><h1 id="12-分布式压测（学习重点）"><a href="#12-分布式压测（学习重点）" class="headerlink" title="12. 分布式压测（学习重点）"></a>12. 分布式压测（学习重点）</h1><p>官网教程： <a href="http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html" target="_blank" rel="noopener">http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html</a></p><ul><li>普通压测：单台机可以对目标机器产生的压力比较小，受限因素包括CPU，网络，IO等</li><li>分布式压测：利用多台机器向目标机器产生压力，模拟几万用户并发访问</li></ul><h1 id="13-Jmeter分布式压测原理-了解"><a href="#13-Jmeter分布式压测原理-了解" class="headerlink" title="13. Jmeter分布式压测原理(了解)"></a>13. Jmeter分布式压测原理(了解)</h1><p>1、总控机器的节点master，其他产生压力的机器叫“肉鸡” server</p><p>2、master会把压测脚本发送到 server上面</p><p>3、执行的时候，server上只需要把jmeter-server打开就可以了，不用启动jmeter</p><p>4、结束后，server会把压测数据回传给master,然后master汇总输出报告</p><p>5、配置详情</p><h1 id="14-阿里云安装jmeter-守护进程：nohup-java-jar-xxxxx-amp"><a href="#14-阿里云安装jmeter-守护进程：nohup-java-jar-xxxxx-amp" class="headerlink" title="14. 阿里云安装jmeter (守护进程：nohup java -jar xxxxx &amp;)"></a>14. 阿里云安装jmeter (守护进程：nohup java -jar xxxxx &amp;)</h1><h2 id="1-下载方式：wget-http-apache-osuosl-org-jmeter-binaries-apache-jmeter-4-0-tgz"><a href="#1-下载方式：wget-http-apache-osuosl-org-jmeter-binaries-apache-jmeter-4-0-tgz" class="headerlink" title="1. 下载方式：wget http://apache.osuosl.org//jmeter/binaries/apache-jmeter-4.0.tgz"></a>1. 下载方式：wget <a href="http://apache.osuosl.org//jmeter/binaries/apache-jmeter-4.0.tgz" target="_blank" rel="noopener">http://apache.osuosl.org//jmeter/binaries/apache-jmeter-4.0.tgz</a></h2><h2 id="2-直接到官网下载对应tag-gz包，并在服务器解压"><a href="#2-直接到官网下载对应tag-gz包，并在服务器解压" class="headerlink" title="2. 直接到官网下载对应tag.gz包，并在服务器解压"></a>2. 直接到官网下载对应tag.gz包，并在服务器解压</h2><h1 id="15-Jmeter非GUI界面-参数讲解-必须掌握"><a href="#15-Jmeter非GUI界面-参数讲解-必须掌握" class="headerlink" title="15. Jmeter非GUI界面 参数讲解(必须掌握)"></a>15. Jmeter非GUI界面 参数讲解(必须掌握)</h1><p>官方配置文件地址： <a href="http://jmeter.apache.org/usermanual/get-started.html" target="_blank" rel="noopener">http://jmeter.apache.org/usermanual/get-started.html</a></p><ul><li><strong>-h</strong> 帮助</li><li><strong>-n</strong> 非GUI模式</li><li><strong>-t</strong> 指定要运行的 JMeter 测试脚本文件</li><li><strong>-l</strong> 记录结果的文件 每次运行之前，(要确保之前没有运行过,即xxx.jtl不存在，不然报错)</li><li><strong>-r</strong> Jmter.properties文件中指定的所有远程服务器</li><li><strong>-e</strong> 在脚本运行结束后生成html报告</li><li><strong>-o</strong> 用于存放html报告的目录（目录要为空，不然报错）</li></ul><p>jmeter -n -t linux_users_api.jmx -l result.jtl -e -o /usr/local/softwate/jmeter/temp/ResultReport</p><p>jmeter -n -t /Users/jack/Desktop/linux_users_api.jmx -l result.jtl -e -o /Users/jack/Desktop/person/jmeter/temp</p><p>个人： /usr/local/software/jmeter/project/temp 。。。。</p><h2 id="1-阿里云非GUI-jmeter-压测"><a href="#1-阿里云非GUI-jmeter-压测" class="headerlink" title="1.阿里云非GUI jmeter 压测"></a>1.阿里云非GUI jmeter 压测</h2><p>jmx目录：/usr/local/software/jmeter/temp</p><p>示例</p><p>jmeter -n -t /usr/local/software/jmeter/temp/linux_users_api.jmx -l /usr/local/software/jmeter/temp/jtl/result.jtl</p><p>利用软件从阿里云Centos服务器下载压测报告，讲解Jtl文件，并怎么查看文件 可以通过打开jmeter，新建线程组-&gt;summary report-&gt;浏览文件 进行查看</p><h2 id="2-讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确"><a href="#2-讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确" class="headerlink" title="2.讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确"></a>2.讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确</h2><p>1、使用非GUI模式：jmeter -n -t test.jmx -l result.jtl</p><p>2、少使用Listener， 如果使用-l参数，它们都可以被删除或禁用。</p><p>3、在加载测试期间不要使用“查看结果树”或“查看结果”表监听器，只能在脚本阶段使用它们来调试脚本。</p><p>4、包含控制器在这里没有帮助，因为它将文件中的所有测试元素添加到测试计划中。]</p><p>5、不要使用功能模式,使用CSV输出而不是XML</p><p>6、只保存你需要的数据,尽可能少地使用断言</p><p>7、如果测试需要大量数据，可以提前准备好测试数据放到数据文件中，以CSV Read方式读取。</p><p>8、用内网压测，减少其他带宽影响压测结果</p><p>9、如果压测大流量，尽量用多几个节点以非GUI模式向服务器施压</p><p>官方推荐 ：<a href="http://jakarta.apache.org/jmeter/usermanual/best-practices.html#lean_mean" target="_blank" rel="noopener">http://jakarta.apache.org/jmeter/usermanual/best-practices.html#lean_mean</a></p><h2 id="3-把Jmtere压测结果转换为Html"><a href="#3-把Jmtere压测结果转换为Html" class="headerlink" title="3. 把Jmtere压测结果转换为Html"></a>3. 把Jmtere压测结果转换为Html</h2><p>jmeter -n -t /usr/local/software/jmeter/temp/linux_users_api.jmx -l /usr/local/software/jmeter/temp/jtl/result.jtl -e -o /usr/local/software/jmeter/temp/result讲解压测报告 html里面Dashboard的核心指标</p><h3 id="1、dashboard讲解"><a href="#1、dashboard讲解" class="headerlink" title="1、dashboard讲解"></a>1、dashboard讲解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1）Test and Report informations</span><br><span class="line">Source file：jtl文件名</span><br><span class="line">Start Time ：压测开始时间</span><br><span class="line">End Time ：压测结束时间</span><br><span class="line">Filter for display：过滤器</span><br><span class="line">Lable:sampler采样器名称</span><br><span class="line"></span><br><span class="line">2）APDEX(Application performance Index)</span><br><span class="line">apdex:应用程序性能指标,范围在0~1之间，1表示达到所有用户均满意</span><br><span class="line">T(Toleration threshold)：可接受阀值</span><br><span class="line">F(Frustration threshold)：失败阀值</span><br><span class="line"></span><br><span class="line">3）Requests Summary</span><br><span class="line">OK:成功率</span><br><span class="line">KO:失败率</span><br><span class="line">4）Statistics 统计数据</span><br><span class="line">lable:sampler采样器名称</span><br><span class="line"></span><br><span class="line">samples:请求总数，并发数*循环次数</span><br><span class="line">KO:失败次数</span><br><span class="line">Error%:失败率</span><br><span class="line"></span><br><span class="line">Average:平均响应时间</span><br><span class="line">Min:最小响应时间</span><br><span class="line">Max:最大响应时间</span><br><span class="line">90th pct: 90%的用户响应时间不会超过这个值（关注这个就可以了）</span><br><span class="line">2ms,3ms,4,5,2,6,8,3,9</span><br><span class="line"></span><br><span class="line">95th pct: 95%的用户响应时间不会超过这个值</span><br><span class="line">99th pct: 99%的用户响应时间不会超过这个值 (存在极端值)</span><br><span class="line">throughtput:Request per Second吞吐量 qps</span><br><span class="line"></span><br><span class="line">received:每秒从服务器接收的数据量</span><br><span class="line">send：每秒发送的数据量</span><br></pre></td></tr></table></figure><h3 id="2、charts讲解"><a href="#2、charts讲解" class="headerlink" title="2、charts讲解"></a>2、charts讲解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1)Over Time（随着时间的变化）</span><br><span class="line">Response Times Over Time：响应时间变化趋势</span><br><span class="line">Response Time Percentiles Over Time (successful responses)：最大，最小，平均，用户响应时间分布</span><br><span class="line">Active Threads Over Time：并发用户数趋势</span><br><span class="line">Bytes Throughput Over Time：每秒接收和请求字节数变化，蓝色表示发送，黄色表示接受</span><br><span class="line">Latencies Over Time：平均响应延时趋势</span><br><span class="line">Connect Time Over Time：连接耗时趋势</span><br><span class="line"></span><br><span class="line">1)Throughput</span><br><span class="line">Hits Per Second (excluding embedded resources):每秒点击次数</span><br><span class="line">Codes Per Second (excluding embedded resources)：每秒状态码数量</span><br><span class="line">Transactions Per Second：即TPS，每秒事务数</span><br><span class="line">Response Time Vs Request：响应时间和请求数对比</span><br><span class="line">Latency Vs Request：延迟时间和请求数对比</span><br><span class="line"></span><br><span class="line">1)Response Times</span><br><span class="line">Response Time Percentiles：响应时间百分比</span><br><span class="line">Response Time Overview：响应时间概述</span><br><span class="line">Time Vs Threads：活跃线程数和响应时间</span><br><span class="line">Response Time Distribution：响应时间分布图</span><br></pre></td></tr></table></figure><h1 id="16、Linux服务器上jmeter进行分布式压测"><a href="#16、Linux服务器上jmeter进行分布式压测" class="headerlink" title="16、Linux服务器上jmeter进行分布式压测"></a>16、Linux服务器上jmeter进行分布式压测</h1><h2 id="1、压测注意事项"><a href="#1、压测注意事项" class="headerlink" title="1、压测注意事项"></a>1、压测注意事项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">the firewalls on the systems are turned off or correct ports are opened.</span><br><span class="line">系统上的防火墙被关闭或正确的端口被打开。</span><br><span class="line"></span><br><span class="line">all the clients are on the same subnet.</span><br><span class="line">所有的客户端都在同一个子网上。</span><br><span class="line"></span><br><span class="line">the server is in the same subnet, if 192.x.x.x or 10.x.x.x IP addresses are used. If the server doesn&#39;t use 192.xx or 10.xx IP address, there shouldn&#39;t be any problems.</span><br><span class="line">如果使用192.x.x.x或10.x.x.x IP地址，则服务器位于同一子网中。 如果服务器不使用192.xx或10.xx IP地址，则不应该有任何问题。</span><br><span class="line"></span><br><span class="line">Make sure JMeter can access the server.</span><br><span class="line">确保JMeter可以访问服务器。</span><br><span class="line"></span><br><span class="line">Make sure you use the same version of JMeter and Java on all the systems. Mixing versions will not work correctly.</span><br><span class="line">确保在所有系统上使用相同版本的JMeter和Java。 混合版本将无法正常工作。</span><br><span class="line"></span><br><span class="line">You have setup SSL for RMI or disabled it.</span><br><span class="line">您已为RMI设置SSL或将其禁用。</span><br><span class="line"></span><br><span class="line">官网地址 http:&#x2F;&#x2F;jmeter.apache.org&#x2F;usermanual&#x2F;jmeter_distributed_testing_step_by_step.html</span><br><span class="line"></span><br><span class="line">压测注意事项：一定要用内网IP，不用用公网IP,用ping去检查</span><br></pre></td></tr></table></figure><h2 id="2、专业名字"><a href="#2、专业名字" class="headerlink" title="2、专业名字"></a>2、专业名字</h2><p>master:司令 slave：</p><p>奴隶 target：目标</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>地址：<a href="http://jmeter.apache.org/images/screenshots/distributed-names.svg" target="_blank" rel="noopener">http://jmeter.apache.org/images/screenshots/distributed-names.svg</a> </p><p>地址：<a href="http://jmeter.apache.org/images/screenshots/distributed-jmeter.svg" target="_blank" rel="noopener">http://jmeter.apache.org/images/screenshots/distributed-jmeter.svg</a></p><h2 id="3、远程拷贝-内网地址-："><a href="#3、远程拷贝-内网地址-：" class="headerlink" title="3、远程拷贝(内网地址)："></a>3、远程拷贝(内网地址)：</h2><p>scp -r /usr/local/software/jdk-8u141-linux-x64.tar.gz <a href="http://mailto:root@172.18.230.233" target="_blank" rel="noopener">root@172.18.230.233</a>:/usr/local/software</p><p>scp -r /usr/local/software/jmeter/apache-jmeter-4.0.tgz <a href="http://mailto:root@172.18.230.233" target="_blank" rel="noopener">root@172.18.230.233</a>:/usr/local/software/jmeter</p><h2 id="4、启动"><a href="#4、启动" class="headerlink" title="4、启动"></a>4、启动</h2><p>./jmeter-server 或者 nohup ./jmeter-server &amp;</p><h2 id="5、检查启动是否成功"><a href="#5、检查启动是否成功" class="headerlink" title="5、检查启动是否成功"></a>5、检查启动是否成功</h2><p>ps -ef|grep jmeter-server</p><p>ps aux|grep jmeter-server</p><h1 id="17、Jmeter分布式压测"><a href="#17、Jmeter分布式压测" class="headerlink" title="17、Jmeter分布式压测"></a>17、Jmeter分布式压测</h1><h2 id="本地非GUI分布式压测-r"><a href="#本地非GUI分布式压测-r" class="headerlink" title="本地非GUI分布式压测 -r"></a>本地非GUI分布式压测 -r</h2><p>jmeter -n -t /Users/jack/Desktop/remote.jmx -r -l /Users/jack/Desktop/jtl/result.jtl -e -o /Users/jack/Desktop/result</p><h2 id="压测结果"><a href="#压测结果" class="headerlink" title="压测结果"></a>压测结果</h2><p>./jmeter -n -t /Users/jack/Desktop/remote.jmx -r -l /Users/jack/Desktop/jtl/result.jtl -e -o /Users/jack/Desktop/result</p><h2 id="压测报告"><a href="#压测报告" class="headerlink" title="压测报告"></a>压测报告</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Creating summariser &lt;summary&gt;</span><br><span class="line">Created the tree successfully using &#x2F;Users&#x2F;jack&#x2F;Desktop&#x2F;remote.jmx</span><br><span class="line">Configuring remote engine: 172.20.10.3:8899</span><br><span class="line">Using local port: 8899</span><br><span class="line">Configuring remote engine: 172.20.10.11:8899</span><br><span class="line">Starting remote engines</span><br><span class="line">Starting the test @ Thu Mar 29 23:21:13 CST 2018 (1522336873931)</span><br><span class="line">Remote engines have been started</span><br><span class="line">Waiting for possible Shutdown&#x2F;StopTestNow&#x2F;Heapdump message on port 4445</span><br><span class="line">summary &#x3D;      4 in 00:00:22 &#x3D;    0.2&#x2F;s Avg:  5582 Min:    94 Max: 21006 Err:     1 (25.00%)</span><br><span class="line">Tidying up remote @ Thu Mar 29 23:21:36 CST 2018 (1522336896842)</span><br><span class="line">... end of run</span><br></pre></td></tr></table></figure><h2 id="压测修改master节点信息"><a href="#压测修改master节点信息" class="headerlink" title="压测修改master节点信息"></a>压测修改master节点信息</h2><p>jemeter.properties 值是slave机器的ip+端口号，如果有多个，用逗号分隔 remote_hosts=192.168.0.102:8899,192.168.0.101:8899 server.rmi.ssl.disable=true (前面有说到)</p><h2 id="启动slave机器，注意要同个网段，ip地址用内网ip"><a href="#启动slave机器，注意要同个网段，ip地址用内网ip" class="headerlink" title="启动slave机器，注意要同个网段，ip地址用内网ip"></a>启动slave机器，注意要同个网段，ip地址用内网ip</h2><p>./jmeter-server Using local port: 8899 Created remote object: UnicastServerRef2 [liveRef: [endpoint:<a href="http://local" target="_blank" rel="noopener">192.168.0.102:8899</a>,objID:[3a585a4d:162724586ab:-7fff, 3963132813614033916]]]</p><h2 id="相关资料："><a href="#相关资料：" class="headerlink" title="相关资料："></a>相关资料：</h2><p><a href="https://www.cnblogs.com/Fine-Chan/p/6233823.html" target="_blank" rel="noopener">https://www.cnblogs.com/Fine-Chan/p/6233823.html</a> <a href="https://blog.csdn.net/liujingqiu/article/details/52635289https://www.cnblogs.com/puresoul/p/4844539.html" target="_blank" rel="noopener">https://blog.csdn.net/liujingqiu/article/details/52635289https://www.cnblogs.com/puresoul/p/4844539.html</a></p><h1 id="18-、测试基本内容"><a href="#18-、测试基本内容" class="headerlink" title="18.、测试基本内容"></a>18.、测试基本内容</h1><p><strong>配置元件=》前置处理器=》定时器=》采样器=》后置处理器=》断言=》监听器</strong></p><h1 id="19、安装常见问题"><a href="#19、安装常见问题" class="headerlink" title="19、安装常见问题"></a>19、安装常见问题</h1><h2 id="1、问题：无法解析"><a href="#1、问题：无法解析" class="headerlink" title="1、问题：无法解析"></a>1、问题：无法解析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz95j86y235aroi85ht0Z bin]# .&#x2F;jmeter-server</span><br><span class="line">Created remote object: UnicastServerRef2 [liveRef: [endpoint:[:39308](local),objID:[24e78a63:16243c70661:-7fff, 7492480871343944173]]]</span><br><span class="line">Server failed to start: java.rmi.RemoteException: Cannot start. Unable to get local host IP address.; nested exception is:</span><br><span class="line">java.net.UnknownHostException: iZwz95j86y235aroi85ht0Z: iZwz95j86y235aroi85ht0Z: Name or service not known</span><br><span class="line">An error occurred: Cannot start. Unable to get local host IP address.; nested exception is:</span><br><span class="line">java.net.UnknownHostException: iZwz95j86y235aroi85ht0Z: iZwz95j86y235aroi85ht0Z: Name or service not known</span><br></pre></td></tr></table></figure><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hostname  命令获取机器名称，追加一个映射  iZwz95j86y235aroi85ht0Z</span><br><span class="line">vim &#x2F;etc&#x2F;hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">120.79.160.143 iZwz95j86y235aroi85ht0Z</span><br><span class="line"></span><br><span class="line">windows用户 修改c:\windows\system32\drivers\etc\hosts文件，增加一条域名 与IP的映射</span><br></pre></td></tr></table></figure><h2 id="2-问题：禁用了SSL"><a href="#2-问题：禁用了SSL" class="headerlink" title="2.问题：禁用了SSL"></a>2.问题：禁用了SSL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz95j86y235aroi85ht0Z bin]# .&#x2F;jmeter-server</span><br><span class="line">Server failed to start: java.rmi.server.ExportException: Listen failed on port: 0; nested exception is:</span><br><span class="line">java.io.FileNotFoundException: rmi_keystore.jks (No such file or directory)</span><br><span class="line">An error occurred: Listen failed on port: 0; nested exception is:</span><br><span class="line">java.io.FileNotFoundException: rmi_keystore.jks (No such file or directory)</span><br></pre></td></tr></table></figure><h3 id="解决：-1"><a href="#解决：-1" class="headerlink" title="解决："></a>解决：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">拥有RMI over SSL的有效密钥库，或者禁用了SSL。</span><br><span class="line">1、禁用SSL</span><br><span class="line">  jmeter.property里面 server.rmi.ssl.disable 改为 true，表示禁用</span><br></pre></td></tr></table></figure><h2 id="3、问题："><a href="#3、问题：" class="headerlink" title="3、问题："></a>3、问题：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ949uw2xehZ bin]# .&#x2F;jmeter</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error&#x3D;&#39;Cannot allocate memory&#39; (errno&#x3D;12)</span><br><span class="line">#</span><br><span class="line"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"># Native memory allocation (mmap) failed to map 1073741824 bytes for committing reserved memory.</span><br><span class="line"># An error report file with more information is saved as:</span><br><span class="line"># &#x2F;usr&#x2F;local&#x2F;jmeter&#x2F;apache-jmeter-4.0&#x2F;bin&#x2F;hs_err_pid5855.log</span><br></pre></td></tr></table></figure><h3 id="解决：-2"><a href="#解决：-2" class="headerlink" title="解决："></a>解决：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">编辑jmeter</span><br><span class="line">搜索 : &quot;$&#123;HEAP:&#x3D;&quot;-Xms1g -Xmx1g -XX:MaxMetaspaceSize&#x3D;256m&quot;&#125;&quot;</span><br><span class="line">改变初始堆内存和最大堆内存</span><br></pre></td></tr></table></figure><h2 id="4、仅修改-server-port-即可-下面两者一样"><a href="#4、仅修改-server-port-即可-下面两者一样" class="headerlink" title="4、仅修改 server_port 即可,下面两者一样"></a>4、仅修改 server_port 即可,下面两者一样</h2><p>server.rmi.localport=8899 表示slave server启动显示的端口</p><p>server_port=8899 表示master机器要远程连接的端口 即 remote_hosts=xxxx:8899</p><h2 id="5、—–"><a href="#5、—–" class="headerlink" title="5、—–"></a>5、—–</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- jmeter 分布式性能测试（多网卡配置） --&gt;</span><br><span class="line">我们要在多网卡的服务器上开启RMI服务的话必须指定IP，使他们能够在同一个网段内。 </span><br><span class="line"></span><br><span class="line">需要以下几步（假定所有机器都在10.120.11.*网段,agent服务器为linux,controller服务器为windows）：</span><br><span class="line"></span><br><span class="line">1、 修改agent服务器，指定agent机器的IP</span><br><span class="line">修改jmeter-server文件</span><br><span class="line"># vi jmeter-server</span><br><span class="line">修改RMI_HOST_DEF&#x3D;-Djava.rmi.server.hostname&#x3D;xxx.xxx.xxx.xxx(需要连接的IP)</span><br><span class="line"></span><br><span class="line">2、修改server服务器，指定server机器的IP</span><br><span class="line"></span><br><span class="line">修改jmeter.bat文件 </span><br><span class="line"></span><br><span class="line">新增set rmi_host&#x3D;-Djava.rmi.server.hostname&#x3D;10.120.11.214</span><br><span class="line"></span><br><span class="line">修改set ARGS&#x3D;%DUMP% %HEAP% %NEW% %SURVIVOR% %TENURING% %PERM% %DDRAW% %rmi_host%</span><br></pre></td></tr></table></figure><h2 id="6、确定在controller机器上安装jdk-版本和jmeter一致，配置环境变量：Java-home等"><a href="#6、确定在controller机器上安装jdk-版本和jmeter一致，配置环境变量：Java-home等" class="headerlink" title="6、确定在controller机器上安装jdk,版本和jmeter一致，配置环境变量：Java_home等"></a>6、确定在controller机器上安装jdk,版本和jmeter一致，配置环境变量：Java_home等</h2><ul><li>在Agent机器上安装jdk，配置环境变量：Java_home和JMeter_home</li><li>安装目录不要带空格，最好都是简短的英文路径</li></ul><h2 id="7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。"><a href="#7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。" class="headerlink" title="7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。"></a>7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果使用csv进行参数化，则需要把参数文件在每台slave上拷一份且路径需要设置成一样的。</span><br><span class="line"></span><br><span class="line">总样本数 &#x3D; 线程数 * 循环次数 * 执行机总数</span><br></pre></td></tr></table></figure><h2 id="8、连接失败原因排查"><a href="#8、连接失败原因排查" class="headerlink" title="8、连接失败原因排查"></a>8、连接失败原因排查</h2><h4 id="以下步骤进行排查："><a href="#以下步骤进行排查：" class="headerlink" title="以下步骤进行排查："></a>以下步骤进行排查：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. jmeter-server是否启动；</span><br><span class="line">2. 是否联网</span><br><span class="line">3. ping 服务器IP是否畅通.</span><br><span class="line">4. telnet 端口 192.168.3.10 1099</span><br><span class="line">5. 检查服务器的防火墙是否关闭。</span><br><span class="line">6. 阿里云安全策略是否正常</span><br></pre></td></tr></table></figure><h2 id="9、”could-not-find-ApacheJmeter-core-jar”"><a href="#9、”could-not-find-ApacheJmeter-core-jar”" class="headerlink" title="9、”could not find ApacheJmeter_core.jar”"></a>9、”could not find ApacheJmeter_core.jar”</h2><p>​    <strong>解决：在Agent机器安装jdk，并设置环境变量</strong></p><h2 id="10、”Bad-call-to-remote-host”"><a href="#10、”Bad-call-to-remote-host”" class="headerlink" title="10、”Bad call to remote host”"></a>10、”Bad call to remote host”</h2><p>解决：检查被控制机器上的jmeter-server有没有启动，或者remote_hosts的配置是否正确。</p>]]></content>
    
    <summary type="html">
    
      学习如何使用jmeter压力测试
    
    </summary>
    
    
      <category term="压力测试" scheme="http://lazytime.site/categories/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="jmeter" scheme="http://lazytime.site/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>简单分析Java的HashMap.entrySet()的实现</title>
    <link href="http://lazytime.site/2020/08/29/%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90Java%E7%9A%84HashMap-entrySet-%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://lazytime.site/2020/08/29/%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90Java%E7%9A%84HashMap-entrySet-%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-08-29T14:34:22.000Z</published>
    <updated>2020-08-29T14:37:01.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单分析Java的HashMap-entrySet-的实现"><a href="#简单分析Java的HashMap-entrySet-的实现" class="headerlink" title="简单分析Java的HashMap.entrySet()的实现"></a>简单分析Java的HashMap.entrySet()的实现</h1><p>转载自：<a href="https://blog.csdn.net/weixin_30807779/article/details/99566016" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30807779/article/details/99566016</a></p><a id="more"></a><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>map通过Entry 实现一个 &lt;K,V&gt; 的存储，通过key 的哈希值确定哈希表的数组下标，通过下标找到桶位之后，通过遍历找到相对应的Value</p><p>map是用来存储key-value类型数据的，一个&lt;k, v&gt;对在Map的接口定义中被定义为Entry，HashMap内部实现了<code>Entry</code>接口。HashMap内部维护一个<code>Entry</code>数组。</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><code>transient Entry[] table;</code> </p><p>注意关键字：<code>transient</code> 该关键字，对于此属性是不能进行序列化的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Entry[] table</span><br><span class="line">    +---+</span><br><span class="line">    | 0 | -&gt; entry_0_0 -&gt; entry_0_1 -&gt; null</span><br><span class="line">    +---+</span><br><span class="line">    | 1 | -&gt; null</span><br><span class="line">    +---+</span><br><span class="line">    |   |</span><br><span class="line"></span><br><span class="line">     ...</span><br><span class="line"></span><br><span class="line">    |n-1| -&gt; entry_n-1_0 -&gt; null</span><br><span class="line">    +---+</span><br></pre></td></tr></table></figure><p>使用map 的 entrySet() 方法，就可以获得一个<code>EntryIterator</code>类型的实例，该实例调用 <code>nextEntry()</code>方法，来获取迭代器的下一个元素。<code>EntryIterator</code>类型是泛型<code>HashIterator&lt;T&gt;</code>的一个子类，这个类的内容很简单，唯一的代码是在<code>next()</code>函数中调用了<code>HashIterator</code>的<code>nextEntry()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HashMap</span><br><span class="line">    |- table &lt;------------------------------------\</span><br><span class="line">    \+ entrySet()                                 |iterates</span><br><span class="line">        |              HashMap.HashIterator&lt;T&gt;    |</span><br><span class="line">        |returns                ^       \- nextEntry()</span><br><span class="line">        V                       -                 ^</span><br><span class="line">HashMap.EntrySet                |                 |</span><br><span class="line">    \- iterator()               |extends          |</span><br><span class="line">            |                   |                 |</span><br><span class="line">            |  instantiats      |                 |calls</span><br><span class="line">            \----------&gt; HashMap.EntryIterator    |</span><br><span class="line">                                        \- next() /</span><br></pre></td></tr></table></figure><p><code>entrySet()</code>方法返回的是一个特殊的Set，定义为HashMap的内部私有类 <code>EntryIterator</code> ,它继承自 <code>HashIterator</code> </p><p><code>HashIterator</code>通过遍历<code>table</code>数组，实现对HashMap的遍历。内部维护几个变量：<code>index</code>记录当前在<code>table</code>数组中的下标，<code>current</code>用来记录当前在<code>table[index]</code>这个链表中的位置，<code>next</code>指向current的下一个元素。<code>nextEntry()</code>的完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    Entry&lt;K,V&gt; e = next;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Entry[] t = table;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">            ;</span><br><span class="line">    &#125;</span><br><span class="line">    current = e;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从调用链路可以看出， entrySet() 最后得到的其实是一个关于 map 的一个<code>视图</code>，当他在迭代的时候，其实就是相当于对于map的元素进行查找，不会创建任何额外的空间。</p><p>同时，<code>entrySet</code> 本身也是迭代器的思想，在多线程的环境下其实是线程不安全的，这点需要注意</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote><p>为什么要对于table 进行非串行化？</p><p><a href="https://developer.aliyun.com/ask/62542?spm=a2c6h.13159736" target="_blank" rel="noopener">Java中HashMap关键字transient的疑惑</a></p><p>怎么理解? 看一下HashMap.get()/put()知道, 读写Map是根据Object.hashcode()来确定从哪个bucket读/写. 而Object.hashcode()是native方法, 不同的JVM里可能是不一样的.</p><p>打个比方说, 向HashMap存一个entry, key为 字符串”STRING”, 在第一个java程序里, “STRING”的hashcode()为1, 存入第1号bucket; 在第二个java程序里, “STRING”的hashcode()有可能就是2, 存入第2号bucket. 如果用默认的串行化(Entry[] table不用transient), 那么这个HashMap从第一个java程序里通过串行化导入第二个java程序后, 其内存分布是一样的. 这就不对了. HashMap现在的readObject和writeObject是把内容 输出/输入, 把HashMap重新生成出来.</p></blockquote><blockquote><p>关于JDK官方吧Entry 换为了Node 的讨论</p><ol><li>为什么要换为Node</li><li>更换之后和原来的设计有什么区别</li></ol><p>回答：JDK1.8 改动： 在<code>java1.8</code>中,<code>Entry</code>被<code>Node</code>替代(换了一个马甲)。</p></blockquote>]]></content>
    
    <summary type="html">
    
      hashmap的entrySet是如何实现的
    
    </summary>
    
    
      <category term="集合" scheme="http://lazytime.site/categories/%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Map" scheme="http://lazytime.site/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>如何导出表结构（navicat）</title>
    <link href="http://lazytime.site/2020/08/29/%E5%A6%82%E4%BD%95%E5%AF%BC%E5%87%BA%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%88navicat%EF%BC%89/"/>
    <id>http://lazytime.site/2020/08/29/%E5%A6%82%E4%BD%95%E5%AF%BC%E5%87%BA%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%88navicat%EF%BC%89/</id>
    <published>2020-08-29T14:02:28.000Z</published>
    <updated>2020-08-29T14:05:59.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何导出表结构（navicat）"><a href="#如何导出表结构（navicat）" class="headerlink" title="如何导出表结构（navicat）"></a>如何导出表结构（navicat）</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>我需要将表复制到 markdow 或者 word里面的时候</p><a id="more"></a><h2 id="具体使用方法："><a href="#具体使用方法：" class="headerlink" title="具体使用方法："></a>具体使用方法：</h2><ol><li>复制sql 复制到 navicat的查询里面</li><li>需要设置数据库的名称：<code>table_schema</code></li><li>需要设置导出的表名：<code>table_name</code></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">COLUMN_NAME 列名,</span><br><span class="line">COLUMN_TYPE 数据类型,</span><br><span class="line">DATA_TYPE 字段类型,</span><br><span class="line">CHARACTER_MAXIMUM_LENGTH 长度,</span><br><span class="line">IS_NULLABLE 是否为空,</span><br><span class="line">COLUMN_DEFAULT 默认值,</span><br><span class="line">COLUMN_COMMENT 备注 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">INFORMATION_SCHEMA.COLUMNS </span><br><span class="line"><span class="keyword">WHERE</span><span class="comment">-- developerclub为数据库名称，到时候只需要修改成你要导出表结构的数据库即可</span></span><br><span class="line">table_schema = <span class="string">'galaxy_education'</span> </span><br><span class="line"><span class="keyword">AND</span> <span class="comment">-- article为表名，到时候换成你要导出的表的名称</span></span><br><span class="line"><span class="comment">-- 如果不写的话，默认会查询出所有表中的数据，这样可能就分不清到底哪些字段是哪张表中的了，所以还是建议写上要导出的名名称</span></span><br><span class="line">table_name = <span class="string">'表名称'</span></span><br></pre></td></tr></table></figure><p>table_name = ‘表名称’</p><h1 id="怎么样导出数据库所有的表结构和详细信息呢"><a href="#怎么样导出数据库所有的表结构和详细信息呢" class="headerlink" title="怎么样导出数据库所有的表结构和详细信息呢?"></a>怎么样导出数据库所有的表结构和详细信息呢?</h1><p>博客地址：<br><a href="https://blog.csdn.net/cai454692590/article/details/82799638" target="_blank" rel="noopener">https://blog.csdn.net/cai454692590/article/details/82799638</a><br><a href="https://www.cnblogs.com/LeeYongze/archive/2012/07/19/2599338.html" target="_blank" rel="noopener">https://www.cnblogs.com/LeeYongze/archive/2012/07/19/2599338.html</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">     表名       = <span class="keyword">Case</span> <span class="keyword">When</span> A.colorder=<span class="number">1</span> <span class="keyword">Then</span> D.name <span class="keyword">Else</span> <span class="string">''</span> <span class="keyword">End</span>,</span><br><span class="line">     表说明     = <span class="keyword">Case</span> <span class="keyword">When</span> A.colorder=<span class="number">1</span> <span class="keyword">Then</span> <span class="keyword">isnull</span>(F.value,<span class="string">''</span>) <span class="keyword">Else</span> <span class="string">''</span> <span class="keyword">End</span>,</span><br><span class="line">     字段序号   = A.colorder,</span><br><span class="line">     字段名     = A.name,</span><br><span class="line">     字段说明   = <span class="keyword">isnull</span>(G.[<span class="keyword">value</span>],<span class="string">''</span>),</span><br><span class="line">     标识       = <span class="keyword">Case</span> <span class="keyword">When</span> COLUMNPROPERTY( A.id,A.name,<span class="string">'IsIdentity'</span>)=<span class="number">1</span> <span class="keyword">Then</span> <span class="string">'√'</span><span class="keyword">Else</span> <span class="string">''</span> <span class="keyword">End</span>,</span><br><span class="line">     主键       = <span class="keyword">Case</span> <span class="keyword">When</span> <span class="keyword">exists</span>(<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> sysobjects <span class="keyword">Where</span> xtype=<span class="string">'PK'</span> <span class="keyword">and</span> parent_obj=A.id <span class="keyword">and</span> <span class="keyword">name</span> <span class="keyword">in</span> (</span><br><span class="line">                      <span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> sysindexes <span class="keyword">WHERE</span> indid <span class="keyword">in</span>( <span class="keyword">SELECT</span> indid <span class="keyword">FROM</span> sysindexkeys <span class="keyword">WHERE</span> <span class="keyword">id</span> = A.id <span class="keyword">AND</span> colid=A.colid))) <span class="keyword">then</span> <span class="string">'√'</span> <span class="keyword">else</span> <span class="string">''</span> <span class="keyword">end</span>,</span><br><span class="line">     类型       = B.name,</span><br><span class="line">     占用字节数 = A.Length,</span><br><span class="line">     长度       = COLUMNPROPERTY(A.id,A.name,<span class="string">'PRECISION'</span>),</span><br><span class="line">     小数位数   = <span class="keyword">isnull</span>(COLUMNPROPERTY(A.id,A.name,<span class="string">'Scale'</span>),<span class="number">0</span>),</span><br><span class="line">     允许空     = <span class="keyword">Case</span> <span class="keyword">When</span> A.isnullable=<span class="number">1</span> <span class="keyword">Then</span> <span class="string">'√'</span><span class="keyword">Else</span> <span class="string">''</span> <span class="keyword">End</span>,</span><br><span class="line">     默认值     = <span class="keyword">isnull</span>(E.Text,<span class="string">''</span>)</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">     syscolumns A</span><br><span class="line"> <span class="keyword">Left</span> <span class="keyword">Join</span></span><br><span class="line">     systypes B</span><br><span class="line"> <span class="keyword">On</span></span><br><span class="line">     A.xusertype=B.xusertype</span><br><span class="line"> <span class="keyword">Inner</span> <span class="keyword">Join</span></span><br><span class="line">     sysobjects D</span><br><span class="line"> <span class="keyword">On</span></span><br><span class="line">     A.id=D.id  <span class="keyword">and</span> D.xtype=<span class="string">'U'</span> <span class="keyword">and</span>  D.name&lt;&gt;<span class="string">'dtproperties'</span></span><br><span class="line"> <span class="keyword">Left</span> <span class="keyword">Join</span></span><br><span class="line">     syscomments E</span><br><span class="line"> <span class="keyword">on</span></span><br><span class="line">     A.cdefault=E.id</span><br><span class="line"> <span class="keyword">Left</span> <span class="keyword">Join</span></span><br><span class="line"> sys.extended_properties  G</span><br><span class="line"> <span class="keyword">on</span></span><br><span class="line">     A.id=G.major_id <span class="keyword">and</span> A.colid=G.minor_id</span><br><span class="line"> <span class="keyword">Left</span> <span class="keyword">Join</span></span><br><span class="line"></span><br><span class="line"> sys.extended_properties F</span><br><span class="line"> <span class="keyword">On</span></span><br><span class="line">     D.id=F.major_id <span class="keyword">and</span> F.minor_id=<span class="number">0</span></span><br><span class="line">     <span class="comment">--where d.name='OrderInfo'    --如果只查询指定表,加上此条件</span></span><br><span class="line"> <span class="keyword">Order</span> <span class="keyword">By</span></span><br><span class="line">     A.id,A.colorder</span><br></pre></td></tr></table></figure><h1 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h1><p>以mysql为例，根据sql的内容。</p><p>根据示例的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">COLUMN_NAME 列名,</span><br><span class="line">COLUMN_TYPE 数据类型,</span><br><span class="line">DATA_TYPE 字段类型,</span><br><span class="line">CHARACTER_MAXIMUM_LENGTH 长度,</span><br><span class="line">IS_NULLABLE 是否为空,</span><br><span class="line">COLUMN_DEFAULT 默认值,</span><br><span class="line">COLUMN_COMMENT 备注 </span><br><span class="line">FROM</span><br><span class="line">INFORMATION_SCHEMA.COLUMNS </span><br><span class="line">WHERE-- developerclub为数据库名称，到时候只需要修改成你要导出表结构的数据库即可</span><br><span class="line">table_schema &#x3D; &#39;hotel&#39; </span><br><span class="line">AND -- article为表名，到时候换成你要导出的表的名称</span><br><span class="line">-- 如果不写的话，默认会查询出所有表中的数据，这样可能就分不清到底哪些字段是哪张表中的了，所以还是建议写上要导出的名名称</span><br><span class="line">table_name &#x3D; &#39;orders&#39;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200829215314.png" alt=""></p><p>点击<code>导出向导</code></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200829215354.png" alt=""></p><p>选择需要导出的内容，根据所需导出，即可，我这里选择导出<code>excel</code></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200829215901.png" alt=""></p><p>我们可以将导出的内容贴到md 里面</p><table><thead><tr><th>列名</th><th>数据类型</th><th>字段类型</th><th>长度</th><th>是否为空</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>int</td><td></td><td>NO</td><td></td><td></td></tr><tr><td>table_id</td><td>int(11)</td><td>int</td><td></td><td>YES</td><td></td><td></td></tr><tr><td>orderDate</td><td>datetime</td><td>datetime</td><td></td><td>YES</td><td></td><td></td></tr><tr><td>totalPrice</td><td>double</td><td>double</td><td></td><td>YES</td><td></td><td></td></tr><tr><td>orderStatus</td><td>int(11)</td><td>int</td><td></td><td>YES</td><td>0</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      如何导出表结构（navicat）
    
    </summary>
    
    
      <category term="数据库" scheme="http://lazytime.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://lazytime.site/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>2020 轻薄本怎么选</title>
    <link href="http://lazytime.site/2020/08/29/2020-%E8%BD%BB%E8%96%84%E6%9C%AC%E6%80%8E%E4%B9%88%E9%80%89/"/>
    <id>http://lazytime.site/2020/08/29/2020-%E8%BD%BB%E8%96%84%E6%9C%AC%E6%80%8E%E4%B9%88%E9%80%89/</id>
    <published>2020-08-29T13:27:02.000Z</published>
    <updated>2020-08-29T14:05:44.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2020-轻薄本怎么选"><a href="#2020-轻薄本怎么选" class="headerlink" title="2020 轻薄本怎么选"></a>2020 轻薄本怎么选</h1><h2 id="前情提示"><a href="#前情提示" class="headerlink" title="前情提示"></a>前情提示</h2><p><a href="https://post.smzdm.com/p/adwgq48z/?send_by=2270678428&amp;from=other&amp;invite_code=zdm33d96vsinv" target="_blank" rel="noopener">https://post.smzdm.com/p/adwgq48z/?send_by=2270678428&amp;from=other&amp;invite_code=zdm33d96vsinv</a></p><h2 id="追求性价比："><a href="#追求性价比：" class="headerlink" title="追求性价比："></a>追求性价比：</h2><p>2999元：联想扬天V14（AMD）</p><p>3400元： 战66（AMD）</p><p>3700元：联想小新air14或ThinkPad E14（AMD ）</p><p>4200元：小新pro13（AMD）</p><p>4500元：ThinkPad T14（AMD）</p><p>4700元：惠普战X（AMD）</p><p>4999元：华为matebook14（AMD）</p><p>4999元：ThinkPad X13（AMD）</p><p>5671元：ThinkPad T14s（AMD）</p><p>8099元：官翻MacBook pro13（intel），没错，我认为它具备一定性价比</p><a id="more"></a><h2 id="具有intel平台需求"><a href="#具有intel平台需求" class="headerlink" title="具有intel平台需求"></a>具有intel平台需求</h2><p>3400元： 宏碁 传奇14（intel）</p><p>3499元：宏碁 墨舞 14（intel）</p><p>4399元：宏碁 蜂鸟3（intel）</p><p>5000元以内：戴尔latitude 7300、7400（intel）</p><p>5299元：thinkpad S2（intel）</p><p>5679元：Matebook 14（intel）</p><h3 id="具体分析："><a href="#具体分析：" class="headerlink" title="具体分析："></a>具体分析：</h3><h4 id="联想扬天V14（AMD）"><a href="#联想扬天V14（AMD）" class="headerlink" title="联想扬天V14（AMD）"></a>联想扬天V14（AMD）</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li><strong>便宜；</strong></li><li>3个标准USB接口，内存硬盘可拓展</li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><strong>缺点：</strong></h5><ul><li>没有typec</li><li>电池容量小；</li><li>重达2kg</li></ul><h4 id="3424元-战66三代"><a href="#3424元-战66三代" class="headerlink" title="3424元 战66三代"></a>3424元 战66三代</h4><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ul><li>老模具，因此支持2.5寸硬盘拓展，双内存插槽</li><li>有屏幕色彩需求可以买高色域版本，400nit 100%srgb还不错</li><li>接口齐全：三个标准USB接口，一个全功能typec接口、一个hdmi1.4、一个标准RJ45、一个SD<a href="https://www.smzdm.com/fenlei/dukaqi/" target="_blank" rel="noopener">读卡器</a></li><li>物理防窥<a href="https://www.smzdm.com/fenlei/shexiangtou/" target="_blank" rel="noopener">摄像头</a></li><li>标配防泼溅背光键盘</li></ul><h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>惠普祖传的垃圾上下方向键；</li><li><strong>老模具，所以额头和下巴都很宽，体重和尺寸略次于友商；</strong></li><li>45wh电池，续航捉急</li><li>HDMI 1.4只支持到4k@30hz，不支持4K@60hz</li><li>散热和性能释放捉急，4700u还不如小新的4600u性能强，详见<a href="https://www.notebookcheck.net/HP-ProBook-445-G7-laptop-review-Moving-forward-with-Renoir.483145.0.html" target="_blank" rel="noopener">notebookcheck的评测</a></li></ul><h4 id="3234元宏碁-传奇"><a href="#3234元宏碁-传奇" class="headerlink" title="3234元宏碁 传奇"></a>3234元宏碁 传奇</h4><h5 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h5><ul><li>屏幕边框很窄</li><li><strong>非常轻薄：</strong>重1.2kg、厚15.9mm</li><li>wifi6网卡</li><li>接口齐全：1个USB2.0，一个USB3.0接口，一个全功能typec接口、一个hdmi、一个<strong>独立电源接口</strong></li><li>标配背光键盘</li></ul><h5 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>屏幕色域低；</li><li>板载内存不可更换</li></ul><h4 id="3459元-宏碁-墨舞"><a href="#3459元-宏碁-墨舞" class="headerlink" title="3459元 宏碁 墨舞"></a>3459元 宏碁 墨舞</h4><h3 id="优点：-3"><a href="#优点：-3" class="headerlink" title="优点："></a>优点：</h3><ul><li>一个内存槽可扩展；</li><li>接口丰富、Wifi6；</li><li>支持SSD+HDD；</li><li>180度翻转机身</li><li>14寸窄边框IPS；</li><li>带一年上门；</li></ul><h3 id="缺点：-3"><a href="#缺点：-3" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>低色域屏幕</li></ul><h4 id="3649元-小新air14"><a href="#3649元-小新air14" class="headerlink" title="3649元 小新air14"></a>3649元 小新air14</h4><h5 id="优点：-4"><a href="#优点：-4" class="headerlink" title="优点："></a>优点：</h5><ul><li>性能释放强</li><li>接口配置中规中矩</li><li>大电池</li><li>高色域屏幕</li><li>双通道大内存</li></ul><h5 id="缺点：-4"><a href="#缺点：-4" class="headerlink" title="缺点："></a>缺点：</h5><ul><li><p>品控翻车厉害</p></li><li><p>作为商务办公不是很适合</p></li><li><p>京东售价比较贵</p></li></ul><h4 id="3699-ThinkPad-E14"><a href="#3699-ThinkPad-E14" class="headerlink" title="3699 ThinkPad E14"></a>3699 ThinkPad E14</h4><h5 id="优点：-5"><a href="#优点：-5" class="headerlink" title="优点："></a>优点：</h5><ul><li>默认ssd为2242 pcie3.0 x4，提供2280规格的空余插槽，T系列的2242接口只是pcie3.0 x2；</li><li>机身做工不错，而且D壳为镁铝合金，对比之下T14为塑料壳；</li><li>板载+内存插槽的配置；</li><li>键盘手感不错、指点杆。</li></ul><h5 id="缺点：-5"><a href="#缺点：-5" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>45wh电池，续航约4小时；</li><li>HDMI接口不支持4k@60hz</li><li>只有一个typec接口，充电和typec不可兼得</li><li>USB接口中阉割一个为USB2.0</li><li>250nit低色域屏幕</li></ul><h4 id="4169元-小新pro13"><a href="#4169元-小新pro13" class="headerlink" title="4169元 小新pro13"></a>4169元 小新pro13</h4><h5 id="优点：-6"><a href="#优点：-6" class="headerlink" title="优点："></a>优点：</h5><ul><li>屏幕素质好</li><li>续航足</li><li>性能释放好， 4800H的处理器</li><li>性价比神机</li></ul><h5 id="缺点：-6"><a href="#缺点：-6" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>接口不足</li></ul><h4 id="4399元-宏碁蜂鸟3，intel平台真香机"><a href="#4399元-宏碁蜂鸟3，intel平台真香机" class="headerlink" title="4399元 宏碁蜂鸟3，intel平台真香机"></a>4399元 宏碁蜂鸟3，intel平台真香机</h4><h5 id="优点：-7"><a href="#优点：-7" class="headerlink" title="优点："></a>优点：</h5><ul><li>屏幕好</li><li>3.2的屏幕占比</li><li>机身支持0-180度开合角，背光键盘下侧配有指纹识别模块（静态按压式）。接口方面，蜂鸟3支持wifi6，配备1×USB2.0+1×USB3.2 Gen1，1×Thunderbolt3，HDMI<em>1，*</em>具有独立电源口**</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>散热问题</li><li>性能比较差</li></ul><h4 id="4450元-ThinkPad-T14-4650u-8G-512G"><a href="#4450元-ThinkPad-T14-4650u-8G-512G" class="headerlink" title="4450元 ThinkPad T14 4650u+8G+512G"></a>4450元 ThinkPad T14 4650u+8G+512G</h4><h5 id="优点：-8"><a href="#优点：-8" class="headerlink" title="优点："></a>优点：</h5><ul><li>thinkpad 键盘和指点杆加成</li><li>双热管散热系统，实际性能释放优于战66、X13、T14s，弱于小新系列</li><li>板载+空余内存插槽</li><li>双全功能typec+双usb3.0+HDMI 2.0+标准RJ45接口，接口配置吊打友商</li></ul><h5 id="缺点：-7"><a href="#缺点：-7" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>250nit45%NTSC低色域屏幕</li><li>阉割背光键盘</li><li>塑料外壳</li><li>阉割2242带宽</li></ul><h4 id="4799元-惠普-战X-14寸-4650U-16G-512G"><a href="#4799元-惠普-战X-14寸-4650U-16G-512G" class="headerlink" title="4799元 惠普 战X 14寸 4650U+16G+512G"></a>4799元 惠普 战X 14寸 4650U+16G+512G</h4><h5 id="优点：-9"><a href="#优点：-9" class="headerlink" title="优点："></a>优点：</h5><ul><li>机身做工好；</li><li>内部扩展性和接口扩展性都不错</li><li>性价比高</li></ul><h5 id="缺点：-8"><a href="#缺点：-8" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>电源键和上下方向键设计不合理</li><li>单风扇、单根长热管预计散热能力一般</li><li>没有RJ45标准网络接口</li></ul><h4 id="4999元-华为matebook14-锐龙版"><a href="#4999元-华为matebook14-锐龙版" class="headerlink" title="4999元 华为matebook14 锐龙版"></a>4999元 华为matebook14 锐龙版</h4><h5 id="优点：-10"><a href="#优点：-10" class="headerlink" title="优点："></a>优点：</h5><ul><li>性能释放出色；</li><li>体积重量控制不错；</li><li>高屏占比、高素质屏幕；</li></ul><h5 id="缺点：-9"><a href="#缺点：-9" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>typec和HDMI接口阉割；</li><li>摄像头位置太尴尬；</li></ul><h4 id="4999元-Thinkpad-X13-4650u-16G-512G"><a href="#4999元-Thinkpad-X13-4650u-16G-512G" class="headerlink" title="4999元 Thinkpad X13 4650u+16G+512G"></a>4999元 Thinkpad X13 4650u+16G+512G</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>thinkpad 键盘和指点杆加成</li><li>镁合金外壳</li><li>100%srgb屏幕</li><li>双全功能typec+双usb3.0+HDMI 2.0+mini RJ45接口，接口配置吊打友商</li></ul><h5 id="缺点：-10"><a href="#缺点：-10" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>单热管散热，性能释放捉急；</li><li>无背光键盘</li></ul><h4 id="5299元-S2-2020-i5-10210u-16G-512G-触控"><a href="#5299元-S2-2020-i5-10210u-16G-512G-触控" class="headerlink" title="5299元 S2 2020 i5-10210u+16G+512G+触控"></a>5299元 S2 2020 i5-10210u+16G+512G+触控</h4><h5 id="优点：-11"><a href="#优点：-11" class="headerlink" title="优点："></a><strong>优点：</strong></h5><ul><li>背光键盘；</li><li>300nit 100%SRGB触屏；</li><li>金属A面；</li></ul><h5 id="缺点：-11"><a href="#缺点：-11" class="headerlink" title="缺点："></a><strong>缺点：</strong></h5><ul><li><strong>机身塑料感重；</strong></li><li><strong>接口阉割了雷电3；</strong></li><li>2020年，低压i5确实性能是一般的</li></ul><h4 id="5679：Matebook-14（intel）"><a href="#5679：Matebook-14（intel）" class="headerlink" title="5679：Matebook 14（intel）"></a>5679：Matebook 14（intel）</h4><h5 id="优点：-12"><a href="#优点：-12" class="headerlink" title="优点："></a>优点：</h5><ul><li>屏幕不错；</li><li>一碰传有意思；</li></ul><h5 id="缺点：-12"><a href="#缺点：-12" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>接口稀少而且规格<strong>营养不良</strong>；</li><li>性能释放一般</li></ul><h4 id="5000以内-戴尔latitude-7300、7400"><a href="#5000以内-戴尔latitude-7300、7400" class="headerlink" title="5000以内 戴尔latitude 7300、7400"></a>5000以内 戴尔latitude 7300、7400</h4><p>不做推荐，因为美版官翻比国行便宜</p><h4 id="空缺的海淘XPS13-和海淘X1carbon"><a href="#空缺的海淘XPS13-和海淘X1carbon" class="headerlink" title="空缺的海淘XPS13 和海淘X1carbon"></a>空缺的海淘XPS13 和海淘X1carbon</h4><p>不做推荐</p><h4 id="8099元-官翻MacBook-pro13"><a href="#8099元-官翻MacBook-pro13" class="headerlink" title="8099元 官翻MacBook pro13"></a>8099元 官翻MacBook pro13</h4><p>如果买的到确实极具性价比</p>]]></content>
    
    <summary type="html">
    
      如何选择笔记本
    
    </summary>
    
    
      <category term="日常" scheme="http://lazytime.site/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="笔记本" scheme="http://lazytime.site/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>显示器怎么选？</title>
    <link href="http://lazytime.site/2020/08/22/%E6%98%BE%E7%A4%BA%E5%99%A8%E6%80%8E%E4%B9%88%E9%80%89%EF%BC%9F/"/>
    <id>http://lazytime.site/2020/08/22/%E6%98%BE%E7%A4%BA%E5%99%A8%E6%80%8E%E4%B9%88%E9%80%89%EF%BC%9F/</id>
    <published>2020-08-22T13:10:06.000Z</published>
    <updated>2020-08-22T13:12:30.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一图流："><a href="#一图流：" class="headerlink" title="一图流："></a>一图流：</h1><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200822204710.png?ynotemdtimestamp=1598060052847" alt="img"></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200822204751.png?ynotemdtimestamp=1598060052847" alt="img"></p><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>选显示器要注意以下几点：</p><ol><li>自己的需求：看电影？办公？打游戏</li><li>尺寸大小</li><li>性价比</li></ol><h2 id="屏幕厂商的排行"><a href="#屏幕厂商的排行" class="headerlink" title="屏幕厂商的排行"></a>屏幕厂商的排行</h2><p>一线：三星、LG、夏普、友达</p><p>二线：京东方、</p><p>二点五线：奇美（原因是屏幕普遍偏黄，偏暖）</p><h1 id="电脑尺寸："><a href="#电脑尺寸：" class="headerlink" title="电脑尺寸："></a>电脑尺寸：</h1><h2 id="1M-以下的桌子"><a href="#1M-以下的桌子" class="headerlink" title="1M 以下的桌子"></a>1M 以下的桌子</h2><ol><li>15、16、17 寸</li><li>最好不要超过27寸</li></ol><h2 id="1M以上的桌子（1-2M-0-6）"><a href="#1M以上的桌子（1-2M-0-6）" class="headerlink" title="1M以上的桌子（1.2M - *0.6）"></a>1M以上的桌子（1.2M - *0.6）</h2><ol><li>27 寸</li><li>29寸</li></ol><h2 id="1-4M-0-8m"><a href="#1-4M-0-8m" class="headerlink" title="1.4M * 0.8m"></a>1.4M * 0.8m</h2><p>32 寸以上</p><h1 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h1><h2 id="NTSC"><a href="#NTSC" class="headerlink" title="NTSC:"></a>NTSC:</h2><p>是一种美国的电视的标准，一般认为72%的NTSC就可以认为是高色准的屏幕，而设计类专业也最好以这一标准为参考</p><p>低色域：45%</p><p>高色域：72%</p><h2 id="sRGB"><a href="#sRGB" class="headerlink" title="sRGB:"></a>sRGB:</h2><p>微软联合HP、三菱、爱普生等厂商联合开发的sRGB(<em>standard Red GreenBlue</em>)通用色彩标准，受微软强大用户群体的影响力的威慑，绝大多数的数码图像采集设备厂<a href="https://baike.baidu.com/item/商都" target="_blank" rel="noopener">商都</a>已经全线支持sRGB标准</p><p>标准值：越接近100%说明色彩管理越好，而更高的则认为色域更好</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200822205047.png?ynotemdtimestamp=1598060052847" alt="img"></p><h2 id="色差："><a href="#色差：" class="headerlink" title="色差："></a>色差：</h2><p>使用deltaE =&gt; △E</p><p>△E&gt; 大于6：人眼可辨的色差</p><p>△E &gt; 6 and △E &lt; 3 ：经过专业训练的人员可以辨别</p><p>△E &lt; 3 ：肉眼以及专业训练基本看不出色差的屏幕</p><p>专业设计</p><p>△E &lt; 1 :基本无法分辨</p><h1 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h1><p>1920*1080 =&gt; 24 寸</p><h1 id="刷新率"><a href="#刷新率" class="headerlink" title="刷新率"></a>刷新率</h1><p>计算方式：1秒可以刷新多少次</p><blockquote><p>例如：</p><p>60HZ 代表一秒可以显示60张图片</p><p>144HZ 代表一秒可以显示144张图片</p><p>越高的刷新率对于FPS游戏有很大的影响</p></blockquote><h2 id="灰阶响应时间："><a href="#灰阶响应时间：" class="headerlink" title="灰阶响应时间："></a>灰阶响应时间：</h2><p>简单概括：红绿蓝三原色切换的时间</p><p>响应时间：这个表现的事灰阶的响应时间</p><h1 id="面板类型："><a href="#面板类型：" class="headerlink" title="面板类型："></a>面板类型：</h1><h2 id="TN"><a href="#TN" class="headerlink" title="TN:"></a>TN:</h2><p>TN屏作为旧时代的产物本来应该淘汰了，但是由于电竞行业的兴起，又重回市场</p><p>优点：</p><ol><li>价格便宜</li><li>延迟低（可以达到最低的1 ms）</li></ol><p>缺点：</p><ol><li>可视角度低</li><li>色差大，色彩表现不佳</li></ol><h2 id="IPS："><a href="#IPS：" class="headerlink" title="IPS："></a>IPS：</h2><p>优点：</p><ol><li>可视角度大</li><li>色彩表现基VA和TN屏幕之间</li><li>目前主流屏幕</li></ol><p>缺点：</p><ol><li>屏幕漏光，不可避免</li></ol><h2 id="VA："><a href="#VA：" class="headerlink" title="VA："></a>VA：</h2><p>优点：</p><ol><li>色彩表现比IPS更好</li><li>多为曲面屏</li></ol><p>缺点：</p><ol><li>响应低</li><li>基本为三星屏幕</li></ol><h2 id="PLS："><a href="#PLS：" class="headerlink" title="PLS："></a>PLS：</h2><p>整体类似IPS</p><h1 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h1><h2 id="Free-sync"><a href="#Free-sync" class="headerlink" title="Free-sync"></a>Free-sync</h2><p>AMD研发</p><p>FreeSync<a href="https://baike.baidu.com/item/显示器/362722" target="_blank" rel="noopener">显示器</a>是指自身搭载FreeSync技术的显示设备，此类显示器特点在于能够解决画面撕裂以及卡顿等问题</p><h2 id="G-sync"><a href="#G-sync" class="headerlink" title="G-sync:"></a>G-sync:</h2><p>英特尔研发</p><blockquote><p>两者都只有在<strong>DP</strong>接口下面才会有作用</p></blockquote><h1 id="参考视频优选"><a href="#参考视频优选" class="headerlink" title="参考视频优选"></a>参考视频优选</h1><p><a href="https://www.bilibili.com/video/BV1b4411978M/?spm_id_from=trigger_reload" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1b4411978M/?spm_id_from=trigger_reload</a></p>]]></content>
    
    <summary type="html">
    
      显示器怎么选？
    
    </summary>
    
    
      <category term="未分类" scheme="http://lazytime.site/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="无" scheme="http://lazytime.site/tags/%E6%97%A0/"/>
    
  </entry>
  
  <entry>
    <title>RestTemplate使用</title>
    <link href="http://lazytime.site/2020/08/22/RestTemplate%E4%BD%BF%E7%94%A8/"/>
    <id>http://lazytime.site/2020/08/22/RestTemplate%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-22T11:34:40.000Z</published>
    <updated>2020-08-22T11:39:40.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RestTemplate介绍"><a href="#RestTemplate介绍" class="headerlink" title="RestTemplate介绍"></a><code>RestTemplate</code>介绍</h1><h2 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h2><p><a href="https://juejin.im/post/6844903842065154061" target="_blank" rel="noopener">https://juejin.im/post/6844903842065154061</a> 掘金</p><a id="more"></a><h2 id="认识-RestTemplate"><a href="#认识-RestTemplate" class="headerlink" title="认识 RestTemplate"></a>认识 <code>RestTemplate</code></h2><p>简要改过：HTTP请求工具，封装了HttpClient请求的一系列方法</p><p>所属：<a href="http://spring.web" target="_blank" rel="noopener">spring.web</a> 包 4.1.3 之后</p><p><strong>Spring Framework 3.0之后才开始引入</strong></p><h2 id="为什么会出现RestTemplate"><a href="#为什么会出现RestTemplate" class="headerlink" title="为什么会出现RestTemplate"></a>为什么会出现<code>RestTemplate</code></h2><ol><li>最大的作用就是简化Http请求。</li><li>无需自己编写底层</li><li>开箱即用</li></ol><h2 id="Spring-5-0之后的改变"><a href="#Spring-5-0之后的改变" class="headerlink" title="Spring 5.0之后的改变"></a>Spring 5.0之后的改变</h2><p>5.0之后，官方更加推荐应对非阻塞响应式的 HTTP 请求处理类 <code>org.springframework.web.reactive.client.WebClient</code>来处理</p><h2 id="一些常用API"><a href="#一些常用API" class="headerlink" title="一些常用API"></a>一些常用API</h2><p>其中多数是单个方法重载实现，这里我主要参考官方文档 <a href="https://docs.spring.io/spring/docs/5.1.6.RELEASE/spring-framework-reference/integration.html#rest-client-access" target="_blank" rel="noopener">rest-client-access</a> 进行如下分类：</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>getForObject</code></td><td>通过 GET 请求获得响应结果</td></tr><tr><td><code>getForEntity</code></td><td>通过 GET 请求获取 <code>ResponseEntity</code> 对象，包容有状态码，响应头和响应数据</td></tr><tr><td><code>headForHeaders</code></td><td>以 HEAD 请求资源返回所有响应头信息</td></tr><tr><td><code>postForLocation</code></td><td>用 POST 请求创建资源，并返回响应数据中响应头的字段 <code>Location</code>的数据</td></tr><tr><td><code>postForObject</code></td><td>通过 POST 请求创建资源，获得响应结果</td></tr><tr><td><code>put</code></td><td>通过 PUT 方式请求来创建或者更新资源</td></tr><tr><td><code>patchForObject</code></td><td>通过 PATH 方式请求来更新资源，并获得响应结果。(JDK <code>HttpURLConnection</code> 不支持 PATH 方式请求，其他 HTTP 客户端库支持)</td></tr><tr><td><code>delete</code></td><td>通过 DELETE 方式删除资源</td></tr><tr><td><code>optionsForAllow</code></td><td>通过 ALLOW 方式请求来获得资源所允许访问的所有 HTTP 方法，可用看某个请求支持哪些请求方式</td></tr><tr><td><code>exchange</code></td><td>更通用版本的请求处理方法，接受一个 <code>RequestEntity</code> 对象，可以设置路径，请求头，请求信息等，最后返回一个 <code>ResponseEntity</code> 实体</td></tr><tr><td><code>execute</code></td><td>最通用的执行 HTTP 请求的方法，上面所有方法都是基于 <code>execute</code>的封装，全面控制请求信息，并通过回调接口获得响应数据</td></tr></tbody></table><h2 id="常见用法："><a href="#常见用法：" class="headerlink" title="常见用法："></a>常见用法：</h2><h3 id="GET-请求："><a href="#GET-请求：" class="headerlink" title="GET 请求："></a>GET 请求：</h3><h4 id="使用GET请求获取JSON字符串"><a href="#使用GET请求获取JSON字符串" class="headerlink" title="使用GET请求获取JSON字符串:"></a>使用GET请求获取JSON字符串:</h4><p>我们只需要调用：<code>getForObject</code>即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String forObject &#x3D; build.getForObject(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;, String.class);</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h4 id="使用GET请求获取JSON映射对象："><a href="#使用GET请求获取JSON映射对象：" class="headerlink" title="使用GET请求获取JSON映射对象："></a>使用GET请求获取JSON映射对象：</h4><p>只需要将后面的参数改为 对应实体对象即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Product forObject &#x3D; build.getForObject(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;, Product.class);</span><br></pre></td></tr></table></figure><h4 id="使用GET请求获取更加详细的Entity对象"><a href="#使用GET请求获取更加详细的Entity对象" class="headerlink" title="使用GET请求获取更加详细的Entity对象"></a>使用GET请求获取更加详细的Entity对象</h4><p>使用<code>getForEntity</code>即可获取更为详细的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResponseEntity&lt;String&gt; forEntity &#x3D; build.getForEntity(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;, String.class);</span><br></pre></td></tr></table></figure><h4 id="构建自定义的请求头："><a href="#构建自定义的请求头：" class="headerlink" title="构建自定义的请求头："></a>构建自定义的请求头：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MultiValueMap header &#x3D; new LinkedMultiValueMap();</span><br><span class="line">       header.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">       HttpEntity&lt;Object&gt; requestEntity &#x3D; new HttpEntity&lt;&gt;(header);</span><br></pre></td></tr></table></figure><h4 id="构建自定义请求header"><a href="#构建自定义请求header" class="headerlink" title="构建自定义请求header"></a>构建自定义请求header</h4><p>一般使用<code>exchange</code>的相关方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ResponseEntity&lt;String&gt; exchange &#x3D; build.exchange(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;, HttpMethod.GET, requestEntity, String.class);</span><br><span class="line">        System.out.println(&quot;get_product1返回结果：&quot; + exchange);</span><br></pre></td></tr></table></figure><h4 id="手动处理请求头以及返回信息"><a href="#手动处理请求头以及返回信息" class="headerlink" title="手动处理请求头以及返回信息"></a>手动处理请求头以及返回信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">build.execute(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;, HttpMethod.GET, request -&gt; &#123;</span><br><span class="line">            request.getHeaders().add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        &#125;, response -&gt; &#123;</span><br><span class="line">            HttpStatus statusCode &#x3D; response.getStatusCode();</span><br><span class="line">            int value &#x3D; statusCode.value();</span><br><span class="line">            System.err.println(&quot;响应code: &#x3D; &quot; + value);</span><br><span class="line">            return value;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这里有两个比较关键的接口</p><p><strong>RequestCallback requestCallback,</strong></p><p><strong>ResponseExtractor<T> responseExtractor</strong></p><p>可以使用lambada 表达式简化，或者使用匿名内部类</p><h4 id="使用带参数的Get请求"><a href="#使用带参数的Get请求" class="headerlink" title="使用带参数的Get请求"></a>使用带参数的Get请求</h4><ol><li>首先我们需要定义占位符</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url &#x3D;&quot;htttp:&#x2F;&#x2F;localhost:8080?id&#x3D;&#123;id&#125;&quot;</span><br></pre></td></tr></table></figure><p>注意{id} 的写法,有点像<code>@PathValiable</code> 的写法</p><h5 id="使用动态参数："><a href="#使用动态参数：" class="headerlink" title="使用动态参数："></a>使用动态参数：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 带参数的GET请求</span><br><span class="line">String url &#x3D; &quot;http:&#x2F;&#x2F;localhost:7474?id&#x3D;&#123;id&#125;&quot;;</span><br><span class="line">build.getForObject(url, String.class, 11);</span><br></pre></td></tr></table></figure><h5 id="使用map设置参数"><a href="#使用map设置参数" class="headerlink" title="使用map设置参数"></a>使用map设置参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用map 设置参数</span><br><span class="line">Map&lt;String, Object&gt; uriVariables &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">uriVariables.put(&quot;id&quot;, 101);</span><br><span class="line">build.getForObject(url, String.class, uriVariables);</span><br></pre></td></tr></table></figure><h3 id="POST-请求："><a href="#POST-请求：" class="headerlink" title="POST 请求："></a>POST 请求：</h3><p>Post请求相对GET请求有更多的变化，这里也是列出日常开放比较常用的点</p><h4 id="发送-Content-Type-为-application-x-www-form-urlencoded的-POST-请求："><a href="#发送-Content-Type-为-application-x-www-form-urlencoded的-POST-请求：" class="headerlink" title="发送 Content-Type 为 application/x-www-form-urlencoded的 POST 请求："></a>发送 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded</code>的 POST 请求：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置请求头</span><br><span class="line">MultiValueMap multiValueMap &#x3D; new LinkedMultiValueMap();</span><br><span class="line">multiValueMap.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED_VALUE);</span><br><span class="line"></span><br><span class="line">User user &#x3D; new User();</span><br><span class="line">&#x2F;&#x2F;方式二： 将请求参数值以 K&#x3D;V 方式用 &amp; 拼接，发送请求使用</span><br><span class="line">String productStr &#x3D; &quot;id&#x3D;&quot; +  user.getId() + &quot;&amp;name&#x3D;&quot; + user.getName() + &quot;&amp;price&#x3D;&quot; + user.getSalt();</span><br><span class="line">&#x2F;&#x2F; 构建form参数的url</span><br><span class="line">HttpEntity&lt;String&gt; request &#x3D; new HttpEntity&lt;&gt;(productStr, header);</span><br><span class="line">ResponseEntity&lt;String&gt; exchange1 &#x3D; build.exchange(url, HttpMethod.POST, request, String.class);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方式3 ，使用map</span><br><span class="line">&#x2F;&#x2F; 构建form参数的url</span><br><span class="line">HttpEntity&lt;String&gt; request &#x3D; new HttpEntity&lt;&gt;(productStr, header);</span><br><span class="line">ResponseEntity&lt;String&gt; exchange1 &#x3D; build.exchange(url, HttpMethod.POST, request, String.class);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; stringObjectMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">stringObjectMap.put(&quot;test&quot;, &quot;123&quot;);</span><br><span class="line">stringObjectMap.put(&quot;test1&quot;, &quot;123&quot;);</span><br><span class="line">stringObjectMap.put(&quot;test2&quot;, &quot;123&quot;);</span><br><span class="line">HttpEntity httpEntity &#x3D; new HttpEntity&lt;&gt;(stringObjectMap, header);</span><br><span class="line">ResponseEntity exchange2 &#x3D; build.exchange(url, HttpMethod.POST, httpEntity, String.class);</span><br></pre></td></tr></table></figure><h4 id="发送-Content-Type-为-application-json-的-POST-请求："><a href="#发送-Content-Type-为-application-json-的-POST-请求：" class="headerlink" title="发送 Content-Type 为 application/json 的 POST 请求："></a>发送 <code>Content-Type</code> 为 <code>application/json</code> 的 POST 请求：</h4><p>只需要将上面的案例当中的:</p><p><code>MediaType.APPLICATION_FORM_URLENCODED_VALUE</code>改为：<code>MediaType.APPLICATION_JSON_VALUE</code>即可</p><h3 id="DELETE-请求以及PUT请求"><a href="#DELETE-请求以及PUT请求" class="headerlink" title="DELETE 请求以及PUT请求"></a>DELETE 请求以及PUT请求</h3><p>因为都是<code>RestFul</code>的请求，所以简单描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String url &#x3D; &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;product&#x2F;update&quot;;</span><br><span class="line">Map&lt;String, ?&gt; variables &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">MultiValueMap&lt;String, String&gt; header &#x3D; new LinkedMultiValueMap();</span><br><span class="line">header.put(HttpHeaders.CONTENT_TYPE, Arrays.asList(MediaType.APPLICATION_FORM_URLENCODED_VALUE));</span><br><span class="line">Product product &#x3D; new Product(101, &quot;iWatch&quot;, BigDecimal.valueOf(2333));</span><br><span class="line">String productStr &#x3D; &quot;id&#x3D;&quot; + product.getId() + &quot;&amp;name&#x3D;&quot; + product.getName() + &quot;&amp;price&#x3D;&quot; + product.getPrice();</span><br><span class="line">HttpEntity&lt;String&gt; request &#x3D; new HttpEntity&lt;&gt;(productStr, header);</span><br><span class="line">restTemplate.put(url, request);</span><br></pre></td></tr></table></figure><h3 id="使用restTemplate实现文件上传"><a href="#使用restTemplate实现文件上传" class="headerlink" title="使用restTemplate实现文件上传"></a>使用restTemplate实现文件上传</h3><ol><li>需要设置multitype/file 文件请求头</li><li>需要设置headaer 以及 body</li><li>只能使用post请求</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String ui &#x3D; &quot;&quot;;</span><br><span class="line">MultiValueMap&lt;String, Object&gt; body &#x3D; new LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">FileSystemResource fileSystemResource &#x3D; new FileSystemResource();</span><br><span class="line">body.add(&quot;file&quot;, fileSystemResource);</span><br><span class="line"></span><br><span class="line">MultiValueMap&lt;String, String&gt; header2 &#x3D; new LinkedMultiValueMap();</span><br><span class="line">header2.put(HttpHeaders.CONTENT_TYPE, Arrays.asList(MediaType.MULTIPART_FORM_DATA_VALUE));</span><br><span class="line">HttpEntity httpquest &#x3D; new HttpEntity&lt;&gt;(body, header2);</span><br><span class="line">ResponseEntity&lt;String&gt; xxx &#x3D; build.postForEntity(&quot;xxx&quot;, httpquest, String.class);</span><br></pre></td></tr></table></figure><h2 id="进阶-RestTemplate"><a href="#进阶-RestTemplate" class="headerlink" title="进阶 RestTemplate"></a>进阶 RestTemplate</h2><h3 id="如何设置RestTempalate的默认底层引擎"><a href="#如何设置RestTempalate的默认底层引擎" class="headerlink" title="如何设置RestTempalate的默认底层引擎"></a>如何设置RestTempalate的默认底层引擎</h3><p>RestTemplate 默认使用的引擎：</p><ul><li>Apache HttpComponents</li><li>Netty</li><li>OkHttp</li></ul><p>一句话概括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RestTemplate template &#x3D; new RestTemplate(new HttpComponentsClientHttpRequestFactory());</span><br></pre></td></tr></table></figure><h3 id="如何修改RestTemplate-的超时时间"><a href="#如何修改RestTemplate-的超时时间" class="headerlink" title="如何修改RestTemplate 的超时时间"></a>如何修改RestTemplate 的超时时间</h3><p>参考代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RestTemplate customRestTemplate &#x3D; new RestTemplate(getClientHttpRequestFactory());</span><br><span class="line"></span><br><span class="line">private SimpleClientHttpRequestFactory getClientHttpRequestFactory() &#123;</span><br><span class="line">    SimpleClientHttpRequestFactory clientHttpRequestFactory</span><br><span class="line">            &#x3D; new SimpleClientHttpRequestFactory();</span><br><span class="line">    &#x2F;&#x2F; 连接超时设置 10s</span><br><span class="line">    clientHttpRequestFactory.setConnectTimeout(10_000);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 读取超时设置 10s</span><br><span class="line">    clientHttpRequestFactory.setReadTimeout(10_000);</span><br><span class="line">    return clientHttpRequestFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要调整 <code>HttpComponentsClient</code> 的超时设置，可以参考文章<a href="https://howtodoinjava.com/spring-boot2/resttemplate-timeout-example/" target="_blank" rel="noopener">resttemplate-timeout-example</a> 。当然除了设置超时时间之外，还有更多参数进行定制，这里就不一一列举，可以参考文章 <a href="https://howtodoinjava.com/spring-restful/resttemplate-httpclient-java-config/" target="_blank" rel="noopener">resttemplate-httpclient-java-config</a> 进一步学习。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.baeldung.com/rest-template" target="_blank" rel="noopener">www.baeldung.com/rest-templa…</a></p><p><a href="http://blog.didispace.com/spring-boot-learning-21-1-1" target="_blank" rel="noopener">blog.didispace.com/spring-boot…</a></p><p><a href="https://www.baeldung.com/spring-rest-template-multipart-upload" target="_blank" rel="noopener">www.baeldung.com/spring-rest…</a></p><p><a href="https://www.zhihu.com/question/28557115" target="_blank" rel="noopener">www.zhihu.com/question/28…</a></p><p><a href="https://howtodoinjava.com/spring-boot2/resttemplate-timeout-example" target="_blank" rel="noopener">howtodoinjava.com/spring-boot…</a></p><p><a href="https://docs.spring.io/spring/docs/5.1.6.RELEASE/spring-framework-reference/integration.html#rest-client-access" target="_blank" rel="noopener">docs.spring.io/spring/docs…</a></p><p><a href="https://zh.wikipedia.org/wiki/表现层状态转换" target="_blank" rel="noopener">zh.wikipedia.org/wiki/表现层状态转…</a></p><p><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestOperations.html" target="_blank" rel="noopener">docs.spring.io/spring-fram…</a></p><p>作者：闻人的技术博客 链接：<a href="https://juejin.im/post/6844903842065154061" target="_blank" rel="noopener">https://juejin.im/post/6844903842065154061</a> 来源：掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      RestTemplate
    
    </summary>
    
    
      <category term="Spring" scheme="http://lazytime.site/categories/Spring/"/>
    
    
      <category term="JAVA" scheme="http://lazytime.site/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>蓝牙应该怎么选？</title>
    <link href="http://lazytime.site/2020/08/22/%E8%93%9D%E7%89%99%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E9%80%89%EF%BC%9F/"/>
    <id>http://lazytime.site/2020/08/22/%E8%93%9D%E7%89%99%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E9%80%89%EF%BC%9F/</id>
    <published>2020-08-22T11:33:25.000Z</published>
    <updated>2020-08-22T11:34:05.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先说说总结"><a href="#先说说总结" class="headerlink" title="先说说总结"></a>先说说总结</h1><p><a href="https://www.bilibili.com/video/BV1f4411M7R1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1f4411M7R1</a> 文章的最终来源</p><ol><li>蓝牙 5.0 的耳机连接更加稳定、范围更大、更省电</li><li>一般情况下使用SBC或者AAC的编码足够<ol><li>华为的部分机型格式：HWA</li><li>索尼的格式：LDAC</li><li>高通的特殊格式：aptX</li></ol></li><li>蓝牙耳机不可能没有延迟，只能尽量减小、</li></ol><a id="more"></a><h1 id="为什么要买蓝牙耳机？"><a href="#为什么要买蓝牙耳机？" class="headerlink" title="为什么要买蓝牙耳机？"></a>为什么要买蓝牙耳机？</h1><ol><li>个人需求是出门的时候使用，因为方便听歌，</li><li>坐地铁的时候很方便</li><li>不是经常戴耳机的人</li><li>对音质有极度追求不建议用蓝牙耳机</li></ol><h1 id="蓝牙是如何音频到蓝牙耳机的？"><a href="#蓝牙是如何音频到蓝牙耳机的？" class="headerlink" title="蓝牙是如何音频到蓝牙耳机的？"></a>蓝牙是如何音频到蓝牙耳机的？</h1><ol><li>声源：音频芯片把声音编码为可供蓝牙传输的格式</li><li>蓝牙之间通信，将音频内容传到蓝牙耳机</li><li>蓝牙耳机：使用音频芯片翻译为音频信号</li><li>发出声音</li></ol><h1 id="影响蓝牙耳机使用体验的几个点："><a href="#影响蓝牙耳机使用体验的几个点：" class="headerlink" title="影响蓝牙耳机使用体验的几个点："></a>影响蓝牙耳机使用体验的几个点：</h1><ol><li>首先是手机的蓝牙协议支持<ol><li>4.1（目前已经被废弃）</li><li>4.2 </li><li>5.0 （推荐买带有5.0协议的手机）</li></ol></li><li>蓝牙音频的编码格式<ol><li>SBC<ol><li>有损音质</li><li>高延迟</li><li>码率低</li></ol></li><li>AAC<ol><li>延迟比SBC更低</li><li>码率更高</li><li>延迟一般</li></ol></li><li>aptX<ol><li>aptX<ol><li>无损</li></ol></li><li>aptX HD<ol><li>无损</li><li>延迟小于130</li><li>码率：576</li></ol></li><li>aptX 低延迟<ol><li>420 码率</li><li>延迟40MS</li><li>吴顺</li></ol></li></ol></li><li>LDAC<ol><li>无损音乐的无损输出</li></ol></li><li>HWA<ol><li>和索尼不相上下</li></ol></li></ol></li></ol><h1 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h1><p>蓝牙耳机个人认为只要够用就行，你是怎么选择的呢</p>]]></content>
    
    <summary type="html">
    
      蓝牙应该怎么选
    
    </summary>
    
    
      <category term="日常" scheme="http://lazytime.site/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="日常" scheme="http://lazytime.site/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>mysql zip包安装指南</title>
    <link href="http://lazytime.site/2020/08/02/mysql-zip%E5%8C%85%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97v/"/>
    <id>http://lazytime.site/2020/08/02/mysql-zip%E5%8C%85%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97v/</id>
    <published>2020-08-02T02:28:05.000Z</published>
    <updated>2020-08-02T02:30:38.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-下载zip-包"><a href="#1-下载zip-包" class="headerlink" title="1. 下载zip 包"></a>1. 下载zip 包</h1><h2 id="地址："><a href="#地址：" class="headerlink" title="地址："></a>地址：</h2><p><a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.31-winx64.zip" target="_blank" rel="noopener">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.31-winx64.zip</a></p><a id="more"></a><h1 id="2-解压缩，放到D盘自定义位置"><a href="#2-解压缩，放到D盘自定义位置" class="headerlink" title="2. 解压缩，放到D盘自定义位置"></a>2. 解压缩，放到D盘自定义位置</h1><p>我的位置如下:</p><p>D:\soft\mysql-5.7.31-winx64</p><h1 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h1><p>以win10 为例：</p><ol><li>打开高级设置</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200801115826.png?ynotemdtimestamp=1596333875837" alt="img"></p><ol><li>在此处配置环境变量</li></ol><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200801115848.png?ynotemdtimestamp=1596333875837" alt="img"></p><ol><li>配置如下</li></ol><p>MYSQL_HOME : mysql5.7zip包解压路径</p><p><strong>path：%MYSQL_HOME%\bin</strong></p><h1 id="4-新建my-ini文件（解压包里是没有my-dafault-ini或自带my-ini文件，需自己创建）编辑写入以下信息"><a href="#4-新建my-ini文件（解压包里是没有my-dafault-ini或自带my-ini文件，需自己创建）编辑写入以下信息" class="headerlink" title="4. 新建my.ini文件（解压包里是没有my-dafault.ini或自带my.ini文件，需自己创建）编辑写入以下信息"></a>4. 新建my.ini文件（解压包里是没有my-dafault.ini或自带my.ini文件，需自己创建）编辑写入以下信息</h1><p>配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set&#x3D;utf8 </span><br><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port &#x3D; 3306 </span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir&#x3D;C:\Program Files\mysql-5.7.21-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir&#x3D;C:\Program Files\mysql-5.7.21-winx64\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections&#x3D;200</span><br><span class="line"># 设置mysql服务端默认字符集</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br></pre></td></tr></table></figure><h1 id="5-让配置生效"><a href="#5-让配置生效" class="headerlink" title="5. 让配置生效"></a>5. 让配置生效</h1><p>mysql初始化，以<strong>管理员权限</strong>打开cmd命令窗口，切换到<code>”C:\Program Files\mysql-5.7.21-winx64\bin”</code>路径下执行</p><p>这里可以获得ROOT密码：<code>j&lt;ASsKzqP8M4</code></p><blockquote><p>这里提示报错:</p><p>由于找不到msvcr120.dll无法继续执行代码</p><p>我的解决办法是，进入到：<a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=40784" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=40784</a></p><p>这种错误是由于未安装 vcredist 引起的</p><p>引入自博客：<a href="https://blog.csdn.net/weixin_30517001/article/details/97706795" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30517001/article/details/97706795</a></p></blockquote><blockquote><p>MySQL5.7执行mysqld命令出现Can‘t change dir to ‘C:\Program Files\MySQL\MySQL Server 5.7\data\‘错误</p><p>解决方法： 提示No such file or directory，到C:\Program Files\MySQL\MySQL Server 5.7\目录下创建data文件夹即可。</p><p>楼主这里手动创建了对应的目录以及对应的子目录</p></blockquote><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200801123207.png?ynotemdtimestamp=1596333875837" alt="img"></p><h1 id="6-让my-ini-配置生效"><a href="#6-让my-ini-配置生效" class="headerlink" title="6. 让my.ini 配置生效"></a>6. 让my.ini 配置生效</h1><p>执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld install MySQL --defaults-file&#x3D;&quot;C:\Program Files\mysql-5.7.21-winx64\my.ini</span><br></pre></td></tr></table></figure><p>my.ini 为你自己建立的配置文件路径</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200801123830.png?ynotemdtimestamp=1596333875837" alt="img"></p><h1 id="7-启动mysql服务，输入-net-start-mysql，启动成功，会出现下面的截图。如果服务一直处于启动中，说明上一步的操作有误，核实my-ini文件路径是否正确"><a href="#7-启动mysql服务，输入-net-start-mysql，启动成功，会出现下面的截图。如果服务一直处于启动中，说明上一步的操作有误，核实my-ini文件路径是否正确" class="headerlink" title="7. 启动mysql服务，输入 net start mysql，启动成功，会出现下面的截图。如果服务一直处于启动中，说明上一步的操作有误，核实my.ini文件路径是否正确"></a>7. 启动mysql服务，输入 net start mysql，启动成功，会出现下面的截图。<strong>如果服务一直处于启动中，说明上一步的操作有误，核实my.ini文件路径是否正确</strong></h1><p>如果之前有安装过mysql，这里可以查看这篇博客了解如何卸载:</p><p><a href="https://www.cnblogs.com/puhongjun/p/10189454.html" target="_blank" rel="noopener">https://www.cnblogs.com/puhongjun/p/10189454.html</a></p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200801125305.png?ynotemdtimestamp=1596333875837" alt="img"></p><p>经过不懈的努力，安装成功</p><p>PS：mysql 还是建议装在c盘，个人碰到了各种莫名其妙的问题</p><h1 id="8-初次登陆设置mysql-root-用户密码："><a href="#8-初次登陆设置mysql-root-用户密码：" class="headerlink" title="8. 初次登陆设置mysql root 用户密码："></a>8. 初次登陆设置mysql root 用户密码：</h1><blockquote><p>ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</p></blockquote><p>当使用mysql 安装生成的root 密码登录的时候，需要重新设置root 密码，修改root 密码为:</p><p>修改密码命令：<code>set password = password(‘新密码’)</code>;</p><h1 id="9-结语"><a href="#9-结语" class="headerlink" title="9. 结语"></a>9. 结语</h1><p>此时在服务里面可以看到Mysql 的服务已经启动了</p><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200801132213.png?ynotemdtimestamp=1596333875837" alt="img"></p><p>用zip 包的安装方式可能会有各种各样的问题，这里找了百度先生处理一些常见的问题:</p><p><a href="https://jingyan.baidu.com/article/da1091fb1a46a6027849d6a8.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/da1091fb1a46a6027849d6a8.html</a></p>]]></content>
    
    <summary type="html">
    
      mysqlzip包的安装方式
    
    </summary>
    
    
      <category term="Linux" scheme="http://lazytime.site/categories/Linux/"/>
    
    
      <category term="mysql" scheme="http://lazytime.site/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>nodejs安装教程</title>
    <link href="http://lazytime.site/2020/07/26/nodejs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://lazytime.site/2020/07/26/nodejs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2020-07-26T14:37:22.000Z</published>
    <updated>2020-07-26T14:41:15.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nodejs安装教程（linux）"><a href="#nodejs安装教程（linux）" class="headerlink" title="nodejs安装教程（linux）"></a>nodejs安装教程（linux）</h1><h2 id="1-下载官方包"><a href="#1-下载官方包" class="headerlink" title="1. 下载官方包"></a>1. 下载官方包</h2><h3 id="1-1-相关命令"><a href="#1-1-相关命令" class="headerlink" title="1.1. 相关命令"></a>1.1. 相关命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v10.9.0&#x2F;node-v10.9.0-linux-x64.tar.xz    &#x2F;&#x2F; 下载</span><br><span class="line"># tar xf  node-v10.9.0-linux-x64.tar.xz       &#x2F;&#x2F; 解压</span><br><span class="line"># cd node-v10.9.0-linux-x64&#x2F;                  &#x2F;&#x2F; 进入解压目录</span><br><span class="line"># .&#x2F;bin&#x2F;node -v                               &#x2F;&#x2F; 执行node命令 查看版本</span><br><span class="line">v10.9.0</span><br></pre></td></tr></table></figure><h2 id="2-设置软连接"><a href="#2-设置软连接" class="headerlink" title="2. 设置软连接"></a>2. 设置软连接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;software&#x2F;nodejs&#x2F;bin&#x2F;npm   &#x2F;usr&#x2F;local&#x2F;bin&#x2F; </span><br><span class="line">ln -s &#x2F;usr&#x2F;software&#x2F;nodejs&#x2F;bin&#x2F;node   &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure><h2 id="3-常见问题解决"><a href="#3-常见问题解决" class="headerlink" title="3.常见问题解决"></a>3.常见问题解决</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat &#x2F;etc&#x2F;redhat-release</span><br><span class="line">&gt; &#x2F;&#x2F;查看python版本</span><br><span class="line">&gt; python -v</span><br><span class="line">&gt; &#x2F;&#x2F;查看gcc rpm gcc-c++是否安装</span><br><span class="line">&gt; rpm -q gcc rpm -q gcc-c++</span><br><span class="line">&gt; &#x2F;&#x2F;安装gcc-c++</span><br><span class="line">&gt; yum -v install gcc-c++ kernel-devel</span><br><span class="line">&gt; &#x2F;&#x2F;大招荡平一切环境问题</span><br><span class="line">&gt; yum -y update &amp;&amp; yum -y groupinstall &quot;Development Tools&quot;</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;复制官网链接（Source Code版本）进入&#x2F;usr&#x2F;src目录下载nodejs</span><br><span class="line">&gt;wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v6.11.4&#x2F;node-v6.11.4.tar.gz</span><br><span class="line">&#x2F;&#x2F;解压</span><br><span class="line">&gt;tar -xf node-v6.11.4.tar.gz</span><br><span class="line">&#x2F;&#x2F;删除压缩包</span><br><span class="line">&gt;rm node-v6.11.4.tar.gz</span><br><span class="line">&#x2F;&#x2F;进入node-v6.11.4目录，进行配置</span><br><span class="line">&gt;.&#x2F;configure</span><br><span class="line">&#x2F;&#x2F;编译</span><br><span class="line">&gt;make</span><br><span class="line">&#x2F;&#x2F;安装</span><br><span class="line">&gt;sodu make install</span><br></pre></td></tr></table></figure><p><strong>！！！编译Node 时候发现gcc 版本太低需要升级gcc编译器版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#获取源码(由于官方镜像速度较慢，这里使用了中国科学院开源协会的镜像</span><br><span class="line">sudo wget http:&#x2F;&#x2F;mirrors.opencas.org&#x2F;gnu&#x2F;gcc&#x2F;gcc-6.3.0&#x2F;gcc-6.3.0.tar.bz2</span><br><span class="line">#如果以上给出的镜像不可用，也可以是使用http:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;gcc&#x2F;，但由于有墙的存在，通常这样都很慢，建议本地通过shadowsocks 下载后放到服务器上再继续以下步骤</span><br><span class="line"></span><br><span class="line">#解压</span><br><span class="line">sudo tar -jxvf gcc-6.3.0.tar.bz2</span><br><span class="line">#下载编译所需的依赖项</span><br><span class="line">#如果想更快，可以利用中国科学院开源协会的镜像加速下载gmp和mpfr这两个包（另外两个包镜像没有收录），手动替换.&#x2F;contrib&#x2F;download_prerequisites的以下两处命令：</span><br><span class="line">#1) 把wget ftp:&#x2F;&#x2F;gcc.gnu.org&#x2F;pub&#x2F;gcc&#x2F;infrastructure&#x2F;$MPFR.tar.bz2 || exit 1 替换成wget http:&#x2F;&#x2F;mirrors.opencas.org&#x2F;gnu&#x2F;mpfr&#x2F;$MPFR.tar.bz2 || exit 1</span><br><span class="line">#2) 把wget ftp:&#x2F;&#x2F;gcc.gnu.org&#x2F;pub&#x2F;gcc&#x2F;infrastructure&#x2F;$GMP.tar.bz2 || exit 1 替换成wget http:&#x2F;&#x2F;mirrors.opencas.org&#x2F;gnu&#x2F;gmp&#x2F;$GMP.tar.bz2 || exit 1</span><br><span class="line">cd gcc-6.3.0</span><br><span class="line">sudo .&#x2F;contrib&#x2F;download_prerequisites</span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">#建立编译输出目录</span><br><span class="line">sudo mkdir gcc-build-6.3.0</span><br><span class="line"></span><br><span class="line">#进入此目录，执行以下命令，生成makefile文件</span><br><span class="line">cd gcc-build-6.3.0</span><br><span class="line">sudo ..&#x2F;gcc-6.3.0&#x2F;configure --enable-checking&#x3D;release --enable-languages&#x3D;c,c++ --disable-multilib</span><br><span class="line"></span><br><span class="line">#执行命令进行编译，此处利用4个job，需编译时约40分钟，此值不宜设置过高</span><br><span class="line">sudo make -j4</span><br><span class="line"></span><br><span class="line">#安装</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>强烈建议 centeros使用 7.0 以上版本</p><h2 id="4-问题"><a href="#4-问题" class="headerlink" title="4. 问题"></a>4. 问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">make[2]: Leaving directory &#96;&#x2F;home&#x2F;imdb&#x2F;gcc-4.8.2&#x2F;gcc-build-4.8.2&#39;</span><br><span class="line">make[1]: *** [stage1-bubble] 错误 2</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;home&#x2F;imdb&#x2F;gcc-4.8.2&#x2F;gcc-build-4.8.2&#39;</span><br><span class="line"></span><br><span class="line">## make: *** [all] 错误 2</span><br><span class="line"></span><br><span class="line">解决办法</span><br><span class="line">ubuntu： apt-get install gcc g++ </span><br><span class="line">CentOS：yum install gcc gcc-c++</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="5-Npm-更换淘宝镜像"><a href="#5-Npm-更换淘宝镜像" class="headerlink" title="5. Npm 更换淘宝镜像"></a>5. Npm 更换淘宝镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">2. npm install</span><br></pre></td></tr></table></figure><h2 id="6-安装node-JS-pm2"><a href="#6-安装node-JS-pm2" class="headerlink" title="6.安装node JS pm2"></a>6.安装node JS pm2</h2><p>作用: 后台运行npm start 程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cnpm install pm2 -g </span><br><span class="line"></span><br><span class="line">pm2启动：</span><br><span class="line">pm2 start &quot;&#x2F;usr&#x2F;local&#x2F;src&#x2F;node&#x2F;bin&#x2F;npm&quot; --name &quot;law&quot; -- start .</span><br><span class="line"> </span><br><span class="line">pm2 list</span><br><span class="line">pm2 stop    </span><br><span class="line">pm2 restart </span><br><span class="line">pm2 delete  </span><br><span class="line"></span><br><span class="line">linux 找不到pm2 </span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;nodebox&#x2F;nodejs&#x2F;lib&#x2F;node_modules&#x2F;pm2&#x2F;bin&#x2F;pm2 &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      请输入描述信息
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://lazytime.site/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://lazytime.site/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>导出数据的踩坑记录</title>
    <link href="http://lazytime.site/2020/07/26/%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E7%9A%84%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://lazytime.site/2020/07/26/%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E7%9A%84%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2020-07-26T14:23:40.000Z</published>
    <updated>2020-07-26T14:30:00.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="情感分析的导出"><a href="#情感分析的导出" class="headerlink" title="情感分析的导出"></a>情感分析的导出</h1><ol><li>将数据通过excel的形式导入到sqlsever</li><li>查询整个数据表，查找是否已经处理，如果已经处理，跳过，否则，执行情感分析</li><li>使用jsp Update 数据的状态，更新一条将标识位调整</li><li>每隔一定的时间进行处理</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">String sql &#x3D; &quot;select id,new_name,old_name from m_test where flag &#x3D; 0&quot;;</span><br><span class="line">    ObjectManager objectManager &#x3D; new ObjectManager();</span><br><span class="line">    List&lt;IDataSet&gt; dataList &#x3D; objectManager.list(sql);</span><br><span class="line">    if (dataList.isEmpty()) &#123;</span><br><span class="line">        out.print(&quot;开始执行统计分析程序，没有需要分析的数据！&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(&quot;开始执行统计分析程序，需要分析：&quot; + dataList.size() + &quot;条&quot;);</span><br><span class="line"></span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    for (IDataSet data : dataList) &#123;</span><br><span class="line">        String new_name &#x3D; data.getString(&quot;new_name&quot;);</span><br><span class="line">        String old_name &#x3D; data.getString(&quot;old_name&quot;);</span><br><span class="line">        SentimentAnalysis new_name_result &#x3D; null;</span><br><span class="line">        SentimentAnalysis old_name_result &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            new_name_result &#x3D; NlpApi.sentimentAnalysisByText(new_name);</span><br><span class="line">            old_name_result &#x3D; NlpApi.sentimentAnalysisByText(old_name);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.out.println(&quot;调用分析接口出错！&quot; + e.getMessage());</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String new_sentimentname &#x3D; &quot;&quot;;</span><br><span class="line">        String new_confide &#x3D; &quot;&quot;;</span><br><span class="line">        String new_negative &#x3D; &quot;&quot;;</span><br><span class="line">        String new_positive &#x3D; &quot;&quot;;</span><br><span class="line">        String old_sentimentname &#x3D; &quot;&quot;;</span><br><span class="line">        String old_confide &#x3D; &quot;&quot;;</span><br><span class="line">        String old_negative &#x3D; &quot;&quot;;</span><br><span class="line">        String old_positive &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        if(null !&#x3D; new_name_result)&#123;</span><br><span class="line">            new_sentimentname &#x3D; new_name_result.getSentimentName();</span><br><span class="line">            new_confide &#x3D; String.valueOf(new_name_result.getConfidence());</span><br><span class="line">            new_negative &#x3D; String.valueOf(new_name_result.getNegativeProb());</span><br><span class="line">            new_positive &#x3D; String.valueOf(new_name_result.getPositiveProb());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(null !&#x3D; old_name_result)&#123;</span><br><span class="line">            old_sentimentname &#x3D; old_name_result.getSentimentName();</span><br><span class="line">            old_confide &#x3D; String.valueOf(old_name_result.getConfidence());</span><br><span class="line">            old_negative &#x3D; String.valueOf(old_name_result.getNegativeProb());</span><br><span class="line">            old_positive &#x3D; String.valueOf(old_name_result.getPositiveProb());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String updateSql &#x3D; &quot;update m_test set new_confide &#x3D; ? , new_negative &#x3D; ? , new_positive &#x3D; ?, new_anaresult &#x3D; ?,old_confide &#x3D; ? , old_negative &#x3D; ? , old_positive &#x3D; ?, old_anaresult &#x3D; ? , flag &#x3D; 1 where id &#x3D; ?&quot;;</span><br><span class="line"></span><br><span class="line">        objectManager.update(updateSql, new Object[]&#123;new_sentimentname, new_confide, new_negative, new_positive, old_sentimentname, old_confide, old_negative, old_positive, data.getInt(&quot;id&quot;)&#125;);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out.print(&quot;系统执行完毕，执行成功&quot; + i + &quot;条&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      情感分析的导出
    
    </summary>
    
    
      <category term="情感分析" scheme="http://lazytime.site/categories/%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="情感分析" scheme="http://lazytime.site/tags/%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j 学习笔记</title>
    <link href="http://lazytime.site/2020/07/26/Neo4j-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://lazytime.site/2020/07/26/Neo4j-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-26T14:05:18.000Z</published>
    <updated>2020-07-26T14:17:57.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Neo4j-学习"><a href="#Neo4j-学习" class="headerlink" title="Neo4j 学习"></a>Neo4j 学习</h1><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-入门"><a href="#1-入门" class="headerlink" title="1. 入门"></a>1. 入门</h2><h3 id="1-1-安装neo4j"><a href="#1-1-安装neo4j" class="headerlink" title="1.1 安装neo4j"></a>1.1 安装neo4j</h3><p>直接安装 neo4j desktop 版本</p><p>如果是community 社区版本，则需要到安装目录的bin 下面执行如下命令</p><a id="more"></a><h2 id="2-Cypher简介"><a href="#2-Cypher简介" class="headerlink" title="2. Cypher简介"></a>2. <a href="https://neo4j.com/docs/getting-started/current/cypher-intro/" target="_blank" rel="noopener">Cypher简介</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">()</span><br><span class="line">(matrix)</span><br><span class="line">(:Movie)</span><br><span class="line">(matrix:Movie)</span><br><span class="line">(matrix:Movie &#123;title: &quot;The Matrix&quot;&#125;)</span><br><span class="line">(matrix:Movie &#123;title: &quot;The Matrix&quot;, released: 1997&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-1-关系语法"><a href="#2-1-关系语法" class="headerlink" title="2.1 关系语法"></a>2.1 关系语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--&gt;</span><br><span class="line">-[role]-&gt;</span><br><span class="line">-[:ACTED_IN]-&gt;</span><br><span class="line">-[role:ACTED_IN]-&gt;</span><br><span class="line">-[role:ACTED_IN &#123;roles: [&quot;Neo&quot;]&#125;]-&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-模式语法"><a href="#2-2-模式语法" class="headerlink" title="2.2 模式语法"></a>2.2 模式语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(keanu:Person:Actor &#123;name:  &quot;Keanu Reeves&quot;&#125; )</span><br><span class="line">-[role:ACTED_IN     &#123;roles: [&quot;Neo&quot;] &#125; ]-&gt;</span><br><span class="line">(matrix:Movie       &#123;title: &quot;The Matrix&quot;&#125; )</span><br></pre></td></tr></table></figure><h2 id="3-Cypher-基本语法"><a href="#3-Cypher-基本语法" class="headerlink" title="3. Cypher 基本语法"></a>3. Cypher 基本语法</h2><h3 id="3-1-创建数据"><a href="#3-1-创建数据" class="headerlink" title="3.1 创建数据"></a>3.1 创建数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE (:MyMovie&#123;title:&quot;The Matrix&quot;, released:1997&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-2-创建并且返回数据"><a href="#3-2-创建并且返回数据" class="headerlink" title="3.2 创建并且返回数据"></a>3.2 创建并且返回数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE (p:MyPeron&#123; name:&quot;test&quot;, relase:&quot;test&quot;&#125;) RETURN p</span><br></pre></td></tr></table></figure><h3 id="3-3-创建多个元素"><a href="#3-3-创建多个元素" class="headerlink" title="3.3 创建多个元素"></a>3.3 创建多个元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE (a:Person &#123; name:&quot;Tom Hanks&quot;,</span><br><span class="line">  born:1956 &#125;)-[r:ACTED_IN &#123; roles: [&quot;Forrest&quot;]&#125;]-&gt;(m:Movie &#123; title:&quot;Forrest Gump&quot;,released:1994 &#125;)</span><br><span class="line">                                                               </span><br><span class="line">CREATE (d:Person &#123; name:&quot;Robert Zemeckis&quot;, born:1951 &#125;)-[:DIRECTED]-&gt;(m)</span><br><span class="line">RETURN a,d,r,m</span><br></pre></td></tr></table></figure><h3 id="3-4-匹配模式"><a href="#3-4-匹配模式" class="headerlink" title="3.4 匹配模式"></a>3.4 匹配模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (p:Person &#123; name:&quot;Tom Hanks&quot; &#125;)-[r:ACTED_IN]-&gt;(m:Movie)</span><br><span class="line">RETURN m.title, r.roles</span><br></pre></td></tr></table></figure><h3 id="3-5-连接结构"><a href="#3-5-连接结构" class="headerlink" title="3.5 连接结构"></a>3.5 连接结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MATCH (p:Person &#123; name:&quot;Tom Hanks&quot; &#125;)</span><br><span class="line">CREATE (m:Movie &#123; title:&quot;Cloud Atlas&quot;,released:2012 &#125;)</span><br><span class="line">CREATE (p)-[r:ACTED_IN &#123; roles: [&#39;Zachry&#39;]&#125;]-&gt;(m)</span><br><span class="line">RETURN p,r,m</span><br></pre></td></tr></table></figure><h3 id="3-6-完成模式"><a href="#3-6-完成模式" class="headerlink" title="3.6 完成模式"></a>3.6 完成模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MERGE (m:Movie &#123; title:&quot;Cloud Atlas&quot; &#125;)</span><br><span class="line">ON CREATE SET m.released &#x3D; 2012</span><br><span class="line">RETURN m</span><br></pre></td></tr></table></figure><p>使用合并关联多个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MATCH (m:Movie &#123; title:&quot;Cloud Atlas&quot; &#125;)</span><br><span class="line">MATCH (p:Person &#123; name:&quot;Tom Hanks&quot; &#125;)</span><br><span class="line">MERGE (p)-[r:ACTED_IN]-&gt;(m)</span><br><span class="line">ON CREATE SET r.roles &#x3D;[&#39;Zachry&#39;]</span><br><span class="line">RETURN p,r,m</span><br></pre></td></tr></table></figure><p>处理多重关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE (y:Year &#123; year:2014 &#125;)</span><br><span class="line">MERGE (y)&lt;-[:IN_YEAR]-(m10:Month &#123; month:10 &#125;)</span><br><span class="line">MERGE (y)&lt;-[:IN_YEAR]-(m11:Month &#123; month:11 &#125;)</span><br><span class="line">RETURN y,m10,m11</span><br></pre></td></tr></table></figure><h2 id="4-Cypher-筛选结果正确的结果"><a href="#4-Cypher-筛选结果正确的结果" class="headerlink" title="4. Cypher 筛选结果正确的结果"></a>4. Cypher 筛选结果正确的结果</h2><h3 id="4-1-测试数据"><a href="#4-1-测试数据" class="headerlink" title="4.1 测试数据"></a>4.1 测试数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE (xiaohong:Person &#123;name: &quot;小红&quot;, born: 1954&#125;)</span><br><span class="line">CREATE (xiaolv:Person &#123;name: &quot;小绿S&quot;, born: 1964&#125;)</span><br><span class="line">CREATE (xiaohuang:Person &#123;name: &quot;小黄&quot;, born: 1948&#125;)</span><br><span class="line">CREATE (xiaolan:Person &#123;name: &quot;小蓝&quot;, born: 1999&#125;)</span><br><span class="line">CREATE (xiyouji:Person &#123;name: &quot;西游记&quot;, date: &quot;1999-10-25&quot;&#125;)</span><br><span class="line">CREATE (lanjingling:Person &#123;name: &quot;蓝精灵&quot;, date: &quot;1969-5-16&quot;&#125;)</span><br><span class="line">CREATE (xiaolv)-[:ACTED_IN &#123; roles: [&quot;想看&quot;]&#125;]-&gt;(xiyouji)</span><br><span class="line">CREATE (xiaohuang)-[:ACTED_IN &#123; roles: [&quot;想看&quot;]&#125;]-&gt;(lanjingling)</span><br></pre></td></tr></table></figure><h3 id="4-2-根据where-条件查找"><a href="#4-2-根据where-条件查找" class="headerlink" title="4.2 根据where 条件查找"></a>4.2 根据where 条件查找</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MATCH (xiyouji:Person) WHERE xiyouji.name&#x3D;&quot;西游记&quot; RETURN xiyouji</span><br></pre></td></tr></table></figure><p>等同于如下查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MATCH (xiyouji:Person &#123;name:&quot;西游记&quot;&#125;) RETURN xiyouji</span><br></pre></td></tr></table></figure><p>使用正则匹配如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MATCH (xiaolv:Person)-[r:ACTED_IN]-&gt;(xiyouji) WHERE xiaolv.name &#x3D;~ &quot;小+&quot; OR &quot;Neo&quot; IN r.roles RETURN xiaolv,r,xiyouji</span><br></pre></td></tr></table></figure><h3 id="4-3-内置函数使用"><a href="#4-3-内置函数使用" class="headerlink" title="4.3 内置函数使用"></a>4.3 内置函数使用</h3><h4 id="使用NOT-排除关系"><a href="#使用NOT-排除关系" class="headerlink" title="使用NOT 排除关系"></a>使用NOT 排除关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MATCH (p:Person)-[:ACTED_IN]-&gt;(m)</span><br><span class="line">WHERE NOT (p)-[:DIRECTED]-&gt;()</span><br><span class="line">RETURN p,m</span><br></pre></td></tr></table></figure><h4 id="内置函数的"><a href="#内置函数的" class="headerlink" title="内置函数的"></a>内置函数的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MATCH (p:Person) RETURN p,p.name AS name, toUpper(p.name), coalesce(p.name, &quot;n&#x2F;a&quot;) AS nickname, &#123; name: p.name, label: head(labels(p))&#125; AS person</span><br></pre></td></tr></table></figure><h3 id="4-4-汇总信息"><a href="#4-4-汇总信息" class="headerlink" title="4.4 汇总信息"></a>4.4 汇总信息</h3><h4 id="使用count"><a href="#使用count" class="headerlink" title="使用count"></a>使用count</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (:Person)</span><br><span class="line">RETURN count(*) AS people</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MATCH (actor:Person)-[:ACTED_IN]-&gt;(movie:Movie)&lt;-[:DIRECTED]-(director:Person) RETURN actor, director, count(*) AS collacbotration</span><br></pre></td></tr></table></figure><h3 id="4-5-排序和分页"><a href="#4-5-排序和分页" class="headerlink" title="4.5 排序和分页"></a>4.5 排序和分页</h3><h4 id="使用-limit-以及-skip-进行分页"><a href="#使用-limit-以及-skip-进行分页" class="headerlink" title="使用 limit 以及 skip 进行分页"></a>使用 limit 以及 skip 进行分页</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (a:Person)-[:ACTED_IN]-&gt;(m:Movie) RETURN a, count(*) AS appearances ORDER BY appearances DESC LIMIT 10</span><br><span class="line">MATCH (a:Person)-[:ACTED_IN]-&gt;(m:Movie) RETURN a, count(*) AS appearances ORDER BY appearances DESC SKIP 10</span><br></pre></td></tr></table></figure><h3 id="4-6-收集汇总"><a href="#4-6-收集汇总" class="headerlink" title="4.6 收集汇总"></a>4.6 收集汇总</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MATCH (m:Movie)&lt;-[:ACTED_IN]-(a:Person) RETURN m.title AS movie, collect(a.name) AS cast, count(*) AS actors</span><br></pre></td></tr></table></figure><h3 id="4-7-使用UNION链接多个内容"><a href="#4-7-使用UNION链接多个内容" class="headerlink" title="4.7 使用UNION链接多个内容"></a>4.7 使用UNION链接多个内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MATCH (actor:Person)-[r:ACTED_IN]-&gt;(movie:Movie)</span><br><span class="line">RETURN actor.name AS name, type(r) AS type, movie.title AS title</span><br><span class="line">UNION</span><br><span class="line">MATCH (director:Person)-[r:DIRECTED]-&gt;(movie:Movie)</span><br><span class="line">RETURN director.name AS name, type(r) AS type, movie.title AS title</span><br></pre></td></tr></table></figure><h4 id="使用WITH"><a href="#使用WITH" class="headerlink" title="使用WITH"></a>使用WITH</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MATCH (person:Person)-[:ACTED_IN]-&gt;(m:Movie) WITH person, count(*) AS appear, collect(m.title) AS movies WHERE appear&gt;1 RETURN person.name, appear, movies</span><br></pre></td></tr></table></figure><h3 id="4-8-使用约束"><a href="#4-8-使用约束" class="headerlink" title="4.8 使用约束"></a>4.8 使用约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.title IS UNIQUE</span><br><span class="line">CALL db.constraints</span><br></pre></td></tr></table></figure><h3 id="4-9-使用import-导入数据"><a href="#4-9-使用import-导入数据" class="headerlink" title="4.9 使用import 导入数据"></a>4.9 使用import 导入数据</h3><p><a href="https://neo4j.com/docs/cypher-manual/3.5/clauses/load-csv/" target="_blank" rel="noopener">https://neo4j.com/docs/cypher-manual/3.5/clauses/load-csv/</a></p><h4 id="从CSV文件导入数据"><a href="#从CSV文件导入数据" class="headerlink" title="从CSV文件导入数据"></a>从CSV文件导入数据</h4><p>要使用的CSV文件<code>LOAD CSV</code>必须具有以下特征：</p><ul><li>字符编码为UTF-8；</li><li>终端线终端取决于系统，例如，它<code>\n</code>在UNIX上还是<code>\r\n</code>在Windows上；</li><li>默认的字段终止符是<code>,</code>;</li><li>可以使用命令中<code>FIELDTERMINATOR</code>可用的选项来更改字段终止符<code>LOAD CSV</code>；</li><li>CSV文件中允许带引号的字符串，并且在读取数据时将引号删除；</li><li>字符串引号的字符为双引号<code>&quot;</code>;</li><li>if <code>dbms.import.csv.legacy_quote_escaping</code>设置为默认值<code>true</code>，<code>\</code>用作转义字符；</li><li>双引号必须在带引号的字符串中并使用转义符或第二个双引号进行转义。</li></ul><p>下面为示例：</p><p>article.cvs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1,ABBA,1992</span><br><span class="line">2,Roxette,1986</span><br><span class="line">3,Europe,1979</span><br><span class="line">4,The Cardigans,1992</span><br><span class="line">LOAD CSV FROM &#39;file:&#x2F;&#x2F;&#x2F;article.cvs&#39; AS line</span><br><span class="line">CREATE (:Artist &#123; name: line[1], year: toInteger(line[2])&#125;)</span><br></pre></td></tr></table></figure><p>注意此处会踩坑，因为neo4j 默认配置中将import 设置到安装根目录的<code>import</code> 目录下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbms.security.allow_csv_import_from_file_urls&#x3D;true</span><br><span class="line"></span><br><span class="line">dbms.directories.import&#x3D;import</span><br></pre></td></tr></table></figure><p>注意第一个配置默认为false， 设置为true将允许neo4j访问系统文件，这样做是<strong>不建议</strong>的</p><p>注意linux 系统的用户访问权限的问题</p><h4 id="使用header-导入-csv文件"><a href="#使用header-导入-csv文件" class="headerlink" title="使用header 导入 csv文件"></a>使用header 导入 csv文件</h4><p>article_with_head.csv</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Id,Name,Year</span><br><span class="line">1,ABBA,1992</span><br><span class="line">2,Roxette,1986</span><br><span class="line">3,Europe,1979</span><br><span class="line">4,The Cardigans,1992</span><br></pre></td></tr></table></figure><p>注意语法有稍微的改变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOAD CSV WITH HEADERS FROM &#39;file:&#x2F;&#x2F;&#x2F;article_with_head.csv&#39; AS line</span><br><span class="line">CREATE (:Artist &#123; name: line.Name, year: toInteger(line.Year)&#125;)</span><br></pre></td></tr></table></figure><h4 id="使用自定义字段定界符从CSV文件导入数据"><a href="#使用自定义字段定界符从CSV文件导入数据" class="headerlink" title="使用自定义字段定界符从CSV文件导入数据"></a>使用自定义字段定界符从CSV文件导入数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOAD CSV FROM &#39;file:&#x2F;&#x2F;&#x2F;article_fieldterminator.csv&#39; AS line FIELDTERMINATOR &#39;;&#39;</span><br><span class="line">CREATE (:Artist &#123; name: line[1], year: toInteger(line[2])&#125;)</span><br></pre></td></tr></table></figure><h4 id="导入大量数据"><a href="#导入大量数据" class="headerlink" title="导入大量数据"></a>导入大量数据</h4><p>可以指定读取多少行之后提交，防止数据过大，减少内存开销</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USING PERIODIC COMMIT LOAD CSV FROM &#39;file:&#x2F;&#x2F;&#x2F;artists.csv&#39; AS line CREATE (:Artist &#123; name: line[1], year: toInteger(line[2])&#125;)</span><br></pre></td></tr></table></figure><h4 id="设置定期提交的速率"><a href="#设置定期提交的速率" class="headerlink" title="设置定期提交的速率"></a>设置定期提交的速率</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USING PERIODIC COMMIT 500 LOAD CSV FROM &#39;file:&#x2F;&#x2F;&#x2F;artists.csv&#39; AS line CREATE (:Artist &#123; name: line[1], year: toInteger(line[2])&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Neo4j 学习
    
    </summary>
    
    
      <category term="Neo4j" scheme="http://lazytime.site/categories/Neo4j/"/>
    
    
      <category term="Neo4j" scheme="http://lazytime.site/tags/Neo4j/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch6.2.4 踩坑</title>
    <link href="http://lazytime.site/2020/07/26/ElasticSearch6-2-4-%E8%B8%A9%E5%9D%91/"/>
    <id>http://lazytime.site/2020/07/26/ElasticSearch6-2-4-%E8%B8%A9%E5%9D%91/</id>
    <published>2020-07-26T13:32:58.000Z</published>
    <updated>2020-07-26T13:57:29.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch-踩坑-6-2-4-版本"><a href="#Elasticsearch-踩坑-6-2-4-版本" class="headerlink" title="Elasticsearch 踩坑 - 6.2.4 版本"></a>Elasticsearch 踩坑 - 6.2.4 版本</h1><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><h2 id="自定义评分器"><a href="#自定义评分器" class="headerlink" title="自定义评分器"></a>自定义评分器</h2><p><strong>可以根据自己的规则去调整搜索结果的评分，修改权重</strong></p><ol><li>需要根据用户标签以及网站标签，收集用户最关注的标签内容，进行标签标记</li><li>收集数据生成可视化报告</li><li>关键字查询，基于用户的网站标签内容建设</li><li>形成综合信息关联库。以核心用户标签和核心业务标签为参考，对重点资源进行归纳合并，形成重点主题资源关联关系对应表。</li><li>设计一个标签关联模块，可以由运维进行标签关联的配置,即给用户分配权重</li></ol><a id="more"></a><h2 id="智能推荐："><a href="#智能推荐：" class="headerlink" title="智能推荐："></a>智能推荐：</h2><p>搜索优化查询</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#elasticsearch-踩坑-624-版本">Elasticsearch 踩坑 - 6.2.4 版本</a></li><li>目标<ul><li><a href="#自定义评分器">自定义评分器</a></li><li><a href="#智能推荐">智能推荐：</a></li></ul></li><li><a href="#目录">目录</a></li><li>官方改变1<ul><li><a href="#restful请求需要加入header">RestFul请求需要加入Header</a></li></ul></li><li>官方改变2：<ul><li><a href="#分词器-n元语法ngram">分词器 N元语法ngram</a></li></ul></li><li>\1. 基本使用<ul><li><a href="#11-创建索引">1.1 创建索引</a></li><li><a href="#12-查看索引信息">1.2 查看索引信息:</a></li><li>1.3 创建类型<ul><li><a href="#132-指定id的方式">1.3.2 指定id的方式：</a></li><li><a href="#131-不指定id的方式">1.3.1 不指定id的方式</a></li></ul></li><li><a href="#14-创建一个文档">1.4 创建一个文档</a></li></ul></li><li>\2. 基础搜索<ul><li>2.1 使用query 进行搜索<ul><li><a href="#原始方式">原始方式</a></li><li>kibana方式<ul><li><a href="#211-如果只想查找一个字段可以使用term">2.1.1 如果只想查找一个字段，可以使用term</a></li></ul></li></ul></li><li>2.2 过滤器<ul><li><a href="#221-es6以下">2.2.1 ES6以下：</a></li><li><a href="#222-es6及以上">2.2.2 ES6及以上：</a></li></ul></li><li>2.3 应用聚集<ul><li><a href="#231-es6以下">2.3.1 ES6以下：</a></li><li><a href="#232-es6及以上">2.3.2 ES6及以上：</a></li></ul></li><li><a href="#24-通过id获取文档">2.4 通过Id获取文档</a></li></ul></li><li>\3. elasticsearch配置<ul><li><a href="#31-指定集群名称">3.1 指定集群名称：</a></li><li><a href="#32-指定详细的日志记录">3.2 指定详细的日志记录</a></li><li>3.3 调整虚拟机大小<ul><li><a href="#331-linux-使用如下命令">3.3.1 linux 使用如下命令：</a></li><li><a href="#332-使用elasticsearchyml修改启动堆内存大小">3.3.2 使用elasticsearch.yml修改启动堆内存大小</a></li><li><a href="#333-使用修改binelasticsearchinsh-修改">3.3.3 使用修改bin/elasticsearch.in.sh 修改</a></li></ul></li><li>3.4 集群中加入节点<ul><li><a href="#341-查看节点状态">3.4.1 查看节点状态</a></li></ul></li></ul></li><li>\4. 映射_mapping<ul><li>4.1 检索和自定义映射<ul><li><a href="#411-获取目前的映射">4.1.1 获取目前的映射</a></li><li><a href="#412-获取自动生成的映射">4.1.2 获取自动生成的映射</a></li><li>4.1.3 定义新的映射<ul><li><a href="#es6以下版本">es6以下版本</a></li><li><a href="#es6以上版本">es6以上版本</a></li></ul></li><li><a href="#414-改变现有字段类型的方法">4.1.4 改变现有字段类型的方法：</a></li></ul></li><li>4.2 用于定义文档字段的核心类型<ul><li><a href="#421-定义映射当中的index选项">4.2.1 定义映射当中的index选项</a></li><li><a href="#422-如何创建嵌套类型">4.2.2 如何创建嵌套类型：</a></li><li><a href="#423-定义多字段和数组类型">4.2.3 定义多字段和数组类型</a></li></ul></li><li>4.3 使用预定义字段<ul><li><a href="#431-控制如何存储和搜索文档">4.3.1 控制如何存储和搜索文档</a></li></ul></li><li>4.4 更新现有文档<ul><li><a href="#441-文档更新包含如下步骤">4.4.1 文档更新包含如下步骤：</a></li></ul></li><li>4.5 删除文档<ul><li><a href="#451-删除文档的方式">4.5.1 删除文档的方式</a></li><li><a href="#452-删除文档">4.5.2 删除文档</a></li><li><a href="#453-删除单个文档">4.5.3 删除单个文档</a></li><li><a href="#454-删除映射类型和删除查询匹配的文档">4.5.4 删除映射类型和删除查询匹配的文档</a></li><li><a href="#455-删除索引">4.5.5 删除索引</a></li><li><a href="#456-关闭和开发索引">4.5.6 关闭和开发索引</a></li></ul></li></ul></li><li>\5. 版本控制<ul><li>5.1 乐观锁<ul><li><a href="#511-内部版本控制">5.1.1 内部版本控制</a></li><li><a href="#512-外部版本控制">5.1.2 外部版本控制</a></li></ul></li><li><a href="#52-自动重试">5.2 自动重试</a></li></ul></li><li>\6. 搜索与高级搜索分析<ul><li><a href="#61-搜索请求的基本模块">6.1 搜索请求的基本模块</a></li><li>6.2 基于url的搜索请求<ul><li><a href="#621-基于from-和szize的参数来实现结果分页">6.2.1 基于from 和szize的参数来实现结果分页</a></li><li><a href="#622-改变结果的顺序">6.2.2 改变结果的顺序</a></li><li><a href="#623-搜索结果当中限制_source-字段">6.2.3 搜索结果当中限制_source 字段</a></li><li><a href="#624-匹配查询">6.2.4 匹配查询</a></li></ul></li><li>6.3 基于请求主体的搜索请求<ul><li><a href="#631-使用from-和-size参数结果分页">6.3.1 使用from 和 size，参数结果分页</a></li><li>6.3.2 过滤返回_source 内容<ul><li><a href="#在source字段当中返回通配符">在source字段当中返回通配符</a></li><li><a href="#通过include以及exclude-过滤返回_source的内容">通过include以及exclude 过滤返回_source的内容</a></li></ul></li><li><a href="#633-基于结果的排序">6.3.3 基于结果的排序</a></li></ul></li><li>6.4 实践中的基础模块<ul><li><a href="#641-理解回复的内容">6.4.1 理解回复的内容</a></li></ul></li><li>6.5 查询和过滤器DSL （重点）<ul><li>6.5.1 match 查询和term过滤器<ul><li><a href="#过滤器和查询器有什么不同">过滤器和查询器有什么不同：</a></li><li><a href="#es6以下-以及旧版本使用的方式">es6以下 以及旧版本使用的方式</a></li><li><a href="#font-colorred这里需要注意下面使用的是es6以及以上版本font">这里需要注意下面使用的是es6以及以上版本</a></li></ul></li></ul></li><li>6.6 常用的基础查询和过滤器<ul><li><a href="#661-match_all-的使用场景">6.6.1 match_all 的使用场景</a></li><li>6.6.2 query_string 查询<ul><li><a href="#使用query_string-进行复杂的查询">使用query_string 进行复杂的查询</a></li></ul></li><li>6.6.3 term 查询和 term过滤器<ul><li><a href="#使用term-过滤器的得分和term查询器的得分对比">使用term 过滤器的得分，和term查询器的得分对比</a></li></ul></li><li><a href="#664-terms-查询">6.6.4 terms 查询</a></li><li>6.5.5 match查询和 term过滤器<ul><li><a href="#布尔查询行为">布尔查询行为</a></li><li>词组（phrase ）查询的方式<ul><li><a href="#es5版本以及以下的语法">es5版本以及以下的语法：</a></li><li><a href="#es6以及以上要使用以下语法">es6以及以上要使用以下语法</a></li></ul></li></ul></li><li>6.5.6 phrase_prefix 查询<ul><li><a href="#es5x-版本以及以下的语法">es5.x 版本以及以下的语法：</a></li><li><a href="#es6x-需要改成如下写法">es6.x 需要改成如下写法</a></li><li><a href="#使用multi_match-匹配多个字段">使用multi_match 匹配多个字段</a></li></ul></li></ul></li><li>6.7 组合查询和复合查询<ul><li><a href="#671-bool查询">6.7.1 bool查询</a></li><li><a href="#672-bool-的过滤器">6.7.2 bool 的过滤器</a></li></ul></li><li>6.8 超越match 和 过滤器的查询<ul><li>6.8.1 range 查询和过滤器<ul><li><a href="#模拟数据">模拟数据</a></li><li><a href="#现在需要查找出-11-年到-16年的数据">现在需要查找出 11 年到 16年的数据</a></li></ul></li><li>6.8.2 prefix 查询和过滤器<ul><li><a href="#在过滤器当中使用">在过滤器当中使用</a></li></ul></li><li><a href="#683-wildcard-查询">6.8.3 wildcard 查询</a></li></ul></li><li>6.9 使用过滤器查询字段的存在性<ul><li><a href="#691-exists-过滤器">6.9.1 exists 过滤器</a></li><li>6.9.2 missing 过滤器（6.x以上版本已经删除）<ul><li><a href="#作为测试先插入一条增加一个字段的数据">作为测试,先插入一条增加一个字段的数据</a></li><li><a href="#接下来查找字段里没有的值这样写是错误的没有正确写法6x">接下来，查找字段里没有的值,这样写是错误的，没有正确写法（6.x）</a></li></ul></li><li>6.9.3 将任何查询转为过滤器<ul><li><a href="#缓存过滤器">缓存过滤器</a></li></ul></li><li><a href="#694-为任务选择最好的查询">6.9.4 为任务选择最好的查询</a></li></ul></li></ul></li><li>\7. 分析数据<ul><li>7.1 什么是分析数据<ul><li><a href="#711-字符过滤">7.1.1 字符过滤</a></li><li><a href="#712-切分为分词">7.1.2 切分为分词</a></li><li><a href="#713-分词过滤器">7.1.3 分词过滤器</a></li><li><a href="#714-分词索引">7.1.4 分词索引</a></li></ul></li><li>7.2 为文档使用分析器<ul><li>7.2.1 创建索引的过程中，添加定制分析器<ul><li><a href="#旧版本的使用方式">旧版本的使用方式</a></li><li><a href="#网上的案例">网上的案例：</a></li><li><a href="#将书上的案例改为6x支持的形式格式如下">将书上的案例改为6.x支持的形式，格式如下:</a></li></ul></li><li><a href="#722-使用elasticsearchyml-的配置文件进行配置">7.2.2 使用elasticsearch.yml 的配置文件进行配置</a></li><li>7.2.3 在映射中指定某个字段的分析器<ul><li><a href="#书本的方式已经不适用于6x版本了根据官方文档的内容要进行如下定义">书本的方式已经不适用于6.x版本了，根据官方文档的内容要进行如下定义</a></li></ul></li></ul></li><li>7.3 使用API来分析文本<ul><li><a href="#731-使用_analyzer-内置api来进行分析分析器解析步骤">7.3.1 使用_analyzer 内置API来进行分析分析器解析步骤</a></li><li><a href="#732-分析中指定自定义分析器">7.3.2 分析中指定自定义分析器</a></li><li>7.3.3 使用组合即时创建分析器<ul><li><a href="#使用curl方式">使用curl方式</a></li><li><a href="#使用kibana方式">使用kibana方式</a></li></ul></li><li><a href="#734-使用基于某个字段的映射分析">7.3.4 使用基于某个字段的映射分析</a></li><li><a href="#735-使用词条向量api来学习索引词条">7.3.5 使用词条向量API来学习索引词条</a></li></ul></li><li>7.4 分析器/分词器和分词过滤器<ul><li><a href="#740-分析器的概览">7.4.0 分析器的概览</a></li><li>7.4.1 内置分析器<ul><li><a href="#标准分析器">标准分析器</a></li><li><a href="#简单分析器"><strong>简单分析器</strong></a></li><li><a href="#空白分析器"><strong>空白分析器</strong></a></li><li><a href="#停止分析器"><strong>停止分析器</strong></a></li><li><a href="#关键字分析器"><strong>关键字分析器</strong></a></li><li><a href="#模式分析器"><strong>模式分析器</strong></a></li><li><a href="#语言分析器"><strong>语言分析器</strong></a></li><li><a href="#指纹分析器"><strong>指纹分析器</strong></a></li><li><a href="#雪球分析器">雪球分析器</a></li></ul></li><li>7.4.2 分词器<ul><li><a href="#标准分词器"><strong>标准分词器</strong></a></li><li><a href="#字母分词器"><strong>字母分词器</strong></a></li><li><a href="#小写分词器"><strong>小写分词器</strong></a></li><li><a href="#空格分词器"><strong>空格分词器</strong></a></li><li><a href="#uax-url电子邮件令牌生成器">UAX URL电子邮件令牌生成器</a></li><li><a href="#经典分词器">经典分词器</a></li><li><a href="#泰语分词器">泰语分词器</a></li></ul></li><li>7.4.3 分词过滤器<ul><li><a href="#标准分词过滤器">标准分词过滤器</a></li><li><a href="#ascii-folding-token-filterascii折叠过滤器">ASCII Folding Token Filter（ASCII折叠过滤器）</a></li><li><a href="#flatten-graph-token-filter图形分词过滤器">Flatten Graph Token Filter（图形分词过滤器）</a></li><li><a href="#length-token-filter长度分词过滤器">Length Token Filter（长度分词过滤器）</a></li><li><a href="#lowercase-token-filter小写分词过滤器">Lowercase token filter（小写分词过滤器）</a></li><li><a href="#uppercase-token-filter大写分词过滤器">Uppercase Token Filter（大写分词过滤器）</a></li><li><a href="#ngram-token-filtern元语法过滤器">NGram Token Filter（N元语法过滤器）</a></li><li><a href="#edge-ngram-token-filter侧边n元语法过滤器">Edge NGram Token Filter（侧边N元语法过滤器）</a></li></ul></li><li>7.4.4 N元语法的使用场景以及使用案例<ul><li><a href="#使用案例">使用案例:</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.4/analysis-shingle-tokenfilter.html" target="_blank" rel="noopener">Shingle Token Filter</a>（滑动窗口分词过滤器）</li></ul></li></ul></li><li>7.5 提取词干<ul><li>7.5.1 算分提取词干<ul><li><a href="#选取kstem-作为案例测试">选取kstem 作为案例测试</a></li></ul></li><li><a href="#752-使用字典提取词干">7.5.2 使用字典提取词干</a></li></ul></li></ul></li><li>\8. 使用相关性进行搜索<ul><li>8.1 es 的打分机制<ul><li><a href="#811-文档是如何运作的">8.1.1 文档是如何运作的：</a></li><li><a href="#812-词频">8.1.2 词频</a></li><li><a href="#813-逆文档词频">8.1.3 逆文档词频</a></li><li><a href="#814-lucene-评分公式">8.1.4 Lucene 评分公式</a></li></ul></li><li>8.2 其他打分方式<ul><li><a href="#如何指定索引的打分方式">如何指定索引的打分方式？</a></li></ul></li><li><a href="#83-索引期间boosting">8.3 索引期间Boosting</a></li><li>8.4 查询期间的Boosting<ul><li><a href="#841-跨越多个字段的查询">8.4.1 跨越多个字段的查询</a></li><li><a href="#842-使用multi_match-查询指定整个boost">8.4.2 使用multi_match 查询，指定整个Boost</a></li><li><a href="#843-使用特殊符号对于name-进行boost">8.4.3 使用特殊符号^对于name 进行boost</a></li><li><a href="#844-query_string-中对于针对单个的词条进行boost">8.4.4 query_string 中对于针对单个的词条进行boost</a></li></ul></li><li>8.5 使用”解释(explain)”来理解文档评分<ul><li><a href="#851-解释一篇文档不匹配的原因">8.5.1 解释一篇文档不匹配的原因</a></li></ul></li><li>8.6 使用查询再打分来减小评分操作影响<ul><li><a href="#861-官方文档介绍-62版本">8.6.1 官方文档介绍 6.2版本</a></li><li><a href="#862-使用rescore-特性对于匹配文档子集再评分">8.6.2 使用rescore 特性，对于匹配文档子集再评分</a></li></ul></li><li>8.7 function_score 来定制得分<ul><li><a href="#871-function_score-的基本结构">8.7.1 function_score 的基本结构</a></li><li>8.7.2 weight 函数<ul><li><a href="#可以指定多个weight函数">可以指定多个weight函数</a></li></ul></li><li><a href="#873-合并得分">8.7.3 合并得分</a></li><li><a href="#874-field_value_factor-函数">8.7.4 field_value_factor 函数</a></li><li><a href="#875-在function_score-查询中使用field_value_factor">8.7.5 在function_score 查询中使用field_value_factor</a></li></ul></li><li>8.8 painless脚本(5.0后go语言脚本支持已删除)<ul><li><a href="#875-random_score-函数">8.7.5 random_score 函数</a></li><li>8.7.6 衰减函数<ul><li><a href="#官方文档">官方文档</a></li><li><a href="#配置选项">配置选项</a></li></ul></li></ul></li><li><a href="#89-使用脚本排序">8.9 使用脚本排序</a></li></ul></li><li>\9. Elasticsearch REST API 的学习使用<ul><li><a href="#90-api官网">9.0 API官网</a></li><li>9.1 REST 低级 Api<ul><li><a href="#911-起步">9.1.1 起步</a></li><li><a href="#912-初始化">9.1.2 初始化</a></li><li><a href="#913-执行请求">9.1.3 执行请求</a></li><li><a href="#914-接受响应体的处理">9.1.4 接受响应体的处理</a></li></ul></li><li>9.2 REST 高级 API<ul><li><a href="#921-机器翻译介绍">9.2.1 机器翻译介绍</a></li><li><a href="#922-兼容性">9.2.2 </a><a href="https://github.com/elastic/elasticsearch/edit/6.2/docs/java-rest/high-level/getting-started.asciidoc" target="_blank" rel="noopener">兼容性</a></li><li><a href="#923-起步">9.2.3 起步</a></li><li><a href="#924-创建一个rest-连接">9.2.4 创建一个rest 连接</a></li><li>9.2.5 【6.2.4】版本 支持的相关API （重点）<ul><li><a href="#创建索引">创建索引</a></li><li><a href="#删除索引">删除索引</a></li><li><a href="#开放索引">开放索引</a></li><li><a href="#关闭索引">关闭索引</a></li></ul></li><li>9.2.6 索引本身的API<ul><li><a href="#直接根据索引创建一个文档需要如下参数">直接根据索引创建一个文档需要如下参数</a></li><li><a href="#提供文档来源的多种方式">提供文档来源的多种方式</a></li><li><a href="#可选参数">可选参数</a></li><li><a href="#获取响应内容">获取响应内容</a></li><li><a href="#根据上述内容整合">根据上述内容整合</a></li></ul></li></ul></li></ul></li><li>\10. Elasticsearch JAVA API 的学习使用<ul><li>10.1 起步：<ul><li><a href="#1011-maven-依赖">10.1.1 Maven 依赖</a></li></ul></li></ul></li><li>\11. Es painless 脚本插件使用（Elasticsearch script plugin）<ul><li>11.1 前置条件：windows安装gradle<ul><li><a href="#1111-官方下载地址">11.1.1 官方下载地址</a></li><li><a href="#1112-将gradle放入合适位置将gradle加入path环境变量">11.1.2 将gradle放入合适位置，将gradle加入path环境变量</a></li><li><a href="#1113-配置阿里云的镜像">11.1.3 配置阿里云的镜像</a></li></ul></li></ul></li><li>N kibana 学习es的所有内容<ul><li><a href="#20191014">2019.10.14</a></li><li><a href="#20191015">2019.10.15</a></li></ul></li></ul><h1 id="官方改变1"><a href="#官方改变1" class="headerlink" title="官方改变1"></a>官方改变1</h1><h2 id="RestFul请求需要加入Header"><a href="#RestFul请求需要加入Header" class="headerlink" title="RestFul请求需要加入Header"></a>RestFul请求需要加入Header</h2><blockquote><p>-H “Content-Type: application/json”</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; -XPUT &#39;localhost:9200&#x2F;get-together&#x2F;group&#x2F;1?pretty&#39; -d &#39;&#123;&quot;name&quot;:&quot;elastice denver&quot;,&quot;organizer&quot;:&quot;Lee&quot;&#125;&#39;</span><br></pre></td></tr></table></figure><h1 id="官方改变2："><a href="#官方改变2：" class="headerlink" title="官方改变2："></a>官方改变2：</h1><h2 id="分词器-N元语法ngram"><a href="#分词器-N元语法ngram" class="headerlink" title="分词器 N元语法ngram"></a>分词器 N元语法ngram</h2><p>分词器 N元语法ngram 由于在实际使用发生过巨大差异事故，在6.2.4 提示是被弃用的，但是后面社区提议在实际需求中使用发现没有效果，与开发交流过后，官方在7.0之后将弃用删除，继续使用ngram</p><blockquote><p>所以在这个6.2.4 版本中使用ngram 分词器 的参数 min_gram 和 max_gram 无法作用于N元语法</p></blockquote><h1 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h1><h2 id="1-1-创建索引"><a href="#1-1-创建索引" class="headerlink" title="1.1 创建索引"></a>1.1 创建索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;lib&#x2F;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  &quot;settings&quot;:&#123;</span><br><span class="line"></span><br><span class="line">      &quot;index&quot;:&#123;</span><br><span class="line"></span><br><span class="line">        &quot;number_of_shards&quot;: 5,</span><br><span class="line"></span><br><span class="line">        &quot;number_of_replicas&quot;: 1</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-查看索引信息"><a href="#1-2-查看索引信息" class="headerlink" title="1.2 查看索引信息:"></a>1.2 查看索引信息:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_settings</span><br><span class="line">curl -XGET &#39;192.168.92.180:9200&#x2F;lib&#x2F;_settings?pretty&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;lib&quot; : &#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;index&quot; : &#123;</span><br><span class="line">        &quot;creation_date&quot; : &quot;1570895449310&quot;,</span><br><span class="line">        &quot;number_of_shards&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot; : &quot;KF8Kfs3SSBKPhZX4pX5iVw&quot;,</span><br><span class="line">        &quot;version&quot; : &#123;</span><br><span class="line">          &quot;created&quot; : &quot;6020499&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot; : &quot;lib&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET _all&#x2F;_settings</span><br><span class="line">curl -XGET &#39;192.168.92.180:9200&#x2F;_all&#x2F;_settings?pretty&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;new-index&quot; : &#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;index&quot; : &#123;</span><br><span class="line">        &quot;creation_date&quot; : &quot;1570877785070&quot;,</span><br><span class="line">        &quot;number_of_shards&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot; : &quot;0HE2lh_gS96UPRCIWMqaZA&quot;,</span><br><span class="line">        &quot;version&quot; : &#123;</span><br><span class="line">          &quot;created&quot; : &quot;6020499&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot; : &quot;new-index&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;get-together&quot; : &#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;index&quot; : &#123;</span><br><span class="line">        &quot;creation_date&quot; : &quot;1570878100116&quot;,</span><br><span class="line">        &quot;number_of_shards&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot; : &quot;t1a2Kwx-QvCjF-pSuTGntQ&quot;,</span><br><span class="line">        &quot;version&quot; : &#123;</span><br><span class="line">          &quot;created&quot; : &quot;6020499&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot; : &quot;get-together&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;lib&quot; : &#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;index&quot; : &#123;</span><br><span class="line">        &quot;creation_date&quot; : &quot;1570895449310&quot;,</span><br><span class="line">        &quot;number_of_shards&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot; : &quot;KF8Kfs3SSBKPhZX4pX5iVw&quot;,</span><br><span class="line">        &quot;version&quot; : &#123;</span><br><span class="line">          &quot;created&quot; : &quot;6020499&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot; : &quot;lib&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-创建类型"><a href="#1-3-创建类型" class="headerlink" title="1.3 创建类型"></a>1.3 创建类型</h2><h3 id="1-3-2-指定id的方式："><a href="#1-3-2-指定id的方式：" class="headerlink" title="1.3.2 指定id的方式："></a>1.3.2 指定id的方式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;lib&#x2F;user&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;first_name&quot;: &quot;book&quot;,</span><br><span class="line">  &quot;last_name&quot;: &quot;lin lin&quot;,</span><br><span class="line">  &quot;age&quot;: 20,</span><br><span class="line">  &quot;birthday&quot;: &quot;2019-4-28&quot;,</span><br><span class="line">  &quot;interesting&quot;: [</span><br><span class="line">    &quot;football&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-1-不指定id的方式"><a href="#1-3-1-不指定id的方式" class="headerlink" title="1.3.1 不指定id的方式"></a>1.3.1 不指定id的方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;user&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot;: &quot;book&quot;,</span><br><span class="line">  &quot;last_name&quot;: &quot;lin lin&quot;,</span><br><span class="line">  &quot;age&quot;: 20,</span><br><span class="line">  &quot;birthday&quot;: &quot;20191122&quot;,</span><br><span class="line">  &quot;interesting&quot;: [ &quot;football&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;user&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot; :  &quot;Douglas&quot;,</span><br><span class="line">    &quot;last_name&quot; :   &quot;Fir&quot;,</span><br><span class="line">    &quot;age&quot; :         23,</span><br><span class="line">    &quot;about&quot;:        &quot;I like to build cabinets&quot;,</span><br><span class="line">    &quot;interests&quot;:  [ &quot;forestry&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-创建一个文档"><a href="#1-4-创建一个文档" class="headerlink" title="1.4 创建一个文档"></a>1.4 创建一个文档</h2><p>当使用curl 的时候， 他看上去是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; -XPUT &#39;192.168.92.180:9200&#x2F;lib&#x2F;user&#x2F;1&#39; -d \</span><br><span class="line">&gt; &#39;&#123;</span><br><span class="line">&gt; &quot;first_name&quot;:&quot;Jane&quot;,</span><br><span class="line">&gt; &quot;last_name&quot;:&quot;Smith&quot;,</span><br><span class="line">&gt; &quot;age&quot;:32,</span><br><span class="line">&gt; &quot;about&quot;:&quot;I like to collect rock albums&quot;,</span><br><span class="line">&gt; &quot;interests&quot;: [&quot;music&quot;]</span><br><span class="line">&gt; &#125;&#39;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">&quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">&quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">&quot;_version&quot;: 1,</span><br><span class="line">&quot;result&quot;: &quot;created&quot;,</span><br><span class="line">&quot;_shards&quot;: &#123;</span><br><span class="line">&quot;total&quot;: 2,</span><br><span class="line">&quot;successful&quot;: 1,</span><br><span class="line">&quot;failed&quot;: 0</span><br><span class="line">&#125;,</span><br><span class="line">&quot;_seq_no&quot;: 0,</span><br><span class="line">&quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-基础搜索"><a href="#2-基础搜索" class="headerlink" title="2. 基础搜索"></a>2. 基础搜索</h1><h2 id="2-1-使用query-进行搜索"><a href="#2-1-使用query-进行搜索" class="headerlink" title="2.1 使用query 进行搜索"></a>2.1 使用query 进行搜索</h2><h3 id="原始方式"><a href="#原始方式" class="headerlink" title="原始方式"></a>原始方式</h3><p>curl -H “Content-Type: application/json”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; -XGET &#39;119.23.219.183:9200&#x2F;lib&#x2F;user&#x2F;_search?pretty&#39; -d &#39;&#123;&quot;query&quot;:&#123;“defualt”: &quot;field_name&quot;, &quot;query_string&quot;: &#123;&quot;query&quot;: &quot;jone&quot;&#125;&#125;&#125;&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 11,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 5,</span><br><span class="line">    &quot;successful&quot; : 5,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;max_score&quot; : 0.2876821,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.2876821,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;first_name&quot; : &quot;Jone&quot;,</span><br><span class="line">          &quot;last_name&quot; : &quot;pig&quot;,</span><br><span class="line">          &quot;age&quot; : 11,</span><br><span class="line">          &quot;birthday&quot; : &quot;2019-11-18&quot;,</span><br><span class="line">          &quot;interesting&quot; : [</span><br><span class="line">            &quot;basketball&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kibana方式"><a href="#kibana方式" class="headerlink" title="kibana方式"></a>kibana方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?pretty </span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      “defualt”: &quot;field_name&quot;</span><br><span class="line">      &quot;query&quot;: &quot;jone&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-1-如果只想查找一个字段，可以使用term"><a href="#2-1-1-如果只想查找一个字段，可以使用term" class="headerlink" title="2.1.1 如果只想查找一个字段，可以使用term"></a>2.1.1 如果只想查找一个字段，可以使用term</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?pretty </span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &quot;jone&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-过滤器"><a href="#2-2-过滤器" class="headerlink" title="2.2 过滤器"></a>2.2 过滤器</h2><h3 id="2-2-1-ES6以下："><a href="#2-2-1-ES6以下：" class="headerlink" title="2.2.1 ES6以下："></a>2.2.1 ES6以下：</h3><p>旧版本使用如下方式 <strong>es6版本以下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;filtered&quot;:&#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;:&#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;jone&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-ES6及以上："><a href="#2-2-2-ES6及以上：" class="headerlink" title="2.2.2 ES6及以上："></a>2.2.2 ES6及以上：</h3><p>新版本的过滤器要使用如下方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;jone&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-应用聚集"><a href="#2-3-应用聚集" class="headerlink" title="2.3 应用聚集"></a>2.3 应用聚集</h2><h3 id="2-3-1-ES6以下："><a href="#2-3-1-ES6以下：" class="headerlink" title="2.3.1 ES6以下："></a>2.3.1 ES6以下：</h3><p>旧版本使用如下方式 <strong>es6版本以下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">&quot;aggregations&quot;:&#123;</span><br><span class="line">&quot;organizers&quot;:&#123;</span><br><span class="line">&quot;terms&quot;: &#123; &quot;field&quot; : &quot;organizer&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-ES6及以上："><a href="#2-3-2-ES6及以上：" class="headerlink" title="2.3.2 ES6及以上："></a>2.3.2 ES6及以上：</h3><p>需求是根据年龄进行划分聚合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0, </span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    </span><br><span class="line">    &quot;organizers&quot;:&#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;age&quot;,</span><br><span class="line">        &quot;size&quot;: 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（1）size</strong>：查询条数，这里设置为0，因为不关心搜索到的结果，只关心聚合结果，提供效率；</p><p><strong>（2）aggs</strong>：声明这是一个聚合查询，是aggregations的缩写；</p><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 47,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 3,</span><br><span class="line">    &quot;max_score&quot;: 0,</span><br><span class="line">    &quot;hits&quot;: []</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;organizers&quot;: &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">      &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 11,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 20,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 23,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-通过Id获取文档"><a href="#2-4-通过Id获取文档" class="headerlink" title="2.4 通过Id获取文档"></a>2.4 通过Id获取文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;1</span><br></pre></td></tr></table></figure><h1 id="3-elasticsearch配置"><a href="#3-elasticsearch配置" class="headerlink" title="3. elasticsearch配置"></a>3. elasticsearch配置</h1><h2 id="3-1-指定集群名称："><a href="#3-1-指定集群名称：" class="headerlink" title="3.1 指定集群名称："></a>3.1 指定集群名称：</h2><p>在<strong>elasticsearch.yml</strong> 文件当中指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: xxxx</span><br></pre></td></tr></table></figure><h2 id="3-2-指定详细的日志记录"><a href="#3-2-指定详细的日志记录" class="headerlink" title="3.2 指定详细的日志记录"></a>3.2 指定详细的日志记录</h2><ol><li><p>主要日志</p><p>基础的日志</p></li><li><p>慢搜索日志</p><p>多于半秒的查询都会被记录（默认）</p></li><li><p>慢索引日志</p><p>多于半秒的查询都会被记录（默认）</p></li></ol><p>在<strong>elasticsearch.yml</strong> 文件当中指定,查看所有的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rootLogger: TRACE, console, file</span><br></pre></td></tr></table></figure><h2 id="3-3-调整虚拟机大小"><a href="#3-3-调整虚拟机大小" class="headerlink" title="3.3 调整虚拟机大小"></a>3.3 调整虚拟机大小</h2><h3 id="3-3-1-linux-使用如下命令："><a href="#3-3-1-linux-使用如下命令：" class="headerlink" title="3.3.1 linux 使用如下命令："></a>3.3.1 linux 使用如下命令：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ES_HEAP_SIZE&#x3D;500m bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure><h3 id="3-3-2-使用elasticsearch-yml修改启动堆内存大小"><a href="#3-3-2-使用elasticsearch-yml修改启动堆内存大小" class="headerlink" title="3.3.2 使用elasticsearch.yml修改启动堆内存大小"></a>3.3.2 使用elasticsearch.yml修改启动堆内存大小</h3><h3 id="3-3-3-使用修改bin-elasticsearch-in-sh-修改"><a href="#3-3-3-使用修改bin-elasticsearch-in-sh-修改" class="headerlink" title="3.3.3 使用修改bin/elasticsearch.in.sh 修改"></a>3.3.3 使用修改bin/elasticsearch.in.sh 修改</h3><p>#!/bin/sh 后面加入ES_HEAP_SIZE=500m</p><h2 id="3-4-集群中加入节点"><a href="#3-4-集群中加入节点" class="headerlink" title="3.4 集群中加入节点"></a>3.4 集群中加入节点</h2><h3 id="3-4-1-查看节点状态"><a href="#3-4-1-查看节点状态" class="headerlink" title="3.4.1 查看节点状态"></a>3.4.1 查看节点状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat&#x2F;shards?v</span><br></pre></td></tr></table></figure><h1 id="4-映射-mapping"><a href="#4-映射-mapping" class="headerlink" title="4. 映射_mapping"></a>4. 映射_mapping</h1><p>使用映射来定义文档：</p><p>注意同一个索引存在多个类型，所有映射也可以多个类型</p><p>但是多个类型可能存在文档里面相同名称的字段</p><h2 id="4-1-检索和自定义映射"><a href="#4-1-检索和自定义映射" class="headerlink" title="4.1 检索和自定义映射"></a>4.1 检索和自定义映射</h2><h3 id="4-1-1-获取目前的映射"><a href="#4-1-1-获取目前的映射" class="headerlink" title="4.1.1 获取目前的映射"></a>4.1.1 获取目前的映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_mapping?pretty</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;lib&quot;: &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;user&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;about&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;age&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;long&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;birthday&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;date&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;first_name&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;interesting&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;interests&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;last_name&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-2-获取自动生成的映射"><a href="#4-1-2-获取自动生成的映射" class="headerlink" title="4.1.2 获取自动生成的映射"></a>4.1.2 获取自动生成的映射</h3><p>使用下面的实例：</p><p>第一步：创建一个新索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;get-together&#x2F;new-event&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;late night with elastic&quot;,</span><br><span class="line">  &quot;date&quot;:&quot;2013-10-25T19:00&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步： 获取当前映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;get-together&#x2F;_mapping&#x2F;new-event?pretty</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;get-together&quot;: &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;new-event&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;date&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;date&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;name&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-定义新的映射"><a href="#4-1-3-定义新的映射" class="headerlink" title="4.1.3 定义新的映射"></a>4.1.3 定义新的映射</h3><h4 id="es6以下版本"><a href="#es6以下版本" class="headerlink" title="es6以下版本"></a>es6以下版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;get-together&#x2F;_mapping&#x2F;new-event</span><br><span class="line">&#123;</span><br><span class="line">  &quot;new-event&quot;:&#123;</span><br><span class="line">    &quot;properties&quot;:&#123;</span><br><span class="line">      &quot;host&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;string&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="es6以上版本"><a href="#es6以上版本" class="headerlink" title="es6以上版本"></a>es6以上版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;get-together&#x2F;_mapping&#x2F;new-event</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;host&quot;:&#123;</span><br><span class="line">      &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时获取映射会发现新增了一个映射内容</p><h3 id="4-1-4-改变现有字段类型的方法："><a href="#4-1-4-改变现有字段类型的方法：" class="headerlink" title="4.1.4 改变现有字段类型的方法："></a>4.1.4 改变现有字段类型的方法：</h3><ol><li>删除 new-evenets 类型的所有数据</li><li>设置新的映射类型以及字段类型</li><li>再次索引所有数据</li></ol><h2 id="4-2-用于定义文档字段的核心类型"><a href="#4-2-用于定义文档字段的核心类型" class="headerlink" title="4.2 用于定义文档字段的核心类型"></a>4.2 用于定义文档字段的核心类型</h2><h3 id="4-2-1-定义映射当中的index选项"><a href="#4-2-1-定义映射当中的index选项" class="headerlink" title="4.2.1 定义映射当中的index选项"></a>4.2.1 定义映射当中的index选项</h3><ol><li>anaLyzed(默认) 将大写转为小写，字符串分解为单词</li><li>not_analyzed 分析过程略过，变成单独的词条索引</li><li>no 索引略过，没有词条产生<ol><li>节省存储空间，无须在该字段搜索的时候使用</li></ol></li></ol><h3 id="4-2-2-如何创建嵌套类型："><a href="#4-2-2-如何创建嵌套类型：" class="headerlink" title="4.2.2 如何创建嵌套类型："></a>4.2.2 如何创建嵌套类型：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;get-together&#x2F;_mapping&#x2F;new-event</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;text&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;user&quot;:&#123;</span><br><span class="line">      &quot;type&quot;: &quot;nested&quot;,</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;myname&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;text&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-定义多字段和数组类型"><a href="#4-2-3-定义多字段和数组类型" class="headerlink" title="4.2.3 定义多字段和数组类型"></a>4.2.3 定义多字段和数组类型</h3><h2 id="4-3-使用预定义字段"><a href="#4-3-使用预定义字段" class="headerlink" title="4.3 使用预定义字段"></a>4.3 使用预定义字段</h2><h3 id="4-3-1-控制如何存储和搜索文档"><a href="#4-3-1-控制如何存储和搜索文档" class="headerlink" title="4.3.1 控制如何存储和搜索文档"></a>4.3.1 控制如何存储和搜索文档</h3><ol><li><p>_source 存储原有内容</p><ol><li>按照原有格式存储原有文档</li><li>enable可以设置true,false</li><li>返回某些特定字段在url指定使用fields=xxx,如果需要多个字段用逗号隔开</li><li>使用”store”: “yes” 存储特定的字段</li></ol></li><li><p>_all 索引一切</p><ol><li>不指定字段名称默认是_all查找</li><li>默认隐藏属性为”<strong>include_in_all</strong>“ ， 可以设置为false不被包含</li></ol></li><li><p>_uid 识别文档</p><ol><li>_type和_id的结合体</li><li>es内部使用_uid 来确定唯一文档的身份</li></ol></li><li><p>_index 在文档中存储索引名称</p><ol><li>默认情况下是关闭的</li><li>如果需要了解其内容，需要实现使用put 请求将enabled 设置为true</li></ol></li><li><p>_update 更新现有文档</p><ol><li>默认使用go语言进行脚本的更新操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;user&#x2F;1&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;first_name&quot;:&quot;sss&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>upsert 创建不存在的文档（注意此时5不存在）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;user&#x2F;5&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;age&quot;:5</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;upsert&quot;: &#123;</span><br><span class="line">    &quot;myname&quot;: &quot;elastic&quot;,</span><br><span class="line">    &quot;age&quot;: 4</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>_open 以及 _close 分别表示开放索引和关闭索引</p></li></ol><h2 id="4-4-更新现有文档"><a href="#4-4-更新现有文档" class="headerlink" title="4.4 更新现有文档"></a>4.4 更新现有文档</h2><h3 id="4-4-1-文档更新包含如下步骤："><a href="#4-4-1-文档更新包含如下步骤：" class="headerlink" title="4.4.1 文档更新包含如下步骤："></a>4.4.1 文档更新包含如下步骤：</h3><ol><li>检索文档</li><li>处理文档</li><li>重新索引文档</li><li>先前文档被删除</li><li>完成</li></ol><h2 id="4-5-删除文档"><a href="#4-5-删除文档" class="headerlink" title="4.5 删除文档"></a>4.5 删除文档</h2><h3 id="4-5-1-删除文档的方式"><a href="#4-5-1-删除文档的方式" class="headerlink" title="4.5.1 删除文档的方式"></a>4.5.1 删除文档的方式</h3><ol><li>删除单个文档或者一组文档<ol><li>标记为删除</li><li>延迟用异步方式排出</li></ol></li><li>删除整个索引（删除多组文档的特例）<ol><li>移除和索引所有相关的文件</li><li>效率高</li></ol></li><li>关闭索引<ol><li>不允许读写操作，数据也不进内存</li><li>但是索引还是在磁盘内</li><li>可以再次打开关闭的索引</li></ol></li></ol><h3 id="4-5-2-删除文档"><a href="#4-5-2-删除文档" class="headerlink" title="4.5.2 删除文档"></a>4.5.2 删除文档</h3><ol><li>通过id删除单个文档</li><li>单个请求删除多个文档<ol><li>比单独删除效率高</li></ol></li><li>删除映射类型，包括其中文档</li><li>删除匹配某个查询的所有文档</li></ol><h3 id="4-5-3-删除单个文档"><a href="#4-5-3-删除单个文档" class="headerlink" title="4.5.3 删除单个文档"></a>4.5.3 删除单个文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE &#x2F;lib&#x2F;user&#x2F;5</span><br></pre></td></tr></table></figure><p>为了防止外部的并发更新与删除的操作：</p><p>es在一段时间内保留这篇文档的版本，拒绝比删除文档更低的更新操作</p><p>默认时间为60秒</p><p>yml或者索引配置的 <strong>index.gc_deletes</strong> 设置保留时间</p><h3 id="4-5-4-删除映射类型和删除查询匹配的文档"><a href="#4-5-4-删除映射类型和删除查询匹配的文档" class="headerlink" title="4.5.4 删除映射类型和删除查询匹配的文档"></a>4.5.4 删除映射类型和删除查询匹配的文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE &#x2F;get-together&#x2F;_query?q&#x3D;elasticsearch</span><br></pre></td></tr></table></figure><p>注意点：</p><ol><li>类型名称只是文档的另一个字段</li><li>索引的所有文档，无论属于哪个映射类型，都存在同一个分片</li><li><strong>针对删除类型和删除完整索引两者的性能进行比较的时候，删除类型比删除索引要更长的时间和更多的资源</strong></li></ol><h3 id="4-5-5-删除索引"><a href="#4-5-5-删除索引" class="headerlink" title="4.5.5 删除索引"></a>4.5.5 删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE &#x2F;myindex[,xxx,xx] 删除一个或者多个索引</span><br><span class="line">DELETE &#x2F;_all 删除所有的索引</span><br></pre></td></tr></table></figure><blockquote><p>_all 删除所有文档是否过于危险？</p><p>elasticsearch.yml 文件中</p><p>action.destructive_requires_name: true</p><p>预防这种情况发生， 可以<strong>拒绝</strong>delete _all 操作</p><p>以及索引名称当中的<strong>通配符</strong></p></blockquote><p>注意这里的删除也是标记删除：在分段与合并中进行合并之后才会真实删除操作</p><blockquote><p>分段与合并是什么？</p><ol><li>一个分段是建立索引的时候创建的一块Lucene 索引</li><li>当es在分片上查询的时候，Luncene需要查询所有的分段</li><li>合并文档意味着分段的合并以及I/O和CPU读写操作（合并操作是异步进行的）</li><li>索引操作会产生许多小分段，需要定期进行合并</li></ol></blockquote><h3 id="4-5-6-关闭和开发索引"><a href="#4-5-6-关闭和开发索引" class="headerlink" title="4.5.6 关闭和开发索引"></a>4.5.6 关闭和开发索引</h3><p>使用POST 加上 _open 以及 _close 对于索引进行开放和关闭</p><ol><li>一旦索引被关闭，内存唯一痕迹是元数据，如名字以及分片的位置</li><li>如果条件允许，关闭索引比删除索引要好</li></ol><h1 id="5-版本控制"><a href="#5-版本控制" class="headerlink" title="5. 版本控制"></a>5. 版本控制</h1><h2 id="5-1-乐观锁"><a href="#5-1-乐观锁" class="headerlink" title="5.1 乐观锁"></a>5.1 乐观锁</h2><h3 id="5-1-1-内部版本控制"><a href="#5-1-1-内部版本控制" class="headerlink" title="5.1.1 内部版本控制"></a>5.1.1 内部版本控制</h3><p>PUT /lib/user/4?version=3</p><h3 id="5-1-2-外部版本控制"><a href="#5-1-2-外部版本控制" class="headerlink" title="5.1.2 外部版本控制"></a>5.1.2 外部版本控制</h3><p>version_type=external + 版本号</p><h2 id="5-2-自动重试"><a href="#5-2-自动重试" class="headerlink" title="5.2 自动重试"></a>5.2 自动重试</h2><p>retry_on_conflict=3(版本号) 自动重试</p><h1 id="6-搜索与高级搜索分析"><a href="#6-搜索与高级搜索分析" class="headerlink" title="6. 搜索与高级搜索分析"></a>6. 搜索与高级搜索分析</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl &#39;&#x2F;_search&#39;</span><br><span class="line">curl &#39;&#x2F;xxx&#x2F;_search&#39; 指定索引</span><br><span class="line">curl &#39;&#x2F;xxx&#x2F;xxx&#x2F;_search&#39; 搜索类型</span><br><span class="line">curl &#39;&#x2F;_all&#x2F;xxx&#x2F;_search&#39; 所有索引中搜索时事件类型</span><br><span class="line">curl &#39;&#x2F;*&#x2F;xxx&#x2F;_search&#39; 通配符搜索所有</span><br><span class="line">curl &#39;&#x2F;xxxx,xxxx&#x2F;xxx,xxxx&#x2F;_search&#39; 多个类型搜索</span><br><span class="line">curl &#39;&#x2F;+get-toge*,-get-together&#x2F;_search&#39; 搜索以get-toge 开头的索引，但是不包括get-together</span><br></pre></td></tr></table></figure><h2 id="6-1-搜索请求的基本模块"><a href="#6-1-搜索请求的基本模块" class="headerlink" title="6.1 搜索请求的基本模块"></a>6.1 搜索请求的基本模块</h2><ol><li>query：搜索请求最重要的部分，配置了基于评分返回最佳的文档</li><li>size：代表返回文档数量</li><li>from：和size一起使用，用于分页操作（注意：为了知道第二页的10项结果，必须先知道计算前20的结果，也就是说，<strong>越往后的翻页搜索代价越大</strong>）</li><li>_source：指定字段如何返回</li><li>sort：默认排序基于文档得分</li></ol><h2 id="6-2-基于url的搜索请求"><a href="#6-2-基于url的搜索请求" class="headerlink" title="6.2 基于url的搜索请求"></a>6.2 基于url的搜索请求</h2><h3 id="6-2-1-基于from-和szize的参数来实现结果分页"><a href="#6-2-1-基于from-和szize的参数来实现结果分页" class="headerlink" title="6.2.1 基于from 和szize的参数来实现结果分页"></a>6.2.1 基于from 和szize的参数来实现结果分页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?from&#x3D;2&amp;size&#x3D;2</span><br></pre></td></tr></table></figure><p>from=2 表示从第三条开始</p><p>size=2 表示读取2条记录</p><h3 id="6-2-2-改变结果的顺序"><a href="#6-2-2-改变结果的顺序" class="headerlink" title="6.2.2 改变结果的顺序"></a>6.2.2 改变结果的顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search?sort&#x3D;age:_id</span><br></pre></td></tr></table></figure><h3 id="6-2-3-搜索结果当中限制-source-字段"><a href="#6-2-3-搜索结果当中限制-source-字段" class="headerlink" title="6.2.3 搜索结果当中限制_source 字段"></a>6.2.3 搜索结果当中限制_source 字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search?sort&#x3D;age:_id&amp;_source&#x3D;first_name,age</span><br></pre></td></tr></table></figure><h3 id="6-2-4-匹配查询"><a href="#6-2-4-匹配查询" class="headerlink" title="6.2.4 匹配查询"></a>6.2.4 匹配查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search?sort&#x3D;age:_id&amp;_source&#x3D;first_name,age</span><br></pre></td></tr></table></figure><h2 id="6-3-基于请求主体的搜索请求"><a href="#6-3-基于请求主体的搜索请求" class="headerlink" title="6.3 基于请求主体的搜索请求"></a>6.3 基于请求主体的搜索请求</h2><h3 id="6-3-1-使用from-和-size，参数结果分页"><a href="#6-3-1-使用from-和-size，参数结果分页" class="headerlink" title="6.3.1 使用from 和 size，参数结果分页"></a>6.3.1 使用from 和 size，参数结果分页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;from&quot;: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-2-过滤返回-source-内容"><a href="#6-3-2-过滤返回-source-内容" class="headerlink" title="6.3.2 过滤返回_source 内容"></a>6.3.2 过滤返回_source 内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;first_name&quot;, &quot;age&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在source字段当中返回通配符"><a href="#在source字段当中返回通配符" class="headerlink" title="在source字段当中返回通配符"></a>在source字段当中返回通配符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;*_name&quot;, &quot;a*&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是数组，可以指定: _source: [“name.*”, “address.*”]</p><h4 id="通过include以及exclude-过滤返回-source的内容"><a href="#通过include以及exclude-过滤返回-source的内容" class="headerlink" title="通过include以及exclude 过滤返回_source的内容"></a>通过include以及exclude 过滤返回_source的内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;includes&quot;: [&quot;*_name&quot;, &quot;age&quot;],</span><br><span class="line">    &quot;excludes&quot;: [&quot;first_name&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>include: 包含匹配</p><p>excludes: 排除</p><h3 id="6-3-3-基于结果的排序"><a href="#6-3-3-基于结果的排序" class="headerlink" title="6.3.3 基于结果的排序"></a>6.3.3 基于结果的排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    &quot;_score&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 12,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 15,</span><br><span class="line">    &quot;max_score&quot;: null,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;BrimyW0B5sayAd6P9LGl&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;CbimyW0B5sayAd6P-LHO&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;D7imyW0B5sayAd6P_LH0&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;ELimyW0B5sayAd6P_bGM&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;BbimyW0B5sayAd6P57Hs&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;B7imyW0B5sayAd6P9rG3&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;EbimyW0B5sayAd6P_rEo&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;CLimyW0B5sayAd6P97Hz&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;CrimyW0B5sayAd6P-bGO&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-实践中的基础模块"><a href="#6-4-实践中的基础模块" class="headerlink" title="6.4 实践中的基础模块"></a>6.4 实践中的基础模块</h2><p>结合上面的几个点，总结出了下面一个查询内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;_source&quot;: [&quot;*_name&quot;, &quot;age&quot;],</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;:&quot;desc&quot;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-1-理解回复的内容"><a href="#6-4-1-理解回复的内容" class="headerlink" title="6.4.1 理解回复的内容"></a>6.4.1 理解回复的内容</h3><p>注意点： 如果没有存储文档的_source 和 fields, 无法从es 获取数值</p><h2 id="6-5-查询和过滤器DSL-（重点）"><a href="#6-5-查询和过滤器DSL-（重点）" class="headerlink" title="6.5 查询和过滤器DSL （重点）"></a>6.5 查询和过滤器DSL （重点）</h2><h3 id="6-5-1-match-查询和term过滤器"><a href="#6-5-1-match-查询和term过滤器" class="headerlink" title="6.5.1 match 查询和term过滤器"></a>6.5.1 match 查询和term过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &quot;Jane&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：此处 <strong>jane</strong> 是否大写对于查询结果没有影响</p><h4 id="过滤器和查询器有什么不同："><a href="#过滤器和查询器有什么不同：" class="headerlink" title="过滤器和查询器有什么不同："></a>过滤器和查询器有什么不同：</h4><p>查询器：为特定的词条计算得分</p><p>过滤器：</p><ol><li>“文档是否匹配这个查询” 返回简单的是或者否</li><li>限制了需要计算得分的文档数量</li><li>根据过滤器的种类，可以再“位集合”中缓存结果</li><li>允许手动指定一个过滤器是否应该被缓存</li></ol><blockquote><p>基于如上原因，过滤器会比查询器要快上很多，并且查询结果可以被缓存</p></blockquote><h4 id="es6以下-以及旧版本使用的方式"><a href="#es6以下-以及旧版本使用的方式" class="headerlink" title="es6以下 以及旧版本使用的方式"></a>es6以下 以及旧版本使用的方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;filtedred&quot;:&#123; -- 表示指定一个附上过滤器的查询</span><br><span class="line">            &quot;query&quot;:&#123; -- 指定查询器</span><br><span class="line">                &quot;match&quot;: &quot;xxx&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;filter&quot;:&#123; -- 指定过滤器</span><br><span class="line">                &quot;term&quot;:&#123;</span><br><span class="line">                    ....</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅做了解即可，新版更为简单易用</p><h4 id="这里需要注意下面使用的是es6以及以上版本"><a href="#这里需要注意下面使用的是es6以及以上版本" class="headerlink" title="这里需要注意下面使用的是es6以及以上版本"></a>这里需要注意下面使用的是es6以及以上版本</h4><blockquote><p>es6 之后使用</p><p>bool:{</p><p>must 表示匹配操作</p><p>可以执行match 操作</p><p>filter:</p><p>对于结果进行过滤,</p><p>这要比在全部搜索中去匹配要快的多</p><p>}</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;about&quot;: &quot;hide&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ], </span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;wang&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 16,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;max_score&quot;: 1.2039728,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;E7joyW0B5sayAd6PEbFA&quot;,</span><br><span class="line">        &quot;_score&quot;: 1.2039728,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;wang&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;laji&quot;,</span><br><span class="line">          &quot;age&quot;: 333,</span><br><span class="line">          &quot;about&quot;: &quot;I hide to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;basket&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-6-常用的基础查询和过滤器"><a href="#6-6-常用的基础查询和过滤器" class="headerlink" title="6.6 常用的基础查询和过滤器"></a>6.6 常用的基础查询和过滤器</h2><h3 id="6-6-1-match-all-的使用场景"><a href="#6-6-1-match-all-的使用场景" class="headerlink" title="6.6.1 match_all 的使用场景"></a>6.6.1 match_all 的使用场景</h3><ol><li>希望使用过滤器的时候</li><li>希望返回被搜索的索引和类型的全部文档</li></ol><h3 id="6-6-2-query-string-查询"><a href="#6-6-2-query-string-查询" class="headerlink" title="6.6.2 query_string 查询"></a>6.6.2 query_string 查询</h3><blockquote><p>注意事项:</p><p>AND 必须大写， 即查询条件的连接符， 否则系统会当做查询字符串的内容进行识别</p><p>查询条件连接符两边必须加上一个空格区分</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search?q&#x3D;wang</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;default_field&quot;: &quot;first_name&quot;,</span><br><span class="line">      &quot;query&quot;: &quot;first_name:wang AND age:333&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用query-string-进行复杂的查询"><a href="#使用query-string-进行复杂的查询" class="headerlink" title="使用query_string 进行复杂的查询"></a>使用query_string 进行复杂的查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; tags:search OR tags:lucene&#125; AND create_on:[1999-01-01 TO 2011-01-01]</span><br></pre></td></tr></table></figure><p>这是一个示例查询</p><p>下面为个人实验案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;default_field&quot;: &quot;first_name&quot;,</span><br><span class="line">      &quot;query&quot;: &quot;first_name:wang OR first_name:jane AND age:[0 TO 999]&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于query_string 过于强大：建议的替代方案为使用 term, terms, match 或者 multi_match</p><p>允许你在一个或者多个文档搜索</p><p>或者使用 simple_query_string</p><p>使用 +、-、AND 和 OR 更容易使用的查询语法</p></blockquote><h3 id="6-6-3-term-查询和-term过滤器"><a href="#6-6-3-term-查询和-term过滤器" class="headerlink" title="6.6.3 term 查询和 term过滤器"></a>6.6.3 term 查询和 term过滤器</h3><ol><li>最简单的几个可执行查询之一</li><li>指定需要搜索的词条和字段</li><li>了解term(词条)查询</li></ol><blockquote><p>注意：被搜索的词条没有经过分析，文档的词条要经过精确匹配才能作为结果返回</p></blockquote><h4 id="使用term-过滤器的得分，和term查询器的得分对比"><a href="#使用term-过滤器的得分，和term查询器的得分对比" class="headerlink" title="使用term 过滤器的得分，和term查询器的得分对比"></a>使用term 过滤器的得分，和term查询器的得分对比</h4><p>使用过滤器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;_id&quot;: 1</span><br><span class="line">        &#125;        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 10,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;max_score&quot;: 0,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: 0,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用查询器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;first_name&quot;: &quot;wang&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 9,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;max_score&quot;: 1.2039728,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;E7joyW0B5sayAd6PEbFA&quot;,</span><br><span class="line">        &quot;_score&quot;: 1.2039728,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;wang&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;laji&quot;,</span><br><span class="line">          &quot;age&quot;: 333,</span><br><span class="line">          &quot;about&quot;: &quot;I hide to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;basket&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-4-terms-查询"><a href="#6-6-4-terms-查询" class="headerlink" title="6.6.4 terms 查询"></a>6.6.4 terms 查询</h3><p>使用多词条查询搜索多个词条</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: [</span><br><span class="line">        &quot;i&quot;,</span><br><span class="line">        &quot;hide&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以强制规定每篇文档中匹配词条的最小数量</p><p>mininum_should_match 参数</p><blockquote><p>注意：在新的版本当中只有过滤器才能制定该参数</p></blockquote><h3 id="6-5-5-match查询和-term过滤器"><a href="#6-5-5-match查询和-term过滤器" class="headerlink" title="6.5.5 match查询和 term过滤器"></a>6.5.5 match查询和 term过滤器</h3><p>match查询可以有多重行为方式，最常见就是<strong>布尔(bool)\</strong>和*<em>词组(phrase)*</em></p><h4 id="布尔查询行为"><a href="#布尔查询行为" class="headerlink" title="布尔查询行为"></a>布尔查询行为</h4><p>默认情况match查询使用布尔行为和OR操作符号， 如 “es den” 默认是”es OR den”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;Jane wang&quot;,</span><br><span class="line">        &quot;operator&quot;: &quot;or&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>match 查询的第二个重要行为是作为phrase 查询</strong></p><h4 id="词组（phrase-）查询的方式"><a href="#词组（phrase-）查询的方式" class="headerlink" title="词组（phrase ）查询的方式"></a>词组（phrase ）查询的方式</h4><blockquote><p>在6.x已经不支持在math里面使用type， 可以修改为以下语法：</p></blockquote><p>可以设置slop 用来实现自动提示中的跨单词匹配的功能</p><h5 id="es5版本以及以下的语法："><a href="#es5版本以及以下的语法：" class="headerlink" title="es5版本以及以下的语法："></a>es5版本以及以下的语法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;phrase&quot;,</span><br><span class="line">        &quot;query&quot;: &quot;hide&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会出现如下报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;parsing_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;[match] query does not support [type]&quot;,</span><br><span class="line">        &quot;line&quot;: 5,</span><br><span class="line">        &quot;col&quot;: 17</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;parsing_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;[match] query does not support [type]&quot;,</span><br><span class="line">    &quot;line&quot;: 5,</span><br><span class="line">    &quot;col&quot;: 17</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="es6以及以上要使用以下语法"><a href="#es6以及以上要使用以下语法" class="headerlink" title="es6以及以上要使用以下语法"></a>es6以及以上要使用以下语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;to rock&quot;,</span><br><span class="line">        &quot;slop&quot;:1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：slop 为0 代表中间不进行跳行匹配,默认为0</p><h3 id="6-5-6-phrase-prefix-查询"><a href="#6-5-6-phrase-prefix-查询" class="headerlink" title="6.5.6 phrase_prefix 查询"></a>6.5.6 phrase_prefix 查询</h3><p>依据词组的最后一个词条进行前缀匹配</p><p>对于搜索框自动完成来说，是一个十分重要的功能</p><blockquote><p>注意：这种方式最好设置 max_expansions 设置最大的前缀扩展数量</p></blockquote><h4 id="es5-x-版本以及以下的语法："><a href="#es5-x-版本以及以下的语法：" class="headerlink" title="es5.x 版本以及以下的语法："></a>es5.x 版本以及以下的语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;phrase_prefix&quot;,</span><br><span class="line">        &quot;query&quot;: &quot;hide&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="es6-x-需要改成如下写法"><a href="#es6-x-需要改成如下写法" class="headerlink" title="es6.x 需要改成如下写法"></a>es6.x 需要改成如下写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase_prefix&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;wa&quot;,</span><br><span class="line">        &quot;max_expansions&quot;: 5</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 24,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;max_score&quot;: 1.2039728,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;E7joyW0B5sayAd6PEbFA&quot;,</span><br><span class="line">        &quot;_score&quot;: 1.2039728,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;wang&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;laji&quot;,</span><br><span class="line">          &quot;age&quot;: 333,</span><br><span class="line">          &quot;about&quot;: &quot;I hide to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;basket&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bool查询和phrase 查询 对于接受用户输入是很好的选择</p><h4 id="使用multi-match-匹配多个字段"><a href="#使用multi-match-匹配多个字段" class="headerlink" title="使用multi_match 匹配多个字段"></a>使用multi_match 匹配多个字段</h4><p>和match 多个字段有细微的区别：</p><p>允许搜索多个字段中的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;wang smith&quot;,</span><br><span class="line">        &quot;fields&quot;: [&quot;first_name&quot;, &quot;last_name&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>multi_match 也可以转化为 phrase(词组) 查询 或者 phrase_prefix 查询</strong></p><p>match 查询是核心的查询类型</p><h2 id="6-7-组合查询和复合查询"><a href="#6-7-组合查询和复合查询" class="headerlink" title="6.7 组合查询和复合查询"></a>6.7 组合查询和复合查询</h2><h3 id="6-7-1-bool查询"><a href="#6-7-1-bool查询" class="headerlink" title="6.7.1 bool查询"></a>6.7.1 bool查询</h3><p>有以下类别：</p><ol><li>必须(must)</li><li>应该(should)</li><li>不能(must_not)</li></ol><ul><li>如果指定了bool查询的部分是must匹配， 只有匹配上结果才能返回</li><li>如果指定了bool查询的部分是should匹配， 只有匹配上<strong>指定数量子句</strong>的文档才会被返回</li><li>如果没有must匹配，至少要匹配一个should子句才能返回</li><li>must_not 子句会使得文档被移除结果集合</li></ul><p>下面使用一个综合的例子进行试验</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match_phrase&quot;:  &#123;</span><br><span class="line">            &quot;about&quot;: &#123;</span><br><span class="line">              &quot;query&quot;: &quot;i to&quot;,</span><br><span class="line">              &quot;slop&quot;: 1</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;first_name&quot;: &#123;</span><br><span class="line">              &quot;value&quot;: &quot;wang&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;query_string&quot;: &#123;</span><br><span class="line">            &quot;default_field&quot;: &quot;age&quot;,</span><br><span class="line">            &quot;query&quot;: &quot;first_name:jane&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;minimum_should_match&quot;: 1 --指定至少shold子句匹配数，满足才能返回结果</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7-2-bool-的过滤器"><a href="#6-7-2-bool-的过滤器" class="headerlink" title="6.7.2 bool 的过滤器"></a>6.7.2 bool 的过滤器</h3><p>ES6 经过调整，已经将bool的查询器移除，只做过滤功能</p><p>es存在如下写法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">query</span><br><span class="line">filtered:</span><br><span class="line">        filter:</span><br><span class="line">            bool:</span><br><span class="line">                must:</span><br><span class="line">                should:</span><br><span class="line">                must_not:</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>mininum_should_match 默认有一些隐藏特性</p><p>如果指定了must 子句</p><p><strong>默认值就会变为0</strong>,</p><p>如果没有Must子句</p><p><strong>默认就是1</strong></p></blockquote><h2 id="6-8-超越match-和-过滤器的查询"><a href="#6-8-超越match-和-过滤器的查询" class="headerlink" title="6.8 超越match 和 过滤器的查询"></a>6.8 超越match 和 过滤器的查询</h2><h3 id="6-8-1-range-查询和过滤器"><a href="#6-8-1-range-查询和过滤器" class="headerlink" title="6.8.1 range 查询和过滤器"></a>6.8.1 range 查询和过滤器</h3><h4 id="模拟数据"><a href="#模拟数据" class="headerlink" title="模拟数据"></a>模拟数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;5</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;CHENLONG_looo&quot;,</span><br><span class="line">  &quot;age&quot;: 66,</span><br><span class="line">  &quot;birthday&quot;: &quot;2016-10-10&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;5</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;CHENLONG&quot;,</span><br><span class="line">  &quot;age&quot;: 15,</span><br><span class="line">  &quot;birthday&quot;: &quot;2011-02-14&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">  &quot;age&quot;: 5,</span><br><span class="line">  &quot;birthday&quot;: &quot;2019-05-04&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="现在需要查找出-11-年到-16年的数据"><a href="#现在需要查找出-11-年到-16年的数据" class="headerlink" title="现在需要查找出 11 年到 16年的数据"></a>现在需要查找出 11 年到 16年的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;birthday&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: &quot;2011-06-11&quot;,</span><br><span class="line">        &quot;lte&quot;: &quot;2020-01-01&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 29,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;max_score&quot;: 1,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;myindex&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;CHENLONG_looo&quot;,</span><br><span class="line">          &quot;age&quot;: 66,</span><br><span class="line">          &quot;birthday&quot;: &quot;2016-10-10&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;myindex&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">          &quot;age&quot;: 55,</span><br><span class="line">          &quot;birthday&quot;: &quot;2019-05-04&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>range支持字符串的范围匹配，如 “li” 到 “e” 之间的分组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: &quot;li&quot;,</span><br><span class="line">        &quot;lte&quot;: &quot;o&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>range 应该用于过滤而不是查询</p><h3 id="6-8-2-prefix-查询和过滤器"><a href="#6-8-2-prefix-查询和过滤器" class="headerlink" title="6.8.2 prefix 查询和过滤器"></a>6.8.2 prefix 查询和过滤器</h3><p>prefix 查询和过滤器允许给定的前缀来搜索词条,<strong>这里的前缀在搜索之前没有经过分析</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;li&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配 li 开头的词条</p><h4 id="在过滤器当中使用"><a href="#在过滤器当中使用" class="headerlink" title="在过滤器当中使用"></a>在过滤器当中使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;li&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意过滤器会跳过得分计算，所以效率要高于查询</p><blockquote><p>注意： 由于搜索前缀不会被分析，所以大小写是进行区分的</p><p>原因：es分析文档和查询的方式引起的</p></blockquote><h3 id="6-8-3-wildcard-查询"><a href="#6-8-3-wildcard-查询" class="headerlink" title="6.8.3 wildcard 查询"></a>6.8.3 wildcard 查询</h3><p>正则表达式的搜索方式：</p><p>更像是 shell 通配符 globbing 的工作方式：</p><p>ls *foo?ar</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;wildcard&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;lix?ao*&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意的是：这种正则匹配并不像match 那样轻量级</p><p>如果需要用于系统，要进行数据分析以及测试</p><h2 id="6-9-使用过滤器查询字段的存在性"><a href="#6-9-使用过滤器查询字段的存在性" class="headerlink" title="6.9 使用过滤器查询字段的存在性"></a>6.9 使用过滤器查询字段的存在性</h2><h3 id="6-9-1-exists-过滤器"><a href="#6-9-1-exists-过滤器" class="headerlink" title="6.9.1 exists 过滤器"></a>6.9.1 exists 过滤器</h3><p>只查找那些特定字段有值的文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;exists&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;name&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-9-2-missing-过滤器（6-x以上版本已经删除）"><a href="#6-9-2-missing-过滤器（6-x以上版本已经删除）" class="headerlink" title="6.9.2 missing 过滤器（6.x以上版本已经删除）"></a>6.9.2 missing 过滤器（6.x以上版本已经删除）</h3><p>可以搜索字段里没有的值，或者映射的时候默认指定的默认值的文档（映射里的 null_value）</p><h4 id="作为测试-先插入一条增加一个字段的数据"><a href="#作为测试-先插入一条增加一个字段的数据" class="headerlink" title="作为测试,先插入一条增加一个字段的数据"></a>作为测试,先插入一条增加一个字段的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">  &quot;age&quot;: 5,</span><br><span class="line">  &quot;birthday&quot;: &quot;2019-05-04&quot;,</span><br><span class="line">  &quot;test_field&quot;: &quot;zzzzzz&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接下来，查找字段里没有的值-这样写是错误的，没有正确写法（6-x）"><a href="#接下来，查找字段里没有的值-这样写是错误的，没有正确写法（6-x）" class="headerlink" title="接下来，查找字段里没有的值,这样写是错误的，没有正确写法（6.x）"></a>接下来，查找字段里没有的值,这样写是错误的，没有正确写法（6.x）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;missing&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;test_field&quot;,</span><br><span class="line">          &quot;existence&quot;: true,</span><br><span class="line">          &quot;null_value&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-9-3-将任何查询转为过滤器"><a href="#6-9-3-将任何查询转为过滤器" class="headerlink" title="6.9.3 将任何查询转为过滤器"></a>6.9.3 将任何查询转为过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;query_string&quot;: &#123;</span><br><span class="line">            &quot;default_field&quot;: &quot;name&quot;,</span><br><span class="line">            &quot;query&quot;: &quot;che*&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缓存过滤器"><a href="#缓存过滤器" class="headerlink" title="缓存过滤器"></a>缓存过滤器</h4><p>加入 _cache: true 配置</p><h3 id="6-9-4-为任务选择最好的查询"><a href="#6-9-4-为任务选择最好的查询" class="headerlink" title="6.9.4 为任务选择最好的查询"></a>6.9.4 为任务选择最好的查询</h3><h1 id="7-分析数据"><a href="#7-分析数据" class="headerlink" title="7. 分析数据"></a>7. 分析数据</h1><h2 id="7-1-什么是分析数据"><a href="#7-1-什么是分析数据" class="headerlink" title="7.1 什么是分析数据"></a>7.1 什么是分析数据</h2><ol><li>字符过滤：使用字符过滤器转变字符</li><li>文本切分为分词：将文本切分为单个或者多个分词</li><li>分词过滤：使用分词过滤器转变为每个分词</li><li>分词索引：将这些分词存储到索引中</li></ol><h3 id="7-1-1-字符过滤"><a href="#7-1-1-字符过滤" class="headerlink" title="7.1.1 字符过滤"></a>7.1.1 字符过滤</h3><p>主要是排除一些HTML标签以及特殊符号转为可以搜索是是别的词条</p><h3 id="7-1-2-切分为分词"><a href="#7-1-2-切分为分词" class="headerlink" title="7.1.2 切分为分词"></a>7.1.2 切分为分词</h3><p>标准分词器：根据空格，换行，破折号进行划分单词</p><h3 id="7-1-3-分词过滤器"><a href="#7-1-3-分词过滤器" class="headerlink" title="7.1.3 分词过滤器"></a>7.1.3 分词过滤器</h3><p>最有用和最常用的是<strong>小写分词过滤器</strong>（外国）</p><p>中国建议使用 ik 中文分词器</p><p>书本的分词过滤为下：</p><ol><li>分词转小写</li><li>删除”停用词”</li><li>同义词添加</li></ol><h3 id="7-1-4-分词索引"><a href="#7-1-4-分词索引" class="headerlink" title="7.1.4 分词索引"></a>7.1.4 分词索引</h3><p>经过分词过滤器过滤之后，将发送到Lucene进行文档索引。最终组成倒排索引</p><p>所有不同部分，组成一个分析器</p><blockquote><p>搜索时候的分析：</p><p>如果搜索没有达到预期效果，牢记一条</p><p><strong>分析方式和预想的不一致</strong></p></blockquote><h2 id="7-2-为文档使用分析器"><a href="#7-2-为文档使用分析器" class="headerlink" title="7.2 为文档使用分析器"></a>7.2 为文档使用分析器</h2><p>以下两种方式指定字段使用的分析器</p><ul><li>创建索引的时候，为特定索引进行设置</li><li>es配置文件中，配置全局分析器</li></ul><h3 id="7-2-1-创建索引的过程中，添加定制分析器"><a href="#7-2-1-创建索引的过程中，添加定制分析器" class="headerlink" title="7.2.1 创建索引的过程中，添加定制分析器"></a>7.2.1 创建索引的过程中，添加定制分析器</h3><p>参考：</p><p><a href="https://blog.csdn.net/wsyw126/article/details/71080285" target="_blank" rel="noopener">https://blog.csdn.net/wsyw126/article/details/71080285</a></p><h4 id="旧版本的使用方式"><a href="#旧版本的使用方式" class="headerlink" title="旧版本的使用方式"></a>旧版本的使用方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;mymyindex&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;:&#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 2,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1,</span><br><span class="line">    &quot;index&quot;: &#123;</span><br><span class="line">      &quot;analysis&quot;: &#123;</span><br><span class="line">        &quot;myCustomAnalyzer&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;: &quot;myCustomTokenizer&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;myCustomFilter1&quot;, &quot;myCustomFilter2&quot;],</span><br><span class="line">          &quot;char_filter&quot;: [&quot;myCustomCharFilter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tokenizer&quot;: &#123;</span><br><span class="line">      &quot;myCustomTokenizer&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;letter&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;filter&quot;: &#123;</span><br><span class="line">      &quot;myCustomFilter1&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;lowercase&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;myCustomFilter2&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;kstem&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;char_filter&quot;:&#123;</span><br><span class="line">      &quot;myCustomCharFilter&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;mapping&quot;,</span><br><span class="line">        &quot;mappings&quot;: [&quot;ph&#x3D;&gt;f&quot;, &quot;u&#x3D;&gt;you&quot;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;:&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="网上的案例："><a href="#网上的案例：" class="headerlink" title="网上的案例："></a>网上的案例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;analysis&quot;: &#123;</span><br><span class="line">            &quot;char_filter&quot;: &#123;</span><br><span class="line">                &quot;&amp;_to_and&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:       &quot;mapping&quot;,</span><br><span class="line">                    &quot;mappings&quot;: [ &quot;&amp; &#x3D;&gt; and &quot;]</span><br><span class="line">            &#125;&#125;,</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;my_stopwords&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:       &quot;stop&quot;,</span><br><span class="line">                    &quot;stopwords&quot;: [ &quot;the&quot;, &quot;a&quot; ]</span><br><span class="line">            &#125;&#125;,</span><br><span class="line">            &quot;analyzer&quot;: &#123;</span><br><span class="line">                &quot;my_analyzer&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:         &quot;custom&quot;,</span><br><span class="line">                    &quot;char_filter&quot;:  [ &quot;html_strip&quot;, &quot;&amp;_to_and&quot; ],</span><br><span class="line">                    &quot;tokenizer&quot;:    &quot;standard&quot;,</span><br><span class="line">                    &quot;filter&quot;:       [ &quot;lowercase&quot;, &quot;my_stopwords&quot; ]</span><br><span class="line">            &#125;&#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的网上案例使用 _settings 查看结果是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;my_index&quot;: &#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;index&quot;: &#123;</span><br><span class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</span><br><span class="line">        &quot;provided_name&quot;: &quot;my_index&quot;,</span><br><span class="line">        &quot;creation_date&quot;: &quot;1571079347660&quot;,</span><br><span class="line">        &quot;analysis&quot;: &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;my_stopwords&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;stop&quot;,</span><br><span class="line">              &quot;stopwords&quot;: [</span><br><span class="line">                &quot;the&quot;,</span><br><span class="line">                &quot;a&quot;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;analyzer&quot;: &#123;</span><br><span class="line">            &quot;my_analyzer&quot;: &#123;</span><br><span class="line">              &quot;filter&quot;: [</span><br><span class="line">                &quot;lowercase&quot;,</span><br><span class="line">                &quot;my_stopwords&quot;</span><br><span class="line">              ],</span><br><span class="line">              &quot;char_filter&quot;: [</span><br><span class="line">                &quot;html_strip&quot;,</span><br><span class="line">                &quot;&amp;_to_and&quot;</span><br><span class="line">              ],</span><br><span class="line">              &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">              &quot;tokenizer&quot;: &quot;standard&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;char_filter&quot;: &#123;</span><br><span class="line">            &quot;&amp;_to_and&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;mapping&quot;,</span><br><span class="line">              &quot;mappings&quot;: [</span><br><span class="line">                &quot;&amp; &#x3D;&gt; and &quot;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot;: &quot;gYyxkcIRRWqLtWhjMd24CQ&quot;,</span><br><span class="line">        &quot;version&quot;: &#123;</span><br><span class="line">          &quot;created&quot;: &quot;6020499&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将书上的案例改为6-x支持的形式，格式如下"><a href="#将书上的案例改为6-x支持的形式，格式如下" class="headerlink" title="将书上的案例改为6.x支持的形式，格式如下:"></a>将书上的案例改为6.x支持的形式，格式如下:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;mymyindex&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;number_of_shards&quot;: 2,</span><br><span class="line">&quot;number_of_replicas&quot;: 1,</span><br><span class="line">&quot;analysis&quot;: &#123;</span><br><span class="line">&quot;myCustomAnalyzer&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">&quot;tokenizer&quot;: &quot;myCustomTokenizer&quot;,</span><br><span class="line">&quot;filter&quot;: [&quot;myCustomFilter1&quot;, &quot;myCustomFilter2&quot;],</span><br><span class="line">&quot;char_filter&quot;: [&quot;myCustomCharFilter&quot;]</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tokenizer&quot;: &#123;</span><br><span class="line">&quot;myCustomTokenizer&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;letter&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;filter&quot;: &#123;</span><br><span class="line">&quot;myCustomFilter1&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;lowercase&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;myCustomFilter2&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;kstem&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;char_filter&quot;: &#123;</span><br><span class="line">&quot;myCustomCharFilter&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;mapping&quot;,</span><br><span class="line">&quot;mappings&quot;: [&quot;ph&#x3D;&gt;f&quot;, &quot;u&#x3D;&gt;you&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&quot;mappings&quot;: &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-2-使用elasticsearch-yml-的配置文件进行配置"><a href="#7-2-2-使用elasticsearch-yml-的配置文件进行配置" class="headerlink" title="7.2.2 使用elasticsearch.yml 的配置文件进行配置"></a>7.2.2 使用elasticsearch.yml 的配置文件进行配置</h3><p>目前没有理解如何配置，需要到官方文档去摸索</p><h3 id="7-2-3-在映射中指定某个字段的分析器"><a href="#7-2-3-在映射中指定某个字段的分析器" class="headerlink" title="7.2.3 在映射中指定某个字段的分析器"></a>7.2.3 在映射中指定某个字段的分析器</h3><h4 id="书本的方式已经不适用于6-x版本了，根据官方文档的内容要进行如下定义"><a href="#书本的方式已经不适用于6-x版本了，根据官方文档的内容要进行如下定义" class="headerlink" title="书本的方式已经不适用于6.x版本了，根据官方文档的内容要进行如下定义"></a>书本的方式已经不适用于6.x版本了，根据官方文档的内容要进行如下定义</h4><p>注意下文有使用到该索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;mymyindex</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;std_folded&quot;: &#123; </span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [</span><br><span class="line">            &quot;lowercase&quot;,</span><br><span class="line">            &quot;asciifolding&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_doc&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;my_text&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;std_folded&quot; </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-使用API来分析文本"><a href="#7-3-使用API来分析文本" class="headerlink" title="7.3 使用API来分析文本"></a>7.3 使用API来分析文本</h2><h3 id="7-3-1-使用-analyzer-内置API来进行分析分析器解析步骤"><a href="#7-3-1-使用-analyzer-内置API来进行分析分析器解析步骤" class="headerlink" title="7.3.1 使用_analyzer 内置API来进行分析分析器解析步骤"></a>7.3.1 使用_analyzer 内置API来进行分析分析器解析步骤</h3><p>下面是官方的测试用例：使用的官方内置的 <strong>standard（标准）</strong>分析器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;192.168.92.180:9200&#x2F;_analyze?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog\u0027s bone.&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;the&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 3,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;2&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 4,</span><br><span class="line">      &quot;end_offset&quot; : 5,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;NUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;quick&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 6,</span><br><span class="line">      &quot;end_offset&quot; : 11,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;brown&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 12,</span><br><span class="line">      &quot;end_offset&quot; : 17,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;foxes&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 18,</span><br><span class="line">      &quot;end_offset&quot; : 23,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;jumped&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 24,</span><br><span class="line">      &quot;end_offset&quot; : 30,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 5</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;over&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 31,</span><br><span class="line">      &quot;end_offset&quot; : 35,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 6</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;the&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 36,</span><br><span class="line">      &quot;end_offset&quot; : 39,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 7</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;lazy&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 40,</span><br><span class="line">      &quot;end_offset&quot; : 44,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 8</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;dog&#39;s&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 45,</span><br><span class="line">      &quot;end_offset&quot; : 50,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 9</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;bone&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 51,</span><br><span class="line">      &quot;end_offset&quot; : 55,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 10</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>POST my_index/_analyze?analyzer=standard 注意：传参数这样使用时 错误的</p><p>需要使用如下方式</p><p>POST my_index/_analyze { “analyzer”: “standard”, “text”: “The 2 QUICK Brown-Foxes jumped over the lazy dog’s bone.” }</p></blockquote><h3 id="7-3-2-分析中指定自定义分析器"><a href="#7-3-2-分析中指定自定义分析器" class="headerlink" title="7.3.2 分析中指定自定义分析器"></a>7.3.2 分析中指定自定义分析器</h3><p>这里在建立索引的时候用到了上面官方改动案例的索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;mymyindex&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;std_folded&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;this is test word I AM LAZY BOY&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-3-使用组合即时创建分析器"><a href="#7-3-3-使用组合即时创建分析器" class="headerlink" title="7.3.3 使用组合即时创建分析器"></a>7.3.3 使用组合即时创建分析器</h3><h4 id="使用curl方式"><a href="#使用curl方式" class="headerlink" title="使用curl方式"></a>使用curl方式</h4><p>6.x 语法有变，必须放在大括号里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;192.168.92.180:9200&#x2F;_analyze?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog\u0027s bone.&quot;,</span><br><span class="line"></span><br><span class="line"> &quot;filter&quot;: [&quot;lowercase&quot;, &quot;reverse&quot;],</span><br><span class="line"></span><br><span class="line">&quot;tokenizer&quot;: &quot;whitespace&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><p>此时会发现结果以倒序的方式进行分析</p><h4 id="使用kibana方式"><a href="#使用kibana方式" class="headerlink" title="使用kibana方式"></a>使用kibana方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;my_index&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;whitespace&quot;, </span><br><span class="line">  &quot;filter&quot;: [</span><br><span class="line">    &quot;reverse&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog\u0027s bone.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大同小异，如果结果没有反转，可能是解析的过程中有其他干扰因素</p><h3 id="7-3-4-使用基于某个字段的映射分析"><a href="#7-3-4-使用基于某个字段的映射分析" class="headerlink" title="7.3.4 使用基于某个字段的映射分析"></a>7.3.4 使用基于某个字段的映射分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;mymyindex&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;whitespace&quot;, </span><br><span class="line">  &quot;filter&quot;: [</span><br><span class="line">    &quot;reverse&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog\u0027s bone.&quot;,</span><br><span class="line">  &quot;field&quot;: &quot;my_text&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前提条件是必须是存在索引的字段才能进行映射分析</p><h3 id="7-3-5-使用词条向量API来学习索引词条"><a href="#7-3-5-使用词条向量API来学习索引词条" class="headerlink" title="7.3.5 使用词条向量API来学习索引词条"></a>7.3.5 使用词条向量API来学习索引词条</h3><p>使用_termvector 的端点来获取词条的更多信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;get-together&#x2F;group&#x2F;3q8nz20BXNiyabSjyH-c&#x2F;_termvectors</span><br></pre></td></tr></table></figure><p>虽然可以使用，但是内容已经被官方改动，无法查看词条索引</p><h2 id="7-4-分析器-分词器和分词过滤器"><a href="#7-4-分析器-分词器和分词过滤器" class="headerlink" title="7.4 分析器/分词器和分词过滤器"></a>7.4 分析器/分词器和分词过滤器</h2><h3 id="7-4-0-分析器的概览"><a href="#7-4-0-分析器的概览" class="headerlink" title="7.4.0 分析器的概览"></a>7.4.0 分析器的概览</h3><ul><li>输入文本</li><li>分析器<ul><li>字符过滤器</li><li>分词器</li><li>分词过滤器</li></ul></li><li>输出分词</li></ul><h3 id="7-4-1-内置分析器"><a href="#7-4-1-内置分析器" class="headerlink" title="7.4.1 内置分析器"></a>7.4.1 内置分析器</h3><p><strong>Standard Analyzer</strong></p><p>The <code>standard</code> analyzer divides text into terms on word boundaries, as defined by the Unicode Text Segmentation algorithm. It removes most punctuation, lowercases terms, and supports removing stop words.</p><p><strong>Simple Analyzer</strong></p><p>The <code>simple</code> analyzer divides text into terms whenever it encounters a character which is not a letter. It lowercases all terms.</p><p><strong>Whitespace Analyzer</strong></p><p>The <code>whitespace</code> analyzer divides text into terms whenever it encounters any whitespace character. It does not lowercase terms.</p><p><strong>Stop Analyzer</strong></p><p>The <code>stop</code> analyzer is like the <code>simple</code> analyzer, but also supports removal of stop words.</p><p><strong>Keyword Analyzer</strong></p><p>The <code>keyword</code> analyzer is a “noop” analyzer that accepts whatever text it is given and outputs the exact same text as a single term.</p><p><strong>Pattern Analyzer</strong></p><p>The <code>pattern</code> analyzer uses a regular expression to split the text into terms. It supports lower-casing and stop words.</p><p><strong>Language Analyzers</strong></p><p>Elasticsearch provides many language-specific analyzers like <code>english</code> or <code>french</code>.</p><p><strong>Fingerprint Analyzer</strong></p><p>The <code>fingerprint</code> analyzer is a specialist analyzer which creates a fingerprint which can be used for duplicate detection.</p><p><strong>谷歌翻译之后</strong></p><h4 id="标准分析器"><a href="#标准分析器" class="headerlink" title="标准分析器"></a>标准分析器</h4><p>“标准”分析器根据Unicode文本分段算法的定义，将文本划分为单词边界上的各个术语。它删除大多数标点符号，小写术语，并支持删除停用词。</p><h4 id="简单分析器"><a href="#简单分析器" class="headerlink" title="简单分析器"></a><strong>简单分析器</strong></h4><p>“简单”分析器在遇到非字母字符时会将文本划分为多个词。它小写所有术语。</p><p>只使用小写转化为分词器，注意不适用于亚洲的语言，在欧美这种单词划分的语言适用</p><h4 id="空白分析器"><a href="#空白分析器" class="headerlink" title="空白分析器"></a><strong>空白分析器</strong></h4><p>每当遇到任何空白字符时，“空白”分析器都会将文本划分为多个词。它不小写。</p><h4 id="停止分析器"><a href="#停止分析器" class="headerlink" title="停止分析器"></a><strong>停止分析器</strong></h4><p>“停止”分析器类似于“简单”分析器，但也支持删除停用词。</p><h4 id="关键字分析器"><a href="#关键字分析器" class="headerlink" title="关键字分析器"></a><strong>关键字分析器</strong></h4><p>“关键字”分析器是一个“空”分析器，它接受给出的任何文本，并输出与单个术语完全相同的文本。</p><h4 id="模式分析器"><a href="#模式分析器" class="headerlink" title="模式分析器"></a><strong>模式分析器</strong></h4><p>“模式”分析器使用正则表达式将文本分割为多个词。它支持小写字母和停用词。</p><h4 id="语言分析器"><a href="#语言分析器" class="headerlink" title="语言分析器"></a><strong>语言分析器</strong></h4><p>Elasticsearch提供了许多特定于语言的分析器，例如“ english”或“ french”。</p><h4 id="指纹分析器"><a href="#指纹分析器" class="headerlink" title="指纹分析器"></a><strong>指纹分析器</strong></h4><p>“指纹”分析仪是一种专业分析仪，可创建可用于重复检测的指纹。</p><h4 id="雪球分析器"><a href="#雪球分析器" class="headerlink" title="雪球分析器"></a>雪球分析器</h4><p>除了使用标准分词器和标准分词过滤器，也使用了小写分词过滤器以及停用词过滤器，还使用雪球词干进行词干提取</p><h3 id="7-4-2-分词器"><a href="#7-4-2-分词器" class="headerlink" title="7.4.2 分词器"></a>7.4.2 分词器</h3><p><strong>Standard Tokenizer</strong></p><p>The <code>standard</code> tokenizer divides text into terms on word boundaries, as defined by the Unicode Text Segmentation algorithm. It removes most punctuation symbols. It is the best choice for most languages.</p><p><strong>Letter Tokenizer</strong></p><p>The <code>letter</code> tokenizer divides text into terms whenever it encounters a character which is not a letter.</p><p><strong>Lowercase Tokenizer</strong></p><p>The <code>lowercase</code> tokenizer, like the <code>letter</code> tokenizer, divides text into terms whenever it encounters a character which is not a letter, but it also lowercases all terms.</p><p><strong>Whitespace Tokenizer</strong></p><p>The <code>whitespace</code> tokenizer divides text into terms whenever it encounters any whitespace character.</p><p><strong>UAX URL Email Tokenizer</strong></p><p>The <code>uax_url_email</code> tokenizer is like the <code>standard</code> tokenizer except that it recognises URLs and email addresses as single tokens.</p><p><strong>Classic Tokenizer</strong></p><p>The <code>classic</code> tokenizer is a grammar based tokenizer for the English Language.</p><p><strong>Thai Tokenizer</strong></p><p>The <code>thai</code> tokenizer segments Thai text into words.</p><p><strong>谷歌翻译之后</strong></p><h4 id="标准分词器"><a href="#标准分词器" class="headerlink" title="标准分词器"></a><strong>标准分词器</strong></h4><p>标准分词器将文本划分为单词边界上的术语，这由Unicode文本分段算法定义。 它删除大多数标点符号。 这是大多数语言的最佳选择。 注意标点符号回进行过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;I have, photos&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置：</p><table><thead><tr><th><code>max_token_length</code></th><th>The maximum token length. If a token is seen that exceeds this length then it is split at <code>max_token_length</code> intervals. Defaults to <code>255</code>.</th></tr></thead><tbody><tr><td>最大分词数</td><td>允许设置最大分次数，如果分词长度超过最大分词数，将会进行切割作为下一个分词。默认为255</td></tr></tbody></table><h4 id="字母分词器"><a href="#字母分词器" class="headerlink" title="字母分词器"></a><strong>字母分词器</strong></h4><p>字母分词器在遇到非字母字符时会将文本分为多个术语</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;letter&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ The, QUICK, Brown, Foxes, jumped, over, the, lazy, dog, s, bone ]</span><br></pre></td></tr></table></figure><p>该<code>letter</code>分词器是不可配置</p><h4 id="小写分词器"><a href="#小写分词器" class="headerlink" title="小写分词器"></a><strong>小写分词器</strong></h4><p>小写分词器与字母分词器一样，在遇到非字母的字符时，会将文本分为多个词，但所有词都小写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;lowercase&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该<code>letter</code>分词器是不可配置</p><h4 id="空格分词器"><a href="#空格分词器" class="headerlink" title="空格分词器"></a><strong>空格分词器</strong></h4><p>每当遇到任何空白字符时，空白令牌生成器都会将文本划分为多个术语。(但是不会对大小写进行转化，只判断空白字符)</p><p>配置：</p><table><thead><tr><th><code>max_token_length</code></th><th>The maximum token length. If a token is seen that exceeds this length then it is split at <code>max_token_length</code> intervals. Defaults to <code>255</code>.</th></tr></thead><tbody><tr><td>最大分词数</td><td>允许设置最大分次数，如果分词长度超过最大分词数，将会进行切割作为下一个分词。默认为255</td></tr></tbody></table><h4 id="UAX-URL电子邮件令牌生成器"><a href="#UAX-URL电子邮件令牌生成器" class="headerlink" title="UAX URL电子邮件令牌生成器"></a>UAX URL电子邮件令牌生成器</h4><p><strong>uax_url_email</strong> 分词器类似于标准令牌生成器，不同之处在于它将URL和电子邮件地址识别为单个分词。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;uax_url_email&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;Email me at john.smith@global-international.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意分词出来的email类型为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;token&quot;: &quot;john.smith@global-international.com&quot;,</span><br><span class="line">    &quot;start_offset&quot;: 12,</span><br><span class="line">    &quot;end_offset&quot;: 47,</span><br><span class="line">    &quot;type&quot;: &quot;&lt;EMAIL&gt;&quot;,</span><br><span class="line">    &quot;position&quot;: 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置</p><table><thead><tr><th><code>max_token_length</code></th><th>The maximum token length. If a token is seen that exceeds this length then it is split at <code>max_token_length</code> intervals. Defaults to <code>255</code>.</th></tr></thead><tbody><tr><td>最大分词数</td><td>允许设置最大分次数，如果分词长度超过最大分词数，将会进行切割作为下一个分词。默认为255</td></tr></tbody></table><h4 id="经典分词器"><a href="#经典分词器" class="headerlink" title="经典分词器"></a>经典分词器</h4><p>经典的分词器是用于英语的基于语法的分词器。</p><blockquote><p>可以说是为英语而生的分词器. 这个分词器对于英文的首字符缩写、 公司名字、 email 、 大部分网站域名.都能很好的解决。 但是, 对于除了英语之外的其他语言，都不是很好使。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;classic&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone.&quot;</span><br><span class="line">&#125;</span><br><span class="line">[ The, 2, QUICK, Brown, Foxes, jumped, over, the, lazy, dog&#39;s, bone ]</span><br></pre></td></tr></table></figure><p>下面是官方文档谷歌翻译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">该&#96;classic&#96;标记生成器是一种基于语法标记生成器是好的英语语言文档。该令牌生成器具有试探法，可对首字母缩写词，公司名称，电子邮件地址和互联网主机名进行特殊处理。但是，这些规则并不总是有效，并且分词器不适用于英语以外的大多数其他语言：</span><br><span class="line"></span><br><span class="line">- 它最多将标点符号拆分为单词，删除标点符号。但是，不带空格的点被认为是令牌的一部分。</span><br><span class="line">- 除非令牌中没有数字，否则它将使用连字符对单词进行拆分，在这种情况下，整个令牌将被解释为产品编号，并且不会拆分。</span><br><span class="line">- 它将电子邮件地址和互联网主机名识别为一个令牌。</span><br></pre></td></tr></table></figure><p>配置：</p><table><thead><tr><th><code>max_token_length</code></th><th>The maximum token length. If a token is seen that exceeds this length then it is split at <code>max_token_length</code> intervals. Defaults to <code>255</code>.</th></tr></thead><tbody><tr><td>最大分词数</td><td>允许设置最大分次数，如果分词长度超过最大分词数，将会进行切割作为下一个分词。默认为255</td></tr></tbody></table><h4 id="泰语分词器"><a href="#泰语分词器" class="headerlink" title="泰语分词器"></a>泰语分词器</h4><p>泰语分词器将泰语文本分成单词。</p><h3 id="7-4-3-分词过滤器"><a href="#7-4-3-分词过滤器" class="headerlink" title="7.4.3 分词过滤器"></a>7.4.3 分词过滤器</h3><p>官方定义了大概20多种分词过滤，涵盖内容较多，以官方6.2.4文档为准</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.4/analysis-tokenfilters.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.4/analysis-tokenfilters.html</a></p><h4 id="标准分词过滤器"><a href="#标准分词过滤器" class="headerlink" title="标准分词过滤器"></a>标准分词过滤器</h4><p>不要以为有多牛逼，其实什么事情都没有干。在以后的版本中有可能扩展功能。只是单纯占位符</p><h4 id="ASCII-Folding-Token-Filter（ASCII折叠过滤器）"><a href="#ASCII-Folding-Token-Filter（ASCII折叠过滤器）" class="headerlink" title="ASCII Folding Token Filter（ASCII折叠过滤器）"></a>ASCII Folding Token Filter（ASCII折叠过滤器）</h4><p>官网翻译介绍：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">类型为asciifolding的分词过滤器，用于将前127个ASCII字符（“基本拉丁” Unicode块）中不存在的字母，数字和符号Unicode字符转换为等效的ASCII字符。 例：</span><br><span class="line">PUT &#x2F;asciifold_example</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">        &quot;analysis&quot; : &#123;</span><br><span class="line">            &quot;analyzer&quot; : &#123;</span><br><span class="line">                &quot;default&quot; : &#123;</span><br><span class="line">                    &quot;tokenizer&quot; : &quot;standard&quot;,</span><br><span class="line">                    &quot;filter&quot; : [&quot;standard&quot;, &quot;asciifolding&quot;]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>允许进行如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;asciifold_example</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">        &quot;analysis&quot; : &#123;</span><br><span class="line">            &quot;analyzer&quot; : &#123;</span><br><span class="line">                &quot;default&quot; : &#123;</span><br><span class="line">                    &quot;tokenizer&quot; : &quot;standard&quot;,</span><br><span class="line">                    &quot;filter&quot; : [&quot;standard&quot;, &quot;my_ascii_folding&quot;]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;filter&quot; : &#123;</span><br><span class="line">                &quot;my_ascii_folding&quot; : &#123;</span><br><span class="line">                    &quot;type&quot; : &quot;asciifolding&quot;,</span><br><span class="line">                    &quot;preserve_original&quot; : true --默认为false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>翻译版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preserve_original： 接受默认值为false的preserve_original设置，但如果为true，则将保留原始令牌并发出折叠后的令牌</span><br></pre></td></tr></table></figure><h4 id="Flatten-Graph-Token-Filter（图形分词过滤器）"><a href="#Flatten-Graph-Token-Filter（图形分词过滤器）" class="headerlink" title="Flatten Graph Token Filter（图形分词过滤器）"></a>Flatten Graph Token Filter（图形分词过滤器）</h4><blockquote><p>注意：此功能在Lucene中被标记为实验性的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flatten_graph令牌过滤器接受任意图形令牌流，例如“同义词图形令牌过滤器”生成的图形令牌流，并将其展平为适合索引的单个线性令牌链。</span><br><span class="line"></span><br><span class="line">这是一个有损耗的过程，因为单独的边路径相互挤压，但是在索引过程中使用图形令牌流时是必需的，因为Lucene索引当前无法表示图形。 因此，最好仅在搜索时应用图形分析器，因为这样可以保留完整的图形结构并为接近查询提供正确的匹配项。</span><br><span class="line"></span><br><span class="line">有关此主题及其复杂性的更多信息，请阅读Lucene的TokenStreams实际上是图博客文章。</span><br></pre></td></tr></table></figure><h4 id="Length-Token-Filter（长度分词过滤器）"><a href="#Length-Token-Filter（长度分词过滤器）" class="headerlink" title="Length Token Filter（长度分词过滤器）"></a>Length Token Filter（长度分词过滤器）</h4><p>将超出最短和最长限制范围的单词过滤掉，如min=2，max=8，不在此范围的单词都会进行过滤</p><p>配置项如下</p><table><thead><tr><th><code>min</code></th><th>The minimum number. Defaults to <code>0</code>.</th></tr></thead><tbody><tr><td><strong>max</strong></td><td><strong>The maximum number. Defaults to <code>Integer.MAX_VALUE</code>, which is <code>2^31-1</code> or 2147483647.</strong></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;length-filter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;myfilter&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;length&quot;,</span><br><span class="line">          &quot;max&quot;: 8,</span><br><span class="line">          &quot;min&quot;: 2</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, </span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;defulat&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;standard&quot;, &quot;myfilter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;acknowledged&quot;: true,</span><br><span class="line">  &quot;shards_acknowledged&quot;: true,</span><br><span class="line">  &quot;index&quot;: &quot;length-filter&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lowercase-token-filter（小写分词过滤器）"><a href="#Lowercase-token-filter（小写分词过滤器）" class="headerlink" title="Lowercase token filter（小写分词过滤器）"></a>Lowercase token filter（小写分词过滤器）</h4><p>可以讲任何经过的分词变成小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;lowercase_example</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;standard_lowercase_example&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;lowercase&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;greek_lowercase_example&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;greek_lowercase&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;greek_lowercase&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;lowercase&quot;,</span><br><span class="line">          &quot;language&quot;: &quot;greek&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Uppercase-Token-Filter（大写分词过滤器）"><a href="#Uppercase-Token-Filter（大写分词过滤器）" class="headerlink" title="Uppercase Token Filter（大写分词过滤器）"></a>Uppercase Token Filter（大写分词过滤器）</h4><p>讲所有经过的分词转大写</p><h4 id="NGram-Token-Filter（N元语法过滤器）"><a href="#NGram-Token-Filter（N元语法过滤器）" class="headerlink" title="NGram Token Filter（N元语法过滤器）"></a>NGram Token Filter（N元语法过滤器）</h4><table><thead><tr><th>Setting</th><th>Description</th></tr></thead><tbody><tr><td><code>min_gram</code></td><td>Defaults to <code>1</code>.</td></tr><tr><td><code>max_gram</code></td><td>Defaults to <code>2</code>.</td></tr></tbody></table><p>索引级别设置index.max_ngram_diff控制max_gram和min_gram之间的最大允许差异。</p><p>N元语法过滤器即：</p><p>控制被切分单词的数量</p><p>举例：</p><blockquote><ol><li><strong>1-grams</strong>:一元语法过滤器</li></ol><p>以：＂spaghetti＂为例：</p><p>ｓ　ｐ　ａ　ｇ　ｈ　ｅ　ｔ　ｔ　ｉ</p><ol><li><p>二元语法过滤器</p><p>将会拆分为: sp，pa，ag，gh，he，et，tt，ti</p></li><li><p>三元语法过滤器</p><p>将会拆分为：spa，pag，agh，ghe，het，ett，tti</p></li></ol></blockquote><h4 id="Edge-NGram-Token-Filter（侧边N元语法过滤器）"><a href="#Edge-NGram-Token-Filter（侧边N元语法过滤器）" class="headerlink" title="Edge NGram Token Filter（侧边N元语法过滤器）"></a>Edge NGram Token Filter（侧边N元语法过滤器）</h4><table><thead><tr><th>Setting</th><th>Description</th></tr></thead><tbody><tr><td><code>min_gram</code></td><td>Defaults to <code>1</code>.</td></tr><tr><td><code>max_gram</code></td><td>Defaults to <code>2</code>.</td></tr><tr><td><code>side</code></td><td>deprecated. Either <code>front</code> or <code>back</code>. Defaults to <code>front</code>.</td></tr></tbody></table><p>为N元语法的变体：</p><p>仅仅从边缘构建N元语法</p><p>如:min = 2 ,max = 6</p><p>“spaghetti” 将会切分为： sp spa spag spagh spaghe</p><h3 id="7-4-4-N元语法的使用场景以及使用案例"><a href="#7-4-4-N元语法的使用场景以及使用案例" class="headerlink" title="7.4.4 N元语法的使用场景以及使用案例"></a>7.4.4 N元语法的使用场景以及使用案例</h3><p>N元语法过滤器主要是可以用于处理因为的错误单词拼写，将单词进行切分组合，匹配相同的部分，这能保证即使错误的书写依然可以进行正确的匹配，但是中文的拼写修改有待进一步学习</p><p>当不知道是什么语言的时候，N元语法是一种很好的文本分析方式：</p><p>可以分析单词之间没有空格的单词！！！</p><p>指定依然靠min和max这两个重要参数</p><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例:"></a>使用案例:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;n-gram-filter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;myfilter&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;ngram&quot;,</span><br><span class="line">          &quot;min_gram&quot;: 2,</span><br><span class="line">          &quot;max_gram&quot;: 6</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, </span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;defulat&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;standard&quot;, &quot;myfilter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：会出现一个报错提示官方已经弃用这两个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deprecation: Deprecated big difference between max_gram and min_gram in NGram Tokenizer,expected difference must be less than or equal to: [1]</span><br></pre></td></tr></table></figure><p>有关该问题的社区讨论</p><p><a href="https://discuss.elastic.co/t/deprecation-deprecated-big-difference-between-max-gram-and-min-gram-in-ngram/122969" target="_blank" rel="noopener">https://discuss.elastic.co/t/deprecation-deprecated-big-difference-between-max-gram-and-min-gram-in-ngram/122969</a></p><h4 id="Shingle-Token-Filter（滑动窗口分词过滤器）"><a href="#Shingle-Token-Filter（滑动窗口分词过滤器）" class="headerlink" title="Shingle Token Filter（滑动窗口分词过滤器）"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.4/analysis-shingle-tokenfilter.html" target="_blank" rel="noopener">Shingle Token Filter</a>（滑动窗口分词过滤器）</h4><h2 id="7-5-提取词干"><a href="#7-5-提取词干" class="headerlink" title="7.5 提取词干"></a>7.5 提取词干</h2><h3 id="7-5-1-算分提取词干"><a href="#7-5-1-算分提取词干" class="headerlink" title="7.5.1 算分提取词干"></a>7.5.1 算分提取词干</h3><p>es提供三种算法词干：</p><ol><li>snowball 过滤器</li><li>porter stem 过滤器</li><li>kstem 过滤器</li></ol><h4 id="选取kstem-作为案例测试"><a href="#选取kstem-作为案例测试" class="headerlink" title="选取kstem 作为案例测试"></a>选取kstem 作为案例测试</h4><h3 id="7-5-2-使用字典提取词干"><a href="#7-5-2-使用字典提取词干" class="headerlink" title="7.5.2 使用字典提取词干"></a>7.5.2 使用字典提取词干</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">DELETE &#x2F;kstem-filter</span><br><span class="line"></span><br><span class="line">PUT &#x2F;kstem-filter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;myfilter&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;kstem&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, </span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;defulat&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;lowercase&quot;, &quot;myfilter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET kstem-filter&#x2F;_settings</span><br></pre></td></tr></table></figure><h1 id="8-使用相关性进行搜索"><a href="#8-使用相关性进行搜索" class="headerlink" title="8. 使用相关性进行搜索"></a>8. 使用相关性进行搜索</h1><h2 id="8-1-es-的打分机制"><a href="#8-1-es-的打分机制" class="headerlink" title="8.1 es 的打分机制"></a>8.1 es 的打分机制</h2><h3 id="8-1-1-文档是如何运作的："><a href="#8-1-1-文档是如何运作的：" class="headerlink" title="8.1.1 文档是如何运作的："></a>8.1.1 文档是如何运作的：</h3><p>默认使用的是<strong>词频-逆文档</strong>（TF-IDF）词频</p><p>TF：词频</p><p>IDF：逆文档频率</p><h3 id="8-1-2-词频"><a href="#8-1-2-词频" class="headerlink" title="8.1.2 词频"></a>8.1.2 词频</h3><p>词条在文本当中出现的次数</p><h3 id="8-1-3-逆文档词频"><a href="#8-1-3-逆文档词频" class="headerlink" title="8.1.3 逆文档词频"></a>8.1.3 逆文档词频</h3><p>如果一个分词在索引的不同文档中出现的次数越多， 就越<strong>不重要</strong></p><blockquote><ul><li>文档频率的逆源自得分乘以 1/DF , DF是文档频率。意味着越高频率得分就会越低</li><li>逆文档频率只关心“是否”</li></ul></blockquote><h3 id="8-1-4-Lucene-评分公式"><a href="#8-1-4-Lucene-评分公式" class="headerlink" title="8.1.4 Lucene 评分公式"></a>8.1.4 Lucene 评分公式</h3><ul><li>词频</li><li>逆文档频率</li><li>调和因子<ul><li>搜索过多少文档以及发现多少词条</li></ul></li><li>查询标准化<ul><li>试图让不同的查询结果具有可比性</li></ul></li></ul><h2 id="8-2-其他打分方式"><a href="#8-2-其他打分方式" class="headerlink" title="8.2 其他打分方式"></a>8.2 其他打分方式</h2><ul><li>Okapi BM25</li><li>随机性分歧，DFR相似度</li><li>基于信息，IB相似度</li><li>LM Dirichlet 相似度</li><li>LM Jelinek Mercer 相似度</li></ul><h3 id="如何指定索引的打分方式？"><a href="#如何指定索引的打分方式？" class="headerlink" title="如何指定索引的打分方式？"></a>如何指定索引的打分方式？</h3><ul><li><p>修改字段映射的similarity 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;take_score</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 2,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;mytype&quot;:&#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;title&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;similarity&quot;: &quot;defualt&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">PUT &#x2F;like</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;get-together&quot;:&#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;tilte&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;similarity&quot;: &quot;BM25&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在settings 中扩展，为某个索引设置打分算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;dislike</span><br><span class="line">&#123;</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">    &quot;similarity&quot;: &#123;</span><br><span class="line">      &quot;my_custom&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;BM25&quot;,</span><br><span class="line">        &quot;k1&quot;: 1.2,</span><br><span class="line">        &quot;b&quot;: 0.75,</span><br><span class="line">        &quot;discount_overlaps&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET &#x2F;dislike&#x2F;_settings</span><br></pre></td></tr></table></figure><blockquote><p>重要改变：6.0以后官方已不提倡使用TF-IDF，因为该评分方式已经不适用与当今时代的实际需要，官方推荐使用BM25，并且建议7.0 以后的版本移除TF-IDF算法的所有内容，所以TF-IDF这种打分机制只做了解即可</p></blockquote></li></ul><h2 id="8-3-索引期间Boosting"><a href="#8-3-索引期间Boosting" class="headerlink" title="8.3 索引期间Boosting"></a>8.3 索引期间Boosting</h2><p>不推荐在创建索引的时候使用Boosting, 而是在查询的时候,原因如下</p><ul><li>缺少灵活性</li><li>以低精度的数值在Lucene 的内部索引结构当中，只有一个字节存储，可能丢失精度</li><li>boost 是运用于一个词条，配上多个词条，就意味着多次的boost， 进一步增加权重</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;my-gettogether</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;groups&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;name&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;boost&quot;: 2.0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET &#x2F;my-gettogether&#x2F;_mapping</span><br></pre></td></tr></table></figure><h2 id="8-4-查询期间的Boosting"><a href="#8-4-查询期间的Boosting" class="headerlink" title="8.4 查询期间的Boosting"></a>8.4 查询期间的Boosting</h2><ul><li>match、multi_match、simple_query_string、query_string</li><li>funcation_score (更为精确)</li></ul><p>使用match 查询进行boosting</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;about&quot;: &#123;</span><br><span class="line">              &quot;query&quot;: &quot;i hide&quot;,</span><br><span class="line">              &quot;boost&quot;: 2.5</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;last_name&quot;: &#123;</span><br><span class="line">              &quot;query&quot;: &quot;Simith&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个match 将会比第二个match 查询有更大的影响力</p><h3 id="8-4-1-跨越多个字段的查询"><a href="#8-4-1-跨越多个字段的查询" class="headerlink" title="8.4.1 跨越多个字段的查询"></a>8.4.1 跨越多个字段的查询</h3><h3 id="8-4-2-使用multi-match-查询，指定整个Boost"><a href="#8-4-2-使用multi-match-查询，指定整个Boost" class="headerlink" title="8.4.2 使用multi_match 查询，指定整个Boost"></a>8.4.2 使用multi_match 查询，指定整个Boost</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;smit wang&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;first_name&quot;, &quot;last_name&quot;],</span><br><span class="line">      &quot;boost&quot;: 2.5</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-3-使用特殊符号-对于name-进行boost"><a href="#8-4-3-使用特殊符号-对于name-进行boost" class="headerlink" title="8.4.3 使用特殊符号^对于name 进行boost"></a>8.4.3 使用特殊符号^对于name 进行boost</h3><p>使用3倍boost 修改某个字段查询的Boost</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;long&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;name^3&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-4-query-string-中对于针对单个的词条进行boost"><a href="#8-4-4-query-string-中对于针对单个的词条进行boost" class="headerlink" title="8.4.4 query_string 中对于针对单个的词条进行boost"></a>8.4.4 query_string 中对于针对单个的词条进行boost</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;lixiao* OR *long^3&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个字段被boost 4 倍，并不是意味着得分会乘以4，所以得分不是按照严格的乘法</p><h2 id="8-5-使用”解释-explain-”来理解文档评分"><a href="#8-5-使用”解释-explain-”来理解文档评分" class="headerlink" title="8.5 使用”解释(explain)”来理解文档评分"></a>8.5 使用”解释(explain)”来理解文档评分</h2><ul><li>请求体 expliane = true 告诉es 运行解释操作</li><li>Url指定_explain</li></ul><p>下面为请求体重设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;lixiao* OR *long^3&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;explain&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果，内容较为庞大，不过应该不是很难懂</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 58,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 3,</span><br><span class="line">    &quot;max_score&quot;: 4,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot;: &quot;[myindex][2]&quot;,</span><br><span class="line">        &quot;_node&quot;: &quot;Q58S9K26RxqIiVA-UQNrgg&quot;,</span><br><span class="line">        &quot;_index&quot;: &quot;myindex&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;Fbggy20B5sayAd6PVrE2&quot;,</span><br><span class="line">        &quot;_score&quot;: 4,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">          &quot;age&quot;: 5,</span><br><span class="line">          &quot;birthday&quot;: &quot;2019-05-04&quot;,</span><br><span class="line">          &quot;test_field&quot;: &quot;zzzzzz&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot;: &#123;</span><br><span class="line">          &quot;value&quot;: 4, # 最后得分</span><br><span class="line">          &quot;description&quot;: &quot;sum of:&quot;,</span><br><span class="line">          &quot;details&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot;: 1,</span><br><span class="line">              &quot;description&quot;: &quot;max of:&quot;,</span><br><span class="line">              &quot;details&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 1,</span><br><span class="line">                  &quot;description&quot;: &quot;name:lixiao*&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 1,</span><br><span class="line">                  &quot;description&quot;: &quot;name.keyword:lixiao*&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot;: 3,</span><br><span class="line">              &quot;description&quot;: &quot;max of:&quot;,</span><br><span class="line">              &quot;details&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 3,</span><br><span class="line">                  &quot;description&quot;: &quot;name:*long^3.0&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 3,</span><br><span class="line">                  &quot;description&quot;: &quot;name.keyword:*long^3.0&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot;: &quot;[myindex][3]&quot;,</span><br><span class="line">        &quot;_node&quot;: &quot;Q58S9K26RxqIiVA-UQNrgg&quot;,</span><br><span class="line">        &quot;_index&quot;: &quot;myindex&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: 4,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">          &quot;age&quot;: 55,</span><br><span class="line">          &quot;birthday&quot;: &quot;2019-05-04&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot;: &#123;</span><br><span class="line">          &quot;value&quot;: 4,</span><br><span class="line">          &quot;description&quot;: &quot;sum of:&quot;,</span><br><span class="line">          &quot;details&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot;: 1,</span><br><span class="line">              &quot;description&quot;: &quot;max of:&quot;,</span><br><span class="line">              &quot;details&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 1,</span><br><span class="line">                  &quot;description&quot;: &quot;name:lixiao*&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 1,</span><br><span class="line">                  &quot;description&quot;: &quot;name.keyword:lixiao*&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot;: 3,</span><br><span class="line">              &quot;description&quot;: &quot;max of:&quot;,</span><br><span class="line">              &quot;details&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 3,</span><br><span class="line">                  &quot;description&quot;: &quot;name:*long^3.0&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 3,</span><br><span class="line">                  &quot;description&quot;: &quot;name.keyword:*long^3.0&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot;: &quot;[myindex][3]&quot;,</span><br><span class="line">        &quot;_node&quot;: &quot;Q58S9K26RxqIiVA-UQNrgg&quot;,</span><br><span class="line">        &quot;_index&quot;: &quot;myindex&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;FLjrym0B5sayAd6PrrGN&quot;,</span><br><span class="line">        &quot;_score&quot;: 3,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;CHENLONG&quot;,</span><br><span class="line">          &quot;age&quot;: 15,</span><br><span class="line">          &quot;birthday&quot;: &quot;2011-02-14&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot;: &#123;</span><br><span class="line">          &quot;value&quot;: 3,</span><br><span class="line">          &quot;description&quot;: &quot;sum of:&quot;,</span><br><span class="line">          &quot;details&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot;: 3,</span><br><span class="line">              &quot;description&quot;: &quot;max of:&quot;,</span><br><span class="line">              &quot;details&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 3,</span><br><span class="line">                  &quot;description&quot;: &quot;name:*long^3.0&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从改结果中我们其实可以了解到：</p><p>es 官方的分析内容表示官方其实已经将原有的TF-IDF(词频-逆文档频率)进行移除</p><p>现在默认使用的是BM25</p><p>并无法进行yml配置操作</p></blockquote><h3 id="8-5-1-解释一篇文档不匹配的原因"><a href="#8-5-1-解释一篇文档不匹配的原因" class="headerlink" title="8.5.1 解释一篇文档不匹配的原因"></a>8.5.1 解释一篇文档不匹配的原因</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;5&#x2F;_explain</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;xiaolong&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-6-使用查询再打分来减小评分操作影响"><a href="#8-6-使用查询再打分来减小评分操作影响" class="headerlink" title="8.6 使用查询再打分来减小评分操作影响"></a>8.6 使用查询再打分来减小评分操作影响</h2><h3 id="8-6-1-官方文档介绍-6-2版本"><a href="#8-6-1-官方文档介绍-6-2版本" class="headerlink" title="8.6.1 官方文档介绍 6.2版本"></a>8.6.1 官方文档介绍 6.2版本</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-request-rescore.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-request-rescore.html</a></p><ul><li>使用脚本评分</li><li>进行phrase 查询，搜索一段距离内的单词，使用很大的slop值</li></ul><p>使用es的再打分特性，计算返回结果集合的第二轮计算得分</p><h3 id="8-6-2-使用rescore-特性，对于匹配文档子集再评分"><a href="#8-6-2-使用rescore-特性，对于匹配文档子集再评分" class="headerlink" title="8.6.2 使用rescore 特性，对于匹配文档子集再评分"></a>8.6.2 使用rescore 特性，对于匹配文档子集再评分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;lixiao* OR *long^3&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;rescore&quot;: &#123;</span><br><span class="line">    &quot;window_size&quot;: 20,</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">      &quot;rescore_query&quot;: &#123;</span><br><span class="line">        &quot;match_phrase&quot;:&#123;</span><br><span class="line">          &quot;name&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &quot;li&quot;,</span><br><span class="line">            &quot;slop&quot;: 5</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;query_weight&quot;: 0.8,</span><br><span class="line">      &quot;rescore_query_weight&quot;: 1.3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>query_weight：初始查询得分权重</p><p>rescore_query_weight：再评分查询得分权重</p><h2 id="8-7-function-score-来定制得分"><a href="#8-7-function-score-来定制得分" class="headerlink" title="8.7 function_score 来定制得分"></a>8.7 function_score 来定制得分</h2><h3 id="8-7-1-function-score-的基本结构"><a href="#8-7-1-function-score-的基本结构" class="headerlink" title="8.7.1 function_score 的基本结构"></a>8.7.1 function_score 的基本结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        </span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-7-2-weight-函数"><a href="#8-7-2-weight-函数" class="headerlink" title="8.7.2 weight 函数"></a>8.7.2 weight 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_phrase&quot;: &#123;</span><br><span class="line">          &quot;name&quot;:&#123;</span><br><span class="line">            &quot;query&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">            &quot;slop&quot;: 5</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;weight&quot;: 3</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;term&quot;: &#123;</span><br><span class="line">              &quot;age&quot;: 5</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致意识是将过滤出age =5 的文档将权重加3倍</p><h4 id="可以指定多个weight函数"><a href="#可以指定多个weight函数" class="headerlink" title="可以指定多个weight函数"></a>可以指定多个weight函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_phrase&quot;: &#123;</span><br><span class="line">          &quot;name&quot;:&#123;</span><br><span class="line">            &quot;query&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">            &quot;slop&quot;: 5</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;weight&quot;: 1.5,</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;term&quot;: &#123;</span><br><span class="line">              &quot;age&quot;: 5</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;weight&quot;: 1.8,</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;term&quot;: &#123;</span><br><span class="line">              &quot;test_field&quot;: &quot;zzzzzz&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-7-3-合并得分"><a href="#8-7-3-合并得分" class="headerlink" title="8.7.3 合并得分"></a>8.7.3 合并得分</h3><p>得分合并的两种因素：</p><ul><li>从每个单独的函数而来的分数如何合并，score_mode</li><li>从函数而来的得分如何同原始查询得分合并，boost_mode</li></ul><p>第一个因素称为score_mode 参数， 处理不同函数得分如何合并</p><p>可以设置的参数如下</p><ul><li>multiply</li><li>sum</li><li>avg</li><li>first</li><li>max</li><li>min</li></ul><p>默认是得分相乘 multiply</p><p>如果设置为first,则会优先选择第一个匹配的Boost因子</p><p>第二种得分合并设置，称为boost_mode。控制原始查询的得分和函数得分如何合并</p><p>可以设置的参数如下:</p><ul><li>sum</li><li>avg</li><li>max</li><li>min</li><li>replayce</li></ul><p>默认为初始查询得分和函数得分相乘</p><p>设置为replace 则原有的查询被函数得分替换</p><h3 id="8-7-4-field-value-factor-函数"><a href="#8-7-4-field-value-factor-函数" class="headerlink" title="8.7.4 field_value_factor 函数"></a>8.7.4 field_value_factor 函数</h3><p>该函数将包含数值的字段的名称作为输入，选择性的乘以常熟，然后进行数学运算</p><h3 id="8-7-5-在function-score-查询中使用field-value-factor"><a href="#8-7-5-在function-score-查询中使用field-value-factor" class="headerlink" title="8.7.5 在function_score 查询中使用field_value_factor"></a>8.7.5 在function_score 查询中使用field_value_factor</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;field_value_factor&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;age&quot;,</span><br><span class="line">            &quot;factor&quot;: 1.2, </span><br><span class="line">            &quot;modifier&quot;: &quot;ln&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>modifier 可选参数：</p><ul><li>none (默认)</li><li>log</li><li>log1p</li><li>log2p</li><li>ln1p</li><li>ln2p</li><li>square</li><li>sqrt</li><li>reciprocal</li><li>ln</li></ul><h2 id="8-8-painless脚本-5-0后go语言脚本支持已删除"><a href="#8-8-painless脚本-5-0后go语言脚本支持已删除" class="headerlink" title="8.8 painless脚本(5.0后go语言脚本支持已删除)"></a>8.8 painless脚本(5.0后go语言脚本支持已删除)</h2><p>使用一个脚本进行评分</p><p>5.0 之后已经将go语言等脚本移除，使用Lucene官方指定的脚本语言 painless 类js语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;script_score&quot;: &#123;</span><br><span class="line">            &quot;script&quot;: &#123;</span><br><span class="line">              &quot;lang&quot;: &quot;painless&quot;, </span><br><span class="line">              &quot;params&quot;: &#123;</span><br><span class="line">                &quot;mytest&quot;:555</span><br><span class="line">              &#125;, </span><br><span class="line">              &quot;source&quot;: &quot;&quot;&quot;</span><br><span class="line">                int total &#x3D; 0;</span><br><span class="line">                for (int i &#x3D; 0; i &lt; doc[&#39;age&#39;].length; ++i) &#123;</span><br><span class="line">                  total +&#x3D; doc[&#39;age&#39;][i] + params.mytest;</span><br><span class="line">                &#125;</span><br><span class="line">                return total;</span><br><span class="line">              &quot;&quot;&quot;</span><br><span class="line">              </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要引用params的值，需要使用params.xxx进行脚本的常量引用</p><h3 id="8-7-5-random-score-函数"><a href="#8-7-5-random-score-函数" class="headerlink" title="8.7.5 random_score 函数"></a>8.7.5 random_score 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;random_score&quot;: &#123;</span><br><span class="line">            &quot;seed&quot;: 1234,</span><br><span class="line">            &quot;field&quot;: &quot;age&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>It was possible to set a seed without setting a field, but this has been deprecated as this requires loading fielddata on the <code>_id</code> field which consumes a lot of memory.</p></blockquote><p>注意需要指定field 对于文档字段的排序</p><p>否则会报一个必要参数提示</p><h3 id="8-7-6-衰减函数"><a href="#8-7-6-衰减函数" class="headerlink" title="8.7.6 衰减函数"></a>8.7.6 衰减函数</h3><ul><li>linear</li><li>gauss</li><li>exp</li></ul><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/query-dsl-function-score-query.html#function-decay" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/6.2/query-dsl-function-score-query.html#function-decay</a></p><p>官方配置案例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;function_score&quot;: &#123;</span><br><span class="line">            &quot;gauss&quot;: &#123;</span><br><span class="line">                &quot;date&quot;: &#123;</span><br><span class="line">                      &quot;origin&quot;: &quot;2013-09-17&quot;, </span><br><span class="line">                      &quot;scale&quot;: &quot;10d&quot;,</span><br><span class="line">                      &quot;offset&quot;: &quot;5d&quot;, </span><br><span class="line">                      &quot;decay&quot; : 0.5 </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h4><ul><li>origin：曲线原点，表示期望值。地理距离，日期或者数值型</li><li>offset：分数开始衰减的位置</li><li>scale 和 decay ：字段值为scale的时候，分数减少到指定的decay</li></ul><p>根据上面分析，从5天开始，到第10天的时候，衰减到原分数的0.5</p><h2 id="8-9-使用脚本排序"><a href="#8-9-使用脚本排序" class="headerlink" title="8.9 使用脚本排序"></a>8.9 使用脚本排序</h2><h1 id="9-Elasticsearch-REST-API-的学习使用"><a href="#9-Elasticsearch-REST-API-的学习使用" class="headerlink" title="9. Elasticsearch REST API 的学习使用"></a>9. Elasticsearch REST API 的学习使用</h1><h2 id="9-0-API官网"><a href="#9-0-API官网" class="headerlink" title="9.0 API官网"></a>9.0 API官网</h2><p>rest 低级 api：<a href="https://artifacts.elastic.co/javadoc/org/elasticsearch/client/elasticsearch-rest-client/6.2.4/org/elasticsearch/client/package-summary.html" target="_blank" rel="noopener">https://artifacts.elastic.co/javadoc/org/elasticsearch/client/elasticsearch-rest-client/6.2.4/org/elasticsearch/client/package-summary.html</a></p><p>rest 高级 api：<a href="https://artifacts.elastic.co/javadoc/org/elasticsearch/client/elasticsearch-rest-high-level-client/6.2.4/index.html" target="_blank" rel="noopener">https://artifacts.elastic.co/javadoc/org/elasticsearch/client/elasticsearch-rest-high-level-client/6.2.4/index.html</a></p><h2 id="9-1-REST-低级-Api"><a href="#9-1-REST-低级-Api" class="headerlink" title="9.1 REST 低级 Api"></a>9.1 REST 低级 Api</h2><p>低级客户端的功能包括：</p><ul><li>最小依赖</li><li>跨所有可用节点进行负载平衡</li><li>发生节点故障并根据特定响应代码进行故障转移</li><li>失败的连接惩罚（是否重试失败的节点取决于失败的连续次数；失败尝试次数越多，客户端在再次尝试该相同节点之前将等待的时间越长）</li><li>持续的联系</li><li>跟踪记录请求和响应</li><li>可选的自动<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.2/sniffer.html" target="_blank" rel="noopener">发现群集节点</a></li></ul><h3 id="9-1-1-起步"><a href="#9-1-1-起步" class="headerlink" title="9.1.1 起步"></a>9.1.1 起步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch-rest-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.2.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="9-1-2-初始化"><a href="#9-1-2-初始化" class="headerlink" title="9.1.2 初始化"></a>9.1.2 初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">可以通过相应的RestClientBuilder类（通过RestClient＃builder（HttpHost ...）静态方法创建）来构建RestClient实例。 唯一必需的参数是客户端将与之通信的一个或多个主机，以HttpHost的实例形式提供，如下所示：</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        RestClientBuilder restClientBuilder &#x3D; RestClient.builder(</span><br><span class="line">                new HttpHost(&quot;192.168.92.180&quot;, 9200, &quot;http&quot;));</span><br><span class="line">        &#x2F;&#x2F; 设置最大超时时间</span><br><span class="line">        restClientBuilder.setMaxRetryTimeoutMillis(10000);</span><br><span class="line">        &#x2F;&#x2F; 监听失效</span><br><span class="line">        restClientBuilder.setFailureListener(new RestClient.FailureListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(HttpHost host) &#123;</span><br><span class="line">                System.err.println(&quot;连接失效&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; 设置连接的回调内容</span><br><span class="line">        restClientBuilder.setRequestConfigCallback(new RestClientBuilder.RequestConfigCallback() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder builder) &#123;</span><br><span class="line">                System.err.println(&quot;sss&quot;);</span><br><span class="line">                System.err.println(&quot;sss&quot;);</span><br><span class="line">                System.err.println(&quot;sssf&quot;);</span><br><span class="line">                &#x2F;&#x2F; socket套接字连接超时时间</span><br><span class="line">                return builder.setSocketTimeout(10000);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; 设置回调的代理客户端</span><br><span class="line">        restClientBuilder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) &#123;</span><br><span class="line">                return httpClientBuilder.setProxy(new HttpHost(&quot;proxy&quot;, 9000, &quot;http&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        RestClient restClient &#x3D; restClientBuilder.build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>RestClient 是线程安全的</li><li>可以再建造器里面设置连接最大超时时间，默认为30秒</li><li>可以设置代理客户端</li><li>可以设置socket套接字超时时间</li></ul><h3 id="9-1-3-执行请求"><a href="#9-1-3-执行请求" class="headerlink" title="9.1.3 执行请求"></a>9.1.3 执行请求</h3><p>一旦<code>RestClient</code>被创建，请求可以通过调用可用的一个被发送<code>performRequest</code>或<code>performRequestAsync</code>方法的变体。这些<code>performRequest</code>方法是同步的，并且<code>Response</code>直接返回，这意味着客户端将阻塞并等待返回响应。该<code>performRequestAsync</code>变种返回<code>void</code>并接受额外的 <code>ResponseListener</code>作为参数来代替，这意味着它们是异步执行的。请求完成或失败时，将通知提供的侦听器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">        RestClientBuilder restClientBuilder &#x3D; RestClient.builder(</span><br><span class="line">                new HttpHost(&quot;192.168.92.180&quot;, 9200, &quot;http&quot;));</span><br><span class="line">        RestClient restClient &#x3D; restClientBuilder.build();</span><br><span class="line">        &#x2F;&#x2F; 1. 发送一个普通的get请求</span><br><span class="line">&#x2F;&#x2F;        Map&lt;String, String&gt; params &#x3D; Collections.singletonMap(&quot;pretty&quot;, &quot;true&quot;);</span><br><span class="line">&#x2F;&#x2F;        Response response &#x3D; restClient.performRequest(&quot;GET&quot;, &quot;&#x2F;&quot;, params);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 2. 发送一个带参数的请求，并创建一个文档</span><br><span class="line">        Map&lt;Object, Object&gt; singletonMap &#x3D; Collections.emptyMap();</span><br><span class="line">        &#x2F;&#x2F; 请求url参数</span><br><span class="line">        Map&lt;String, String&gt; params &#x3D; Collections.singletonMap(&quot;pretty&quot;, &quot;true&quot;);</span><br><span class="line">        String jsonString &#x3D; &quot;&#123;&quot; +</span><br><span class="line">                &quot;\&quot;user\&quot;:\&quot;kimchy\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;postDate\&quot;:\&quot;2013-01-30\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;message\&quot;:\&quot;trying out Elasticsearch\&quot;&quot; +</span><br><span class="line">                &quot;&#125;&quot;;</span><br><span class="line">        &#x2F;&#x2F; 构建http请求体</span><br><span class="line">        HttpEntity entity &#x3D; new NStringEntity(jsonString, ContentType.APPLICATION_JSON);</span><br><span class="line">        &#x2F;&#x2F; 创建一个文档</span><br><span class="line">&#x2F;&#x2F;        Response response &#x3D; restClient.performRequest(&quot;PUT&quot;, &quot;&#x2F;posts&#x2F;doc&#x2F;1&quot;, params, entity);</span><br><span class="line">        &#x2F;&#x2F; 3. 创建一个_search 请求， 并且指定缓冲区的大小</span><br><span class="line">        HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory heapBufferedResponseConsumerFactory</span><br><span class="line">                &#x3D; new HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory(30 * 1024 * 1024);</span><br><span class="line">        &#x2F;&#x2F; 创建一个响应监听器</span><br><span class="line">        ResponseListener responseListener &#x3D; new ResponseListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onSuccess(Response response) &#123;</span><br><span class="line">                System.err.println(&quot;响应成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Exception e) &#123;</span><br><span class="line">                System.err.println(&quot;响应失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        restClient.performRequestAsync(&quot;GET&quot;, &quot;&#x2F;posts&#x2F;_search&quot;, params, null, heapBufferedResponseConsumerFactory, responseListener);</span><br></pre></td></tr></table></figure><blockquote><p>注意：为HttpEntity指定的ContentType很重要，因为它将用于设置Content-Type标头，以便Elasticsearch可以正确解析内容。</p></blockquote><h3 id="9-1-4-接受响应体的处理"><a href="#9-1-4-接受响应体的处理" class="headerlink" title="9.1.4 接受响应体的处理"></a>9.1.4 接受响应体的处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Response response &#x3D; restClient.performRequest(&quot;PUT&quot;, &quot;&#x2F;posts&#x2F;doc&#x2F;1&quot;, params, entity);</span><br><span class="line">RequestLine requestLine &#x3D; response.getRequestLine();</span><br><span class="line">HttpHost host &#x3D; response.getHost();</span><br><span class="line">int statusCode &#x3D; response.getStatusLine().getStatusCode();</span><br><span class="line">Header[] headers &#x3D; response.getHeaders();</span><br><span class="line">String responseBody &#x3D; EntityUtils.toString(response.getEntity());</span><br><span class="line"></span><br><span class="line">System.err.println(requestLine.getUri());</span><br><span class="line">System.err.println(responseBody);</span><br></pre></td></tr></table></figure><blockquote><p>对于返回404状态代码的HEAD请求，不会引发ResponseException，因为这是预期的HEAD响应，它仅表示未找到资源。 除非ignore参数包含404，否则所有其他HTTP方法（例如GET）都将引发404响应的ResponseException。ignore是一个特殊的客户端参数，不会发送到Elasticsearch，并且包含逗号分隔的错误状态代码列表。 它允许控制是否将某些错误状态代码视为预期的响应而不是异常。 例如，这对于使用get api很有用，因为当缺少文档时它可以返回404，在这种情况下，响应主体将不包含错误，而是通常的get api响应，只是没有找到未找到的文档。</p></blockquote><h2 id="9-2-REST-高级-API"><a href="#9-2-REST-高级-API" class="headerlink" title="9.2 REST 高级 API"></a>9.2 REST 高级 API</h2><h3 id="9-2-1-机器翻译介绍"><a href="#9-2-1-机器翻译介绍" class="headerlink" title="9.2.1 机器翻译介绍"></a>9.2.1 机器翻译介绍</h3><p>Java高级REST客户端在Java高级REST客户端之上工作。它的主要目的是公开API特定的方法，这些方法接受请求对象作为参数并返回响应对象，以便请求编组和响应解编组由客户端本身处理。</p><p>每个API可以同步或异步调用。同步方法返回一个响应对象，而名称以<code>async</code>后缀结尾的异步方法则需要一个侦听器参数，一旦收到响应或错误，该参数将被通知（在低级客户端管理的线程池上）。</p><p>Java高级REST客户端取决于Elasticsearch核心项目。它接受与相同的请求参数，<code>TransportClient</code>并返回相同的响应对象。</p><h3 id="9-2-2-兼容性"><a href="#9-2-2-兼容性" class="headerlink" title="9.2.2 兼容性"></a>9.2.2 <a href="https://github.com/elastic/elasticsearch/edit/6.2/docs/java-rest/high-level/getting-started.asciidoc" target="_blank" rel="noopener">兼容性</a></h3><p>Java高级REST客户端需要Java 1.8，并依赖于Elasticsearch核心项目。客户端版本与为其开发客户端的Elasticsearch版本相同。它接受与相同的请求参数，<code>TransportClient</code> 并返回相同的响应对象。 如果需要将应用程序从其迁移到新的REST客户端，请参阅《<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.2/java-rest-high-level-migration.html" target="_blank" rel="noopener"><em>迁移指南》</em></a><code>TransportClient</code>。</p><p>确保高级客户端能够与在相同主要版本和较大或相等的次要版本上运行的任何Elasticsearch节点进行通信。它不需要与与其通信的Elasticsearch节点处于相同的次要版本，因为它是前向兼容的，这意味着它支持与比其开发的版本更高的Elasticsearch通信。</p><p>6.0客户端可以与任何6.x Elasticsearch节点进行通信，而6.1客户端可以与6.1、6.2和任何更高版本的6.x版本进行通信，但是与先前的Elasticsearch节点进行通信时可能会出现不兼容问题如果6.1客户端支持6.0节点不知道的某些API的新请求正文字段，则版本介于6.1和6.0之间。</p><p>建议将Elasticsearch群集升级到新的主要版本时升级High Level Client，因为REST API的重大更改可能会导致意外结果，具体取决于请求所命中的节点，并且新添加的API仅受支持。客户端的较新版本。一旦集群中的所有节点都已升级到新的主要版本，客户端应始终最后更新。</p><h3 id="9-2-3-起步"><a href="#9-2-3-起步" class="headerlink" title="9.2.3 起步"></a>9.2.3 起步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.2.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>org.elasticsearch.client:elasticsearch-rest-client</li><li>org.elasticsearch:elasticsearch</li></ul><h3 id="9-2-4-创建一个rest-连接"><a href="#9-2-4-创建一个rest-连接" class="headerlink" title="9.2.4 创建一个rest 连接"></a>9.2.4 创建一个rest 连接</h3><h3 id="9-2-5-【6-2-4】版本-支持的相关API-（重点）"><a href="#9-2-5-【6-2-4】版本-支持的相关API-（重点）" class="headerlink" title="9.2.5 【6.2.4】版本 支持的相关API （重点）"></a>9.2.5 【6.2.4】版本 支持的相关API （重点）</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 创建索引</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void createIndex(RestHighLevelClient client) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 1. 创建索引请求，并且指定索引名称</span><br><span class="line">        CreateIndexRequest indexRequest &#x3D; new CreateIndexRequest(&quot;twitter&quot;);</span><br><span class="line">        &#x2F;&#x2F; 2. 设置索引的 settings 注意和es原生方式不同需要加index.</span><br><span class="line">        indexRequest.settings(Settings.builder()</span><br><span class="line">            .put(&quot;index.number_of_shards&quot;, 3)</span><br><span class="line">            .put(&quot;index.number_of_shards&quot;, 2));</span><br><span class="line">        &#x2F;&#x2F; 3. 设置mappings 映射。由于5.0升级需要加上 header请求类型</span><br><span class="line">        indexRequest.mapping(&quot;tweet&quot;,</span><br><span class="line">                &quot;  &#123;\n&quot; +</span><br><span class="line">                        &quot;    \&quot;tweet\&quot;: &#123;\n&quot; +</span><br><span class="line">                        &quot;      \&quot;properties\&quot;: &#123;\n&quot; +</span><br><span class="line">                        &quot;        \&quot;message\&quot;: &#123;\n&quot; +</span><br><span class="line">                        &quot;          \&quot;type\&quot;: \&quot;text\&quot;\n&quot; +</span><br><span class="line">                        &quot;        &#125;\n&quot; +</span><br><span class="line">                        &quot;      &#125;\n&quot; +</span><br><span class="line">                        &quot;    &#125;\n&quot; +</span><br><span class="line">                        &quot;  &#125;&quot;,</span><br><span class="line">                XContentType.JSON);</span><br><span class="line">        &#x2F;&#x2F; 4. 指定索引的别名</span><br><span class="line">        indexRequest.alias(</span><br><span class="line">                new Alias(&quot;twitter_alias&quot;)</span><br><span class="line">        );</span><br><span class="line">        &#x2F;&#x2F; 5. 可选参数提供</span><br><span class="line">        &#x2F;&#x2F; TODO: 这两个参数作用目前不太明确</span><br><span class="line">        indexRequest.timeout(TimeValue.timeValueMinutes(2));</span><br><span class="line">        indexRequest.timeout(&quot;2m&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 5.1连接到主节点的超时时间</span><br><span class="line">        indexRequest.masterNodeTimeout(TimeValue.timeValueMinutes(1));</span><br><span class="line">        indexRequest.masterNodeTimeout(&quot;1m&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 5.2 在创建索引API返回响应之前，要等待的活动碎片副本数</span><br><span class="line">        indexRequest.waitForActiveShards(2);</span><br><span class="line">        indexRequest.waitForActiveShards(ActiveShardCount.DEFAULT);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 6. 同步执行的方式</span><br><span class="line">        CreateIndexResponse createIndexResponse &#x3D; client.indices().create(indexRequest);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 7. 异步执行方式</span><br><span class="line">        &#x2F;&#x2F; 由于异步方式不能立刻返回结果，所以需要监听器去监听异步请求结果</span><br><span class="line">&#x2F;&#x2F;        ActionListener&lt;CreateIndexResponse&gt; listener &#x3D; new ActionListener&lt;CreateIndexResponse&gt;() &#123;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void onResponse(CreateIndexResponse createIndexResponse) &#123;</span><br><span class="line">&#x2F;&#x2F;                System.err.println(&quot;返回结果&quot;);</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void onFailure(Exception e) &#123;</span><br><span class="line">&#x2F;&#x2F;                System.err.println(&quot;出现异常&quot;);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;        &#125;;</span><br><span class="line">&#x2F;&#x2F;        client.indices().createAsync(indexRequest, listener);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 8. 处理返回结果</span><br><span class="line">        boolean acknowledged &#x3D; createIndexResponse.isAcknowledged();</span><br><span class="line">        boolean shardsAcknowledged &#x3D; createIndexResponse.isShardsAcknowledged();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 删除索引</span><br><span class="line">     * @param client</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void deleteIndex(RestHighLevelClient client) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建删除索引的对象</span><br><span class="line">        DeleteIndexRequest deleteIndexRequest &#x3D; new DeleteIndexRequest(&quot;twitter&quot;);</span><br><span class="line">        &#x2F;&#x2F; 2. TODO: 这两个参数作用目前不太明确</span><br><span class="line">        deleteIndexRequest.timeout(TimeValue.timeValueMinutes(2));</span><br><span class="line">        deleteIndexRequest.timeout(&quot;2m&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 2.1 连接到主节点的超时时间</span><br><span class="line">        deleteIndexRequest.masterNodeTimeout(TimeValue.timeValueMinutes(1));</span><br><span class="line">        deleteIndexRequest.masterNodeTimeout(&quot;1m&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 3. 设置IndicesOptions可以控制如何解决不可用的索引以及如何扩展通配符表达式</span><br><span class="line">        &#x2F;&#x2F; 3.1 IndicesOptions.lenientExpandOpen()</span><br><span class="line">        &#x2F;&#x2F; 索引选项将忽略不可用的索引，仅将通配符扩展为打开的索引，并不允许通配符表达式解析任何索引（不返回错误）</span><br><span class="line">        deleteIndexRequest.indicesOptions(IndicesOptions.lenientExpandOpen());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 4.1 同步方式</span><br><span class="line">        DeleteIndexResponse delete &#x3D; client.indices().delete(deleteIndexRequest);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 4.2 异步方式</span><br><span class="line">&#x2F;&#x2F;        client.indices().deleteAsync(deleteIndexRequest, new ActionListener&lt;DeleteIndexResponse&gt;()&#123;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void onResponse(DeleteIndexResponse deleteIndexResponse) &#123;</span><br><span class="line">&#x2F;&#x2F;                System.err.println(&quot;返回结果&quot;);</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void onFailure(Exception e) &#123;</span><br><span class="line">&#x2F;&#x2F;                System.err.println(&quot;出现异常&quot;);</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;        &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 5. 如果删除的时候没有索引会发生什么？</span><br><span class="line">        &#x2F;&#x2F; 请根据如下代码进行处理</span><br><span class="line">&#x2F;&#x2F;        try &#123;</span><br><span class="line">&#x2F;&#x2F;            DeleteIndexRequest request &#x3D; new DeleteIndexRequest(&quot;does_not_exist&quot;);</span><br><span class="line">&#x2F;&#x2F;            client.indices().delete(request);</span><br><span class="line">&#x2F;&#x2F;        &#125; catch (ElasticsearchException exception) &#123;</span><br><span class="line">&#x2F;&#x2F;            if (exception.status() &#x3D;&#x3D; RestStatus.NOT_FOUND) &#123;</span><br><span class="line">&#x2F;&#x2F;              &#x2F;&#x2F;处理异常</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="开放索引"><a href="#开放索引" class="headerlink" title="开放索引"></a>开放索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 开放索引</span><br><span class="line">     * @param client</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static void openIndex(RestHighLevelClient client) throws Exception&#123;</span><br><span class="line">        &#x2F;&#x2F; 1. 创建一个开放索引的请求</span><br><span class="line">        OpenIndexRequest openIndexRequest &#x3D; new OpenIndexRequest(&quot;myindex&quot;);</span><br><span class="line">        &#x2F;&#x2F; 2. 等待所有节点确认索引的超时被打开</span><br><span class="line">        openIndexRequest.timeout(TimeValue.timeValueMinutes(2));</span><br><span class="line">        &#x2F;&#x2F; 3. 设置请求开放索引处理策略</span><br><span class="line">        &#x2F;&#x2F; 要求每个指定索引都存在的索引选项，仅将通配符扩展为打开的索引，并且不允许通配符表达式解析任何索引（不返回错误）。</span><br><span class="line">        openIndexRequest.indicesOptions(IndicesOptions.strictExpandOpen());</span><br><span class="line">        &#x2F;&#x2F; 4. 设置开放索引API返回响应之前要等待的活动分片副本数</span><br><span class="line">        openIndexRequest.waitForActiveShards(2);</span><br><span class="line">        &#x2F;&#x2F; 4.1 ActiveShardCount 存在多个选下那个</span><br><span class="line">        openIndexRequest.waitForActiveShards(ActiveShardCount.ONE);</span><br><span class="line">        &#x2F;&#x2F; 5. 同步方式</span><br><span class="line">        OpenIndexResponse openIndexResponse &#x3D; client.indices().open(openIndexRequest);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 6. 异步方式</span><br><span class="line">        &#x2F;&#x2F; 由于异步方式不能立刻返回结果，所以需要监听器去监听异步请求结果</span><br><span class="line">&#x2F;&#x2F;        ActionListener&lt;OpenIndexResponse&gt; listener &#x3D; new ActionListener&lt;OpenIndexResponse&gt;() &#123;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void onResponse(CreateIndexResponse createIndexResponse) &#123;</span><br><span class="line">&#x2F;&#x2F;                System.err.println(&quot;返回结果&quot;);</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void onFailure(Exception e) &#123;</span><br><span class="line">&#x2F;&#x2F;                System.err.println(&quot;出现异常&quot;);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;        &#125;;</span><br><span class="line">&#x2F;&#x2F;        client.indices().openAsync(openIndexRequest, listener);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 7. 分片是否正常响应</span><br><span class="line">        openIndexResponse.isShardsAcknowledged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="关闭索引"><a href="#关闭索引" class="headerlink" title="关闭索引"></a>关闭索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * 关闭索引</span><br><span class="line">   * @param client</span><br><span class="line">   *&#x2F;</span><br><span class="line">  private static void closeIndex(RestHighLevelClient client) throws Exception&#123;</span><br><span class="line">      &#x2F;&#x2F; 1. 创建一个关闭索引的对象</span><br><span class="line">      CloseIndexRequest closeIndexRequest &#x3D; new CloseIndexRequest(&quot;myindex&quot;);</span><br><span class="line">      &#x2F;&#x2F; 2. 基本设置： 大同小异，不多啰嗦了</span><br><span class="line">      closeIndexRequest.timeout(TimeValue.timeValueMinutes(2));</span><br><span class="line">      closeIndexRequest.timeout(&quot;2m&quot;);</span><br><span class="line">      closeIndexRequest.masterNodeTimeout(TimeValue.timeValueMinutes(1));</span><br><span class="line">      closeIndexRequest.masterNodeTimeout(&quot;1m&quot;);</span><br><span class="line">      closeIndexRequest.indicesOptions(IndicesOptions.lenientExpandOpen());</span><br><span class="line">      &#x2F;&#x2F; 3. 同步方式</span><br><span class="line">      CloseIndexResponse closeIndexResponse &#x3D; client.indices().close(closeIndexRequest);</span><br><span class="line">      &#x2F;&#x2F; 4. 异步方式</span><br><span class="line">      client.indices().closeAsync(closeIndexRequest, new ActionListener&lt;CloseIndexResponse&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void onResponse(CloseIndexResponse closeIndexResponse) &#123;</span><br><span class="line">              &#x2F;&#x2F; ....</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onFailure(Exception e) &#123;</span><br><span class="line">              &#x2F;&#x2F; ....</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      boolean acknowledged &#x3D; closeIndexResponse.isAcknowledged();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-6-索引本身的API"><a href="#9-2-6-索引本身的API" class="headerlink" title="9.2.6 索引本身的API"></a>9.2.6 索引本身的API</h3><h4 id="直接根据索引创建一个文档需要如下参数"><a href="#直接根据索引创建一个文档需要如下参数" class="headerlink" title="直接根据索引创建一个文档需要如下参数"></a>直接根据索引创建一个文档需要如下参数</h4><ol><li>索引名称</li><li>索引类型</li><li>文档id</li><li>文档数据：提供一个json数据</li></ol><h4 id="提供文档来源的多种方式"><a href="#提供文档来源的多种方式" class="headerlink" title="提供文档来源的多种方式"></a>提供文档来源的多种方式</h4><p>可以使用不同的方式来创建文档源数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; jsonMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">jsonMap.put(&quot;user&quot;, &quot;kimchy&quot;);</span><br><span class="line">jsonMap.put(&quot;postData&quot;, new Date());</span><br><span class="line">jsonMap.put(&quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br><span class="line">&#x2F;&#x2F; 5. 使用map创建</span><br><span class="line">indexRequest.source(indexRequest, jsonMap);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 6. es 官方开发了 XContentBuilder 来构建_source 的请求json</span><br><span class="line">XContentBuilder xContentBuilder &#x3D; XContentFactory.jsonBuilder();</span><br><span class="line">xContentBuilder.startObject();</span><br><span class="line">&#123;</span><br><span class="line">    xContentBuilder.field(&quot;user&quot;, &quot;kimchy&quot;);</span><br><span class="line">    xContentBuilder.field(&quot;postDate&quot;, new Date());</span><br><span class="line">    xContentBuilder.field(&quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br><span class="line">&#125;</span><br><span class="line">xContentBuilder.endObject();</span><br><span class="line">IndexRequest source &#x3D; indexRequest.source(xContentBuilder);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 7. 也可以在_soucre 的时候直接传入键值对数据</span><br><span class="line">indexRequest.source(&quot;user&quot;, &quot;kimchy&quot;,</span><br><span class="line">                    &quot;postDate&quot;, new Date(),</span><br><span class="line">                    &quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br></pre></td></tr></table></figure><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><p>设置路由</p><p>设置parent 值</p><p>设置分片处理的超时时间</p><p>将策略刷新为WriteRequest.RefreshPolicy实例</p><p>设置初始版本号</p><p>设置版本类型?</p><p>提供类型形式修改操作类型，以及以字符串形式提供的操作类型：可以创建或更新（默认）</p><p>索引文档之前要执行的管道流的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 8. 可选参数</span><br><span class="line">&#x2F;&#x2F; 8.1 设置路由</span><br><span class="line">indexRequest.routing(&quot;routing&quot;);</span><br><span class="line">&#x2F;&#x2F; 8.2 设置父索引</span><br><span class="line">indexRequest.parent(&quot;parent&quot;);</span><br><span class="line">&#x2F;&#x2F; 8.3 设置分片处理的超时时间</span><br><span class="line">indexRequest.timeout(TimeValue.timeValueSeconds(1));</span><br><span class="line">indexRequest.timeout(&quot;1s&quot;);</span><br><span class="line">&#x2F;&#x2F; 8.4 设置刷新策略</span><br><span class="line">indexRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);</span><br><span class="line">indexRequest.setRefreshPolicy(&quot;wait_for&quot;);</span><br><span class="line">&#x2F;&#x2F; 8.5 设置版本号</span><br><span class="line">indexRequest.version(2);</span><br><span class="line">&#x2F;&#x2F; 8.6 设置版本类型</span><br><span class="line">indexRequest.versionType(VersionType.EXTERNAL);</span><br><span class="line">&#x2F;&#x2F; 8.7 提供类型形式修改操作类型，以及以字符串形式提供的操作类型：可以创建或更新（默认）</span><br><span class="line">indexRequest.opType(DocWriteRequest.OpType.CREATE);</span><br><span class="line">indexRequest.opType(&quot;create&quot;);</span><br><span class="line">&#x2F;&#x2F; 8.8 索引文档之前要执行的管道流的名称</span><br><span class="line">indexRequest.setPipeline(&quot;pipeline&quot;);</span><br></pre></td></tr></table></figure><h4 id="获取响应内容"><a href="#获取响应内容" class="headerlink" title="获取响应内容"></a>获取响应内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 11. 处理响应体内容</span><br><span class="line">indexResponse.getIndex();</span><br><span class="line">indexResponse.getId();</span><br><span class="line">indexResponse.getType();</span><br><span class="line">indexResponse.getVersion();</span><br><span class="line">if (indexResponse.getResult() &#x3D;&#x3D; DocWriteResponse.Result.CREATED) &#123;</span><br><span class="line">    &#x2F;&#x2F; 如果是创建</span><br><span class="line"></span><br><span class="line">&#125; else if (indexResponse.getResult() &#x3D;&#x3D; DocWriteResponse.Result.UPDATED) &#123;</span><br><span class="line">    &#x2F;&#x2F; 如果是修改</span><br><span class="line">&#125;</span><br><span class="line">ReplicationResponse.ShardInfo shardInfo &#x3D; indexResponse.getShardInfo();</span><br><span class="line">if (shardInfo.getTotal() !&#x3D; shardInfo.getSuccessful()) &#123;</span><br><span class="line">    &#x2F;&#x2F; 如果存在失败分片（即返回部分信息）如何处理</span><br><span class="line">&#125;</span><br><span class="line">if (shardInfo.getFailed() &gt; 0) &#123;</span><br><span class="line">    for (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取失败原因</span><br><span class="line">        String reason &#x3D; failure.reason();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据上述内容整合"><a href="#根据上述内容整合" class="headerlink" title="根据上述内容整合"></a>根据上述内容整合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 根据索引创建一个索引文档</span><br><span class="line">     * @param client</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void createIndexDocumentByIndex(RestHighLevelClient client) throws Exception&#123;</span><br><span class="line">        &#x2F;&#x2F; 1. 创建 索引请求</span><br><span class="line">        IndexRequest indexRequest &#x3D; new IndexRequest(</span><br><span class="line">                &quot;posts&quot;,</span><br><span class="line">                &quot;doc&quot;,</span><br><span class="line">                &quot;1&quot;);</span><br><span class="line">        &#x2F;&#x2F; 2. _source 元数据</span><br><span class="line">        String jsonString &#x3D; &quot;&#123;&quot; +</span><br><span class="line">                &quot;\&quot;user\&quot;:\&quot;kimchy\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;postDate\&quot;:\&quot;2013-01-30\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;message\&quot;:\&quot;trying out Elasticsearch\&quot;&quot; +</span><br><span class="line">                &quot;&#125;&quot;;</span><br><span class="line">        &#x2F;&#x2F; 3. 设置元数据</span><br><span class="line">        indexRequest.source(indexRequest, jsonString);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 4. 提供另外一种方式</span><br><span class="line">        Map&lt;String, Object&gt; jsonMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        jsonMap.put(&quot;user&quot;, &quot;kimchy&quot;);</span><br><span class="line">        jsonMap.put(&quot;postData&quot;, new Date());</span><br><span class="line">        jsonMap.put(&quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br><span class="line">        &#x2F;&#x2F; 5. 使用map创建</span><br><span class="line">        indexRequest.source(indexRequest, jsonMap);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 6. es 官方开发了 XContentBuilder 来构建_source 的请求json</span><br><span class="line">        XContentBuilder xContentBuilder &#x3D; XContentFactory.jsonBuilder();</span><br><span class="line">        xContentBuilder.startObject();</span><br><span class="line">        &#123;</span><br><span class="line">            xContentBuilder.field(&quot;user&quot;, &quot;kimchy&quot;);</span><br><span class="line">            xContentBuilder.field(&quot;postDate&quot;, new Date());</span><br><span class="line">            xContentBuilder.field(&quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        xContentBuilder.endObject();</span><br><span class="line">        IndexRequest source &#x3D; indexRequest.source(xContentBuilder);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 7. 也可以在_soucre 的时候直接传入键值对数据</span><br><span class="line">        indexRequest.source(&quot;user&quot;, &quot;kimchy&quot;,</span><br><span class="line">                        &quot;postDate&quot;, new Date(),</span><br><span class="line">                        &quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 8. 可选参数</span><br><span class="line">        &#x2F;&#x2F; 8.1 设置路由</span><br><span class="line">        indexRequest.routing(&quot;routing&quot;);</span><br><span class="line">        &#x2F;&#x2F; 8.2 设置父索引</span><br><span class="line">        indexRequest.parent(&quot;parent&quot;);</span><br><span class="line">        &#x2F;&#x2F; 8.3 设置分片处理的超时时间</span><br><span class="line">        indexRequest.timeout(TimeValue.timeValueSeconds(1));</span><br><span class="line">        indexRequest.timeout(&quot;1s&quot;);</span><br><span class="line">        &#x2F;&#x2F; 8.4 设置刷新策略</span><br><span class="line">        indexRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);</span><br><span class="line">        indexRequest.setRefreshPolicy(&quot;wait_for&quot;);</span><br><span class="line">        &#x2F;&#x2F; 8.5 设置版本号</span><br><span class="line">        indexRequest.version(2);</span><br><span class="line">        &#x2F;&#x2F; 8.6 设置版本类型</span><br><span class="line">        indexRequest.versionType(VersionType.EXTERNAL);</span><br><span class="line">        &#x2F;&#x2F; 8.7 提供类型形式修改操作类型，以及以字符串形式提供的操作类型：可以创建或更新（默认）</span><br><span class="line">        indexRequest.opType(DocWriteRequest.OpType.CREATE);</span><br><span class="line">        indexRequest.opType(&quot;create&quot;);</span><br><span class="line">        &#x2F;&#x2F; 8.8 索引文档之前要执行的管道流的名称</span><br><span class="line">        indexRequest.setPipeline(&quot;pipeline&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 9. 同步方式</span><br><span class="line">        IndexResponse indexResponse &#x3D; client.index(indexRequest);</span><br><span class="line">        &#x2F;&#x2F; 10. 异步方式</span><br><span class="line">        client.indexAsync(indexRequest, new ActionListener&lt;IndexResponse&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(IndexResponse indexResponse) &#123;</span><br><span class="line">                &#x2F;&#x2F; ...</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Exception e) &#123;</span><br><span class="line">                &#x2F;&#x2F; ....</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 11. 处理响应体内容</span><br><span class="line">        indexResponse.getIndex();</span><br><span class="line">        indexResponse.getId();</span><br><span class="line">        indexResponse.getType();</span><br><span class="line">        indexResponse.getVersion();</span><br><span class="line">        if (indexResponse.getResult() &#x3D;&#x3D; DocWriteResponse.Result.CREATED) &#123;</span><br><span class="line">            &#x2F;&#x2F; 如果是创建</span><br><span class="line"></span><br><span class="line">        &#125; else if (indexResponse.getResult() &#x3D;&#x3D; DocWriteResponse.Result.UPDATED) &#123;</span><br><span class="line">            &#x2F;&#x2F; 如果是修改</span><br><span class="line">        &#125;</span><br><span class="line">        ReplicationResponse.ShardInfo shardInfo &#x3D; indexResponse.getShardInfo();</span><br><span class="line">        if (shardInfo.getTotal() !&#x3D; shardInfo.getSuccessful()) &#123;</span><br><span class="line">            &#x2F;&#x2F; 如果存在失败分片（即返回部分信息）如何处理</span><br><span class="line">        &#125;</span><br><span class="line">        if (shardInfo.getFailed() &gt; 0) &#123;</span><br><span class="line">            for (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) &#123;</span><br><span class="line">                &#x2F;&#x2F; 获取失败原因</span><br><span class="line">                String reason &#x3D; failure.reason();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="10-Elasticsearch-JAVA-API-的学习使用"><a href="#10-Elasticsearch-JAVA-API-的学习使用" class="headerlink" title="10. Elasticsearch JAVA API 的学习使用"></a>10. Elasticsearch JAVA API 的学习使用</h1><h2 id="10-1-起步："><a href="#10-1-起步：" class="headerlink" title="10.1 起步："></a>10.1 起步：</h2><h3 id="10-1-1-Maven-依赖"><a href="#10-1-1-Maven-依赖" class="headerlink" title="10.1.1 Maven 依赖"></a>10.1.1 Maven 依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;transport&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.2.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="11-Es-painless-脚本插件使用（Elasticsearch-script-plugin）"><a href="#11-Es-painless-脚本插件使用（Elasticsearch-script-plugin）" class="headerlink" title="11. Es painless 脚本插件使用（Elasticsearch script plugin）"></a>11. Es painless 脚本插件使用（Elasticsearch script plugin）</h1><p>如果需要使用原生java语言实现自定义评分，需要实现官方提供的一个scriptEngine接口，官方在git上面给出了一个案例</p><h2 id="11-1-前置条件：windows安装gradle"><a href="#11-1-前置条件：windows安装gradle" class="headerlink" title="11.1 前置条件：windows安装gradle"></a>11.1 前置条件：windows安装gradle</h2><p>官方推荐用gradle 来构建插件的Jar包，为了怕出现麻烦，直接按照官方给的要求来，这里先列出一下gradle的基本安装步骤</p><h3 id="11-1-1-官方下载地址"><a href="#11-1-1-官方下载地址" class="headerlink" title="11.1.1 官方下载地址"></a>11.1.1 官方下载地址</h3><p><a href="https://services.gradle.org/distributions/" target="_blank" rel="noopener">https://services.gradle.org/distributions/</a></p><p>下载 <strong>gradle-5.6.3-all.zip</strong> 包，注意别下错了</p><h3 id="11-1-2-将gradle放入合适位置，将gradle加入path环境变量"><a href="#11-1-2-将gradle放入合适位置，将gradle加入path环境变量" class="headerlink" title="11.1.2 将gradle放入合适位置，将gradle加入path环境变量"></a>11.1.2 将gradle放入合适位置，将gradle加入path环境变量</h3><h3 id="11-1-3-配置阿里云的镜像"><a href="#11-1-3-配置阿里云的镜像" class="headerlink" title="11.1.3 配置阿里云的镜像"></a>11.1.3 配置阿里云的镜像</h3><h1 id="N-kibana-学习es的所有内容"><a href="#N-kibana-学习es的所有内容" class="headerlink" title="N kibana 学习es的所有内容"></a>N kibana 学习es的所有内容</h1><h2 id="2019-10-14"><a href="#2019-10-14" class="headerlink" title="2019.10.14"></a>2019.10.14</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT &#x2F;lib&#x2F;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  &quot;settings&quot;:&#123;</span><br><span class="line"></span><br><span class="line">  &quot;index&quot;:&#123;</span><br><span class="line">  </span><br><span class="line">    &quot;number_of_shards&quot;: 5,</span><br><span class="line">    </span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET _all&#x2F;_settings</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;user&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot; :  &quot;wang&quot;,</span><br><span class="line">    &quot;last_name&quot; :   &quot;laji&quot;,</span><br><span class="line">    &quot;age&quot; :         333,</span><br><span class="line">    &quot;about&quot; :       &quot;I hide to collect rock albums&quot;,</span><br><span class="line">    &quot;interests&quot;:  [ &quot;basket&quot; ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET &#x2F;+get-toge*,-get-together&#x2F;_search</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?from&#x3D;2&amp;size&#x3D;2</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search?sort&#x3D;age:_id&amp;_source&#x3D;first_name,age</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?q&#x3D;first_name:ne</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;from&quot;: 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;*_name&quot;, &quot;a*&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;includes&quot;: [&quot;*_name&quot;, &quot;age&quot;],</span><br><span class="line">    &quot;excludes&quot;: [&quot;first_name&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    &quot;_score&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;_source&quot;: [&quot;*_name&quot;, &quot;age&quot;],</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;:&quot;desc&quot;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &quot;Jane&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;about&quot;: &quot;hide&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ], </span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;wang&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search?q&#x3D;wang</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;default_field&quot;: &quot;first_name&quot;,</span><br><span class="line">      &quot;query&quot;: &quot;first_name:wang OR first_name:jane AND age:[0 TO  999]&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;_id&quot;: 1</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: [</span><br><span class="line">        &quot;i&quot;,</span><br><span class="line">        &quot;hide&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;Jane wang&quot;,</span><br><span class="line">        &quot;operator&quot;: &quot;or&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;phrase_prefix&quot;,</span><br><span class="line">        &quot;query&quot;: &quot;hide&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;to rock&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase_prefix&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;wa&quot;,</span><br><span class="line">        &quot;max_expansions&quot;: 5</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;wang smith&quot;,</span><br><span class="line">        &quot;fields&quot;: [&quot;first_name&quot;, &quot;last_name&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match_phrase&quot;:  &#123;</span><br><span class="line">            &quot;about&quot;: &#123;</span><br><span class="line">              &quot;query&quot;: &quot;i to&quot;,</span><br><span class="line">              &quot;slop&quot;: 1</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;first_name&quot;: &#123;</span><br><span class="line">              &quot;value&quot;: &quot;wang&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;query_string&quot;: &#123;</span><br><span class="line">            &quot;default_field&quot;: &quot;age&quot;,</span><br><span class="line">            &quot;query&quot;: &quot;first_name:jane&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;minimum_should_match&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">  &quot;age&quot;: 5,</span><br><span class="line">  &quot;birthday&quot;: &quot;2019-05-04&quot;,</span><br><span class="line">  &quot;test_field&quot;: &quot;zzzzzz&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: &quot;li&quot;,</span><br><span class="line">        &quot;lte&quot;: &quot;o&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;Li&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;wildcard&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;lix?ao*&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;exists&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;name&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;missing&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;test_field&quot;,</span><br><span class="line">          &quot;existence&quot;: true,</span><br><span class="line">          &quot;null_value&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;query_string&quot;: &#123;</span><br><span class="line">            &quot;default_field&quot;: &quot;name&quot;,</span><br><span class="line">            &quot;query&quot;: &quot;che*&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST &#x2F;mymyindex&#x2F;</span><br></pre></td></tr></table></figure><h2 id="2019-10-15"><a href="#2019-10-15" class="headerlink" title="2019.10.15"></a>2019.10.15</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br></pre></td><td class="code"><pre><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT &#x2F;lib&#x2F;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  &quot;settings&quot;:&#123;</span><br><span class="line"></span><br><span class="line">  &quot;index&quot;:&#123;</span><br><span class="line">  </span><br><span class="line">    &quot;number_of_shards&quot;: 5,</span><br><span class="line">    </span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET _all&#x2F;_settings</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;user&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot; :  &quot;wang&quot;,</span><br><span class="line">    &quot;last_name&quot; :   &quot;laji&quot;,</span><br><span class="line">    &quot;age&quot; :         333,</span><br><span class="line">    &quot;about&quot; :       &quot;I hide to collect rock albums&quot;,</span><br><span class="line">    &quot;interests&quot;:  [ &quot;basket&quot; ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET &#x2F;+get-toge*,-get-together&#x2F;_search</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?from&#x3D;2&amp;size&#x3D;2</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search?sort&#x3D;age:_id&amp;_source&#x3D;first_name,age</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?q&#x3D;first_name:ne</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;from&quot;: 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;*_name&quot;, &quot;a*&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;includes&quot;: [&quot;*_name&quot;, &quot;age&quot;],</span><br><span class="line">    &quot;excludes&quot;: [&quot;first_name&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    &quot;_score&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;_source&quot;: [&quot;*_name&quot;, &quot;age&quot;],</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;:&quot;desc&quot;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &quot;Jane&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;about&quot;: &quot;hide&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ], </span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;wang&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search?q&#x3D;wang</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;default_field&quot;: &quot;first_name&quot;,</span><br><span class="line">      &quot;query&quot;: &quot;first_name:wang OR first_name:jane AND age:[0 TO  999]&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;_id&quot;: 1</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: [</span><br><span class="line">        &quot;i&quot;,</span><br><span class="line">        &quot;hide&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;Jane wang&quot;,</span><br><span class="line">        &quot;operator&quot;: &quot;or&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;phrase_prefix&quot;,</span><br><span class="line">        &quot;query&quot;: &quot;hide&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;to rock&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase_prefix&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;wa&quot;,</span><br><span class="line">        &quot;max_expansions&quot;: 5</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;wang smith&quot;,</span><br><span class="line">        &quot;fields&quot;: [&quot;first_name&quot;, &quot;last_name&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match_phrase&quot;:  &#123;</span><br><span class="line">            &quot;about&quot;: &#123;</span><br><span class="line">              &quot;query&quot;: &quot;i to&quot;,</span><br><span class="line">              &quot;slop&quot;: 1</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;first_name&quot;: &#123;</span><br><span class="line">              &quot;value&quot;: &quot;wang&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;query_string&quot;: &#123;</span><br><span class="line">            &quot;default_field&quot;: &quot;age&quot;,</span><br><span class="line">            &quot;query&quot;: &quot;first_name:jane&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;minimum_should_match&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">  &quot;age&quot;: 5,</span><br><span class="line">  &quot;birthday&quot;: &quot;2019-05-04&quot;,</span><br><span class="line">  &quot;test_field&quot;: &quot;zzzzzz&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: &quot;li&quot;,</span><br><span class="line">        &quot;lte&quot;: &quot;o&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;Li&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;wildcard&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;lix?ao*&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;exists&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;name&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;missing&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;test_field&quot;,</span><br><span class="line">          &quot;existence&quot;: true,</span><br><span class="line">          &quot;null_value&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;query_string&quot;: &#123;</span><br><span class="line">            &quot;default_field&quot;: &quot;name&quot;,</span><br><span class="line">            &quot;query&quot;: &quot;che*&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DELETE &#x2F;mymyindex&#x2F; </span><br><span class="line"></span><br><span class="line">PUT &#x2F;mymyindex</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;std_folded&quot;: &#123; </span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [</span><br><span class="line">            &quot;lowercase&quot;,</span><br><span class="line">            &quot;asciifolding&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_doc&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;my_text&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;std_folded&quot; </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;mymyindex&#x2F;_mapping</span><br><span class="line"></span><br><span class="line">POST &#x2F;mymyindex&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;whitespace&quot;, </span><br><span class="line">  &quot;filter&quot;: [</span><br><span class="line">    &quot;reverse&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog\u0027s bone.&quot;,</span><br><span class="line">  &quot;field&quot;: &quot;my_text&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;get-together&#x2F;group&#x2F;3q8nz20BXNiyabSjyH-c&#x2F;_termvectors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT &#x2F;my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;analysis&quot;: &#123;</span><br><span class="line">            &quot;char_filter&quot;: &#123;</span><br><span class="line">                &quot;&amp;_to_and&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:       &quot;mapping&quot;,</span><br><span class="line">                    &quot;mappings&quot;: [ &quot;&amp; &#x3D;&gt; and &quot;]</span><br><span class="line">            &#125;&#125;,</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;my_stopwords&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:       &quot;stop&quot;,</span><br><span class="line">                    &quot;stopwords&quot;: [ &quot;the&quot;, &quot;a&quot; ]</span><br><span class="line">            &#125;&#125;,</span><br><span class="line">            &quot;analyzer&quot;: &#123;</span><br><span class="line">                &quot;my_analyzer&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:         &quot;custom&quot;,</span><br><span class="line">                    &quot;char_filter&quot;:  [ &quot;html_strip&quot;, &quot;&amp;_to_and&quot; ],</span><br><span class="line">                    &quot;tokenizer&quot;:    &quot;standard&quot;,</span><br><span class="line">                    &quot;filter&quot;:       [ &quot;lowercase&quot;, &quot;my_stopwords&quot; ]</span><br><span class="line">            &#125;&#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> GET &#x2F;my_index&#x2F;_mapping</span><br><span class="line"> GET &#x2F;mymyindex&#x2F;_mapping</span><br><span class="line"> </span><br><span class="line">POST &#x2F;lib&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;I have, photos&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;letter&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;lowercase&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;whitespace&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;whitespace&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;uax_url_email&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;Email me at john.smith@global-international.com&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT &#x2F;asciifold_example</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">        &quot;analysis&quot; : &#123;</span><br><span class="line">            &quot;analyzer&quot; : &#123;</span><br><span class="line">                &quot;default&quot; : &#123;</span><br><span class="line">                    &quot;tokenizer&quot; : &quot;standard&quot;,</span><br><span class="line">                    &quot;filter&quot; : [&quot;standard&quot;, &quot;asciifolding&quot;]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DELETE &#x2F;kstem-filter</span><br><span class="line"></span><br><span class="line">PUT &#x2F;kstem-filter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;myfilter&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;kstem&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, </span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;defulat&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;lowercase&quot;, &quot;myfilter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET kstem-filter&#x2F;_settings</span><br><span class="line">POST &#x2F;kstem-filter&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;standard&quot;, </span><br><span class="line">  &quot;text&quot;: &quot;Austrian&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;n-gram-filter&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;ilikebeijingjingbei&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot; synonyms&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;Email me at john.smith@global-international.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Elasticsearch 踩坑 - 6.2.4 版本
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://lazytime.site/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://lazytime.site/tags/Elasticsearch/"/>
    
  </entry>
  
</feed>
