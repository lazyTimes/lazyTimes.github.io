<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JDK源码解读</title>
    <url>/2020/07/26/JDK%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<h1 id="深入理解JVM虚拟机-JDK源码解读"><a href="#深入理解JVM虚拟机-JDK源码解读" class="headerlink" title="深入理解JVM虚拟机 - JDK源码解读"></a>深入理解JVM虚拟机 - JDK源码解读</h1><p>《深入理解JVM虚拟机》看过了好几遍了，对于编译一个JDK源码有很强的冲动。这里主要实战使用<strong>阿里云</strong>进行编译实战</p>
<ul>
<li>为什么使用阿里云？<ul>
<li>个人电脑奋斗四年了，装虚拟机莫名其妙的死机</li>
<li>阿里云带宽1M，只能用来干些LInux学习的工作</li>
</ul>
</li>
<li>参考博客：<a href="https://juejin.im/post/5c6b9a476fb9a049c30bcebd" target="_blank" rel="noopener">https://juejin.im/post/5c6b9a476fb9a049c30bcebd</a></li>
</ul>
<a id="more"></a>

<h2 id="JDK源码下载-openJDK7u75"><a href="#JDK源码下载-openJDK7u75" class="headerlink" title="JDK源码下载 - openJDK7u75"></a>JDK源码下载 - openJDK7u75</h2><ul>
<li>地址：<a href="https://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-src-b13-18_dec_2014.zip" target="_blank" rel="noopener">https://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-src-b13-18_dec_2014.zip</a></li>
</ul>
<h2 id="Bootstrap-JDK"><a href="#Bootstrap-JDK" class="headerlink" title="Bootstrap JDK"></a>Bootstrap JDK</h2><ul>
<li><p>编译OpenJDK7需要 Bootstrap JDK U14 之后的版本</p>
</li>
<li><p>地址：</p>
<p><a href="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html</a></p>
<ul>
<li>下载 <code>linux.tag.gz包</code></li>
</ul>
</li>
<li><p>有条件尽量科学上网下载比较慢</p>
</li>
</ul>
<h2 id="Apach-Ant-1-7-1版本"><a href="#Apach-Ant-1-7-1版本" class="headerlink" title="Apach Ant 1.7.1版本"></a>Apach Ant 1.7.1版本</h2><ul>
<li>地址：<a href="https://ant.apache.org/bindownload.cgi" target="_blank" rel="noopener">https://ant.apache.org/bindownload.cgi</a></li>
<li>还需要一个apach ant 1.7.1 版本</li>
<li>这里选择了: 1.9.14版本</li>
</ul>
<h2 id="前置依赖："><a href="#前置依赖：" class="headerlink" title="前置依赖："></a>前置依赖：</h2><ul>
<li>OpenJDK要用到很多的gcc，java，c的库函数，需要进行前置准备</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install build-essential gawk m4 openjdk6-jdk libasound2-print-dev binutils libmotif3 libmotif-dev ant</span><br><span class="line">yum install libX* #有可能会缺失的库，先提前安装</span><br></pre></td></tr></table></figure>

<h2 id="首次编译"><a href="#首次编译" class="headerlink" title="首次编译"></a>首次编译</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入到openjdk的目录</span><br><span class="line">cd openjdk所在目录</span><br><span class="line"># 解压</span><br><span class="line">unzip openjdk</span><br><span class="line"># 编译</span><br><span class="line">cd open jdk</span><br><span class="line"># 第一次编译，输出到对应文件</span><br><span class="line">make sanity &gt; error.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>不出所料，编译失败了，我们可以根据错误日志来进行调整</li>
<li>根据错误，整理一下错误点</li>
<li>下面参考书籍的内容进行设置</li>
</ul>
<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><ul>
<li><p>gcc 4.3 版本以上</p>
</li>
<li><p>必须设置两个</p>
<ul>
<li>LANG：编译语言</li>
<li>ALT_BOOTDIR：Bootstrap JDK 1.7 的版本</li>
</ul>
</li>
<li><p>设置环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANG&#x3D;C</span><br><span class="line">export ALT_BOOTDIR&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;jdk1.7.0_80</span><br></pre></td></tr></table></figure>
</li>
<li><p>去掉原本的JDK环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unset JAVA_HOME</span><br><span class="line">unset CLASSPATH</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="OpenJDK-错误处理"><a href="#OpenJDK-错误处理" class="headerlink" title="OpenJDK 错误处理"></a>OpenJDK 错误处理</h2><h3 id="错误1：-缺少打印-Cups-依赖"><a href="#错误1：-缺少打印-Cups-依赖" class="headerlink" title="错误1： 缺少打印 Cups 依赖"></a>错误1： 缺少打印 Cups 依赖</h3><p>错误信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: You do not have access to valid Cups header files. </span><br><span class="line">       Please check your access to </span><br><span class="line">           &#x2F;usr&#x2F;include&#x2F;cups&#x2F;cups.h </span><br><span class="line">       and&#x2F;or check your value of ALT_CUPS_HEADERS_PATH, </span><br><span class="line">       CUPS is frequently pre-installed on many systems, </span><br><span class="line">       or may be downloaded from http:&#x2F;&#x2F;www.cups.org</span><br></pre></td></tr></table></figure>

<p>处理方式：</p>
<p>缺少<code>cups</code>打印框架，解决：</p>
<ol>
<li>可以根据如下命令查找</li>
</ol>
<p><code>yum search cups</code> 查找对应依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; N&#x2F;S matched: cups &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">apcupsd-cgi.x86_64 : Web interface for apcupsd</span><br><span class="line">apcupsd-gui.x86_64 : GUI interface for apcupsd</span><br><span class="line">bluez-cups.x86_64 : CUPS printer backend for Bluetooth printers</span><br><span class="line">cups.x86_64 : CUPS printing system</span><br><span class="line">cups-bjnp.x86_64 : CUPS backend for the Canon BJNP network printers</span><br><span class="line">cups-client.x86_64 : CUPS printing system - client programs</span><br><span class="line">cups-devel.i686 : CUPS printing system - development environment</span><br><span class="line">cups-devel.x86_64 : CUPS printing system - development environment</span><br><span class="line">cups-filesystem.noarch : CUPS printing system - directory layout</span><br><span class="line">cups-filters.x86_64 : OpenPrinting CUPS filters and backends</span><br><span class="line">cups-filters-devel.i686 : OpenPrinting CUPS filters and backends - development environment</span><br><span class="line">cups-filters-devel.x86_64 : OpenPrinting CUPS filters and backends - development environment</span><br><span class="line">cups-filters-libs.i686 : OpenPrinting CUPS filters and backends - cupsfilters and fontembed libraries</span><br><span class="line">cups-filters-libs.x86_64 : OpenPrinting CUPS filters and backends - cupsfilters and fontembed libraries</span><br><span class="line">cups-ipptool.x86_64 : CUPS printing system - tool for performing IPP requests</span><br><span class="line">cups-libs.x86_64 : CUPS printing system - libraries</span><br><span class="line">cups-libs.i686 : CUPS printing system - libraries</span><br><span class="line">cups-lpd.x86_64 : CUPS printing system - lpd emulation</span><br><span class="line">cups-pdf.x86_64 : Extension for creating pdf-Files with CUPS</span><br><span class="line">cups-x2go.noarch : CUPS backend for printing from X2Go</span><br><span class="line">dymo-cups-drivers.x86_64 : DYMO LabelWriter Drivers for CUPS</span><br><span class="line">ghostscript-cups.x86_64 : CUPS filter for interpreting PostScript and PDF</span><br><span class="line">gutenprint-cups.x86_64 : CUPS drivers for Canon, Epson, HP and compatible printers</span><br><span class="line">perl-Net-CUPS.x86_64 : Perl bindings to the CUPS C API Interface</span><br><span class="line">python-cups.x86_64 : Python bindings for CUPS</span><br><span class="line">python-cups-doc.x86_64 : Documentation for python-cups</span><br><span class="line">python3-cups-doc.x86_64 : Documentation for python-cups</span><br><span class="line">python34-cups.x86_64 : Python 3 bindings for CUPS API, known as pycups</span><br><span class="line">python36-cups.x86_64 : Python 3 bindings for CUPS API, known as pycups</span><br><span class="line">apcupsd.x86_64 : APC UPS Power Control Daemon</span><br><span class="line">cups-pk-helper.x86_64 : A helper that makes system-config-printer use PolicyKit</span><br><span class="line">foomatic-filters.x86_64 : CUPS print filters for the foomatic package</span><br><span class="line">samba-krb5-printing.x86_64 : Samba CUPS backend for printing with Kerberos</span><br><span class="line"></span><br><span class="line">  Name and summary matches only, use &quot;search all&quot; for everything.</span><br></pre></td></tr></table></figure>

<ol>
<li>安装Cups</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install cups-devel.x86_64</span><br></pre></td></tr></table></figure>

<h3 id="错误2：-缺少-Freetype-依赖"><a href="#错误2：-缺少-Freetype-依赖" class="headerlink" title="错误2： 缺少 Freetype 依赖"></a>错误2： 缺少 Freetype 依赖</h3><p>报错情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: FreeType version  2.3.0  or higher is required. </span><br><span class="line"> make[2]: 进入目录“&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;jdk&#x2F;make&#x2F;tools&#x2F;freetypecheck”</span><br><span class="line">&#x2F;bin&#x2F;mkdir -p &#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;build&#x2F;linux-amd64&#x2F;btbins</span><br><span class="line">rm -f &#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;build&#x2F;linux-amd64&#x2F;btbins&#x2F;freetype_versioncheck</span><br><span class="line">make[2]: 离开目录“&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;jdk&#x2F;make&#x2F;tools&#x2F;freetypecheck”</span><br><span class="line">Failed to build freetypecheck.</span><br></pre></td></tr></table></figure>

<p>处理方式：</p>
<ol>
<li><code>yum search freetype</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; N&#x2F;S matched: freetype &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">freetype-demos.x86_64 : A collection of FreeType demos</span><br><span class="line">freetype-devel.i686 : FreeType development libraries and header files</span><br><span class="line">freetype-devel.x86_64 : FreeType development libraries and header files</span><br><span class="line">mingw32-freetype-static.noarch : Static version of the MinGW Windows Freetype library</span><br><span class="line">mingw64-freetype-static.noarch : Static version of the MinGW Windows Freetype library</span><br><span class="line">python-freetype.noarch : Freetype python bindings</span><br><span class="line">freetype.x86_64 : A free and portable font rendering engine</span><br><span class="line">freetype.i686 : A free and portable font rendering engine</span><br><span class="line">ftgl.x86_64 : OpenGL frontend to Freetype 2</span><br><span class="line">mingw32-freetype.noarch : Free and portable font rendering engine</span><br><span class="line">mingw64-freetype.noarch : Free and portable font rendering engine</span><br></pre></td></tr></table></figure>

<ol>
<li>执行命令<code>yum install freetype-devel.x86_64 -y</code></li>
</ol>
<h3 id="错误3：缺少声卡Alsa依赖，需要安装"><a href="#错误3：缺少声卡Alsa依赖，需要安装" class="headerlink" title="错误3：缺少声卡Alsa依赖，需要安装"></a>错误3：缺少声卡Alsa依赖，需要安装</h3><p>错误信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: You seem to not have installed ALSA 0.9.1 or higher. </span><br><span class="line">       Please install ALSA (drivers and lib). You can download the </span><br><span class="line">       source distribution from http:&#x2F;&#x2F;www.alsa-project.org or go to </span><br><span class="line">       http:&#x2F;&#x2F;www.freshrpms.net&#x2F;docs&#x2F;alsa&#x2F; for precompiled RPM packages.</span><br></pre></td></tr></table></figure>

<p>处理方式：</p>
<ol>
<li><code>yum search alsa</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; N&#x2F;S matched: alsa &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">alsa-firmware.noarch : Firmware for several ALSA-supported sound cards</span><br><span class="line">alsa-lib.x86_64 : The Advanced Linux Sound Architecture (ALSA) library</span><br><span class="line">alsa-lib.i686 : The Advanced Linux Sound Architecture (ALSA) library</span><br><span class="line">alsa-lib-devel.i686 : Development files from the ALSA library</span><br><span class="line">alsa-lib-devel.x86_64 : Development files from the ALSA library</span><br><span class="line">alsa-plugins-arcamav.i686 : Arcam AV amplifier plugin for ALSA</span><br><span class="line">alsa-plugins-arcamav.x86_64 : Arcam AV amplifier plugin for ALSA</span><br><span class="line">alsa-plugins-maemo.i686 : Maemo plugin for ALSA</span><br><span class="line">alsa-plugins-maemo.x86_64 : Maemo plugin for ALSA</span><br><span class="line">alsa-plugins-oss.i686 : Oss PCM output plugin for ALSA</span><br><span class="line">alsa-plugins-oss.x86_64 : Oss PCM output plugin for ALSA</span><br><span class="line">alsa-plugins-pulseaudio.i686 : Alsa to PulseAudio backend</span><br><span class="line">alsa-plugins-pulseaudio.x86_64 : Alsa to PulseAudio backend</span><br><span class="line">alsa-plugins-samplerate.i686 : External rate converter plugin for ALSA</span><br><span class="line">alsa-plugins-samplerate.x86_64 : External rate converter plugin for ALSA</span><br><span class="line">alsa-plugins-upmix.i686 : Upmixer channel expander plugin for ALSA</span><br><span class="line">alsa-plugins-upmix.x86_64 : Upmixer channel expander plugin for ALSA</span><br><span class="line">alsa-plugins-usbstream.i686 : USB stream plugin for ALSA</span><br><span class="line">alsa-plugins-usbstream.x86_64 : USB stream plugin for ALSA</span><br><span class="line">alsa-plugins-vdownmix.i686 : Downmixer to stereo plugin for ALSA</span><br><span class="line">alsa-plugins-vdownmix.x86_64 : Downmixer to stereo plugin for ALSA</span><br><span class="line">alsa-tools.x86_64 : Specialist tools for ALSA</span><br><span class="line">alsa-tools-firmware.x86_64 : ALSA tools for uploading firmware to some soundcards</span><br><span class="line">alsa-utils.x86_64 : Advanced Linux Sound Architecture (ALSA) utilities</span><br><span class="line">alsa-plugins-speex.i686 : Rate Converter Plugin Using Speex Resampler</span><br><span class="line">alsa-plugins-speex.x86_64 : Rate Converter Plugin Using Speex Resampler</span><br></pre></td></tr></table></figure>

<ol>
<li>安装依赖：<code>yum -y install alsa-lib* alsa-util*</code></li>
</ol>
<h3 id="错误4：缺少Ant依赖"><a href="#错误4：缺少Ant依赖" class="headerlink" title="错误4：缺少Ant依赖"></a>错误4：缺少Ant依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: The version of ant being used is older than </span><br><span class="line">       the required version of &#39;1.7.1&#39;. </span><br><span class="line">       The version of ant found was &#39;&#39;.</span><br></pre></td></tr></table></figure>

<p>处理方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ant -y</span><br></pre></td></tr></table></figure>

<h3 id="错误5：缺少C语言环境变量"><a href="#错误5：缺少C语言环境变量" class="headerlink" title="错误5：缺少C语言环境变量"></a>错误5：缺少C语言环境变量</h3><p>错误信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WARNING: LANG has been set to zh_CN.UTF-8, this can cause build failures. </span><br><span class="line">         Try setting LANG to &#39;C&#39;.</span><br></pre></td></tr></table></figure>

<p>处理方式：</p>
<ol>
<li><code>export LANG=C</code>设置C语言环境</li>
</ol>
<h2 id="第二次编译"><a href="#第二次编译" class="headerlink" title="第二次编译"></a>第二次编译</h2><p>需要再次输入命令<code>make santify</code> ，知道看到如下信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sanity check passed.</span><br></pre></td></tr></table></figure>

<h2 id="编写启动脚本"><a href="#编写启动脚本" class="headerlink" title="编写启动脚本"></a>编写启动脚本</h2><ul>
<li>经过上面的测试，再根据JVM虚拟机的内容，编写了下面一个通用的命令脚本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 语言选项，必须设置，否者编译之后会出现一个HashTable槽的错误的NPE的错</span><br><span class="line">export LANG&#x3D;C</span><br><span class="line"># Bootstrap JDK 的安装路径</span><br><span class="line">export ALT_BOOTDIR&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;jdk1.7.0_80</span><br><span class="line"># 允许自动下载数据</span><br><span class="line">export ALLOW_DOWNLOADS&#x3D;true</span><br><span class="line">#并行编译的线程数，设置为和CPU内核数量一致即可</span><br><span class="line"></span><br><span class="line">export HOTSPOT_BUILD_JOBS&#x3D;6</span><br><span class="line"></span><br><span class="line">export ALT_PARALLEL_COMPILE_JOBS&#x3D;6</span><br><span class="line"></span><br><span class="line">#比较本次build出来的映像与先前版本的差异。这对我们来说没有意义，</span><br><span class="line"></span><br><span class="line">#必须设置为false，否则sanity检查会报缺少先前版本JDK的映像的错误提示。</span><br><span class="line"></span><br><span class="line">#如果已经设置dev或者DEV_ONLY&#x3D;true，这个不显式设置也行</span><br><span class="line"></span><br><span class="line">export SKIP_COMPARE_IMAGES&#x3D;true</span><br><span class="line"></span><br><span class="line">#使用预编译头文件，不加这个编译会更慢一些</span><br><span class="line"></span><br><span class="line">export USE_PRECOMPILED_HEADER&#x3D;true</span><br><span class="line"></span><br><span class="line">#要编译的内容</span><br><span class="line"></span><br><span class="line">export BUILD_LANGTOOLS&#x3D;true</span><br><span class="line"></span><br><span class="line">#export BUILD_JAXP&#x3D;false</span><br><span class="line"></span><br><span class="line">#export BUILD_JAXWS&#x3D;false</span><br><span class="line"></span><br><span class="line">#export BUILD_CORBA&#x3D;false</span><br><span class="line"></span><br><span class="line">export BUILD_HOTSPOT&#x3D;true</span><br><span class="line"></span><br><span class="line">export BUILD_JDK&#x3D;true</span><br><span class="line"></span><br><span class="line">#要编译的版本</span><br><span class="line"></span><br><span class="line">#export SKIP_DEBUG_BUILD&#x3D;false</span><br><span class="line"></span><br><span class="line">#export SKIP_FASTDEBUG_BUILD&#x3D;true</span><br><span class="line"></span><br><span class="line">#export DEBUG_NAME&#x3D;debug</span><br><span class="line"></span><br><span class="line">#把它设置为false可以避开javaws和浏览器Java插件之类的部分的build</span><br><span class="line"></span><br><span class="line">BUILD_DEPLOY&#x3D;false</span><br><span class="line"></span><br><span class="line">#把它设置为false就不会build出安装包。因为安装包里有些奇怪的依赖，</span><br><span class="line"></span><br><span class="line">#但即便不build出它也已经能得到完整的JDK映像，所以还是别build它好了</span><br><span class="line"></span><br><span class="line">BUILD_INSTALL&#x3D;false</span><br><span class="line"></span><br><span class="line">#编译结果所存放的路径</span><br><span class="line"></span><br><span class="line">export ALT_OUTPUTDIR&#x3D;&#x2F;Users&#x2F;IcyFenix&#x2F;Develop&#x2F;JVM&#x2F;jdkBuild&#x2F;openjdk_7u4&#x2F;build</span><br><span class="line"></span><br><span class="line">#这两个环境变量必须去掉，不然会有很诡异的事情发生（我没有具体查过这些&quot;诡异的</span><br><span class="line">#事情&quot;，Makefile脚本检查到有这2个变量就会提示警告）</span><br><span class="line"></span><br><span class="line">unset JAVA_HOME</span><br><span class="line"></span><br><span class="line">unset CLASSPATH</span><br><span class="line"></span><br><span class="line">make 2＞＆1|tee $ALT_OUTPUTDIR&#x2F;build.log</span><br></pre></td></tr></table></figure>

<h3 id="启动脚本参考："><a href="#启动脚本参考：" class="headerlink" title="启动脚本参考："></a>启动脚本参考：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语言选项，这个必须设置，否则编译好后会出现一个HashTable的NPE错</span><br><span class="line">export LANG&#x3D;C</span><br><span class="line"></span><br><span class="line">#Bootstrap JDK的安装路径。必须设置。 </span><br><span class="line">export ALT_BOOTDIR&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.7.0_04</span><br><span class="line"></span><br><span class="line">#允许自动下载依赖</span><br><span class="line">export ALLOW_DOWNLOADS&#x3D;true</span><br><span class="line"></span><br><span class="line">#并行编译的线程数，设置为和CPU内核数量一致即可</span><br><span class="line">export HOTSPOT_BUILD_JOBS&#x3D;4</span><br><span class="line">export ALT_PARALLEL_COMPILE_JOBS&#x3D;4</span><br><span class="line"></span><br><span class="line">#比较本次build出来的映像与先前版本的差异。这个对我们来说没有意义，必须设置为false，否则sanity检查会报缺少先前版本JDK的映像。如果有设置dev或者DEV_ONLY&#x3D;true的话这个不显式设置也行。 </span><br><span class="line">export SKIP_COMPARE_IMAGES&#x3D;true</span><br><span class="line"></span><br><span class="line">#使用预编译头文件，不加这个编译会更慢一些</span><br><span class="line">export USE_PRECOMPILED_HEADER&#x3D;true</span><br><span class="line"></span><br><span class="line">#要编译的内容</span><br><span class="line">export BUILD_LANGTOOLS&#x3D;true </span><br><span class="line">#export BUILD_JAXP&#x3D;false</span><br><span class="line">#export BUILD_JAXWS&#x3D;false </span><br><span class="line">#export BUILD_CORBA&#x3D;false</span><br><span class="line">export BUILD_HOTSPOT&#x3D;true </span><br><span class="line">export BUILD_JDK&#x3D;true</span><br><span class="line"></span><br><span class="line">#要编译的版本</span><br><span class="line">#export SKIP_DEBUG_BUILD&#x3D;false</span><br><span class="line">#export SKIP_FASTDEBUG_BUILD&#x3D;true</span><br><span class="line">#export DEBUG_NAME&#x3D;debug</span><br><span class="line"></span><br><span class="line">#把它设置为false可以避开javaws和浏览器Java插件之类的部分的build。 </span><br><span class="line">BUILD_DEPLOY&#x3D;false</span><br><span class="line"></span><br><span class="line">#把它设置为false就不会build出安装包。因为安装包里有些奇怪的依赖，但即便不build出它也已经能得到完整的JDK映像，所以还是别build它好了。</span><br><span class="line">BUILD_INSTALL&#x3D;false</span><br><span class="line"></span><br><span class="line">#这两个环境变量必须去掉，不然会有很诡异的事情发生（我没有具体查过这些“”诡异的事情”，Makefile脚本检查到有这2个变量就会提示警告“）</span><br><span class="line">unset JAVA_HOME</span><br><span class="line">unset CLASSPATH</span><br><span class="line"></span><br><span class="line">make 2&gt;&amp;1 | tee $ALT_OUTPUTDIR&#x2F;build.log</span><br></pre></td></tr></table></figure>

<h3 id="个人版本"><a href="#个人版本" class="headerlink" title="个人版本:"></a>个人版本:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANG&#x3D;C</span><br><span class="line">export ALT_BOOTDIR&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;jdk1.7</span><br><span class="line">export ALLOW_DOWNLOADS&#x3D;true</span><br><span class="line">export HOTSPOT_BUILD_JOBDS&#x3D;1</span><br><span class="line">export ALT_PARALLEL_COMPILE_JOBS&#x3D;1</span><br><span class="line">export SKIP_COMPARE_IMAGES&#x3D;true</span><br><span class="line">export USE_PRECOMPLIED_HEADER&#x3D;true</span><br><span class="line">export BUILD_LANGTOOLS&#x3D;true</span><br><span class="line">export BUILD_JAXP&#x3D;false</span><br><span class="line">export BUILD_JAXWS&#x3D;false</span><br><span class="line">export BUILD_CORBA&#x3D;false</span><br><span class="line">export BUILD_HOTSPOT&#x3D;true</span><br><span class="line">export BUILD_JDK&#x3D;true</span><br><span class="line"></span><br><span class="line">export SKIP_DEBUG_BUILD&#x3D;false</span><br><span class="line">export SKIP_FASTDEBUG_BUILD&#x3D;true</span><br><span class="line">export DEBUG_NAME&#x3D;debug</span><br><span class="line"></span><br><span class="line">BUILD_DEPLOY&#x3D;false</span><br><span class="line">BUILD_INSTALL&#x3D;false</span><br><span class="line"></span><br><span class="line">unset JAVA_HOME</span><br><span class="line">unset CLASSPATH</span><br><span class="line"></span><br><span class="line">make 2&gt;&amp;1 | tee &#x2F;usr&#x2F;local&#x2F;software&#x2F;build.log</span><br></pre></td></tr></table></figure>

<h2 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h2><ul>
<li><p>使用上一节写好的脚本</p>
</li>
<li><p>运行下面的命令</p>
<ul>
<li><code>chmod +x run.sh</code></li>
<li><code>./run.sh</code></li>
</ul>
</li>
<li><p>经过多次尝试，现在出现如下报错：</p>
<p><code>g++: internal compiler error: Killed (program cc1plus)</code></p>
</li>
<li><p>处理方式</p>
<ul>
<li>内存不足，需要扩充内存</li>
</ul>
</li>
</ul>
<h2 id="问题收集："><a href="#问题收集：" class="headerlink" title="问题收集："></a>问题收集：</h2><h3 id="1-编译过程突然报错，报错信息如下"><a href="#1-编译过程突然报错，报错信息如下" class="headerlink" title="1. 编译过程突然报错，报错信息如下"></a>1. 编译过程突然报错，报错信息如下</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g++: internal compiler error: Killed (program cc1plus)</span><br><span class="line">Please submit a full bug report,</span><br><span class="line">with preprocessed source if appropriate.</span><br><span class="line">See &lt;http:&#x2F;&#x2F;bugzilla.redhat.com&#x2F;bugzilla&gt; for instructions.</span><br><span class="line">make[7]: *** [ad_x86_64.o] Error 4</span><br><span class="line">make[7]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;build&#x2F;linux-amd64-debug&#x2F;hotspot&#x2F;outputdir&#x2F;linux_amd64_compiler2&#x2F;jvmg&#39;</span><br><span class="line">make[6]: *** [the_vm] Error 2</span><br><span class="line">make[6]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;build&#x2F;linux-amd64-debug&#x2F;hotspot&#x2F;outputdir&#x2F;linux_amd64_compiler2&#x2F;jvmg&#39;</span><br><span class="line">make[5]: *** [jvmg] Error 2</span><br><span class="line">make[5]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;build&#x2F;linux-amd64-debug&#x2F;hotspot&#x2F;outputdir&#39;</span><br><span class="line">make[4]: *** [generic_build2] Error 2</span><br><span class="line">make[4]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;hotspot&#x2F;make&#39;</span><br><span class="line">make[3]: *** [jvmg] Error 2</span><br><span class="line">make[3]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;hotspot&#x2F;make&#39;</span><br><span class="line">make[2]: *** [hotspot-build] Error 2</span><br><span class="line">make[2]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#39;</span><br><span class="line">make[1]: *** [generic_debug_build] Error 2</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#39;</span><br><span class="line">make: *** [build_debug_image] Error 2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分析原因：</p>
<ol>
<li>可能是阿里云买的最低配，导致编译的时候内存爆了</li>
<li>Bootstrap JDK版本和书本的不一致，尝试按照书本一模一样的方式处理</li>
<li>脚本建议手敲，复制黏贴容易错误</li>
</ol>
</blockquote>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://blog.csdn.net/zitong_ccnu/article/details/50149757" target="_blank" rel="noopener">https://blog.csdn.net/zitong_ccnu/article/details/50149757</a> CenterOS7 编译OpenJDK7</p>
<p><a href="https://www.bbsmax.com/A/GBJrKLa50e/" target="_blank" rel="noopener">https://www.bbsmax.com/A/GBJrKLa50e/</a> 案例2</p>
<p><a href="https://hllvm-group.iteye.com/group/topic/35803" target="_blank" rel="noopener">https://hllvm-group.iteye.com/group/topic/35803</a> JVM的一些讨论，值得看看</p>
<h1 id="处理问题的几个套路"><a href="#处理问题的几个套路" class="headerlink" title="处理问题的几个套路"></a>处理问题的几个套路</h1><h2 id="套路一：缺少依赖，却不知道安装的具体内容"><a href="#套路一：缺少依赖，却不知道安装的具体内容" class="headerlink" title="套路一：缺少依赖，却不知道安装的具体内容"></a>套路一：缺少依赖，却不知道安装的具体内容</h2><p>当提示缺少依赖，而你不知道要<code>yum install</code>什么时，你可以根据提示关键字搜一下<code>yum search</code>，然后在搜出的结果列表中，对有着相同前缀的依赖使用后缀通配符一键下载</p>
]]></content>
  </entry>
  <entry>
    <title>Maven私服Nexus搭建教程</title>
    <url>/2020/07/26/Maven%E7%A7%81%E6%9C%8DNexus%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Nexus-私服搭建基本流程"><a href="#Nexus-私服搭建基本流程" class="headerlink" title="Nexus 私服搭建基本流程"></a>Nexus 私服搭建基本流程</h1><h2 id="Nexus-是什么？"><a href="#Nexus-是什么？" class="headerlink" title="Nexus 是什么？"></a>Nexus 是什么？</h2><p>用于实现Maven构建私人仓库的一个工具。</p>
<p>可以使用nexus 统一管理我们到依赖，不再需要再从中央仓库下载对应的jar包</p>
<a id="more"></a>

<h2 id="什么是Nexus-私服？"><a href="#什么是Nexus-私服？" class="headerlink" title="什么是Nexus 私服？"></a>什么是Nexus 私服？</h2><p>私服是在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。有了私服之后，当 Maven 需要下载jar包时，先请求私服，私服上如果存在则下载到本地仓库。否则，私服直接请求外部的远程仓库，将jar包下载到私服，再提供给本地仓库下载。</p>
<h2 id="maven的依赖管理"><a href="#maven的依赖管理" class="headerlink" title="maven的依赖管理"></a>maven的依赖管理</h2><p><strong>简介：依赖是maven最为用户熟知的特性之一，单个项目的依赖管理并不难，但是要管理几个或者几十个模块的时，那这个依赖应该怎么管理</strong></p>
<ul>
<li><p>依赖的传递性</p>
<ul>
<li>传递性依赖是在maven2中添加的新特征，这个特征的作用就是你不需要考虑你依赖的库文件所需要依赖的库文件，能够将依赖模块的依赖自动的引入。</li>
</ul>
</li>
<li><p>依赖的作用范围</p>
<ul>
<li><p>compile</p>
<ul>
<li>这是默认范围，编译依赖对项目所有的classpath都可用。此外，编译依赖会传递到依赖的项目</li>
</ul>
</li>
<li><p>provided</p>
<ul>
<li>表示该依赖项将由JDK或者运行容器在运行时提供，也就是说由Maven提供的该依赖项我们只有在编译和测试时才会用到，而在运行时将由JDK或者运行容器提供。</li>
</ul>
</li>
<li><p>runtime</p>
<ul>
<li>表明编译时不需要依赖，而只在运行时依赖</li>
</ul>
</li>
<li><p>test</p>
<ul>
<li>只在编译测试代码和运行测试的时候需要，应用的正常运行不需要此类依赖。</li>
</ul>
</li>
<li><p>system</p>
<ul>
<li><p>系统范围与provided类似，不过你必须显式指定一个本地系统路径的JAR，此类依赖应该一直有效，Maven也不会去仓库中寻找它。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;project&gt;  </span><br><span class="line">  ...  </span><br><span class="line">  &lt;dependencies&gt;  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">      &lt;groupId&gt;sun.jdk&lt;&#x2F;groupId&gt;  </span><br><span class="line">      &lt;artifactId&gt;tools&lt;&#x2F;artifactId&gt;  </span><br><span class="line">      &lt;version&gt;1.5.0&lt;&#x2F;version&gt;  </span><br><span class="line">      &lt;scope&gt;system&lt;&#x2F;scope&gt;  </span><br><span class="line">      &lt;systemPath&gt;$&#123;java.home&#125;&#x2F;..&#x2F;lib&#x2F;tools.jar&lt;&#x2F;systemPath&gt;  </span><br><span class="line">    &lt;&#x2F;dependency&gt;  </span><br><span class="line">  &lt;&#x2F;dependencies&gt;  </span><br><span class="line">  ...  </span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>import</p>
<ul>
<li>范围只适用于<dependencyManagement>部分。表明指定的POM必须使用<dependencyManagement>部分的依赖。因为依赖已经被替换，所以使用import范围的依赖并不影响依赖传递。</li>
</ul>
</li>
<li><p>依赖的两大原则</p>
<ul>
<li><p>路径近者优先</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A &gt; B &gt; C-1.0</span><br><span class="line">A &gt; C-2.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>第一声明优先</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A &gt; B &gt; D-1.0</span><br><span class="line">A &gt; C &gt; D-2.0</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>依赖的管理</p>
<ul>
<li>依赖排除<ul>
<li>任何可传递的依赖都可以通过 “exclusion” 元素被排除在外。举例说明，A 依赖 B， B 依赖 C，因此 A 可以标记 C 为 “被排除的”</li>
</ul>
</li>
<li>依赖可选<ul>
<li>任何可传递的依赖可以被标记为可选的，通过使用 “optional” 元素。例如：A 依赖 B， B 依赖 C。因此，B 可以标记 C 为可选的， 这样 A 就可以不再使用 C。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="如何解决jar包冲突"><a href="#如何解决jar包冲突" class="headerlink" title="如何解决jar包冲突"></a>如何解决jar包冲突</h2><p><strong>简介：当出现jar包冲突时，我们应该如何快速定位和处理jar包冲突问题</strong></p>
<ul>
<li>命令: <code>mvn dependency:tree -Dverbose</code></li>
</ul>
<h2 id="Nexus私服的秘密花园"><a href="#Nexus私服的秘密花园" class="headerlink" title="Nexus私服的秘密花园"></a>Nexus私服的秘密花园</h2><p>简介：介绍nexus服务器预置的仓库</p>
<ul>
<li>类型介绍<ul>
<li>hosted：是本地仓库，用户可以把自己的一些jar包，发布到hosted中，比如公司的第二方库</li>
<li>proxy，代理仓库，它们被用来代理远程的公共仓库，如maven中央仓库。不允许用户自己上传jar包，只能从中央仓库下载</li>
<li>group，仓库组，用来合并多个hosted/proxy仓库，当你的项目希望在多个repository使用资源时就不需要多次引用了，只需要引用一个group即可</li>
<li>virtual，虚拟仓库基本废弃了。</li>
</ul>
</li>
<li>预置仓库<ul>
<li>Central：该仓库代理Maven中央仓库，其策略为Release，因此只会下载和缓存中央仓库中的发布版本构件。</li>
<li>Releases：这是一个策略为Release的宿主类型仓库，用来部署正式发布版本构件</li>
<li>Snapshots：这是一个策略为Snapshot的宿主类型仓库，用来部署开发版本构件。</li>
<li>3rd party：这是一个策略为Release的宿主类型仓库，用来部署无法从maven中央仓库获得的第三方发布版本构件，比如IBM或者oracle的一些jar包（比如classe12.jar），由于受到商业版权的限制，不允许在中央仓库出现，如果想让这些包在私服上进行管理，就需要第三方的仓库。</li>
<li>Public Repositories：一个组合仓库</li>
</ul>
</li>
</ul>
<h2 id="Nexus-下载地址"><a href="#Nexus-下载地址" class="headerlink" title="Nexus 下载地址"></a>Nexus 下载地址</h2><p><a href="https://www.sonatype.com/nexus-repository-oss" target="_blank" rel="noopener">Nexus 官方网站</a></p>
<p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/jiuhe/20200318141611.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="搭建Maven-Nexus"><a href="#搭建Maven-Nexus" class="headerlink" title="搭建Maven Nexus"></a>搭建Maven Nexus</h3><ol>
<li>进入 <a href="https://www.sonatype.com/nexus-repository-oss" target="_blank" rel="noopener">Nexus 官方网站</a></li>
<li>在首页选择 <code>“GET PREPOSITORY OSS”</code></li>
<li>页面拉倒最下面，点击<code>OSS2</code></li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200327201355.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>由于Maven Nexus 是收费的，这里我们需要使用免费的版本</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200327201558.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>下载之后，会得到如下内容</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200328234944.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>此时调出 <code>cmd</code>, 进入目录<code>D:\java\Nexus\nexus-latest-bundle\nexus-2.14.15-01\bin</code></li>
<li>运行 <code>nexus.bat start</code>，可以发现会<code>拒绝访问</code></li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200328235057.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>使用管理员模式运行<ul>
<li>运行 <code>nexus.bat install</code> 安装</li>
<li><code>nexus.bat start</code> 启动服务</li>
</ul>
</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329170837.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>访问 <a href="http://localhost:8081/nexus进入到nexus" target="_blank" rel="noopener">http://localhost:8081/nexus进入到nexus</a> 页面</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329002328.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>进入主页</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329164131.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h3 id="建立第一个个人仓库"><a href="#建立第一个个人仓库" class="headerlink" title="建立第一个个人仓库"></a>建立第一个个人仓库</h3><ol>
<li>完成上一节内容之后，进入主页面，点击右上角<code>Log In</code> 登陆系统</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329165902.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>Nexus 默认到用户名称和密码为 <code>admin</code> 以及 <code>admin123</code>，输入账户名和密码之后登陆系统</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329170010.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>登陆之后会发现界面发生了改变，因为此时我们拥有了对应到权限</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329170040.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>点击 <code>add</code>，选择 <code>Hosted Repository</code> 改含义会在后面进行解释</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329170809.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>如图所示，基本上只需要填写很少到内容，就可以完成一个仓库到创建，点击下方到<code>save</code>按钮即可创建一个仓库</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329170521.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>查看配置,可以看到改仓库被放到了一个默认的地址里面</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329171028.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h3 id="将Jar包项目加入到个人仓库"><a href="#将Jar包项目加入到个人仓库" class="headerlink" title="将Jar包项目加入到个人仓库"></a>将Jar包项目加入到个人仓库</h3><p>这里以一个自己的项目作为测试</p>
<p>Maven依赖如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.smart4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;smart-framwork&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>我们需要先登录Maven Nexus，具备管理员的权限，然后点击<code>3rd party</code>(三方依赖)，截图内容如下</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405114219.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>依照截图填入如下的依赖</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405114639.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<blockquote>
<p>GAV Definition: 定义GAV</p>
<p>Auto Guess：自动猜测</p>
<p>Group：同Maven 到 group定义</p>
<p>Artifact：同Maven 到 Artifact定义</p>
<p>Version：版本号</p>
<p>Packaging：打包方式</p>
<p>下方需要上传依赖对应到jar包</p>
</blockquote>
<p>上传之后需要添加到maven Nexus</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405115034.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405115136.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>等待上传，上传成功之后会给予对应到提示信息</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405115216.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>上传完成之后，我们可以点击<code>Browse Index</code>看到自己之前上传的依赖</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405115356.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<blockquote>
<p>默认情况下我们到公共访问地址如下：</p>
<p><a href="http://localhost:8081/nexus/content/groups/public" target="_blank" rel="noopener">http://localhost:8081/nexus/content/groups/public</a> 公共仓库的访问地址</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405115744.png?ynotemdtimestamp=1595729096959" alt="img"></p>
</blockquote>
<h3 id="将个人仓库的jar包添加到项目当中"><a href="#将个人仓库的jar包添加到项目当中" class="headerlink" title="将个人仓库的jar包添加到项目当中"></a>将个人仓库的jar包添加到项目当中</h3><p>把jar包添加到nexus之后，我们可以尝试让nexus来管理我们到项目依赖了</p>
<p>接下来介绍如何使用maven nexus 来关联我们到依赖</p>
<ol>
<li>我们需要建立一个存在pom文件的项目，把对应到pom依赖引入</li>
</ol>
<blockquote>
<p>注意：事先查看nexus公有仓库是否存在依赖</p>
</blockquote>
<ol>
<li>在Maven 的 <code>conf</code> 下面增加配置，以个人为例进入<code>D:\java\apach\apache-maven-3.6.0\conf</code>，修改<code>setting.xml</code>,添加如下内容</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 添加 nexus 访问权限 --&gt;</span><br><span class="line">&lt;servers&gt;	</span><br><span class="line">	&lt;server&gt;</span><br><span class="line">	  &lt;id&gt;xdclass&lt;&#x2F;id&gt;</span><br><span class="line">	  &lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">	  &lt;password&gt;admin123&lt;&#x2F;password&gt;	</span><br><span class="line">	&lt;&#x2F;server&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;servers&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;mirrors&gt;</span><br><span class="line">	&lt;!-- 自定义 nexus --&gt;</span><br><span class="line">	 &lt;mirror&gt;</span><br><span class="line">        &lt;id&gt;xdclass&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;mirrorOf&gt;nexus,central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">		&lt;name&gt;local nexus&lt;&#x2F;name&gt;  </span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">	&lt;!-- 阿里云配置 --&gt;</span><br><span class="line">	&lt;mirror&gt;  </span><br><span class="line">      &lt;id&gt;alimaven&lt;&#x2F;id&gt;  </span><br><span class="line">      &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;  </span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;  </span><br><span class="line">      &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;          </span><br><span class="line">	&lt;&#x2F;mirror&gt;  </span><br><span class="line">	</span><br><span class="line">&lt;&#x2F;mirrors&gt;</span><br><span class="line">&lt;profiles&gt;</span><br><span class="line">	&lt;profile&gt;</span><br><span class="line">        &lt;id&gt;xd&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;repositories&gt;</span><br><span class="line">            &lt;repository&gt;</span><br><span class="line">                &lt;id&gt;local-nexus&lt;&#x2F;id&gt;</span><br><span class="line">                &lt;!-- 本地仓库路径 --&gt;</span><br><span class="line">                &lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">                &lt;releases&gt;</span><br><span class="line">                    &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">                &lt;&#x2F;releases&gt;</span><br><span class="line">                &lt;!-- 开启快照 --&gt;</span><br><span class="line">                &lt;snapshots&gt;</span><br><span class="line">                    &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">                &lt;&#x2F;snapshots&gt;</span><br><span class="line">            &lt;&#x2F;repository&gt;</span><br><span class="line">        &lt;&#x2F;repositories&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br><span class="line">&lt;&#x2F;profiles&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 需要 开启 Profile 配置 --&gt;</span><br><span class="line">&lt;activeProfiles&gt;</span><br><span class="line">    &lt;activeProfile&gt;xd&lt;&#x2F;activeProfile&gt;</span><br><span class="line">&lt;&#x2F;activeProfiles&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>在IDEA中重新导入依赖</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405142135.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h3 id="将个人到Maven项目发布到Nexus管理"><a href="#将个人到Maven项目发布到Nexus管理" class="headerlink" title="将个人到Maven项目发布到Nexus管理"></a>将个人到Maven项目发布到Nexus管理</h3><p>本节介绍如何把自己的项目发布到nexus ，这里单独开了一个仓库进行配置</p>
<p>在进行本节内容之前，查看Maven 到 <code>setting.xml</code>内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 用于发布正式版本 --&gt;</span><br><span class="line">&lt;server&gt;</span><br><span class="line">    &lt;id&gt;public&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">    &lt;password&gt;admin123&lt;&#x2F;password&gt;	</span><br><span class="line">&lt;&#x2F;server&gt;</span><br><span class="line">&lt;!-- 测试 --&gt;</span><br><span class="line">&lt;server&gt;</span><br><span class="line">    &lt;id&gt;lazytime&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">    &lt;password&gt;admin123&lt;&#x2F;password&gt;	</span><br><span class="line">&lt;&#x2F;server&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>在需要发布源代码到mavne项目<code>pom.xml</code>添加如下内容</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">       &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br><span class="line">           &lt;plugins&gt;</span><br><span class="line">               &lt;!-- clean lifecycle, see https:&#x2F;&#x2F;maven.apache.org&#x2F;ref&#x2F;current&#x2F;maven-core&#x2F;lifecycles.html#clean_Lifecycle --&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-clean-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;3.1.0&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;!-- default lifecycle, jar packaging: see https:&#x2F;&#x2F;maven.apache.org&#x2F;ref&#x2F;current&#x2F;maven-core&#x2F;default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-resources-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;3.0.2&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;3.8.0&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-surefire-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;2.22.1&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-jar-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;3.0.2&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-install-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;2.5.2&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-deploy-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;2.8.2&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;!-- site lifecycle, see https:&#x2F;&#x2F;maven.apache.org&#x2F;ref&#x2F;current&#x2F;maven-core&#x2F;lifecycles.html#site_Lifecycle --&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-site-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;3.7.1&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line"></span><br><span class="line">           &lt;&#x2F;plugins&gt;</span><br><span class="line">       &lt;&#x2F;pluginManagement&gt;</span><br><span class="line">   &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;distributionManagement&gt;</span><br><span class="line">       &lt;repository&gt;</span><br><span class="line">           &lt;!-- 此id 必须对应setting 里面到 server id 否则会没有权限无法部署 --&gt;</span><br><span class="line">           &lt;id&gt;public&lt;&#x2F;id&gt;</span><br><span class="line">           &lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;lazytime&lt;&#x2F;url&gt;</span><br><span class="line">       &lt;&#x2F;repository&gt;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;distributionManagement&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>以IDEA为例，<code>deloyer</code> 项目到 <code>maven Nexus</code></li>
</ol>
<p>运行<code>Maven Deloy</code>发布项目到nexus</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405162751.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>查看<code>Maven Nexus</code> ，查看发布的项目内容</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405162923.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<blockquote>
<p>如果不能发布，请查看仓库是否允许重新部署:</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405164619.png?ynotemdtimestamp=1595729096959" alt="img"></p>
</blockquote>
<h3 id="使用Snapshots-快照快捷管理项目迭代"><a href="#使用Snapshots-快照快捷管理项目迭代" class="headerlink" title="使用Snapshots 快照快捷管理项目迭代"></a>使用Snapshots 快照快捷管理项目迭代</h3><p>使用上一节办法存在很大到缺点：</p>
<ol>
<li>每次改动源代码就需要发布一个新版本，使用者就需要更新pom文件到项目版本号，或者本地仓库删掉旧依赖，重新引入依赖，这样非常麻烦</li>
<li>每次更新项目都需要通知使用者更新版本号</li>
</ol>
<p>如何解决如上问题呢？</p>
<p>那么我们就需要使用<code>快照</code>，快照相当于项目到一个副本，我们可以在开发到时候使用快照，发布到时候在使用正式到版本号进行处理，使nexus的管理更加方便</p>
<ol>
<li>打开maven nexus 主页，登陆管理员账户，查看如下内容</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405164857.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>在<code>Maven</code> 的<code>setting</code>文件当中添加如下内容，加入到对应的账号</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;server&gt;</span><br><span class="line">		&lt;id&gt;snapshots&lt;&#x2F;id&gt;</span><br><span class="line">		&lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">		&lt;password&gt;admin123&lt;&#x2F;password&gt;	</span><br><span class="line">	&lt;&#x2F;server&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>修改项目版本号，一定要依照maven到 <code>snaphoto</code> 规则，否则部署快照版本会失败</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">&lt;groupId&gt;org.smart4j&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;smart-framwork&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;!-- 写法一定要规范 --&gt;</span><br><span class="line">&lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>执行<code>maven deloy</code> 部署配置</li>
</ol>
<p>注意待发布项目的<code>pom.xml</code>配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">        &lt;snapshotRepository&gt;</span><br><span class="line">            &lt;id&gt;snapshots&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;snapshots&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;snapshotRepository&gt;</span><br><span class="line">    &lt;&#x2F;distributionManagement&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405170455.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>查看<code>Maven Nexus</code>是否发布成功</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405170339.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<blockquote>
<p>再次强调，如果部署失败，请查看仓库是否允许重复部署</p>
</blockquote>
<ol>
<li>接下来我们试下快照是如何解决版本迭代的问题的</li>
</ol>
<p>由于使用了快照版本，需要更改依赖如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.smart4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;smart-framwork&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>我们添加了一个main方法，然后点击IDEA <code>deploy</code>，部署快照版本的项目</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405201713.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>我们在引用到项目里面可以看到项目已经引用到了本地当中</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405202232.png?ynotemdtimestamp=1595729096959" alt="img"></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo和码云实现自建图床</title>
    <url>/2020/07/26/PicGo%E5%92%8C%E7%A0%81%E4%BA%91%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="PicGo和码云实现自建图床"><a href="#PicGo和码云实现自建图床" class="headerlink" title="PicGo和码云实现自建图床"></a>PicGo和码云实现自建图床</h1><h2 id="最好的教程"><a href="#最好的教程" class="headerlink" title="最好的教程"></a>最好的教程</h2><p>知乎的一篇教程：<a href="https://zhuanlan.zhihu.com/p/102594554" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/102594554</a></p>
<h2 id="测试图床链接："><a href="#测试图床链接：" class="headerlink" title="测试图床链接："></a>测试图床链接：</h2><p>链接1 ：</p>
<p><a href="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200318234353.png" target="_blank" rel="noopener">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200318234353.png</a></p>
<p>链接2：</p>
<p><a href="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200318234621.png" target="_blank" rel="noopener">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200318234621.png</a></p>
<p>链接3：</p>
<p><a href="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319094133.png" target="_blank" rel="noopener">https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319094133.png</a></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200318234353.png?ynotemdtimestamp=1595729096959" alt="最终结果1"></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200318234621.png?ynotemdtimestamp=1595729096959" alt="最终结果2"></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319094133.png?ynotemdtimestamp=1595729096959" alt="最终结果3"></p>
<a id="more"></a>

<h2 id="为什么要使用码云代替图床"><a href="#为什么要使用码云代替图床" class="headerlink" title="为什么要使用码云代替图床"></a>为什么要使用码云代替图床</h2><ul>
<li>github毕竟是外国服务器，上传过程中因为网络问题有可能会无法使用的情况</li>
<li>码云作为国内的“github”，访问和上传速度更快，所以使用码云更为方便</li>
<li>目前<code>PicGo 2.0</code>之后已经有人集成了插件，使用和github一样简单好用</li>
</ul>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h3 id="1-下载PicGo"><a href="#1-下载PicGo" class="headerlink" title="1. 下载PicGo"></a>1. 下载PicGo</h3><p>官网地址：<a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">https://molunerfinn.com/PicGo/</a></p>
<p>Github 快捷网址：<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.2.2" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases/tag/v2.2.2</a> 选择对应的版本下载即可</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319131933.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>更多信息访问Github：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></p>
<h3 id="2-安装PicGo"><a href="#2-安装PicGo" class="headerlink" title="2. 安装PicGo"></a>2. 安装PicGo</h3><p>安装过程就忽略了，安装完成之后打开软件</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319132027.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h3 id="3-PicGo-安装gitee-插件"><a href="#3-PicGo-安装gitee-插件" class="headerlink" title="3. PicGo 安装gitee 插件"></a>3. PicGo 安装gitee 插件</h3><p>前提条件：<strong>注意PicGo安装的前提条件是2.0版本之后新增的插件功能！！！</strong></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319132225.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>将鼠标滚轮滚到最下面，会发现有一个插件设置</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319132358.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>选择安装 <code>gitee-uploader 1.1.2</code>这个插件</p>
<blockquote>
<p><strong>安装失败如何解决</strong>？</p>
<p>注意该插件需要node.js 的环境，Node.js的安装如下</p>
<p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p>
<p>进入中文官网之后，安装对应的版本即可</p>
<p>window 下面的exe程序安装之后会自动的配置环境变量，这时候我们可以使用命令查一下是否有Node环境</p>
<ol>
<li>win 键 + R 打开<strong>运行</strong>窗口</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319132719.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>输入命令<code>node -v</code></li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319132750.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>如果出现如上所示的内容则证明安装成功</li>
</ol>
</blockquote>
<h3 id="4-码云搭建图床仓库"><a href="#4-码云搭建图床仓库" class="headerlink" title="4. 码云搭建图床仓库"></a>4. 码云搭建图床仓库</h3><ol>
<li>进入自己的码云：<a href="https://gitee.com/lazyTimes/projects" target="_blank" rel="noopener">https://gitee.com/lazyTimes/projects</a> 这是我的码云地址</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319133220.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>选择右上角有一个 <code>&quot;+&quot;</code>号，选择新建仓库</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319133327.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>填写基本信息，页面翻到最下面，选择保存</li>
</ol>
<p><img src="http://null/" alt="image-20200319133550209"></p>
<ol>
<li>新建仓库成功</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319133836.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h3 id="5-获取gitee私人令牌"><a href="#5-获取gitee私人令牌" class="headerlink" title="5. 获取gitee私人令牌"></a>5. 获取gitee私人令牌</h3><p>和github一样，在最终设置之前我们需要获取一下gitee令牌用于上传</p>
<ol>
<li>登录gitee之后，右上角选择</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200319214555.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>选择“私人令牌”</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200319214625.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>选择“生成令牌”，进入到令牌到创建页面</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200319214721.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>勾选如图到内容，一般只需要用到前面几项就可以满足我们到需求。按要求输入密码即可生成成功</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200319214905.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>生成令牌成功，将令牌内容保存在自己到笔记，防止忘记</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200319215102.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>经过如上步骤之后，我们基本就算是大功告成了，现在只需要在PicGo里面配置一下即可</p>
<h3 id="6-PicGo-配置"><a href="#6-PicGo-配置" class="headerlink" title="6. PicGo 配置"></a>6. PicGo 配置</h3><ul>
<li>repo：必填，填写gitee上面的仓库名称</li>
<li>branch：一般默认master 即可，有需要可以建立自己到分支</li>
<li>tolken：要用到上一节所述到私人令牌，如果忘记了可以进入页面之后重新获取一下新令牌</li>
<li>path：写上文件存放到位置，一般写上<code>img</code>即可</li>
<li>customPath：定义传输到格式，一般可以不用管</li>
<li>customUrl：自定义上传到链接</li>
</ul>
<blockquote>
<p>不知道怎么获取repo地址？</p>
<ol>
<li>进入自己到图床仓库到主页，复制地址栏到内容</li>
<li>复制下方到用户和项目名称</li>
</ol>
<p><strong>注意中间到内容不要存在空格，删除注意不要多删除字符造成上传失败</strong></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200319215400.png?ynotemdtimestamp=1595729096959" alt="img"></p>
</blockquote>
<p>最终到配置结果如下所示</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319131435.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由于github存在限制加上外网访问普遍较慢到问题，如果网速不给力并且没有科学上网工具建议使用gitee作为图形仓库。可以在1S内上传，非常方便。赶紧把gitee用起来把</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>PicGo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搭建思维导图以及使用</title>
    <url>/2020/07/26/Hexo-%E6%90%AD%E5%BB%BA%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Hexo-搭建思维导图以及使用"><a href="#Hexo-搭建思维导图以及使用" class="headerlink" title="Hexo 搭建思维导图以及使用"></a>Hexo 搭建思维导图以及使用</h1><h2 id="1-Hexo-如何搭建"><a href="#1-Hexo-如何搭建" class="headerlink" title="1. Hexo 如何搭建"></a>1. Hexo 如何搭建</h2><ul>
<li>详细查看Hexo学习博客：</li>
</ul>
<h2 id="2-选择："><a href="#2-选择：" class="headerlink" title="2. 选择："></a>2. 选择：</h2><ul>
<li>百度的kitmap<ul>
<li><a href="https://qsli.github.io/2017/01/01/markdown-mindmap/" target="_blank" rel="noopener">https://qsli.github.io/2017/01/01/markdown-mindmap/</a></li>
</ul>
</li>
<li><h2 id="Hexo-思维导图插件"><a href="#Hexo-思维导图插件" class="headerlink" title="Hexo 思维导图插件"></a>Hexo 思维导图插件</h2></li>
<li>为什么使用百度的kityminder<ul>
<li>使用简单</li>
<li>百度开发，使用国内插件</li>
</ul>
</li>
<li>使用hexo思维导图插件的原因<ul>
<li>简单好用</li>
</ul>
</li>
<li>什么是Kityminder<ul>
<li>分成两部分<ul>
<li>kity-core</li>
<li>kity-editor</li>
</ul>
</li>
</ul>
</li>
<li>如何学习kityminder<ul>
<li><a href="https://qsli.github.io/2017/01/01/markdown-mindmap/" target="_blank" rel="noopener">https://qsli.github.io/2017/01/01/markdown-mindmap/</a></li>
</ul>
</li>
<li>如何学习hexo 思维导图插件<ul>
<li><a href="https://zhuanlan.zhihu.com/p/75467441" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/75467441</a></li>
</ul>
</li>
</ul>
<h2 id="3-使用hexo-插件构建思维导图"><a href="#3-使用hexo-插件构建思维导图" class="headerlink" title="3. 使用hexo 插件构建思维导图"></a>3. 使用hexo 插件构建思维导图</h2><ul>
<li><p>跳转到hexo的目录下面，执行如下命令</p>
<ul>
<li><code>npm install hexo-simple-mindmap</code></li>
</ul>
</li>
<li><p>在博客内部加入如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote mindmap mindmap-md %&#125;</span><br><span class="line">[Hexo 的思维导图插件](https:&#x2F;&#x2F;hunterx.xyz&#x2F;hexo-simple-mindmap-plugin-intro.html)</span><br><span class="line">- 前言</span><br><span class="line">- 使用方法</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4-查看效果"><a href="#4-查看效果" class="headerlink" title="4. 查看效果"></a>4. 查看效果</h2><p>进入文章，即可渲染出对应的思维导图</p>
<h1 id="推荐其他的方式"><a href="#推荐其他的方式" class="headerlink" title="推荐其他的方式"></a>推荐其他的方式</h1><ul>
<li>使用xmind 话思维导图<ul>
<li>为什么？<ul>
<li>软件画图，可以一键生成图片</li>
<li>样式可以调整，不需要切换</li>
<li>简单好用，相对于Markdown编写更为直观</li>
</ul>
</li>
<li>怎么使用xmind<ul>
<li>百度搜索xmind 进入</li>
<li>推荐使用xmind 的升级版本</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Window 下面使用代办清单软件</title>
    <url>/2020/07/26/Window-%E4%B8%8B%E9%9D%A2%E4%BD%BF%E7%94%A8%E4%BB%A3%E5%8A%9E%E6%B8%85%E5%8D%95%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="windows-代办清单软件"><a href="#windows-代办清单软件" class="headerlink" title="windows 代办清单软件"></a>windows 代办清单软件</h1><h2 id="为什么要使用待办任务软件"><a href="#为什么要使用待办任务软件" class="headerlink" title="为什么要使用待办任务软件"></a>为什么要使用待办任务软件</h2><ul>
<li>人的记忆是靠不住的</li>
<li>琐事繁杂，列出清单能更好的</li>
</ul>
<h2 id="使用代办清单的好处"><a href="#使用代办清单的好处" class="headerlink" title="使用代办清单的好处"></a>使用代办清单的好处</h2><ul>
<li>理清思路</li>
<li>把事情拆分，一条条处理</li>
<li>今日事，今日毕</li>
<li>保持良好的时间管理习惯，防止懈怠</li>
<li>可以结合番茄工作法</li>
</ul>
<h2 id="怎么使用代办清单软件"><a href="#怎么使用代办清单软件" class="headerlink" title="怎么使用代办清单软件"></a>怎么使用代办清单软件</h2><ul>
<li><p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">奇妙清单</span><br></pre></td></tr></table></figure>

<ul>
<li>地址：<a href="https://www.wunderlist.com/" target="_blank" rel="noopener">https://www.wunderlist.com/</a></li>
<li>目前已经被收购</li>
</ul>
</li>
<li><p>微软的TODO List，实现简单</p>
<ul>
<li>地址：<a href="https://www.microsoft.com/zh-cn/p/microsoft-to-do-lists-tasks-reminders/9nblggh5r558?rtc=1&amp;activetab=pivot:overviewtab" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/p/microsoft-to-do-lists-tasks-reminders/9nblggh5r558?rtc=1&amp;activetab=pivot:overviewtab</a></li>
</ul>
</li>
<li><p>滴答清单</p>
<ul>
<li>地址：<a href="https://www.dida365.com/about/download" target="_blank" rel="noopener">https://www.dida365.com/about/download</a></li>
</ul>
</li>
</ul>
<h2 id="滴答清单的使用"><a href="#滴答清单的使用" class="headerlink" title="滴答清单的使用"></a>滴答清单的使用</h2><ul>
<li>使用对应的账号关联登陆，这里使用个人的微信账号</li>
<li>在左侧清单<ul>
<li>任务清单的名称</li>
</ul>
</li>
<li>在指定清单创建任务</li>
<li>选择每一条任务，设置优先级</li>
<li>右侧设置日期</li>
</ul>
]]></content>
      <categories>
        <category>待办任务</category>
      </categories>
      <tags>
        <tag>TODOs</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 打包的一些学习</title>
    <url>/2020/07/26/Springboot-%E6%89%93%E5%8C%85%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/u012702547/article/details/95180256" target="_blank" rel="noopener">https://blog.csdn.net/u012702547/article/details/95180256</a></p>
<p><a href="https://blog.csdn.net/weixin_38187317/article/details/82688906" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38187317/article/details/82688906</a></p>
<p>制作七牛-spring-boot-starter并上传中央仓库 <a href="https://blog.csdn.net/weixin_38187317/article/details/82723758" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38187317/article/details/82723758</a></p>
<blockquote>
<p>说明： 依照七牛云自己实现了一个springboot，已上传中央仓库 来源博客： <a href="https://blog.csdn.net/weixin_38187317/article/details/82688906" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38187317/article/details/82688906</a> 目的：学习一下如何springboot 引入另一个springboot 的service层，</p>
</blockquote>
<h1 id="Spring-Boot-打包成的可执行-jar-，为什么不能被其他项目依赖？"><a href="#Spring-Boot-打包成的可执行-jar-，为什么不能被其他项目依赖？" class="headerlink" title="Spring Boot 打包成的可执行 jar ，为什么不能被其他项目依赖？"></a>Spring Boot 打包成的可执行 jar ，为什么不能被其他项目依赖？</h1><p><a href="https://blog.csdn.net/u012702547/article/details/95180256" target="_blank" rel="noopener">https://blog.csdn.net/u012702547/article/details/95180256</a></p>
<blockquote>
<p>说明：这里解读了为什么不能使用springboot 的插件打包</p>
</blockquote>
<h1 id="SpringBoot-如何手动引入本地的jar包-并利用maven成功打包"><a href="#SpringBoot-如何手动引入本地的jar包-并利用maven成功打包" class="headerlink" title="SpringBoot 如何手动引入本地的jar包 并利用maven成功打包"></a>SpringBoot 如何手动引入本地的jar包 并利用maven成功打包</h1><ul>
<li>参考博客 <a href="https://www.javatt.com/p/84969" target="_blank" rel="noopener">https://www.javatt.com/p/84969</a></li>
<li>需要执行如下命令： <code>mvn install:install-file -Dfile=./qiniu-spring-boot-starter-0.2-RELEASE.jar -DgroupId=com.zxd -DartifactId=myquartz -Dversion=8 -Dpackaging=jar</code></li>
<li>Maven将自己的jar包引入本地库中 <a href="https://www.jianshu.com/p/cef1bc65584d" target="_blank" rel="noopener">https://www.jianshu.com/p/cef1bc65584d</a></li>
</ul>
<h1 id="Spring-Boot-制作一个自己的-Starter"><a href="#Spring-Boot-制作一个自己的-Starter" class="headerlink" title="Spring Boot 制作一个自己的 Starter"></a>Spring Boot 制作一个自己的 Starter</h1><p><a href="https://blog.csdn.net/wo18237095579/article/details/81197245#重点编写-autoconfigure-类" target="_blank" rel="noopener">https://blog.csdn.net/wo18237095579/article/details/81197245#重点编写-autoconfigure-类</a></p>
<h1 id="Springboot-打Jar包，Maven完美解决本地Jar包自动打入Springboot-Jar包中"><a href="#Springboot-打Jar包，Maven完美解决本地Jar包自动打入Springboot-Jar包中" class="headerlink" title="Springboot 打Jar包，Maven完美解决本地Jar包自动打入Springboot Jar包中"></a>Springboot 打Jar包，Maven完美解决本地Jar包自动打入Springboot Jar包中</h1><p><a href="https://www.sojson.com/blog/253.html" target="_blank" rel="noopener">https://www.sojson.com/blog/253.html</a></p>
<h1 id="Maven将自己的jar包引入本地库中"><a href="#Maven将自己的jar包引入本地库中" class="headerlink" title="Maven将自己的jar包引入本地库中"></a>Maven将自己的jar包引入本地库中</h1><p><a href="https://www.jianshu.com/p/cef1bc65584d" target="_blank" rel="noopener">https://www.jianshu.com/p/cef1bc65584d</a></p>
<p>#　制作SpringBoot的jar给其他项目使用需要注意的点 <a href="https://blog.csdn.net/weixin_38187317/article/details/82688906" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38187317/article/details/82688906</a></p>
]]></content>
      <categories>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据对比】综合分析百度情感分析以及华为情感分析的差异，我有了如下结果</title>
    <url>/2020/07/26/%E3%80%90%E6%95%B0%E6%8D%AE%E5%AF%B9%E6%AF%94%E3%80%91%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%E7%99%BE%E5%BA%A6%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E5%8D%8E%E4%B8%BA%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90%E7%9A%84%E5%B7%AE%E5%BC%82%EF%BC%8C%E6%88%91%E6%9C%89%E4%BA%86%E5%A6%82%E4%B8%8B%E7%BB%93%E6%9E%9C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>某一天，经理找到我，说BOSS需要情感分析对比的结果，我这边能不能研究一下几家情感分析的平台，按照（巴拉巴拉）的要求进行分析，于是就有了这篇文章……</p>
<h1 id="为什么要进行对比"><a href="#为什么要进行对比" class="headerlink" title="为什么要进行对比"></a>为什么要进行对比</h1><ol>
<li>公司任务</li>
<li>了解下情感分析</li>
<li>对比几家情感分析</li>
</ol>
<a id="more"></a>

<h1 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景:"></a><strong>业务场景:</strong></h1><p>​    爬虫截取微博网上留言信息，调用华为云的情感分析，百度云情感分析（通用接口），百度云情感分析（定制化模型，自定义学习资料）。根据以下几个点进行对比。</p>
<ul>
<li>未处理的原版数据<ul>
<li>通用模型- 原版分类置信度</li>
<li>定制模型 - 原版分类置信度 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>定制模型 - 原版分类置信度 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>原版评论分类置信度 （华为云 仅2000条左右数据）</li>
<li>通用模型- 原版评论负面倾向概率</li>
<li>定制模型 - 原版评论负面倾向概率 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>定制模型 - 原版评论负面倾向概率 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>通用模型- 原版评论正面倾向概率</li>
<li>使用定制模型 - 原版评论正面倾向概率 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>使用定制模型 - 原版评论正面倾向概率 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>通用模型- 原 版评论分析正负结果值</li>
<li>定制模型 - 原版评论分析正负结果值 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>定制模型 - 原版评论分析正负结果值 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>原版评论正负结果值 （华为云 仅2000条左右数据）</li>
</ul>
</li>
<li>处理掉@和#后的评论数据：<ul>
<li>通用模型- 原版分类置信度</li>
<li>定制模型 - 原版分类置信度 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>定制模型 - 原版分类置信度 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>原版评论分类置信度 （华为云 仅2000条左右数据）</li>
<li>通用模型- 原版评论负面倾向概率</li>
<li>定制模型 - 原版评论负面倾向概率 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>定制模型 - 原版评论负面倾向概率 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>通用模型- 原版评论正面倾向概率</li>
<li>使用定制模型 - 原版评论正面倾向概率 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>使用定制模型 - 原版评论正面倾向概率 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>通用模型- 原 版评论分析正负结果值</li>
<li>定制模型 - 原版评论分析正负结果值 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>定制模型 - 原版评论分析正负结果值 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>原版评论正负结果值 （华为云 仅2000条左右数据）</li>
</ul>
</li>
</ul>
<h1 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题:"></a><strong>解决的问题:</strong></h1><ol>
<li>对比了两家的情感分析之后，经过综合分析，<strong>百度云情感分析（通用模型</strong>）的准确率是最高的。</li>
<li>目前综合来看，百度云的情感分析通用模式是自然语言分析的最好选择。</li>
<li>定制化的百度模型实际测试不如通用模型准确（可能为学习模型数据不够准确）。</li>
</ol>
<h1 id="挑战"><a href="#挑战" class="headerlink" title="挑战:"></a><strong>挑战:</strong></h1><ol>
<li>首次使用华为云情感分析，对于接口调用方面自己阅读文档不够详细，走了较多的弯路，不过经过仔细研究自行解决。</li>
<li>由于存在QPS限制，调用的时候需要限制调用频率。</li>
<li>由于网络原因可能存在频繁调用的情况。</li>
<li>数据较多的情况下处理数据的时长比较久（针对试用而言）。</li>
<li>根据不同的定制化模型。</li>
<li>可能存在无法分析的特殊字符数据。</li>
</ol>
<h1 id="使用服务"><a href="#使用服务" class="headerlink" title="使用服务:"></a><strong>使用服务:</strong></h1><p>自然语言处理 - 情感分析</p>
<h1 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决:"></a><strong>如何解决:</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 在不超过**qps**限制的情况下，试用分页形式，分段请求，在数据库中设置 判断值判断数据是否进行分析，如果重复调用会直接过滤掉已经进行情感分析的数据。</span><br><span class="line">   2. 对于线程进行&#96;休眠&#96;操作，防止调用请求过于频繁接口调用失败。</span><br><span class="line">   3. 使用日志记录失败请求信息，失败请求原因，失败请求数据。</span><br><span class="line">   4. 多次调用数据确保大部分数据可以产生结果，个别数据请求失败以及没有数据的忽略。</span><br></pre></td></tr></table></figure>

<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a><strong>使用场景:</strong></h1><ol>
<li>比对市面上几家华为云的情感分析使用，根据分析结果数据进行比对。</li>
<li>对比百度云通用模型和定制化模型的使用。</li>
<li>对比不同的环境下分析的数据，数据差异值。</li>
</ol>
<h1 id="方案截图"><a href="#方案截图" class="headerlink" title="方案截图:"></a><strong>方案截图:</strong></h1><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200725102058.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>（处理掉特殊字符前的截图）</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200725102133.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>（处理掉特殊字符后的截图）</p>
<h1 id="使用规模"><a href="#使用规模" class="headerlink" title="使用规模:"></a><strong>使用规模:</strong></h1><p>共1000条数据左右。（其实总共有18000条数据）</p>
<h1 id="使用收益："><a href="#使用收益：" class="headerlink" title="使用收益："></a><strong>使用收益：</strong></h1><p>对比了百度情感分析和华为云的情感分析，对比结果比较显著，在情感分析的领域发现是百度云的使用情况较好。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>原数据报表有 18000条，如果有对情感分析感兴趣，或者想要了解情感分析对比结果的，可以留言邮箱，我会抽空把报表数据发送至您的邮箱</p>
<p>如果觉得对您有帮助欢迎扩散</p>
<h1 id="作者："><a href="#作者：" class="headerlink" title="作者："></a><strong>作者：</strong></h1><p>阿东</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>情感分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言学习笔记（一）</title>
    <url>/2020/07/26/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Go语言学习笔记（一）"><a href="#Go语言学习笔记（一）" class="headerlink" title="Go语言学习笔记（一）"></a>Go语言学习笔记（一）</h1><h2 id="Go语言是什么？"><a href="#Go语言是什么？" class="headerlink" title="Go语言是什么？"></a>Go语言是什么？</h2><p><em>Go 编程语言是一个使得程序员更加有效率的开源项目。Go 是有表达力、简洁、清晰和有效率的。它的并行机制使其很容易编写多核和网络应用,而新奇的类型系统允许构建有弹性的模块化程序。Go 编译到机器码非常快速,同时具有便利的垃圾回收和强大的运行时反射。它是快速的、静态类型编译语言,但是感觉上是动态类型的,解释型语言。</em></p>
<a id="more"></a>

<h2 id="GO能做什么？"><a href="#GO能做什么？" class="headerlink" title="GO能做什么？"></a>GO能做什么？</h2><p><a href="https://www.zhihu.com/question/57404512" target="_blank" rel="noopener">https://www.zhihu.com/question/57404512</a> 知乎回答</p>
<h2 id="为什么要学习Go"><a href="#为什么要学习Go" class="headerlink" title="为什么要学习Go?"></a>为什么要学习Go?</h2><p>客观原因：</p>
<ol>
<li>GO 可以非常高效的完成一些JAVA需要很多功夫完成的操作</li>
</ol>
<p>例如：</p>
<ul>
<li>管理日志</li>
<li>IO监控</li>
<li>生成模板代码</li>
</ul>
<ol>
<li>近两年GO诞生的框架越来越多，他的便捷性得到认可</li>
<li>技多不压身</li>
</ol>
<p>主管原因：</p>
<ol>
<li>想用GO完成一些工作上重复干的活儿</li>
<li>编写一些工具帮助日常开发</li>
</ol>
<h2 id="如何学习？"><a href="#如何学习？" class="headerlink" title="如何学习？"></a>如何学习？</h2><p><a href="https://www.zhihu.com/question/23486344" target="_blank" rel="noopener">https://www.zhihu.com/question/23486344</a> 知乎第二个</p>
<p><a href="https://tour.go-zh.org/list" target="_blank" rel="noopener">https://tour.go-zh.org/list</a> 快速入门（需要翻墙）</p>
<p><a href="https://mikespook.com/learning-go/" target="_blank" rel="noopener">https://mikespook.com/learning-go/</a> 《学习GO语言》中文版，不过出版比较早，最好自我实践</p>
<p><a href="https://gobyexample.com/" target="_blank" rel="noopener">https://gobyexample.com/</a> 一些基础的语代码</p>
<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="安装GO"><a href="#安装GO" class="headerlink" title="安装GO"></a>安装GO</h2><p>进入官网：<a href="https://golang.org/" target="_blank" rel="noopener">https://golang.org/</a></p>
<p>（因为不可抗力的原因，这个房子国内没法访问。。。也可能是我联通网的问题）</p>
<p>window下载地址（注意32位和64位的区别）：</p>
<p><a href="https://dl.google.com/go/go1.13.8.windows-amd64.msi" target="_blank" rel="noopener">https://dl.google.com/go/go1.13.8.windows-amd64.msi</a></p>
<p><a href="https://dl.google.com/go/go1.13.8.windows-386.msi" target="_blank" rel="noopener">https://dl.google.com/go/go1.13.8.windows-386.msi</a></p>
<p>Linux下载地址（注意32位和64位的区别）：</p>
<p><a href="https://dl.google.com/go/go1.13.8.src.tar.gz" target="_blank" rel="noopener">https://dl.google.com/go/go1.13.8.src.tar.gz</a></p>
<p><a href="https://dl.google.com/go/go1.13.8.darwin-amd64.tar.gz" target="_blank" rel="noopener">https://dl.google.com/go/go1.13.8.darwin-amd64.tar.gz</a></p>
<h2 id="Go语言的特点"><a href="#Go语言的特点" class="headerlink" title="Go语言的特点"></a>Go语言的特点</h2><blockquote>
<p>并行 Go 让函数很容易成为 非常 轻量的线程。这些线程在 Go 中被叫做 goroutines</p>
</blockquote>
<blockquote>
<p>Channel 这些 goroutines 之间的通讯由 channel[18, 25] 完成；</p>
</blockquote>
<blockquote>
<p>快速 编译很快，执行也很快。目标是跟 C 一样快。编译时间用秒计算；</p>
</blockquote>
<blockquote>
<p>安全 当转换一个类型到另一个类型的时候需要显式的转换并遵循严格的规则。Go 有垃圾收集，在 Go 中无须 free() ，语言会处理这一切；</p>
</blockquote>
<blockquote>
<p>标准格式化 Go 程序可以被格式化为程序员希望的（几乎）任何形式，但是官方格式是存在的。标准也非常简单： gofmt 的输出就是 官方认可的格式 ；</p>
</blockquote>
<blockquote>
<p>类型后置 类型在变量名的 后面 ，像这样 var a int ，来代替 C 中的 int a ；UTF-8 任何地方都是 UTF-8 的，包括字符串 以及 程序代码。你可以在代码中使用 Φ = Φ + 1 ；</p>
</blockquote>
<blockquote>
<p>开源 Go 的许可证是完全开源的，参阅 Go 发布的源码中的 LICENSE 文件；</p>
</blockquote>
<blockquote>
<p>开心 用 Go 写程序会非常开心！</p>
</blockquote>
<h2 id="IDEA-配置GO语言支持"><a href="#IDEA-配置GO语言支持" class="headerlink" title="IDEA 配置GO语言支持"></a>IDEA 配置GO语言支持</h2><ol>
<li>打开<code>Setting</code></li>
<li>选择<code>Setting</code>，输入<code>GO</code></li>
<li>安装<code>GO</code>语言支持</li>
</ol>
<p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200216135342.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>同时安装GO的Template的插件</li>
<li>重启IDEA</li>
</ol>
<h2 id="IDEA-创建GO项目"><a href="#IDEA-创建GO项目" class="headerlink" title="IDEA 创建GO项目"></a>IDEA 创建GO项目</h2><p>完成上一步的操作之后，我们可以实现IDEA创建GO项目</p>
<ol>
<li>打开IDEA，左上角<code>File</code>，New-&gt;选择GO工程</li>
</ol>
<p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200216145822.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>自定义一个项目名称</li>
</ol>
<p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200216145942.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>创建一个HelloWorld包</li>
<li>写入如下代码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	fmt.Print(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>写好之后，便可以直接右上角运行</li>
</ol>
<p>以上便是一个最简单的GO语言Helloworld代码，感觉比较懵逼，工具做了哪些事情？</p>
<h3 id="使用原始的方式构建一个helloword"><a href="#使用原始的方式构建一个helloword" class="headerlink" title="使用原始的方式构建一个helloword"></a>使用原始的方式构建一个helloword</h3><p>使用原始的GO语言方式需要满足前提条件：<strong>环境变量是否设置</strong></p>
<ol>
<li>在指定的目录比如<code>D:\java\GO\go-study\helloword</code>下面创建一个<code>hello.go</code>的文件</li>
<li>使用<code>NotePad++</code>编写脚本</li>
<li>和上面的代码一样，照抄或者复制粘贴，这里直接复制了上面的代码</li>
<li>打开<code>cmd</code>，进入对应的目录<code>cd D:\java\GO\go-study\helloword</code>，<strong>注意切换一下盘符</strong></li>
<li>执行命令<code>go run hello.go</code>，即可看到结果</li>
</ol>
<blockquote>
<p>早期的GO语言需要类似<code>javac</code>的编译动作，但是现在没有这个必要了</p>
<p>其他情况：</p>
<ul>
<li>Go 被安装在 ˜/go ，而 $GOROOT 被设置为 GOROOT=˜/go ；</li>
<li>希望编译的 Go 代码放在 ˜<strong>/g/src</strong> 而 $GOPATH 设置为 <strong>GOPATH=˜/g</strong> 。在使用包的 时候需要用到这个变量（参阅第 3 章）。</li>
</ul>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h2><ol>
<li><code>package main</code>必须首先出现，紧跟着是<code>import</code></li>
<li>首行这个是必须的。所有的 Go 文件以 <code>package &lt;something&gt;</code>开头，对于独立运行的执行文件必须是 <code>package main</code>；</li>
</ol>
<h1 id="了解GO语言"><a href="#了解GO语言" class="headerlink" title="了解GO语言"></a>了解GO语言</h1><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><ul>
<li>需要先声明类型，注意和JAVA完全不一样：例如<code>var a int</code></li>
<li>紧接着<code>:=</code>方式设置变量，l例如：<code>a := 15</code></li>
</ul>
<blockquote>
<p>Golang 在变量定义的时候设置了默认值，和JAVA的区别在于使用默认赋值</p>
<p>同时要注意一下：如果在函数体内部定义变量不使用GO会产生一个报错</p>
</blockquote>
<p>注意：</p>
<ul>
<li><code>dd:=1</code>这种形式只能在函数体内部</li>
<li><code>ar ss = &quot;sssdd&quot;</code> 会根据赋值猜测变量类型</li>
</ul>
<h3 id="定义多个变量"><a href="#定义多个变量" class="headerlink" title="定义多个变量"></a>定义多个变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var (</span><br><span class="line">	x int</span><br><span class="line">	b bool</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="平行声明和赋值"><a href="#平行声明和赋值" class="headerlink" title="平行声明和赋值"></a>平行声明和赋值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 平行声明</span><br><span class="line">var a,b int </span><br><span class="line">&#x2F;&#x2F; 平行赋值</span><br><span class="line">a,b :&#x3D; 34, 35</span><br></pre></td></tr></table></figure>

<h3 id="明确变量长度"><a href="#明确变量长度" class="headerlink" title="明确变量长度"></a>明确变量长度</h3><p>如果你希望明确其长度，可以使用如下的定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var df int32 &#x3D; 55;</span><br></pre></td></tr></table></figure>

<p>注意：默认的通用int会根据硬件去判断32位还是64位</p>
<p>其他定义举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int8 ， int16 ， int32 ， int64 和 byte ， uint8 ， uint16 ， uint32 ，uint64</span><br></pre></td></tr></table></figure>

<p><strong>其中byte 是 uint8 的别名</strong></p>
<h3 id="可以混合使用类型吗？"><a href="#可以混合使用类型吗？" class="headerlink" title="可以混合使用类型吗？"></a>可以混合使用类型吗？</h3><p>来看下面的定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 package main</span><br><span class="line">2</span><br><span class="line">3 func main() &#123;</span><br><span class="line">4 	var a int ← 通用整数类型</span><br><span class="line">5 	var b int32 ← 32 位整数类型</span><br><span class="line">6 	a &#x3D; 15</span><br><span class="line">7 	b &#x3D; a + a ← 混合这些类型是非法的</span><br><span class="line">8 	b &#x3D; b + 5 ← 5 是一个（未定义类型的）常量，所以这没?问题</span><br><span class="line">9 &#125;</span><br></pre></td></tr></table></figure>

<p><code>types.go:7: cannot use a + a (type int) as type int32 in assignment</code> 赋值非法的时候运行会报错，编译器会提示语法错误</p>
<h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const (</span><br><span class="line">    a &#x3D; iota</span><br><span class="line">    b &#x3D; iota</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>第一个 iota 表示为 0，因此 a 等于 0，当 iota 再次在新的一行使用时，它的值增加了 1，因此 b 的值是 1</p>
<p>省略重复的<code>iota</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const (</span><br><span class="line">    a &#x3D; iota</span><br><span class="line">    b</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>指定确切的类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const (</span><br><span class="line">    a &#x3D; 0 ← Is an int now</span><br><span class="line">    b string &#x3D; &quot;0&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>：</code>在 Go 中字符串是不可变的，字符串的修改需要如下方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s :&#x3D; &quot;hello&quot; </span><br><span class="line">c :&#x3D; [] rune (s) &#x2F;&#x2F; 转换 s 为 rune 数组</span><br><span class="line">c[0] &#x3D; &#39;c&#39;&#x2F;&#x2F; 修改数组的第一个元素</span><br><span class="line">s2 :&#x3D; string (c) &#x2F;&#x2F;创建 新的 字符串 s2 保存修改</span><br><span class="line">fmt.Printf(&quot;%s\n&quot;, s2) &#x2F;&#x2F;用 fmt.Printf 函数输出字符串</span><br></pre></td></tr></table></figure>

<p>多行文本的写法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s:&#x3D; &quot;sdsdadsa &quot;+ </span><br><span class="line">&quot;asdsad&quot; + </span><br><span class="line">&quot;sddsd&quot;</span><br></pre></td></tr></table></figure>

<p>注意<code>&quot;+&quot;</code>号必须在末尾</p>
<h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>Go 原生支持复数，写法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var c complex64 &#x3D; 5+5i ; </span><br><span class="line">fmt.Printf(&quot;Value is: %v&quot;, c)</span><br></pre></td></tr></table></figure>

<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>在GO里面，错误也被当做类型处理，声明的方式如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var e error</span><br></pre></td></tr></table></figure>

<p>默认为<code>null</code>， 本质上是一个接口</p>
<h2 id="运算符和内建函数"><a href="#运算符和内建函数" class="headerlink" title="运算符和内建函数"></a>运算符和内建函数</h2><p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200216193505.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<blockquote>
<p>Go <strong>不支持</strong>运算符重载</p>
</blockquote>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200216193610.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>先做个大概了解，详细使用的时候在记录笔记</p>
<h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (true &amp;&amp; true) </span><br><span class="line">&#123;</span><br><span class="line">    fmt.Print(&quot;hello&quot;)</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意格式，这种写法是不被允许的，需要将第一个左括号放到<code>if</code>的同一行</p>
<h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><p>写法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func myfunc() &#123;</span><br><span class="line">	i :&#x3D; 0</span><br><span class="line">Here: ← 这行的第一个词，以分号结束作为标签</span><br><span class="line">    println(i)</span><br><span class="line">    i++</span><br><span class="line">    goto Here ← 跳转</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>标签<strong>大小写敏感</strong></p>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>写法分成三种</p>
<p>第一种：一般的for循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var i &#x3D; 5</span><br><span class="line">Tag:</span><br><span class="line">    if i &#x3D;&#x3D; 0 &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">for i :&#x3D; 0; i&lt;10 ; i++ &#123;</span><br><span class="line">    fmt.Println(i);</span><br><span class="line">&#125;</span><br><span class="line">i--</span><br><span class="line">goto Tag</span><br></pre></td></tr></table></figure>

<p>第二种：相当于while</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var z &#x3D; 6</span><br><span class="line">for z &gt; 5 &#123;</span><br><span class="line">    z++</span><br><span class="line">    if z &gt; 7 &#123;</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">    print(&quot;hello wolrd&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三种：表示死循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for &#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意下面的写法是固定的，不能使用逗号表达式，只能使用平行赋值的方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i, j :&#x3D; 0, len (a)-1 ; i &lt; j ; i, j &#x3D; i+1, j-1 &#123;</span><br><span class="line">	a[i], a[j] &#x3D; a[j], a[i] ← 平行赋值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意GO 里面是没有while语句的</p>
<p>只能使用for进行书写while的循环</p>
</blockquote>
<h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list :&#x3D; []string&#123;&quot;aaa&quot;, &quot;vvv&quot;, &quot;ccc&quot;, &quot;ddd&quot;, &quot;eeee&quot;&#125;</span><br><span class="line">	for k,v :&#x3D; range list &#123;</span><br><span class="line">		print(k, &quot;-&quot;, v)</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>上面的例子是如下运转的：</p>
<ol>
<li>k 表示为 下标， v为值， range 代表了迭代器</li>
<li>迭代元素从 0 到 4 ，元素从 aaa…eeee 迭代</li>
</ol>
<p>也可以在字符串上直接使用 range ，看下面的案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>switch非常的灵活，可以在case里面写上表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func unhex(c byte ) byte &#123;</span><br><span class="line">    switch &#123;</span><br><span class="line">    case &#39;0&#39; &lt;&#x3D; c &amp;&amp; c &lt;&#x3D; &#39;9&#39;:</span><br><span class="line">    return c - &#39;0&#39;</span><br><span class="line">    case &#39;a&#39; &lt;&#x3D; c &amp;&amp; c &lt;&#x3D; &#39;f&#39;:</span><br><span class="line">    return c - &#39;a&#39; + 10</span><br><span class="line">    case &#39;A&#39; &lt;&#x3D; c &amp;&amp; c &lt;&#x3D; &#39;F&#39;:</span><br><span class="line">    return c - &#39;A&#39; + 10</span><br><span class="line">    &#125;</span><br><span class="line">    return 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它不会匹配失败后自动向下尝试，但是可以使用 fallthrough 使其这样做</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch i &#123;</span><br><span class="line">case 0: fallthrough</span><br><span class="line">case 1:</span><br><span class="line">f() &#x2F;&#x2F; 当 i &#x3D;&#x3D; 0 时， f 会被调用！</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还可以使用下面这张写法，逗号分隔多个条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case &#39; &#39;, &#39;?&#39;, &#39;&amp;&#39;, &#39;&#x3D;&#39;, &#39;#&#39;, &#39;+&#39;: ← , as ”or”</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h2><p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200216204755.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h3 id="array、slices-和-map"><a href="#array、slices-和-map" class="headerlink" title="array、slices 和 map"></a>array、slices 和 map</h3><h4 id="array"><a href="#array" class="headerlink" title="array"></a>array</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr &#x3D; [3]int&#123;&#125;</span><br><span class="line">for item :&#x3D; range arr&#123;</span><br><span class="line">    print(item);</span><br><span class="line">&#125;</span><br><span class="line">ss :&#x3D; [...] int&#123;1,2,2,3,4,4&#125;</span><br><span class="line">&#x2F;&#x2F; 初始化</span><br><span class="line">a :&#x3D; [3] int&#123; 1, 2, 3&#125;</span><br><span class="line">ff :&#x3D; [3][2] int &#123; &#123; 1,2 &#125; , &#123; 3,4 &#125; , &#123; 5,6 &#125; &#125;</span><br><span class="line">bb :&#x3D; [3][2] int &#123; [2] int &#123; 1,2 &#125; , [2] int &#123; 3,4 &#125; , [2] int &#123; 5,6 &#125; &#125;</span><br><span class="line">print(a, bb, ss);</span><br></pre></td></tr></table></figure>

<h4 id="slices"><a href="#slices" class="headerlink" title="slices"></a>slices</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slice&#96;总是指向底层的一个&#96;array</span><br></pre></td></tr></table></figure>

<p>总体来说go的语法基本和java相符，但是部分内容需要小心对待，个人不是很爽go语言的部分奇葩语法</p>
<p>slice 总是与一个固定长度的 array 成对出现。其影响 slice 的容量和长度</p>
<p>slice： slice := array[0:n]</p>
<p>对比图；</p>
<p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200217221715.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h5 id="扩展-slice"><a href="#扩展-slice" class="headerlink" title="扩展 slice"></a>扩展 slice</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">append&#96; 和 &#96;copy</span><br></pre></td></tr></table></figure>

<p>函数<code>append</code> 向<code>slice s</code>追加零值或其他 <code>x</code>值，并且返回追加后的新的、与 s 有相同类型的<code>slice</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s0 :&#x3D; [] int &#123; 0, 0 &#125;  </span><br><span class="line">s1 :&#x3D; append (s0, 2) &#x2F;&#x2F;追加一个元素， s1 &#x3D;&#x3D; []int&#123;0, 0, 2&#125; ；</span><br><span class="line">s2 :&#x3D; append (s1, 3, 5, 7) &#x2F;&#x2F;追加多个元素， s2 &#x3D;&#x3D; []int&#123;0, 0, 2, 3, 5, 7&#125; ；</span><br><span class="line">s3 :&#x3D; append (s2, s0...) &#x2F;&#x2F; 追加一个 slice， s3 &#x3D;&#x3D; []int&#123;0, 0, 2, 3, 5, 7, 0, 0&#125; 。注意这三个点！</span><br></pre></td></tr></table></figure>

<p>函数 copy 从源 slice src 复制元素到目标 dst ，并且返回复制的元素的个数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; [...] int &#123; 0, 1, 2, 3, 4, 5, 6, 7 &#125;</span><br><span class="line">var s &#x3D; make ([] int , 6)</span><br><span class="line">n1 :&#x3D; copy (s, a[0:]) ← n1 &#x3D;&#x3D; 6, s &#x3D;&#x3D; []int&#123;0, 1, 2, 3, 4, 5&#125;</span><br><span class="line">n2 :&#x3D; copy (s, s[2:]) ← n2 &#x3D;&#x3D; 4, s &#x3D;&#x3D; []int&#123;2, 3, 4, 5, 4, 5&#125;</span><br></pre></td></tr></table></figure>

<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">monthdays :&#x3D; map [ string ] int &#123;</span><br><span class="line">&quot;Jan&quot;: 31, &quot;Feb&quot;: 28, &quot;Mar&quot;: 31,</span><br><span class="line">&quot;Apr&quot;: 30, &quot;May&quot;: 31, &quot;Jun&quot;: 30,</span><br><span class="line">&quot;Jul&quot;: 31, &quot;Aug&quot;: 31, &quot;Sep&quot;: 30,</span><br><span class="line">&quot;Oct&quot;: 31, &quot;Nov&quot;: 30, &quot;Dec&quot;: 31, ← 逗号是必须的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只做声明的时候：<code>monthdays := make ( map[ string ] int )</code></p>
<p>如何使用：<code>monthdays[&quot;Dec&quot;]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for _, days :&#x3D; range monthdays &#123; ← 键没有使用，因此用 _, days</span><br><span class="line">year +&#x3D; days</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检查元素是否存在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var value int</span><br><span class="line">var present bool</span><br><span class="line">value, present &#x3D; monthdays[&quot;Jan&quot;] ← 如果存在， present 则有值 true</span><br><span class="line">← 或者更接近 Go 的方式</span><br><span class="line">v, ok :&#x3D; monthdays[&quot;Jan&quot;] ← “逗号 ok ”形式</span><br></pre></td></tr></table></figure>

<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="Q1-0-For-loop"><a href="#Q1-0-For-loop" class="headerlink" title="Q1. (0) For-loop"></a>Q1. (0) For-loop</h2><ol>
<li>创建一个基于 for 的简单的循环。使其循环 10 次，并且使用 fmt 包打印出计数 器的值。</li>
<li>用 goto 改写 1 的循环。关键字 for 不可使用。</li>
<li>再次改写这个循环，使其遍历一个 array，并将这个 array 打印到屏幕上。</li>
</ol>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0-func 1-(p mytype) 2-funcname(3- q int ) (r,s int ) &#123; return 0,0 &#125;</span><br></pre></td></tr></table></figure>

<p>. . 0 关键字 func 用于定义一个函数； . . 1 函数可以绑定到特定的类型上。这叫做 接收者 。有接收者的函数被称作 method。 第 5 章将对其进行说明； . . 2 funcname 是你函数的名字； . . 3 int 类型的变量 q 作为输入参数。参数用 pass-by-value 方式传递，意味着它们会 被复制； . . 4 变量 r 和 s 是这个函数的 命名返回值。在 Go 的函数中可以返回多个值。参阅 第 28 页的 “多值返回”。如果不想对返回的参数命名，只需要提供类型： ( int , int ) 。 如果只有一个返回值，可以省略圆括号。如果函数是一个子过程，并且没有任何 返回值，也可以省略这些内容； . . 5 这是函数体。注意 return 是一个语句，所以包裹参数的括号是可选的。</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>WIN10系统安装与U盘系统制作教程</title>
    <url>/2020/07/26/WIN10%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E4%B8%8EU%E7%9B%98%E7%B3%BB%E7%BB%9F%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="装机技巧系列（二）：系统安装之Windows-10启动盘制作"><a href="#装机技巧系列（二）：系统安装之Windows-10启动盘制作" class="headerlink" title="装机技巧系列（二）：系统安装之Windows 10启动盘制作"></a>装机技巧系列（二）：系统安装之Windows 10启动盘制作</h1><p><a href="https://zhuanlan.zhihu.com/p/36495771" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/36495771</a></p>
<h1 id="重装系统安装win10系统-激活，纯小白教程"><a href="#重装系统安装win10系统-激活，纯小白教程" class="headerlink" title="重装系统安装win10系统+激活，纯小白教程"></a>重装系统安装win10系统+激活，纯小白教程</h1><p><a href="https://zhuanlan.zhihu.com/p/117467570" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/117467570</a></p>
]]></content>
      <categories>
        <category>装机</category>
      </categories>
      <tags>
        <tag>实用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>一点鸡汤</title>
    <url>/2020/07/26/%E4%B8%80%E7%82%B9%E9%B8%A1%E6%B1%A4/</url>
    <content><![CDATA[<h1 id="网上查看"><a href="#网上查看" class="headerlink" title="网上查看"></a>网上查看</h1><p>Java学习这一部分其实也算是今天的重点，这一部分用来回答很多群里的朋友所问过的问题，那就是我你是如何学习Java的，能不能给点建议？今天我是打算来点干货，因此咱们就不说一些学习方法和技巧了，直接来谈每个阶段要学习的内容甚至是一些书籍。这一部分的内容，同样适用于一些希望转行到Java的同学。</p>
<a id="more"></a>

<p>在大家看之前，我要先声明两点。1、由于我本人是Java后端开发出身，因此所推荐的学习内容是Java Web和Java后端开发的路线，非Java Web和Java后端开发的同学请适当参考其学习思想即可，切勿照搬。2、下面对于【第一部分】的推荐内容，目的是让你尽快成为一个可以参加工作的Java开发者，更适用于处于待业状态，准备转行Java的同学。</p>
<p>如果你是在校学生，务必要在学好基础（比如计算机系统、算法、编译原理等等）的前提下，再考虑去进行下面的学习。第一部分：对于尚未做过Java工作的同学，包括一些在校生以及刚准备转行Java的同学。</p>
<p>一、Java基础首先去找一个Java的基础教程学一下，这里推荐慕课，菜鸟，学习Java基础的时候，应该尽量多动手，很多时候，你想当然的事情，等你写出来运行一下，你就会发现不是这么回事儿，不信你就试试。学完以上内容以后，你应该对Java有一个基本的了解了，你可以用Java语言写出一些简单的程序，并且你用的是最简单的编辑器，比如记事本。这个时候，不要急于进入下一部分，留下几天好好写一些程序，尽可能熟悉这些基础内容。</p>
<p>二、Web开发等你写上几天程序以后，你往往会比较迷茫，因为你写的东西似乎看起来毫无用处，比如实现一个简单的计算器，读取一个文件等。这个时候你就应该去学着写一些让你觉得有意思的东西了，所以你应该学习更多的知识。这些内容主要是Web开发相关的内容，包括HTML/CSS/JS（前端页面）、Servlet/JSP（J2EE）以及Mysql（数据库）相关的知识。它们的学习顺序应该是从前到后，因此最先学习的应该是HTML/CSS/JS（前端页面），这部分内容你可以去上面的那个runoob网站上找。</p>
<p>你可以试着自己写一些页面，当然，你可以尽你最大的努力让它变得最漂亮。这部分内容对于后端Java来说，理论上不是特别重要，但至少要达到可以自己写出一些简单页面的水平。接下来，你需要学习的是Servlet/JSP（J2EE）部分，这部分是Java后端开发必须非常精通的部分，因此这部分是这三部分中最需要花精力的，而且这个时候，你要学会使用开发工具，而不能再使用记事本了，可以选择eclipse。当你下载安装好eclipse以后，请视频中的教程一步一步去学习，一定要多动手。关于Servlet/Jsp部分视频的选择，业界比较认可马士兵的视频，因此推荐给大家。</p>
<p>当然了，我本人并没有看过他的视频，所以不好说的太绝对，如果大家自己有更好的选择，可以坚持自己的，不要被我干扰。原本我也是打算出教学视频的，但是由于时间问题，还是决定放弃了。最后一步，你需要学会使用数据库，mysql是个不错的入门选择，而且Java领域里主流的关系型数据库就是mysql。这部分一般在你学习Servlet/Jsp的时候，就会接触到的，其中的JDBC部分就是数据库相关的部分。你不仅要学会使用JDBC操作数据库，还要学会使用数据库客户端工具，比如navicat，sqlyog，二选一即可。</p>
<p>三、开发框架当你学会以上内容以后，这个时候你还不足以参加工作，你还需要继续深造。公司里为了提高开发的效率，会使用一些Java Web框架，因此你还需要学习一些开发框架。目前比较主流的是SSM框架，即spring、springmvc、mybatis。你需要学会这三个框架的搭建，并用它们做出一个简单的增删改查的Web项目。你可以不理解那些配置都是什么含义，以及为什么要这么做，这些留着后面你去了解。</p>
<p>但你一定要可以快速的利用它们三个搭建出一个Web框架，你可以记录下你第一次搭建的过程，相信我，你一定会用到的。还要提一句的是，你在搭建SSM的过程中，可能会经常接触到一个叫maven的工具。这个工具也是你以后工作当中几乎是必须要使用的工具，所以你在搭建SSM的过程中，也可以顺便了解一下maven的知识。在你目前这个阶段，你只需要在网络上了解一下maven基本的使用方法即可，一些高端的用法随着你工作经验的增加，会逐渐接触到的。</p>
<p>关于学习SSM框架的地址给大家推荐一个，这里面有视频，大家可以去观看。四、找工作当你完成开发框架的学习以后，你就该找工作了，在校的找实习，毕业的找全职。与此同时，在找工作的同时，你不应该停下你的学习，准确的说，是你在以后都不能停下学习。上面这些内容你只是囫囵吞枣的学会了使用，你可以逐步尝试着去了解更多的东西，网络是你最重要的老师。</p>
<p>第二部分：对于参加工作一年以内的同学。恭喜你，这个时候，你已经拥有了一份Java的工作。这个阶段是你成长极快的阶段，而且你可能会经常加班。但是加班不代表你就可以松懈了，永远记得我说的那句话，从你入行那一刻起，你就要不停的学习。在这一年里，你至少需要看完《Java编程思想》这本书。这本书的内容是帮助你对于Java有一个更加深入的了解，是Java基础的升级版。这本书很厚，当初看这本书，我花了整整三个月。正常速度的话，应该可以在半年左右看完。我这里不要求过高，只要你在一年以内把这本书看完即可。当然了，我所说的看完，是充分吸收，而不是读一遍就完事了，因此有些内容你可能会看不止一遍。总而言之，这个阶段的核心学习思想就是，在工作中实践，并且更加深入的了解Java基础。</p>
<p>第二部分：对于参加工作1年到2年的同学。这部分时间段的同学，已经对Java有了一个更加深入的了解。但是对于面向对象的体会可能还不够深刻，编程的时候还停留在完成功能的层次，很少会去考虑设计的问题。于是这个时候，设计模式就来了。我当时看的是《大话设计模式》这本书，并且写了完整版的设计模式博客。因此，我要求大家，最多在你工作一年的时候，必须开始写博客，而设计模式就是你博客的开端。</p>
<p>请记住，我所提的基本都是最低要求，因此不要有任何松懈的心理，否则五年后，你不要去羡慕别人高于你的工资，也不要去羡慕别人进入了某公司。这一年，你必须对于设计模式了如指掌，《大话设计模式》可以作为你的开端。此外，设计模式并不是你这一年唯一的任务，你还需要看一些关于代码编写优化的书。比如《重构 改善既有代码的设计》，《effective java》。总而言之，这个阶段，你的核心任务就是提高你的代码能力，要能写出一手优雅的代码。</p>
<p>第三部分：对于参加工作2年到3年的同学有的同学在这个时候觉得自己已经很牛逼了，于是忍不住开始慢慢松懈。请记住，你还嫩的多。这个阶段，有一本书是你必须看的，它叫做《深入理解Java虚拟机》。这本书绝对是Java开发者最重要的书，没有之一。在我眼里，这本书的重要性还要高于《Java编程思想》。这本书的内容是帮助你全面的了解Java虚拟机，在这个阶段，你一定已经知道Java是运行在JVM之上的。所以，对于JVM，你没有任何理由不了解它。</p>
<p>另外，在过去2年的工作当中，你肯定或多或少接触过并发。这个时候，你应该去更加深入的了解并发相关的知识，而这部分内容，我比较推荐《Java并发编程实战》这本书。只要你把这本书啃下来了，并发的部分基本已经了解了十之六七。与此同时，这个阶段你要做的事情还远不止如此。这个时候，你应该对于你所使用的框架应该有了更深入的了解，对于Java的类库也有了更深入的了解。</p>
<p>因此，你需要去看一些JDK中的类的源码，也包括你所使用的框架的源码。这些源码能看懂的前提是，你必须对设计模式非常了解。否则的话，你看源码的过程中，永远会有这样那样的疑问，这段代码为什么要这么写？为什么要定义这个接口，它看起来好像很多余？由此也可以看出，这些学习的过程是环环相扣的，如果你任何一个阶段拉下来了，那么你就真的跟不上了，或者说是一步慢步步慢。而且我很负责的告诉你，我在这个阶段的时候，所学习的东西远多于这里所罗列出来的。</p>
<p>因此千万不要觉得你已经学的很多了，我所说的这些都只是最低要求，不光是我，很多人在这个时间段所学习的内容都远超本文的范围。如果你不能跟上节奏的话，若干年后，如果不是程序猿市场还不错的话，你很可能不仅仅是工资比别人低，公司没别人好，而是根本就找不到工作。总而言之，这个阶段，你需要做的是深入了解Java底层和Java类库（比如并发那本书就是Java并发包java.concurrent的内容），也就是JVM和JDK的相关内容。而且还要更深入的去了解你所使用的框架，方式比较推荐看源码或者看官方文档。另外，还有一种学习的方式，在2年这个阶段，也应该启用了，那就是造轮子。不要听信那套“不要重复造轮子”的论调，那是公司为了节省时间成本编造出来的。重复造轮子或许对别人没有价值，因为你造的轮子可能早就有了，而且一般情况下你造出来的轮子还没有现存的好。</p>
<p>但是对别人没有价值，不代表对你自己没有价值。一个造轮子的过程，是一个从无到有的过程。这个过程可以对你进行系统的锻炼，它不仅考察你的编码能力，还考察你的框架设计能力，你需要让你的轮子拥有足够好的扩展性、健壮性。而且在造轮子的过程中，你会遇到各种各样的难题，这些难题往往又是你学习的契机。当你把轮子造好的时候，你一定会发现，其实你自己收获了很多。所以，这个阶段，除了上面提到的了解JVM、JDK和框架源码以外，也请你根据别人优秀的源码，去造一个任何你能够想象出来的轮子。</p>
<p>第四部分：参加工作3年到4年的同学这个阶段的同学，提升已经是很难了，而且这个阶段的学习往往会比较多样化。因为在前3年的过程中，你肯定或多或少接触过一些其它的技术，比如大数据、分布式缓存、分布式消息服务、分布式计算、软负载均衡等等。这些技术，你能精通任何一项，都将是你未来面试时巨大的优势，因此如果你对某一项技术感兴趣的话，</p>
<p>这个时候可以深入去研究一下。这项技术不一定是你工作所用到的，但一定是相关的。而且在研究一门新技术时，切忌朝三暮四。有的同学今天去整整大数据，搞搞Hadoop、hbase一类的东西。过不了一段时间，就觉得没意思，又去研究分布式缓存，比如redis。然后又过不了一段时间，又去研究分布式计算，比如整整Mapreduce或者storm。结果到最后，搞得自己好像什么都会一样，在简历上大言不惭的写上大数据、分布式缓存、分布式计算都了解，其实任何一个都只是浮于表面。到时候面试官随便一问，就把你给识破了。</p>
<p>一定要记住，作为一个程序猿，平日里所接触的技术可能会很多，但是想要让一门技术成为你的优势，那么一定是你对这门技术的了解强过绝大多数人才行。因此在这个阶段，你就不能再简单的去学习前3年的内容了，虽然前面的学习如果还不够深入的话依旧要继续，但这个时候你应该更多的考虑建立你的优势，也可以称为差异性。差异性相信不难理解，就是让你自己变得与众不同。你前面三年的学习足够你成为一名基本合格的Java开发者，但你离成为一名优秀的Java开发者还有很大的距离。</p>
<p>所谓优秀，即能别人所不能。而你前三年所学习的内容，是很多做过几年的Java开发都能够掌握的。那么为了让自己有差异性，你就需要另辟蹊径，找一个方向深入研究下去，以期在将来，你能够成为这个领域的专家，比如分布式计算领域的专家，大数据领域的专家，并发领域的专家等等。此外，你除了建立你的差异性之外，还要去弥补你基础上的不足，直到现在，我都没有提及基础知识。原因是基础是很枯燥无味的，学的太早不仅容易懵逼，而且懵逼的同时还容易产生心理阴影，以至于以后再不想去研究这些基础。但基础又是你深入研究一些领域时所必须掌握的，比如你去研究分布式计算，你不懂算法你玩个毛毛？比如你去做分布式缓存，你对计算机系统的内存不了解，你如何去做缓存？</p>
<p>如果你的基础本来就非常强，那么恭喜你，相信你在之前的工作中已经充分体会到了这些基础对你的帮助。但我相信大部分人的基础都很薄弱，哪怕是科班毕业的人，很多人也不敢说自己当初的基础学的多么强大，比如算法、计算机系统原理、编译原理这些。但是每个人时间都是有限的，而且这些基础的书籍每一本读下来，没个一年半载的，还真拿不下来，因此还是要有所抉择的。虽然艺多不压身，但问题是艺多是有代价的，是需要你付出时间和精力的，而我个人更赞成在同等代价的情况下获取最大的收获。</p>
<p>首先，我比较推崇的基础书籍有三本，分别是《深入理解计算机系统》，《tcp/ip详解 卷一、二、三》，《数据结构与算法》。其中TCP/IP有三本书，但我们这里把这三本看成是一本大书。这三本分别适合三种人，《深入理解计算机系统》比较适合一直从事Java Web开发和APP后端开发工作的人群。《tcp/ip详解 卷一、二、三》比较适合做网络编程的人群，比如你使用netty去开发的话，那么就要对TCP/IP有更深入的了解。而《数据结构与算法》这本书，则比较适合做计算研究工作的人，比如刚才提到的分布式计算。另外，我要强调的是，这里所说的适合，并不是其它两本对你就没有用。比如你做Java Web和APP后端开发，《tcp/ip详解 卷一、二、三》这本书对你的作用也是很大的。这里只是分出个主次关系而已，你要是时间足够的话，能把三本都精读那当然最好不过了。</p>
<p>但如果时间有限的话，那么就先挑对你帮助最大的书去读。理论上来讲，这一年你能把这三本其中一本精读下来，就已经非常厉害了。有了基础，有了前面的工作经验，你就可以去开拓属于你的领域了。在这一年里，一定要规划好自己的领域，建立好自己的优势，制造出差异性。如果你对自己的领域不够清晰的话，随着你工作的时间日益增多，你接触的技术会越来越多，这个时候，你很容易被淹死在技术的海洋里，看似接触的技术越来越多，会用的也越来越多，但你毫无优势。有的同学可能会问，“我，我也不知道我的领域是什么啊？怎么办呢？”对于这种人，我只想说，“卧槽，这还问我？要不干脆我替你学习得了，好不好？”</p>
<p>第五部分：参加工作4年到5年的同学经过前面一年的历练，相信你在自己所钻研的领域已经有了自己一定的见解，这个时候，技术上你应该已经遇到瓶颈了。这个时候不要着急提高自己的技术，已经是时候提高你的影响力了，你可以尝试去一些知名的公司去提高你的背景，你可以发表一些文章去影响更多的人。当然，你也可以去Github创建一个属于你的开源项目，去打造自己的产品。</p>
<p>这次的开源项目不同于之前的造轮子，你这个时候是真的要去尽量尝试造出来真正对别人有价值的轮子。技术学到这个阶段，很容易遇到瓶颈，而且往往达到一定程度后，你再深入下去的收效就真的微乎其微了，除非你是专门搞学术研究的。然而很可惜，大部分程序猿做不到这一步，那是科学家做的事情。这个时候提高影响力不仅仅是因为技术上容易遇到瓶颈，更多的是影响力可以给你创造更多的机会。程序猿在某种程度上和明星很像，一个好的电视剧和电影就可以成就一批明星，程序猿有的时候也是，一个好的项目就可以成就一群程序猿。比如国内几个脍炙人口的项目，像淘宝、支付宝、QQ、百度、微信等等。这每一个项目，都成就了一批程序猿。我敢说，这里面任何一个项目，如果你是它的核心开发，光是这样一个Title，就已经是你非常大的优势。更何况还不止如此，Title说到底也是个名头，更重要的是，这种项目在做的时候，对你的历练一定也是非常给力的。</p>
<p>而你如果想要参与这样的项目，除了靠运气之外，影响力也是很重要的一个手段。比如你在分布式计算领域有一定的影响力，那么如果有什么好的关于分布式计算的项目，对方就很可能会邀请你。就算人家不邀请你，你自己主动去面试的时候，对方如果知道你在这个领域的影响力，也肯定会起到很大的作用，而这个作用，甚至可能会超过你现在的技术能力。所以，在这个阶段，你最大的任务是提高自己的影响力，为自己未来的十年工作生涯那一天做准备。如果你能够靠你的影响力和以前积累的技术，参与到一个伟大的项目当中，那么你后面的五年也就有着落了。当然了，我现在满打满算，做程序猿也就4年半不到，因此关于4年到5年这一部分，我的见解不一定是对的，就算是对的，也不一定是适合任何人的。</p>
<p>所以，希望大家自己有的判断力，去决定到底该如何度过这一年。结语本文到此就基本结束了，整篇文章很长，但其实主要就说了两部分内容，一个是社招面试的准备，一个是Java生涯的学习。关于这两部分，我已经给出了自己的见解，但是还是那句话，每个人吸收知识的时候，都要有抽取精华，去除糟粕的能力。我所说的，可能有些是对的，有些是错的，有些是适合你的，有些是不太适合你的，你要自己能够判断。其实你在生活和工作当中也是一样的，你身边的人形形色色，有的人你喜欢，有的人你很讨厌。但其实你喜欢的人也有缺点，你讨厌的人也有优点。你要学会从你讨厌的人身上学会他的优点，千万不要一棒子打死，这只会让你失去很多学习成长的机会。好了，说了这么多了，就到此为止吧，希望本文可以帮助到作为程序猿或即将成为程序猿的你。</p>
]]></content>
      <categories>
        <category>心得体会</category>
      </categories>
      <tags>
        <tag>鸡汤</tag>
      </tags>
  </entry>
</search>
