<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go语言学习笔记（一）</title>
    <url>/2020/07/26/gostudy1/</url>
    <content><![CDATA[<h1 id="Go语言学习笔记（一）"><a href="#Go语言学习笔记（一）" class="headerlink" title="Go语言学习笔记（一）"></a>Go语言学习笔记（一）</h1><h2 id="Go语言是什么？"><a href="#Go语言是什么？" class="headerlink" title="Go语言是什么？"></a>Go语言是什么？</h2><p><em>Go 编程语言是一个使得程序员更加有效率的开源项目。Go 是有表达力、简洁、清晰和有效率的。它的并行机制使其很容易编写多核和网络应用,而新奇的类型系统允许构建有弹性的模块化程序。Go 编译到机器码非常快速,同时具有便利的垃圾回收和强大的运行时反射。它是快速的、静态类型编译语言,但是感觉上是动态类型的,解释型语言。</em></p>
<a id="more"></a>

<h2 id="GO能做什么？"><a href="#GO能做什么？" class="headerlink" title="GO能做什么？"></a>GO能做什么？</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzU3NDA0NTEy" title="https://www.zhihu.com/question/57404512">https://www.zhihu.com/question/57404512<i class="fa fa-external-link"></i></span> 知乎回答</p>
<h2 id="为什么要学习Go"><a href="#为什么要学习Go" class="headerlink" title="为什么要学习Go?"></a>为什么要学习Go?</h2><p>客观原因：</p>
<ol>
<li>GO 可以非常高效的完成一些JAVA需要很多功夫完成的操作</li>
</ol>
<p>例如：</p>
<ul>
<li>管理日志</li>
<li>IO监控</li>
<li>生成模板代码</li>
</ul>
<ol>
<li>近两年GO诞生的框架越来越多，他的便捷性得到认可</li>
<li>技多不压身</li>
</ol>
<p>主管原因：</p>
<ol>
<li>想用GO完成一些工作上重复干的活儿</li>
<li>编写一些工具帮助日常开发</li>
</ol>
<h2 id="如何学习？"><a href="#如何学习？" class="headerlink" title="如何学习？"></a>如何学习？</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIzNDg2MzQ0" title="https://www.zhihu.com/question/23486344">https://www.zhihu.com/question/23486344<i class="fa fa-external-link"></i></span> 知乎第二个</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90b3VyLmdvLXpoLm9yZy9saXN0" title="https://tour.go-zh.org/list">https://tour.go-zh.org/list<i class="fa fa-external-link"></i></span> 快速入门（需要翻墙）</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9taWtlc3Bvb2suY29tL2xlYXJuaW5nLWdvLw==" title="https://mikespook.com/learning-go/">https://mikespook.com/learning-go/<i class="fa fa-external-link"></i></span> 《学习GO语言》中文版，不过出版比较早，最好自我实践</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nb2J5ZXhhbXBsZS5jb20v" title="https://gobyexample.com/">https://gobyexample.com/<i class="fa fa-external-link"></i></span> 一些基础的语代码</p>
<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="安装GO"><a href="#安装GO" class="headerlink" title="安装GO"></a>安装GO</h2><p>进入官网：<span class="exturl" data-url="aHR0cHM6Ly9nb2xhbmcub3JnLw==" title="https://golang.org/">https://golang.org/<i class="fa fa-external-link"></i></span></p>
<p>（因为不可抗力的原因，这个房子国内没法访问。。。也可能是我联通网的问题）</p>
<p>window下载地址（注意32位和64位的区别）：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kbC5nb29nbGUuY29tL2dvL2dvMS4xMy44LndpbmRvd3MtYW1kNjQubXNp" title="https://dl.google.com/go/go1.13.8.windows-amd64.msi">https://dl.google.com/go/go1.13.8.windows-amd64.msi<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kbC5nb29nbGUuY29tL2dvL2dvMS4xMy44LndpbmRvd3MtMzg2Lm1zaQ==" title="https://dl.google.com/go/go1.13.8.windows-386.msi">https://dl.google.com/go/go1.13.8.windows-386.msi<i class="fa fa-external-link"></i></span></p>
<p>Linux下载地址（注意32位和64位的区别）：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kbC5nb29nbGUuY29tL2dvL2dvMS4xMy44LnNyYy50YXIuZ3o=" title="https://dl.google.com/go/go1.13.8.src.tar.gz">https://dl.google.com/go/go1.13.8.src.tar.gz<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kbC5nb29nbGUuY29tL2dvL2dvMS4xMy44LmRhcndpbi1hbWQ2NC50YXIuZ3o=" title="https://dl.google.com/go/go1.13.8.darwin-amd64.tar.gz">https://dl.google.com/go/go1.13.8.darwin-amd64.tar.gz<i class="fa fa-external-link"></i></span></p>
<h2 id="Go语言的特点"><a href="#Go语言的特点" class="headerlink" title="Go语言的特点"></a>Go语言的特点</h2><blockquote>
<p>并行 Go 让函数很容易成为 非常 轻量的线程。这些线程在 Go 中被叫做 goroutines</p>
</blockquote>
<blockquote>
<p>Channel 这些 goroutines 之间的通讯由 channel[18, 25] 完成；</p>
</blockquote>
<blockquote>
<p>快速 编译很快，执行也很快。目标是跟 C 一样快。编译时间用秒计算；</p>
</blockquote>
<blockquote>
<p>安全 当转换一个类型到另一个类型的时候需要显式的转换并遵循严格的规则。Go 有垃圾收集，在 Go 中无须 free() ，语言会处理这一切；</p>
</blockquote>
<blockquote>
<p>标准格式化 Go 程序可以被格式化为程序员希望的（几乎）任何形式，但是官方格式是存在的。标准也非常简单： gofmt 的输出就是 官方认可的格式 ；</p>
</blockquote>
<blockquote>
<p>类型后置 类型在变量名的 后面 ，像这样 var a int ，来代替 C 中的 int a ；UTF-8 任何地方都是 UTF-8 的，包括字符串 以及 程序代码。你可以在代码中使用 Φ = Φ + 1 ；</p>
</blockquote>
<blockquote>
<p>开源 Go 的许可证是完全开源的，参阅 Go 发布的源码中的 LICENSE 文件；</p>
</blockquote>
<blockquote>
<p>开心 用 Go 写程序会非常开心！</p>
</blockquote>
<h2 id="IDEA-配置GO语言支持"><a href="#IDEA-配置GO语言支持" class="headerlink" title="IDEA 配置GO语言支持"></a>IDEA 配置GO语言支持</h2><ol>
<li>打开<code>Setting</code></li>
<li>选择<code>Setting</code>，输入<code>GO</code></li>
<li>安装<code>GO</code>语言支持</li>
</ol>
<p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200216135342.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>同时安装GO的Template的插件</li>
<li>重启IDEA</li>
</ol>
<h2 id="IDEA-创建GO项目"><a href="#IDEA-创建GO项目" class="headerlink" title="IDEA 创建GO项目"></a>IDEA 创建GO项目</h2><p>完成上一步的操作之后，我们可以实现IDEA创建GO项目</p>
<ol>
<li>打开IDEA，左上角<code>File</code>，New-&gt;选择GO工程</li>
</ol>
<p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200216145822.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>自定义一个项目名称</li>
</ol>
<p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200216145942.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>创建一个HelloWorld包</li>
<li>写入如下代码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	fmt.Print(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>写好之后，便可以直接右上角运行</li>
</ol>
<p>以上便是一个最简单的GO语言Helloworld代码，感觉比较懵逼，工具做了哪些事情？</p>
<h3 id="使用原始的方式构建一个helloword"><a href="#使用原始的方式构建一个helloword" class="headerlink" title="使用原始的方式构建一个helloword"></a>使用原始的方式构建一个helloword</h3><p>使用原始的GO语言方式需要满足前提条件：<strong>环境变量是否设置</strong></p>
<ol>
<li>在指定的目录比如<code>D:\java\GO\go-study\helloword</code>下面创建一个<code>hello.go</code>的文件</li>
<li>使用<code>NotePad++</code>编写脚本</li>
<li>和上面的代码一样，照抄或者复制粘贴，这里直接复制了上面的代码</li>
<li>打开<code>cmd</code>，进入对应的目录<code>cd D:\java\GO\go-study\helloword</code>，<strong>注意切换一下盘符</strong></li>
<li>执行命令<code>go run hello.go</code>，即可看到结果</li>
</ol>
<blockquote>
<p>早期的GO语言需要类似<code>javac</code>的编译动作，但是现在没有这个必要了</p>
<p>其他情况：</p>
<ul>
<li>Go 被安装在 ˜/go ，而 $GOROOT 被设置为 GOROOT=˜/go ；</li>
<li>希望编译的 Go 代码放在 ˜<strong>/g/src</strong> 而 $GOPATH 设置为 <strong>GOPATH=˜/g</strong> 。在使用包的 时候需要用到这个变量（参阅第 3 章）。</li>
</ul>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h2><ol>
<li><code>package main</code>必须首先出现，紧跟着是<code>import</code></li>
<li>首行这个是必须的。所有的 Go 文件以 <code>package &lt;something&gt;</code>开头，对于独立运行的执行文件必须是 <code>package main</code>；</li>
</ol>
<h1 id="了解GO语言"><a href="#了解GO语言" class="headerlink" title="了解GO语言"></a>了解GO语言</h1><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><ul>
<li>需要先声明类型，注意和JAVA完全不一样：例如<code>var a int</code></li>
<li>紧接着<code>:=</code>方式设置变量，l例如：<code>a := 15</code></li>
</ul>
<blockquote>
<p>Golang 在变量定义的时候设置了默认值，和JAVA的区别在于使用默认赋值</p>
<p>同时要注意一下：如果在函数体内部定义变量不使用GO会产生一个报错</p>
</blockquote>
<p>注意：</p>
<ul>
<li><code>dd:=1</code>这种形式只能在函数体内部</li>
<li><code>ar ss = &quot;sssdd&quot;</code> 会根据赋值猜测变量类型</li>
</ul>
<h3 id="定义多个变量"><a href="#定义多个变量" class="headerlink" title="定义多个变量"></a>定义多个变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var (</span><br><span class="line">	x int</span><br><span class="line">	b bool</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="平行声明和赋值"><a href="#平行声明和赋值" class="headerlink" title="平行声明和赋值"></a>平行声明和赋值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 平行声明</span><br><span class="line">var a,b int </span><br><span class="line">&#x2F;&#x2F; 平行赋值</span><br><span class="line">a,b :&#x3D; 34, 35</span><br></pre></td></tr></table></figure>

<h3 id="明确变量长度"><a href="#明确变量长度" class="headerlink" title="明确变量长度"></a>明确变量长度</h3><p>如果你希望明确其长度，可以使用如下的定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var df int32 &#x3D; 55;</span><br></pre></td></tr></table></figure>

<p>注意：默认的通用int会根据硬件去判断32位还是64位</p>
<p>其他定义举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int8 ， int16 ， int32 ， int64 和 byte ， uint8 ， uint16 ， uint32 ，uint64</span><br></pre></td></tr></table></figure>

<p><strong>其中byte 是 uint8 的别名</strong></p>
<h3 id="可以混合使用类型吗？"><a href="#可以混合使用类型吗？" class="headerlink" title="可以混合使用类型吗？"></a>可以混合使用类型吗？</h3><p>来看下面的定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 package main</span><br><span class="line">2</span><br><span class="line">3 func main() &#123;</span><br><span class="line">4 	var a int ← 通用整数类型</span><br><span class="line">5 	var b int32 ← 32 位整数类型</span><br><span class="line">6 	a &#x3D; 15</span><br><span class="line">7 	b &#x3D; a + a ← 混合这些类型是非法的</span><br><span class="line">8 	b &#x3D; b + 5 ← 5 是一个（未定义类型的）常量，所以这没?问题</span><br><span class="line">9 &#125;</span><br></pre></td></tr></table></figure>

<p><code>types.go:7: cannot use a + a (type int) as type int32 in assignment</code> 赋值非法的时候运行会报错，编译器会提示语法错误</p>
<h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const (</span><br><span class="line">    a &#x3D; iota</span><br><span class="line">    b &#x3D; iota</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>第一个 iota 表示为 0，因此 a 等于 0，当 iota 再次在新的一行使用时，它的值增加了 1，因此 b 的值是 1</p>
<p>省略重复的<code>iota</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const (</span><br><span class="line">    a &#x3D; iota</span><br><span class="line">    b</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>指定确切的类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const (</span><br><span class="line">    a &#x3D; 0 ← Is an int now</span><br><span class="line">    b string &#x3D; &quot;0&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>：</code>在 Go 中字符串是不可变的，字符串的修改需要如下方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s :&#x3D; &quot;hello&quot; </span><br><span class="line">c :&#x3D; [] rune (s) &#x2F;&#x2F; 转换 s 为 rune 数组</span><br><span class="line">c[0] &#x3D; &#39;c&#39;&#x2F;&#x2F; 修改数组的第一个元素</span><br><span class="line">s2 :&#x3D; string (c) &#x2F;&#x2F;创建 新的 字符串 s2 保存修改</span><br><span class="line">fmt.Printf(&quot;%s\n&quot;, s2) &#x2F;&#x2F;用 fmt.Printf 函数输出字符串</span><br></pre></td></tr></table></figure>

<p>多行文本的写法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s:&#x3D; &quot;sdsdadsa &quot;+ </span><br><span class="line">&quot;asdsad&quot; + </span><br><span class="line">&quot;sddsd&quot;</span><br></pre></td></tr></table></figure>

<p>注意<code>&quot;+&quot;</code>号必须在末尾</p>
<h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>Go 原生支持复数，写法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var c complex64 &#x3D; 5+5i ; </span><br><span class="line">fmt.Printf(&quot;Value is: %v&quot;, c)</span><br></pre></td></tr></table></figure>

<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>在GO里面，错误也被当做类型处理，声明的方式如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var e error</span><br></pre></td></tr></table></figure>

<p>默认为<code>null</code>， 本质上是一个接口</p>
<h2 id="运算符和内建函数"><a href="#运算符和内建函数" class="headerlink" title="运算符和内建函数"></a>运算符和内建函数</h2><p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200216193505.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<blockquote>
<p>Go <strong>不支持</strong>运算符重载</p>
</blockquote>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200216193610.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>先做个大概了解，详细使用的时候在记录笔记</p>
<h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (true &amp;&amp; true) </span><br><span class="line">&#123;</span><br><span class="line">    fmt.Print(&quot;hello&quot;)</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意格式，这种写法是不被允许的，需要将第一个左括号放到<code>if</code>的同一行</p>
<h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><p>写法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func myfunc() &#123;</span><br><span class="line">	i :&#x3D; 0</span><br><span class="line">Here: ← 这行的第一个词，以分号结束作为标签</span><br><span class="line">    println(i)</span><br><span class="line">    i++</span><br><span class="line">    goto Here ← 跳转</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>标签<strong>大小写敏感</strong></p>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>写法分成三种</p>
<p>第一种：一般的for循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var i &#x3D; 5</span><br><span class="line">Tag:</span><br><span class="line">    if i &#x3D;&#x3D; 0 &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">for i :&#x3D; 0; i&lt;10 ; i++ &#123;</span><br><span class="line">    fmt.Println(i);</span><br><span class="line">&#125;</span><br><span class="line">i--</span><br><span class="line">goto Tag</span><br></pre></td></tr></table></figure>

<p>第二种：相当于while</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var z &#x3D; 6</span><br><span class="line">for z &gt; 5 &#123;</span><br><span class="line">    z++</span><br><span class="line">    if z &gt; 7 &#123;</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">    print(&quot;hello wolrd&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三种：表示死循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for &#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意下面的写法是固定的，不能使用逗号表达式，只能使用平行赋值的方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i, j :&#x3D; 0, len (a)-1 ; i &lt; j ; i, j &#x3D; i+1, j-1 &#123;</span><br><span class="line">	a[i], a[j] &#x3D; a[j], a[i] ← 平行赋值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意GO 里面是没有while语句的</p>
<p>只能使用for进行书写while的循环</p>
</blockquote>
<h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list :&#x3D; []string&#123;&quot;aaa&quot;, &quot;vvv&quot;, &quot;ccc&quot;, &quot;ddd&quot;, &quot;eeee&quot;&#125;</span><br><span class="line">	for k,v :&#x3D; range list &#123;</span><br><span class="line">		print(k, &quot;-&quot;, v)</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>上面的例子是如下运转的：</p>
<ol>
<li>k 表示为 下标， v为值， range 代表了迭代器</li>
<li>迭代元素从 0 到 4 ，元素从 aaa…eeee 迭代</li>
</ol>
<p>也可以在字符串上直接使用 range ，看下面的案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>switch非常的灵活，可以在case里面写上表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func unhex(c byte ) byte &#123;</span><br><span class="line">    switch &#123;</span><br><span class="line">    case &#39;0&#39; &lt;&#x3D; c &amp;&amp; c &lt;&#x3D; &#39;9&#39;:</span><br><span class="line">    return c - &#39;0&#39;</span><br><span class="line">    case &#39;a&#39; &lt;&#x3D; c &amp;&amp; c &lt;&#x3D; &#39;f&#39;:</span><br><span class="line">    return c - &#39;a&#39; + 10</span><br><span class="line">    case &#39;A&#39; &lt;&#x3D; c &amp;&amp; c &lt;&#x3D; &#39;F&#39;:</span><br><span class="line">    return c - &#39;A&#39; + 10</span><br><span class="line">    &#125;</span><br><span class="line">    return 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它不会匹配失败后自动向下尝试，但是可以使用 fallthrough 使其这样做</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch i &#123;</span><br><span class="line">case 0: fallthrough</span><br><span class="line">case 1:</span><br><span class="line">f() &#x2F;&#x2F; 当 i &#x3D;&#x3D; 0 时， f 会被调用！</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还可以使用下面这张写法，逗号分隔多个条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case &#39; &#39;, &#39;?&#39;, &#39;&amp;&#39;, &#39;&#x3D;&#39;, &#39;#&#39;, &#39;+&#39;: ← , as ”or”</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h2><p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200216204755.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h3 id="array、slices-和-map"><a href="#array、slices-和-map" class="headerlink" title="array、slices 和 map"></a>array、slices 和 map</h3><h4 id="array"><a href="#array" class="headerlink" title="array"></a>array</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr &#x3D; [3]int&#123;&#125;</span><br><span class="line">for item :&#x3D; range arr&#123;</span><br><span class="line">    print(item);</span><br><span class="line">&#125;</span><br><span class="line">ss :&#x3D; [...] int&#123;1,2,2,3,4,4&#125;</span><br><span class="line">&#x2F;&#x2F; 初始化</span><br><span class="line">a :&#x3D; [3] int&#123; 1, 2, 3&#125;</span><br><span class="line">ff :&#x3D; [3][2] int &#123; &#123; 1,2 &#125; , &#123; 3,4 &#125; , &#123; 5,6 &#125; &#125;</span><br><span class="line">bb :&#x3D; [3][2] int &#123; [2] int &#123; 1,2 &#125; , [2] int &#123; 3,4 &#125; , [2] int &#123; 5,6 &#125; &#125;</span><br><span class="line">print(a, bb, ss);</span><br></pre></td></tr></table></figure>

<h4 id="slices"><a href="#slices" class="headerlink" title="slices"></a>slices</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slice&#96;总是指向底层的一个&#96;array</span><br></pre></td></tr></table></figure>

<p>总体来说go的语法基本和java相符，但是部分内容需要小心对待，个人不是很爽go语言的部分奇葩语法</p>
<p>slice 总是与一个固定长度的 array 成对出现。其影响 slice 的容量和长度</p>
<p>slice： slice := array[0:n]</p>
<p>对比图；</p>
<p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200217221715.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h5 id="扩展-slice"><a href="#扩展-slice" class="headerlink" title="扩展 slice"></a>扩展 slice</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">append&#96; 和 &#96;copy</span><br></pre></td></tr></table></figure>

<p>函数<code>append</code> 向<code>slice s</code>追加零值或其他 <code>x</code>值，并且返回追加后的新的、与 s 有相同类型的<code>slice</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s0 :&#x3D; [] int &#123; 0, 0 &#125;  </span><br><span class="line">s1 :&#x3D; append (s0, 2) &#x2F;&#x2F;追加一个元素， s1 &#x3D;&#x3D; []int&#123;0, 0, 2&#125; ；</span><br><span class="line">s2 :&#x3D; append (s1, 3, 5, 7) &#x2F;&#x2F;追加多个元素， s2 &#x3D;&#x3D; []int&#123;0, 0, 2, 3, 5, 7&#125; ；</span><br><span class="line">s3 :&#x3D; append (s2, s0...) &#x2F;&#x2F; 追加一个 slice， s3 &#x3D;&#x3D; []int&#123;0, 0, 2, 3, 5, 7, 0, 0&#125; 。注意这三个点！</span><br></pre></td></tr></table></figure>

<p>函数 copy 从源 slice src 复制元素到目标 dst ，并且返回复制的元素的个数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; [...] int &#123; 0, 1, 2, 3, 4, 5, 6, 7 &#125;</span><br><span class="line">var s &#x3D; make ([] int , 6)</span><br><span class="line">n1 :&#x3D; copy (s, a[0:]) ← n1 &#x3D;&#x3D; 6, s &#x3D;&#x3D; []int&#123;0, 1, 2, 3, 4, 5&#125;</span><br><span class="line">n2 :&#x3D; copy (s, s[2:]) ← n2 &#x3D;&#x3D; 4, s &#x3D;&#x3D; []int&#123;2, 3, 4, 5, 4, 5&#125;</span><br></pre></td></tr></table></figure>

<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">monthdays :&#x3D; map [ string ] int &#123;</span><br><span class="line">&quot;Jan&quot;: 31, &quot;Feb&quot;: 28, &quot;Mar&quot;: 31,</span><br><span class="line">&quot;Apr&quot;: 30, &quot;May&quot;: 31, &quot;Jun&quot;: 30,</span><br><span class="line">&quot;Jul&quot;: 31, &quot;Aug&quot;: 31, &quot;Sep&quot;: 30,</span><br><span class="line">&quot;Oct&quot;: 31, &quot;Nov&quot;: 30, &quot;Dec&quot;: 31, ← 逗号是必须的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只做声明的时候：<code>monthdays := make ( map[ string ] int )</code></p>
<p>如何使用：<code>monthdays[&quot;Dec&quot;]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for _, days :&#x3D; range monthdays &#123; ← 键没有使用，因此用 _, days</span><br><span class="line">year +&#x3D; days</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检查元素是否存在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var value int</span><br><span class="line">var present bool</span><br><span class="line">value, present &#x3D; monthdays[&quot;Jan&quot;] ← 如果存在， present 则有值 true</span><br><span class="line">← 或者更接近 Go 的方式</span><br><span class="line">v, ok :&#x3D; monthdays[&quot;Jan&quot;] ← “逗号 ok ”形式</span><br></pre></td></tr></table></figure>

<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="Q1-0-For-loop"><a href="#Q1-0-For-loop" class="headerlink" title="Q1. (0) For-loop"></a>Q1. (0) For-loop</h2><ol>
<li>创建一个基于 for 的简单的循环。使其循环 10 次，并且使用 fmt 包打印出计数 器的值。</li>
<li>用 goto 改写 1 的循环。关键字 for 不可使用。</li>
<li>再次改写这个循环，使其遍历一个 array，并将这个 array 打印到屏幕上。</li>
</ol>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0-func 1-(p mytype) 2-funcname(3- q int ) (r,s int ) &#123; return 0,0 &#125;</span><br></pre></td></tr></table></figure>

<p>. . 0 关键字 func 用于定义一个函数； . . 1 函数可以绑定到特定的类型上。这叫做 接收者 。有接收者的函数被称作 method。 第 5 章将对其进行说明； . . 2 funcname 是你函数的名字； . . 3 int 类型的变量 q 作为输入参数。参数用 pass-by-value 方式传递，意味着它们会 被复制； . . 4 变量 r 和 s 是这个函数的 命名返回值。在 Go 的函数中可以返回多个值。参阅 第 28 页的 “多值返回”。如果不想对返回的参数命名，只需要提供类型： ( int , int ) 。 如果只有一个返回值，可以省略圆括号。如果函数是一个子过程，并且没有任何 返回值，也可以省略这些内容； . . 5 这是函数体。注意 return 是一个语句，所以包裹参数的括号是可选的。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 轻薄本怎么选</title>
    <url>/2020/08/29/note17/</url>
    <content><![CDATA[<h1 id="2020-轻薄本怎么选"><a href="#2020-轻薄本怎么选" class="headerlink" title="2020 轻薄本怎么选"></a>2020 轻薄本怎么选</h1><h2 id="前情提示"><a href="#前情提示" class="headerlink" title="前情提示"></a>前情提示</h2><p><span class="exturl" data-url="aHR0cHM6Ly9wb3N0LnNtemRtLmNvbS9wL2Fkd2dxNDh6Lz9zZW5kX2J5PTIyNzA2Nzg0MjgmYW1wO2Zyb209b3RoZXImYW1wO2ludml0ZV9jb2RlPXpkbTMzZDk2dnNpbnY=" title="https://post.smzdm.com/p/adwgq48z/?send_by=2270678428&amp;from=other&amp;invite_code=zdm33d96vsinv">https://post.smzdm.com/p/adwgq48z/?send_by=2270678428&amp;from=other&amp;invite_code=zdm33d96vsinv<i class="fa fa-external-link"></i></span></p>
<h2 id="追求性价比："><a href="#追求性价比：" class="headerlink" title="追求性价比："></a>追求性价比：</h2><p>2999元：联想扬天V14（AMD）</p>
<p>3400元： 战66（AMD）</p>
<p>3700元：联想小新air14或ThinkPad E14（AMD ）</p>
<p>4200元：小新pro13（AMD）</p>
<p>4500元：ThinkPad T14（AMD）</p>
<p>4700元：惠普战X（AMD）</p>
<p>4999元：华为matebook14（AMD）</p>
<p>4999元：ThinkPad X13（AMD）</p>
<p>5671元：ThinkPad T14s（AMD）</p>
<p>8099元：官翻MacBook pro13（intel），没错，我认为它具备一定性价比</p>
<a id="more"></a>

<h2 id="具有intel平台需求"><a href="#具有intel平台需求" class="headerlink" title="具有intel平台需求"></a>具有intel平台需求</h2><p>3400元： 宏碁 传奇14（intel）</p>
<p>3499元：宏碁 墨舞 14（intel）</p>
<p>4399元：宏碁 蜂鸟3（intel）</p>
<p>5000元以内：戴尔latitude 7300、7400（intel）</p>
<p>5299元：thinkpad S2（intel）</p>
<p>5679元：Matebook 14（intel）</p>
<h3 id="具体分析："><a href="#具体分析：" class="headerlink" title="具体分析："></a>具体分析：</h3><h4 id="联想扬天V14（AMD）"><a href="#联想扬天V14（AMD）" class="headerlink" title="联想扬天V14（AMD）"></a>联想扬天V14（AMD）</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul>
<li><strong>便宜；</strong></li>
<li>3个标准USB接口，内存硬盘可拓展</li>
</ul>
<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><strong>缺点：</strong></h5><ul>
<li>没有typec</li>
<li>电池容量小；</li>
<li>重达2kg</li>
</ul>
<h4 id="3424元-战66三代"><a href="#3424元-战66三代" class="headerlink" title="3424元 战66三代"></a>3424元 战66三代</h4><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>老模具，因此支持2.5寸硬盘拓展，双内存插槽</li>
<li>有屏幕色彩需求可以买高色域版本，400nit 100%srgb还不错</li>
<li>接口齐全：三个标准USB接口，一个全功能typec接口、一个hdmi1.4、一个标准RJ45、一个SD<span class="exturl" data-url="aHR0cHM6Ly93d3cuc216ZG0uY29tL2ZlbmxlaS9kdWthcWkv" title="https://www.smzdm.com/fenlei/dukaqi/">读卡器<i class="fa fa-external-link"></i></span></li>
<li>物理防窥<span class="exturl" data-url="aHR0cHM6Ly93d3cuc216ZG0uY29tL2ZlbmxlaS9zaGV4aWFuZ3RvdS8=" title="https://www.smzdm.com/fenlei/shexiangtou/">摄像头<i class="fa fa-external-link"></i></span></li>
<li>标配防泼溅背光键盘</li>
</ul>
<h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>惠普祖传的垃圾上下方向键；</li>
<li><strong>老模具，所以额头和下巴都很宽，体重和尺寸略次于友商；</strong></li>
<li>45wh电池，续航捉急</li>
<li>HDMI 1.4只支持到4k@30hz，不支持4K@60hz</li>
<li>散热和性能释放捉急，4700u还不如小新的4600u性能强，详见<span class="exturl" data-url="aHR0cHM6Ly93d3cubm90ZWJvb2tjaGVjay5uZXQvSFAtUHJvQm9vay00NDUtRzctbGFwdG9wLXJldmlldy1Nb3ZpbmctZm9yd2FyZC13aXRoLVJlbm9pci40ODMxNDUuMC5odG1s" title="https://www.notebookcheck.net/HP-ProBook-445-G7-laptop-review-Moving-forward-with-Renoir.483145.0.html">notebookcheck的评测<i class="fa fa-external-link"></i></span></li>
</ul>
<h4 id="3234元宏碁-传奇"><a href="#3234元宏碁-传奇" class="headerlink" title="3234元宏碁 传奇"></a>3234元宏碁 传奇</h4><h5 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>屏幕边框很窄</li>
<li><strong>非常轻薄：</strong>重1.2kg、厚15.9mm</li>
<li>wifi6网卡</li>
<li>接口齐全：1个USB2.0，一个USB3.0接口，一个全功能typec接口、一个hdmi、一个<strong>独立电源接口</strong></li>
<li>标配背光键盘</li>
</ul>
<h5 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>屏幕色域低；</li>
<li>板载内存不可更换</li>
</ul>
<h4 id="3459元-宏碁-墨舞"><a href="#3459元-宏碁-墨舞" class="headerlink" title="3459元 宏碁 墨舞"></a>3459元 宏碁 墨舞</h4><h3 id="优点：-3"><a href="#优点：-3" class="headerlink" title="优点："></a>优点：</h3><ul>
<li>一个内存槽可扩展；</li>
<li>接口丰富、Wifi6；</li>
<li>支持SSD+HDD；</li>
<li>180度翻转机身</li>
<li>14寸窄边框IPS；</li>
<li>带一年上门；</li>
</ul>
<h3 id="缺点：-3"><a href="#缺点：-3" class="headerlink" title="缺点："></a>缺点：</h3><ul>
<li>低色域屏幕</li>
</ul>
<h4 id="3649元-小新air14"><a href="#3649元-小新air14" class="headerlink" title="3649元 小新air14"></a>3649元 小新air14</h4><h5 id="优点：-4"><a href="#优点：-4" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>性能释放强</li>
<li>接口配置中规中矩</li>
<li>大电池</li>
<li>高色域屏幕</li>
<li>双通道大内存</li>
</ul>
<h5 id="缺点：-4"><a href="#缺点：-4" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li><p>品控翻车厉害</p>
</li>
<li><p>作为商务办公不是很适合</p>
</li>
<li><p>京东售价比较贵</p>
</li>
</ul>
<h4 id="3699-ThinkPad-E14"><a href="#3699-ThinkPad-E14" class="headerlink" title="3699 ThinkPad E14"></a>3699 ThinkPad E14</h4><h5 id="优点：-5"><a href="#优点：-5" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>默认ssd为2242 pcie3.0 x4，提供2280规格的空余插槽，T系列的2242接口只是pcie3.0 x2；</li>
<li>机身做工不错，而且D壳为镁铝合金，对比之下T14为塑料壳；</li>
<li>板载+内存插槽的配置；</li>
<li>键盘手感不错、指点杆。</li>
</ul>
<h5 id="缺点：-5"><a href="#缺点：-5" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>45wh电池，续航约4小时；</li>
<li>HDMI接口不支持4k@60hz</li>
<li>只有一个typec接口，充电和typec不可兼得</li>
<li>USB接口中阉割一个为USB2.0</li>
<li>250nit低色域屏幕</li>
</ul>
<h4 id="4169元-小新pro13"><a href="#4169元-小新pro13" class="headerlink" title="4169元 小新pro13"></a>4169元 小新pro13</h4><h5 id="优点：-6"><a href="#优点：-6" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>屏幕素质好</li>
<li>续航足</li>
<li>性能释放好， 4800H的处理器</li>
<li>性价比神机</li>
</ul>
<h5 id="缺点：-6"><a href="#缺点：-6" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>接口不足</li>
</ul>
<h4 id="4399元-宏碁蜂鸟3，intel平台真香机"><a href="#4399元-宏碁蜂鸟3，intel平台真香机" class="headerlink" title="4399元 宏碁蜂鸟3，intel平台真香机"></a>4399元 宏碁蜂鸟3，intel平台真香机</h4><h5 id="优点：-7"><a href="#优点：-7" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>屏幕好</li>
<li>3.2的屏幕占比</li>
<li>机身支持0-180度开合角，背光键盘下侧配有指纹识别模块（静态按压式）。接口方面，蜂鸟3支持wifi6，配备1×USB2.0+1×USB3.2 Gen1，1×Thunderbolt3，HDMI<em>1，*</em>具有独立电源口**</li>
</ul>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li>散热问题</li>
<li>性能比较差</li>
</ul>
<h4 id="4450元-ThinkPad-T14-4650u-8G-512G"><a href="#4450元-ThinkPad-T14-4650u-8G-512G" class="headerlink" title="4450元 ThinkPad T14 4650u+8G+512G"></a>4450元 ThinkPad T14 4650u+8G+512G</h4><h5 id="优点：-8"><a href="#优点：-8" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>thinkpad 键盘和指点杆加成</li>
<li>双热管散热系统，实际性能释放优于战66、X13、T14s，弱于小新系列</li>
<li>板载+空余内存插槽</li>
<li>双全功能typec+双usb3.0+HDMI 2.0+标准RJ45接口，接口配置吊打友商</li>
</ul>
<h5 id="缺点：-7"><a href="#缺点：-7" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>250nit45%NTSC低色域屏幕</li>
<li>阉割背光键盘</li>
<li>塑料外壳</li>
<li>阉割2242带宽</li>
</ul>
<h4 id="4799元-惠普-战X-14寸-4650U-16G-512G"><a href="#4799元-惠普-战X-14寸-4650U-16G-512G" class="headerlink" title="4799元 惠普 战X 14寸 4650U+16G+512G"></a>4799元 惠普 战X 14寸 4650U+16G+512G</h4><h5 id="优点：-9"><a href="#优点：-9" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>机身做工好；</li>
<li>内部扩展性和接口扩展性都不错</li>
<li>性价比高</li>
</ul>
<h5 id="缺点：-8"><a href="#缺点：-8" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>电源键和上下方向键设计不合理</li>
<li>单风扇、单根长热管预计散热能力一般</li>
<li>没有RJ45标准网络接口</li>
</ul>
<h4 id="4999元-华为matebook14-锐龙版"><a href="#4999元-华为matebook14-锐龙版" class="headerlink" title="4999元 华为matebook14 锐龙版"></a>4999元 华为matebook14 锐龙版</h4><h5 id="优点：-10"><a href="#优点：-10" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>性能释放出色；</li>
<li>体积重量控制不错；</li>
<li>高屏占比、高素质屏幕；</li>
</ul>
<h5 id="缺点：-9"><a href="#缺点：-9" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>typec和HDMI接口阉割；</li>
<li>摄像头位置太尴尬；</li>
</ul>
<h4 id="4999元-Thinkpad-X13-4650u-16G-512G"><a href="#4999元-Thinkpad-X13-4650u-16G-512G" class="headerlink" title="4999元 Thinkpad X13 4650u+16G+512G"></a>4999元 Thinkpad X13 4650u+16G+512G</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul>
<li>thinkpad 键盘和指点杆加成</li>
<li>镁合金外壳</li>
<li>100%srgb屏幕</li>
<li>双全功能typec+双usb3.0+HDMI 2.0+mini RJ45接口，接口配置吊打友商</li>
</ul>
<h5 id="缺点：-10"><a href="#缺点：-10" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>单热管散热，性能释放捉急；</li>
<li>无背光键盘</li>
</ul>
<h4 id="5299元-S2-2020-i5-10210u-16G-512G-触控"><a href="#5299元-S2-2020-i5-10210u-16G-512G-触控" class="headerlink" title="5299元 S2 2020 i5-10210u+16G+512G+触控"></a>5299元 S2 2020 i5-10210u+16G+512G+触控</h4><h5 id="优点：-11"><a href="#优点：-11" class="headerlink" title="优点："></a><strong>优点：</strong></h5><ul>
<li>背光键盘；</li>
<li>300nit 100%SRGB触屏；</li>
<li>金属A面；</li>
</ul>
<h5 id="缺点：-11"><a href="#缺点：-11" class="headerlink" title="缺点："></a><strong>缺点：</strong></h5><ul>
<li><strong>机身塑料感重；</strong></li>
<li><strong>接口阉割了雷电3；</strong></li>
<li>2020年，低压i5确实性能是一般的</li>
</ul>
<h4 id="5679：Matebook-14（intel）"><a href="#5679：Matebook-14（intel）" class="headerlink" title="5679：Matebook 14（intel）"></a>5679：Matebook 14（intel）</h4><h5 id="优点：-12"><a href="#优点：-12" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>屏幕不错；</li>
<li>一碰传有意思；</li>
</ul>
<h5 id="缺点：-12"><a href="#缺点：-12" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>接口稀少而且规格<strong>营养不良</strong>；</li>
<li>性能释放一般</li>
</ul>
<h4 id="5000以内-戴尔latitude-7300、7400"><a href="#5000以内-戴尔latitude-7300、7400" class="headerlink" title="5000以内 戴尔latitude 7300、7400"></a>5000以内 戴尔latitude 7300、7400</h4><p>不做推荐，因为美版官翻比国行便宜</p>
<h4 id="空缺的海淘XPS13-和海淘X1carbon"><a href="#空缺的海淘XPS13-和海淘X1carbon" class="headerlink" title="空缺的海淘XPS13 和海淘X1carbon"></a>空缺的海淘XPS13 和海淘X1carbon</h4><p>不做推荐</p>
<h4 id="8099元-官翻MacBook-pro13"><a href="#8099元-官翻MacBook-pro13" class="headerlink" title="8099元 官翻MacBook pro13"></a>8099元 官翻MacBook pro13</h4><p>如果买的到确实极具性价比</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>笔记本</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搭建思维导图以及使用</title>
    <url>/2020/07/26/hexo-study1/</url>
    <content><![CDATA[<h1 id="Hexo-搭建思维导图以及使用"><a href="#Hexo-搭建思维导图以及使用" class="headerlink" title="Hexo 搭建思维导图以及使用"></a>Hexo 搭建思维导图以及使用</h1><h2 id="1-Hexo-如何搭建"><a href="#1-Hexo-如何搭建" class="headerlink" title="1. Hexo 如何搭建"></a>1. Hexo 如何搭建</h2><ul>
<li>详细查看Hexo学习博客：</li>
</ul>
<h2 id="2-选择："><a href="#2-选择：" class="headerlink" title="2. 选择："></a>2. 选择：</h2><ul>
<li>百度的kitmap<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9xc2xpLmdpdGh1Yi5pby8yMDE3LzAxLzAxL21hcmtkb3duLW1pbmRtYXAv" title="https://qsli.github.io/2017/01/01/markdown-mindmap/">https://qsli.github.io/2017/01/01/markdown-mindmap/<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li><h2 id="Hexo-思维导图插件"><a href="#Hexo-思维导图插件" class="headerlink" title="Hexo 思维导图插件"></a>Hexo 思维导图插件</h2></li>
<li>为什么使用百度的kityminder<ul>
<li>使用简单</li>
<li>百度开发，使用国内插件</li>
</ul>
</li>
<li>使用hexo思维导图插件的原因<ul>
<li>简单好用</li>
</ul>
</li>
<li>什么是Kityminder<ul>
<li>分成两部分<ul>
<li>kity-core</li>
<li>kity-editor</li>
</ul>
</li>
</ul>
</li>
<li>如何学习kityminder<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9xc2xpLmdpdGh1Yi5pby8yMDE3LzAxLzAxL21hcmtkb3duLW1pbmRtYXAv" title="https://qsli.github.io/2017/01/01/markdown-mindmap/">https://qsli.github.io/2017/01/01/markdown-mindmap/<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li>如何学习hexo 思维导图插件<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC83NTQ2NzQ0MQ==" title="https://zhuanlan.zhihu.com/p/75467441">https://zhuanlan.zhihu.com/p/75467441<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
</ul>
<h2 id="3-使用hexo-插件构建思维导图"><a href="#3-使用hexo-插件构建思维导图" class="headerlink" title="3. 使用hexo 插件构建思维导图"></a>3. 使用hexo 插件构建思维导图</h2><ul>
<li><p>跳转到hexo的目录下面，执行如下命令</p>
<ul>
<li><code>npm install hexo-simple-mindmap</code></li>
</ul>
</li>
<li><p>在博客内部加入如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote mindmap mindmap-md %&#125;</span><br><span class="line">[Hexo 的思维导图插件](https:&#x2F;&#x2F;hunterx.xyz&#x2F;hexo-simple-mindmap-plugin-intro.html)</span><br><span class="line">- 前言</span><br><span class="line">- 使用方法</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4-查看效果"><a href="#4-查看效果" class="headerlink" title="4. 查看效果"></a>4. 查看效果</h2><p>进入文章，即可渲染出对应的思维导图</p>
<h1 id="推荐其他的方式"><a href="#推荐其他的方式" class="headerlink" title="推荐其他的方式"></a>推荐其他的方式</h1><ul>
<li>使用xmind 话思维导图<ul>
<li>为什么？<ul>
<li>软件画图，可以一键生成图片</li>
<li>样式可以调整，不需要切换</li>
<li>简单好用，相对于Markdown编写更为直观</li>
</ul>
</li>
<li>怎么使用xmind<ul>
<li>百度搜索xmind 进入</li>
<li>推荐使用xmind 的升级版本</li>
</ul>
</li>
</ul>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK1.8 日期类</title>
    <url>/2020/07/26/note7/</url>
    <content><![CDATA[<h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a><span class="exturl" data-url="aHR0cHM6Ly9sdzkwMDkyNS5naXRodWIuaW8vamF2YS9qYXZhOC1uZXd0aW1lLWFwaS5odG1s" title="https://lw900925.github.io/java/java8-newtime-api.html">参考博客<i class="fa fa-external-link"></i></span></h1><a id="more"></a>

<h1 id="获取指定时间的上一个工作日和下一个工作日（无判断节假日，调休）"><a href="#获取指定时间的上一个工作日和下一个工作日（无判断节假日，调休）" class="headerlink" title="获取指定时间的上一个工作日和下一个工作日（无判断节假日，调休）"></a>获取指定时间的上一个工作日和下一个工作日（无判断节假日，调休）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 获取指定时间的上一个工作日</span><br><span class="line">     *</span><br><span class="line">     * @param time           指定时间</span><br><span class="line">     * @param formattPattern 格式化参数</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String getPreWorkDay(String time, String formattPattern) &#123;</span><br><span class="line">        DateTimeFormatter dateTimeFormatter &#x3D; generateDefualtPattern(formattPattern);</span><br><span class="line">        LocalDateTime compareTime1 &#x3D; LocalDateTime.parse(time, dateTimeFormatter);</span><br><span class="line">        compareTime1 &#x3D; compareTime1.with(temporal -&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F; 当前日期</span><br><span class="line">            DayOfWeek dayOfWeek &#x3D; DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));</span><br><span class="line">            &#x2F;&#x2F; 正常情况下，每次减去一天</span><br><span class="line">            int dayToMinu &#x3D; 1;</span><br><span class="line">            &#x2F;&#x2F; 如果是周日，减去2天</span><br><span class="line">            if (dayOfWeek &#x3D;&#x3D; DayOfWeek.SUNDAY) &#123;</span><br><span class="line">                dayToMinu &#x3D; 2;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 如果是周六，减去一天</span><br><span class="line">            if (dayOfWeek &#x3D;&#x3D; DayOfWeek.SATURDAY) &#123;</span><br><span class="line">                dayToMinu &#x3D; 1;</span><br><span class="line">            &#125;</span><br><span class="line">            return temporal.minus(dayToMinu, ChronoUnit.DAYS);</span><br><span class="line">        &#125;);</span><br><span class="line">        return compareTime1.format(dateTimeFormatter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取指定时间的下一个工作日</span><br><span class="line">     *</span><br><span class="line">     * @param time           指定时间</span><br><span class="line">     * @param formattPattern 格式参数</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String getNextWorkDay(String time, String formattPattern) &#123;</span><br><span class="line">        DateTimeFormatter dateTimeFormatter &#x3D; generateDefualtPattern(formattPattern);</span><br><span class="line">        LocalDateTime compareTime1 &#x3D; LocalDateTime.parse(time, dateTimeFormatter);</span><br><span class="line">        compareTime1 &#x3D; compareTime1.with(temporal -&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F; 当前日期</span><br><span class="line">            DayOfWeek dayOfWeek &#x3D; DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));</span><br><span class="line">            &#x2F;&#x2F; 正常情况下，每次增加一天</span><br><span class="line">            int dayToAdd &#x3D; 1;</span><br><span class="line">            &#x2F;&#x2F; 如果是星期五，增加三天</span><br><span class="line">            if (dayOfWeek &#x3D;&#x3D; DayOfWeek.FRIDAY) &#123;</span><br><span class="line">                dayToAdd &#x3D; 3;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 如果是星期六，增加两天</span><br><span class="line">            if (dayOfWeek &#x3D;&#x3D; DayOfWeek.SATURDAY) &#123;</span><br><span class="line">                dayToAdd &#x3D; 2;</span><br><span class="line">            &#125;</span><br><span class="line">            return temporal.plus(dayToAdd, ChronoUnit.DAYS);</span><br><span class="line">        &#125;);</span><br><span class="line">        return compareTime1.format(dateTimeFormatter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="LocalDate、LocalTime、LocalDateTime-三者区别"><a href="#LocalDate、LocalTime、LocalDateTime-三者区别" class="headerlink" title="LocalDate、LocalTime、LocalDateTime 三者区别"></a>LocalDate、LocalTime、LocalDateTime 三者区别</h1><p><code>LocalDate</code>：类表示一个具体的日期，但不包含具体时间，也不包含时区信息。可以通过<code>LocalDate</code>的静态方法<code>of()</code>创建一个实例，<code>LocalDate</code>也包含一些方法用来获取年份，月份，天，星期几等</p>
<p><code>LocalTime</code>：和<code>LocalDate</code>类似，区别在于包含具体时间</p>
<p><code>LocalDateTime</code>：<code>LocalDateTime</code>类是<code>LocalDate</code>和<code>LocalTime</code>的结合体，可以通过<code>of()</code>方法直接创建，也可以调用<code>LocalDate</code>的<code>atTime()</code>方法或<code>LocalTime</code>的<code>atDate()</code>方法将<code>LocalDate</code>或<code>LocalTime</code>合并成一个<code>LocalDateTime</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LocalDateTime ldt1 &#x3D; LocalDateTime.of(2017, Month.JANUARY, 4, 17, 23, 52);</span><br><span class="line"></span><br><span class="line">LocalDate localDate &#x3D; LocalDate.of(2017, Month.JANUARY, 4);</span><br><span class="line">LocalTime localTime &#x3D; LocalTime.of(17, 23, 52);</span><br><span class="line">LocalDateTime ldt2 &#x3D; localDate.atTime(localTime);</span><br></pre></td></tr></table></figure>

<h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><h3 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a><code>Instant</code></h3><p><code>Instant</code>用于表示一个时间戳，它与我们常使用的<code>System.currentTimeMillis()</code>有些类似，不过<code>Instant</code>可以精确到纳秒（Nano-Second）</p>
<blockquote>
<p>注意： 内部使用了两个常量，<code>seconds</code>表示从1970-01-01 00:00:00开始到现在的秒数，<code>nanos</code>表示纳秒部分（<code>nanos</code>的值不会超过<code>999,999,999</code>）</p>
</blockquote>
<h3 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a><code>Duration</code></h3><p><code>Duration</code>的内部实现与<code>Instant</code>类似，也是包含两部分：<code>seconds</code>表示秒，<code>nanos</code>表示纳秒。两者的区别是<code>Instant</code>用于表示一个时间戳（或者说是一个时间点），而<code>Duration</code>表示一个时间段</p>
<h3 id="Period"><a href="#Period" class="headerlink" title="Period"></a><code>Period</code></h3><p><code>Period</code>在概念上和<code>Duration</code>类似，区别在于<code>Period</code>是以年月日来衡量一个时间段，比如2年3个月6天：</p>
<h1 id="问题1：错误"><a href="#问题1：错误" class="headerlink" title="问题1：错误"></a>问题1：错误</h1><p>报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Text &#39;2020-09-01&#39; could not be parsed: Unable to obtain LocalDateTime from TemporalAccessor: &#123;&#125;,ISO resolved to 2020-09-01 of type java.time.format.Parsed</span><br></pre></td></tr></table></figure>

<p>##　解决办法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_28988969&#x2F;article&#x2F;details&#x2F;90610580</span><br></pre></td></tr></table></figure>

<h1 id="问题2：-学习jdk1-8-的时间"><a href="#问题2：-学习jdk1-8-的时间" class="headerlink" title="问题2： 学习jdk1.8 的时间"></a>问题2： 学习jdk1.8 的时间</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mNGFiZTFlMzhlMDk=" title="https://www.jianshu.com/p/f4abe1e38e09">https://www.jianshu.com/p/f4abe1e38e09<i class="fa fa-external-link"></i></span></p>
<h1 id="问题3-关于js端口的时间格式化问题"><a href="#问题3-关于js端口的时间格式化问题" class="headerlink" title="问题3: 关于js端口的时间格式化问题"></a>问题3: 关于js端口的时间格式化问题</h1><p>问题： new Date() 方法如何当前设备的时间是错的会出现问题</p>
<h1 id="问题4：-时间比较的问题"><a href="#问题4：-时间比较的问题" class="headerlink" title="问题4： 时间比较的问题"></a>问题4： 时间比较的问题</h1><p>比较的常用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;格式化日期</span><br><span class="line">var format &#x3D; function (time, format) &#123;</span><br><span class="line">    var t &#x3D; new Date(time);</span><br><span class="line">    var tf &#x3D; function (i) &#123;</span><br><span class="line">        return (i &lt; 10 ? &#39;0&#39; : &#39;&#39;) + i</span><br><span class="line">    &#125;;</span><br><span class="line">    return format.replace(&#x2F;yyyy|MM|dd|HH|mm|ss&#x2F;g, function (a) &#123;</span><br><span class="line">        switch (a) &#123;</span><br><span class="line">            case &#39;yyyy&#39;:</span><br><span class="line">                return tf(t.getFullYear());</span><br><span class="line">                break;</span><br><span class="line">            case &#39;MM&#39;:</span><br><span class="line">                return tf(t.getMonth() + 1);</span><br><span class="line">                break;</span><br><span class="line">            case &#39;mm&#39;:</span><br><span class="line">                return tf(t.getMinutes());</span><br><span class="line">                break;</span><br><span class="line">            case &#39;dd&#39;:</span><br><span class="line">                return tf(t.getDate());</span><br><span class="line">                break;</span><br><span class="line">            case &#39;HH&#39;:</span><br><span class="line">                return tf(t.getHours());</span><br><span class="line">                break;</span><br><span class="line">            case &#39;ss&#39;:</span><br><span class="line">                return tf(t.getSeconds());</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        ;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="问题5：调用format出现Text-39-2020-06-02-15-22-22-39-could-not-be-parsed-unparsed-text-found-at-index-10"><a href="#问题5：调用format出现Text-39-2020-06-02-15-22-22-39-could-not-be-parsed-unparsed-text-found-at-index-10" class="headerlink" title="问题5：调用format出现Text &#39;2020-06-02 15:22:22&#39; could not be parsed, unparsed text found at index 10"></a>问题5：调用format出现<code>Text &#39;2020-06-02 15:22:22&#39; could not be parsed, unparsed text found at index 10</code></h1><p>问题原因：使用错误的格式去格式字符串，比如<code>yyyy-MM-dd</code> 格式化 <code>2020-05-12 12:15:33</code> 这种格式就会出现溢出 解决办法：使用正确的格式即可</p>
<p>学习参考</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sdzkwMDkyNS5naXRodWIuaW8vamF2YS9qYXZhOC1uZXd0aW1lLWFwaS5odG1s" title="https://lw900925.github.io/java/java8-newtime-api.html">https://lw900925.github.io/java/java8-newtime-api.html<i class="fa fa-external-link"></i></span></p>
<p>关于格式化的问题</p>
<ol>
<li>对于上面几个问题的根本解决办法 原因：因为localdatetime 在进行格式化的时候如何case没有找到对应的格式，那么就会出现类似<code>unsupport</code>方法</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 生成默认的格式器</span><br><span class="line">     *</span><br><span class="line">     * @param timeFormat 指定格式</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static DateTimeFormatter generateDefualtPattern(String timeFormat) &#123;</span><br><span class="line">        return new DateTimeFormatterBuilder().appendPattern(timeFormat)</span><br><span class="line">                .parseDefaulting(ChronoField.HOUR_OF_DAY, 1)</span><br><span class="line">                .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 1)</span><br><span class="line">                .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)</span><br><span class="line">                .toFormatter(Locale.CHINA);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><h1 id="问题6：关于DateTimeParseException"><a href="#问题6：关于DateTimeParseException" class="headerlink" title="问题6：关于DateTimeParseException"></a>问题6：关于DateTimeParseException</h1></li>
</ol>
<p>参考了下面到异常日志，根本的原因是<code>DateTimeFormatter</code>格式化没有<code>HH</code>选项，需要根据问题5的解决方式进行处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.time.format.DateTimeParseException: Text &#39;2017-02-02 08:59:12&#39; could not be parsed: Unable to obtain LocalDateTime from TemporalAccessor: &#123;MinuteOfHour&#x3D;59, NanoOfSecond&#x3D;0, SecondOfMinute&#x3D;12, MicroOfSecond&#x3D;0, MilliOfSecond&#x3D;0, HourOfAmPm&#x3D;8&#125;,ISO resolved to 2017-02-02 of type java.time.format.Parsed</span><br></pre></td></tr></table></figure>

<p>StackFlow地址：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDM3MzI3NTEvZGF0ZXRpbWVwYXJzZWV4Y2VwdGlvbi10ZXh0LWNvdWxkLW5vdC1iZS1wYXJzZWQtdW5hYmxlLXRvLW9idGFpbi1sb2NhbGRhdGV0aW1l" title="https://stackoverflow.com/questions/43732751/datetimeparseexception-text-could-not-be-parsed-unable-to-obtain-localdatetime">DateTimeParseException: Text could not be parsed: Unable to obtain LocalDateTime from TemporalAccessor<i class="fa fa-external-link"></i></span></p>
<p>StackFlow地址：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDM3MzI3NTEvZGF0ZXRpbWVwYXJzZWV4Y2VwdGlvbi10ZXh0LWNvdWxkLW5vdC1iZS1wYXJzZWQtdW5hYmxlLXRvLW9idGFpbi1sb2NhbGRhdGV0aW1lP3JxPTE=" title="https://stackoverflow.com/questions/43732751/datetimeparseexception-text-could-not-be-parsed-unable-to-obtain-localdatetime?rq=1">StackFlow无法解析文本：无法从TemporalAccessor获取LocalDateTime<i class="fa fa-external-link"></i></span></p>
<p>StackFlow地址：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjc0NTQwMjUvdW5hYmxlLXRvLW9idGFpbi1sb2NhbGRhdGV0aW1lLWZyb20tdGVtcG9yYWxhY2Nlc3Nvci13aGVuLXBhcnNpbmctbG9jYWxkYXRldGltZQ==" title="https://stackoverflow.com/questions/27454025/unable-to-obtain-localdatetime-from-temporalaccessor-when-parsing-localdatetime">解析LocalDateTime（Java 8）时，无法从TemporalAccessor获取LocalDateTime<i class="fa fa-external-link"></i></span></p>
<h1 id="其他问题收集"><a href="#其他问题收集" class="headerlink" title="其他问题收集"></a>其他问题收集</h1><h2 id="关于LocalDate-class的一个坑"><a href="#关于LocalDate-class的一个坑" class="headerlink" title="关于LocalDate.class的一个坑"></a>关于LocalDate.class的一个坑</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjMwNjkzNzAvZm9ybWF0LWEtZGF0ZS11c2luZy10aGUtbmV3LWRhdGUtdGltZS1hcGkvMjMwNjk0MDg=" title="https://stackoverflow.com/questions/23069370/format-a-date-using-the-new-date-time-api/23069408">关于LocalDate一些源码分析<i class="fa fa-external-link"></i></span></p>
<p>直接上源代码</p>
<ol>
<li><code>LocalDate</code>仅代表一个日期，而不代表DateTime。因此，在格式化时，“ HH：mm：ss”是毫无意义的</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private int get0(TemporalField field) &#123;</span><br><span class="line">        switch ((ChronoField) field) &#123;</span><br><span class="line">            case DAY_OF_WEEK: return getDayOfWeek().getValue();</span><br><span class="line">            case ALIGNED_DAY_OF_WEEK_IN_MONTH: return ((day - 1) % 7) + 1;</span><br><span class="line">            case ALIGNED_DAY_OF_WEEK_IN_YEAR: return ((getDayOfYear() - 1) % 7) + 1;</span><br><span class="line">            case DAY_OF_MONTH: return day;</span><br><span class="line">            case DAY_OF_YEAR: return getDayOfYear();</span><br><span class="line">            case EPOCH_DAY: throw new UnsupportedTemporalTypeException(&quot;Invalid field &#39;EpochDay&#39; for get() method, use getLong() instead&quot;);</span><br><span class="line">            case ALIGNED_WEEK_OF_MONTH: return ((day - 1) &#x2F; 7) + 1;</span><br><span class="line">            case ALIGNED_WEEK_OF_YEAR: return ((getDayOfYear() - 1) &#x2F; 7) + 1;</span><br><span class="line">            case MONTH_OF_YEAR: return month;</span><br><span class="line">            case PROLEPTIC_MONTH: throw new UnsupportedTemporalTypeException(&quot;Invalid field &#39;ProlepticMonth&#39; for get() method, use getLong() instead&quot;);</span><br><span class="line">            case YEAR_OF_ERA: return (year &gt;&#x3D; 1 ? year : 1 - year);</span><br><span class="line">            case YEAR: return year;</span><br><span class="line">            case ERA: return (year &gt;&#x3D; 1 ? 1 : 0);</span><br><span class="line">        &#125;</span><br><span class="line">        throw new UnsupportedTemporalTypeException(&quot;Unsupported field: &quot; + field);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="格式化问题"><a href="#格式化问题" class="headerlink" title="格式化问题:"></a>格式化问题:</h2><p>调用DateFomatter 有可能的报错，基本是由于使用错误到格式或者使用错误的时间类</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzkwMzM1MjUvZXJyb3ItamF2YS10aW1lLWZvcm1hdC1kYXRldGltZXBhcnNlZXhjZXB0aW9uLWNvdWxkLW5vdC1iZS1wYXJzZWQtdW5wYXJzZWQtdGV4" title="https://stackoverflow.com/questions/39033525/error-java-time-format-datetimeparseexception-could-not-be-parsed-unparsed-tex">Error java.time.format.DateTimeParseException: could not be parsed, unparsed text found at index 10<i class="fa fa-external-link"></i></span></p>
<h1 id="侠说java8-LocalDateTime等时间使用手册（全）"><a href="#侠说java8-LocalDateTime等时间使用手册（全）" class="headerlink" title="侠说java8-LocalDateTime等时间使用手册（全）"></a>侠说java8-LocalDateTime等时间使用手册（全）</h1><p>侠说java8-LocalDateTime等时间使用手册（全），先mark后看 学习分享Java容器服务器：<span class="exturl" data-url="aHR0cHM6Ly9haWppc2h1LmNvbS9hLzEwNjAwMDAwMDAwODc3OTM=" title="https://aijishu.com/a/1060000000087793">https://aijishu.com/a/1060000000087793<i class="fa fa-external-link"></i></span></p>
<h1 id="源码个人解读"><a href="#源码个人解读" class="headerlink" title="源码个人解读"></a>源码个人解读</h1><h2 id="TemporalAccessor"><a href="#TemporalAccessor" class="headerlink" title="TemporalAccessor"></a>TemporalAccessor</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.time.temporal.TemporalAccessor</span><br></pre></td></tr></table></figure>

<p>翻译:</p>
<blockquote>
<p>框架级别的接口定义对时间对象（例如日期，时间，偏移量或这些的某种组合）的只读访问。 这是日期，时间和偏移对象的基本接口类型。它由可以提供信息作为字段或查询的那些类实现。 大多数日期和时间信息可以表示为数字。使用TemporalField对它们进行建模，并使用长号保留数字以处理较大的值。年，月和月日是字段的简单示例，但它们还包括即时数和偏移量。有关标准字段集，请参见ChronoField。 日期/时间信息不能用数字表示两个日期/时间信息。可以使用TemporalQuery上定义的静态方法通过查询来访问它们。 子接口Temporal将这个定义扩展到一个还支持对更完整的临时对象进行调整和操纵的定义。 该接口是框架级别的接口，不应在应用程序代码中广泛使用。相反，应用程序应创建并传递具体类型的实例，例如LocalDate。造成这种情况的原因很多，部分原因是该接口的实现可能在ISO以外的日历系统中。请参阅java.time.chrono.ChronoLocalDate以获得有关该问题的更完整讨论。</p>
</blockquote>
<h3 id="接口方法：isSupported"><a href="#接口方法：isSupported" class="headerlink" title="接口方法：isSupported()"></a>接口方法：isSupported()</h3><p>方法签名：<code>boolean isSupported(TemporalField field);</code></p>
<blockquote>
<p>检查是否支持指定的字段。 这检查是否可以查询指定字段的日期时间。 如果为false，则调用range和get方法将引发异常。</p>
<p>参数： field –要检查的字段，null返回false 返回值： 如果可以查询该日期时间，则为true，否则为false implSpec： 实现必须检查并处理ChronoField中定义的所有字段。 如果支持该字段，则必须返回true，否则必须返回false。 如果该字段不是ChronoField，则通过调用TemporalField.isSupportedBy（TemporalAccessor）并将其作为参数来获取此方法的结果。 实现必须确保在调用此只读方法时，不会更改任何可观察的状态。</p>
</blockquote>
<h3 id="接口方法：range-TemporalField-field"><a href="#接口方法：range-TemporalField-field" class="headerlink" title="接口方法：range(TemporalField field)"></a>接口方法：range(TemporalField field)</h3><p>方法签名：<code>ValueRange range(TemporalField field)</code></p>
<blockquote>
<p>获取指定字段的有效值范围。 所有字段都可以表示为长整数。此方法返回一个对象，该对象描述该值的有效范围。该时间对象的值用于增强返回范围的准确性。如果日期时间不能返回范围，则由于该字段不受支持或出于其他原因，将引发异常。 请注意，结果仅描述了最小和最大有效值，重要的是不要过多地阅读这些值。例如，在该范围内可能存在对该字段无效的值。</p>
<p>参数： field –查询范围的字段，不为null 返回值： 该字段的有效值范围，不为null 抛出： DateTimeException-如果无法获取该字段的范围 UnsupportedTemporalTypeException-如果不支持该字段 implSpec： 实现必须检查并处理ChronoField中定义的所有字段。如果支持该字段，则必须返回该字段的范围。如果不受支持，则必须引发UnsupportedTemporalTypeException。 如果该字段不是ChronoField，则通过调用TemporalField.rangeRefinedBy（TemporalAccessorl）并将其作为参数来获取此方法的结果。 实现必须确保在调用此只读方法时，不会更改任何可观察的状态。 默认实现必须与以下代码等效： if（ChronoField的instance字段）{if（isSupported（field））{return field.range（）; }抛出新的UnsupportedTemporalTypeException（“不支持的字段：” +字段）； } return field.rangeRefinedBy（this）;</p>
</blockquote>
<h3 id="接口方法：int-get-TemporalField-field"><a href="#接口方法：int-get-TemporalField-field" class="headerlink" title="接口方法：int get(TemporalField field)"></a>接口方法：int get(TemporalField field)</h3><blockquote>
<p>以int形式获取指定字段的值。 这将查询日期时间以获取指定字段的值。返回的值将始终在该字段的值的有效范围内。如果日期时间由于该字段不受支持或出于某些其他原因而无法返回该值，则将引发异常。</p>
<p>参数： field-要获取的字段，不为null 返回值： 有效值范围内的字段值 抛出： DateTimeException-如果无法获取该字段的值或该值超出该字段的有效值范围 UnsupportedTemporalTypeException-如果不支持该字段或值的范围超出int ArithmeticException-如果发生数字溢出 implSpec： 实现必须检查并处理ChronoField中定义的所有字段。如果该字段受支持并且具有int范围，则必须返回该字段的值。如果不受支持，则必须引发UnsupportedTemporalTypeException。 如果该字段不是ChronoField，则通过调用TemporalField.getFrom（TemporalAccessor）并将其作为参数来获取此方法的结果。 实现必须确保在调用此只读方法时，不会更改任何可观察的状态。 默认实现必须与以下代码等效： if（range（field）.isIntValue（））{返回range（field）.checkValidIntValue（getLong（field），field）; }抛出新的UnsupportedTemporalTypeException（“无效字段” +字段+“ +对于get（）方法，请使用getLong（）代替”）；</p>
</blockquote>
<h3 id="接口方法：default-R-query-TemporalQuery-query"><a href="#接口方法：default-R-query-TemporalQuery-query" class="headerlink" title="接口方法：default  R query(TemporalQuery query)"></a>接口方法：default <R> R query(TemporalQuery<R> query)</h3><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JDK1.8</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 迁移备份</title>
    <url>/2020/07/26/hexoback/</url>
    <content><![CDATA[<h1 id="创建Git分支将Hexo博客迁移到其它电脑"><a href="#创建Git分支将Hexo博客迁移到其它电脑" class="headerlink" title="创建Git分支将Hexo博客迁移到其它电脑"></a>创建Git分支将Hexo博客迁移到其它电脑</h1><h2 id="迁移前准备：安装hexo博客必要的软件"><a href="#迁移前准备：安装hexo博客必要的软件" class="headerlink" title="迁移前准备：安装hexo博客必要的软件"></a>迁移前准备：安装hexo博客必要的软件</h2><ul>
<li>下载安装Git客户端</li>
<li>安装node js</li>
<li>从git 仓库拉去原来的项目</li>
</ul>
<a id="more"></a>

<h2 id="采取方式"><a href="#采取方式" class="headerlink" title="采取方式"></a>采取方式</h2><ol>
<li>采取新建仓库的方式</li>
<li>分支存放源代码</li>
</ol>
<blockquote>
<p>git clone <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhenlUaW1lcy9sYXp5VGltZXMuZ2l0aHViLmlvLmdpdA==" title="https://github.com/lazyTimes/lazyTimes.github.io.git">https://github.com/lazyTimes/lazyTimes.github.io.git<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="必备文件"><a href="#必备文件" class="headerlink" title="必备文件"></a>必备文件</h2><table>
<thead>
<tr>
<th align="left">文件(夹)</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">scaffolds/</td>
<td align="left">博客文章模板</td>
</tr>
<tr>
<td align="left">source/</td>
<td align="left">所有的博客文章</td>
</tr>
<tr>
<td align="left">themes/</td>
<td align="left">网站主题</td>
</tr>
<tr>
<td align="left">.gitignore</td>
<td align="left">push时需忽略的文件</td>
</tr>
<tr>
<td align="left">_config.yml</td>
<td align="left">站点配置文件</td>
</tr>
<tr>
<td align="left">package.json</td>
<td align="left">依赖包的名称和版本号</td>
</tr>
</tbody></table>
<h2 id="备份流程"><a href="#备份流程" class="headerlink" title="备份流程"></a>备份流程</h2><h3 id="1-拉取已经部署上去的项目"><a href="#1-拉取已经部署上去的项目" class="headerlink" title="1. 拉取已经部署上去的项目"></a>1. 拉取已经部署上去的项目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;lazyTimes&#x2F;lazyTimes.github.io.git</span><br></pre></td></tr></table></figure>

<h3 id="2-拷贝需要备份的元数据"><a href="#2-拷贝需要备份的元数据" class="headerlink" title="2. 拷贝需要备份的元数据"></a>2. 拷贝需要备份的<code>元数据</code></h3><p>具体查看上方的必备文件</p>
<p>参考截图:</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200726154723.png" alt=""></p>
<h3 id="3-删除主题的-git-配置"><a href="#3-删除主题的-git-配置" class="headerlink" title="3. 删除主题的.git 配置"></a>3. 删除主题的.git 配置</h3><p>执行如下命令删除不必要的内容</p>
<p><code>rm -rf thems/next/.git*</code></p>
<h3 id="4-创建名为hexo的分支"><a href="#4-创建名为hexo的分支" class="headerlink" title="4. 创建名为hexo的分支"></a>4. 创建名为hexo的分支</h3><p><code>git checkout -b hexo</code></p>
<h3 id="5-把文件存放到暂存区"><a href="#5-把文件存放到暂存区" class="headerlink" title="5. 把文件存放到暂存区"></a>5. 把文件存放到暂存区</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></table></figure>

<h3 id="6-提交变更"><a href="#6-提交变更" class="headerlink" title="6. 提交变更"></a>6. 提交变更</h3><p>先提交所有的改动内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;hexo-2&quot;</span><br></pre></td></tr></table></figure>

<p>然后使用如下命令把内容推送到分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果没有在Git config 设置用户名和密码，推送的时候会提示设置，根据提示设置用户名和密码即可</p>
</blockquote>
<h3 id="7-源码推到分支上"><a href="#7-源码推到分支上" class="headerlink" title="7. 源码推到分支上"></a>7. 源码推到分支上</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;xxxx&quot;</span><br><span class="line">$ git push origin hexo</span><br></pre></td></tr></table></figure>

<h2 id="更加推荐的方式"><a href="#更加推荐的方式" class="headerlink" title="更加推荐的方式"></a>更加推荐的方式</h2><p>为了保证我们的源码的一些敏感配置不泄露，建议使用私有仓库进行存储，接下来说一下私有仓库的配置方式</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK源码解读</title>
    <url>/2020/07/26/jdkym/</url>
    <content><![CDATA[<h1 id="深入理解JVM虚拟机-JDK源码解读"><a href="#深入理解JVM虚拟机-JDK源码解读" class="headerlink" title="深入理解JVM虚拟机 - JDK源码解读"></a>深入理解JVM虚拟机 - JDK源码解读</h1><p>《深入理解JVM虚拟机》看过了好几遍了，对于编译一个JDK源码有很强的冲动。这里主要实战使用<strong>阿里云</strong>进行编译实战</p>
<ul>
<li>为什么使用阿里云？<ul>
<li>个人电脑奋斗四年了，装虚拟机莫名其妙的死机</li>
<li>阿里云带宽1M，只能用来干些LInux学习的工作</li>
</ul>
</li>
<li>参考博客：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzZiOWE0NzZmYjlhMDQ5YzMwYmNlYmQ=" title="https://juejin.im/post/5c6b9a476fb9a049c30bcebd">https://juejin.im/post/5c6b9a476fb9a049c30bcebd<i class="fa fa-external-link"></i></span></li>
</ul>
<a id="more"></a>

<h2 id="JDK源码下载-openJDK7u75"><a href="#JDK源码下载-openJDK7u75" class="headerlink" title="JDK源码下载 - openJDK7u75"></a>JDK源码下载 - openJDK7u75</h2><ul>
<li>地址：<span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5qYXZhLm5ldC9vcGVuamRrL2pkazd1NzUvcmkvb3Blbmpkay03dTc1LXNyYy1iMTMtMThfZGVjXzIwMTQuemlw" title="https://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-src-b13-18_dec_2014.zip">https://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-src-b13-18_dec_2014.zip<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="Bootstrap-JDK"><a href="#Bootstrap-JDK" class="headerlink" title="Bootstrap JDK"></a>Bootstrap JDK</h2><ul>
<li><p>编译OpenJDK7需要 Bootstrap JDK U14 之后的版本</p>
</li>
<li><p>地址：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9qYXZhL2phdmFzZS9kb3dubG9hZHMvamF2YS1hcmNoaXZlLWRvd25sb2Fkcy1qYXZhc2U3LTUyMTI2MS5odG1s" title="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html">https://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html<i class="fa fa-external-link"></i></span></p>
<ul>
<li>下载 <code>linux.tag.gz包</code></li>
</ul>
</li>
<li><p>有条件尽量科学上网下载比较慢</p>
</li>
</ul>
<h2 id="Apach-Ant-1-7-1版本"><a href="#Apach-Ant-1-7-1版本" class="headerlink" title="Apach Ant 1.7.1版本"></a>Apach Ant 1.7.1版本</h2><ul>
<li>地址：<span class="exturl" data-url="aHR0cHM6Ly9hbnQuYXBhY2hlLm9yZy9iaW5kb3dubG9hZC5jZ2k=" title="https://ant.apache.org/bindownload.cgi">https://ant.apache.org/bindownload.cgi<i class="fa fa-external-link"></i></span></li>
<li>还需要一个apach ant 1.7.1 版本</li>
<li>这里选择了: 1.9.14版本</li>
</ul>
<h2 id="前置依赖："><a href="#前置依赖：" class="headerlink" title="前置依赖："></a>前置依赖：</h2><ul>
<li>OpenJDK要用到很多的gcc，java，c的库函数，需要进行前置准备</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install build-essential gawk m4 openjdk6-jdk libasound2-print-dev binutils libmotif3 libmotif-dev ant</span><br><span class="line">yum install libX* #有可能会缺失的库，先提前安装</span><br></pre></td></tr></table></figure>

<h2 id="首次编译"><a href="#首次编译" class="headerlink" title="首次编译"></a>首次编译</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入到openjdk的目录</span><br><span class="line">cd openjdk所在目录</span><br><span class="line"># 解压</span><br><span class="line">unzip openjdk</span><br><span class="line"># 编译</span><br><span class="line">cd open jdk</span><br><span class="line"># 第一次编译，输出到对应文件</span><br><span class="line">make sanity &gt; error.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>不出所料，编译失败了，我们可以根据错误日志来进行调整</li>
<li>根据错误，整理一下错误点</li>
<li>下面参考书籍的内容进行设置</li>
</ul>
<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><ul>
<li><p>gcc 4.3 版本以上</p>
</li>
<li><p>必须设置两个</p>
<ul>
<li>LANG：编译语言</li>
<li>ALT_BOOTDIR：Bootstrap JDK 1.7 的版本</li>
</ul>
</li>
<li><p>设置环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANG&#x3D;C</span><br><span class="line">export ALT_BOOTDIR&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;jdk1.7.0_80</span><br></pre></td></tr></table></figure>
</li>
<li><p>去掉原本的JDK环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unset JAVA_HOME</span><br><span class="line">unset CLASSPATH</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="OpenJDK-错误处理"><a href="#OpenJDK-错误处理" class="headerlink" title="OpenJDK 错误处理"></a>OpenJDK 错误处理</h2><h3 id="错误1：-缺少打印-Cups-依赖"><a href="#错误1：-缺少打印-Cups-依赖" class="headerlink" title="错误1： 缺少打印 Cups 依赖"></a>错误1： 缺少打印 Cups 依赖</h3><p>错误信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: You do not have access to valid Cups header files. </span><br><span class="line">       Please check your access to </span><br><span class="line">           &#x2F;usr&#x2F;include&#x2F;cups&#x2F;cups.h </span><br><span class="line">       and&#x2F;or check your value of ALT_CUPS_HEADERS_PATH, </span><br><span class="line">       CUPS is frequently pre-installed on many systems, </span><br><span class="line">       or may be downloaded from http:&#x2F;&#x2F;www.cups.org</span><br></pre></td></tr></table></figure>

<p>处理方式：</p>
<p>缺少<code>cups</code>打印框架，解决：</p>
<ol>
<li>可以根据如下命令查找</li>
</ol>
<p><code>yum search cups</code> 查找对应依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; N&#x2F;S matched: cups &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">apcupsd-cgi.x86_64 : Web interface for apcupsd</span><br><span class="line">apcupsd-gui.x86_64 : GUI interface for apcupsd</span><br><span class="line">bluez-cups.x86_64 : CUPS printer backend for Bluetooth printers</span><br><span class="line">cups.x86_64 : CUPS printing system</span><br><span class="line">cups-bjnp.x86_64 : CUPS backend for the Canon BJNP network printers</span><br><span class="line">cups-client.x86_64 : CUPS printing system - client programs</span><br><span class="line">cups-devel.i686 : CUPS printing system - development environment</span><br><span class="line">cups-devel.x86_64 : CUPS printing system - development environment</span><br><span class="line">cups-filesystem.noarch : CUPS printing system - directory layout</span><br><span class="line">cups-filters.x86_64 : OpenPrinting CUPS filters and backends</span><br><span class="line">cups-filters-devel.i686 : OpenPrinting CUPS filters and backends - development environment</span><br><span class="line">cups-filters-devel.x86_64 : OpenPrinting CUPS filters and backends - development environment</span><br><span class="line">cups-filters-libs.i686 : OpenPrinting CUPS filters and backends - cupsfilters and fontembed libraries</span><br><span class="line">cups-filters-libs.x86_64 : OpenPrinting CUPS filters and backends - cupsfilters and fontembed libraries</span><br><span class="line">cups-ipptool.x86_64 : CUPS printing system - tool for performing IPP requests</span><br><span class="line">cups-libs.x86_64 : CUPS printing system - libraries</span><br><span class="line">cups-libs.i686 : CUPS printing system - libraries</span><br><span class="line">cups-lpd.x86_64 : CUPS printing system - lpd emulation</span><br><span class="line">cups-pdf.x86_64 : Extension for creating pdf-Files with CUPS</span><br><span class="line">cups-x2go.noarch : CUPS backend for printing from X2Go</span><br><span class="line">dymo-cups-drivers.x86_64 : DYMO LabelWriter Drivers for CUPS</span><br><span class="line">ghostscript-cups.x86_64 : CUPS filter for interpreting PostScript and PDF</span><br><span class="line">gutenprint-cups.x86_64 : CUPS drivers for Canon, Epson, HP and compatible printers</span><br><span class="line">perl-Net-CUPS.x86_64 : Perl bindings to the CUPS C API Interface</span><br><span class="line">python-cups.x86_64 : Python bindings for CUPS</span><br><span class="line">python-cups-doc.x86_64 : Documentation for python-cups</span><br><span class="line">python3-cups-doc.x86_64 : Documentation for python-cups</span><br><span class="line">python34-cups.x86_64 : Python 3 bindings for CUPS API, known as pycups</span><br><span class="line">python36-cups.x86_64 : Python 3 bindings for CUPS API, known as pycups</span><br><span class="line">apcupsd.x86_64 : APC UPS Power Control Daemon</span><br><span class="line">cups-pk-helper.x86_64 : A helper that makes system-config-printer use PolicyKit</span><br><span class="line">foomatic-filters.x86_64 : CUPS print filters for the foomatic package</span><br><span class="line">samba-krb5-printing.x86_64 : Samba CUPS backend for printing with Kerberos</span><br><span class="line"></span><br><span class="line">  Name and summary matches only, use &quot;search all&quot; for everything.</span><br></pre></td></tr></table></figure>

<ol>
<li>安装Cups</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install cups-devel.x86_64</span><br></pre></td></tr></table></figure>

<h3 id="错误2：-缺少-Freetype-依赖"><a href="#错误2：-缺少-Freetype-依赖" class="headerlink" title="错误2： 缺少 Freetype 依赖"></a>错误2： 缺少 Freetype 依赖</h3><p>报错情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: FreeType version  2.3.0  or higher is required. </span><br><span class="line"> make[2]: 进入目录“&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;jdk&#x2F;make&#x2F;tools&#x2F;freetypecheck”</span><br><span class="line">&#x2F;bin&#x2F;mkdir -p &#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;build&#x2F;linux-amd64&#x2F;btbins</span><br><span class="line">rm -f &#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;build&#x2F;linux-amd64&#x2F;btbins&#x2F;freetype_versioncheck</span><br><span class="line">make[2]: 离开目录“&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;jdk&#x2F;make&#x2F;tools&#x2F;freetypecheck”</span><br><span class="line">Failed to build freetypecheck.</span><br></pre></td></tr></table></figure>

<p>处理方式：</p>
<ol>
<li><code>yum search freetype</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; N&#x2F;S matched: freetype &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">freetype-demos.x86_64 : A collection of FreeType demos</span><br><span class="line">freetype-devel.i686 : FreeType development libraries and header files</span><br><span class="line">freetype-devel.x86_64 : FreeType development libraries and header files</span><br><span class="line">mingw32-freetype-static.noarch : Static version of the MinGW Windows Freetype library</span><br><span class="line">mingw64-freetype-static.noarch : Static version of the MinGW Windows Freetype library</span><br><span class="line">python-freetype.noarch : Freetype python bindings</span><br><span class="line">freetype.x86_64 : A free and portable font rendering engine</span><br><span class="line">freetype.i686 : A free and portable font rendering engine</span><br><span class="line">ftgl.x86_64 : OpenGL frontend to Freetype 2</span><br><span class="line">mingw32-freetype.noarch : Free and portable font rendering engine</span><br><span class="line">mingw64-freetype.noarch : Free and portable font rendering engine</span><br></pre></td></tr></table></figure>

<ol>
<li>执行命令<code>yum install freetype-devel.x86_64 -y</code></li>
</ol>
<h3 id="错误3：缺少声卡Alsa依赖，需要安装"><a href="#错误3：缺少声卡Alsa依赖，需要安装" class="headerlink" title="错误3：缺少声卡Alsa依赖，需要安装"></a>错误3：缺少声卡Alsa依赖，需要安装</h3><p>错误信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: You seem to not have installed ALSA 0.9.1 or higher. </span><br><span class="line">       Please install ALSA (drivers and lib). You can download the </span><br><span class="line">       source distribution from http:&#x2F;&#x2F;www.alsa-project.org or go to </span><br><span class="line">       http:&#x2F;&#x2F;www.freshrpms.net&#x2F;docs&#x2F;alsa&#x2F; for precompiled RPM packages.</span><br></pre></td></tr></table></figure>

<p>处理方式：</p>
<ol>
<li><code>yum search alsa</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; N&#x2F;S matched: alsa &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">alsa-firmware.noarch : Firmware for several ALSA-supported sound cards</span><br><span class="line">alsa-lib.x86_64 : The Advanced Linux Sound Architecture (ALSA) library</span><br><span class="line">alsa-lib.i686 : The Advanced Linux Sound Architecture (ALSA) library</span><br><span class="line">alsa-lib-devel.i686 : Development files from the ALSA library</span><br><span class="line">alsa-lib-devel.x86_64 : Development files from the ALSA library</span><br><span class="line">alsa-plugins-arcamav.i686 : Arcam AV amplifier plugin for ALSA</span><br><span class="line">alsa-plugins-arcamav.x86_64 : Arcam AV amplifier plugin for ALSA</span><br><span class="line">alsa-plugins-maemo.i686 : Maemo plugin for ALSA</span><br><span class="line">alsa-plugins-maemo.x86_64 : Maemo plugin for ALSA</span><br><span class="line">alsa-plugins-oss.i686 : Oss PCM output plugin for ALSA</span><br><span class="line">alsa-plugins-oss.x86_64 : Oss PCM output plugin for ALSA</span><br><span class="line">alsa-plugins-pulseaudio.i686 : Alsa to PulseAudio backend</span><br><span class="line">alsa-plugins-pulseaudio.x86_64 : Alsa to PulseAudio backend</span><br><span class="line">alsa-plugins-samplerate.i686 : External rate converter plugin for ALSA</span><br><span class="line">alsa-plugins-samplerate.x86_64 : External rate converter plugin for ALSA</span><br><span class="line">alsa-plugins-upmix.i686 : Upmixer channel expander plugin for ALSA</span><br><span class="line">alsa-plugins-upmix.x86_64 : Upmixer channel expander plugin for ALSA</span><br><span class="line">alsa-plugins-usbstream.i686 : USB stream plugin for ALSA</span><br><span class="line">alsa-plugins-usbstream.x86_64 : USB stream plugin for ALSA</span><br><span class="line">alsa-plugins-vdownmix.i686 : Downmixer to stereo plugin for ALSA</span><br><span class="line">alsa-plugins-vdownmix.x86_64 : Downmixer to stereo plugin for ALSA</span><br><span class="line">alsa-tools.x86_64 : Specialist tools for ALSA</span><br><span class="line">alsa-tools-firmware.x86_64 : ALSA tools for uploading firmware to some soundcards</span><br><span class="line">alsa-utils.x86_64 : Advanced Linux Sound Architecture (ALSA) utilities</span><br><span class="line">alsa-plugins-speex.i686 : Rate Converter Plugin Using Speex Resampler</span><br><span class="line">alsa-plugins-speex.x86_64 : Rate Converter Plugin Using Speex Resampler</span><br></pre></td></tr></table></figure>

<ol>
<li>安装依赖：<code>yum -y install alsa-lib* alsa-util*</code></li>
</ol>
<h3 id="错误4：缺少Ant依赖"><a href="#错误4：缺少Ant依赖" class="headerlink" title="错误4：缺少Ant依赖"></a>错误4：缺少Ant依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: The version of ant being used is older than </span><br><span class="line">       the required version of &#39;1.7.1&#39;. </span><br><span class="line">       The version of ant found was &#39;&#39;.</span><br></pre></td></tr></table></figure>

<p>处理方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ant -y</span><br></pre></td></tr></table></figure>

<h3 id="错误5：缺少C语言环境变量"><a href="#错误5：缺少C语言环境变量" class="headerlink" title="错误5：缺少C语言环境变量"></a>错误5：缺少C语言环境变量</h3><p>错误信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WARNING: LANG has been set to zh_CN.UTF-8, this can cause build failures. </span><br><span class="line">         Try setting LANG to &#39;C&#39;.</span><br></pre></td></tr></table></figure>

<p>处理方式：</p>
<ol>
<li><code>export LANG=C</code>设置C语言环境</li>
</ol>
<h2 id="第二次编译"><a href="#第二次编译" class="headerlink" title="第二次编译"></a>第二次编译</h2><p>需要再次输入命令<code>make santify</code> ，知道看到如下信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sanity check passed.</span><br></pre></td></tr></table></figure>

<h2 id="编写启动脚本"><a href="#编写启动脚本" class="headerlink" title="编写启动脚本"></a>编写启动脚本</h2><ul>
<li>经过上面的测试，再根据JVM虚拟机的内容，编写了下面一个通用的命令脚本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 语言选项，必须设置，否者编译之后会出现一个HashTable槽的错误的NPE的错</span><br><span class="line">export LANG&#x3D;C</span><br><span class="line"># Bootstrap JDK 的安装路径</span><br><span class="line">export ALT_BOOTDIR&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;jdk1.7.0_80</span><br><span class="line"># 允许自动下载数据</span><br><span class="line">export ALLOW_DOWNLOADS&#x3D;true</span><br><span class="line">#并行编译的线程数，设置为和CPU内核数量一致即可</span><br><span class="line"></span><br><span class="line">export HOTSPOT_BUILD_JOBS&#x3D;6</span><br><span class="line"></span><br><span class="line">export ALT_PARALLEL_COMPILE_JOBS&#x3D;6</span><br><span class="line"></span><br><span class="line">#比较本次build出来的映像与先前版本的差异。这对我们来说没有意义，</span><br><span class="line"></span><br><span class="line">#必须设置为false，否则sanity检查会报缺少先前版本JDK的映像的错误提示。</span><br><span class="line"></span><br><span class="line">#如果已经设置dev或者DEV_ONLY&#x3D;true，这个不显式设置也行</span><br><span class="line"></span><br><span class="line">export SKIP_COMPARE_IMAGES&#x3D;true</span><br><span class="line"></span><br><span class="line">#使用预编译头文件，不加这个编译会更慢一些</span><br><span class="line"></span><br><span class="line">export USE_PRECOMPILED_HEADER&#x3D;true</span><br><span class="line"></span><br><span class="line">#要编译的内容</span><br><span class="line"></span><br><span class="line">export BUILD_LANGTOOLS&#x3D;true</span><br><span class="line"></span><br><span class="line">#export BUILD_JAXP&#x3D;false</span><br><span class="line"></span><br><span class="line">#export BUILD_JAXWS&#x3D;false</span><br><span class="line"></span><br><span class="line">#export BUILD_CORBA&#x3D;false</span><br><span class="line"></span><br><span class="line">export BUILD_HOTSPOT&#x3D;true</span><br><span class="line"></span><br><span class="line">export BUILD_JDK&#x3D;true</span><br><span class="line"></span><br><span class="line">#要编译的版本</span><br><span class="line"></span><br><span class="line">#export SKIP_DEBUG_BUILD&#x3D;false</span><br><span class="line"></span><br><span class="line">#export SKIP_FASTDEBUG_BUILD&#x3D;true</span><br><span class="line"></span><br><span class="line">#export DEBUG_NAME&#x3D;debug</span><br><span class="line"></span><br><span class="line">#把它设置为false可以避开javaws和浏览器Java插件之类的部分的build</span><br><span class="line"></span><br><span class="line">BUILD_DEPLOY&#x3D;false</span><br><span class="line"></span><br><span class="line">#把它设置为false就不会build出安装包。因为安装包里有些奇怪的依赖，</span><br><span class="line"></span><br><span class="line">#但即便不build出它也已经能得到完整的JDK映像，所以还是别build它好了</span><br><span class="line"></span><br><span class="line">BUILD_INSTALL&#x3D;false</span><br><span class="line"></span><br><span class="line">#编译结果所存放的路径</span><br><span class="line"></span><br><span class="line">export ALT_OUTPUTDIR&#x3D;&#x2F;Users&#x2F;IcyFenix&#x2F;Develop&#x2F;JVM&#x2F;jdkBuild&#x2F;openjdk_7u4&#x2F;build</span><br><span class="line"></span><br><span class="line">#这两个环境变量必须去掉，不然会有很诡异的事情发生（我没有具体查过这些&quot;诡异的</span><br><span class="line">#事情&quot;，Makefile脚本检查到有这2个变量就会提示警告）</span><br><span class="line"></span><br><span class="line">unset JAVA_HOME</span><br><span class="line"></span><br><span class="line">unset CLASSPATH</span><br><span class="line"></span><br><span class="line">make 2＞＆1|tee $ALT_OUTPUTDIR&#x2F;build.log</span><br></pre></td></tr></table></figure>

<h3 id="启动脚本参考："><a href="#启动脚本参考：" class="headerlink" title="启动脚本参考："></a>启动脚本参考：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语言选项，这个必须设置，否则编译好后会出现一个HashTable的NPE错</span><br><span class="line">export LANG&#x3D;C</span><br><span class="line"></span><br><span class="line">#Bootstrap JDK的安装路径。必须设置。 </span><br><span class="line">export ALT_BOOTDIR&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.7.0_04</span><br><span class="line"></span><br><span class="line">#允许自动下载依赖</span><br><span class="line">export ALLOW_DOWNLOADS&#x3D;true</span><br><span class="line"></span><br><span class="line">#并行编译的线程数，设置为和CPU内核数量一致即可</span><br><span class="line">export HOTSPOT_BUILD_JOBS&#x3D;4</span><br><span class="line">export ALT_PARALLEL_COMPILE_JOBS&#x3D;4</span><br><span class="line"></span><br><span class="line">#比较本次build出来的映像与先前版本的差异。这个对我们来说没有意义，必须设置为false，否则sanity检查会报缺少先前版本JDK的映像。如果有设置dev或者DEV_ONLY&#x3D;true的话这个不显式设置也行。 </span><br><span class="line">export SKIP_COMPARE_IMAGES&#x3D;true</span><br><span class="line"></span><br><span class="line">#使用预编译头文件，不加这个编译会更慢一些</span><br><span class="line">export USE_PRECOMPILED_HEADER&#x3D;true</span><br><span class="line"></span><br><span class="line">#要编译的内容</span><br><span class="line">export BUILD_LANGTOOLS&#x3D;true </span><br><span class="line">#export BUILD_JAXP&#x3D;false</span><br><span class="line">#export BUILD_JAXWS&#x3D;false </span><br><span class="line">#export BUILD_CORBA&#x3D;false</span><br><span class="line">export BUILD_HOTSPOT&#x3D;true </span><br><span class="line">export BUILD_JDK&#x3D;true</span><br><span class="line"></span><br><span class="line">#要编译的版本</span><br><span class="line">#export SKIP_DEBUG_BUILD&#x3D;false</span><br><span class="line">#export SKIP_FASTDEBUG_BUILD&#x3D;true</span><br><span class="line">#export DEBUG_NAME&#x3D;debug</span><br><span class="line"></span><br><span class="line">#把它设置为false可以避开javaws和浏览器Java插件之类的部分的build。 </span><br><span class="line">BUILD_DEPLOY&#x3D;false</span><br><span class="line"></span><br><span class="line">#把它设置为false就不会build出安装包。因为安装包里有些奇怪的依赖，但即便不build出它也已经能得到完整的JDK映像，所以还是别build它好了。</span><br><span class="line">BUILD_INSTALL&#x3D;false</span><br><span class="line"></span><br><span class="line">#这两个环境变量必须去掉，不然会有很诡异的事情发生（我没有具体查过这些“”诡异的事情”，Makefile脚本检查到有这2个变量就会提示警告“）</span><br><span class="line">unset JAVA_HOME</span><br><span class="line">unset CLASSPATH</span><br><span class="line"></span><br><span class="line">make 2&gt;&amp;1 | tee $ALT_OUTPUTDIR&#x2F;build.log</span><br></pre></td></tr></table></figure>

<h3 id="个人版本"><a href="#个人版本" class="headerlink" title="个人版本:"></a>个人版本:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANG&#x3D;C</span><br><span class="line">export ALT_BOOTDIR&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;jdk1.7</span><br><span class="line">export ALLOW_DOWNLOADS&#x3D;true</span><br><span class="line">export HOTSPOT_BUILD_JOBDS&#x3D;1</span><br><span class="line">export ALT_PARALLEL_COMPILE_JOBS&#x3D;1</span><br><span class="line">export SKIP_COMPARE_IMAGES&#x3D;true</span><br><span class="line">export USE_PRECOMPLIED_HEADER&#x3D;true</span><br><span class="line">export BUILD_LANGTOOLS&#x3D;true</span><br><span class="line">export BUILD_JAXP&#x3D;false</span><br><span class="line">export BUILD_JAXWS&#x3D;false</span><br><span class="line">export BUILD_CORBA&#x3D;false</span><br><span class="line">export BUILD_HOTSPOT&#x3D;true</span><br><span class="line">export BUILD_JDK&#x3D;true</span><br><span class="line"></span><br><span class="line">export SKIP_DEBUG_BUILD&#x3D;false</span><br><span class="line">export SKIP_FASTDEBUG_BUILD&#x3D;true</span><br><span class="line">export DEBUG_NAME&#x3D;debug</span><br><span class="line"></span><br><span class="line">BUILD_DEPLOY&#x3D;false</span><br><span class="line">BUILD_INSTALL&#x3D;false</span><br><span class="line"></span><br><span class="line">unset JAVA_HOME</span><br><span class="line">unset CLASSPATH</span><br><span class="line"></span><br><span class="line">make 2&gt;&amp;1 | tee &#x2F;usr&#x2F;local&#x2F;software&#x2F;build.log</span><br></pre></td></tr></table></figure>

<h2 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h2><ul>
<li><p>使用上一节写好的脚本</p>
</li>
<li><p>运行下面的命令</p>
<ul>
<li><code>chmod +x run.sh</code></li>
<li><code>./run.sh</code></li>
</ul>
</li>
<li><p>经过多次尝试，现在出现如下报错：</p>
<p><code>g++: internal compiler error: Killed (program cc1plus)</code></p>
</li>
<li><p>处理方式</p>
<ul>
<li>内存不足，需要扩充内存</li>
</ul>
</li>
</ul>
<h2 id="问题收集："><a href="#问题收集：" class="headerlink" title="问题收集："></a>问题收集：</h2><h3 id="1-编译过程突然报错，报错信息如下"><a href="#1-编译过程突然报错，报错信息如下" class="headerlink" title="1. 编译过程突然报错，报错信息如下"></a>1. 编译过程突然报错，报错信息如下</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g++: internal compiler error: Killed (program cc1plus)</span><br><span class="line">Please submit a full bug report,</span><br><span class="line">with preprocessed source if appropriate.</span><br><span class="line">See &lt;http:&#x2F;&#x2F;bugzilla.redhat.com&#x2F;bugzilla&gt; for instructions.</span><br><span class="line">make[7]: *** [ad_x86_64.o] Error 4</span><br><span class="line">make[7]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;build&#x2F;linux-amd64-debug&#x2F;hotspot&#x2F;outputdir&#x2F;linux_amd64_compiler2&#x2F;jvmg&#39;</span><br><span class="line">make[6]: *** [the_vm] Error 2</span><br><span class="line">make[6]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;build&#x2F;linux-amd64-debug&#x2F;hotspot&#x2F;outputdir&#x2F;linux_amd64_compiler2&#x2F;jvmg&#39;</span><br><span class="line">make[5]: *** [jvmg] Error 2</span><br><span class="line">make[5]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;build&#x2F;linux-amd64-debug&#x2F;hotspot&#x2F;outputdir&#39;</span><br><span class="line">make[4]: *** [generic_build2] Error 2</span><br><span class="line">make[4]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;hotspot&#x2F;make&#39;</span><br><span class="line">make[3]: *** [jvmg] Error 2</span><br><span class="line">make[3]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#x2F;hotspot&#x2F;make&#39;</span><br><span class="line">make[2]: *** [hotspot-build] Error 2</span><br><span class="line">make[2]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#39;</span><br><span class="line">make[1]: *** [generic_debug_build] Error 2</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;usr&#x2F;local&#x2F;software&#x2F;openjdk&#39;</span><br><span class="line">make: *** [build_debug_image] Error 2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分析原因：</p>
<ol>
<li>可能是阿里云买的最低配，导致编译的时候内存爆了</li>
<li>Bootstrap JDK版本和书本的不一致，尝试按照书本一模一样的方式处理</li>
<li>脚本建议手敲，复制黏贴容易错误</li>
</ol>
</blockquote>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppdG9uZ19jY251L2FydGljbGUvZGV0YWlscy81MDE0OTc1Nw==" title="https://blog.csdn.net/zitong_ccnu/article/details/50149757">https://blog.csdn.net/zitong_ccnu/article/details/50149757<i class="fa fa-external-link"></i></span> CenterOS7 编译OpenJDK7</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmJzbWF4LmNvbS9BL0dCSnJLTGE1MGUv" title="https://www.bbsmax.com/A/GBJrKLa50e/">https://www.bbsmax.com/A/GBJrKLa50e/<i class="fa fa-external-link"></i></span> 案例2</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9obGx2bS1ncm91cC5pdGV5ZS5jb20vZ3JvdXAvdG9waWMvMzU4MDM=" title="https://hllvm-group.iteye.com/group/topic/35803">https://hllvm-group.iteye.com/group/topic/35803<i class="fa fa-external-link"></i></span> JVM的一些讨论，值得看看</p>
<h1 id="处理问题的几个套路"><a href="#处理问题的几个套路" class="headerlink" title="处理问题的几个套路"></a>处理问题的几个套路</h1><h2 id="套路一：缺少依赖，却不知道安装的具体内容"><a href="#套路一：缺少依赖，却不知道安装的具体内容" class="headerlink" title="套路一：缺少依赖，却不知道安装的具体内容"></a>套路一：缺少依赖，却不知道安装的具体内容</h2><p>当提示缺少依赖，而你不知道要<code>yum install</code>什么时，你可以根据提示关键字搜一下<code>yum search</code>，然后在搜出的结果列表中，对有着相同前缀的依赖使用后缀通配符一键下载</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>JDK 1.8 LAMBADA表达式</title>
    <url>/2020/09/25/note27/</url>
    <content><![CDATA[<h1 id="Lambada-表达式资料参考"><a href="#Lambada-表达式资料参考" class="headerlink" title="Lambada 表达式资料参考"></a>Lambada 表达式资料参考</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>现在的工作当中对于jdk1.8的lambada表达式使用越来越频繁，但是对于内部的一些细节却不是特别的清楚</p>
<p>这里借鉴了几篇博客，对比了之后对于博客到推荐进行了排序，同时也整理了这几篇博客提到的个人觉得比较重要到部分进行了验证</p>
<a id="more"></a>

<h2 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h2><p><strong><span class="exturl" data-url="aHR0cHM6Ly9vYmpjb2RpbmcuY29tLzIwMTkvMDMvMDQvbGFtYmRhLw==" title="https://objcoding.com/2019/03/04/lambda/">https://objcoding.com/2019/03/04/lambda/<i class="fa fa-external-link"></i></span></strong> 一篇博客，介绍的比较到位，虽然文章很长但是通篇看完完全没有想点右上角的冲动</p>
<h2 id="第二篇"><a href="#第二篇" class="headerlink" title="第二篇"></a>第二篇</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWJjOWNjYzZmYjlhMDI4ZDY2NDNlZWE=" title="https://juejin.im/post/5abc9ccc6fb9a028d6643eea">https://juejin.im/post/5abc9ccc6fb9a028d6643eea<i class="fa fa-external-link"></i></span></p>
<p>关于lambada的十个案例</p>
<h3 id="重点部分："><a href="#重点部分：" class="headerlink" title="重点部分："></a>重点部分：</h3><h4 id="Q：如何在lambda表达式中加入谓词？"><a href="#Q：如何在lambda表达式中加入谓词？" class="headerlink" title="Q：如何在lambda表达式中加入谓词？"></a>Q：如何在lambda表达式中加入谓词？</h4><h3 id="A：解答"><a href="#A：解答" class="headerlink" title="A：解答"></a>A：解答</h3><p>首先代码如下，按照个人理解，其实本质就是把用户的操作“拼接”，包括筛选，合并等操作，依赖<code>java.util.function.Predicate</code>此接口实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 甚至可以用and()、or()逻辑函数来合并Predicate，</span><br><span class="line">&#x2F;&#x2F; 例如要找到所有以J开始，长度为四个字母的名字，你可以合并两个Predicate并传入</span><br><span class="line">Predicate&lt;String&gt; startsWithJ &#x3D; (n) -&gt; n.startsWith(&quot;J&quot;);</span><br><span class="line">Predicate&lt;String&gt; fourLetterLong &#x3D; (n) -&gt; n.length() &#x3D;&#x3D; 4;</span><br><span class="line">names.stream()</span><br><span class="line">    .filter(startsWithJ.and(fourLetterLong))</span><br><span class="line">    .forEach((n) -&gt; System.out.print(&quot;nName, which starts with &#39;J&#39; and four letter long is : &quot; + n));</span><br></pre></td></tr></table></figure>

<h2 id="第三篇"><a href="#第三篇" class="headerlink" title="第三篇"></a>第三篇</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwOTE4NjUwOQ==" title="https://segmentfault.com/a/1190000009186509">https://segmentfault.com/a/1190000009186509<i class="fa fa-external-link"></i></span></p>
<p>关于lambada的一个详解</p>
<blockquote>
<p>版权声明：本文由<em>吴仙杰</em>创作整理，转载请注明出处：<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwOTE4NjUwOQ==" title="https://segmentfault.com/a/1190000009186509">https://segmentfault.com/a/1190000009186509<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="第四篇"><a href="#第四篇" class="headerlink" title="第四篇"></a>第四篇</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS93ZWJmb2xkZXIvdGVjaG5ldHdvcmsvdHV0b3JpYWxzL29iZS9qYXZhL0xhbWJkYS1RdWlja1N0YXJ0L2luZGV4Lmh0bWw=" title="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html">https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html<i class="fa fa-external-link"></i></span></p>
<p>Oracale官方案例</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JlbmZ1ZmVpL2FydGljbGUvZGV0YWlscy8yNDYwMDUwNw==" title="https://blog.csdn.net/renfufei/article/details/24600507">https://blog.csdn.net/renfufei/article/details/24600507<i class="fa fa-external-link"></i></span></p>
<p>比较久远到一个文章，更多是批判的角度看待lambada</p>
<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ol>
<li>介绍了stream 的基本概念<ol>
<li>简写的依据 - 函数接口 和类型推断机制</li>
</ol>
</li>
<li>函数式编程和匿名内部类的区别<ol>
<li>使用上区别</li>
<li>JVM上的本质区别</li>
</ol>
</li>
<li>JDK8 对于容器到扩展方法，其中部分是为了配合函数式编程而出现的<ol>
<li>Collections</li>
<li>Map</li>
</ol>
</li>
<li>Stream API 介绍stream 的常用方法以及基本特性<ol>
<li><code>sort()</code></li>
<li></li>
</ol>
</li>
<li>stream内部实现的简单了解<ol>
<li>用户的操作如何记录？</li>
<li>操作如何叠加？</li>
<li>叠加之后的操作如何执行？</li>
<li>执行后的结果（如果有）在哪里？</li>
</ol>
</li>
</ol>
<h2 id="重点部分"><a href="#重点部分" class="headerlink" title="重点部分"></a>重点部分</h2><h3 id="Q：匿名内部类和lambada表达式的关键区别"><a href="#Q：匿名内部类和lambada表达式的关键区别" class="headerlink" title="Q：匿名内部类和lambada表达式的关键区别"></a>Q：匿名内部类和lambada表达式的关键区别</h3><h3 id="A-回答"><a href="#A-回答" class="headerlink" title="A 回答"></a>A 回答</h3><h4 id="this的指向对象"><a href="#this的指向对象" class="headerlink" title="this的指向对象"></a><strong>this</strong>的指向对象</h4><ul>
<li>匿名内部类：<code>this</code> 指向的是匿名内部类的所属对象</li>
<li>lambada：<code>this</code> 指向当前运行的类，也就是当前运行的对象</li>
</ul>
<h4 id="jvm层面"><a href="#jvm层面" class="headerlink" title="jvm层面"></a>jvm层面</h4><ul>
<li>匿名内部类：会生成一个 <code>$1</code>到匿名内部类的对象，使用<code>new</code>指令生成对象并且执行</li>
<li>lambada：会生成一个私有方法，使用<code>invokedynamic</code>指令调用</li>
</ul>
<p>匿名内部类的编译过程</p>
<p>为了更好到理解，自己做了一个实验</p>
<ol>
<li>创建一个基本的匿名内部类到方法</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200505103819.png?ynotemdtimestamp=1601045594695" alt="img"></p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 匿名内部类和lambada的区别</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Test</span><br><span class="line">    public void test1() throws InterruptedException &#123;</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                String name &#x3D; Thread.currentThread().getName();</span><br><span class="line">                System.err.println(name + &quot; is run as a thread &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>查看classes ，可以看到编译后的class 文件如下，看到明显多出来一个<code>LambadaTest1$1.class</code> 这事啥东西？</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200505103923.png?ynotemdtimestamp=1601045594695" alt="img"></p>
<ol>
<li>打开<code>cmd</code>使用<code>cd</code>命令移动到改目录下面</li>
</ol>
<blockquote>
<p>小技巧1：</p>
<p>编译后到classes 如果想要直接查看class 文件的反编译到内容，可以直接把class 文件拖拽到 idea 里面进行打开，就可以看到class 到反编译内容<del>~</del></p>
</blockquote>
<ol>
<li>反编译的内容如下，可以看到匿名内部类的编译后的内容经过解释之后，<strong>实际上是创建了一个匿名内部类的对象</strong></li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200505104143.png?ynotemdtimestamp=1601045594695" alt="img"></p>
<ol>
<li>在第一步的基础上，我们除了打印线程的名称，还可以打印<code>this</code> 看一下匿名内部类的this 是啥东西，我打印之后得到到匿名内部类的 this 如下: <code>com.jdk.lambada.LambadaTest1$1@2fd014c6</code></li>
</ol>
<blockquote>
<p>小技巧2：</p>
<p>如何使用javap 查看java的汇编指令呢？</p>
<p>以上面到案例为例：</p>
<ol>
<li>打开<code>cmd</code>，进入对应的class目录，我们可以执行<code>javap &lt;options&gt; &lt;classes&gt;</code>的格式进行翻译操作</li>
<li>执行<code>javap -c -l -p xxx</code>，得到结果:</li>
</ol>
<p>选项的含义？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-help  --help  -?        输出此用法消息</span><br><span class="line">-version                 版本信息，其实是当前javap所在jdk的版本信息，不是class在哪个jdk下生成的。</span><br><span class="line">-v  -verbose             输出附加信息（包括行号、本地变量表，反汇编等详细信息）</span><br><span class="line">-l                         输出行号和本地变量表</span><br><span class="line">-public                    仅显示公共类和成员</span><br><span class="line">-protected               显示受保护的&#x2F;公共类和成员</span><br><span class="line">-package                 显示程序包&#x2F;受保护的&#x2F;公共类 和成员 (默认)</span><br><span class="line">-p  -private             显示所有类和成员</span><br><span class="line">-c                       对代码进行反汇编</span><br><span class="line">-s                       输出内部类型签名</span><br><span class="line">-sysinfo                 显示正在处理的类的系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">-constants               显示静态最终常量</span><br><span class="line">-classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">-bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure>
</blockquote>
<ol>
<li>为了更进一步了解底层的jvm指令执行，使用<code>javap -c -l -p xxx</code>反编译结果如下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Compiled from &quot;LambadaTest1.java&quot;</span><br><span class="line">public class com.jdk.lambada.LambadaTest1 &#123;</span><br><span class="line">  public com.jdk.lambada.LambadaTest1();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 11: 0</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       5     0  this   Lcom&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1;</span><br><span class="line"></span><br><span class="line">  public void test1() throws java.lang.InterruptedException;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  &#x2F;&#x2F; class java&#x2F;lang&#x2F;Thread</span><br><span class="line">       3: dup</span><br><span class="line">       4: new           #3                  &#x2F;&#x2F; class com&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1$1</span><br><span class="line">       7: dup</span><br><span class="line">       8: aload_0</span><br><span class="line">       9: invokespecial #4                  &#x2F;&#x2F; Method com&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1$1.&quot;&lt;init&gt;&quot;:(Lcom&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1;)V</span><br><span class="line">      12: invokespecial #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.&quot;&lt;init&gt;&quot;:(Ljava&#x2F;lang&#x2F;Runnable;)V</span><br><span class="line">      15: invokevirtual #6                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.start:()V</span><br><span class="line">      18: ldc2_w        #7                  &#x2F;&#x2F; long 2000l</span><br><span class="line">      21: invokestatic  #9                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.sleep:(J)V</span><br><span class="line">      24: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 19: 0</span><br><span class="line">      line 24: 15</span><br><span class="line">      line 25: 18</span><br><span class="line">      line 27: 24</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0      25     0  this   Lcom&#x2F;jdk&#x2F;lambada&#x2F;LambadaTest1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现，匿名内部类使用了 <code>new</code>到指令来实现匿名对象的生成，调用<code>invokespecial</code>执行内部的<code>run</code>方法</p>
<p>接下来我们看下Lambada简写上面的匿名内部类代码</p>
<p>lambada表达式编译过程</p>
<ol>
<li>和上面的流程类似，这里直接略过一些不必要的点，代码如下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @program: lambada</span><br><span class="line"> * @description: 测试jdk1.8</span><br><span class="line"> * @author: zhaoxudong</span><br><span class="line"> * @create: 2020-05-05 11:42</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            System.err.println(&quot; test&quot; + Thread.currentThread().getName() + &quot; is run as a thread &quot; );</span><br><span class="line">        &#125;).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(5L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>同样的，我们先把class文件放到<code>idea</code>下面查看反编译之后到代码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="line">&#x2F;&#x2F; (powered by Fernflower decompiler)</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public Test() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        (new Thread(() -&gt; &#123;</span><br><span class="line">            System.err.println(&quot; test&quot; + Thread.currentThread().getName() + &quot; is run as a thread &quot;);</span><br><span class="line">        &#125;)).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(5L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>打开class所在目录，我们会发现lambada并没有像匿名内部类一样创建了一个$1 的对象，那么他是如何实现的？</li>
<li>我们使用<code>javap -c -l -p xxx</code> 翻译class 得到到结果如下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">  public Test();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 9: 0</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       5     0  this   LTest;</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]) throws java.lang.InterruptedException;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  &#x2F;&#x2F; class java&#x2F;lang&#x2F;Thread</span><br><span class="line">       3: dup</span><br><span class="line">       4: invokedynamic #3,  0              &#x2F;&#x2F; InvokeDynamic #0:run: ()Ljava&#x2F;lang&#x2F;Runnable;</span><br><span class="line">       9: invokespecial #4                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.&quot;&lt;init&gt;&quot;:(Ljava&#x2F;lang&#x2F;Runnable;)V</span><br><span class="line">      12: invokevirtual #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.start:()V</span><br><span class="line">      15: getstatic     #6                  &#x2F;&#x2F; Field java&#x2F;util&#x2F;concurrent&#x2F;TimeUnit.SECONDS:Ljava&#x2F;util&#x2F;concurrent&#x2F;TimeUnit;</span><br><span class="line">      18: ldc2_w        #7                  &#x2F;&#x2F; long 5l</span><br><span class="line">      21: invokevirtual #9                  &#x2F;&#x2F; Method java&#x2F;util&#x2F;concurrent&#x2F;TimeUnit.sleep:(J)V</span><br><span class="line">      24: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 12: 0</span><br><span class="line">      line 14: 12</span><br><span class="line">      line 15: 15</span><br><span class="line">      line 16: 24</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0      25     0  args   [Ljava&#x2F;lang&#x2F;String;</span><br><span class="line"></span><br><span class="line">  private static void lambda$main$0();</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #10                 &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.err:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">       3: new           #11                 &#x2F;&#x2F; class java&#x2F;lang&#x2F;StringBuilder</span><br><span class="line">       6: dup</span><br><span class="line">       7: invokespecial #12                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">      10: ldc           #13                 &#x2F;&#x2F; String  test</span><br><span class="line">      12: invokevirtual #14                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      15: invokestatic  #15                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.currentThread:()Ljava&#x2F;lang&#x2F;Thread;</span><br><span class="line">      18: invokevirtual #16                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.getName:()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">      21: invokevirtual #14                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      24: ldc           #17                 &#x2F;&#x2F; String  is run as a thread</span><br><span class="line">      26: invokevirtual #14                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      29: invokevirtual #18                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.toString:()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">      32: invokevirtual #19                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">      35: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 13: 0</span><br><span class="line">      line 14: 35</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对比匿名内部类和lambada表达式可以明显发现，Lambada的不同在于使用了<code>私有方法</code> 加上 <code>invokedynamic</code>指令进行编译，而不会产生一个匿名内部类的对象class文件。</p>
<ol>
<li>我们可以看下Lambada的 <code>this</code>打印的是什么东西</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            System.err.println(&quot; test&quot; + Thread.currentThread().getName() + &quot; is run as a thread &quot; );</span><br><span class="line">            System.err.println(&quot;lambada this is &#x3D; &quot; + this);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(5L);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>这里惊讶的发现,编译居然无法通过！！！！</strong></p>
<p>我们再对比使用匿名内部类的方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    new Thread(new Runnable() &#123;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            String name &#x3D; Thread.currentThread().getName();</span><br><span class="line">            System.err.println(name + &quot; is run as a thread &quot; + this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    Thread.sleep(2000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此方式可以正常编译通过并且运行，由此我们可以发现lambada的<code>this</code> 和匿名内部类的 <code>this</code>有着本质的区别</p>
<ol>
<li>我们无法使用正常到方式打印this, 我们换一种方式，这里稍微调整代码，最后的代码如下:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @program: lambada</span><br><span class="line"> * @description: 测试jdk1.8</span><br><span class="line"> * @author: zhaoxudong</span><br><span class="line"> * @create: 2020-05-05 11:42</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    Runnable run &#x3D; () -&gt;&#123;</span><br><span class="line">        System.err.println(this);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new Thread(new Test().run).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(5L);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行上面的代码，可以得到结果<code>test</code></p>
<blockquote>
<p>在匿名内部类如何得到结果呢？</p>
<p>可以看下面的代码，结果依然是打印 <code>test</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @program: smartframwork</span><br><span class="line"> * @description: lambada表达式学习1</span><br><span class="line"> * @author: zhaoxudong</span><br><span class="line"> * @create: 2020-05-05 10:29</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class LambadaTest1 &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                String name &#x3D; Thread.currentThread().getName();</span><br><span class="line">                System.err.println(name + &quot; is run as a thread &quot; + this);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public String toString() &#123;</span><br><span class="line">                return &quot;test&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;LambadaTest1&#123;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结论：</p>
<p>匿名内部类：<code>this</code> 指向的是匿名内部类的所属对象（<strong>也就是Runnable</strong>）</p>
<p>lambada：<code>this</code> 指向当前运行的类（<strong>也就是Test</strong>），也就是当前运行的对象</p>
<h3 id="Q：Java8里面的java-util-Spliterator接口有什么用？"><a href="#Q：Java8里面的java-util-Spliterator接口有什么用？" class="headerlink" title="Q：Java8里面的java.util.Spliterator接口有什么用？"></a>Q：Java8里面的java.util.Spliterator接口有什么用？</h3><h3 id="A：参考博客"><a href="#A：参考博客" class="headerlink" title="A：参考博客"></a>A：参考博客</h3><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwNzA4NzQzOA==" title="https://segmentfault.com/q/1010000007087438">思否<i class="fa fa-external-link"></i></span></p>
<p>一句话概括：为了多线程并行遍历元素而设计到迭代器</p>
<p>版本：JDK1.8</p>
<p>目的：简化复杂到并行迭代程序编写</p>
<p>参考：Java7的Fork/Join(分支/合并)框架</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbHZlcjk4ODYvYXJ0aWNsZS9kZXRhaWxzLzg3OTE3ODIz" title="https://blog.csdn.net/silver9886/article/details/87917823">CSDN上面到解答<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pZmV2ZS5jb20vamF2YTgtc3RyZWFtLeS4rXNwbGl0ZXJhdG9y55qE5L2/55So5LiALw==" title="https://ifeve.com/java8-stream-中spliterator的使用一/">JAVA8 stream 中Spliterator的使用(一)<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pZmV2ZS5jb20vamF2YTgtc3RyZWFtLeS4rXNwbGl0ZXJhdG9y55qE5L2/55So5LqMLw==" title="https://ifeve.com/java8-stream-中spliterator的使用二/">JAVA8 stream 中Spliterator的使用(二)<i class="fa fa-external-link"></i></span></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JDK1.8</category>
      </categories>
      <tags>
        <tag>LAMBAD</tag>
      </tags>
  </entry>
  <entry>
    <title>Mindoc 安装与部署</title>
    <url>/2020/09/25/note26/</url>
    <content><![CDATA[<h1 id="Mindoc-安装与部署"><a href="#Mindoc-安装与部署" class="headerlink" title="Mindoc 安装与部署"></a>Mindoc 安装与部署</h1><p>地址： <span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1pbmhvLm1lL3dpa2kvZG9jcy9taW5kb2MvbWluZG9jLXN1bW1hcnkubWQ=" title="https://www.iminho.me/wiki/docs/mindoc/mindoc-summary.md">https://www.iminho.me/wiki/docs/mindoc/mindoc-summary.md<i class="fa fa-external-link"></i></span></p>
<h2 id="第一步-下载可执行文件"><a href="#第一步-下载可执行文件" class="headerlink" title="第一步 下载可执行文件"></a>第一步 下载可执行文件</h2><p>请从 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpZmVpNjY3MS9taW5kb2MvcmVsZWFzZXM=" title="https://github.com/lifei6671/mindoc/releases">https://github.com/lifei6671/mindoc/releases<i class="fa fa-external-link"></i></span> 下载最新版的可执行文件，一般文件名为 mindoc_windows_amd.zip .</p>
<h2 id="第二步-解压压缩包"><a href="#第二步-解压压缩包" class="headerlink" title="第二步 解压压缩包"></a>第二步 解压压缩包</h2><p>请将刚才下载的文件解压，推荐使用好压解压到任意目录。建议不用用中文目录名称。</p>
<h2 id="第三步-创建数据库"><a href="#第三步-创建数据库" class="headerlink" title="第三步 创建数据库"></a>第三步 创建数据库</h2><p>如果你使用的 mysql 数据库，请创建一个编码为utf8mb4格式的数据库，如果没有GUI管理工具，推荐用下面的脚本创建：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mindoc_db  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>

<hr>
<p>如果你使用的是 sqlite 数据库，请将 conf/app.conf 中的数据库配置成如下,系统会自动创建 sqlite 数据库文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db_adapter&#x3D;sqlite3</span><br><span class="line">db_database&#x3D;mindoc_db</span><br></pre></td></tr></table></figure>

<h2 id="第四步-配置数据库"><a href="#第四步-配置数据库" class="headerlink" title="第四步 配置数据库"></a>第四步 配置数据库</h2><p>请将刚才解压目录下 conf/app.conf.example 重名为 app.conf。同时配置如下节点：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库配置</span></span><br><span class="line"><span class="attr">db_adapter</span>=mysql</span><br><span class="line"><span class="comment">#mysql数据库的IP</span></span><br><span class="line"><span class="attr">db_host</span>=<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql数据库的端口号一般为3306</span></span><br><span class="line"><span class="attr">db_port</span>=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#刚才创建的数据库的名称</span></span><br><span class="line"><span class="attr">db_database</span>=mindoc_db</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问数据库的账号和密码</span></span><br><span class="line"><span class="attr">db_username</span>=root</span><br><span class="line"><span class="attr">db_password</span>=<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>在 MinDoc 根目录下使用命令行执行如下命令，用于初始化数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mindoc_windows_amd64.exe install</span><br></pre></td></tr></table></figure>

<p>稍等一分钟，程序会自动初始化数据库，并创建一个超级管理员账号：<code>admin</code> 密码：<code>123456</code></p>
<h2 id="第五步-启动程序"><a href="#第五步-启动程序" class="headerlink" title="第五步 启动程序"></a>第五步 启动程序</h2><p>如果你设置了环境变量，但是没有重启电脑，请在cmd命令行启动 mindoc_windows_amd64.exe 程序。</p>
<p>如果你设置了环境变量，并且重启了电脑，双击 mindoc_windows_amd64.exe 即可。</p>
<p>此时访问 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MTgxLw==" title="http://localhost:8181/">http://localhost:8181<i class="fa fa-external-link"></i></span> 就能访问 MinDoc 了。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Neo4j + VIS 数据可视化问题汇总</title>
    <url>/2020/07/26/note1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>被前端整的有点发虚，这里记录一下自己干的一些（蠢）事</p>
<blockquote>
<p>PS：这种无力感真的希望不要再有，在自己不怎么擅长的领域班门弄斧就是浪费时间</p>
</blockquote>
<a id="more"></a>

<h2 id="重要资料："><a href="#重要资料：" class="headerlink" title="重要资料："></a>重要资料：</h2><h2 id="VIS-DataSet-使用："><a href="#VIS-DataSet-使用：" class="headerlink" title="VIS DataSet 使用："></a>VIS DataSet 使用：</h2><p><span class="exturl" data-url="aHR0cHM6Ly92aXNqcy5naXRodWIuaW8vdmlzLWRhdGEvZGF0YS9kYXRhc2V0Lmh0bWw=" title="https://visjs.github.io/vis-data/data/dataset.html">dataSet使用<i class="fa fa-external-link"></i></span></p>
<p>这段时间做表标签库，内容还是比较多的，这里记录一下个人遇到的一些需求汇总问题</p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjQwNDg3Mg==" title="https://zhuanlan.zhihu.com/p/36404872">什么是neo4j<i class="fa fa-external-link"></i></span></p>
<h1 id="Q：页面初始化如何控制节点的距离大小"><a href="#Q：页面初始化如何控制节点的距离大小" class="headerlink" title="Q：页面初始化如何控制节点的距离大小"></a>Q：页面初始化如何控制节点的距离大小</h1><p>A： 官方文档： <span class="exturl" data-url="aHR0cHM6Ly92aXNqcy5naXRodWIuaW8vdmlzLW5ldHdvcmsvZG9jcy9uZXR3b3JrL3BoeXNpY3MuaHRtbA==" title="https://visjs.github.io/vis-network/docs/network/physics.html">VIS的节点物理效果<i class="fa fa-external-link"></i></span></p>
<p>需要调整如下参数</p>
<p>在<code>options</code>调整如下变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#x2F;&#x2F;力导向图效果</span><br><span class="line">physics: &#123;</span><br><span class="line">    enabled: true,   &#x2F;&#x2F; 是否开启vis引擎配置</span><br><span class="line">        barnesHut: &#123; &#x2F;&#x2F; 基于四叉树的重力模型，非分布式性能最好的求值器</span><br><span class="line">            gravitationalConstant: -4000, &#x2F;&#x2F;此参数确定了合并的远程力和各个短程力之间的边界。要过分简化，较高的值会更快，但是会产生更多的错误，较低的值会很慢，但是会减少错误。</span><br><span class="line">            centralGravity: 0.3, &#x2F;&#x2F;有一个中央引力吸引器，可将整个网络拉回到中心。</span><br><span class="line">            springLength: 120, &#x2F;&#x2F; 边缘被建模为弹簧。这里的springLength是弹簧的其余长度。</span><br><span class="line">            springConstant: 0.04, &#x2F;&#x2F;这就是弹簧的强度。值越高，表示弹簧越强。</span><br><span class="line">            damping: 0.09, &#x2F;&#x2F; 接受范围：[0 .. 1]。阻尼因子是前一次物理模拟迭代中有多少速度会延续到下一次迭代中。</span><br><span class="line">            avoidOverlap: 0 &#x2F;&#x2F; 接受范围：[0 .. 1]。大于0时，将考虑节点的大小。对于两个重力模型，将从节点的包围圆的半径计算距离。值1是最大避免重叠。</span><br><span class="line">		&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>根据上面的值基本可以确定整个页面的物理引擎效果</p>
<h1 id="Q：要实现鼠标悬停到页面变为小手的样式"><a href="#Q：要实现鼠标悬停到页面变为小手的样式" class="headerlink" title="Q：要实现鼠标悬停到页面变为小手的样式"></a>Q：要实现鼠标悬停到页面变为小手的样式</h1><p>A：</p>
<p>官方案例：<span class="exturl" data-url="aHR0cHM6Ly92aXNqcy5naXRodWIuaW8vdmlzLW5ldHdvcmsvZXhhbXBsZXMvbmV0d29yay9vdGhlci9jdXJzb3JDaGFuZ2UuaHRtbA==" title="https://visjs.github.io/vis-network/examples/network/other/cursorChange.html">https://visjs.github.io/vis-network/examples/network/other/cursorChange.html<i class="fa fa-external-link"></i></span></p>
<p>参考博客：<span class="exturl" data-url="aHR0cHM6Ly93d3cudGhpbmJ1Zy5jb20vcS80MDUzMjU5Ng==" title="https://www.thinbug.com/q/40532596">博客地址<i class="fa fa-external-link"></i></span></p>
<p>步骤：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var networkCanvas &#x3D; document.getElementById(&quot;network_id&quot;).getElementsByTagName(&quot;canvas&quot;)[0];</span><br></pre></td></tr></table></figure>

<p>增加一个配置</p>
<p>最终解决方案：</p>
<p>在vis初始化<code>network</code> 之后,加入如下事件绑定代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cursor &#x3D;  network.canvas.body.container.style.cursor; &#x2F;&#x2F; 获取netword的cursor</span><br><span class="line">network.on(&quot;hoverNode&quot;, function (params) &#123;</span><br><span class="line">    cursor &#x3D; &#39;grab&#39;</span><br><span class="line">&#125;);</span><br><span class="line">network.on(&quot;blurNode&quot;, function() &#123;</span><br><span class="line">    cursor &#x3D; &#39;default&#39;</span><br><span class="line">&#125;);</span><br><span class="line">network.on(&quot;hoverEdge&quot;, function() &#123;</span><br><span class="line">    cursor &#x3D; &#39;grab&#39;</span><br><span class="line">&#125;);</span><br><span class="line">network.on(&quot;blurEdge&quot;, function() &#123;</span><br><span class="line">    cursor &#x3D; &#39;default&#39;</span><br><span class="line">&#125;);</span><br><span class="line">network.on(&quot;dragStart&quot;, function() &#123;</span><br><span class="line">    cursor &#x3D; &#39;grabbing&#39;</span><br><span class="line">&#125;);</span><br><span class="line">network.on(&quot;dragging&quot;, function() &#123;</span><br><span class="line">    cursor &#x3D; &#39;grabbing&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Q：如何模仿Neo4j-用vis实现节点的展开和多层折叠"><a href="#Q：如何模仿Neo4j-用vis实现节点的展开和多层折叠" class="headerlink" title="Q：如何模仿Neo4j 用vis实现节点的展开和多层折叠"></a>Q：如何模仿Neo4j 用vis实现节点的展开和多层折叠</h1><p>参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iMjI3MjdjOGZlNjA=" title="https://www.jianshu.com/p/b22727c8fe60">简书地址<i class="fa fa-external-link"></i></span></p>
<p>个人需求：</p>
<p>实现节点可以扩展和缩放，双击扩展，扩展之后再次双击为收缩</p>
<p>难点：如何实现多层节点收缩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var nodes &#x3D; [</span><br><span class="line">  &#123;id: 1, subids: [2, 3],allsubids:[2,3,4,5]&#125;,</span><br><span class="line">  &#123;id: 2, pid: 1&#125;,</span><br><span class="line">  &#123;id: 3, subids: [4],pid: 1,allsubids:[4,5]&#125;</span><br><span class="line">  &#123;id: 4, subids: [5],pid: 3&#125;</span><br><span class="line">  &#123;id: 5, pid: 4&#125;</span><br><span class="line">];</span><br><span class="line">var edges &#x3D; [</span><br><span class="line">  &#123;from:1,to:2&#125;,</span><br><span class="line">  &#123;from:1,to:3&#125;,</span><br><span class="line">  &#123;from:3,to:4&#125;,</span><br><span class="line">  &#123;from:4,to:5&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="个人实现："><a href="#个人实现：" class="headerlink" title="个人实现："></a>个人实现：</h2><p>目前经过查找资料发现以下代码加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">     *获取所有子节点</span><br><span class="line">     * network ：图形对象</span><br><span class="line">     * _thisNode ：单击的节点（父节点）</span><br><span class="line">     * _Allnodes ：用来装子节点ID的数组</span><br><span class="line">     * *&#x2F;</span><br><span class="line">    function getAllChilds(network,_thisNode,_Allnodes)&#123;</span><br><span class="line">        var _nodes &#x3D; network.getConnectedNodes(_thisNode);</span><br><span class="line">        if(_nodes.length &gt; 0)&#123;</span><br><span class="line">            for(var i&#x3D;0;i&lt;_nodes.length;i++)&#123;</span><br><span class="line">                &#x2F;&#x2F; getAllChilds(network,_nodes[i],_Allnodes);</span><br><span class="line">                _Allnodes.push(_nodes[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return _Allnodes</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>增加两个<code>Array</code>的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.prototype.indexOf &#x3D; function(val) &#123;</span><br><span class="line">       for (var i &#x3D; 0; i &lt; this.length; i++) &#123;</span><br><span class="line">           if (this[i] &#x3D;&#x3D; val) return i;</span><br><span class="line">       &#125;</span><br><span class="line">       return -1;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;code from http:&#x2F;&#x2F;caibaojian.com&#x2F;js-splice-element.html</span><br><span class="line">   Array.prototype.remove &#x3D; function(val) &#123;</span><br><span class="line">       var index &#x3D; this.indexOf(val);</span><br><span class="line">       if (index &gt; -1) &#123;</span><br><span class="line">           this.splice(index, 1);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>

<p>具体判断逻辑如下：</p>
<ol>
<li>设置一个标志位，第一次为true，表示扩展该节点。扩展之后将该节点的id放到一个全局的扩展节点array里面维护</li>
<li>如果再次点击，该标志位变成false, 执行步骤又可以分为以下几点<ul>
<li>使用vis.js的api获取当前节点的<code>连接</code>节点，<code>network.getConnectedNodes(_thisNode);</code>的<code>_thisNode</code>，为当前操作节点的唯一标识id（此方法还有很多的可选条件参数）</li>
<li>获取<code>连接</code>节点之后，调用<code>nodes.remove(_allChild)</code>，删除关联节点，此操作会直接干掉被删除节点所有的关联关系</li>
<li>删除完成之后，全局表的<code>已扩展</code>节点删除当前点击节点，方便下次再次扩展</li>
</ul>
</li>
</ol>
<h1 id="Q：双向两条箭头合并为一个单向双箭头"><a href="#Q：双向两条箭头合并为一个单向双箭头" class="headerlink" title="Q：双向两条箭头合并为一个单向双箭头"></a>Q：双向两条箭头合并为一个单向双箭头</h1><p>这个需求是比较特殊的例子，涉及到业务的内容不予描述</p>
<p>思路：</p>
<ol>
<li>拿到当前记录，获取当前记录的<code>from</code>和<code>to</code></li>
<li>使用两层循环嵌套，第一层遍历所有的节点一次，第二层遍历当前节点的后面节点，类似冒泡</li>
<li>如果当前节点的<code>from</code> == 其他节点的<code>to</code>，并且当前节点的<code>to</code> == 其他节点的<code>from</code></li>
</ol>
<p>具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 手动筛选掉双向关联的数据</span><br><span class="line">    function delrepeatinfo(arrName) &#123;</span><br><span class="line">        arrName &#x3D; arrName.edges;</span><br><span class="line">        if (arrName &#x3D;&#x3D; null || arrName.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        var repeat &#x3D; [];</span><br><span class="line">        for (var i &#x3D; 0; i &lt; arrName.length; i++) &#123;</span><br><span class="line">            var item &#x3D; arrName[i];</span><br><span class="line">            if(item.skip)&#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            var fromId &#x3D; item.edgeFrom;</span><br><span class="line">            var toId &#x3D; item.edgeTo;</span><br><span class="line">            for (var j &#x3D; i+1; j &lt; arrName.length; j++) &#123;</span><br><span class="line">                var next &#x3D; arrName[j];</span><br><span class="line">                if(next.edgeTo &#x3D;&#x3D; fromId &amp;&amp; next.edgeFrom &#x3D;&#x3D; toId)&#123;</span><br><span class="line">                    repeat.push(item);</span><br><span class="line">                    next.skip &#x3D; true;</span><br><span class="line">                    break;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return repeat;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Q：如果自定义画图"><a href="#Q：如果自定义画图" class="headerlink" title="Q：如果自定义画图"></a>Q：如果自定义画图</h1><p>需求：</p>
<p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/%E6%A0%87%E7%AD%BE%E5%BA%93%E9%9C%80%E6%B1%82.png?ynotemdtimestamp=1595748679079" alt="img"></p>
<p>A：个人无法处理，需要寻找建哥处理按钮的绘画以及按钮的事件触发操作</p>
<p>处理方式：</p>
<ol>
<li>使用canvas在 点击标签之后绘制对应的按钮</li>
<li>监听坐标，当点击了坐标内的按钮触发事件，显示对应的菜单</li>
</ol>
<p>那个多出两个自定义按钮的解决办法如下：</p>
<ol>
<li>利用canvas前端画图技术绘制按钮</li>
<li>监听鼠标的点击坐标，查看是否在绘制的按钮坐标内，对应的触发事件</li>
<li>触发相关操作</li>
</ol>
<p>VIS绘制辅助线条的办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">context &#x3D; ctx || $(&#39;#network_id&#39;)[0].getContext(&quot;2d&quot;)</span><br><span class="line">context.lineWidth &#x3D; 1;</span><br><span class="line">context.strokeStyle &#x3D; &quot;#CECBCE&quot;;</span><br><span class="line">context.setLineDash([5]);</span><br><span class="line">var offset &#x3D; 800;</span><br><span class="line">var padding &#x3D; 50;</span><br><span class="line">for (var i &#x3D; 0; i &lt; 30; i++) &#123;</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.moveTo(offset * -1, i * padding - offset)</span><br><span class="line">    context.lineTo(2000, i * padding - offset)</span><br><span class="line">    context.stroke();</span><br><span class="line"></span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.moveTo(i * padding - offset, offset * -1)</span><br><span class="line">    context.lineTo(i * padding - offset, 2000)</span><br><span class="line">    context.stroke();</span><br><span class="line">&#125;</span><br><span class="line">context.setLineDash([]);</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>neo4j 的资料还是太少太少，多查查官方文档才是硬道理</p>
<p>个人接到的需求如下</p>
<ol>
<li>标签之间都是双向箭头，需要改成一条直线，或者只有单项的。</li>
</ol>
<p>无法自定义，因为数据的展示强制需要 头和尾两个参数，数据本身就是会存在互相关联的情况，所以无法实现</p>
<ol>
<li>标签之间的连接线点击不要有效果，就是颜色不要加深</li>
</ol>
<p>只需要去掉inter``</p>
<ol>
<li>标签展开后能再点击折叠收回映射关系吗？</li>
<li>所有图例鼠标放到上面都变成小手形状</li>
<li>初始化页面这些标签过于分散，需要集中一些，根据屏幕情况集中在一屏展示</li>
</ol>
<p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/%E6%A0%87%E7%AD%BE%E5%BA%93%E9%9C%80%E6%B1%82.png?ynotemdtimestamp=1595748679079" alt="img"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Neo4j</category>
      </categories>
      <tags>
        <tag>Neo4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Neo4j 学习笔记</title>
    <url>/2020/07/26/note10/</url>
    <content><![CDATA[<h1 id="Neo4j-学习"><a href="#Neo4j-学习" class="headerlink" title="Neo4j 学习"></a>Neo4j 学习</h1><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-入门"><a href="#1-入门" class="headerlink" title="1. 入门"></a>1. 入门</h2><h3 id="1-1-安装neo4j"><a href="#1-1-安装neo4j" class="headerlink" title="1.1 安装neo4j"></a>1.1 安装neo4j</h3><p>直接安装 neo4j desktop 版本</p>
<p>如果是community 社区版本，则需要到安装目录的bin 下面执行如下命令</p>
<a id="more"></a>

<h2 id="2-Cypher简介"><a href="#2-Cypher简介" class="headerlink" title="2. Cypher简介"></a>2. <span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9nZXR0aW5nLXN0YXJ0ZWQvY3VycmVudC9jeXBoZXItaW50cm8v" title="https://neo4j.com/docs/getting-started/current/cypher-intro/">Cypher简介<i class="fa fa-external-link"></i></span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">()</span><br><span class="line">(matrix)</span><br><span class="line">(:Movie)</span><br><span class="line">(matrix:Movie)</span><br><span class="line">(matrix:Movie &#123;title: &quot;The Matrix&quot;&#125;)</span><br><span class="line">(matrix:Movie &#123;title: &quot;The Matrix&quot;, released: 1997&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-1-关系语法"><a href="#2-1-关系语法" class="headerlink" title="2.1 关系语法"></a>2.1 关系语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--&gt;</span><br><span class="line">-[role]-&gt;</span><br><span class="line">-[:ACTED_IN]-&gt;</span><br><span class="line">-[role:ACTED_IN]-&gt;</span><br><span class="line">-[role:ACTED_IN &#123;roles: [&quot;Neo&quot;]&#125;]-&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-模式语法"><a href="#2-2-模式语法" class="headerlink" title="2.2 模式语法"></a>2.2 模式语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(keanu:Person:Actor &#123;name:  &quot;Keanu Reeves&quot;&#125; )</span><br><span class="line">-[role:ACTED_IN     &#123;roles: [&quot;Neo&quot;] &#125; ]-&gt;</span><br><span class="line">(matrix:Movie       &#123;title: &quot;The Matrix&quot;&#125; )</span><br></pre></td></tr></table></figure>

<h2 id="3-Cypher-基本语法"><a href="#3-Cypher-基本语法" class="headerlink" title="3. Cypher 基本语法"></a>3. Cypher 基本语法</h2><h3 id="3-1-创建数据"><a href="#3-1-创建数据" class="headerlink" title="3.1 创建数据"></a>3.1 创建数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE (:MyMovie&#123;title:&quot;The Matrix&quot;, released:1997&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-创建并且返回数据"><a href="#3-2-创建并且返回数据" class="headerlink" title="3.2 创建并且返回数据"></a>3.2 创建并且返回数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE (p:MyPeron&#123; name:&quot;test&quot;, relase:&quot;test&quot;&#125;) RETURN p</span><br></pre></td></tr></table></figure>

<h3 id="3-3-创建多个元素"><a href="#3-3-创建多个元素" class="headerlink" title="3.3 创建多个元素"></a>3.3 创建多个元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE (a:Person &#123; name:&quot;Tom Hanks&quot;,</span><br><span class="line">  born:1956 &#125;)-[r:ACTED_IN &#123; roles: [&quot;Forrest&quot;]&#125;]-&gt;(m:Movie &#123; title:&quot;Forrest Gump&quot;,released:1994 &#125;)</span><br><span class="line">                                                               </span><br><span class="line">CREATE (d:Person &#123; name:&quot;Robert Zemeckis&quot;, born:1951 &#125;)-[:DIRECTED]-&gt;(m)</span><br><span class="line">RETURN a,d,r,m</span><br></pre></td></tr></table></figure>

<h3 id="3-4-匹配模式"><a href="#3-4-匹配模式" class="headerlink" title="3.4 匹配模式"></a>3.4 匹配模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (p:Person &#123; name:&quot;Tom Hanks&quot; &#125;)-[r:ACTED_IN]-&gt;(m:Movie)</span><br><span class="line">RETURN m.title, r.roles</span><br></pre></td></tr></table></figure>

<h3 id="3-5-连接结构"><a href="#3-5-连接结构" class="headerlink" title="3.5 连接结构"></a>3.5 连接结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (p:Person &#123; name:&quot;Tom Hanks&quot; &#125;)</span><br><span class="line">CREATE (m:Movie &#123; title:&quot;Cloud Atlas&quot;,released:2012 &#125;)</span><br><span class="line">CREATE (p)-[r:ACTED_IN &#123; roles: [&#39;Zachry&#39;]&#125;]-&gt;(m)</span><br><span class="line">RETURN p,r,m</span><br></pre></td></tr></table></figure>

<h3 id="3-6-完成模式"><a href="#3-6-完成模式" class="headerlink" title="3.6 完成模式"></a>3.6 完成模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MERGE (m:Movie &#123; title:&quot;Cloud Atlas&quot; &#125;)</span><br><span class="line">ON CREATE SET m.released &#x3D; 2012</span><br><span class="line">RETURN m</span><br></pre></td></tr></table></figure>

<p>使用合并关联多个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (m:Movie &#123; title:&quot;Cloud Atlas&quot; &#125;)</span><br><span class="line">MATCH (p:Person &#123; name:&quot;Tom Hanks&quot; &#125;)</span><br><span class="line">MERGE (p)-[r:ACTED_IN]-&gt;(m)</span><br><span class="line">ON CREATE SET r.roles &#x3D;[&#39;Zachry&#39;]</span><br><span class="line">RETURN p,r,m</span><br></pre></td></tr></table></figure>

<p>处理多重关联</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE (y:Year &#123; year:2014 &#125;)</span><br><span class="line">MERGE (y)&lt;-[:IN_YEAR]-(m10:Month &#123; month:10 &#125;)</span><br><span class="line">MERGE (y)&lt;-[:IN_YEAR]-(m11:Month &#123; month:11 &#125;)</span><br><span class="line">RETURN y,m10,m11</span><br></pre></td></tr></table></figure>

<h2 id="4-Cypher-筛选结果正确的结果"><a href="#4-Cypher-筛选结果正确的结果" class="headerlink" title="4. Cypher 筛选结果正确的结果"></a>4. Cypher 筛选结果正确的结果</h2><h3 id="4-1-测试数据"><a href="#4-1-测试数据" class="headerlink" title="4.1 测试数据"></a>4.1 测试数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE (xiaohong:Person &#123;name: &quot;小红&quot;, born: 1954&#125;)</span><br><span class="line">CREATE (xiaolv:Person &#123;name: &quot;小绿S&quot;, born: 1964&#125;)</span><br><span class="line">CREATE (xiaohuang:Person &#123;name: &quot;小黄&quot;, born: 1948&#125;)</span><br><span class="line">CREATE (xiaolan:Person &#123;name: &quot;小蓝&quot;, born: 1999&#125;)</span><br><span class="line">CREATE (xiyouji:Person &#123;name: &quot;西游记&quot;, date: &quot;1999-10-25&quot;&#125;)</span><br><span class="line">CREATE (lanjingling:Person &#123;name: &quot;蓝精灵&quot;, date: &quot;1969-5-16&quot;&#125;)</span><br><span class="line">CREATE (xiaolv)-[:ACTED_IN &#123; roles: [&quot;想看&quot;]&#125;]-&gt;(xiyouji)</span><br><span class="line">CREATE (xiaohuang)-[:ACTED_IN &#123; roles: [&quot;想看&quot;]&#125;]-&gt;(lanjingling)</span><br></pre></td></tr></table></figure>

<h3 id="4-2-根据where-条件查找"><a href="#4-2-根据where-条件查找" class="headerlink" title="4.2 根据where 条件查找"></a>4.2 根据where 条件查找</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (xiyouji:Person) WHERE xiyouji.name&#x3D;&quot;西游记&quot; RETURN xiyouji</span><br></pre></td></tr></table></figure>

<p>等同于如下查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (xiyouji:Person &#123;name:&quot;西游记&quot;&#125;) RETURN xiyouji</span><br></pre></td></tr></table></figure>

<p>使用正则匹配如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (xiaolv:Person)-[r:ACTED_IN]-&gt;(xiyouji) WHERE xiaolv.name &#x3D;~ &quot;小+&quot; OR &quot;Neo&quot; IN r.roles RETURN xiaolv,r,xiyouji</span><br></pre></td></tr></table></figure>

<h3 id="4-3-内置函数使用"><a href="#4-3-内置函数使用" class="headerlink" title="4.3 内置函数使用"></a>4.3 内置函数使用</h3><h4 id="使用NOT-排除关系"><a href="#使用NOT-排除关系" class="headerlink" title="使用NOT 排除关系"></a>使用NOT 排除关系</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (p:Person)-[:ACTED_IN]-&gt;(m)</span><br><span class="line">WHERE NOT (p)-[:DIRECTED]-&gt;()</span><br><span class="line">RETURN p,m</span><br></pre></td></tr></table></figure>

<h4 id="内置函数的"><a href="#内置函数的" class="headerlink" title="内置函数的"></a>内置函数的</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (p:Person) RETURN p,p.name AS name, toUpper(p.name), coalesce(p.name, &quot;n&#x2F;a&quot;) AS nickname, &#123; name: p.name, label: head(labels(p))&#125; AS person</span><br></pre></td></tr></table></figure>

<h3 id="4-4-汇总信息"><a href="#4-4-汇总信息" class="headerlink" title="4.4 汇总信息"></a>4.4 汇总信息</h3><h4 id="使用count"><a href="#使用count" class="headerlink" title="使用count"></a>使用count</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (:Person)</span><br><span class="line">RETURN count(*) AS people</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (actor:Person)-[:ACTED_IN]-&gt;(movie:Movie)&lt;-[:DIRECTED]-(director:Person) RETURN actor, director, count(*) AS collacbotration</span><br></pre></td></tr></table></figure>

<h3 id="4-5-排序和分页"><a href="#4-5-排序和分页" class="headerlink" title="4.5 排序和分页"></a>4.5 排序和分页</h3><h4 id="使用-limit-以及-skip-进行分页"><a href="#使用-limit-以及-skip-进行分页" class="headerlink" title="使用 limit 以及 skip 进行分页"></a>使用 limit 以及 skip 进行分页</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (a:Person)-[:ACTED_IN]-&gt;(m:Movie) RETURN a, count(*) AS appearances ORDER BY appearances DESC LIMIT 10</span><br><span class="line">MATCH (a:Person)-[:ACTED_IN]-&gt;(m:Movie) RETURN a, count(*) AS appearances ORDER BY appearances DESC SKIP 10</span><br></pre></td></tr></table></figure>

<h3 id="4-6-收集汇总"><a href="#4-6-收集汇总" class="headerlink" title="4.6 收集汇总"></a>4.6 收集汇总</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (m:Movie)&lt;-[:ACTED_IN]-(a:Person) RETURN m.title AS movie, collect(a.name) AS cast, count(*) AS actors</span><br></pre></td></tr></table></figure>

<h3 id="4-7-使用UNION链接多个内容"><a href="#4-7-使用UNION链接多个内容" class="headerlink" title="4.7 使用UNION链接多个内容"></a>4.7 使用UNION链接多个内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (actor:Person)-[r:ACTED_IN]-&gt;(movie:Movie)</span><br><span class="line">RETURN actor.name AS name, type(r) AS type, movie.title AS title</span><br><span class="line">UNION</span><br><span class="line">MATCH (director:Person)-[r:DIRECTED]-&gt;(movie:Movie)</span><br><span class="line">RETURN director.name AS name, type(r) AS type, movie.title AS title</span><br></pre></td></tr></table></figure>

<h4 id="使用WITH"><a href="#使用WITH" class="headerlink" title="使用WITH"></a>使用WITH</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MATCH (person:Person)-[:ACTED_IN]-&gt;(m:Movie) WITH person, count(*) AS appear, collect(m.title) AS movies WHERE appear&gt;1 RETURN person.name, appear, movies</span><br></pre></td></tr></table></figure>

<h3 id="4-8-使用约束"><a href="#4-8-使用约束" class="headerlink" title="4.8 使用约束"></a>4.8 使用约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.title IS UNIQUE</span><br><span class="line">CALL db.constraints</span><br></pre></td></tr></table></figure>

<h3 id="4-9-使用import-导入数据"><a href="#4-9-使用import-导入数据" class="headerlink" title="4.9 使用import 导入数据"></a>4.9 使用import 导入数据</h3><p><span class="exturl" data-url="aHR0cHM6Ly9uZW80ai5jb20vZG9jcy9jeXBoZXItbWFudWFsLzMuNS9jbGF1c2VzL2xvYWQtY3N2Lw==" title="https://neo4j.com/docs/cypher-manual/3.5/clauses/load-csv/">https://neo4j.com/docs/cypher-manual/3.5/clauses/load-csv/<i class="fa fa-external-link"></i></span></p>
<h4 id="从CSV文件导入数据"><a href="#从CSV文件导入数据" class="headerlink" title="从CSV文件导入数据"></a>从CSV文件导入数据</h4><p>要使用的CSV文件<code>LOAD CSV</code>必须具有以下特征：</p>
<ul>
<li>字符编码为UTF-8；</li>
<li>终端线终端取决于系统，例如，它<code>\n</code>在UNIX上还是<code>\r\n</code>在Windows上；</li>
<li>默认的字段终止符是<code>,</code>;</li>
<li>可以使用命令中<code>FIELDTERMINATOR</code>可用的选项来更改字段终止符<code>LOAD CSV</code>；</li>
<li>CSV文件中允许带引号的字符串，并且在读取数据时将引号删除；</li>
<li>字符串引号的字符为双引号<code>&quot;</code>;</li>
<li>if <code>dbms.import.csv.legacy_quote_escaping</code>设置为默认值<code>true</code>，<code>\</code>用作转义字符；</li>
<li>双引号必须在带引号的字符串中并使用转义符或第二个双引号进行转义。</li>
</ul>
<p>下面为示例：</p>
<p>article.cvs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,ABBA,1992</span><br><span class="line">2,Roxette,1986</span><br><span class="line">3,Europe,1979</span><br><span class="line">4,The Cardigans,1992</span><br><span class="line">LOAD CSV FROM &#39;file:&#x2F;&#x2F;&#x2F;article.cvs&#39; AS line</span><br><span class="line">CREATE (:Artist &#123; name: line[1], year: toInteger(line[2])&#125;)</span><br></pre></td></tr></table></figure>

<p>注意此处会踩坑，因为neo4j 默认配置中将import 设置到安装根目录的<code>import</code> 目录下面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbms.security.allow_csv_import_from_file_urls&#x3D;true</span><br><span class="line"></span><br><span class="line">dbms.directories.import&#x3D;import</span><br></pre></td></tr></table></figure>

<p>注意第一个配置默认为false， 设置为true将允许neo4j访问系统文件，这样做是<strong>不建议</strong>的</p>
<p>注意linux 系统的用户访问权限的问题</p>
<h4 id="使用header-导入-csv文件"><a href="#使用header-导入-csv文件" class="headerlink" title="使用header 导入 csv文件"></a>使用header 导入 csv文件</h4><p>article_with_head.csv</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Id,Name,Year</span><br><span class="line">1,ABBA,1992</span><br><span class="line">2,Roxette,1986</span><br><span class="line">3,Europe,1979</span><br><span class="line">4,The Cardigans,1992</span><br></pre></td></tr></table></figure>

<p>注意语法有稍微的改变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD CSV WITH HEADERS FROM &#39;file:&#x2F;&#x2F;&#x2F;article_with_head.csv&#39; AS line</span><br><span class="line">CREATE (:Artist &#123; name: line.Name, year: toInteger(line.Year)&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="使用自定义字段定界符从CSV文件导入数据"><a href="#使用自定义字段定界符从CSV文件导入数据" class="headerlink" title="使用自定义字段定界符从CSV文件导入数据"></a>使用自定义字段定界符从CSV文件导入数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD CSV FROM &#39;file:&#x2F;&#x2F;&#x2F;article_fieldterminator.csv&#39; AS line FIELDTERMINATOR &#39;;&#39;</span><br><span class="line">CREATE (:Artist &#123; name: line[1], year: toInteger(line[2])&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="导入大量数据"><a href="#导入大量数据" class="headerlink" title="导入大量数据"></a>导入大量数据</h4><p>可以指定读取多少行之后提交，防止数据过大，减少内存开销</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USING PERIODIC COMMIT LOAD CSV FROM &#39;file:&#x2F;&#x2F;&#x2F;artists.csv&#39; AS line CREATE (:Artist &#123; name: line[1], year: toInteger(line[2])&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="设置定期提交的速率"><a href="#设置定期提交的速率" class="headerlink" title="设置定期提交的速率"></a>设置定期提交的速率</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USING PERIODIC COMMIT 500 LOAD CSV FROM &#39;file:&#x2F;&#x2F;&#x2F;artists.csv&#39; AS line CREATE (:Artist &#123; name: line[1], year: toInteger(line[2])&#125;)</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Neo4j</category>
      </categories>
      <tags>
        <tag>Neo4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven私服Nexus搭建教程</title>
    <url>/2020/07/26/mavennexus/</url>
    <content><![CDATA[<h1 id="Nexus-私服搭建基本流程"><a href="#Nexus-私服搭建基本流程" class="headerlink" title="Nexus 私服搭建基本流程"></a>Nexus 私服搭建基本流程</h1><h2 id="Nexus-是什么？"><a href="#Nexus-是什么？" class="headerlink" title="Nexus 是什么？"></a>Nexus 是什么？</h2><p>用于实现Maven构建私人仓库的一个工具。</p>
<p>可以使用nexus 统一管理我们到依赖，不再需要再从中央仓库下载对应的jar包</p>
<a id="more"></a>

<h2 id="什么是Nexus-私服？"><a href="#什么是Nexus-私服？" class="headerlink" title="什么是Nexus 私服？"></a>什么是Nexus 私服？</h2><p>私服是在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。有了私服之后，当 Maven 需要下载jar包时，先请求私服，私服上如果存在则下载到本地仓库。否则，私服直接请求外部的远程仓库，将jar包下载到私服，再提供给本地仓库下载。</p>
<h2 id="maven的依赖管理"><a href="#maven的依赖管理" class="headerlink" title="maven的依赖管理"></a>maven的依赖管理</h2><p><strong>简介：依赖是maven最为用户熟知的特性之一，单个项目的依赖管理并不难，但是要管理几个或者几十个模块的时，那这个依赖应该怎么管理</strong></p>
<ul>
<li><p>依赖的传递性</p>
<ul>
<li>传递性依赖是在maven2中添加的新特征，这个特征的作用就是你不需要考虑你依赖的库文件所需要依赖的库文件，能够将依赖模块的依赖自动的引入。</li>
</ul>
</li>
<li><p>依赖的作用范围</p>
<ul>
<li><p>compile</p>
<ul>
<li>这是默认范围，编译依赖对项目所有的classpath都可用。此外，编译依赖会传递到依赖的项目</li>
</ul>
</li>
<li><p>provided</p>
<ul>
<li>表示该依赖项将由JDK或者运行容器在运行时提供，也就是说由Maven提供的该依赖项我们只有在编译和测试时才会用到，而在运行时将由JDK或者运行容器提供。</li>
</ul>
</li>
<li><p>runtime</p>
<ul>
<li>表明编译时不需要依赖，而只在运行时依赖</li>
</ul>
</li>
<li><p>test</p>
<ul>
<li>只在编译测试代码和运行测试的时候需要，应用的正常运行不需要此类依赖。</li>
</ul>
</li>
<li><p>system</p>
<ul>
<li><p>系统范围与provided类似，不过你必须显式指定一个本地系统路径的JAR，此类依赖应该一直有效，Maven也不会去仓库中寻找它。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;project&gt;  </span><br><span class="line">  ...  </span><br><span class="line">  &lt;dependencies&gt;  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">      &lt;groupId&gt;sun.jdk&lt;&#x2F;groupId&gt;  </span><br><span class="line">      &lt;artifactId&gt;tools&lt;&#x2F;artifactId&gt;  </span><br><span class="line">      &lt;version&gt;1.5.0&lt;&#x2F;version&gt;  </span><br><span class="line">      &lt;scope&gt;system&lt;&#x2F;scope&gt;  </span><br><span class="line">      &lt;systemPath&gt;$&#123;java.home&#125;&#x2F;..&#x2F;lib&#x2F;tools.jar&lt;&#x2F;systemPath&gt;  </span><br><span class="line">    &lt;&#x2F;dependency&gt;  </span><br><span class="line">  &lt;&#x2F;dependencies&gt;  </span><br><span class="line">  ...  </span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>import</p>
<ul>
<li>范围只适用于<dependencyManagement>部分。表明指定的POM必须使用<dependencyManagement>部分的依赖。因为依赖已经被替换，所以使用import范围的依赖并不影响依赖传递。</li>
</ul>
</li>
<li><p>依赖的两大原则</p>
<ul>
<li><p>路径近者优先</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A &gt; B &gt; C-1.0</span><br><span class="line">A &gt; C-2.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>第一声明优先</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A &gt; B &gt; D-1.0</span><br><span class="line">A &gt; C &gt; D-2.0</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>依赖的管理</p>
<ul>
<li>依赖排除<ul>
<li>任何可传递的依赖都可以通过 “exclusion” 元素被排除在外。举例说明，A 依赖 B， B 依赖 C，因此 A 可以标记 C 为 “被排除的”</li>
</ul>
</li>
<li>依赖可选<ul>
<li>任何可传递的依赖可以被标记为可选的，通过使用 “optional” 元素。例如：A 依赖 B， B 依赖 C。因此，B 可以标记 C 为可选的， 这样 A 就可以不再使用 C。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="如何解决jar包冲突"><a href="#如何解决jar包冲突" class="headerlink" title="如何解决jar包冲突"></a>如何解决jar包冲突</h2><p><strong>简介：当出现jar包冲突时，我们应该如何快速定位和处理jar包冲突问题</strong></p>
<ul>
<li>命令: <code>mvn dependency:tree -Dverbose</code></li>
</ul>
<h2 id="Nexus私服的秘密花园"><a href="#Nexus私服的秘密花园" class="headerlink" title="Nexus私服的秘密花园"></a>Nexus私服的秘密花园</h2><p>简介：介绍nexus服务器预置的仓库</p>
<ul>
<li>类型介绍<ul>
<li>hosted：是本地仓库，用户可以把自己的一些jar包，发布到hosted中，比如公司的第二方库</li>
<li>proxy，代理仓库，它们被用来代理远程的公共仓库，如maven中央仓库。不允许用户自己上传jar包，只能从中央仓库下载</li>
<li>group，仓库组，用来合并多个hosted/proxy仓库，当你的项目希望在多个repository使用资源时就不需要多次引用了，只需要引用一个group即可</li>
<li>virtual，虚拟仓库基本废弃了。</li>
</ul>
</li>
<li>预置仓库<ul>
<li>Central：该仓库代理Maven中央仓库，其策略为Release，因此只会下载和缓存中央仓库中的发布版本构件。</li>
<li>Releases：这是一个策略为Release的宿主类型仓库，用来部署正式发布版本构件</li>
<li>Snapshots：这是一个策略为Snapshot的宿主类型仓库，用来部署开发版本构件。</li>
<li>3rd party：这是一个策略为Release的宿主类型仓库，用来部署无法从maven中央仓库获得的第三方发布版本构件，比如IBM或者oracle的一些jar包（比如classe12.jar），由于受到商业版权的限制，不允许在中央仓库出现，如果想让这些包在私服上进行管理，就需要第三方的仓库。</li>
<li>Public Repositories：一个组合仓库</li>
</ul>
</li>
</ul>
<h2 id="Nexus-下载地址"><a href="#Nexus-下载地址" class="headerlink" title="Nexus 下载地址"></a>Nexus 下载地址</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc29uYXR5cGUuY29tL25leHVzLXJlcG9zaXRvcnktb3Nz" title="https://www.sonatype.com/nexus-repository-oss">Nexus 官方网站<i class="fa fa-external-link"></i></span></p>
<p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/jiuhe/20200318141611.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="搭建Maven-Nexus"><a href="#搭建Maven-Nexus" class="headerlink" title="搭建Maven Nexus"></a>搭建Maven Nexus</h3><ol>
<li>进入 <span class="exturl" data-url="aHR0cHM6Ly93d3cuc29uYXR5cGUuY29tL25leHVzLXJlcG9zaXRvcnktb3Nz" title="https://www.sonatype.com/nexus-repository-oss">Nexus 官方网站<i class="fa fa-external-link"></i></span></li>
<li>在首页选择 <code>“GET PREPOSITORY OSS”</code></li>
<li>页面拉倒最下面，点击<code>OSS2</code></li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200327201355.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>由于Maven Nexus 是收费的，这里我们需要使用免费的版本</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200327201558.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>下载之后，会得到如下内容</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200328234944.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>此时调出 <code>cmd</code>, 进入目录<code>D:\java\Nexus\nexus-latest-bundle\nexus-2.14.15-01\bin</code></li>
<li>运行 <code>nexus.bat start</code>，可以发现会<code>拒绝访问</code></li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200328235057.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>使用管理员模式运行<ul>
<li>运行 <code>nexus.bat install</code> 安装</li>
<li><code>nexus.bat start</code> 启动服务</li>
</ul>
</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329170837.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>访问 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgxL25leHVz6L+b5YWl5YiwbmV4dXM=" title="http://localhost:8081/nexus进入到nexus">http://localhost:8081/nexus进入到nexus<i class="fa fa-external-link"></i></span> 页面</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329002328.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>进入主页</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329164131.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h3 id="建立第一个个人仓库"><a href="#建立第一个个人仓库" class="headerlink" title="建立第一个个人仓库"></a>建立第一个个人仓库</h3><ol>
<li>完成上一节内容之后，进入主页面，点击右上角<code>Log In</code> 登陆系统</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329165902.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>Nexus 默认到用户名称和密码为 <code>admin</code> 以及 <code>admin123</code>，输入账户名和密码之后登陆系统</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329170010.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>登陆之后会发现界面发生了改变，因为此时我们拥有了对应到权限</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329170040.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>点击 <code>add</code>，选择 <code>Hosted Repository</code> 改含义会在后面进行解释</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329170809.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>如图所示，基本上只需要填写很少到内容，就可以完成一个仓库到创建，点击下方到<code>save</code>按钮即可创建一个仓库</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329170521.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>查看配置,可以看到改仓库被放到了一个默认的地址里面</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200329171028.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h3 id="将Jar包项目加入到个人仓库"><a href="#将Jar包项目加入到个人仓库" class="headerlink" title="将Jar包项目加入到个人仓库"></a>将Jar包项目加入到个人仓库</h3><p>这里以一个自己的项目作为测试</p>
<p>Maven依赖如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.smart4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;smart-framwork&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>我们需要先登录Maven Nexus，具备管理员的权限，然后点击<code>3rd party</code>(三方依赖)，截图内容如下</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405114219.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>依照截图填入如下的依赖</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405114639.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<blockquote>
<p>GAV Definition: 定义GAV</p>
<p>Auto Guess：自动猜测</p>
<p>Group：同Maven 到 group定义</p>
<p>Artifact：同Maven 到 Artifact定义</p>
<p>Version：版本号</p>
<p>Packaging：打包方式</p>
<p>下方需要上传依赖对应到jar包</p>
</blockquote>
<p>上传之后需要添加到maven Nexus</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405115034.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405115136.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>等待上传，上传成功之后会给予对应到提示信息</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405115216.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>上传完成之后，我们可以点击<code>Browse Index</code>看到自己之前上传的依赖</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405115356.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<blockquote>
<p>默认情况下我们到公共访问地址如下：</p>
<p><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgxL25leHVzL2NvbnRlbnQvZ3JvdXBzL3B1YmxpYw==" title="http://localhost:8081/nexus/content/groups/public">http://localhost:8081/nexus/content/groups/public<i class="fa fa-external-link"></i></span> 公共仓库的访问地址</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405115744.png?ynotemdtimestamp=1595729096959" alt="img"></p>
</blockquote>
<h3 id="将个人仓库的jar包添加到项目当中"><a href="#将个人仓库的jar包添加到项目当中" class="headerlink" title="将个人仓库的jar包添加到项目当中"></a>将个人仓库的jar包添加到项目当中</h3><p>把jar包添加到nexus之后，我们可以尝试让nexus来管理我们到项目依赖了</p>
<p>接下来介绍如何使用maven nexus 来关联我们到依赖</p>
<ol>
<li>我们需要建立一个存在pom文件的项目，把对应到pom依赖引入</li>
</ol>
<blockquote>
<p>注意：事先查看nexus公有仓库是否存在依赖</p>
</blockquote>
<ol>
<li>在Maven 的 <code>conf</code> 下面增加配置，以个人为例进入<code>D:\java\apach\apache-maven-3.6.0\conf</code>，修改<code>setting.xml</code>,添加如下内容</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 添加 nexus 访问权限 --&gt;</span><br><span class="line">&lt;servers&gt;	</span><br><span class="line">	&lt;server&gt;</span><br><span class="line">	  &lt;id&gt;xdclass&lt;&#x2F;id&gt;</span><br><span class="line">	  &lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">	  &lt;password&gt;admin123&lt;&#x2F;password&gt;	</span><br><span class="line">	&lt;&#x2F;server&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;servers&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;mirrors&gt;</span><br><span class="line">	&lt;!-- 自定义 nexus --&gt;</span><br><span class="line">	 &lt;mirror&gt;</span><br><span class="line">        &lt;id&gt;xdclass&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;mirrorOf&gt;nexus,central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">		&lt;name&gt;local nexus&lt;&#x2F;name&gt;  </span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">	&lt;!-- 阿里云配置 --&gt;</span><br><span class="line">	&lt;mirror&gt;  </span><br><span class="line">      &lt;id&gt;alimaven&lt;&#x2F;id&gt;  </span><br><span class="line">      &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;  </span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;  </span><br><span class="line">      &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;          </span><br><span class="line">	&lt;&#x2F;mirror&gt;  </span><br><span class="line">	</span><br><span class="line">&lt;&#x2F;mirrors&gt;</span><br><span class="line">&lt;profiles&gt;</span><br><span class="line">	&lt;profile&gt;</span><br><span class="line">        &lt;id&gt;xd&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;repositories&gt;</span><br><span class="line">            &lt;repository&gt;</span><br><span class="line">                &lt;id&gt;local-nexus&lt;&#x2F;id&gt;</span><br><span class="line">                &lt;!-- 本地仓库路径 --&gt;</span><br><span class="line">                &lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">                &lt;releases&gt;</span><br><span class="line">                    &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">                &lt;&#x2F;releases&gt;</span><br><span class="line">                &lt;!-- 开启快照 --&gt;</span><br><span class="line">                &lt;snapshots&gt;</span><br><span class="line">                    &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">                &lt;&#x2F;snapshots&gt;</span><br><span class="line">            &lt;&#x2F;repository&gt;</span><br><span class="line">        &lt;&#x2F;repositories&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br><span class="line">&lt;&#x2F;profiles&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 需要 开启 Profile 配置 --&gt;</span><br><span class="line">&lt;activeProfiles&gt;</span><br><span class="line">    &lt;activeProfile&gt;xd&lt;&#x2F;activeProfile&gt;</span><br><span class="line">&lt;&#x2F;activeProfiles&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>在IDEA中重新导入依赖</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405142135.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h3 id="将个人到Maven项目发布到Nexus管理"><a href="#将个人到Maven项目发布到Nexus管理" class="headerlink" title="将个人到Maven项目发布到Nexus管理"></a>将个人到Maven项目发布到Nexus管理</h3><p>本节介绍如何把自己的项目发布到nexus ，这里单独开了一个仓库进行配置</p>
<p>在进行本节内容之前，查看Maven 到 <code>setting.xml</code>内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 用于发布正式版本 --&gt;</span><br><span class="line">&lt;server&gt;</span><br><span class="line">    &lt;id&gt;public&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">    &lt;password&gt;admin123&lt;&#x2F;password&gt;	</span><br><span class="line">&lt;&#x2F;server&gt;</span><br><span class="line">&lt;!-- 测试 --&gt;</span><br><span class="line">&lt;server&gt;</span><br><span class="line">    &lt;id&gt;lazytime&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">    &lt;password&gt;admin123&lt;&#x2F;password&gt;	</span><br><span class="line">&lt;&#x2F;server&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>在需要发布源代码到mavne项目<code>pom.xml</code>添加如下内容</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">       &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br><span class="line">           &lt;plugins&gt;</span><br><span class="line">               &lt;!-- clean lifecycle, see https:&#x2F;&#x2F;maven.apache.org&#x2F;ref&#x2F;current&#x2F;maven-core&#x2F;lifecycles.html#clean_Lifecycle --&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-clean-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;3.1.0&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;!-- default lifecycle, jar packaging: see https:&#x2F;&#x2F;maven.apache.org&#x2F;ref&#x2F;current&#x2F;maven-core&#x2F;default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-resources-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;3.0.2&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;3.8.0&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-surefire-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;2.22.1&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-jar-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;3.0.2&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-install-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;2.5.2&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-deploy-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;2.8.2&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line">               &lt;!-- site lifecycle, see https:&#x2F;&#x2F;maven.apache.org&#x2F;ref&#x2F;current&#x2F;maven-core&#x2F;lifecycles.html#site_Lifecycle --&gt;</span><br><span class="line">               &lt;plugin&gt;</span><br><span class="line">                   &lt;artifactId&gt;maven-site-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                   &lt;version&gt;3.7.1&lt;&#x2F;version&gt;</span><br><span class="line">               &lt;&#x2F;plugin&gt;</span><br><span class="line"></span><br><span class="line">           &lt;&#x2F;plugins&gt;</span><br><span class="line">       &lt;&#x2F;pluginManagement&gt;</span><br><span class="line">   &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;distributionManagement&gt;</span><br><span class="line">       &lt;repository&gt;</span><br><span class="line">           &lt;!-- 此id 必须对应setting 里面到 server id 否则会没有权限无法部署 --&gt;</span><br><span class="line">           &lt;id&gt;public&lt;&#x2F;id&gt;</span><br><span class="line">           &lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;lazytime&lt;&#x2F;url&gt;</span><br><span class="line">       &lt;&#x2F;repository&gt;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;distributionManagement&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>以IDEA为例，<code>deloyer</code> 项目到 <code>maven Nexus</code></li>
</ol>
<p>运行<code>Maven Deloy</code>发布项目到nexus</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405162751.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>查看<code>Maven Nexus</code> ，查看发布的项目内容</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405162923.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<blockquote>
<p>如果不能发布，请查看仓库是否允许重新部署:</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405164619.png?ynotemdtimestamp=1595729096959" alt="img"></p>
</blockquote>
<h3 id="使用Snapshots-快照快捷管理项目迭代"><a href="#使用Snapshots-快照快捷管理项目迭代" class="headerlink" title="使用Snapshots 快照快捷管理项目迭代"></a>使用Snapshots 快照快捷管理项目迭代</h3><p>使用上一节办法存在很大到缺点：</p>
<ol>
<li>每次改动源代码就需要发布一个新版本，使用者就需要更新pom文件到项目版本号，或者本地仓库删掉旧依赖，重新引入依赖，这样非常麻烦</li>
<li>每次更新项目都需要通知使用者更新版本号</li>
</ol>
<p>如何解决如上问题呢？</p>
<p>那么我们就需要使用<code>快照</code>，快照相当于项目到一个副本，我们可以在开发到时候使用快照，发布到时候在使用正式到版本号进行处理，使nexus的管理更加方便</p>
<ol>
<li>打开maven nexus 主页，登陆管理员账户，查看如下内容</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405164857.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>在<code>Maven</code> 的<code>setting</code>文件当中添加如下内容，加入到对应的账号</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;server&gt;</span><br><span class="line">		&lt;id&gt;snapshots&lt;&#x2F;id&gt;</span><br><span class="line">		&lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">		&lt;password&gt;admin123&lt;&#x2F;password&gt;	</span><br><span class="line">	&lt;&#x2F;server&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>修改项目版本号，一定要依照maven到 <code>snaphoto</code> 规则，否则部署快照版本会失败</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">&lt;groupId&gt;org.smart4j&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;smart-framwork&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;!-- 写法一定要规范 --&gt;</span><br><span class="line">&lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>执行<code>maven deloy</code> 部署配置</li>
</ol>
<p>注意待发布项目的<code>pom.xml</code>配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">        &lt;snapshotRepository&gt;</span><br><span class="line">            &lt;id&gt;snapshots&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;snapshots&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;snapshotRepository&gt;</span><br><span class="line">    &lt;&#x2F;distributionManagement&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405170455.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>查看<code>Maven Nexus</code>是否发布成功</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405170339.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<blockquote>
<p>再次强调，如果部署失败，请查看仓库是否允许重复部署</p>
</blockquote>
<ol>
<li>接下来我们试下快照是如何解决版本迭代的问题的</li>
</ol>
<p>由于使用了快照版本，需要更改依赖如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.smart4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;smart-framwork&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>我们添加了一个main方法，然后点击IDEA <code>deploy</code>，部署快照版本的项目</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405201713.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>我们在引用到项目里面可以看到项目已经引用到了本地当中</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200405202232.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo和码云实现自建图床</title>
    <url>/2020/07/26/picgo/</url>
    <content><![CDATA[<h1 id="PicGo和码云实现自建图床"><a href="#PicGo和码云实现自建图床" class="headerlink" title="PicGo和码云实现自建图床"></a>PicGo和码云实现自建图床</h1><h2 id="最好的教程"><a href="#最好的教程" class="headerlink" title="最好的教程"></a>最好的教程</h2><p>知乎的一篇教程：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMDI1OTQ1NTQ=" title="https://zhuanlan.zhihu.com/p/102594554">https://zhuanlan.zhihu.com/p/102594554<i class="fa fa-external-link"></i></span></p>
<h2 id="测试图床链接："><a href="#测试图床链接：" class="headerlink" title="测试图床链接："></a>测试图床链接：</h2><p>链接1 ：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMDAzMTgyMzQzNTMucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200318234353.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200318234353.png<i class="fa fa-external-link"></i></span></p>
<p>链接2：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMDAzMTgyMzQ2MjEucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200318234621.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200318234621.png<i class="fa fa-external-link"></i></span></p>
<p>链接3：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9qaXVoZS8yMDIwMDMxOTA5NDEzMy5wbmc=" title="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319094133.png">https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319094133.png<i class="fa fa-external-link"></i></span></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200318234353.png?ynotemdtimestamp=1595729096959" alt="最终结果1"></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200318234621.png?ynotemdtimestamp=1595729096959" alt="最终结果2"></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319094133.png?ynotemdtimestamp=1595729096959" alt="最终结果3"></p>
<a id="more"></a>

<h2 id="为什么要使用码云代替图床"><a href="#为什么要使用码云代替图床" class="headerlink" title="为什么要使用码云代替图床"></a>为什么要使用码云代替图床</h2><ul>
<li>github毕竟是外国服务器，上传过程中因为网络问题有可能会无法使用的情况</li>
<li>码云作为国内的“github”，访问和上传速度更快，所以使用码云更为方便</li>
<li>目前<code>PicGo 2.0</code>之后已经有人集成了插件，使用和github一样简单好用</li>
</ul>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h3 id="1-下载PicGo"><a href="#1-下载PicGo" class="headerlink" title="1. 下载PicGo"></a>1. 下载PicGo</h3><p>官网地址：<span class="exturl" data-url="aHR0cHM6Ly9tb2x1bmVyZmlubi5jb20vUGljR28v" title="https://molunerfinn.com/PicGo/">https://molunerfinn.com/PicGo/<i class="fa fa-external-link"></i></span></p>
<p>Github 快捷网址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2VzL3RhZy92Mi4yLjI=" title="https://github.com/Molunerfinn/PicGo/releases/tag/v2.2.2">https://github.com/Molunerfinn/PicGo/releases/tag/v2.2.2<i class="fa fa-external-link"></i></span> 选择对应的版本下载即可</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319131933.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>更多信息访问Github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dv" title="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo<i class="fa fa-external-link"></i></span></p>
<h3 id="2-安装PicGo"><a href="#2-安装PicGo" class="headerlink" title="2. 安装PicGo"></a>2. 安装PicGo</h3><p>安装过程就忽略了，安装完成之后打开软件</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319132027.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h3 id="3-PicGo-安装gitee-插件"><a href="#3-PicGo-安装gitee-插件" class="headerlink" title="3. PicGo 安装gitee 插件"></a>3. PicGo 安装gitee 插件</h3><p>前提条件：<strong>注意PicGo安装的前提条件是2.0版本之后新增的插件功能！！！</strong></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319132225.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>将鼠标滚轮滚到最下面，会发现有一个插件设置</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319132358.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>选择安装 <code>gitee-uploader 1.1.2</code>这个插件</p>
<blockquote>
<p><strong>安装失败如何解决</strong>？</p>
<p>注意该插件需要node.js 的环境，Node.js的安装如下</p>
<p><span class="exturl" data-url="aHR0cDovL25vZGVqcy5jbi9kb3dubG9hZC8=" title="http://nodejs.cn/download/">http://nodejs.cn/download/<i class="fa fa-external-link"></i></span></p>
<p>进入中文官网之后，安装对应的版本即可</p>
<p>window 下面的exe程序安装之后会自动的配置环境变量，这时候我们可以使用命令查一下是否有Node环境</p>
<ol>
<li>win 键 + R 打开<strong>运行</strong>窗口</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319132719.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>输入命令<code>node -v</code></li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319132750.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>如果出现如上所示的内容则证明安装成功</li>
</ol>
</blockquote>
<h3 id="4-码云搭建图床仓库"><a href="#4-码云搭建图床仓库" class="headerlink" title="4. 码云搭建图床仓库"></a>4. 码云搭建图床仓库</h3><ol>
<li>进入自己的码云：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL3Byb2plY3Rz" title="https://gitee.com/lazyTimes/projects">https://gitee.com/lazyTimes/projects<i class="fa fa-external-link"></i></span> 这是我的码云地址</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319133220.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>选择右上角有一个 <code>&quot;+&quot;</code>号，选择新建仓库</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319133327.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>填写基本信息，页面翻到最下面，选择保存</li>
</ol>
<p><img src="http://null/" alt="image-20200319133550209"></p>
<ol>
<li>新建仓库成功</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319133836.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h3 id="5-获取gitee私人令牌"><a href="#5-获取gitee私人令牌" class="headerlink" title="5. 获取gitee私人令牌"></a>5. 获取gitee私人令牌</h3><p>和github一样，在最终设置之前我们需要获取一下gitee令牌用于上传</p>
<ol>
<li>登录gitee之后，右上角选择</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200319214555.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>选择“私人令牌”</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200319214625.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>选择“生成令牌”，进入到令牌到创建页面</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200319214721.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>勾选如图到内容，一般只需要用到前面几项就可以满足我们到需求。按要求输入密码即可生成成功</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200319214905.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<ol>
<li>生成令牌成功，将令牌内容保存在自己到笔记，防止忘记</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200319215102.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>经过如上步骤之后，我们基本就算是大功告成了，现在只需要在PicGo里面配置一下即可</p>
<h3 id="6-PicGo-配置"><a href="#6-PicGo-配置" class="headerlink" title="6. PicGo 配置"></a>6. PicGo 配置</h3><ul>
<li>repo：必填，填写gitee上面的仓库名称</li>
<li>branch：一般默认master 即可，有需要可以建立自己到分支</li>
<li>tolken：要用到上一节所述到私人令牌，如果忘记了可以进入页面之后重新获取一下新令牌</li>
<li>path：写上文件存放到位置，一般写上<code>img</code>即可</li>
<li>customPath：定义传输到格式，一般可以不用管</li>
<li>customUrl：自定义上传到链接</li>
</ul>
<blockquote>
<p>不知道怎么获取repo地址？</p>
<ol>
<li>进入自己到图床仓库到主页，复制地址栏到内容</li>
<li>复制下方到用户和项目名称</li>
</ol>
<p><strong>注意中间到内容不要存在空格，删除注意不要多删除字符造成上传失败</strong></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200319215400.png?ynotemdtimestamp=1595729096959" alt="img"></p>
</blockquote>
<p>最终到配置结果如下所示</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20200319131435.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由于github存在限制加上外网访问普遍较慢到问题，如果网速不给力并且没有科学上网工具建议使用gitee作为图形仓库。可以在1S内上传，非常方便。赶紧把gitee用起来把</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>PicGo</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle常用命令大全（很有用，做笔记）</title>
    <url>/2020/08/29/note22/</url>
    <content><![CDATA[<h1 id="Oracle常用命令大全（很有用，做笔记）"><a href="#Oracle常用命令大全（很有用，做笔记）" class="headerlink" title="Oracle常用命令大全（很有用，做笔记）"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZmxnZy9wLzYxMzY1ODYuaHRtbA==" title="https://www.cnblogs.com/flgg/p/6136586.html">Oracle常用命令大全（很有用，做笔记）<i class="fa fa-external-link"></i></span></h1><p>单纯参考别人的博客记录，紧急时候帮助很大</p>
<a id="more"></a>

<p>一、ORACLE的启动和关闭 1、在单机环境下 要想启动或关闭ORACLE系统必须首先切换到ORACLE用户，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure>

<p>a、启动ORACLE系统</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">oracle&gt;svrmgrl </span><br><span class="line">SVRMGR&gt;connect internal </span><br><span class="line">SVRMGR&gt;startup </span><br><span class="line">SVRMGR&gt;quit</span><br></pre></td></tr></table></figure>

<p>b、关闭ORACLE系统</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">oracle&gt;svrmgrl </span><br><span class="line">SVRMGR&gt;connect internal </span><br><span class="line">SVRMGR&gt;shutdown </span><br><span class="line">SVRMGR&gt;quit</span><br></pre></td></tr></table></figure>

<p>启动oracle9i数据库命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sqlplus &#x2F;nolog </span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 9.2.0.1.0 - Production on Fri Oct 31 13:53:53 2003 </span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2002, Oracle Corporation.  All rights reserved. </span><br><span class="line"></span><br><span class="line">SQL&gt; connect &#x2F; as sysdba  </span><br><span class="line">Connected to an idle instance. </span><br><span class="line">SQL&gt; startup^C </span><br><span class="line"></span><br><span class="line">SQL&gt; startup </span><br><span class="line">ORACLE instance started.</span><br></pre></td></tr></table></figure>

<p>2、在双机环境下 要想启动或关闭ORACLE系统必须首先切换到root用户，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su － root </span><br><span class="line"></span><br><span class="line">a、启动ORACLE系统 </span><br><span class="line">hareg －y oracle </span><br><span class="line"></span><br><span class="line">b、关闭ORACLE系统 </span><br><span class="line">hareg －n oracle </span><br><span class="line"></span><br><span class="line">Oracle数据库有哪几种启动方式</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>有以下几种启动方式： 1、startup nomount 非安装启动，这种方式启动下可执行：重建控制文件、重建数据库</p>
<p>读取init.ora文件，启动instance，即启动SGA和后台进程，这种启动只需要init.ora文件。</p>
<p>2、startup mount dbname 安装启动，这种方式启动下可执行： 数据库日志归档、 数据库介质恢复、 使数据文件联机或脱机， 重新定位数据文件、重做日志文件。</p>
<p>执行“nomount”，然后打开控制文件，确认数据文件和联机日志文件的位置， 但此时不对数据文件和日志文件进行校验检查。</p>
<p>3、startup open dbname 先执行“nomount”，然后执行“mount”，再打开包括Redo log文件在内的所有数据库文件， 这种方式下可访问数据库中的数据。</p>
<p>4、startup，等于以下三个命令 startup nomount alter database mount alter database open</p>
<p>5、startup restrict 约束方式启动 这种方式能够启动数据库，但只允许具有一定特权的用户访问 非特权用户访问时，会出现以下提示： ERROR： ORA-01035: ORACLE 只允许具有 RESTRICTED SESSION 权限的用户使用</p>
<p>6、startup force 强制启动方式 当不能关闭数据库时，可以用startup force来完成数据库的关闭 先关闭数据库，再执行正常启动数据库命令</p>
<p>7、startup pfile=参数文件名 带初始化参数文件的启动方式 先读取参数文件，再按参数文件中的设置启动数据库 例：startup pfile=E:Oracleadminoradbpfileinit.ora</p>
<p>8、startup EXCLUSIVE 二、用户如何有效地利用数据字典 　ORACLE的数据字典是数据库的重要组成部分之一，它随着数据库的产生而产生, 随着数据库的变化而变化, 体现为sys用户下的一些表和视图。数据字典名称是大写的英文字符。</p>
<p> 数据字典里存有用户信息、用户的权限信息、所有数据对象信息、表的约束条件、统计分析数据库的视图等。 我们不能手工修改数据字典里的信息。</p>
<p>很多时候，一般的ORACLE用户不知道如何有效地利用它。</p>
<p>dictionary　　　全部数据字典表的名称和解释，它有一个同义词dict  dict_column　　 全部数据字典表里字段名称和解释</p>
<p> 如果我们想查询跟索引有关的数据字典时，可以用下面这条SQL语句:</p>
<p> SQL&gt;select * from dictionary where instr(comments,’index’)&gt;0;</p>
<p> 如果我们想知道user_indexes表各字段名称的详细含义，可以用下面这条SQL语句:</p>
<p> SQL&gt;select column_name,comments from dict_columns where table_name=’USER_INDEXES’;</p>
<p> 依此类推，就可以轻松知道数据字典的详细名称和解释，不用查看ORACLE的其它文档资料了。</p>
<p> 下面按类别列出一些ORACLE用户常用数据字典的查询使用方法。</p>
<p> 1、用户</p>
<p> 查看当前用户的缺省表空间  SQL&gt;select username,default_tablespace from user_users;</p>
<p> 查看当前用户的角色  SQL&gt;select * from user_role_privs;</p>
<p> 查看当前用户的系统权限和表级权限  SQL&gt;select * from user_sys_privs;  SQL&gt;select * from user_tab_privs;</p>
<p> 2、表</p>
<p> 查看用户下所有的表  SQL&gt;select * from user_tables;</p>
<p> 查看名称包含log字符的表  SQL&gt;select object_name,object_id from user_objects  where instr(object_name,’LOG’)&gt;0;</p>
<p> 查看某表的创建时间  SQL&gt;select object_name,created from user_objects where object_name=upper(‘&amp;table_name’);</p>
<p> 查看某表的大小  SQL&gt;select sum(bytes)/(1024*1024) as “size(M)” from user_segments  where segment_name=upper(‘&amp;table_name’);</p>
<p> 查看放在ORACLE的内存区里的表  SQL&gt;select table_name,cache from user_tables where instr(cache,’Y’)&gt;0;</p>
<p> 3、索引</p>
<p> 查看索引个数和类别  SQL&gt;select index_name,index_type,table_name from user_indexes order by table_name;</p>
<p> 查看索引被索引的字段  SQL&gt;select * from user_ind_columns where index_name=upper(‘&amp;index_name’);</p>
<p> 查看索引的大小  SQL&gt;select sum(bytes)/(1024*1024) as “size(M)” from user_segments  where segment_name=upper(‘&amp;index_name’);</p>
<p> 4、序列号</p>
<p> 查看序列号，last_number是当前值  SQL&gt;select * from user_sequences;</p>
<p> 5、视图</p>
<p> 查看视图的名称  SQL&gt;select view_name from user_views;</p>
<p> 查看创建视图的select语句  SQL&gt;set view_name,text_length from user_views;  SQL&gt;set long 2000; 说明：可以根据视图的text_length值设定set long 的大小  SQL&gt;select text from user_views where view_name=upper(‘&amp;view_name’);</p>
<p> 6、同义词</p>
<p> 查看同义词的名称  SQL&gt;select * from user_synonyms;</p>
<p> 7、约束条件</p>
<p> 查看某表的约束条件  SQL&gt;select constraint_name, constraint_type,search_condition, r_constraint_name  from user_constraints where table_name = upper(‘&amp;table_name’);</p>
<p> SQL&gt;select c.constraint_name,c.constraint_type,cc.column_name  from user_constraints c,user_cons_columns cc  where c.owner = upper(‘&amp;table_owner’) and c.table_name = upper(‘&amp;table_name’)  and c.owner = cc.owner and c.constraint_name = cc.constraint_name  order by cc.position;</p>
<p> 8、存储函数和过程</p>
<p> 查看函数和过程的状态  SQL&gt;select object_name,status from user_objects where object_type=’FUNCTION’;  SQL&gt;select object_name,status from user_objects where object_type=’PROCEDURE’;</p>
<p> 查看函数和过程的源代码  SQL&gt;select text from all_source where owner=user and name=upper(‘&amp;plsql_name’);</p>
<p>三、查看数据库的SQL 1、查看表空间的名称及大小</p>
<p> select t.tablespace_name, round(sum(bytes/(1024*1024)),0) ts_size  from dba_tablespaces t, dba_data_files d  where t.tablespace_name = d.tablespace_name  group by t.tablespace_name;</p>
<p>2、查看表空间物理文件的名称及大小</p>
<p> select tablespace_name, file_id, file_name,  round(bytes/(1024*1024),0) total_space  from dba_data_files  order by tablespace_name;</p>
<p>3、查看回滚段名称及大小</p>
<p> select segment_name, tablespace_name, r.status,  (initial_extent/1024) InitialExtent,(next_extent/1024) NextExtent,  max_extents, v.curext CurExtent  From dba_rollback_segs r, v$rollstat v  Where r.segment_id = v.usn(+)  order by segment_name ;</p>
<p>4、查看控制文件</p>
<p> select name from v$controlfile;</p>
<p>5、查看日志文件</p>
<p> select member from v$logfile;</p>
<p>6、查看表空间的使用情况</p>
<p> select sum(bytes)/(1024*1024) as free_space,tablespace_name  from dba_free_space  group by tablespace_name;</p>
<p> SELECT A.TABLESPACE_NAME,A.BYTES TOTAL,B.BYTES USED, C.BYTES FREE,  (B.BYTES<em>100)/A.BYTES “% USED”,(C.BYTES</em>100)/A.BYTES “% FREE”  FROM SYS.SM$TS_AVAIL A,SYS.SM$TS_USED B,SYS.SM$TS_FREE C  WHERE A.TABLESPACE_NAME=B.TABLESPACE_NAME AND A.TABLESPACE_NAME=C.TABLESPACE_NAME;</p>
<p>7、查看数据库库对象</p>
<p> select owner, object_type, status, count(*) count# from all_objects group by owner, object_type, status;</p>
<p>8、查看数据库的版本</p>
<p> Select version FROM Product_component_version  Where SUBSTR(PRODUCT,1,6)=’Oracle’;</p>
<p>9、查看数据库的创建日期和归档方式</p>
<p> Select Created, Log_Mode, Log_Mode From V$Database; 四、ORACLE用户连接的管理</p>
<p>用系统管理员，查看当前数据库有几个用户连接：</p>
<p>SQL&gt; select username,sid,serial# from v$session;</p>
<p>如果要停某个连接用</p>
<p>SQL&gt; alter system kill session ‘sid,serial#’;</p>
<p>如果这命令不行,找它UNIX的进程数</p>
<p>SQL&gt; select pro.spid from v$session ses,v$process pro where ses.sid=21 and ses.paddr=pro.addr;</p>
<p>说明：21是某个连接的sid数</p>
<p>然后用 kill 命令杀此进程号。</p>
<p>五、SQL<em>PLUS使用 a、近入SQL</em>Plus $sqlplus 用户名/密码</p>
<p>退出SQL*Plus SQL&gt;exit</p>
<p>b、在sqlplus下得到帮助信息 列出全部SQL命令和SQL*Plus命令 SQL&gt;help 列出某个特定的命令的信息 SQL&gt;help 命令名</p>
<p>c、显示表结构命令DESCRIBE SQL&gt;DESC 表名</p>
<p>d、SQL*Plus中的编辑命令 显示SQL缓冲区命令 SQL&gt;L</p>
<p>修改SQL命令 首先要将待改正行变为当前行 SQL&gt;n 用CHANGE命令修改内容 SQL&gt;c/旧/新 重新确认是否已正确 SQL&gt;L</p>
<p>使用INPUT命令可以在SQL缓冲区中增加一行或多行 SQL&gt;i SQL&gt;输入内容</p>
<p>e、调用外部系统编辑器 SQL&gt;edit 文件名 可以使用DEFINE命令设置系统变量EDITOR来改变文本编辑器的类型，在login.sql文件中定义如下一行 DEFINE_EDITOR=vi</p>
<p>f、运行命令文件 SQL&gt;START test SQL&gt;@test</p>
<p>常用SQL*Plus语句 a、表的创建、修改、删除 创建表的命令格式如下： create table 表名 （列说明列表）；</p>
<p>为基表增加新列命令如下： ALTER TABLE 表名 ADD （列说明列表） 例：为test表增加一列Age，用来存放年龄  sql&gt;alter table test  add （Age number(3)）；</p>
<p>修改基表列定义命令如下： ALTER TABLE 表名 MODIFY （列名 数据类型） 例：将test表中的Count列宽度加长为10个字符  sql&gt;alter atble test  modify （County char(10)）；</p>
<p>b、将一张表删除语句的格式如下： DORP TABLE 表名； 例：表删除将同时删除表的数据和表的定义 sql&gt;drop table test</p>
<p>c、表空间的创建、删除</p>
<p>六、ORACLE逻辑备份的SH文件</p>
<p>完全备份的SH文件：exp_comp.sh</p>
<p>rq=<code>date +&quot;%m%d&quot;</code></p>
<p>su - oracle -c “exp system/manager full=y inctype=complete file=/oracle/export/db_comp$rq.dmp”</p>
<p>累计备份的SH文件：exp_cumu.sh</p>
<p>rq=<code>date +&quot;%m%d&quot;</code></p>
<p>su - oracle -c “exp system/manager full=y inctype=cumulative file=/oracle/export/db_cumu$rq.dmp”</p>
<p>增量备份的SH文件: exp_incr.sh</p>
<p>rq=<code>date +&quot;%m%d&quot;</code></p>
<p>su - oracle -c “exp system/manager full=y inctype=incremental file=/oracle/export/db_incr$rq.dmp”</p>
<p>root用户crontab文件 /var/spool/cron/crontabs/root增加以下内容</p>
<p>0 2 1 * * /oracle/exp_comp.sh</p>
<p>30 2 * * 0-5 /oracle/exp_incr.sh</p>
<p>45 2 * * 6 /oracle/exp_cumu.sh</p>
<p>当然这个时间表可以根据不同的需求来改变的，这只是一个例子。</p>
<p>七、ORACLE 常用的SQL语法和数据对象</p>
<p>一.数据控制语句 (DML) 部分</p>
<p>1.INSERT (往数据表里插入记录的语句)</p>
<p>INSERT INTO 表名(字段名1, 字段名2, ……) VALUES ( 值1, 值2, ……); INSERT INTO 表名(字段名1, 字段名2, ……) SELECT (字段名1, 字段名2, ……) FROM 另外的表名;</p>
<p>字符串类型的字段值必须用单引号括起来, 例如: ’GOOD DAY’ 如果字段值里包含单引号’ 需要进行字符串转换, 我们把它替换成两个单引号’’. 字符串类型的字段值超过定义的长度会出错, 最好在插入前进行长度校验.</p>
<p>日期字段的字段值可以用当前数据库的系统时间SYSDATE, 精确到秒 或者用字符串转换成日期型函数TO_DATE(‘2001-08-01’,’YYYY-MM-DD’) TO_DATE()还有很多种日期格式, 可以参看ORACLE DOC. 年-月-日 小时:分钟:秒 的格式YYYY-MM-DD HH24:MI:SS</p>
<p>INSERT时最大可操作的字符串长度小于等于4000个单字节, 如果要插入更长的字符串, 请考虑字段用CLOB类型, 方法借用ORACLE里自带的DBMS_LOB程序包.</p>
<p>INSERT时如果要用到从1开始自动增长的序列号, 应该先建立一个序列号 CREATE SEQUENCE 序列号的名称 (最好是表名+序列号标记) INCREMENT BY 1 START WITH 1 MAXVALUE 99999 CYCLE NOCACHE; 其中最大的值按字段的长度来定, 如果定义的自动增长的序列号 NUMBER(6) , 最大值为999999 INSERT 语句插入这个字段值为: 序列号的名称.NEXTVAL</p>
<p>2.DELETE (删除数据表里记录的语句)</p>
<p>DELETE FROM表名 WHERE 条件;</p>
<p>注意：删除记录并不能释放ORACLE里被占用的数据块表空间. 它只把那些被删除的数据块标成unused.</p>
<p>如果确实要删除一个大表里的全部记录, 可以用 TRUNCATE 命令, 它可以释放占用的数据块表空间 TRUNCATE TABLE 表名; 此操作不可回退.</p>
<p>3.UPDATE (修改数据表里记录的语句)</p>
<p>UPDATE表名 SET 字段名1=值1, 字段名2=值2, …… WHERE 条件;</p>
<p>如果修改的值N没有赋值或定义时, 将把原来的记录内容清为NULL, 最好在修改前进行非空校验; 值N超过定义的长度会出错, 最好在插入前进行长度校验..</p>
<p>注意事项: A. 以上SQL语句对表都加上了行级锁,  确认完成后, 必须加上事物处理结束的命令 COMMIT 才能正式生效,  否则改变不一定写入数据库里.  如果想撤回这些操作, 可以用命令 ROLLBACK 复原.</p>
<p>B. 在运行INSERT, DELETE 和 UPDATE 语句前最好估算一下可能操作的记录范围,  应该把它限定在较小 (一万条记录) 范围内,. 否则ORACLE处理这个事物用到很大的回退段.  程序响应慢甚至失去响应. 如果记录数上十万以上这些操作, 可以把这些SQL语句分段分次完成,  其间加上COMMIT 确认事物处理. 二.数据定义 (DDL) 部分</p>
<p>1.CREATE (创建表, 索引, 视图, 同义词, 过程, 函数, 数据库链接等)</p>
<p>ORACLE常用的字段类型有 CHAR 固定长度的字符串 VARCHAR2 可变长度的字符串 NUMBER(M,N) 数字型M是位数总长度, N是小数的长度 DATE 日期类型</p>
<p>创建表时要把较小的不为空的字段放在前面, 可能为空的字段放在后面</p>
<p>创建表时可以用中文的字段名, 但最好还是用英文的字段名</p>
<p>创建表时可以给字段加上默认值, 例如 DEFAULT SYSDATE 这样每次插入和修改时, 不用程序操作这个字段都能得到动作的时间</p>
<p>创建表时可以给字段加上约束条件 例如 不允许重复 UNIQUE, 关键字 PRIMARY KEY</p>
<p>2.ALTER (改变表, 索引, 视图等)</p>
<p>改变表的名称 ALTER TABLE 表名1 TO 表名2;</p>
<p>在表的后面增加一个字段 ALTER TABLE表名 ADD 字段名 字段名描述;</p>
<p>修改表里字段的定义描述 ALTER TABLE表名 MODIFY字段名 字段名描述;</p>
<p>给表里的字段加上约束条件 ALTER TABLE 表名 ADD CONSTRAINT 约束名 PRIMARY KEY (字段名); ALTER TABLE 表名 ADD CONSTRAINT 约束名 UNIQUE (字段名);</p>
<p>把表放在或取出数据库的内存区 ALTER TABLE 表名 CACHE; ALTER TABLE 表名 NOCACHE;</p>
<p>3.DROP (删除表, 索引, 视图, 同义词, 过程, 函数, 数据库链接等)</p>
<p>删除表和它所有的约束条件 DROP TABLE 表名 CASCADE CONSTRAINTS;</p>
<p>4.TRUNCATE (清空表里的所有记录, 保留表的结构)</p>
<p>TRUNCATE 表名;</p>
<p>三.查询语句 (SELECT) 部分</p>
<p>SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] WHERE 条件;</p>
<p>字段名可以带入函数 例如: COUNT(*), MIN(字段名), MAX(字段名), AVG(字段名), DISTINCT(字段名),  TO_CHAR(DATE字段名,’YYYY-MM-DD HH24:MI:SS’)</p>
<p>NVL(EXPR1, EXPR2)函数 解释: IF EXPR1=NULL  RETURN EXPR2 ELSE  RETURN EXPR1</p>
<p>DECODE(AA﹐V1﹐R1﹐V2﹐R2….)函数 解释: IF AA=V1 THEN RETURN R1 IF AA=V2 THEN RETURN R2 ..… ELSE RETURN NULL</p>
<p>LPAD(char1,n,char2)函数 解释: 字符char1按制定的位数n显示，不足的位数用char2字符串替换左边的空位</p>
<p>字段名之间可以进行算术运算 例如: (字段名1*字段名1)/3</p>
<p>查询语句可以嵌套 例如: SELECT …… FROM (SELECT …… FROM表名1, [表名2, ……] WHERE 条件) WHERE 条件2;</p>
<p>两个查询语句的结果可以做集合操作 例如: 并集UNION(去掉重复记录), 并集UNION ALL(不去掉重复记录), 差集MINUS, 交集INTERSECT</p>
<p>分组查询 SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] GROUP BY字段名1 [HAVING 条件] ;</p>
<p>两个以上表之间的连接查询</p>
<p>SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] WHERE  表名1.字段名 = 表名2. 字段名 [ AND ……] ;</p>
<p>SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] WHERE  表名1.字段名 = 表名2. 字段名(+) [ AND ……] ;</p>
<p>有(+)号的字段位置自动补空值</p>
<p>查询结果集的排序操作, 默认的排序是升序ASC, 降序是DESC</p>
<p>SELECT字段名1, 字段名2, …… FROM 表名1, [表名2, ……] ORDER BY字段名1, 字段名2 DESC;</p>
<p>字符串模糊比较的方法</p>
<p>INSTR(字段名, ‘字符串’)&gt;0 字段名 LIKE ‘字符串%’ [‘%字符串%’]</p>
<p>每个表都有一个隐含的字段ROWID, 它标记着记录的唯一性.</p>
<p>四.ORACLE里常用的数据对象 (SCHEMA)</p>
<p>1.索引 (INDEX)</p>
<p>CREATE INDEX 索引名ON 表名 ( 字段1, [字段2, ……] ); ALTER INDEX 索引名 REBUILD;</p>
<p>一个表的索引最好不要超过三个 (特殊的大表除外), 最好用单字段索引, 结合SQL语句的分析执行情况, 也可以建立多字段的组合索引和基于函数的索引</p>
<p>ORACLE8.1.7字符串可以索引的最大长度为1578 单字节 ORACLE8.0.6字符串可以索引的最大长度为758 单字节</p>
<p>2.视图 (VIEW)</p>
<p>CREATE VIEW 视图名AS SELECT …. FROM …..; ALTER VIEW视图名 COMPILE;</p>
<p>视图仅是一个SQL查询语句, 它可以把表之间复杂的关系简洁化.</p>
<p>3.同义词 (SYNONMY) CREATE SYNONYM同义词名FOR 表名; CREATE SYNONYM同义词名FOR 表名@数据库链接名;</p>
<p>4.数据库链接 (DATABASE LINK) CREATE DATABASE LINK数据库链接名CONNECT TO 用户名 IDENTIFIED BY 密码 USING ‘数据库连接字符串’;</p>
<p>数据库连接字符串可以用NET8 EASY CONFIG或者直接修改TNSNAMES.ORA里定义.</p>
<p>数据库参数global_name=true时要求数据库链接名称跟远端数据库名称一样</p>
<p>数据库全局名称可以用以下命令查出 SELECT * FROM GLOBAL_NAME;</p>
<p>查询远端数据库里的表 SELECT …… FROM 表名@数据库链接名;</p>
<p>五.权限管理 (DCL) 语句</p>
<p>1.GRANT 赋于权限 常用的系统权限集合有以下三个: CONNECT(基本的连接), RESOURCE(程序开发), DBA(数据库管理) 常用的数据对象权限有以下五个: ALL ON 数据对象名, SELECT ON 数据对象名, UPDATE ON 数据对象名, DELETE ON 数据对象名, INSERT ON 数据对象名, ALTER ON 数据对象名</p>
<p>GRANT CONNECT, RESOURCE TO 用户名; GRANT SELECT ON 表名 TO 用户名; GRANT SELECT, INSERT, DELETE ON表名 TO 用户名1, 用户名2;</p>
<p>2.REVOKE 回收权限</p>
<p>REVOKE CONNECT, RESOURCE FROM 用户名; REVOKE SELECT ON 表名 FROM 用户名; REVOKE SELECT, INSERT, DELETE ON表名 FROM 用户名1, 用户名2;</p>
<p>查询数据库中第63号错误： select orgaddr,destaddr from sm_histable0116 where error_code=’63’;</p>
<p>查询数据库中开户用户最大提交和最大下发数： select MSISDN,TCOS,OCOS from ms_usertable；</p>
<p>查询数据库中各种错误代码的总和： select error_code,count(*) from sm_histable0513 group by error_code order by error_code;</p>
<p>查询报表数据库中话单统计种类查询。 select sum(Successcount) from tbl_MiddleMt0411 where ServiceType2=111 select sum(successcount),servicetype from tbl_middlemt0411 group by servicetype</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>RestTemplate使用</title>
    <url>/2020/08/22/note15/</url>
    <content><![CDATA[<h1 id="RestTemplate介绍"><a href="#RestTemplate介绍" class="headerlink" title="RestTemplate介绍"></a><code>RestTemplate</code>介绍</h1><h2 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzODQyMDY1MTU0MDYx" title="https://juejin.im/post/6844903842065154061">https://juejin.im/post/6844903842065154061<i class="fa fa-external-link"></i></span> 掘金</p>
<a id="more"></a>

<h2 id="认识-RestTemplate"><a href="#认识-RestTemplate" class="headerlink" title="认识 RestTemplate"></a>认识 <code>RestTemplate</code></h2><p>简要改过：HTTP请求工具，封装了HttpClient请求的一系列方法</p>
<p>所属：<span class="exturl" data-url="aHR0cDovL3NwcmluZy53ZWI=" title="http://spring.web">spring.web<i class="fa fa-external-link"></i></span> 包 4.1.3 之后</p>
<p><strong>Spring Framework 3.0之后才开始引入</strong></p>
<h2 id="为什么会出现RestTemplate"><a href="#为什么会出现RestTemplate" class="headerlink" title="为什么会出现RestTemplate"></a>为什么会出现<code>RestTemplate</code></h2><ol>
<li>最大的作用就是简化Http请求。</li>
<li>无需自己编写底层</li>
<li>开箱即用</li>
</ol>
<h2 id="Spring-5-0之后的改变"><a href="#Spring-5-0之后的改变" class="headerlink" title="Spring 5.0之后的改变"></a>Spring 5.0之后的改变</h2><p>5.0之后，官方更加推荐应对非阻塞响应式的 HTTP 请求处理类 <code>org.springframework.web.reactive.client.WebClient</code>来处理</p>
<h2 id="一些常用API"><a href="#一些常用API" class="headerlink" title="一些常用API"></a>一些常用API</h2><p>其中多数是单个方法重载实现，这里我主要参考官方文档 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjEuNi5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2ludGVncmF0aW9uLmh0bWwjcmVzdC1jbGllbnQtYWNjZXNz" title="https://docs.spring.io/spring/docs/5.1.6.RELEASE/spring-framework-reference/integration.html#rest-client-access">rest-client-access<i class="fa fa-external-link"></i></span> 进行如下分类：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>getForObject</code></td>
<td>通过 GET 请求获得响应结果</td>
</tr>
<tr>
<td><code>getForEntity</code></td>
<td>通过 GET 请求获取 <code>ResponseEntity</code> 对象，包容有状态码，响应头和响应数据</td>
</tr>
<tr>
<td><code>headForHeaders</code></td>
<td>以 HEAD 请求资源返回所有响应头信息</td>
</tr>
<tr>
<td><code>postForLocation</code></td>
<td>用 POST 请求创建资源，并返回响应数据中响应头的字段 <code>Location</code>的数据</td>
</tr>
<tr>
<td><code>postForObject</code></td>
<td>通过 POST 请求创建资源，获得响应结果</td>
</tr>
<tr>
<td><code>put</code></td>
<td>通过 PUT 方式请求来创建或者更新资源</td>
</tr>
<tr>
<td><code>patchForObject</code></td>
<td>通过 PATH 方式请求来更新资源，并获得响应结果。(JDK <code>HttpURLConnection</code> 不支持 PATH 方式请求，其他 HTTP 客户端库支持)</td>
</tr>
<tr>
<td><code>delete</code></td>
<td>通过 DELETE 方式删除资源</td>
</tr>
<tr>
<td><code>optionsForAllow</code></td>
<td>通过 ALLOW 方式请求来获得资源所允许访问的所有 HTTP 方法，可用看某个请求支持哪些请求方式</td>
</tr>
<tr>
<td><code>exchange</code></td>
<td>更通用版本的请求处理方法，接受一个 <code>RequestEntity</code> 对象，可以设置路径，请求头，请求信息等，最后返回一个 <code>ResponseEntity</code> 实体</td>
</tr>
<tr>
<td><code>execute</code></td>
<td>最通用的执行 HTTP 请求的方法，上面所有方法都是基于 <code>execute</code>的封装，全面控制请求信息，并通过回调接口获得响应数据</td>
</tr>
</tbody></table>
<h2 id="常见用法："><a href="#常见用法：" class="headerlink" title="常见用法："></a>常见用法：</h2><h3 id="GET-请求："><a href="#GET-请求：" class="headerlink" title="GET 请求："></a>GET 请求：</h3><h4 id="使用GET请求获取JSON字符串"><a href="#使用GET请求获取JSON字符串" class="headerlink" title="使用GET请求获取JSON字符串:"></a>使用GET请求获取JSON字符串:</h4><p>我们只需要调用：<code>getForObject</code>即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String forObject &#x3D; build.getForObject(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;, String.class);</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<h4 id="使用GET请求获取JSON映射对象："><a href="#使用GET请求获取JSON映射对象：" class="headerlink" title="使用GET请求获取JSON映射对象："></a>使用GET请求获取JSON映射对象：</h4><p>只需要将后面的参数改为 对应实体对象即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Product forObject &#x3D; build.getForObject(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;, Product.class);</span><br></pre></td></tr></table></figure>

<h4 id="使用GET请求获取更加详细的Entity对象"><a href="#使用GET请求获取更加详细的Entity对象" class="headerlink" title="使用GET请求获取更加详细的Entity对象"></a>使用GET请求获取更加详细的Entity对象</h4><p>使用<code>getForEntity</code>即可获取更为详细的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ResponseEntity&lt;String&gt; forEntity &#x3D; build.getForEntity(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;, String.class);</span><br></pre></td></tr></table></figure>

<h4 id="构建自定义的请求头："><a href="#构建自定义的请求头：" class="headerlink" title="构建自定义的请求头："></a>构建自定义的请求头：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MultiValueMap header &#x3D; new LinkedMultiValueMap();</span><br><span class="line">       header.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">       HttpEntity&lt;Object&gt; requestEntity &#x3D; new HttpEntity&lt;&gt;(header);</span><br></pre></td></tr></table></figure>

<h4 id="构建自定义请求header"><a href="#构建自定义请求header" class="headerlink" title="构建自定义请求header"></a>构建自定义请求header</h4><p>一般使用<code>exchange</code>的相关方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ResponseEntity&lt;String&gt; exchange &#x3D; build.exchange(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;, HttpMethod.GET, requestEntity, String.class);</span><br><span class="line">        System.out.println(&quot;get_product1返回结果：&quot; + exchange);</span><br></pre></td></tr></table></figure>

<h4 id="手动处理请求头以及返回信息"><a href="#手动处理请求头以及返回信息" class="headerlink" title="手动处理请求头以及返回信息"></a>手动处理请求头以及返回信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">build.execute(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;, HttpMethod.GET, request -&gt; &#123;</span><br><span class="line">            request.getHeaders().add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        &#125;, response -&gt; &#123;</span><br><span class="line">            HttpStatus statusCode &#x3D; response.getStatusCode();</span><br><span class="line">            int value &#x3D; statusCode.value();</span><br><span class="line">            System.err.println(&quot;响应code: &#x3D; &quot; + value);</span><br><span class="line">            return value;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>这里有两个比较关键的接口</p>
<p><strong>RequestCallback requestCallback,</strong></p>
<p><strong>ResponseExtractor<T> responseExtractor</strong></p>
<p>可以使用lambada 表达式简化，或者使用匿名内部类</p>
<h4 id="使用带参数的Get请求"><a href="#使用带参数的Get请求" class="headerlink" title="使用带参数的Get请求"></a>使用带参数的Get请求</h4><ol>
<li>首先我们需要定义占位符</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String url &#x3D;&quot;htttp:&#x2F;&#x2F;localhost:8080?id&#x3D;&#123;id&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>注意{id} 的写法,有点像<code>@PathValiable</code> 的写法</p>
<h5 id="使用动态参数："><a href="#使用动态参数：" class="headerlink" title="使用动态参数："></a>使用动态参数：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 带参数的GET请求</span><br><span class="line">String url &#x3D; &quot;http:&#x2F;&#x2F;localhost:7474?id&#x3D;&#123;id&#125;&quot;;</span><br><span class="line">build.getForObject(url, String.class, 11);</span><br></pre></td></tr></table></figure>

<h5 id="使用map设置参数"><a href="#使用map设置参数" class="headerlink" title="使用map设置参数"></a>使用map设置参数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用map 设置参数</span><br><span class="line">Map&lt;String, Object&gt; uriVariables &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">uriVariables.put(&quot;id&quot;, 101);</span><br><span class="line">build.getForObject(url, String.class, uriVariables);</span><br></pre></td></tr></table></figure>

<h3 id="POST-请求："><a href="#POST-请求：" class="headerlink" title="POST 请求："></a>POST 请求：</h3><p>Post请求相对GET请求有更多的变化，这里也是列出日常开放比较常用的点</p>
<h4 id="发送-Content-Type-为-application-x-www-form-urlencoded的-POST-请求："><a href="#发送-Content-Type-为-application-x-www-form-urlencoded的-POST-请求：" class="headerlink" title="发送 Content-Type 为 application/x-www-form-urlencoded的 POST 请求："></a>发送 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded</code>的 POST 请求：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置请求头</span><br><span class="line">MultiValueMap multiValueMap &#x3D; new LinkedMultiValueMap();</span><br><span class="line">multiValueMap.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED_VALUE);</span><br><span class="line"></span><br><span class="line">User user &#x3D; new User();</span><br><span class="line">&#x2F;&#x2F;方式二： 将请求参数值以 K&#x3D;V 方式用 &amp; 拼接，发送请求使用</span><br><span class="line">String productStr &#x3D; &quot;id&#x3D;&quot; +  user.getId() + &quot;&amp;name&#x3D;&quot; + user.getName() + &quot;&amp;price&#x3D;&quot; + user.getSalt();</span><br><span class="line">&#x2F;&#x2F; 构建form参数的url</span><br><span class="line">HttpEntity&lt;String&gt; request &#x3D; new HttpEntity&lt;&gt;(productStr, header);</span><br><span class="line">ResponseEntity&lt;String&gt; exchange1 &#x3D; build.exchange(url, HttpMethod.POST, request, String.class);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方式3 ，使用map</span><br><span class="line">&#x2F;&#x2F; 构建form参数的url</span><br><span class="line">HttpEntity&lt;String&gt; request &#x3D; new HttpEntity&lt;&gt;(productStr, header);</span><br><span class="line">ResponseEntity&lt;String&gt; exchange1 &#x3D; build.exchange(url, HttpMethod.POST, request, String.class);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; stringObjectMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">stringObjectMap.put(&quot;test&quot;, &quot;123&quot;);</span><br><span class="line">stringObjectMap.put(&quot;test1&quot;, &quot;123&quot;);</span><br><span class="line">stringObjectMap.put(&quot;test2&quot;, &quot;123&quot;);</span><br><span class="line">HttpEntity httpEntity &#x3D; new HttpEntity&lt;&gt;(stringObjectMap, header);</span><br><span class="line">ResponseEntity exchange2 &#x3D; build.exchange(url, HttpMethod.POST, httpEntity, String.class);</span><br></pre></td></tr></table></figure>

<h4 id="发送-Content-Type-为-application-json-的-POST-请求："><a href="#发送-Content-Type-为-application-json-的-POST-请求：" class="headerlink" title="发送 Content-Type 为 application/json 的 POST 请求："></a>发送 <code>Content-Type</code> 为 <code>application/json</code> 的 POST 请求：</h4><p>只需要将上面的案例当中的:</p>
<p><code>MediaType.APPLICATION_FORM_URLENCODED_VALUE</code>改为：<code>MediaType.APPLICATION_JSON_VALUE</code>即可</p>
<h3 id="DELETE-请求以及PUT请求"><a href="#DELETE-请求以及PUT请求" class="headerlink" title="DELETE 请求以及PUT请求"></a>DELETE 请求以及PUT请求</h3><p>因为都是<code>RestFul</code>的请求，所以简单描述</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String url &#x3D; &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;product&#x2F;update&quot;;</span><br><span class="line">Map&lt;String, ?&gt; variables &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">MultiValueMap&lt;String, String&gt; header &#x3D; new LinkedMultiValueMap();</span><br><span class="line">header.put(HttpHeaders.CONTENT_TYPE, Arrays.asList(MediaType.APPLICATION_FORM_URLENCODED_VALUE));</span><br><span class="line">Product product &#x3D; new Product(101, &quot;iWatch&quot;, BigDecimal.valueOf(2333));</span><br><span class="line">String productStr &#x3D; &quot;id&#x3D;&quot; + product.getId() + &quot;&amp;name&#x3D;&quot; + product.getName() + &quot;&amp;price&#x3D;&quot; + product.getPrice();</span><br><span class="line">HttpEntity&lt;String&gt; request &#x3D; new HttpEntity&lt;&gt;(productStr, header);</span><br><span class="line">restTemplate.put(url, request);</span><br></pre></td></tr></table></figure>

<h3 id="使用restTemplate实现文件上传"><a href="#使用restTemplate实现文件上传" class="headerlink" title="使用restTemplate实现文件上传"></a>使用restTemplate实现文件上传</h3><ol>
<li>需要设置multitype/file 文件请求头</li>
<li>需要设置headaer 以及 body</li>
<li>只能使用post请求</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String ui &#x3D; &quot;&quot;;</span><br><span class="line">MultiValueMap&lt;String, Object&gt; body &#x3D; new LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">FileSystemResource fileSystemResource &#x3D; new FileSystemResource();</span><br><span class="line">body.add(&quot;file&quot;, fileSystemResource);</span><br><span class="line"></span><br><span class="line">MultiValueMap&lt;String, String&gt; header2 &#x3D; new LinkedMultiValueMap();</span><br><span class="line">header2.put(HttpHeaders.CONTENT_TYPE, Arrays.asList(MediaType.MULTIPART_FORM_DATA_VALUE));</span><br><span class="line">HttpEntity httpquest &#x3D; new HttpEntity&lt;&gt;(body, header2);</span><br><span class="line">ResponseEntity&lt;String&gt; xxx &#x3D; build.postForEntity(&quot;xxx&quot;, httpquest, String.class);</span><br></pre></td></tr></table></figure>

<h2 id="进阶-RestTemplate"><a href="#进阶-RestTemplate" class="headerlink" title="进阶 RestTemplate"></a>进阶 RestTemplate</h2><h3 id="如何设置RestTempalate的默认底层引擎"><a href="#如何设置RestTempalate的默认底层引擎" class="headerlink" title="如何设置RestTempalate的默认底层引擎"></a>如何设置RestTempalate的默认底层引擎</h3><p>RestTemplate 默认使用的引擎：</p>
<ul>
<li>Apache HttpComponents</li>
<li>Netty</li>
<li>OkHttp</li>
</ul>
<p>一句话概括：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RestTemplate template &#x3D; new RestTemplate(new HttpComponentsClientHttpRequestFactory());</span><br></pre></td></tr></table></figure>

<h3 id="如何修改RestTemplate-的超时时间"><a href="#如何修改RestTemplate-的超时时间" class="headerlink" title="如何修改RestTemplate 的超时时间"></a>如何修改RestTemplate 的超时时间</h3><p>参考代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RestTemplate customRestTemplate &#x3D; new RestTemplate(getClientHttpRequestFactory());</span><br><span class="line"></span><br><span class="line">private SimpleClientHttpRequestFactory getClientHttpRequestFactory() &#123;</span><br><span class="line">    SimpleClientHttpRequestFactory clientHttpRequestFactory</span><br><span class="line">            &#x3D; new SimpleClientHttpRequestFactory();</span><br><span class="line">    &#x2F;&#x2F; 连接超时设置 10s</span><br><span class="line">    clientHttpRequestFactory.setConnectTimeout(10_000);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 读取超时设置 10s</span><br><span class="line">    clientHttpRequestFactory.setReadTimeout(10_000);</span><br><span class="line">    return clientHttpRequestFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要调整 <code>HttpComponentsClient</code> 的超时设置，可以参考文章<span class="exturl" data-url="aHR0cHM6Ly9ob3d0b2RvaW5qYXZhLmNvbS9zcHJpbmctYm9vdDIvcmVzdHRlbXBsYXRlLXRpbWVvdXQtZXhhbXBsZS8=" title="https://howtodoinjava.com/spring-boot2/resttemplate-timeout-example/">resttemplate-timeout-example<i class="fa fa-external-link"></i></span> 。当然除了设置超时时间之外，还有更多参数进行定制，这里就不一一列举，可以参考文章 <span class="exturl" data-url="aHR0cHM6Ly9ob3d0b2RvaW5qYXZhLmNvbS9zcHJpbmctcmVzdGZ1bC9yZXN0dGVtcGxhdGUtaHR0cGNsaWVudC1qYXZhLWNvbmZpZy8=" title="https://howtodoinjava.com/spring-restful/resttemplate-httpclient-java-config/">resttemplate-httpclient-java-config<i class="fa fa-external-link"></i></span> 进一步学习。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFlbGR1bmcuY29tL3Jlc3QtdGVtcGxhdGU=" title="https://www.baeldung.com/rest-template">www.baeldung.com/rest-templa…<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL2Jsb2cuZGlkaXNwYWNlLmNvbS9zcHJpbmctYm9vdC1sZWFybmluZy0yMS0xLTE=" title="http://blog.didispace.com/spring-boot-learning-21-1-1">blog.didispace.com/spring-boot…<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFlbGR1bmcuY29tL3NwcmluZy1yZXN0LXRlbXBsYXRlLW11bHRpcGFydC11cGxvYWQ=" title="https://www.baeldung.com/spring-rest-template-multipart-upload">www.baeldung.com/spring-rest…<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI4NTU3MTE1" title="https://www.zhihu.com/question/28557115">www.zhihu.com/question/28…<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ob3d0b2RvaW5qYXZhLmNvbS9zcHJpbmctYm9vdDIvcmVzdHRlbXBsYXRlLXRpbWVvdXQtZXhhbXBsZQ==" title="https://howtodoinjava.com/spring-boot2/resttemplate-timeout-example">howtodoinjava.com/spring-boot…<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjEuNi5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2ludGVncmF0aW9uLmh0bWwjcmVzdC1jbGllbnQtYWNjZXNz" title="https://docs.spring.io/spring/docs/5.1.6.RELEASE/spring-framework-reference/integration.html#rest-client-access">docs.spring.io/spring/docs…<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kv6KGo546w5bGC54q25oCB6L2s5o2i" title="https://zh.wikipedia.org/wiki/表现层状态转换">zh.wikipedia.org/wiki/表现层状态转…<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL2RvY3MvY3VycmVudC9qYXZhZG9jLWFwaS9vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jbGllbnQvUmVzdE9wZXJhdGlvbnMuaHRtbA==" title="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestOperations.html">docs.spring.io/spring-fram…<i class="fa fa-external-link"></i></span></p>
<p>作者：闻人的技术博客 链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzODQyMDY1MTU0MDYx" title="https://juejin.im/post/6844903842065154061">https://juejin.im/post/6844903842065154061<i class="fa fa-external-link"></i></span> 来源：掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMq消息队列中间件安装(linux)</title>
    <url>/2020/08/29/note23/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="1-下载maven的tar-gz包"><a href="#1-下载maven的tar-gz包" class="headerlink" title="1. 下载maven的tar.gz包"></a>1. 下载maven的tar.gz包</h2><h2 id="2-设置-etc-profile文件加入MAVEN-HOME"><a href="#2-设置-etc-profile文件加入MAVEN-HOME" class="headerlink" title="2. 设置/etc/profile文件加入MAVEN_HOME"></a>2. 设置/etc/profile文件加入MAVEN_HOME</h2><blockquote>
<h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><h2 id="yum-install-curl-devel-expat-devel-gettext-devel"><a href="#yum-install-curl-devel-expat-devel-gettext-devel" class="headerlink" title="yum install curl-devel expat-devel gettext-devel"></a>yum install curl-devel expat-devel gettext-devel</h2></blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; unzip rocketmq-all-4.3.0-source-release.zip</span><br><span class="line">&gt; cd rocketmq-all-4.3.0&#x2F;</span><br><span class="line">&gt; mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line">&gt; cd distribution&#x2F;target&#x2F;apache-rocketmq</span><br></pre></td></tr></table></figure>

<h2 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; nohup sh bin&#x2F;mqnamesrv &amp;</span><br><span class="line">  &gt; tail -f ~&#x2F;logs&#x2F;rocketmqlogs&#x2F;namesrv.log</span><br><span class="line">  The Name Server boot success...</span><br><span class="line">  </span><br><span class="line">   &gt; nohup sh bin&#x2F;mqbroker -n localhost:9876 &amp;</span><br><span class="line">  &gt; tail -f ~&#x2F;logs&#x2F;rocketmqlogs&#x2F;broker.log </span><br><span class="line">  The broker[%s, 172.30.30.233:10911] boot success...</span><br></pre></td></tr></table></figure>

<h2 id="4-启动消费者"><a href="#4-启动消费者" class="headerlink" title="4.启动消费者"></a>4.启动消费者</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; export NAMESRV_ADDR&#x3D;localhost:9876</span><br><span class="line"> &gt; sh bin&#x2F;tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line"> SendResult [sendStatus&#x3D;SEND_OK, msgId&#x3D; ...</span><br><span class="line"></span><br><span class="line"> &gt; sh bin&#x2F;tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br><span class="line"> ConsumeMessageThread_%d Receive New Messages: [MessageExt...</span><br></pre></td></tr></table></figure>

<h4 id="5-关闭"><a href="#5-关闭" class="headerlink" title="5.关闭"></a>5.关闭</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; sh bin&#x2F;mqshutdown broker</span><br><span class="line">The mqbroker(36695) is running...</span><br><span class="line">Send shutdown request to mqbroker(36695) OK</span><br><span class="line"></span><br><span class="line">&gt; sh bin&#x2F;mqshutdown namesrv</span><br><span class="line">The mqnamesrv(36664) is running...</span><br><span class="line">Send shutdown request to mqnamesrv(36664) OK</span><br></pre></td></tr></table></figure>

<h1 id="可视化工具下载与安装"><a href="#可视化工具下载与安装" class="headerlink" title="可视化工具下载与安装"></a>可视化工具下载与安装</h1><p>RoekerMQ4.x可视化控制台讲解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、下载 https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;rocketmq-externals</span><br><span class="line">	2、编译打包  mvn clean package -Dmaven.test.skip&#x3D;true</span><br><span class="line">	3、target目录 通过java -jar的方式运行</span><br><span class="line">	</span><br><span class="line">	4、无法连接获取broker信息</span><br><span class="line">		1）修改配置文件,名称路由地址为 namesrvAddr，例如我本机为</span><br><span class="line">		2）src&#x2F;main&#x2F;resources&#x2F;application.properties</span><br><span class="line">			rocketmq.config.namesrvAddr&#x3D;192.168.0.101:9876</span><br><span class="line">	</span><br><span class="line">	5、默认端口 localhost:8080</span><br><span class="line">	</span><br><span class="line">	6、注意：</span><br><span class="line">		在阿里云，腾讯云或者虚拟机，记得检查端口号和防火墙是否启动</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>消息中间件</category>
      </categories>
      <tags>
        <tag>RocketMq</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 打包的一些学习</title>
    <url>/2020/07/26/springbootpac/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI3MDI1NDcvYXJ0aWNsZS9kZXRhaWxzLzk1MTgwMjU2" title="https://blog.csdn.net/u012702547/article/details/95180256">https://blog.csdn.net/u012702547/article/details/95180256<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODE4NzMxNy9hcnRpY2xlL2RldGFpbHMvODI2ODg5MDY=" title="https://blog.csdn.net/weixin_38187317/article/details/82688906">https://blog.csdn.net/weixin_38187317/article/details/82688906<i class="fa fa-external-link"></i></span></p>
<p>制作七牛-spring-boot-starter并上传中央仓库 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODE4NzMxNy9hcnRpY2xlL2RldGFpbHMvODI3MjM3NTg=" title="https://blog.csdn.net/weixin_38187317/article/details/82723758">https://blog.csdn.net/weixin_38187317/article/details/82723758<i class="fa fa-external-link"></i></span></p>
<blockquote>
<p>说明： 依照七牛云自己实现了一个springboot，已上传中央仓库 来源博客： <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODE4NzMxNy9hcnRpY2xlL2RldGFpbHMvODI2ODg5MDY=" title="https://blog.csdn.net/weixin_38187317/article/details/82688906">https://blog.csdn.net/weixin_38187317/article/details/82688906<i class="fa fa-external-link"></i></span> 目的：学习一下如何springboot 引入另一个springboot 的service层，</p>
</blockquote>
<h1 id="Spring-Boot-打包成的可执行-jar-，为什么不能被其他项目依赖？"><a href="#Spring-Boot-打包成的可执行-jar-，为什么不能被其他项目依赖？" class="headerlink" title="Spring Boot 打包成的可执行 jar ，为什么不能被其他项目依赖？"></a>Spring Boot 打包成的可执行 jar ，为什么不能被其他项目依赖？</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI3MDI1NDcvYXJ0aWNsZS9kZXRhaWxzLzk1MTgwMjU2" title="https://blog.csdn.net/u012702547/article/details/95180256">https://blog.csdn.net/u012702547/article/details/95180256<i class="fa fa-external-link"></i></span></p>
<blockquote>
<p>说明：这里解读了为什么不能使用springboot 的插件打包</p>
</blockquote>
<h1 id="SpringBoot-如何手动引入本地的jar包-并利用maven成功打包"><a href="#SpringBoot-如何手动引入本地的jar包-并利用maven成功打包" class="headerlink" title="SpringBoot 如何手动引入本地的jar包 并利用maven成功打包"></a>SpringBoot 如何手动引入本地的jar包 并利用maven成功打包</h1><ul>
<li>参考博客 <span class="exturl" data-url="aHR0cHM6Ly93d3cuamF2YXR0LmNvbS9wLzg0OTY5" title="https://www.javatt.com/p/84969">https://www.javatt.com/p/84969<i class="fa fa-external-link"></i></span></li>
<li>需要执行如下命令： <code>mvn install:install-file -Dfile=./qiniu-spring-boot-starter-0.2-RELEASE.jar -DgroupId=com.zxd -DartifactId=myquartz -Dversion=8 -Dpackaging=jar</code></li>
<li>Maven将自己的jar包引入本地库中 <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jZWYxYmM2NTU4NGQ=" title="https://www.jianshu.com/p/cef1bc65584d">https://www.jianshu.com/p/cef1bc65584d<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="Spring-Boot-制作一个自己的-Starter"><a href="#Spring-Boot-制作一个自己的-Starter" class="headerlink" title="Spring Boot 制作一个自己的 Starter"></a>Spring Boot 制作一个自己的 Starter</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dvMTgyMzcwOTU1NzkvYXJ0aWNsZS9kZXRhaWxzLzgxMTk3MjQ1I+mHjeeCuee8luWGmS1hdXRvY29uZmlndXJlLeexuw==" title="https://blog.csdn.net/wo18237095579/article/details/81197245#重点编写-autoconfigure-类">https://blog.csdn.net/wo18237095579/article/details/81197245#重点编写-autoconfigure-类<i class="fa fa-external-link"></i></span></p>
<h1 id="Springboot-打Jar包，Maven完美解决本地Jar包自动打入Springboot-Jar包中"><a href="#Springboot-打Jar包，Maven完美解决本地Jar包自动打入Springboot-Jar包中" class="headerlink" title="Springboot 打Jar包，Maven完美解决本地Jar包自动打入Springboot Jar包中"></a>Springboot 打Jar包，Maven完美解决本地Jar包自动打入Springboot Jar包中</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc29qc29uLmNvbS9ibG9nLzI1My5odG1s" title="https://www.sojson.com/blog/253.html">https://www.sojson.com/blog/253.html<i class="fa fa-external-link"></i></span></p>
<h1 id="Maven将自己的jar包引入本地库中"><a href="#Maven将自己的jar包引入本地库中" class="headerlink" title="Maven将自己的jar包引入本地库中"></a>Maven将自己的jar包引入本地库中</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jZWYxYmM2NTU4NGQ=" title="https://www.jianshu.com/p/cef1bc65584d">https://www.jianshu.com/p/cef1bc65584d<i class="fa fa-external-link"></i></span></p>
<p>#　制作SpringBoot的jar给其他项目使用需要注意的点 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODE4NzMxNy9hcnRpY2xlL2RldGFpbHMvODI2ODg5MDY=" title="https://blog.csdn.net/weixin_38187317/article/details/82688906">https://blog.csdn.net/weixin_38187317/article/details/82688906<i class="fa fa-external-link"></i></span></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>WIN10系统安装与U盘系统制作教程</title>
    <url>/2020/07/26/win10read/</url>
    <content><![CDATA[<h1 id="装机技巧系列（二）：系统安装之Windows-10启动盘制作"><a href="#装机技巧系列（二）：系统安装之Windows-10启动盘制作" class="headerlink" title="装机技巧系列（二）：系统安装之Windows 10启动盘制作"></a>装机技巧系列（二）：系统安装之Windows 10启动盘制作</h1><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNjQ5NTc3MQ==" title="https://zhuanlan.zhihu.com/p/36495771">https://zhuanlan.zhihu.com/p/36495771<i class="fa fa-external-link"></i></span></p>
<h1 id="重装系统安装win10系统-激活，纯小白教程"><a href="#重装系统安装win10系统-激活，纯小白教程" class="headerlink" title="重装系统安装win10系统+激活，纯小白教程"></a>重装系统安装win10系统+激活，纯小白教程</h1><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMTc0Njc1NzA=" title="https://zhuanlan.zhihu.com/p/117467570">https://zhuanlan.zhihu.com/p/117467570<i class="fa fa-external-link"></i></span></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>装机</category>
      </categories>
      <tags>
        <tag>实用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>jmeter压力测试学习</title>
    <url>/2020/08/29/note20/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>jmeter 作为实操性的软件，更注重练习，理论作为参考掌握即可，不需要去具体的纠结</p>
<a id="more"></a>



<h1 id="1-目前用的常用测试工具对比"><a href="#1-目前用的常用测试工具对比" class="headerlink" title="1. 目前用的常用测试工具对比"></a>1. 目前用的常用测试工具对比</h1><h2 id="1、loadrunner"><a href="#1、loadrunner" class="headerlink" title="1、loadrunner"></a>1、loadrunner</h2><p>​    性能稳定，压测结果及细粒度大，可以自定义脚本进行压测，但是太过于重大，功能比较繁多</p>
<p>​    1、loadrunner</p>
<h2 id="2、apache-ab-单接口压测最方便"><a href="#2、apache-ab-单接口压测最方便" class="headerlink" title="2、apache ab(单接口压测最方便)"></a>2、apache ab(单接口压测最方便)</h2><p>​    模拟多线程并发请求,ab命令对发出负载的计算机要求很低，既不会占用很多CPU，也不会占用太多的内存，但却会给目标服务器造成巨大的负载, 简单DDOS攻击等</p>
<h2 id="3、webbench"><a href="#3、webbench" class="headerlink" title="3、webbench"></a>3、webbench</h2><p>​    webbench首先fork出多个子进程，每个子进程都循环做web访问测试。子进程把访问的结果通过pipe告诉父进程，父进程做最终的统计结果。</p>
<h1 id="2-Jmeter基本介绍和使用场景"><a href="#2-Jmeter基本介绍和使用场景" class="headerlink" title="2. Jmeter基本介绍和使用场景"></a>2. Jmeter基本介绍和使用场景</h1><h2 id="1、压测不同的协议和应用"><a href="#1、压测不同的协议和应用" class="headerlink" title="1、压测不同的协议和应用"></a>1、压测不同的协议和应用</h2><p>​    1) Web - HTTP, HTTPS (Java, NodeJS, PHP, <span class="exturl" data-url="aHR0cDovL0FTUC5ORVQ=" title="http://ASP.NET">ASP.NET<i class="fa fa-external-link"></i></span>, …)     2) SOAP / REST Webservices     3) FTP     4) Database via JDBC     5) LDAP 轻量目录访问协议     6) Message-oriented middleware (MOM) via JMS     7) Mail - SMTP(S), POP3(S) and IMAP(S)     8) TCP等等</p>
<h2 id="2、使用场景及优点"><a href="#2、使用场景及优点" class="headerlink" title="2、使用场景及优点"></a>2、使用场景及优点</h2><p>1）功能测试     </p>
<p>2）压力测试     </p>
<p>3）分布式压力测试     </p>
<p>4）纯java开发     </p>
<p>5）上手容易，高性能     </p>
<p>6）提供测试数据分析     </p>
<p>7）各种报表数据图形展示</p>
<h1 id="3-本地快速安装Jmeter4-x"><a href="#3-本地快速安装Jmeter4-x" class="headerlink" title="3. 本地快速安装Jmeter4.x"></a>3. 本地快速安装Jmeter4.x</h1><h2 id="1、需要安装JDK8。或者JDK9-JDK10-建议不要使用jre10"><a href="#1、需要安装JDK8。或者JDK9-JDK10-建议不要使用jre10" class="headerlink" title="1、需要安装JDK8。或者JDK9,JDK10 (建议不要使用jre10)"></a>1、需要安装JDK8。或者JDK9,JDK10 (建议不要使用jre10)</h2><h2 id="2、快速下载"><a href="#2、快速下载" class="headerlink" title="2、快速下载"></a>2、快速下载</h2><p>​    windows： <span class="exturl" data-url="aHR0cDovL21pcnJvcnMudHVuYS50c2luZ2h1YS5lZHUuY24vYXBhY2hlLy9qbWV0ZXIvYmluYXJpZXMvYXBhY2hlLWptZXRlci00LjAuemlw" title="http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.zip">http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.zip<i class="fa fa-external-link"></i></span>     </p>
<p>mac或者linux：<span class="exturl" data-url="aHR0cDovL21pcnJvcnMudHVuYS50c2luZ2h1YS5lZHUuY24vYXBhY2hlLy9qbWV0ZXIvYmluYXJpZXMvYXBhY2hlLWptZXRlci00LjAudGd6" title="http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.tgz">http://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-4.0.tgz<i class="fa fa-external-link"></i></span></p>
<h2 id="3、文档地址：http-jmeter-apache-org-usermanual-get-started-html"><a href="#3、文档地址：http-jmeter-apache-org-usermanual-get-started-html" class="headerlink" title="3、文档地址：http://jmeter.apache.org/usermanual/get-started.html"></a>3、文档地址：<span class="exturl" data-url="aHR0cDovL2ptZXRlci5hcGFjaGUub3JnL3VzZXJtYW51YWwvZ2V0LXN0YXJ0ZWQuaHRtbA==" title="http://jmeter.apache.org/usermanual/get-started.html">http://jmeter.apache.org/usermanual/get-started.html<i class="fa fa-external-link"></i></span></h2><h2 id="4、建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的-keytool工具"><a href="#4、建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的-keytool工具" class="headerlink" title="4、建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的 keytool工具"></a>4、建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的 keytool工具</h2><h1 id="4-jemeter-目录结构"><a href="#4-jemeter-目录结构" class="headerlink" title="4. jemeter 目录结构"></a>4. jemeter 目录结构</h1><h2 id="bin-核心可执行文件，包含配置"><a href="#bin-核心可执行文件，包含配置" class="headerlink" title="bin:核心可执行文件，包含配置"></a>bin:核心可执行文件，包含配置</h2><p>jmeter.bat: windows启动文件：     </p>
<p>jmeter: mac或者linux启动文件：     </p>
<p>jmeter-server：mac或者Liunx分布式压测使用的启动文件  </p>
<p>jmeter-server.bat：mac或者Liunx分布式压测使用的启动文件     </p>
<p>jmeter.properties: 核心配置文件 </p>
<h2 id="extras：插件拓展的包"><a href="#extras：插件拓展的包" class="headerlink" title="extras：插件拓展的包"></a>extras：插件拓展的包</h2><p>lib:核心的依赖包     </p>
<p>ext:核心包     </p>
<p>junit:单元测试包</p>
<h1 id="5-改变jmeter的GUI界面语言版本"><a href="#5-改变jmeter的GUI界面语言版本" class="headerlink" title="5. 改变jmeter的GUI界面语言版本"></a>5. 改变jmeter的GUI界面语言版本</h1><h2 id="1、控制台修改"><a href="#1、控制台修改" class="headerlink" title="1、控制台修改"></a>1、控制台修改</h2><p>​    <code>menu -&gt; options -&gt; choose language</code></p>
<h2 id="2、配置文件修改"><a href="#2、配置文件修改" class="headerlink" title="2、配置文件修改"></a>2、配置文件修改</h2><p>​    <code>bin目录 -&gt; jmeter.properties     默认 #language=en     改为 language=zh_CN</code></p>
<h1 id="6-jemeter-菜单介绍"><a href="#6-jemeter-菜单介绍" class="headerlink" title="6. jemeter 菜单介绍"></a>6. jemeter 菜单介绍</h1><h2 id="1、添加-gt-threads-gt-线程组（控制总体并发）"><a href="#1、添加-gt-threads-gt-线程组（控制总体并发）" class="headerlink" title="1、添加-&gt;threads-&gt;线程组（控制总体并发）"></a>1、添加-&gt;threads-&gt;线程组（控制总体并发）</h2><ul>
<li>线程数：虚拟用户数。一个虚拟用户占用一个进程或线程</li>
<li>准备时长（Ramp-Up Period(in seconds)）：全部线程启动的时长，比如100个线程，20秒，则表示20秒内100个线程都要启动完成，每秒启动5个线程</li>
<li>循环次数：每个线程发送的次数，假如值为5，100个线程，则会发送500次请求，可以勾选永远循环</li>
</ul>
<h2 id="2、线程组-gt-添加-gt-Sampler-采样器-gt-Http-（一个线程组下面可以增加几个Sampler）"><a href="#2、线程组-gt-添加-gt-Sampler-采样器-gt-Http-（一个线程组下面可以增加几个Sampler）" class="headerlink" title="2、线程组-&gt;添加-&gt; Sampler(采样器) -&gt; Http （一个线程组下面可以增加几个Sampler）"></a>2、线程组-&gt;添加-&gt; Sampler(采样器) -&gt; Http （一个线程组下面可以增加几个Sampler）</h2><ul>
<li>名称：采样器名称</li>
<li>注释：对这个采样器的描述</li>
<li>web服务器：<ul>
<li>默认协议是http</li>
<li>默认端口是80</li>
<li>服务器名称或IP ：请求的目标服务器名称或IP地址</li>
</ul>
</li>
<li>路径：服务器URL</li>
<li><strong>Use multipart/from-data for HTTP POST</strong> ：当发送POST请求时，使用Use multipart/from-data方法发送，默认不选中。</li>
</ul>
<h2 id="3、查看测试结果"><a href="#3、查看测试结果" class="headerlink" title="3、查看测试结果"></a>3、查看测试结果</h2><h3 id="线程组-gt-添加-gt-监听器-gt-察看结果树"><a href="#线程组-gt-添加-gt-监听器-gt-察看结果树" class="headerlink" title="线程组-&gt;添加-&gt;监听器-&gt;察看结果树"></a>线程组-&gt;添加-&gt;监听器-&gt;察看结果树</h3><h1 id="7-断言的基本使用"><a href="#7-断言的基本使用" class="headerlink" title="7. 断言的基本使用"></a>7. 断言的基本使用</h1><h2 id="1-增加断言-线程组-gt-添加-gt-断言-gt-响应断言"><a href="#1-增加断言-线程组-gt-添加-gt-断言-gt-响应断言" class="headerlink" title="1. 增加断言: 线程组 -&gt; 添加 -&gt; 断言 -&gt; 响应断言"></a>1. 增加断言: 线程组 -&gt; 添加 -&gt; 断言 -&gt; 响应断言</h2><p>apply to(应用范围):     Main sample only: 仅当前父取样器 进行断言，一般一个请求，如果发一个请求会触发多个，则就有sub sample（比较少用）</p>
<h2 id="2-要测试的响应字段："><a href="#2-要测试的响应字段：" class="headerlink" title="2.要测试的响应字段："></a>2.要测试的响应字段：</h2><ul>
<li>响应文本：即响应的数据，比如json等文本</li>
<li>响应代码：http的响应状态码，比如200，302，404这些</li>
<li>响应信息：http响应代码对应的响应信息，例如：OK, Found</li>
<li>Response Header: 响应头</li>
</ul>
<h2 id="3-模式匹配规则："><a href="#3-模式匹配规则：" class="headerlink" title="3.模式匹配规则："></a>3.模式匹配规则：</h2><ul>
<li>包括：包含在里面就成功</li>
<li>匹配：响应内容完全匹配，不区分大小写</li>
<li>equals：完全匹配，区分大小写</li>
</ul>
<h2 id="4-断言结果监听器-线程组-gt-添加-gt-监听器-gt-断言结果"><a href="#4-断言结果监听器-线程组-gt-添加-gt-监听器-gt-断言结果" class="headerlink" title="4.断言结果监听器: 线程组-&gt; 添加 -&gt; 监听器 -&gt; 断言结果"></a>4.断言结果监听器: 线程组-&gt; 添加 -&gt; 监听器 -&gt; 断言结果</h2><p>里面的内容是sampler采样器的名称     断言失败，查看结果树任务结果颜色标红(通过结果数里面双击不通过的记录，可以看到错误信息)</p>
<h2 id="5-每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总"><a href="#5-每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总" class="headerlink" title="5.每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总"></a>5.每个sample下面可以加单独的结果树，然后同时加多个断言，最外层可以加个结果树进行汇总</h2><h1 id="8-Jmeter压测结果聚合报告分析"><a href="#8-Jmeter压测结果聚合报告分析" class="headerlink" title="8. Jmeter压测结果聚合报告分析"></a>8. Jmeter压测结果聚合报告分析</h1><h2 id="1-新增聚合报告：线程组-gt-添加-gt-监听器-gt-聚合报告（Aggregate-Report）"><a href="#1-新增聚合报告：线程组-gt-添加-gt-监听器-gt-聚合报告（Aggregate-Report）" class="headerlink" title="1.新增聚合报告：线程组-&gt;添加-&gt;监听器-&gt;聚合报告（Aggregate Report）"></a>1.新增聚合报告：线程组-&gt;添加-&gt;监听器-&gt;聚合报告（Aggregate Report）</h2><ul>
<li>lable: sampler的名称</li>
<li>Samples: 一共发出去多少请求,例如10个用户，循环10次，则是 100</li>
<li>Average: 平均响应时间</li>
<li>Median: 中位数，也就是 50％ 用户的响应时间</li>
<li>90% Line : 90％ 用户的响应不会超过该时间 （90% of the samples took no more than this time. The remaining samples at least as long as this）</li>
<li>95% Line : 95％ 用户的响应不会超过该时间</li>
<li>99% Line : 99％ 用户的响应不会超过该时间</li>
<li>min : 最小响应时间</li>
<li>max : 最大响应时间</li>
<li>Error%：错误的请求的数量/请求的总数</li>
<li><strong>Throughput： 吞吐量——默认情况下表示每秒完成的请求数（Request per Second) 可类比为qps     KB/Sec: 每秒接收数据量</strong></li>
</ul>
<h2 id="2-为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用-比如服务器地址"><a href="#2-为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用-比如服务器地址" class="headerlink" title="2.为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用(比如服务器地址)"></a>2.为什么使用：很多变量在全局中都有使用，或者测试数据更改，可以在一处定义，四处使用(比如服务器地址)</h2><h3 id="1、线程组-gt-add-gt-Config-Element-配置原件-gt-User-Definde-Variable（用户定义的变量）"><a href="#1、线程组-gt-add-gt-Config-Element-配置原件-gt-User-Definde-Variable（用户定义的变量）" class="headerlink" title="1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; User Definde Variable（用户定义的变量）"></a>1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; User Definde Variable（用户定义的变量）</h3><h3 id="2、引用方式-XXX-，在接口中变量中使用"><a href="#2、引用方式-XXX-，在接口中变量中使用" class="headerlink" title="2、引用方式${XXX}，在接口中变量中使用"></a>2、引用方式${XXX}，在接口中变量中使用</h3><h3 id="3、原始查看结果树和非原生查看（基础按钮）"><a href="#3、原始查看结果树和非原生查看（基础按钮）" class="headerlink" title="3、原始查看结果树和非原生查看（基础按钮）"></a>3、原始查看结果树和非原生查看（基础按钮）</h3><h1 id="9-CSV可变参数压测（重要）"><a href="#9-CSV可变参数压测（重要）" class="headerlink" title="9. CSV可变参数压测（重要）"></a>9. CSV可变参数压测（重要）</h1><p><strong>实战操作jmeter读取CSV和Txt文本文件里面的参数进行压测</strong></p>
<h2 id="1、线程组-gt-add-gt-Config-Element-配置原件-gt-CSV-data-set-config-CSV数据文件设置"><a href="#1、线程组-gt-add-gt-Config-Element-配置原件-gt-CSV-data-set-config-CSV数据文件设置" class="headerlink" title="1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; CSV data set config (CSV数据文件设置)"></a>1、线程组-&gt;add -&gt; Config Element(配置原件)-&gt; CSV data set config (CSV数据文件设置)</h2><h2 id="2、在读取的配置文件里面，同时使用多个自定义参数"><a href="#2、在读取的配置文件里面，同时使用多个自定义参数" class="headerlink" title="2、在读取的配置文件里面，同时使用多个自定义参数"></a>2、在读取的配置文件里面，同时使用多个自定义参数</h2><p>如果是多个参数需要同时引用，则在CSV数据文件里面设置加多个字段 Variabled names(comma-delitited): csv_name,csv_pwd</p>
<h1 id="10、JDBC-request压测Mysql"><a href="#10、JDBC-request压测Mysql" class="headerlink" title="10、JDBC request压测Mysql"></a>10、JDBC request压测Mysql</h1><h2 id="1、Thread-Group-gt-add-gt-sampler-gt-jdbc-request"><a href="#1、Thread-Group-gt-add-gt-sampler-gt-jdbc-request" class="headerlink" title="1、Thread Group -&gt; add -&gt; sampler -&gt; jdbc request"></a>1、Thread Group -&gt; add -&gt; sampler -&gt; jdbc request</h2><h2 id="2、jar包添加-mysql-connector-java-5-1-30-jar"><a href="#2、jar包添加-mysql-connector-java-5-1-30-jar" class="headerlink" title="2、jar包添加 mysql-connector-java-5.1.30.jar"></a>2、jar包添加 mysql-connector-java-5.1.30.jar</h2><h2 id="3、JDBC-connection-Configuration-配置"><a href="#3、JDBC-connection-Configuration-配置" class="headerlink" title="3、JDBC connection Configuration 配置"></a>3、JDBC connection Configuration 配置</h2><p><strong>JDBC request-&gt;add -&gt; config element -&gt; JDBC connection configuration</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">核心配置</span><br><span class="line">	Max Number of connections : 最大连接数</span><br><span class="line">	MAX wait :最大等待时间</span><br><span class="line">	Auto Commit: 是否自动提交事务</span><br><span class="line"></span><br><span class="line">	DataBase URL : 数据库连接地址 jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;blog</span><br><span class="line">	JDBC Driver Class : 数据库驱动，选择对应的mysql</span><br><span class="line">	username:数据库用户名</span><br><span class="line">	password:数据库密码</span><br></pre></td></tr></table></figure>

<h1 id="11-request压测Mysql-select语句"><a href="#11-request压测Mysql-select语句" class="headerlink" title="11. request压测Mysql, select语句"></a>11. request压测Mysql, select语句</h1><ul>
<li>个人测试1</li>
</ul>
<p>\</p>
<ul>
<li>个人测试2<ul>
<li>注意：需要添加一个全局的debug采集器采集查询结果</li>
<li>可以看到如图所示结果</li>
</ul>
</li>
</ul>
<h2 id="1-Debug-Sampler使用（结果树中查看）"><a href="#1-Debug-Sampler使用（结果树中查看）" class="headerlink" title="1. Debug Sampler使用（结果树中查看）"></a>1. Debug Sampler使用（结果树中查看）</h2><p>​    Thread Group -&gt; add -&gt; sampler -&gt; debug sampler</p>
<h2 id="2-参数讲解：-sql结尾不要加”-”"><a href="#2-参数讲解：-sql结尾不要加”-”" class="headerlink" title="2. 参数讲解：(sql结尾不要加”;”)"></a>2. 参数讲解：(sql结尾不要加”;”)</h2><ul>
<li>variable name of pool declared in JDBC connection configuration（和配置文件同名）</li>
<li>Query Type 查询类型</li>
<li>parameter values 参数值</li>
<li>parameter types 参数类型</li>
<li>variable names sql执行结果变量名</li>
<li>result variable names 所有结果当做一个对象存储</li>
<li>query timeouts 查询超时时间</li>
<li>handle results 处理结果集</li>
</ul>
<h1 id="12-分布式压测（学习重点）"><a href="#12-分布式压测（学习重点）" class="headerlink" title="12. 分布式压测（学习重点）"></a>12. 分布式压测（学习重点）</h1><p>官网教程： <span class="exturl" data-url="aHR0cDovL2ptZXRlci5hcGFjaGUub3JnL3VzZXJtYW51YWwvam1ldGVyX2Rpc3RyaWJ1dGVkX3Rlc3Rpbmdfc3RlcF9ieV9zdGVwLmh0bWw=" title="http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html">http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.html<i class="fa fa-external-link"></i></span></p>
<ul>
<li>普通压测：单台机可以对目标机器产生的压力比较小，受限因素包括CPU，网络，IO等</li>
<li>分布式压测：利用多台机器向目标机器产生压力，模拟几万用户并发访问</li>
</ul>
<h1 id="13-Jmeter分布式压测原理-了解"><a href="#13-Jmeter分布式压测原理-了解" class="headerlink" title="13. Jmeter分布式压测原理(了解)"></a>13. Jmeter分布式压测原理(了解)</h1><p>1、总控机器的节点master，其他产生压力的机器叫“肉鸡” server</p>
<p>2、master会把压测脚本发送到 server上面</p>
<p>3、执行的时候，server上只需要把jmeter-server打开就可以了，不用启动jmeter</p>
<p>4、结束后，server会把压测数据回传给master,然后master汇总输出报告</p>
<p>5、配置详情</p>
<h1 id="14-阿里云安装jmeter-守护进程：nohup-java-jar-xxxxx-amp"><a href="#14-阿里云安装jmeter-守护进程：nohup-java-jar-xxxxx-amp" class="headerlink" title="14. 阿里云安装jmeter (守护进程：nohup java -jar xxxxx &amp;)"></a>14. 阿里云安装jmeter (守护进程：nohup java -jar xxxxx &amp;)</h1><h2 id="1-下载方式：wget-http-apache-osuosl-org-jmeter-binaries-apache-jmeter-4-0-tgz"><a href="#1-下载方式：wget-http-apache-osuosl-org-jmeter-binaries-apache-jmeter-4-0-tgz" class="headerlink" title="1. 下载方式：wget http://apache.osuosl.org//jmeter/binaries/apache-jmeter-4.0.tgz"></a>1. 下载方式：wget <span class="exturl" data-url="aHR0cDovL2FwYWNoZS5vc3Vvc2wub3JnLy9qbWV0ZXIvYmluYXJpZXMvYXBhY2hlLWptZXRlci00LjAudGd6" title="http://apache.osuosl.org//jmeter/binaries/apache-jmeter-4.0.tgz">http://apache.osuosl.org//jmeter/binaries/apache-jmeter-4.0.tgz<i class="fa fa-external-link"></i></span></h2><h2 id="2-直接到官网下载对应tag-gz包，并在服务器解压"><a href="#2-直接到官网下载对应tag-gz包，并在服务器解压" class="headerlink" title="2. 直接到官网下载对应tag.gz包，并在服务器解压"></a>2. 直接到官网下载对应tag.gz包，并在服务器解压</h2><h1 id="15-Jmeter非GUI界面-参数讲解-必须掌握"><a href="#15-Jmeter非GUI界面-参数讲解-必须掌握" class="headerlink" title="15. Jmeter非GUI界面 参数讲解(必须掌握)"></a>15. Jmeter非GUI界面 参数讲解(必须掌握)</h1><p>官方配置文件地址： <span class="exturl" data-url="aHR0cDovL2ptZXRlci5hcGFjaGUub3JnL3VzZXJtYW51YWwvZ2V0LXN0YXJ0ZWQuaHRtbA==" title="http://jmeter.apache.org/usermanual/get-started.html">http://jmeter.apache.org/usermanual/get-started.html<i class="fa fa-external-link"></i></span></p>
<ul>
<li><strong>-h</strong> 帮助</li>
<li><strong>-n</strong> 非GUI模式</li>
<li><strong>-t</strong> 指定要运行的 JMeter 测试脚本文件</li>
<li><strong>-l</strong> 记录结果的文件 每次运行之前，(要确保之前没有运行过,即xxx.jtl不存在，不然报错)</li>
<li><strong>-r</strong> Jmter.properties文件中指定的所有远程服务器</li>
<li><strong>-e</strong> 在脚本运行结束后生成html报告</li>
<li><strong>-o</strong> 用于存放html报告的目录（目录要为空，不然报错）</li>
</ul>
<p>jmeter -n -t linux_users_api.jmx -l result.jtl -e -o /usr/local/softwate/jmeter/temp/ResultReport</p>
<p>jmeter -n -t /Users/jack/Desktop/linux_users_api.jmx -l result.jtl -e -o /Users/jack/Desktop/person/jmeter/temp</p>
<p>个人： /usr/local/software/jmeter/project/temp 。。。。</p>
<h2 id="1-阿里云非GUI-jmeter-压测"><a href="#1-阿里云非GUI-jmeter-压测" class="headerlink" title="1.阿里云非GUI jmeter 压测"></a>1.阿里云非GUI jmeter 压测</h2><p>jmx目录：/usr/local/software/jmeter/temp</p>
<p>示例</p>
<p>jmeter -n -t /usr/local/software/jmeter/temp/linux_users_api.jmx -l /usr/local/software/jmeter/temp/jtl/result.jtl</p>
<p>利用软件从阿里云Centos服务器下载压测报告，讲解Jtl文件，并怎么查看文件 可以通过打开jmeter，新建线程组-&gt;summary report-&gt;浏览文件 进行查看</p>
<h2 id="2-讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确"><a href="#2-讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确" class="headerlink" title="2.讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确"></a>2.讲解Jmeter压测减少资源使用的一些建议，即压测结果更准确</h2><p>1、使用非GUI模式：jmeter -n -t test.jmx -l result.jtl</p>
<p>2、少使用Listener， 如果使用-l参数，它们都可以被删除或禁用。</p>
<p>3、在加载测试期间不要使用“查看结果树”或“查看结果”表监听器，只能在脚本阶段使用它们来调试脚本。</p>
<p>4、包含控制器在这里没有帮助，因为它将文件中的所有测试元素添加到测试计划中。]</p>
<p>5、不要使用功能模式,使用CSV输出而不是XML</p>
<p>6、只保存你需要的数据,尽可能少地使用断言</p>
<p>7、如果测试需要大量数据，可以提前准备好测试数据放到数据文件中，以CSV Read方式读取。</p>
<p>8、用内网压测，减少其他带宽影响压测结果</p>
<p>9、如果压测大流量，尽量用多几个节点以非GUI模式向服务器施压</p>
<p>官方推荐 ：<span class="exturl" data-url="aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9qbWV0ZXIvdXNlcm1hbnVhbC9iZXN0LXByYWN0aWNlcy5odG1sI2xlYW5fbWVhbg==" title="http://jakarta.apache.org/jmeter/usermanual/best-practices.html#lean_mean">http://jakarta.apache.org/jmeter/usermanual/best-practices.html#lean_mean<i class="fa fa-external-link"></i></span></p>
<h2 id="3-把Jmtere压测结果转换为Html"><a href="#3-把Jmtere压测结果转换为Html" class="headerlink" title="3. 把Jmtere压测结果转换为Html"></a>3. 把Jmtere压测结果转换为Html</h2><p>jmeter -n -t /usr/local/software/jmeter/temp/linux_users_api.jmx -l /usr/local/software/jmeter/temp/jtl/result.jtl -e -o /usr/local/software/jmeter/temp/result讲解压测报告 html里面Dashboard的核心指标</p>
<h3 id="1、dashboard讲解"><a href="#1、dashboard讲解" class="headerlink" title="1、dashboard讲解"></a>1、dashboard讲解</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）Test and Report informations</span><br><span class="line">	Source file：jtl文件名</span><br><span class="line">	Start Time ：压测开始时间</span><br><span class="line">	End Time ：压测结束时间</span><br><span class="line">	Filter for display：过滤器</span><br><span class="line">	Lable:sampler采样器名称	</span><br><span class="line"></span><br><span class="line">2）APDEX(Application performance Index)</span><br><span class="line">	apdex:应用程序性能指标,范围在0~1之间，1表示达到所有用户均满意</span><br><span class="line">	T(Toleration threshold)：可接受阀值</span><br><span class="line">	F(Frustration threshold)：失败阀值</span><br><span class="line"></span><br><span class="line">3）Requests Summary</span><br><span class="line">	OK:成功率</span><br><span class="line">	KO:失败率</span><br><span class="line">4）Statistics 统计数据</span><br><span class="line">	lable:sampler采样器名称</span><br><span class="line"></span><br><span class="line">	samples:请求总数，并发数*循环次数</span><br><span class="line">	KO:失败次数</span><br><span class="line">	Error%:失败率</span><br><span class="line"></span><br><span class="line">	Average:平均响应时间</span><br><span class="line">	Min:最小响应时间</span><br><span class="line">	Max:最大响应时间</span><br><span class="line">	90th pct: 90%的用户响应时间不会超过这个值（关注这个就可以了）</span><br><span class="line">	2ms,3ms,4,5,2,6,8,3,9</span><br><span class="line"></span><br><span class="line">	95th pct: 95%的用户响应时间不会超过这个值</span><br><span class="line">	99th pct: 99%的用户响应时间不会超过这个值 (存在极端值)</span><br><span class="line">	throughtput:Request per Second吞吐量 qps</span><br><span class="line"></span><br><span class="line">	received:每秒从服务器接收的数据量</span><br><span class="line">	send：每秒发送的数据量</span><br></pre></td></tr></table></figure>

<h3 id="2、charts讲解"><a href="#2、charts讲解" class="headerlink" title="2、charts讲解"></a>2、charts讲解</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)Over Time（随着时间的变化）</span><br><span class="line">	Response Times Over Time：响应时间变化趋势</span><br><span class="line">	Response Time Percentiles Over Time (successful responses)：最大，最小，平均，用户响应时间分布</span><br><span class="line">	Active Threads Over Time：并发用户数趋势</span><br><span class="line">	Bytes Throughput Over Time：每秒接收和请求字节数变化，蓝色表示发送，黄色表示接受</span><br><span class="line">	Latencies Over Time：平均响应延时趋势</span><br><span class="line">	Connect Time Over Time	：连接耗时趋势</span><br><span class="line"></span><br><span class="line">1)Throughput</span><br><span class="line">	Hits Per Second (excluding embedded resources):每秒点击次数</span><br><span class="line">	Codes Per Second (excluding embedded resources)：每秒状态码数量</span><br><span class="line">	Transactions Per Second：即TPS，每秒事务数</span><br><span class="line">	Response Time Vs Request：响应时间和请求数对比</span><br><span class="line">	Latency Vs Request：延迟时间和请求数对比</span><br><span class="line"></span><br><span class="line">1)Response Times</span><br><span class="line">	Response Time Percentiles：响应时间百分比</span><br><span class="line">	Response Time Overview：响应时间概述</span><br><span class="line">	Time Vs Threads：活跃线程数和响应时间</span><br><span class="line">	Response Time Distribution：响应时间分布图</span><br></pre></td></tr></table></figure>

<h1 id="16、Linux服务器上jmeter进行分布式压测"><a href="#16、Linux服务器上jmeter进行分布式压测" class="headerlink" title="16、Linux服务器上jmeter进行分布式压测"></a>16、Linux服务器上jmeter进行分布式压测</h1><h2 id="1、压测注意事项"><a href="#1、压测注意事项" class="headerlink" title="1、压测注意事项"></a>1、压测注意事项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">the firewalls on the systems are turned off or correct ports are opened.</span><br><span class="line">系统上的防火墙被关闭或正确的端口被打开。</span><br><span class="line"></span><br><span class="line">all the clients are on the same subnet.</span><br><span class="line">所有的客户端都在同一个子网上。</span><br><span class="line"></span><br><span class="line">the server is in the same subnet, if 192.x.x.x or 10.x.x.x IP addresses are used. If the server doesn&#39;t use 192.xx or 10.xx IP address, there shouldn&#39;t be any problems.</span><br><span class="line">如果使用192.x.x.x或10.x.x.x IP地址，则服务器位于同一子网中。 如果服务器不使用192.xx或10.xx IP地址，则不应该有任何问题。</span><br><span class="line"></span><br><span class="line">Make sure JMeter can access the server.</span><br><span class="line">确保JMeter可以访问服务器。</span><br><span class="line"></span><br><span class="line">Make sure you use the same version of JMeter and Java on all the systems. Mixing versions will not work correctly.</span><br><span class="line">确保在所有系统上使用相同版本的JMeter和Java。 混合版本将无法正常工作。</span><br><span class="line"></span><br><span class="line">You have setup SSL for RMI or disabled it.</span><br><span class="line">您已为RMI设置SSL或将其禁用。</span><br><span class="line"></span><br><span class="line">官网地址 http:&#x2F;&#x2F;jmeter.apache.org&#x2F;usermanual&#x2F;jmeter_distributed_testing_step_by_step.html</span><br><span class="line"></span><br><span class="line">压测注意事项：一定要用内网IP，不用用公网IP,用ping去检查</span><br></pre></td></tr></table></figure>

<h2 id="2、专业名字"><a href="#2、专业名字" class="headerlink" title="2、专业名字"></a>2、专业名字</h2><p>master:司令 slave：</p>
<p>奴隶 target：目标</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>地址：<span class="exturl" data-url="aHR0cDovL2ptZXRlci5hcGFjaGUub3JnL2ltYWdlcy9zY3JlZW5zaG90cy9kaXN0cmlidXRlZC1uYW1lcy5zdmc=" title="http://jmeter.apache.org/images/screenshots/distributed-names.svg">http://jmeter.apache.org/images/screenshots/distributed-names.svg<i class="fa fa-external-link"></i></span> </p>
<p>地址：<span class="exturl" data-url="aHR0cDovL2ptZXRlci5hcGFjaGUub3JnL2ltYWdlcy9zY3JlZW5zaG90cy9kaXN0cmlidXRlZC1qbWV0ZXIuc3Zn" title="http://jmeter.apache.org/images/screenshots/distributed-jmeter.svg">http://jmeter.apache.org/images/screenshots/distributed-jmeter.svg<i class="fa fa-external-link"></i></span></p>
<h2 id="3、远程拷贝-内网地址-："><a href="#3、远程拷贝-内网地址-：" class="headerlink" title="3、远程拷贝(内网地址)："></a>3、远程拷贝(内网地址)：</h2><p>scp -r /usr/local/software/jdk-8u141-linux-x64.tar.gz <span class="exturl" data-url="aHR0cDovL21haWx0bzpyb290QDE3Mi4xOC4yMzAuMjMz" title="http://mailto:root@172.18.230.233">root@172.18.230.233<i class="fa fa-external-link"></i></span>:/usr/local/software</p>
<p>scp -r /usr/local/software/jmeter/apache-jmeter-4.0.tgz <span class="exturl" data-url="aHR0cDovL21haWx0bzpyb290QDE3Mi4xOC4yMzAuMjMz" title="http://mailto:root@172.18.230.233">root@172.18.230.233<i class="fa fa-external-link"></i></span>:/usr/local/software/jmeter</p>
<h2 id="4、启动"><a href="#4、启动" class="headerlink" title="4、启动"></a>4、启动</h2><p>./jmeter-server 或者 nohup ./jmeter-server &amp;</p>
<h2 id="5、检查启动是否成功"><a href="#5、检查启动是否成功" class="headerlink" title="5、检查启动是否成功"></a>5、检查启动是否成功</h2><p>ps -ef|grep jmeter-server</p>
<p>ps aux|grep jmeter-server</p>
<h1 id="17、Jmeter分布式压测"><a href="#17、Jmeter分布式压测" class="headerlink" title="17、Jmeter分布式压测"></a>17、Jmeter分布式压测</h1><h2 id="本地非GUI分布式压测-r"><a href="#本地非GUI分布式压测-r" class="headerlink" title="本地非GUI分布式压测 -r"></a>本地非GUI分布式压测 -r</h2><p>jmeter -n -t /Users/jack/Desktop/remote.jmx -r -l /Users/jack/Desktop/jtl/result.jtl -e -o /Users/jack/Desktop/result</p>
<h2 id="压测结果"><a href="#压测结果" class="headerlink" title="压测结果"></a>压测结果</h2><p>./jmeter -n -t /Users/jack/Desktop/remote.jmx -r -l /Users/jack/Desktop/jtl/result.jtl -e -o /Users/jack/Desktop/result</p>
<h2 id="压测报告"><a href="#压测报告" class="headerlink" title="压测报告"></a>压测报告</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Creating summariser &lt;summary&gt;</span><br><span class="line">Created the tree successfully using &#x2F;Users&#x2F;jack&#x2F;Desktop&#x2F;remote.jmx</span><br><span class="line">Configuring remote engine: 172.20.10.3:8899</span><br><span class="line">Using local port: 8899</span><br><span class="line">Configuring remote engine: 172.20.10.11:8899</span><br><span class="line">Starting remote engines</span><br><span class="line">Starting the test @ Thu Mar 29 23:21:13 CST 2018 (1522336873931)</span><br><span class="line">Remote engines have been started</span><br><span class="line">Waiting for possible Shutdown&#x2F;StopTestNow&#x2F;Heapdump message on port 4445</span><br><span class="line">summary &#x3D;      4 in 00:00:22 &#x3D;    0.2&#x2F;s Avg:  5582 Min:    94 Max: 21006 Err:     1 (25.00%)</span><br><span class="line">Tidying up remote @ Thu Mar 29 23:21:36 CST 2018 (1522336896842)</span><br><span class="line">... end of run</span><br></pre></td></tr></table></figure>

<h2 id="压测修改master节点信息"><a href="#压测修改master节点信息" class="headerlink" title="压测修改master节点信息"></a>压测修改master节点信息</h2><p>jemeter.properties 值是slave机器的ip+端口号，如果有多个，用逗号分隔 remote_hosts=192.168.0.102:8899,192.168.0.101:8899 server.rmi.ssl.disable=true (前面有说到)</p>
<h2 id="启动slave机器，注意要同个网段，ip地址用内网ip"><a href="#启动slave机器，注意要同个网段，ip地址用内网ip" class="headerlink" title="启动slave机器，注意要同个网段，ip地址用内网ip"></a>启动slave机器，注意要同个网段，ip地址用内网ip</h2><p>./jmeter-server Using local port: 8899 Created remote object: UnicastServerRef2 [liveRef: [endpoint:<span class="exturl" data-url="aHR0cDovL2xvY2Fs" title="http://local">192.168.0.102:8899<i class="fa fa-external-link"></i></span>,objID:[3a585a4d:162724586ab:-7fff, 3963132813614033916]]]</p>
<h2 id="相关资料："><a href="#相关资料：" class="headerlink" title="相关资料："></a>相关资料：</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vRmluZS1DaGFuL3AvNjIzMzgyMy5odG1s" title="https://www.cnblogs.com/Fine-Chan/p/6233823.html">https://www.cnblogs.com/Fine-Chan/p/6233823.html<i class="fa fa-external-link"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdWppbmdxaXUvYXJ0aWNsZS9kZXRhaWxzLzUyNjM1Mjg5aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcHVyZXNvdWwvcC80ODQ0NTM5Lmh0bWw=" title="https://blog.csdn.net/liujingqiu/article/details/52635289https://www.cnblogs.com/puresoul/p/4844539.html">https://blog.csdn.net/liujingqiu/article/details/52635289https://www.cnblogs.com/puresoul/p/4844539.html<i class="fa fa-external-link"></i></span></p>
<h1 id="18-、测试基本内容"><a href="#18-、测试基本内容" class="headerlink" title="18.、测试基本内容"></a>18.、测试基本内容</h1><p><strong>配置元件=》前置处理器=》定时器=》采样器=》后置处理器=》断言=》监听器</strong></p>
<h1 id="19、安装常见问题"><a href="#19、安装常见问题" class="headerlink" title="19、安装常见问题"></a>19、安装常见问题</h1><h2 id="1、问题：无法解析"><a href="#1、问题：无法解析" class="headerlink" title="1、问题：无法解析"></a>1、问题：无法解析</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@iZwz95j86y235aroi85ht0Z bin]# .&#x2F;jmeter-server</span><br><span class="line">	Created remote object: UnicastServerRef2 [liveRef: [endpoint:[:39308](local),objID:[24e78a63:16243c70661:-7fff, 7492480871343944173]]]</span><br><span class="line">	Server failed to start: java.rmi.RemoteException: Cannot start. Unable to get local host IP address.; nested exception is:</span><br><span class="line">	java.net.UnknownHostException: iZwz95j86y235aroi85ht0Z: iZwz95j86y235aroi85ht0Z: Name or service not known</span><br><span class="line">	An error occurred: Cannot start. Unable to get local host IP address.; nested exception is:</span><br><span class="line">	java.net.UnknownHostException: iZwz95j86y235aroi85ht0Z: iZwz95j86y235aroi85ht0Z: Name or service not known</span><br></pre></td></tr></table></figure>

<h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostname  命令获取机器名称，追加一个映射  iZwz95j86y235aroi85ht0Z</span><br><span class="line">		vim &#x2F;etc&#x2F;hosts</span><br><span class="line">			127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">			::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">			120.79.160.143 iZwz95j86y235aroi85ht0Z</span><br><span class="line"></span><br><span class="line">windows用户 修改c:\windows\system32\drivers\etc\hosts文件，增加一条域名 与IP的映射</span><br></pre></td></tr></table></figure>

<h2 id="2-问题：禁用了SSL"><a href="#2-问题：禁用了SSL" class="headerlink" title="2.问题：禁用了SSL"></a>2.问题：禁用了SSL</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@iZwz95j86y235aroi85ht0Z bin]# .&#x2F;jmeter-server</span><br><span class="line">	Server failed to start: java.rmi.server.ExportException: Listen failed on port: 0; nested exception is:</span><br><span class="line">	java.io.FileNotFoundException: rmi_keystore.jks (No such file or directory)</span><br><span class="line">	An error occurred: Listen failed on port: 0; nested exception is:</span><br><span class="line">	java.io.FileNotFoundException: rmi_keystore.jks (No such file or directory)</span><br></pre></td></tr></table></figure>

<h3 id="解决：-1"><a href="#解决：-1" class="headerlink" title="解决："></a>解决：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拥有RMI over SSL的有效密钥库，或者禁用了SSL。</span><br><span class="line">1、禁用SSL</span><br><span class="line">  jmeter.property里面 server.rmi.ssl.disable 改为 true，表示禁用</span><br></pre></td></tr></table></figure>

<h2 id="3、问题："><a href="#3、问题：" class="headerlink" title="3、问题："></a>3、问题：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@iZ949uw2xehZ bin]# .&#x2F;jmeter</span><br><span class="line">		Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error&#x3D;&#39;Cannot allocate memory&#39; (errno&#x3D;12)</span><br><span class="line">		#</span><br><span class="line">		# There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line">		# Native memory allocation (mmap) failed to map 1073741824 bytes for committing reserved memory.</span><br><span class="line">		# An error report file with more information is saved as:</span><br><span class="line">		# &#x2F;usr&#x2F;local&#x2F;jmeter&#x2F;apache-jmeter-4.0&#x2F;bin&#x2F;hs_err_pid5855.log</span><br></pre></td></tr></table></figure>

<h3 id="解决：-2"><a href="#解决：-2" class="headerlink" title="解决："></a>解决：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编辑jmeter</span><br><span class="line">搜索 : &quot;$&#123;HEAP:&#x3D;&quot;-Xms1g -Xmx1g -XX:MaxMetaspaceSize&#x3D;256m&quot;&#125;&quot;</span><br><span class="line">改变初始堆内存和最大堆内存</span><br></pre></td></tr></table></figure>

<h2 id="4、仅修改-server-port-即可-下面两者一样"><a href="#4、仅修改-server-port-即可-下面两者一样" class="headerlink" title="4、仅修改 server_port 即可,下面两者一样"></a>4、仅修改 server_port 即可,下面两者一样</h2><p>server.rmi.localport=8899 表示slave server启动显示的端口</p>
<p>server_port=8899 表示master机器要远程连接的端口 即 remote_hosts=xxxx:8899</p>
<h2 id="5、—–"><a href="#5、—–" class="headerlink" title="5、—–"></a>5、—–</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- jmeter 分布式性能测试（多网卡配置） --&gt;</span><br><span class="line">我们要在多网卡的服务器上开启RMI服务的话必须指定IP，使他们能够在同一个网段内。 </span><br><span class="line"></span><br><span class="line">需要以下几步（假定所有机器都在10.120.11.*网段,agent服务器为linux,controller服务器为windows）：</span><br><span class="line"></span><br><span class="line">1、 修改agent服务器，指定agent机器的IP</span><br><span class="line">修改jmeter-server文件</span><br><span class="line"># vi jmeter-server</span><br><span class="line">修改RMI_HOST_DEF&#x3D;-Djava.rmi.server.hostname&#x3D;xxx.xxx.xxx.xxx(需要连接的IP)</span><br><span class="line"></span><br><span class="line">2、修改server服务器，指定server机器的IP</span><br><span class="line"></span><br><span class="line">修改jmeter.bat文件 </span><br><span class="line"></span><br><span class="line">新增set rmi_host&#x3D;-Djava.rmi.server.hostname&#x3D;10.120.11.214</span><br><span class="line"></span><br><span class="line">修改set ARGS&#x3D;%DUMP% %HEAP% %NEW% %SURVIVOR% %TENURING% %PERM% %DDRAW% %rmi_host%</span><br></pre></td></tr></table></figure>

<h2 id="6、确定在controller机器上安装jdk-版本和jmeter一致，配置环境变量：Java-home等"><a href="#6、确定在controller机器上安装jdk-版本和jmeter一致，配置环境变量：Java-home等" class="headerlink" title="6、确定在controller机器上安装jdk,版本和jmeter一致，配置环境变量：Java_home等"></a>6、确定在controller机器上安装jdk,版本和jmeter一致，配置环境变量：Java_home等</h2><ul>
<li>在Agent机器上安装jdk，配置环境变量：Java_home和JMeter_home</li>
<li>安装目录不要带空格，最好都是简短的英文路径</li>
</ul>
<h2 id="7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。"><a href="#7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。" class="headerlink" title="7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。"></a>7、master机器启动后会拷贝jmx文件到slave机器，所以不需要在每台slave机器上也上传一份jmx，只需要在master机器上上传一份jmx脚本即可。</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果使用csv进行参数化，则需要把参数文件在每台slave上拷一份且路径需要设置成一样的。</span><br><span class="line"></span><br><span class="line">总样本数 &#x3D; 线程数 * 循环次数 * 执行机总数</span><br></pre></td></tr></table></figure>

<h2 id="8、连接失败原因排查"><a href="#8、连接失败原因排查" class="headerlink" title="8、连接失败原因排查"></a>8、连接失败原因排查</h2><h4 id="以下步骤进行排查："><a href="#以下步骤进行排查：" class="headerlink" title="以下步骤进行排查："></a>以下步骤进行排查：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. jmeter-server是否启动；</span><br><span class="line">	2. 是否联网</span><br><span class="line">	3. ping 服务器IP是否畅通.</span><br><span class="line">	4. telnet 端口 192.168.3.10 1099</span><br><span class="line">	5. 检查服务器的防火墙是否关闭。</span><br><span class="line">	6. 阿里云安全策略是否正常</span><br></pre></td></tr></table></figure>

<h2 id="9、”could-not-find-ApacheJmeter-core-jar”"><a href="#9、”could-not-find-ApacheJmeter-core-jar”" class="headerlink" title="9、”could not find ApacheJmeter_core.jar”"></a>9、”could not find ApacheJmeter_core.jar”</h2><p>​    <strong>解决：在Agent机器安装jdk，并设置环境变量</strong></p>
<h2 id="10、”Bad-call-to-remote-host”"><a href="#10、”Bad-call-to-remote-host”" class="headerlink" title="10、”Bad call to remote host”"></a>10、”Bad call to remote host”</h2><p>解决：检查被控制机器上的jmeter-server有没有启动，或者remote_hosts的配置是否正确。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>压力测试</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>Window 下面使用代办清单软件</title>
    <url>/2020/07/26/window-study/</url>
    <content><![CDATA[<h1 id="windows-代办清单软件"><a href="#windows-代办清单软件" class="headerlink" title="windows 代办清单软件"></a>windows 代办清单软件</h1><h2 id="为什么要使用待办任务软件"><a href="#为什么要使用待办任务软件" class="headerlink" title="为什么要使用待办任务软件"></a>为什么要使用待办任务软件</h2><ul>
<li>人的记忆是靠不住的</li>
<li>琐事繁杂，列出清单能更好的</li>
</ul>
<h2 id="使用代办清单的好处"><a href="#使用代办清单的好处" class="headerlink" title="使用代办清单的好处"></a>使用代办清单的好处</h2><ul>
<li>理清思路</li>
<li>把事情拆分，一条条处理</li>
<li>今日事，今日毕</li>
<li>保持良好的时间管理习惯，防止懈怠</li>
<li>可以结合番茄工作法</li>
</ul>
<h2 id="怎么使用代办清单软件"><a href="#怎么使用代办清单软件" class="headerlink" title="怎么使用代办清单软件"></a>怎么使用代办清单软件</h2><ul>
<li><p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">奇妙清单</span><br></pre></td></tr></table></figure>

<ul>
<li>地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cud3VuZGVybGlzdC5jb20v" title="https://www.wunderlist.com/">https://www.wunderlist.com/<i class="fa fa-external-link"></i></span></li>
<li>目前已经被收购</li>
</ul>
</li>
<li><p>微软的TODO List，实现简单</p>
<ul>
<li>地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS96aC1jbi9wL21pY3Jvc29mdC10by1kby1saXN0cy10YXNrcy1yZW1pbmRlcnMvOW5ibGdnaDVyNTU4P3J0Yz0xJmFtcDthY3RpdmV0YWI9cGl2b3Q6b3ZlcnZpZXd0YWI=" title="https://www.microsoft.com/zh-cn/p/microsoft-to-do-lists-tasks-reminders/9nblggh5r558?rtc=1&amp;activetab=pivot:overviewtab">https://www.microsoft.com/zh-cn/p/microsoft-to-do-lists-tasks-reminders/9nblggh5r558?rtc=1&amp;activetab=pivot:overviewtab<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li><p>滴答清单</p>
<ul>
<li>地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGlkYTM2NS5jb20vYWJvdXQvZG93bmxvYWQ=" title="https://www.dida365.com/about/download">https://www.dida365.com/about/download<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
</ul>
<h2 id="滴答清单的使用"><a href="#滴答清单的使用" class="headerlink" title="滴答清单的使用"></a>滴答清单的使用</h2><ul>
<li>使用对应的账号关联登陆，这里使用个人的微信账号</li>
<li>在左侧清单<ul>
<li>任务清单的名称</li>
</ul>
</li>
<li>在指定清单创建任务</li>
<li>选择每一条任务，设置优先级</li>
<li>右侧设置日期</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>待办任务</category>
      </categories>
      <tags>
        <tag>TODOs</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch Linux安装教程</title>
    <url>/2020/08/29/note24/</url>
    <content><![CDATA[<h1 id="elasticsearch-Linux安装教程"><a href="#elasticsearch-Linux安装教程" class="headerlink" title="elasticsearch Linux安装教程"></a>elasticsearch Linux安装教程</h1><a id="more"></a>

<h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol>
<li><p>安装Jdk环境</p>
<ol>
<li>省略</li>
</ol>
</li>
<li><p>下载官方的es包放在usr目录下</p>
</li>
<li><p>在/usr目录下建立一个文件夹</p>
<p><strong>注意这里不能使用root用户进行安装！！！</strong></p>
<p><strong>注意这里不能使用root用户进行安装！！！</strong></p>
<p><strong>注意这里不能使用root用户进行安装！！！</strong></p>
<ol>
<li><p>groupadd elsearch</p>
</li>
<li><p>useradd elsearch -g elsearch</p>
<p>//该命令是更改该文件夹下所属的用户组的权限</p>
</li>
<li><p>chown -R elsearch:elsearch elasticsearch-5.6.3</p>
</li>
</ol>
</li>
<li><p>修改config 目录下的yml文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。</span><br><span class="line"></span><br><span class="line">cluster.name: my-es</span><br><span class="line"></span><br><span class="line">\#节点名称</span><br><span class="line"></span><br><span class="line">node.name: node-1  </span><br><span class="line"></span><br><span class="line">\#设置索引数据的存储路径</span><br><span class="line"></span><br><span class="line">path.data: &#x2F;usr&#x2F;export&#x2F;servers&#x2F;data  </span><br><span class="line"></span><br><span class="line">\#设置日志的存储路径</span><br><span class="line"></span><br><span class="line">path.logs: &#x2F;usr&#x2F;export&#x2F;servers&#x2F;logs  </span><br><span class="line"></span><br><span class="line">\#设置当前的ip地址,通过指定相同网段的其他节点会加入该集群中</span><br><span class="line"></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line">\#设置对外服务的http端口</span><br><span class="line"></span><br><span class="line">http.port: 9200  </span><br><span class="line"></span><br><span class="line">\#设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点</span><br><span class="line"></span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;node-1&quot;]</span><br><span class="line"></span><br><span class="line">记得修改下列两条</span><br><span class="line">bootstrap.memory_lock: false</span><br><span class="line">bootstrap.system_call_filter: false</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>配置elasticsearch 用户以及权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;usr&#x2F;export&#x2F;servers&#x2F;data</span><br><span class="line"></span><br><span class="line">mkdir -p &#x2F;usr&#x2F;export&#x2F;servers&#x2F;logs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chown -R es:es &#x2F;usr&#x2F;export&#x2F;servers&#x2F;elasticsearch</span><br><span class="line"></span><br><span class="line">chown -R es:es &#x2F;usr&#x2F;export&#x2F;servers&#x2F;data</span><br><span class="line"></span><br><span class="line">chown -R es:es &#x2F;usr&#x2F;export&#x2F;servers&#x2F;logs</span><br></pre></td></tr></table></figure>

<ol>
<li><p>切换用户 su es</p>
</li>
<li><p>集群启动 bin/elasic。</p>
</li>
<li><p><strong>报错！！</strong></p>
<blockquote>
<p>1.[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536] 意思是说你的进程不够用了</p>
<p>解决办法 切到root 用户：进入到security目录下的limits.conf；执行命令 在文件的末尾添加下面的参数值：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> vim &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br><span class="line">前面的*符号必须带上，然后重新启动就可以了。执行完成后可以使用命令 ulimit -n 查看进程数</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] 需要修改系统变量的最大值了</p>
<p>解决方案：切换到root用户修改配置sysctl.conf 增加配置值： vm.max_map_count=655360</p>
<p>执行命令 sysctl -p 这样就可以了，然后重新启动ES服务 就可以了</p>
</blockquote>
<blockquote>
<p>3.[3] snamp centerOs6 不支持 snamp 需要在 yml 中修改配置</p>
<p>解决方案</p>
<p>bootstrap.system_call_filter: false</p>
</blockquote>
</li>
</ol>
<h2 id="基本错误处理"><a href="#基本错误处理" class="headerlink" title="基本错误处理"></a>基本错误处理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原因：无法创建本地文件问题,用户最大可创建文件数太小</span><br><span class="line"></span><br><span class="line">解决方案：切换到root用户，编辑limits.conf配置文件，  添加类似如下内容：</span><br><span class="line"></span><br><span class="line">vi &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line"></span><br><span class="line">添加如下内容: 注意*不要去掉了</span><br><span class="line"></span><br><span class="line">\* soft nofile 65536</span><br><span class="line"></span><br><span class="line">\* hard nofile 131072</span><br><span class="line"></span><br><span class="line">备注：* 代表Linux所有用户名称（比如  hadoop）</span><br><span class="line"></span><br><span class="line">需要保存、退出、重新登录才可生效。</span><br><span class="line">原因：无法创建本地线程问题,用户最大可创建线程数太小</span><br><span class="line"></span><br><span class="line">解决方案：切换到root用户，进入limits.d目录下，修改90-nproc.conf 配置文件。</span><br><span class="line"></span><br><span class="line">vi &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;90-nproc.conf</span><br><span class="line"></span><br><span class="line">找到如下内容：</span><br><span class="line"></span><br><span class="line">\* soft nproc 1024</span><br><span class="line"></span><br><span class="line">\#修改为</span><br><span class="line"></span><br><span class="line">\* soft nproc 4096</span><br><span class="line">原因：最大虚拟内存太小</span><br><span class="line"></span><br><span class="line">每次启动机器都手动执行下。</span><br><span class="line"></span><br><span class="line">root用户执行命令：</span><br><span class="line"></span><br><span class="line">执行命令：sysctl -w  vm.max_map_count&#x3D;262144</span><br><span class="line">sudo sysctl -w vm.max_map_count&#x3D;262144</span><br><span class="line">查看修改结果命令：sysctl -a|grep  vm.max_map_count  看是否已经修改</span><br><span class="line"></span><br><span class="line">永久性修改策略：</span><br><span class="line"></span><br><span class="line">echo &quot;vm.max_map_count&#x3D;262144&quot; &gt;&gt;  &#x2F;etc&#x2F;sysctl.echo </span><br><span class="line">或者</span><br><span class="line">&#x2F;&#x2F; 拷贝一本临时文件并且覆盖</span><br><span class="line">echo &quot;vm.max_map_count&#x3D;262144&quot; &gt;&gt; &#x2F;tmp&#x2F;system_sysctl.conf</span><br><span class="line">mv &#x2F;tmp&#x2F;system_sysctl.conf &#x2F;etc&#x2F;sysctl.conf</span><br></pre></td></tr></table></figure>

<p>更多问题自行百度解决…</p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><blockquote>
<p>查看集群状态：localhost:9200/_cat/health?v 查看索引列表：localhost:9200/_cat/indices?v</p>
</blockquote>
<p>添加一个索引: curl -XPUT ‘<span class="exturl" data-url="aHR0cDovL3huLS1JUC13ejJjbTg5Zzo5MjAwL2RlcHQvZW1wbG95ZWUvMzI=" title="http://xn--IP-wz2cm89g:9200/dept/employee/32">http://主机IP:9200/dept/employee/32<i class="fa fa-external-link"></i></span>‘ -d ‘{ “empname”: “emp32”}’</p>
<h3 id="配置重点"><a href="#配置重点" class="headerlink" title="配置重点:"></a>配置重点:</h3><p><strong>centeros 6 版本执行下列方法</strong></p>
<ol>
<li>开放Linux 9200 端口</li>
<li>vi /etc/sysconfig/iptables</li>
<li>加入内容并保存：-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT</li>
<li>/etc/init.d/iptables restart</li>
<li>/sbin/iptables -L -n</li>
</ol>
<h1 id="安装head-插件"><a href="#安装head-插件" class="headerlink" title="安装head 插件"></a>安装head 插件</h1><h3 id="1-解压插件-如果不存在需要安装解压软件"><a href="#1-解压插件-如果不存在需要安装解压软件" class="headerlink" title="1.解压插件 (如果不存在需要安装解压软件)"></a>1.解压插件 (如果不存在需要安装解压软件)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install zip unzip</span><br></pre></td></tr></table></figure>

<h3 id="2-安装nodeJS支持-执行如下命令"><a href="#2-安装nodeJS支持-执行如下命令" class="headerlink" title="2.安装nodeJS支持,执行如下命令"></a>2.安装nodeJS支持,执行如下命令</h3><h2 id="具体参考链接"><a href="#具体参考链接" class="headerlink" title="具体参考链接"></a>具体参考链接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. curl -sL https:&#x2F;&#x2F;rpm.nodesource.com&#x2F;setup_8.x | bash -</span><br><span class="line"></span><br><span class="line">2. yum install -y nodejs</span><br><span class="line"></span><br><span class="line">3. npm install grunt --save-dev</span><br><span class="line"></span><br><span class="line">4. 修改head目录下面的 .&#x2F;_site&#x2F;app.js</span><br><span class="line"></span><br><span class="line">   （无法安装请查看nodejs安装教程）</span><br><span class="line">5. npm install phantomjs-prebuilt@2.1.16 --ignore-scripts(必要依赖)</span><br><span class="line"></span><br><span class="line">在 head 根目录下执行: npm run start</span><br><span class="line"></span><br><span class="line">6. 如果连接不上需要执行下列命令</span><br><span class="line">    vi el&#x2F;config&#x2F;elasticsearch.yml</span><br><span class="line">    </span><br><span class="line">    添加如下</span><br><span class="line">    允许远程访问</span><br><span class="line">    http.cors.enabled: true</span><br><span class="line">    http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>

<h3 id="3-app-js修改大概位置"><a href="#3-app-js修改大概位置" class="headerlink" title="3.app.js修改大概位置"></a>3.app.js修改大概位置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">init: function(parent) &#123;</span><br><span class="line">    this._super();</span><br><span class="line">    this.prefs &#x3D; services.Preferences.instance();</span><br><span class="line">    this.base_uri &#x3D; this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http:&#x2F;&#x2F;10.215.4.166:9200&quot;;</span><br><span class="line">    if( this.base_uri.charAt( this.base_uri.length - 1 ) !&#x3D;&#x3D; &quot;&#x2F;&quot; ) &#123;</span><br><span class="line">    &#x2F;&#x2F; XHR request fails if the URL is not ending with a &quot;&#x2F;&quot;</span><br><span class="line">    this.base_uri +&#x3D; &quot;&#x2F;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-更换grunt"><a href="#4-更换grunt" class="headerlink" title="4.更换grunt"></a>4.更换grunt</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g yo bower grunt-cli gulp</span><br></pre></td></tr></table></figure>

<h2 id="5-添加索引目录位置"><a href="#5-添加索引目录位置" class="headerlink" title="5.添加索引目录位置"></a>5.添加索引目录位置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vi ~&#x2F;.bash_profile</span><br><span class="line"></span><br><span class="line"># .bash_profile</span><br><span class="line"></span><br><span class="line"># Get the aliases and functions</span><br><span class="line"></span><br><span class="line">if [ -f ~&#x2F;.bashrc ]; then</span><br><span class="line">        . ~&#x2F;.bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># User specific environment and startup programs</span><br><span class="line"></span><br><span class="line">PATH&#x3D;$PATH:$HOME&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;src&#x2F;node-v8.2.1-linux-x86&#x2F;bin</span><br></pre></td></tr></table></figure>

<h2 id="6-补充内容"><a href="#6-补充内容" class="headerlink" title="6.补充内容"></a>6.补充内容</h2><blockquote>
<p>现在使用的较多的多半为elasticsearch-head 插件或者自己开发界面以及api接口</p>
</blockquote>
<h3 id="springboot-elasticsearch-部署的配置文件"><a href="#springboot-elasticsearch-部署的配置文件" class="headerlink" title="springboot-elasticsearch 部署的配置文件"></a>springboot-elasticsearch 部署的配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.data.elasticsearch.cluster-name&#x3D;my-es</span><br><span class="line">#注意： 此处不能和elasticsearch服务一致，因为有可能出现端口攻击问题导致服务器崩溃</span><br><span class="line">spring.data.elasticsearch.cluster-nodes&#x3D;192.168.1.73:9300</span><br><span class="line">spring.data.elasticsearch.repositories.enabled&#x3D;true</span><br></pre></td></tr></table></figure>

<h3 id="接口的注入"><a href="#接口的注入" class="headerlink" title="接口的注入"></a>接口的注入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component </span><br><span class="line">&#x2F;&#x2F;@Repository</span><br><span class="line">public interface ArticleRepository extends ElasticsearchRepository&lt;Article, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql zip包安装指南</title>
    <url>/2020/08/02/note12/</url>
    <content><![CDATA[<h1 id="1-下载zip-包"><a href="#1-下载zip-包" class="headerlink" title="1. 下载zip 包"></a>1. 下载zip 包</h1><h2 id="地址："><a href="#地址：" class="headerlink" title="地址："></a>地址：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2dldC9Eb3dubG9hZHMvTXlTUUwtNS43L215c3FsLTUuNy4zMS13aW54NjQuemlw" title="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.31-winx64.zip">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.31-winx64.zip<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>

<h1 id="2-解压缩，放到D盘自定义位置"><a href="#2-解压缩，放到D盘自定义位置" class="headerlink" title="2. 解压缩，放到D盘自定义位置"></a>2. 解压缩，放到D盘自定义位置</h1><p>我的位置如下:</p>
<p>D:\soft\mysql-5.7.31-winx64</p>
<h1 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h1><p>以win10 为例：</p>
<ol>
<li>打开高级设置</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200801115826.png?ynotemdtimestamp=1596333875837" alt="img"></p>
<ol>
<li>在此处配置环境变量</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200801115848.png?ynotemdtimestamp=1596333875837" alt="img"></p>
<ol>
<li>配置如下</li>
</ol>
<p>MYSQL_HOME : mysql5.7zip包解压路径</p>
<p><strong>path：%MYSQL_HOME%\bin</strong></p>
<h1 id="4-新建my-ini文件（解压包里是没有my-dafault-ini或自带my-ini文件，需自己创建）编辑写入以下信息"><a href="#4-新建my-ini文件（解压包里是没有my-dafault-ini或自带my-ini文件，需自己创建）编辑写入以下信息" class="headerlink" title="4. 新建my.ini文件（解压包里是没有my-dafault.ini或自带my.ini文件，需自己创建）编辑写入以下信息"></a>4. 新建my.ini文件（解压包里是没有my-dafault.ini或自带my.ini文件，需自己创建）编辑写入以下信息</h1><p>配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set&#x3D;utf8 </span><br><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port &#x3D; 3306 </span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir&#x3D;C:\Program Files\mysql-5.7.21-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir&#x3D;C:\Program Files\mysql-5.7.21-winx64\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections&#x3D;200</span><br><span class="line"># 设置mysql服务端默认字符集</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br></pre></td></tr></table></figure>

<h1 id="5-让配置生效"><a href="#5-让配置生效" class="headerlink" title="5. 让配置生效"></a>5. 让配置生效</h1><p>mysql初始化，以<strong>管理员权限</strong>打开cmd命令窗口，切换到<code>”C:\Program Files\mysql-5.7.21-winx64\bin”</code>路径下执行</p>
<p>这里可以获得ROOT密码：<code>j&lt;ASsKzqP8M4</code></p>
<blockquote>
<p>这里提示报错:</p>
<p>由于找不到msvcr120.dll无法继续执行代码</p>
<p>我的解决办法是，进入到：<span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS96aC1jbi9kb3dubG9hZC9jb25maXJtYXRpb24uYXNweD9pZD00MDc4NA==" title="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=40784">https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=40784<i class="fa fa-external-link"></i></span></p>
<p>这种错误是由于未安装 vcredist 引起的</p>
<p>引入自博客：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zMDUxNzAwMS9hcnRpY2xlL2RldGFpbHMvOTc3MDY3OTU=" title="https://blog.csdn.net/weixin_30517001/article/details/97706795">https://blog.csdn.net/weixin_30517001/article/details/97706795<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p>MySQL5.7执行mysqld命令出现Can‘t change dir to ‘C:\Program Files\MySQL\MySQL Server 5.7\data\‘错误</p>
<p>解决方法： 提示No such file or directory，到C:\Program Files\MySQL\MySQL Server 5.7\目录下创建data文件夹即可。</p>
<p>楼主这里手动创建了对应的目录以及对应的子目录</p>
</blockquote>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200801123207.png?ynotemdtimestamp=1596333875837" alt="img"></p>
<h1 id="6-让my-ini-配置生效"><a href="#6-让my-ini-配置生效" class="headerlink" title="6. 让my.ini 配置生效"></a>6. 让my.ini 配置生效</h1><p>执行如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld install MySQL --defaults-file&#x3D;&quot;C:\Program Files\mysql-5.7.21-winx64\my.ini</span><br></pre></td></tr></table></figure>

<p>my.ini 为你自己建立的配置文件路径</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200801123830.png?ynotemdtimestamp=1596333875837" alt="img"></p>
<h1 id="7-启动mysql服务，输入-net-start-mysql，启动成功，会出现下面的截图。如果服务一直处于启动中，说明上一步的操作有误，核实my-ini文件路径是否正确"><a href="#7-启动mysql服务，输入-net-start-mysql，启动成功，会出现下面的截图。如果服务一直处于启动中，说明上一步的操作有误，核实my-ini文件路径是否正确" class="headerlink" title="7. 启动mysql服务，输入 net start mysql，启动成功，会出现下面的截图。如果服务一直处于启动中，说明上一步的操作有误，核实my.ini文件路径是否正确"></a>7. 启动mysql服务，输入 net start mysql，启动成功，会出现下面的截图。<strong>如果服务一直处于启动中，说明上一步的操作有误，核实my.ini文件路径是否正确</strong></h1><p>如果之前有安装过mysql，这里可以查看这篇博客了解如何卸载:</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcHVob25nanVuL3AvMTAxODk0NTQuaHRtbA==" title="https://www.cnblogs.com/puhongjun/p/10189454.html">https://www.cnblogs.com/puhongjun/p/10189454.html<i class="fa fa-external-link"></i></span></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200801125305.png?ynotemdtimestamp=1596333875837" alt="img"></p>
<p>经过不懈的努力，安装成功</p>
<p>PS：mysql 还是建议装在c盘，个人碰到了各种莫名其妙的问题</p>
<h1 id="8-初次登陆设置mysql-root-用户密码："><a href="#8-初次登陆设置mysql-root-用户密码：" class="headerlink" title="8. 初次登陆设置mysql root 用户密码："></a>8. 初次登陆设置mysql root 用户密码：</h1><blockquote>
<p>ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</p>
</blockquote>
<p>当使用mysql 安装生成的root 密码登录的时候，需要重新设置root 密码，修改root 密码为:</p>
<p>修改密码命令：<code>set password = password(‘新密码’)</code>;</p>
<h1 id="9-结语"><a href="#9-结语" class="headerlink" title="9. 结语"></a>9. 结语</h1><p>此时在服务里面可以看到Mysql 的服务已经启动了</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200801132213.png?ynotemdtimestamp=1596333875837" alt="img"></p>
<p>用zip 包的安装方式可能会有各种各样的问题，这里找了百度先生处理一些常见的问题:</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qaW5neWFuLmJhaWR1LmNvbS9hcnRpY2xlL2RhMTA5MWZiMWE0NmE2MDI3ODQ5ZDZhOC5odG1s" title="https://jingyan.baidu.com/article/da1091fb1a46a6027849d6a8.html">https://jingyan.baidu.com/article/da1091fb1a46a6027849d6a8.html<i class="fa fa-external-link"></i></span></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>linux Docker 安装方法</title>
    <url>/2020/08/29/note21/</url>
    <content><![CDATA[<h1 id="1-linux-Docker-安装方法"><a href="#1-linux-Docker-安装方法" class="headerlink" title="1. linux Docker 安装方法"></a>1. linux Docker 安装方法</h1><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul>
<li>64-bit 系统</li>
<li>kernel 3.10+ （内核为 3.1 以上）</li>
<li>linux 系统</li>
</ul>
<a id="more"></a>

<h2 id="检查内核版本，返回的值大于3-10即可"><a href="#检查内核版本，返回的值大于3-10即可" class="headerlink" title="检查内核版本，返回的值大于3.10即可"></a>检查内核版本，返回的值大于3.10即可</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>

<h2 id="更新yum"><a href="#更新yum" class="headerlink" title="更新yum"></a>更新yum</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>

<h2 id="添加yum仓库（直接拷贝即可）"><a href="#添加yum仓库（直接拷贝即可）" class="headerlink" title="添加yum仓库（直接拷贝即可）"></a>添加yum仓库（直接拷贝即可）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tee &#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">[dockerrepo]</span><br><span class="line">name&#x3D;Docker Repository</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;yum.dockerproject.org&#x2F;repo&#x2F;main&#x2F;centos&#x2F;$releasever&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;yum.dockerproject.org&#x2F;gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y docker-engine</span><br></pre></td></tr></table></figure>

<h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure>

<h2 id="验证安装是否成功-有client和service两部分表示docker安装启动都成功了"><a href="#验证安装是否成功-有client和service两部分表示docker安装启动都成功了" class="headerlink" title="验证安装是否成功(有client和service两部分表示docker安装启动都成功了)"></a>验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure>

<h2 id="查看当前进程"><a href="#查看当前进程" class="headerlink" title="查看当前进程"></a>查看当前进程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<h1 id="2-什么是Dokcer"><a href="#2-什么是Dokcer" class="headerlink" title="2. 什么是Dokcer"></a>2. 什么是Dokcer</h1><p>一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口；</p>
<p>使用go语言编写，在LCX（linux容器）基础上进行的封装</p>
<h2 id="简单来说："><a href="#简单来说：" class="headerlink" title="简单来说："></a>简单来说：</h2><p>1）就是可以快速部署启动应用 2）实现虚拟化，完整资源隔离 3）一次编写，四处运行（有一定的限制，比如Docker是基于Linux 64bit的，无法在32bit的linux/Windows/unix环境下使用）</p>
<h2 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h2><p>开箱即用，快速部署，可移植性强，环境隔离</p>
<p>1、提供一次性的环境，假如需要安装Mysql，则需要安装很多依赖库、版本等，如果使用Docker则通过镜像就可以直接启动运行</p>
<p>2、快速动态扩容，使用docker部署了一个应用，可以制作成镜像，然后通过Dokcer快速启动</p>
<p>3、组建微服务架构，可以在一个机器上模拟出多个微服务，启动多个应用</p>
<p>4、更好的资源隔离和共享</p>
<h2 id="linux-简介："><a href="#linux-简介：" class="headerlink" title="linux 简介："></a>linux 简介：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux Standard Base的缩写，lsb_release命令用来显示LSB和特定版本的相关信息</span><br><span class="line">	命令： lsb_release -a </span><br><span class="line">阿里云安装手册：</span><br><span class="line">	https:&#x2F;&#x2F;help.aliyun.com&#x2F;document_detail&#x2F;51853.html?spm&#x3D;a2c4g.11186623.6.820.RaToNY</span><br><span class="line">	</span><br><span class="line">常见问题：</span><br><span class="line">	https:&#x2F;&#x2F;blog.csdn.net&#x2F;daluguishou&#x2F;article&#x2F;details&#x2F;52080250</span><br><span class="line">Docker 镜像 - Docker images：</span><br><span class="line">            容器运行时的只读模板，操作系统+软件运行环境+用户程序</span><br><span class="line"></span><br><span class="line">            class User&#123;</span><br><span class="line">            private String userName;</span><br><span class="line">            private int age;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			Docker 容器 - Docker containers：</span><br><span class="line">					容器包含了某个应用运行所需要的全部环境</span><br><span class="line">					</span><br><span class="line">					 User user &#x3D; new User()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			Docker 仓库 - Docker registeries： </span><br><span class="line">					用来保存镜像，有公有和私有仓库，好比Maven的中央仓库和本地私服</span><br><span class="line">					镜像仓库：	</span><br><span class="line">					</span><br><span class="line">					（参考）配置国内镜像仓库：https:&#x2F;&#x2F;blog.csdn.net&#x2F;zzy1078689276&#x2F;article&#x2F;details&#x2F;77371782</span><br><span class="line"></span><br><span class="line">			对比面向对象的方式</span><br><span class="line">			Dokcer 里面的镜像 : Java里面的类 Class</span><br><span class="line">			Docker 里面的容器 : Java里面的对象 Object</span><br><span class="line">			通过类创建对象，通过镜像创建容器</span><br></pre></td></tr></table></figure>

<h2 id="阿里云安装linux-docker-centeros7-版本"><a href="#阿里云安装linux-docker-centeros7-版本" class="headerlink" title="阿里云安装linux docker (centeros7 版本)"></a>阿里云安装linux docker (centeros7 版本)</h2><h2 id="使用脚本安装-Docker"><a href="#使用脚本安装-Docker" class="headerlink" title="使用脚本安装 Docker"></a>使用脚本安装 Docker</h2><p>1、使用 <code>sudo</code> 或 <code>root</code> 权限登录 Centos。</p>
<p>2、确保 yum 包更新到最新。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum update</span><br></pre></td></tr></table></figure>

<p>3、执行 Docker 安装脚本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br></pre></td></tr></table></figure>

<p>执行这个脚本会添加 <code>docker.repo</code> 源并安装 Docker。</p>
<p>4、启动 Docker 进程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo service docker start</span><br></pre></td></tr></table></figure>

<p>5、验证 <code>docker</code> 是否安装成功并在容器中执行一个测试的镜像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p>到此，docker 在 CentOS 系统的安装完成。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Docker 镜像 - Docker images：</span><br><span class="line">		容器运行时的只读模板，操作系统+软件运行环境+用户程序</span><br><span class="line">					 </span><br><span class="line">		 class User&#123;</span><br><span class="line">			private String userName;</span><br><span class="line">			private int age;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Docker 容器 - Docker containers：</span><br><span class="line">    容器包含了某个应用运行所需要的全部环境</span><br><span class="line"></span><br><span class="line">    User user &#x3D; new User()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Docker 仓库 - Docker registeries： </span><br><span class="line">    用来保存镜像，有公有和私有仓库，好比Maven的中央仓库和本地私服</span><br><span class="line">    镜像仓库：	</span><br><span class="line"></span><br><span class="line">（参考）配置国内镜像仓库：	</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;zzy1078689276&#x2F;article&#x2F;details&#x2F;77371782</span><br><span class="line"></span><br><span class="line">对比面向对象的方式</span><br><span class="line">Dokcer 里面的镜像 : Java里面的类 Class</span><br><span class="line">Docker 里面的容器 : Java里面的对象 Object</span><br><span class="line">通过类创建对象，通过镜像创建容器</span><br></pre></td></tr></table></figure>

<h1 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h1><p>常用命令（安装部署好Dokcer后，执行的命令是docker开头）,xxx是镜像名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">搜索镜像：docker search xxx</span><br><span class="line">		</span><br><span class="line">		列出当前系统存在的镜像：docker images</span><br><span class="line">		</span><br><span class="line">		拉取镜像：docker pull xxx</span><br><span class="line">			xxx是具体某个镜像名称(格式 REPOSITORY:TAG)</span><br><span class="line">			REPOSITORY：表示镜像的仓库源,TAG：镜像的标签</span><br><span class="line"></span><br><span class="line">运行一个容器：docker run -d --name &quot;xdclass_mq&quot; -p 5672:5672 -p 15672:15672 rabbitmq:management</span><br><span class="line">			docker run - 运行一个容器</span><br><span class="line">			-d 后台运行</span><br><span class="line">			-p 端口映射</span><br><span class="line">			rabbitmq:management  (格式 REPOSITORY:TAG)，如果不指定tag，默认使用最新的</span><br><span class="line">			--name &quot;xxx&quot;</span><br><span class="line">		</span><br><span class="line">		列举当前运行的容器：docker ps</span><br><span class="line"></span><br><span class="line">		检查容器内部信息：docker inspect 容器名称</span><br><span class="line"></span><br><span class="line">		删除镜像：docker rmi IMAGE_NAME</span><br><span class="line">			 强制移除镜像不管是否有容器使用该镜像 增加 -f 参数，</span><br><span class="line"></span><br><span class="line">		停止某个容器：docker stop 容器名称</span><br><span class="line"></span><br><span class="line">		启动某个容器：docker start 容器名称</span><br><span class="line"></span><br><span class="line">		移除某个容器： docker rm 容器名称 （容器必须是停止状态）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	文档：</span><br><span class="line">		https:&#x2F;&#x2F;blog.csdn.net&#x2F;permike&#x2F;article&#x2F;details&#x2F;51879578</span><br></pre></td></tr></table></figure>

<h1 id="3-Docker部署Nginx服务器"><a href="#3-Docker部署Nginx服务器" class="headerlink" title="3. Docker部署Nginx服务器"></a>3. Docker部署Nginx服务器</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简介：讲解使用Docker部署Nginx服务器实战</span><br><span class="line">		1、获取镜像 </span><br><span class="line">			docker run (首先会从本地找镜像，如果有则直接启动，没有的话，从镜像仓库拉起，再启动)</span><br><span class="line"></span><br><span class="line">			docker search nignx</span><br><span class="line">		2、列举</span><br><span class="line">			docker images</span><br><span class="line">		3、拉取</span><br><span class="line">			docker pull nignx</span><br><span class="line">		3、启动</span><br><span class="line">			docker run -d --name &quot;xdclass_nginx&quot; -p 8088:80 nginx</span><br><span class="line">			docker run -d --name &quot;xdclass_nginx2&quot; -p 8089:80 nginx</span><br><span class="line">			docker run -d --name &quot;xdclass_nginx3&quot; -p 8090:80 nginx</span><br><span class="line">		4、访问</span><br><span class="line">			如果是阿里云服务，记得配置安全组，腾讯云也需要配置，这个就是一个防火墙</span><br></pre></td></tr></table></figure>

<h1 id="4-构建自己的私人镜像"><a href="#4-构建自己的私人镜像" class="headerlink" title="4. 构建自己的私人镜像"></a>4. 构建自己的私人镜像</h1><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)登录： docker login --username&#x3D;794666918@qq.com registry.cn-shenzhen.aliyuncs.com		</span><br><span class="line">		2) 推送本地镜像：</span><br><span class="line">		docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass&#x2F;xdclass_images:[镜像版本号]</span><br><span class="line">		例子：</span><br><span class="line">		docker tag 2f415b0e9a6e registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass&#x2F;xdclass_images:xd_rabbitmq-v1.0.2</span><br><span class="line"></span><br><span class="line">		docker push registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass&#x2F;xdclass_images:xd_rabbitmq-v1.0.2</span><br><span class="line"></span><br><span class="line">		3)拉取镜像</span><br><span class="line">			线上服务器拉取镜像：</span><br><span class="line">				docker login --username&#x3D;794666918@qq.com registry.cn-shenzhen.aliyuncs.com</span><br><span class="line"></span><br><span class="line">				docker pull registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass&#x2F;xdclass_images:xd_rabbitmq-v1.0.2</span><br><span class="line"></span><br><span class="line">				启动容器：</span><br><span class="line">				docker run -d --name &quot;xdclass_mq&quot; -p 5672:5672 -p 15672:15672 2f415b0e9a6e</span><br><span class="line">1. 登录阿里云Docker Registry</span><br><span class="line">$ sudo docker login --username&#x3D;xiaolaodong11 registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</span><br><span class="line"></span><br><span class="line">您可以在产品控制台首页修改登录密码。</span><br><span class="line"></span><br><span class="line">2. 从Registry中拉取镜像</span><br><span class="line">$ sudo docker pull registry.cn-shenzhen.aliyuncs.com&#x2F;zxd-registry&#x2F;zxd-res:[镜像版本号]</span><br><span class="line">3. 将镜像推送到Registry</span><br><span class="line">$ sudo docker login --username&#x3D;xiaolaodong11 registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">$ sudo docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com&#x2F;zxd-registry&#x2F;zxd-res:[镜像版本号]</span><br><span class="line">$ sudo docker push registry.cn-shenzhen.aliyuncs.com&#x2F;zxd-registry&#x2F;zxd-res:[镜像版本号]</span><br><span class="line">请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。</span><br><span class="line"></span><br><span class="line">4. 选择合适的镜像仓库地址</span><br><span class="line">从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。</span><br><span class="line"></span><br><span class="line">如果您使用的机器位于经典网络，请使用 registry-internal.cn-shenzhen.aliyuncs.com 作为Registry的域名登录，并作为镜像命名空间前缀。</span><br><span class="line">如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-shenzhen.aliyuncs.com 作为Registry的域名登录，并作为镜像命名空间前缀。</span><br><span class="line">5. 示例</span><br><span class="line">使用&quot;docker tag&quot;命令重命名镜像，并将它通过专有网络地址推送至Registry。</span><br><span class="line"></span><br><span class="line">$ sudo docker images</span><br><span class="line">REPOSITORY                                                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">registry.aliyuncs.com&#x2F;acs&#x2F;agent                                    0.7-dfb6816         37bb9c63c8b2        7 days ago          37.89 MB</span><br><span class="line">$ sudo docker tag 37bb9c63c8b2 registry-vpc.cn-shenzhen.aliyuncs.com&#x2F;acs&#x2F;agent:0.7-dfb6816</span><br><span class="line">使用&quot;docker images&quot;命令找到镜像，将该镜像名称中的域名部分变更为Registry专有网络地址。</span><br><span class="line"></span><br><span class="line">$ sudo docker push registry-vpc.cn-shenzhen.aliyuncs.com&#x2F;acs&#x2F;agent:0.7-dfb6816</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs安装教程</title>
    <url>/2020/07/26/note12/</url>
    <content><![CDATA[<h1 id="nodejs安装教程（linux）"><a href="#nodejs安装教程（linux）" class="headerlink" title="nodejs安装教程（linux）"></a>nodejs安装教程（linux）</h1><h2 id="1-下载官方包"><a href="#1-下载官方包" class="headerlink" title="1. 下载官方包"></a>1. 下载官方包</h2><h3 id="1-1-相关命令"><a href="#1-1-相关命令" class="headerlink" title="1.1. 相关命令"></a>1.1. 相关命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v10.9.0&#x2F;node-v10.9.0-linux-x64.tar.xz    &#x2F;&#x2F; 下载</span><br><span class="line"># tar xf  node-v10.9.0-linux-x64.tar.xz       &#x2F;&#x2F; 解压</span><br><span class="line"># cd node-v10.9.0-linux-x64&#x2F;                  &#x2F;&#x2F; 进入解压目录</span><br><span class="line"># .&#x2F;bin&#x2F;node -v                               &#x2F;&#x2F; 执行node命令 查看版本</span><br><span class="line">v10.9.0</span><br></pre></td></tr></table></figure>

<h2 id="2-设置软连接"><a href="#2-设置软连接" class="headerlink" title="2. 设置软连接"></a>2. 设置软连接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;software&#x2F;nodejs&#x2F;bin&#x2F;npm   &#x2F;usr&#x2F;local&#x2F;bin&#x2F; </span><br><span class="line">ln -s &#x2F;usr&#x2F;software&#x2F;nodejs&#x2F;bin&#x2F;node   &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="3-常见问题解决"><a href="#3-常见问题解决" class="headerlink" title="3.常见问题解决"></a>3.常见问题解决</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; cat &#x2F;etc&#x2F;redhat-release</span><br><span class="line">&gt; &#x2F;&#x2F;查看python版本</span><br><span class="line">&gt; python -v</span><br><span class="line">&gt; &#x2F;&#x2F;查看gcc rpm gcc-c++是否安装</span><br><span class="line">&gt; rpm -q gcc rpm -q gcc-c++</span><br><span class="line">&gt; &#x2F;&#x2F;安装gcc-c++</span><br><span class="line">&gt; yum -v install gcc-c++ kernel-devel</span><br><span class="line">&gt; &#x2F;&#x2F;大招荡平一切环境问题</span><br><span class="line">&gt; yum -y update &amp;&amp; yum -y groupinstall &quot;Development Tools&quot;</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;复制官网链接（Source Code版本）进入&#x2F;usr&#x2F;src目录下载nodejs</span><br><span class="line">&gt;wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v6.11.4&#x2F;node-v6.11.4.tar.gz</span><br><span class="line">&#x2F;&#x2F;解压</span><br><span class="line">&gt;tar -xf node-v6.11.4.tar.gz</span><br><span class="line">&#x2F;&#x2F;删除压缩包</span><br><span class="line">&gt;rm node-v6.11.4.tar.gz</span><br><span class="line">&#x2F;&#x2F;进入node-v6.11.4目录，进行配置</span><br><span class="line">&gt;.&#x2F;configure</span><br><span class="line">&#x2F;&#x2F;编译</span><br><span class="line">&gt;make</span><br><span class="line">&#x2F;&#x2F;安装</span><br><span class="line">&gt;sodu make install</span><br></pre></td></tr></table></figure>

<p><strong>！！！编译Node 时候发现gcc 版本太低需要升级gcc编译器版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#获取源码(由于官方镜像速度较慢，这里使用了中国科学院开源协会的镜像</span><br><span class="line">sudo wget http:&#x2F;&#x2F;mirrors.opencas.org&#x2F;gnu&#x2F;gcc&#x2F;gcc-6.3.0&#x2F;gcc-6.3.0.tar.bz2</span><br><span class="line">#如果以上给出的镜像不可用，也可以是使用http:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;gcc&#x2F;，但由于有墙的存在，通常这样都很慢，建议本地通过shadowsocks 下载后放到服务器上再继续以下步骤</span><br><span class="line"></span><br><span class="line">#解压</span><br><span class="line">sudo tar -jxvf gcc-6.3.0.tar.bz2</span><br><span class="line">#下载编译所需的依赖项</span><br><span class="line">#如果想更快，可以利用中国科学院开源协会的镜像加速下载gmp和mpfr这两个包（另外两个包镜像没有收录），手动替换.&#x2F;contrib&#x2F;download_prerequisites的以下两处命令：</span><br><span class="line">#1) 把wget ftp:&#x2F;&#x2F;gcc.gnu.org&#x2F;pub&#x2F;gcc&#x2F;infrastructure&#x2F;$MPFR.tar.bz2 || exit 1 替换成wget http:&#x2F;&#x2F;mirrors.opencas.org&#x2F;gnu&#x2F;mpfr&#x2F;$MPFR.tar.bz2 || exit 1</span><br><span class="line">#2) 把wget ftp:&#x2F;&#x2F;gcc.gnu.org&#x2F;pub&#x2F;gcc&#x2F;infrastructure&#x2F;$GMP.tar.bz2 || exit 1 替换成wget http:&#x2F;&#x2F;mirrors.opencas.org&#x2F;gnu&#x2F;gmp&#x2F;$GMP.tar.bz2 || exit 1</span><br><span class="line">cd gcc-6.3.0</span><br><span class="line">sudo .&#x2F;contrib&#x2F;download_prerequisites</span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">#建立编译输出目录</span><br><span class="line">sudo mkdir gcc-build-6.3.0</span><br><span class="line"></span><br><span class="line">#进入此目录，执行以下命令，生成makefile文件</span><br><span class="line">cd gcc-build-6.3.0</span><br><span class="line">sudo ..&#x2F;gcc-6.3.0&#x2F;configure --enable-checking&#x3D;release --enable-languages&#x3D;c,c++ --disable-multilib</span><br><span class="line"></span><br><span class="line">#执行命令进行编译，此处利用4个job，需编译时约40分钟，此值不宜设置过高</span><br><span class="line">sudo make -j4</span><br><span class="line"></span><br><span class="line">#安装</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>强烈建议 centeros使用 7.0 以上版本</p>
<h2 id="4-问题"><a href="#4-问题" class="headerlink" title="4. 问题"></a>4. 问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make[2]: Leaving directory &#96;&#x2F;home&#x2F;imdb&#x2F;gcc-4.8.2&#x2F;gcc-build-4.8.2&#39;</span><br><span class="line">make[1]: *** [stage1-bubble] 错误 2</span><br><span class="line">make[1]: Leaving directory &#96;&#x2F;home&#x2F;imdb&#x2F;gcc-4.8.2&#x2F;gcc-build-4.8.2&#39;</span><br><span class="line"></span><br><span class="line">## make: *** [all] 错误 2</span><br><span class="line"></span><br><span class="line">解决办法</span><br><span class="line">ubuntu： apt-get install gcc g++ </span><br><span class="line">CentOS：yum install gcc gcc-c++</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="5-Npm-更换淘宝镜像"><a href="#5-Npm-更换淘宝镜像" class="headerlink" title="5. Npm 更换淘宝镜像"></a>5. Npm 更换淘宝镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">2. npm install</span><br></pre></td></tr></table></figure>

<h2 id="6-安装node-JS-pm2"><a href="#6-安装node-JS-pm2" class="headerlink" title="6.安装node JS pm2"></a>6.安装node JS pm2</h2><p>作用: 后台运行npm start 程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install pm2 -g </span><br><span class="line"></span><br><span class="line">pm2启动：</span><br><span class="line">pm2 start &quot;&#x2F;usr&#x2F;local&#x2F;src&#x2F;node&#x2F;bin&#x2F;npm&quot; --name &quot;law&quot; -- start .</span><br><span class="line"> </span><br><span class="line">pm2 list</span><br><span class="line">pm2 stop    </span><br><span class="line">pm2 restart </span><br><span class="line">pm2 delete  </span><br><span class="line"></span><br><span class="line">linux 找不到pm2 </span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;nodebox&#x2F;nodejs&#x2F;lib&#x2F;node_modules&#x2F;pm2&#x2F;bin&#x2F;pm2 &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>《从零开始的架构探险》归纳总结</title>
    <url>/2020/07/26/note4/</url>
    <content><![CDATA[<h1 id="《从零开始的架构探险》归纳总结"><a href="#《从零开始的架构探险》归纳总结" class="headerlink" title="《从零开始的架构探险》归纳总结"></a>《从零开始的架构探险》归纳总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年根据这本书实现了一个基本的SpringMVC框架，作者使用SpingMVC中依赖反转和AOP这两个核心概念用自己的理解写了一个框架。个人觉得对于SpringMVC的源码阅读是非常有帮助，现在再次回顾所学的内容</p>
<a id="more"></a>

<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>框架的最终目的是为了解决现实中不断出现的某些问题，比如频繁的创建对象</p>
<ol>
<li>用户进入“客户管理”模块，列表展示所有用户</li>
<li>通过”用户名称”关键字查询</li>
<li>单击客户列表客户名称链接，可以查看客户基本信息</li>
<li>单击“新增”按钮，进入“新增客户界面”， 可以增加用户信息</li>
<li>单击“编辑”按钮，进入“编辑客户界面”， 可以编辑当前用户信息</li>
<li>单击“删除”按钮，可以删除当前用户，需要给出提示</li>
</ol>
<p>依照需求我们分析出基本用户信息为：</p>
<ol>
<li>名称</li>
<li>联系人</li>
<li>电话号码</li>
<li>邮箱</li>
<li>备注</li>
</ol>
<h3 id="设计接口"><a href="#设计接口" class="headerlink" title="设计接口"></a>设计接口</h3><ol>
<li><p>GET: /customer</p>
<p>进入客户列表页面</p>
</li>
<li><p>POST：/customer_search</p>
<p>查找对应用户</p>
</li>
<li><p>GET: /customer_show?id={id}</p>
<p>查看用户</p>
</li>
<li><p>GET:/customer_create</p>
<p>创建用户页面</p>
</li>
<li><p>POST:/customer_create</p>
<p>创建用户操作</p>
</li>
<li><p>GET:/customer_eidt?id={id}</p>
<p>修改用户页面</p>
</li>
<li><p>POST:/customer_eidt?id={id}</p>
<p>修改用户操作</p>
</li>
<li><p>GET:/customer_delete?id={id}</p>
<p>删除操作</p>
</li>
</ol>
<h2 id="准备开发环境："><a href="#准备开发环境：" class="headerlink" title="准备开发环境："></a>准备开发环境：</h2><h3 id="IntelinJ-IDEA"><a href="#IntelinJ-IDEA" class="headerlink" title="IntelinJ IDEA"></a>IntelinJ IDEA</h3><p>现在破解比较麻烦了，个人建议直接某宝或者某鱼上买个破解码，直接破解到2089年，没有必要浪费时间在工具的破解上面</p>
<h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>使用3.6以上的版本</p>
<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>使用JDK1.8的版本</p>
<h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>使用Tomcat 8.5 的版本</p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>具体搭建流程不做演示，这里给出一个github地址作为参考</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhenlUaW1lcy9zbWFydGZyYW13b3Jr" title="https://github.com/lazyTimes/smartframwork">https://github.com/lazyTimes/smartframwork<i class="fa fa-external-link"></i></span></p>
<p>这事框架地址，具体的实验放在一个chapter3的项目里面，git的地址如下：</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/Snipaste_2020-02-10_11-00-25.png?ynotemdtimestamp=1595748679079" alt="img"></p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p><img src="http://null/" alt="image-20200211103431175"></p>
<h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><p><img src="http://null/" alt="image-20200211131451516"></p>
<h3 id="框架处理工具"><a href="#框架处理工具" class="headerlink" title="框架处理工具"></a>框架处理工具</h3><p><img src="http://null/" alt="image-20200211132349636"></p>
<h2 id="IOC实现思路"><a href="#IOC实现思路" class="headerlink" title="IOC实现思路"></a>IOC实现思路</h2><p>不是由用户去new 对象，而是在初始化的时候框架拿到所有的controller, 根据controller 中扫描到 的所有的inject 注解，根据此注解拿到所有的服务类信息</p>
<p>最简单的方式</p>
<ol>
<li>通过<code>beanHelper</code> 获取所有的<code>Bean Map</code></li>
<li>遍历映射关系，分别取出bean类与Bean 实例，进而通过反射获取类中所有的成员变量</li>
<li>遍历这些成员变量，查看是否带有@Inject 注解，如果存在，则从<code>BeanMap</code>当中取出<code>Bean</code>实例，</li>
<li>最后通过<code>RelectionUtil#setField</code> 修改当前成员变量的值</li>
</ol>
<h3 id="如何实现控制层的加载"><a href="#如何实现控制层的加载" class="headerlink" title="如何实现控制层的加载"></a>如何实现控制层的加载</h3><ol>
<li>获取所有定义了<code>Controller</code>的类</li>
<li>反射获取所有加了<code>Action()</code>的方法</li>
<li>封装一个请求对象和处理对象</li>
<li>请求对象和处理对象建立一个映射关系</li>
<li>将映射加入<code>Action Map</code></li>
</ol>
<h3 id="请求转发器"><a href="#请求转发器" class="headerlink" title="请求转发器"></a>请求转发器</h3><ol>
<li>通过<code>ControllerHelper</code> 获取<code>Handler</code> 对象</li>
<li>获取<code>Controller</code>类</li>
<li><code>BeanHelper</code>获取所有的<code>Contoller</code>实体对象</li>
<li><code>HttpServlet</code>获取所有的请求参数</li>
</ol>
<h3 id="核心代码："><a href="#核心代码：" class="headerlink" title="核心代码："></a>核心代码：</h3><p>IOC的核心是在框架启动的时候扫描对应的包下面的类注解，并且使用反射的方式对于类进行初始化操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 类加载工具类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public final class MyClassUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger LOGGER &#x3D; LoggerFactory.getLogger(MyClassUtil.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @Description: 获取类加载器</span><br><span class="line">     * @Param: 无参数</span><br><span class="line">     * @return: 类加载器</span><br><span class="line">     * @Author: zhaoxudong</span><br><span class="line">     * @Date: 2019.9.8</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static ClassLoader getClassLoader() &#123;</span><br><span class="line">        return Thread.currentThread().getContextClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param className     类名</span><br><span class="line">     * @param isInitialized 是否初始化</span><br><span class="line">     * @return 实体类</span><br><span class="line">     * @Description: 加载class类</span><br><span class="line">     * @Author zhaoxudong</span><br><span class="line">     * @Date 2019.9.8</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static Class&lt;?&gt; loadClass(String className, boolean isInitialized) &#123;</span><br><span class="line">        Class&lt;?&gt; cls;</span><br><span class="line">        try &#123;</span><br><span class="line">            cls &#x3D; Class.forName(className, isInitialized, getClassLoader());</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            LOGGER.error(&quot;load class failure&quot;, e);</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        return cls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取指定包名下面的所有类</span><br><span class="line">     * 最为复杂也是最为核心的代码</span><br><span class="line">     *</span><br><span class="line">     * @param packageName 包名</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static Set&lt;Class&lt;?&gt;&gt; getClassesSet(String packageName) &#123;</span><br><span class="line">        &#x2F;&#x2F; 1. 创建set集合</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; result &#x3D; new HashSet&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">        &#x2F;&#x2F; 2. 获取枚举迭代器，使用递归的方式迭代所有的包</span><br><span class="line">        try &#123;</span><br><span class="line">            Enumeration&lt;URL&gt; enumeration &#x3D; getClassLoader().getResources(packageName.replace(&quot;.&quot;, &quot;&#x2F;&quot;));</span><br><span class="line">            while (enumeration.hasMoreElements()) &#123;</span><br><span class="line">                URL url &#x3D; enumeration.nextElement();</span><br><span class="line">                if (null !&#x3D; url) &#123;</span><br><span class="line">                    &#x2F;&#x2F; protocol 协议，获取协议</span><br><span class="line">                    String protocool &#x3D; url.getProtocol();</span><br><span class="line">                    &#x2F;&#x2F; 如果是一个文件</span><br><span class="line">                    if (protocool.equals(&quot;file&quot;)) &#123;</span><br><span class="line">                        &#x2F;&#x2F; 替换掉特殊符号</span><br><span class="line">                        String urlPath &#x3D; url.getPath().replaceAll(&quot;%20&quot;, &quot;&quot;);</span><br><span class="line">                        addClass(result, urlPath, packageName);</span><br><span class="line">                    &#125; else if (protocool.equals(&quot;jar&quot;)) &#123;</span><br><span class="line">                        &#x2F;&#x2F; 如果是jar包，获取jar包路径</span><br><span class="line">                        JarURLConnection jarURLConnection &#x3D; (JarURLConnection) url.openConnection();</span><br><span class="line">                        if (null !&#x3D; jarURLConnection) &#123;</span><br><span class="line">                            &#x2F;&#x2F; 获取jar包文件</span><br><span class="line">                            JarFile jarFile &#x3D; jarURLConnection.getJarFile();</span><br><span class="line">                            if (null !&#x3D; jarFile) &#123;</span><br><span class="line">                                Enumeration&lt;JarEntry&gt; entries &#x3D; jarFile.entries();</span><br><span class="line">                                &#x2F;&#x2F; 枚举迭代获取所有的jar包类</span><br><span class="line">                                while (entries.hasMoreElements()) &#123;</span><br><span class="line">                                    JarEntry jarEntry &#x3D; entries.nextElement();</span><br><span class="line">                                    &#x2F;&#x2F; 获取名称</span><br><span class="line">                                    String entryName &#x3D; jarEntry.getName();</span><br><span class="line">                                    if (entryName.equals(&quot;.class&quot;)) &#123;</span><br><span class="line">                                        String className &#x3D; entryName.substring(0, entryName.lastIndexOf(&quot;.&quot;))</span><br><span class="line">                                                .replaceAll(&quot;&#x2F;&quot;, &quot;.&quot;);</span><br><span class="line">                                        doAddClass(result, className);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            LOGGER.error(&quot;get class set failure&quot;, e);</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将对应类型的文件路径加入到对应的set内部</span><br><span class="line">     *</span><br><span class="line">     * @param classSet      所有的应用宝</span><br><span class="line">     * @param packagePath 文件路径</span><br><span class="line">     * @param packageName 包名</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void addClass(Set&lt;Class&lt;?&gt;&gt; classSet, String packagePath, String packageName) &#123;</span><br><span class="line">        &#x2F;&#x2F;对于文件路径进行过滤操作</span><br><span class="line">        File[] files &#x3D; new File(packagePath).listFiles(new FileFilter() &#123;</span><br><span class="line">            public boolean accept(File file) &#123;</span><br><span class="line">                &#x2F;&#x2F; 如果是class 文件或者文件夹，允许</span><br><span class="line">                return (file.isFile() &amp;&amp; file.getName().endsWith(&quot;.class&quot;)) || file.isDirectory();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        for (File file : files) &#123;</span><br><span class="line">            &#x2F;&#x2F; 当前遍历目录的文件名</span><br><span class="line">            String fileName &#x3D; file.getName();</span><br><span class="line">            &#x2F;&#x2F; 如果是文件类型</span><br><span class="line">            if (file.isFile()) &#123;</span><br><span class="line">                String className &#x3D; fileName.substring(0, fileName.lastIndexOf(&quot;.&quot;));</span><br><span class="line">                if (MyStringUtil.isNotEmpty(className)) &#123;</span><br><span class="line">                    className &#x3D; packageName + &quot;.&quot; + className;</span><br><span class="line">                &#125;</span><br><span class="line">                doAddClass(classSet, className);</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F; 如果不是文件，则根据路径加载文件</span><br><span class="line">                String subPackagePath &#x3D; fileName;</span><br><span class="line">                if (MyStringUtil.isNotEmpty(packagePath)) &#123;</span><br><span class="line">                    subPackagePath &#x3D; packagePath + &quot;&#x2F;&quot; + subPackagePath;</span><br><span class="line">                &#125;</span><br><span class="line">                String subPackageName &#x3D; fileName;</span><br><span class="line">                if (MyStringUtil.isNotEmpty(packageName)) &#123;</span><br><span class="line">                    subPackageName &#x3D; packageName + &quot;.&quot; + subPackageName;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; 递归获取子包下面的文件</span><br><span class="line">                addClass(classSet, subPackagePath, subPackageName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 添加类名的统一方法</span><br><span class="line">     * 主要为根据包名加载类</span><br><span class="line">     *</span><br><span class="line">     * @param result    类集合</span><br><span class="line">     * @param className 类名</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void doAddClass(Set&lt;Class&lt;?&gt;&gt; result, String className) &#123;</span><br><span class="line">        Class&lt;?&gt; cls &#x3D; loadClass(className, false);</span><br><span class="line">        result.add(cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AOP-实现思路"><a href="#AOP-实现思路" class="headerlink" title="AOP 实现思路"></a>AOP 实现思路</h2><h3 id="定义切面注解"><a href="#定义切面注解" class="headerlink" title="定义切面注解"></a>定义切面注解</h3><p>value：表示注解类，用来指定controller这一类注解</p>
<h3 id="搭建代理框架"><a href="#搭建代理框架" class="headerlink" title="搭建代理框架"></a>搭建代理框架</h3><ol>
<li>使用链式调用的方法生产代理对象</li>
<li>需要写一个类，提供创建代理对象的方法，输入一个目标类和一组Proxy, 输出代理对象，用于创建所有的代理对象</li>
<li>使用切面来管理所有的代理对象创建，因为切面需要拿到目标方法以及被调用的前后增加逻辑，<ol>
<li>写一个抽象类，提供模板，具体实现中扩展，定为AspectProxy</li>
</ol>
</li>
<li>使用一个日志切面对于代理操作进行增强</li>
</ol>
<h3 id="加载AOP框架"><a href="#加载AOP框架" class="headerlink" title="加载AOP框架"></a>加载AOP框架</h3><p>整个框架使用ProxyManager 创建代理对象</p>
<p>将代理对象放入框架底层的Bean Map,通过IOC将被代理的对象注入到其他对象</p>
<ol>
<li>在BeanHelper 当中增加一个添加Bean实例的方法</li>
<li>扩展ClassHelper , 增加一个获取某个父类的所有子类或者实现类，以及获取带有某个注解的所有类的方法</li>
</ol>
<p>获取Aspect 注解中设置的注解类，若该注解不是Aspect 类，则可以调用ClassHelper#getClassSetByAnnotation 获取相关类， 放入目标类集合， 最终返回这些集合</p>
<p>需要将代理类以及目标类集合的映射关系获取，一个代理对应一个或者多个目标类，代理类指定是切面类，通过以下代码或者映射关系</p>
<p>代理类需要扩展AspectProxy抽象类,还需要Aspect注解，只有两者都满足，才能根据Aspect注解定义的注解属性去获取改注解对应的目标类集合，才能建立代理类与目标类的集合，才能返回映射</p>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final class AopHelper &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger LOGGER &#x3D; LoggerFactory.getLogger(AopHelper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Map&lt;Class&lt;?&gt;, Set&lt;Class&lt;?&gt;&gt;&gt; proxyMap &#x3D; createProxyMap();</span><br><span class="line">            Map&lt;Class&lt;?&gt;, List&lt;Proxy&gt;&gt; targetMap &#x3D; createTargetMap(proxyMap);</span><br><span class="line">            for (Map.Entry&lt;Class&lt;?&gt;, List&lt;Proxy&gt;&gt; targetEntity : targetMap.entrySet()) &#123;</span><br><span class="line">                Class&lt;?&gt; targetClass &#x3D; targetEntity.getKey();</span><br><span class="line">                List&lt;Proxy&gt; proxyList &#x3D; targetEntity.getValue();</span><br><span class="line">                Object proxy &#x3D; ProxyManager.createProxy(targetClass, proxyList);</span><br><span class="line">                BeanHelper.setBeanMap(targetClass, proxy);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            LOGGER.error(&quot;aop failure&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取所有Aspect 目标集合</span><br><span class="line">     * @param aspect</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static Set&lt;Class&lt;?&gt;&gt; createTargetClassSet(Aspect aspect) throws Exception&#123;</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; targetClassSet &#x3D; new HashSet&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">        Class&lt;? extends Annotation&gt; annotation &#x3D; aspect.value();</span><br><span class="line">        if(annotation !&#x3D; null &amp;&amp; !annotation.equals(Aspect.class))&#123;</span><br><span class="line">            targetClassSet.addAll(ClassHelper.getClassSetByAnnotation(annotation));</span><br><span class="line">        &#125;</span><br><span class="line">        return targetClassSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 创建代理类和目标集合的映射</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static Map&lt;Class&lt;?&gt;, Set&lt;Class&lt;?&gt;&gt;&gt; createProxyMap() throws Exception &#123;</span><br><span class="line">        Map&lt;Class&lt;?&gt;, Set&lt;Class&lt;?&gt;&gt;&gt; proxyMap &#x3D; new HashMap&lt;Class&lt;?&gt;, Set&lt;Class&lt;?&gt;&gt;&gt;();</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; proxySet &#x3D; ClassHelper.getClassSetBySuper(AspectProxy.class);</span><br><span class="line">        for (Class&lt;?&gt; proxyClass: proxySet) &#123;</span><br><span class="line">            if(proxyClass.isAnnotationPresent(Aspect.class))&#123;</span><br><span class="line">                Aspect aspect &#x3D; proxyClass.getAnnotation(Aspect.class);</span><br><span class="line">                Set&lt;Class&lt;?&gt;&gt; targetClassSet &#x3D; createTargetClassSet(aspect);</span><br><span class="line">                proxyMap.put(proxyClass, targetClassSet);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return proxyMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 根据代理类和目标集合，分析出目标类和代理对象之间的映射</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static Map&lt;Class&lt;?&gt;, List&lt;Proxy&gt;&gt; createTargetMap(Map&lt;Class&lt;?&gt;,Set&lt;Class&lt;?&gt;&gt;&gt; proxyMap) throws Exception &#123;</span><br><span class="line">        Map&lt;Class&lt;?&gt;,List&lt;Proxy&gt;&gt; targetMap &#x3D; new HashMap&lt;Class&lt;?&gt;, List&lt;Proxy&gt;&gt;();</span><br><span class="line">        for (Map.Entry&lt;Class&lt;?&gt;, Set&lt;Class&lt;?&gt;&gt;&gt; proxyEntity : proxyMap.entrySet()) &#123;</span><br><span class="line">            Class&lt;?&gt; proxyClass &#x3D; proxyEntity.getKey();</span><br><span class="line">            Set&lt;Class&lt;?&gt;&gt; targetClassSet &#x3D; proxyEntity.getValue();</span><br><span class="line">            for (Class&lt;?&gt; targetClass: targetClassSet) &#123;</span><br><span class="line">                Proxy proxy &#x3D; (Proxy)proxyClass.newInstance();</span><br><span class="line">                if(targetMap.containsKey(targetClass))&#123;</span><br><span class="line">                    targetMap.get(targetClass).add(proxy);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    List&lt;Proxy&gt; proxyList &#x3D; new ArrayList&lt;Proxy&gt;();</span><br><span class="line">                    proxyList.add(proxy);</span><br><span class="line">                    targetMap.put(targetClass, proxyList);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return targetMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="问题汇总："><a href="#问题汇总：" class="headerlink" title="问题汇总："></a>问题汇总：</h1><h2 id="Spring是如何处理请求路径中的-quot-quot-的？"><a href="#Spring是如何处理请求路径中的-quot-quot-的？" class="headerlink" title="Spring是如何处理请求路径中的&quot;/&quot;的？"></a>Spring是如何处理请求路径中的<code>&quot;/&quot;</code>的？</h2><p>例如：<code>&quot;/hello&quot;</code>和<code>&quot;hello&quot;</code>效果是一样的</p>
<p>目前做了一个<code>startWith()</code>的判断操作</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>《并发编程实战》笔记</title>
    <url>/2020/07/26/note6/</url>
    <content><![CDATA[<h1 id="《并发编程实战》笔记"><a href="#《并发编程实战》笔记" class="headerlink" title="《并发编程实战》笔记"></a>《并发编程实战》笔记</h1><h2 id="1-并发编程的优势"><a href="#1-并发编程的优势" class="headerlink" title="1. 并发编程的优势"></a>1. 并发编程的优势</h2><ol>
<li>发挥多处理器的能力</li>
<li>建模简单</li>
<li>异步处理任务</li>
</ol>
<h2 id="2-活跃性问题和性能问题"><a href="#2-活跃性问题和性能问题" class="headerlink" title="2. 活跃性问题和性能问题"></a>2. 活跃性问题和性能问题</h2><ol>
<li>上下文的切换问题</li>
</ol>
<h3 id="2-1-重排序"><a href="#2-1-重排序" class="headerlink" title="2.1 重排序"></a>2.1 重排序</h3><p>重排序：当A线程修改变量，而B线程读取变量的时候，根据处理器的切换，可以出现非常复杂到可能性</p>
<a id="more"></a>

<h2 id="3-线程安全"><a href="#3-线程安全" class="headerlink" title="3. 线程安全"></a>3. 线程安全</h2><h3 id="3-1-同步带来的问题修复办法"><a href="#3-1-同步带来的问题修复办法" class="headerlink" title="3.1 同步带来的问题修复办法"></a>3.1 同步带来的问题修复办法</h3><ol>
<li>不再线程之前共享该变量状态</li>
<li>状态变量不可变</li>
<li>访问状态的时候同步</li>
</ol>
<h3 id="3-2-线程安全性"><a href="#3-2-线程安全性" class="headerlink" title="3.2 线程安全性"></a>3.2 线程安全性</h3><p>线程的正确性</p>
<ul>
<li>某个类到行为和规范完全一致</li>
<li>所见即所知</li>
</ul>
<blockquote>
<p>当多个线程访问某个类，不管运行环境使用什么方式调用或者线程将交替运行，主调代码不需要任何额外的同步或者协同，都能表现正确行为</p>
</blockquote>
<blockquote>
<p>线程安全类封装了必要到同步机制，客户端是无法进行进一步措施的</p>
</blockquote>
<blockquote>
<p>无状态对象一定是想线程安全的</p>
</blockquote>
<h3 id="3-3-锁的类型"><a href="#3-3-锁的类型" class="headerlink" title="3.3 锁的类型"></a>3.3 锁的类型</h3><h4 id="3-3-1-内置锁（互斥锁）"><a href="#3-3-1-内置锁（互斥锁）" class="headerlink" title="3.3.1 内置锁（互斥锁）"></a>3.3.1 内置锁（互斥锁）</h4><p>就是被<code>synchronize</code>关键字修饰到方法</p>
<p>特性：当用户持有内置锁的时候，只有一个线程可以持有此锁，例如：如果A持有了锁，B访问，B就会阻塞</p>
<ol>
<li>静态的<code>synchronize</code>方法以Class作为锁</li>
<li>java内置锁的基本代为是对象</li>
</ol>
<p>优点：</p>
<ol>
<li>可以是方法具有原子性</li>
<li>多个线程访问不会发生竞态条件</li>
</ol>
<p>缺点：</p>
<ol>
<li>导致代码完全同步</li>
<li>严重消耗性能</li>
</ol>
<h4 id="3-3-2-可重入锁"><a href="#3-3-2-可重入锁" class="headerlink" title="3.3.2 可重入锁"></a>3.3.2 可重入锁</h4><p>特性：如果一个线程持有由他自己持有的锁，将重入，意味着锁到细粒度为“线程”，不是“调用”，</p>
<blockquote>
<p>如果内置锁不是可重入的，那么将会发生死锁</p>
</blockquote>
<h3 id="3-4-用锁来保护状态"><a href="#3-4-用锁来保护状态" class="headerlink" title="3.4 用锁来保护状态"></a>3.4 用锁来保护状态</h3><blockquote>
<p>错误认知：</p>
<p>操作共享到变量的时候才需要同步</p>
<p>正确方式：</p>
</blockquote>
<p>只有多个线程同时访问的可变数据才需要通过锁保护</p>
<blockquote>
<p>可能被多个线程访问的可变状态常量，在访问他的时候，需要持有同一个锁，这个变量是锁保护的</p>
</blockquote>
<p>当一个方法执行时间较长，并且不会影响状态改变的时候，一定不能够使用锁</p>
<h3 id="3-5-内存可见性"><a href="#3-5-内存可见性" class="headerlink" title="3.5 内存可见性"></a>3.5 内存可见性</h3><p>除开原子性之外，锁的另一个重要作用是实现内存上可见</p>
<h4 id="3-5-1-什么是内存可见性："><a href="#3-5-1-什么是内存可见性：" class="headerlink" title="3.5.1 什么是内存可见性："></a>3.5.1 什么是内存可见性：</h4><p>内存可见性是指一个共享变量在A线程可以看到线程B的到操作，防止A读取到失效数据</p>
<h4 id="3-5-2-Volatie-变量"><a href="#3-5-2-Volatie-变量" class="headerlink" title="3.5.2 Volatie 变量"></a>3.5.2 Volatie 变量</h4><p>什么时候使用Volatie变量</p>
<ol>
<li>对变量的写入操作不依赖变量得值，或者确保某个单线程会修改变量才使用</li>
<li>此变量不会和其他状态变量一起纳入不变性条件</li>
<li>访问变量的时候不需要加锁</li>
</ol>
<h3 id="3-6-发布和逸出"><a href="#3-6-发布和逸出" class="headerlink" title="3.6 发布和逸出"></a>3.6 发布和逸出</h3><p>发布：指一个对象发布到另一个对象的作用域里面，脱离当前作用域</p>
<p>逸出：被发布的对象同时发布了其他对象的信息，这时候就是逸出</p>
<h2 id="4-线程封闭"><a href="#4-线程封闭" class="headerlink" title="4. 线程封闭"></a>4. 线程封闭</h2><h3 id="4-1-Ad-hoc-线程封闭"><a href="#4-1-Ad-hoc-线程封闭" class="headerlink" title="4.1 Ad-hoc 线程封闭"></a>4.1 Ad-hoc 线程封闭</h3><p>含义：线程封闭（Thread Confinement）：仅在单线程内访问数据，不需要同步。</p>
<h3 id="4-2-栈封闭"><a href="#4-2-栈封闭" class="headerlink" title="4.2 栈封闭"></a>4.2 栈封闭</h3><p>含义： 在栈封闭中，只能通过局部变量才能访问对象。</p>
<p>栈封闭（也被称为线程内部使用或者线程局部使用）比Ad-hoc线程封闭更易于维护，也更加健壮。</p>
<h3 id="4-3-ThreadLocal类"><a href="#4-3-ThreadLocal类" class="headerlink" title="4.3 ThreadLocal类"></a>4.3 ThreadLocal类</h3><p>这个类能使线程中的某个值与保存值的对象关联起来。ThreadLocal提供了get与set等访问接口或方法，这些方法为每个使用该变量的线程都存有一份独立的副本，因此get总是返回由当前执行线程在调用set时设置的最新值。</p>
<h2 id="5-不变性"><a href="#5-不变性" class="headerlink" title="5. 不变性"></a>5. 不变性</h2><blockquote>
<p>什么是不可变对象？</p>
<ol>
<li>创建之后不允许改变</li>
<li>对象的所有域都是final</li>
<li>对象是正确创建的（this没有逸出）</li>
</ol>
</blockquote>
<h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><ol>
<li>如果不需要域是不可变的，则需要尽量为private</li>
<li>如果对象不需要改变，尽量为private 域</li>
</ol>
<h2 id="安全发布"><a href="#安全发布" class="headerlink" title="安全发布"></a>安全发布</h2><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《Spring 实战》解读</title>
    <url>/2020/07/26/note2/</url>
    <content><![CDATA[<h1 id="《Spring-实战》解读"><a href="#《Spring-实战》解读" class="headerlink" title="《Spring 实战》解读"></a>《Spring 实战》解读</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>DI：依赖反转</p>
<p>AOP：切面编程</p>
<a id="more"></a>

<h3 id="Spring应用上下文"><a href="#Spring应用上下文" class="headerlink" title="Spring应用上下文"></a>Spring应用上下文</h3><p><strong>AnnotationConfigApplicationContext</strong> ：从一个或多个基于 Java 的配置类中加载 Spring 应用上下文。</p>
<p><strong>AnnotationConfigWebApplicationContext</strong> ：从一个或多个基于 Java 的配置类中加载 Spring Web 应用上下文。</p>
<p><strong>ClassPathXmlApplicationContext</strong> ：从类路径下的一个或多个 XML 配置文件中加载上下文定义，把应用上下文的定义文件作为类资源。</p>
<p><strong>FileSystemXmlapplicationcontext</strong> ：从文件系统下的一个或多个 XML 配置文件中加载上下文定义。</p>
<p><strong>XmlWebApplicationContext</strong> ：从 Web 应用下的一个或多个 XML 配置文件中加载上下文定义。</p>
<h3 id="Spring的生命周期"><a href="#Spring的生命周期" class="headerlink" title="Spring的生命周期"></a>Spring的生命周期</h3><p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200213191203.png?ynotemdtimestamp=1595748679079" alt="Spring生命周期"></p>
<ol>
<li>Spring 对 bean 进行实例化；</li>
<li>Spring 将值和 bean 的引用注入到 bean 对应的属性中；</li>
<li>如果 bean 实现了 BeanNameAware 接口， Spring 将 bean 的 ID 传递给 setBean-Name() 方法；</li>
<li>如果 bean 实现了 BeanFactoryAware 接口， Spring 将调用 setBeanFactory() 方法，将 BeanFactory 容器实例传入；</li>
<li>如果 bean 实现了 ApplicationContextAware 接口， Spring 将调用 setApplicationContext() 方法，将 bean 所在的应用上下文的引用传入进来；</li>
<li>如果 bean 实现了 BeanPostProcessor 接口， Spring 将调用它们的 post-ProcessBeforeInitialization() 方法；</li>
<li>如果 bean 实现了 InitializingBean 接口， Spring 将调用它们的 after-PropertiesSet() 方法。类似地，如果 bean 使用 init- method 声明了初始化方法，该方法也会被调用；</li>
<li>如果 bean 实现了 BeanPostProcessor 接口， Spring 将调用它们的 post-ProcessAfterInitialization() 方法；</li>
<li>此时， bean 已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到该应用上下文被销毁；</li>
<li>如果 bean 实现了 DisposableBean 接口， Spring 将调用它的 destroy() 接口方法。同样，如果 bean 使用 destroy-method 声明了销 毁方法，该方法也会被调用</li>
</ol>
<h3 id="Spring-模块-（4-0为例）"><a href="#Spring-模块-（4-0为例）" class="headerlink" title="Spring 模块 （4.0为例）"></a>Spring 模块 （4.0为例）</h3><p><img src="https://raw.githubusercontent.com/lazyTimes/imageRepository/master/img/20200213191506.png?ynotemdtimestamp=1595748679079" alt="Spring模块"></p>
<h3 id="版本新特性"><a href="#版本新特性" class="headerlink" title="版本新特性"></a>版本新特性</h3><p>3.1 ： 注解编程</p>
<p>3.2：增强SpringMVC，加入更多的支持</p>
<p>4.0：Websocket加入，JDK1.8的支持以及Lambada表达式</p>
<h2 id="Spring的Bean"><a href="#Spring的Bean" class="headerlink" title="Spring的Bean"></a>Spring的Bean</h2><h3 id="装配Bean的三种方式："><a href="#装配Bean的三种方式：" class="headerlink" title="装配Bean的三种方式："></a>装配Bean的三种方式：</h3><ol>
<li>自动装配（扫描）</li>
<li>XML装配</li>
<li>通过JAVA代码</li>
</ol>
<h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><blockquote>
<p>Q：<strong>为Bean命名有什么影响？</strong></p>
<p>A： <strong>@Inject</strong> 和 <strong>@Autowired</strong> 的注入会受到影响</p>
<p>Q：<strong>Bean默认的命名规则？</strong></p>
<p>A：类名的首字母小写</p>
<p>Q：除了@Bean定义名称之外的办法？</p>
<p>A：<strong>@Named</strong></p>
</blockquote>
<h3 id="JAVA配置"><a href="#JAVA配置" class="headerlink" title="JAVA配置"></a>JAVA配置</h3><p>需要注意Bean是单例的，如果引用对象也存在引用，那么对应的引用对象也是单利的</p>
<h3 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h3><ol>
<li>使用 <constructor-arg> 元素进行构造器参数的注入</li>
<li>由于xml 配置非常的繁琐，推荐Java配置</li>
</ol>
<h2 id="更高级的Bean装配"><a href="#更高级的Bean装配" class="headerlink" title="更高级的Bean装配"></a>更高级的Bean装配</h2><h3 id="profile-Bean"><a href="#profile-Bean" class="headerlink" title="profile Bean"></a>profile Bean</h3><p><code>@Profile</code> 注解指定某个 bean 属于哪一个 profile</p>
<blockquote>
<p>3.2之前：@profile只能作用于类</p>
</blockquote>
<h3 id="激活profile"><a href="#激活profile" class="headerlink" title="激活profile"></a>激活profile</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.profiles.active&#96; 和 &#96;spring.profiles.default</span><br></pre></td></tr></table></figure>

<p>通常情况下会选择<code>dev</code></p>
<h3 id="条件化-Bean"><a href="#条件化-Bean" class="headerlink" title="条件化 Bean"></a>条件化 Bean</h3><p><strong>@Conditional</strong>：SpringBoot的核心</p>
<p>运作基本原理：</p>
<p>它通过给定的 <code>ConditionContext</code>对象进而得到<code>Environment</code>对象，并使用这个对象检查环境中是否存在名为 magic 的环境属性</p>
<blockquote>
<p>通过 ConditionContext ，我们可以做到如下几点：</p>
<ul>
<li>借助 <code>getRegistry()</code> 返回的 BeanDefinitionRegistry 检查 bean 定义；</li>
<li>借助 <code>getBeanFactory()</code>返回的 ConfigurableListableBeanFactory 检查 bean 是否存在，甚至探查 bean 的属性；</li>
<li>借助 <code>getEnvironment()</code> 返回的 Environment 检查环境变量是否存在以及它的值是什么；</li>
<li>读取并探查 <code>getResourceLoader()</code> 返回的 ResourceLoader 所加载的资源；</li>
<li>借助 <code>getClassLoader()</code>返回的 ClassLoader 加载并检查类是否存在。</li>
</ul>
</blockquote>
<h4 id="标示首选的-bean"><a href="#标示首选的-bean" class="headerlink" title="标示首选的 bean"></a>标示首选的 bean</h4><p><code>@Primary</code>：当自动装配Bean遇到歧义的时候可以设置首选Bean</p>
<h4 id="限定自动装配的-bean"><a href="#限定自动装配的-bean" class="headerlink" title="限定自动装配的 bean"></a>限定自动装配的 bean</h4><p><code>@Qualifier</code>：注解是使用限定符的主要方式</p>
<p>注意：另一种使用方式是定义一个注解然后使用限定装配符号实现自己标记</p>
<h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><p>单例（ Singleton ）：在整个应用中，只创建 bean 的一个实例。</p>
<p>原型（ Prototype ）：每次注入或者通过 Spring 应用上下文获取的时候，都会创建一个新的 bean 实例。</p>
<p>会话（ Session ）：在 Web 应用中，为每个会话创建一个 bean 实例。</p>
<p>请求（ Rquest ）：在 Web 应用中，为每个请求创建一个 bean 实例。</p>
<p>配置方式：<code>@Scope</code></p>
<p>注意在创建时候使用的是代理而不是真正的New 一个对象</p>
<h2 id="运行时注入"><a href="#运行时注入" class="headerlink" title="运行时注入"></a>运行时注入</h2><p>Spring提供了两种办法来实现属性注入</p>
<ul>
<li>属性占位符（ Property placeholder ）</li>
<li>Spring 表达式语言（ SpEL ）</li>
</ul>
<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h3 id="DispatcherServelet"><a href="#DispatcherServelet" class="headerlink" title="DispatcherServelet"></a>DispatcherServelet</h3><p>DispatcherServlet 是 Spring MVC 的核心。在这里请求会第一次接触到框架，它要负责将请求路由到其他的组件之中。</p>
<p><code>AbstractAnnotationConfigDispatcherServletInitializer</code>核心实现类</p>
<h2 id="Spring-Web-Flow"><a href="#Spring-Web-Flow" class="headerlink" title="Spring Web Flow"></a>Spring Web Flow</h2><h2 id="是什么："><a href="#是什么：" class="headerlink" title="是什么："></a>是什么：</h2><p>一种基于会话的流程式框架</p>
<h2 id="为什么会有web-Flow"><a href="#为什么会有web-Flow" class="headerlink" title="为什么会有web Flow"></a>为什么会有web Flow</h2><p>在解决web与用户的交互流程方面做了很大的帮助和改进，能够实现一种类似OA的流程式业务</p>
<h2 id="怎么做："><a href="#怎么做：" class="headerlink" title="怎么做："></a>怎么做：</h2><ol>
<li>看官网：<span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0cy5zcHJpbmcuaW8vc3ByaW5nLXdlYmZsb3cv" title="https://projects.spring.io/spring-webflow/">https://projects.spring.io/spring-webflow/<i class="fa fa-external-link"></i></span></li>
<li>简书博客：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82YzQ0OTAyYThlNGU=" title="https://www.jianshu.com/p/6c44902a8e4e">https://www.jianshu.com/p/6c44902a8e4e<i class="fa fa-external-link"></i></span></li>
<li>对比：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vUGllcnMvcC82NTg4MjkwLmh0bWw=" title="https://www.cnblogs.com/Piers/p/6588290.html">https://www.cnblogs.com/Piers/p/6588290.html<i class="fa fa-external-link"></i></span></li>
</ol>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>由于大量的XML配置已经不适合当前时代的发展了，还是建议使用MVC吧</p>
<p>某些一对一的服务下面可能会有奇效</p>
<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>保护web 应用程序的权限，以及保护程序安全的一个框架</p>
<h2 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h2><p>防止非法用户的攻击行为，对于用户的权限进行限定</p>
<h2 id="同类产品比较："><a href="#同类产品比较：" class="headerlink" title="同类产品比较："></a>同类产品比较：</h2><p><strong>Apach Shiro</strong>：Spring4 之后倾向于使用Apach Shiro的支持，因为该框架配置更加灵活，实现更加简单，最关键是不仅仅限制在Web框架！！！</p>
<h2 id="怎么做：-1"><a href="#怎么做：-1" class="headerlink" title="怎么做："></a>怎么做：</h2><ol>
<li>看官网：<span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLXNlY3VyaXR5" title="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security<i class="fa fa-external-link"></i></span></li>
<li>百度或者谷歌查看案例实战</li>
</ol>
<p>此框架只有遇到实际应用才能掌握，不做详细笔记</p>
<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ul>
<li>配置用户存储；</li>
<li>指定哪些请求需要认证，哪些请求不需要认证，以及所需要的权限；</li>
<li>提供一个自定义的登录页面，替代原来简单的默认登录页。</li>
</ul>
<h1 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h1><h2 id="是什么？-1"><a href="#是什么？-1" class="headerlink" title="是什么？"></a>是什么？</h2><p>一种新的消息通信协议，不同于JMS，提供更加灵活的方式进行JAVA的消息推送</p>
<h2 id="和JMS的区别"><a href="#和JMS的区别" class="headerlink" title="和JMS的区别"></a>和JMS的区别</h2><p>不同于使用“通道”的概念，AMQP使用<code>Exchange</code>作为消息的暂存区域</p>
<blockquote>
<p>Exchange的类型：</p>
<p>Direct ：如果消息的 routing key 与 binding 的 routing key 直接匹配的话，消息将会路由到该队列上； Topic ：如果消息的 routing key 与 binding 的 routing key 符合通配符匹配的话，消息将会路由到该队列上； Headers ：如果消息参数表中的头信息和值都与 bingding 参数表中相匹配，消息将会路由到该队列上； Fanout ：不管消息的 routing key 和参数表的头信息 / 值是什么，消息将会路由到所有队列上。</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据对比】综合分析百度情感分析以及华为情感分析的差异，我有了如下结果</title>
    <url>/2020/07/26/compare1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>某一天，经理找到我，说BOSS需要情感分析对比的结果，我这边能不能研究一下几家情感分析的平台，按照（巴拉巴拉）的要求进行分析，于是就有了这篇文章……</p>
<h1 id="为什么要进行对比"><a href="#为什么要进行对比" class="headerlink" title="为什么要进行对比"></a>为什么要进行对比</h1><ol>
<li>公司任务</li>
<li>了解下情感分析</li>
<li>对比几家情感分析</li>
</ol>
<a id="more"></a>

<h1 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景:"></a><strong>业务场景:</strong></h1><p>​    爬虫截取微博网上留言信息，调用华为云的情感分析，百度云情感分析（通用接口），百度云情感分析（定制化模型，自定义学习资料）。根据以下几个点进行对比。</p>
<ul>
<li>未处理的原版数据<ul>
<li>通用模型- 原版分类置信度</li>
<li>定制模型 - 原版分类置信度 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>定制模型 - 原版分类置信度 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>原版评论分类置信度 （华为云 仅2000条左右数据）</li>
<li>通用模型- 原版评论负面倾向概率</li>
<li>定制模型 - 原版评论负面倾向概率 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>定制模型 - 原版评论负面倾向概率 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>通用模型- 原版评论正面倾向概率</li>
<li>使用定制模型 - 原版评论正面倾向概率 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>使用定制模型 - 原版评论正面倾向概率 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>通用模型- 原 版评论分析正负结果值</li>
<li>定制模型 - 原版评论分析正负结果值 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>定制模型 - 原版评论分析正负结果值 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>原版评论正负结果值 （华为云 仅2000条左右数据）</li>
</ul>
</li>
<li>处理掉@和#后的评论数据：<ul>
<li>通用模型- 原版分类置信度</li>
<li>定制模型 - 原版分类置信度 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>定制模型 - 原版分类置信度 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>原版评论分类置信度 （华为云 仅2000条左右数据）</li>
<li>通用模型- 原版评论负面倾向概率</li>
<li>定制模型 - 原版评论负面倾向概率 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>定制模型 - 原版评论负面倾向概率 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>通用模型- 原版评论正面倾向概率</li>
<li>使用定制模型 - 原版评论正面倾向概率 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>使用定制模型 - 原版评论正面倾向概率 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>通用模型- 原 版评论分析正负结果值</li>
<li>定制模型 - 原版评论分析正负结果值 （800条学习资料样本， 85.96%准确率的学习资料）</li>
<li>定制模型 - 原版评论分析正负结果值 （1800条学习资料样本， 65.93%准确率的学习资料）</li>
<li>原版评论正负结果值 （华为云 仅2000条左右数据）</li>
</ul>
</li>
</ul>
<h1 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题:"></a><strong>解决的问题:</strong></h1><ol>
<li>对比了两家的情感分析之后，经过综合分析，<strong>百度云情感分析（通用模型</strong>）的准确率是最高的。</li>
<li>目前综合来看，百度云的情感分析通用模式是自然语言分析的最好选择。</li>
<li>定制化的百度模型实际测试不如通用模型准确（可能为学习模型数据不够准确）。</li>
</ol>
<h1 id="挑战"><a href="#挑战" class="headerlink" title="挑战:"></a><strong>挑战:</strong></h1><ol>
<li>首次使用华为云情感分析，对于接口调用方面自己阅读文档不够详细，走了较多的弯路，不过经过仔细研究自行解决。</li>
<li>由于存在QPS限制，调用的时候需要限制调用频率。</li>
<li>由于网络原因可能存在频繁调用的情况。</li>
<li>数据较多的情况下处理数据的时长比较久（针对试用而言）。</li>
<li>根据不同的定制化模型。</li>
<li>可能存在无法分析的特殊字符数据。</li>
</ol>
<h1 id="使用服务"><a href="#使用服务" class="headerlink" title="使用服务:"></a><strong>使用服务:</strong></h1><p>自然语言处理 - 情感分析</p>
<h1 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决:"></a><strong>如何解决:</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 在不超过**qps**限制的情况下，试用分页形式，分段请求，在数据库中设置 判断值判断数据是否进行分析，如果重复调用会直接过滤掉已经进行情感分析的数据。</span><br><span class="line">   2. 对于线程进行&#96;休眠&#96;操作，防止调用请求过于频繁接口调用失败。</span><br><span class="line">   3. 使用日志记录失败请求信息，失败请求原因，失败请求数据。</span><br><span class="line">   4. 多次调用数据确保大部分数据可以产生结果，个别数据请求失败以及没有数据的忽略。</span><br></pre></td></tr></table></figure>

<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a><strong>使用场景:</strong></h1><ol>
<li>比对市面上几家华为云的情感分析使用，根据分析结果数据进行比对。</li>
<li>对比百度云通用模型和定制化模型的使用。</li>
<li>对比不同的环境下分析的数据，数据差异值。</li>
</ol>
<h1 id="方案截图"><a href="#方案截图" class="headerlink" title="方案截图:"></a><strong>方案截图:</strong></h1><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200725102058.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>（处理掉特殊字符前的截图）</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200725102133.png?ynotemdtimestamp=1595729096959" alt="img"></p>
<p>（处理掉特殊字符后的截图）</p>
<h1 id="使用规模"><a href="#使用规模" class="headerlink" title="使用规模:"></a><strong>使用规模:</strong></h1><p>共1000条数据左右。（其实总共有18000条数据）</p>
<h1 id="使用收益："><a href="#使用收益：" class="headerlink" title="使用收益："></a><strong>使用收益：</strong></h1><p>对比了百度情感分析和华为云的情感分析，对比结果比较显著，在情感分析的领域发现是百度云的使用情况较好。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>原数据报表有 18000条，如果有对情感分析感兴趣，或者想要了解情感分析对比结果的，可以留言邮箱，我会抽空把报表数据发送至您的邮箱</p>
<p>如果觉得对您有帮助欢迎扩散</p>
<h1 id="作者："><a href="#作者：" class="headerlink" title="作者："></a><strong>作者：</strong></h1><p>阿东</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>情感分析</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇帖子解决window.open中使用jquery操作父元素的问题</title>
    <url>/2020/10/11/note31/</url>
    <content><![CDATA[<p>首先看下例子：<br><span class="exturl" data-url="aHR0cDovL3d3dy5jc3NyYWluLmNuL2RlbW8vMS9XaW5kb3ctb3Blbi1TaG93L2luZGV4Lmh0bWw=" title="http://www.cssrain.cn/demo/1/Window-open-Show/index.html">http://www.cssrain.cn/demo/1/Window-open-Show/index.html<i class="fa fa-external-link"></i></span></p>
<p>这是最近在项目中用到的，后来还在父窗口，增加了删除，然后前面的序号重新排列。</p>
<p>其实都还是比较简单。</p>
<p>具体遇到了哪些问题呢，总结下：</p>
<p>1，因为父窗口中引入了jquery包了，所以子窗口不需要引入了（注：在我这个例子中）。</p>
<p>2，window.opener.$(“#showtable tr”) 后面直接写 jquery的选择 器。</p>
<p>3，删除排序也很简单，就是删除一个后，重新获取所有tr，然后在each循环设置一下index</p>
<p>本篇文章来源于 cssrain.cn 原文链接：<span class="exturl" data-url="aHR0cDovL3d3dy5jc3NyYWluLmNuL2FydGljbGUuYXNwP2lkPTg2OQ==" title="http://www.cssrain.cn/article.asp?id=869">http://www.cssrain.cn/article.asp?id=869<i class="fa fa-external-link"></i></span></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>一次项目短信验证码整改实验</title>
    <url>/2020/10/29/mail/</url>
    <content><![CDATA[<h1 id="一次短信验证码整改实验"><a href="#一次短信验证码整改实验" class="headerlink" title="一次短信验证码整改实验"></a>一次短信验证码整改实验</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>讨论内容部分为当初的一些短信验证码的需求细节讨论</p>
<p>这个短信验证码在并发量非常大的情况下有可能会失效，后续会进行整改升级，保证线程安全</p>
<a id="more"></a>

<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>短信验证码（要想着怎么把所有的项目都整改起来，不影响原有业务运行） 3天时间，全部替换掉</p>
<ul>
<li><p>发送短信</p>
<ul>
<li>增加【业务类型】</li>
<li>获取短信的时候，增加图片验证码（此处用第三方框架实现）</li>
<li>单独增加短信验证码的 ip访问控制 CheckSendSmsIpVisitHelper ，注意别和 CheckIpVisitHelper 冲突</li>
<li>校验手机号码长度 11 位 </li>
<li>60s 根据【手机号码+业务】判断只能发送一次短信，此处将 【手机号码+业务】作为 map 的 key 存储在上下文中</li>
<li>可以灵活配置【手机号码+业务】 每天能够获取短信的次数</li>
</ul>
</li>
<li><p>校验短信</p>
<ul>
<li>增加【手机号+短信验证码】的匹配</li>
<li>校验成功，清理掉session中存储的信息</li>
</ul>
</li>
</ul>
<h1 id="讨论内容"><a href="#讨论内容" class="headerlink" title="讨论内容"></a>讨论内容</h1><ul>
<li>验证码就用第三方的。<code>google kaptcha</code> 这个可以试试</li>
<li>这样 jydd apps 都可以用，2-3天可以完全替换掉所有业务的短信。</li>
<li>页面的修改，直接找建哥提供样式。</li>
<li>把所有业务都一并改了，省的隔三差五的出报告要整改</li>
<li>我要一个完全独立的短信验证码模块，虽然不能在按照项目模块来划分，那就完全独立出来包和功能以及依赖</li>
<li>其实可以直接在apps 的 core里面开发，然后那边直接引用调用？jar包的方式放进去就是的。</li>
</ul>
<h2 id="处理方案："><a href="#处理方案：" class="headerlink" title="处理方案："></a>处理方案：</h2><h2 id="第三方图形验证码参考"><a href="#第三方图形验证码参考" class="headerlink" title="第三方图形验证码参考"></a>第三方图形验证码参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWFuZ3poaWxvbmcvcC84NTc0Njg1Lmh0bWw=" title="https://www.cnblogs.com/yangzhilong/p/8574685.html">SpringBoot之配置google kaptcha<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vRmx5SGVMYW5NYW4vcC82MjkzOTkxLmh0bWw=" title="https://www.cnblogs.com/FlyHeLanMan/p/6293991.html">SpringMvc项目中使用GoogleKaptcha 生成验证码<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucmFtb3N0ZWFyLmNvbS9kb2MvaGFwcHktY2FwdGNoYQ==" title="https://www.ramostear.com/doc/happy-captcha">happy-captcha<i class="fa fa-external-link"></i></span></p>
<h3 id="图形验证码："><a href="#图形验证码：" class="headerlink" title="图形验证码："></a>图形验证码：</h3><ol>
<li>调整页面，增加图形验证码的模块（不同模块需要的改动点不一样）</li>
</ol>
<blockquote>
<p>也可以先把功能做出来，再让前端根据实际情况去调整样式</p>
</blockquote>
<ol>
<li>尝试增加 happy-captcha 或者 google-captcha （实际查询资料发现没有进行维护）</li>
<li>先不考虑美观问题，以实现功能为主要，后续需要改样式在找前端处理</li>
</ol>
<blockquote>
<p>20200903 已实现</p>
</blockquote>
<h3 id="短信校验"><a href="#短信校验" class="headerlink" title="短信校验"></a>短信校验</h3><ol>
<li>60s 根据【手机号码+业务】判断只能发送一次短信，此处将 【手机号码+业务】作为 map 的 key 存储在上下文中</li>
</ol>
<blockquote>
<ol>
<li>将短信的配置独立到一个单独的xml 文件中，方便 spirngboot 项目以及 spinrgmvc 管理</li>
<li>业务模块按照模板的格式配置，不跟项目走</li>
<li>xml 配置读取参考 节假日的xml 配置读取以及作用</li>
<li>整个部分可以参考节假日的处理方式，迁移比较方便</li>
</ol>
</blockquote>
<p>使用xml 配置手机+业务模块</p>
<ol start="2">
<li>校验手机号码长度 11 位 </li>
</ol>
<blockquote>
<ol>
<li>写到工具类里面，单独增加一个方法，需要的时候在调用的地方加入（方案一）</li>
<li>直接在调用的地方补充添加（方案二）</li>
</ol>
</blockquote>
<p>直接在短信接口加入即可</p>
<ol start="3">
<li>可以灵活配置【手机号码+业务】 每天能够获取短信的次数</li>
</ol>
<blockquote>
<ol>
<li>其实就是业务模块单个手机号码的限制次数</li>
</ol>
<p>PS: 目前的攻击手段可以用虚拟手机号码 + 肉鸡服务器 实现，手机号+业务的限制作用个人理解来看作用不明显</p>
</blockquote>
<ol start="4">
<li>大致的工具类设置</li>
</ol>
<ul>
<li>初始化读取xml配置</li>
<li>加载一些动态配置到属性里面，包括一些校验次数的限制</li>
<li>单例模式</li>
<li>尽量少的使用三方工具包，尽量使用原生java实现</li>
<li>注意jdk 版本的问题，不以jdk1.8 为基准</li>
<li>CheckSendSmsIpVisitHelper 可以是对 CheckIpVisitHelper  的扩展</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucmFtb3N0ZWFyLmNvbS9kb2MvaGFwcHktY2FwdGNoYQ==" title="https://www.ramostear.com/doc/happy-captcha">happy-captcha<i class="fa fa-external-link"></i></span> 以此作为参考实现 ，google 的图形化验证码比较老了</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li>目前先尝试 使用一下是否可行， 如果可行在进行处理</li>
<li>先不考虑样式问题，先以实现功能保证可用并可以迁移为主</li>
<li>多测试，保证功能稳定，在考虑迁移到apps </li>
</ol>
<h3 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h3><ol>
<li>输入手机号码</li>
<li>在点击发送短信按钮之前，弹出输入图形验证码</li>
<li>输入正确的图形验证码，发送短信，图形验证取消，回到输入手机验证码界面</li>
<li>如果输入推行验证码不对，一直重复步骤2</li>
</ol>
<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><h3 id="1-绕过图形验证码的接口，直接访问短信接口进行攻击，如何避免"><a href="#1-绕过图形验证码的接口，直接访问短信接口进行攻击，如何避免" class="headerlink" title="1. 绕过图形验证码的接口，直接访问短信接口进行攻击，如何避免?"></a>1. 绕过图形验证码的接口，直接访问短信接口进行攻击，如何避免?</h3><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><ol>
<li>在 【手机号+业务】中增加一个图形验证码的key, 在校验之前，先校验用户当前提交的手机号和图形验证码是否匹配<ol>
<li>匹配：清空用户当前的图形验证码，需要重新请求图形验证码接口才能进行下一次请求</li>
<li>超时：图形验证码有效时间为60秒，超过60秒需要重新请求图形验证码，重新请求短信接口</li>
<li>不匹配，返回错误信息</li>
</ol>
</li>
<li>设置校验开关，如果需要在短信接口加入图形验证码的校验，则在发送短信之前，需要当前的图形验证码是否吻合（如果没有图形验证码说明没有经过图形验证这一步骤，直接返回失败）<ol>
<li>图形验证码校验关闭，则不会涉及用户图形验证码和手机号的匹配（考虑临时需要关闭这种校验的情况）</li>
<li>开启，则会进行上面所说的匹配操作</li>
</ol>
</li>
<li>图形验证码设置为通过校验之后失效，下次请求需要携带新的图形验证码，才能请求通过短信接口</li>
</ol>
<h3 id="2-增加【手机号-业务】的配置校验"><a href="#2-增加【手机号-业务】的配置校验" class="headerlink" title="2. 增加【手机号-业务】的配置校验"></a>2. 增加【手机号-业务】的配置校验</h3><p>解决方案：</p>
<ol>
<li>短信模块需要在js请求增加模块参数，如果没有模块参数，视为非法请求</li>
<li>请求带入 手机号-业务-key ，存储当前手机号对应业务的请求次数</li>
<li>增加判断<ol>
<li>如果请求次数在<strong>当天</strong>内超过xml配置次数，将不再允许改手机号对应该接口进行请求，不再发送短信</li>
<li>但是如果超过了一天之后再次请求，需要将请求次数 <strong>重置为1</strong>，也可以重新发送短信接口请求</li>
</ol>
</li>
<li>在需要的地方调用工具包即可</li>
</ol>
<h1 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h1><h2 id="成果："><a href="#成果：" class="headerlink" title="成果："></a>成果：</h2><h3 id="控制器调用："><a href="#控制器调用：" class="headerlink" title="控制器调用："></a>控制器调用：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 开启之后，才做进一步校验</span></span><br><span class="line"><span class="keyword">if</span>(PHONE_MODULE_CHECK_ENABLE)&#123;</span><br><span class="line">    <span class="comment">// 添加 【手机+业务模块】校验 以及 【60秒重复调用校验】</span></span><br><span class="line">    <span class="keyword">boolean</span> checkRequest = CheckSendMailHelper.checkContextMap(result, request, phone);</span><br><span class="line">    <span class="comment">// 校验不通过的处理办法，可以自定</span></span><br><span class="line">    <span class="keyword">if</span> (!checkRequest) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//限制用户ip访问短信机获取验证码次数，默认10次</span></span><br><span class="line"><span class="keyword">if</span> (IP_CHECK_ENABLE &amp;&amp; !CheckIpVisitHelper.check(request)) &#123;</span><br><span class="line">    <span class="comment">// 校验不通过的处理办法，可以自定</span></span><br><span class="line">    result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_6.getCode());</span><br><span class="line">    result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_6.getName());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PHONE_MODULE_CHECK_ENABLE：短信-业务模块校验开关</p>
<p>IP_CHECK_ENABLE：限制短信每天的获取次数，也是手机号+业务模块</p>
</blockquote>
<h3 id="短信相关的枚举常量："><a href="#短信相关的枚举常量：" class="headerlink" title="短信相关的枚举常量："></a>短信相关的枚举常量：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SmsRequestStatusEnum &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回状态码 表示发送正常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_1(<span class="number">1</span>, <span class="string">"返回状态码 表示发送正常"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 60s内只能获取不能重复获取验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_2(<span class="number">2</span>, <span class="string">"60s内只能获取不能重复获取验证码"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号码长度不正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_3(<span class="number">3</span>, <span class="string">"手机号码长度不正确"</span>),</span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 用户session已失效</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    RESULT_STATUS_4(4, "用户session已失效"),</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缺少必要的参数：手机号！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_4(<span class="number">4</span>, <span class="string">"缺少必要的参数：手机号！"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号码长度不正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_5(<span class="number">5</span>, <span class="string">"手机号码长度不正确"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同一个ip请求短信机次数过于频繁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_6(<span class="number">6</span>, <span class="string">"同一个ip请求短信机次数过于频繁！"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 60秒内不允许重复请求短信接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_7(<span class="number">7</span>, <span class="string">"60秒内不允许重复请求短信接口！"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缺少必要的请求参数：短信业务模块名称：phoneModule ！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_9(<span class="number">9</span>, <span class="string">"缺少必要的请求参数：短信业务模块名称：phoneModule ！"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前手机号请求超出限制，请等待24小时之后重新请求短信接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_10(<span class="number">10</span>, <span class="string">"当前手机号请求次数超出限制，请等待24小时之后重新请求短信接口"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图形验证码已失效，请重新请求短信接口！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RESULT_STATUS_8(<span class="number">8</span>, <span class="string">"图形验证码已失效，请重新请求短信接口！"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    SmsRequestStatusEnum(<span class="keyword">int</span> code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (SmsRequestStatusEnum item : SmsRequestStatusEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getCode() == code) &#123;</span><br><span class="line">                <span class="keyword">return</span> item.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="IP检测工具类："><a href="#IP检测工具类：" class="headerlink" title="IP检测工具类："></a>IP检测工具类：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测ip访问辅助类，</span></span><br><span class="line"><span class="comment"> * 主要处理某个时间段类，</span></span><br><span class="line"><span class="comment"> * ip访问次数，以及设置封禁时间、</span></span><br><span class="line"><span class="comment"> * 解封等操作，</span></span><br><span class="line"><span class="comment"> * 用于防止频繁调用短信机攻击等</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 重写原理：</span></span><br><span class="line"><span class="comment"> * 1. 使用LRUMap key 存储 IP号码，value 存储 访问次数以及时间（使用map）</span></span><br><span class="line"><span class="comment"> * 2. 使用servletContext 存储 LRUMap，LRUMap 存储 的 key 为 IP号码-业务模块 VALUE 为 map</span></span><br><span class="line"><span class="comment"> * 3. LRUMap 对应的 key IP号码+业务。 value 绑定了访问次数和时间</span></span><br><span class="line"><span class="comment"> * 4. 如果没有配置模块，校验将会永久失败，IP的模块和短信的模块使用同一块配置</span></span><br><span class="line"><span class="comment"> * 5. ServletContext 生命周期和web的生命周期相同</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2020/09/08 重写工具类，</span></span><br><span class="line"><span class="comment"> * 1. 不在暴露 map。</span></span><br><span class="line"><span class="comment"> * 2. 使用servletContext 保存 Ip 的 map。Map&lt;String,Object&gt; 形式</span></span><br><span class="line"><span class="comment"> * 3. 如果超过IP限制时间，自动进行解锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckIpVisitHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志使用 短信的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="string">"phoneCode"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机访问限制初始化的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE_REQUEST_INIT_SIZE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封禁的时间（单位毫秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FORBIDEN_TIME = <span class="number">60</span> * <span class="number">1000</span> * <span class="number">60</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超过访问时间重新计时（单位毫秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MININTEVAL = <span class="number">60</span> * <span class="number">1000</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LRU Map 初始化大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LRU_MAP_INIT_SIZE = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IP 在指定时间内的限制次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IP_MAX_VISIST_TIME = Setter.getInt(<span class="string">"sms.ip-size"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ip检测使用的 Map key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IP_CHECK_MAP = <span class="string">"IP_CHECK_MAP"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VISIT_COUNT_KEY = <span class="string">"visit_count"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后的请求时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VISIT_TIME_KEY = <span class="string">"visit_time"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IP号码-业务模块名称的格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IP_MOUDULE_FORMAT = <span class="string">"%s-%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ip检查工具，将map 放入 ServletContext</span></span><br><span class="line"><span class="comment">     * 1. 检测基于 ServletContext</span></span><br><span class="line"><span class="comment">     * 2. 请附带 phoneModule: 否则校验永远为false</span></span><br><span class="line"><span class="comment">     * map 当中:</span></span><br><span class="line"><span class="comment">     * key: IP号码-业务</span></span><br><span class="line"><span class="comment">     * value:</span></span><br><span class="line"><span class="comment">     * map -&gt; &#123;</span></span><br><span class="line"><span class="comment">     *  key: 请求次数：value: int</span></span><br><span class="line"><span class="comment">     *  key：请求的时间：value：date</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request request请求域</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果校验没有超过限制 返回 true ，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String remoteIp = RequestHelper.getRemoteIp(request);</span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        LRUMap attribute = (LRUMap) servletContext.getAttribute(IP_CHECK_MAP);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(attribute)) &#123;</span><br><span class="line">            attribute = <span class="keyword">new</span> LRUMap(LRU_MAP_INIT_SIZE);</span><br><span class="line">            servletContext.setAttribute(IP_CHECK_MAP, attribute);</span><br><span class="line">        &#125;</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 根据 IP + 业务模块进行绑定</span></span><br><span class="line">        <span class="comment">// 获取请求的模块名称 同时检查是否有配置模块</span></span><br><span class="line">        String phoneMouduleFlag = CheckSendMailHelper.checkExistsAndGetModule(request);</span><br><span class="line">        <span class="keyword">if</span> (phoneMouduleFlag == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// IP号码 -业务名称</span></span><br><span class="line">        String modulePhone = String.format(IP_MOUDULE_FORMAT, remoteIp, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 获取ip对应的的当前请求次数和请求时间</span></span><br><span class="line">        Map&lt;String, Object&gt; ipMap = (Map&lt;String, Object&gt;) attribute.get(modulePhone);</span><br><span class="line">        <span class="comment">// 如果当前ip没有访问过</span></span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isEmpty(ipMap)) &#123;</span><br><span class="line">            ipMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            ipMap.put(VISIT_COUNT_KEY, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">            ipMap.put(VISIT_TIME_KEY, now);</span><br><span class="line">            attribute.putIfAbsent(modulePhone, ipMap);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> visitCount = (<span class="keyword">int</span>) ipMap.get(VISIT_COUNT_KEY);</span><br><span class="line">        Date visitDate = (Date) ipMap.get(VISIT_TIME_KEY);</span><br><span class="line">        <span class="comment">// 如果长时间没有访问，重新计算</span></span><br><span class="line">        <span class="keyword">if</span> (now.getTime() - visitDate.getTime() &gt; MININTEVAL) &#123;</span><br><span class="line">            ipMap.put(VISIT_COUNT_KEY, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">            ipMap.put(VISIT_TIME_KEY, now);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果访问的次数超过了限制的次数</span></span><br><span class="line">        <span class="keyword">if</span> (visitCount &gt; IP_MAX_VISIST_TIME) &#123;</span><br><span class="line">            <span class="comment">// 如果已经到达限制的次数，但是访问时间超过了限制的时间，重新计时，重新计算请求次数</span></span><br><span class="line">            <span class="keyword">if</span> (now.getTime() - visitDate.getTime() &gt; FORBIDEN_TIME) &#123;</span><br><span class="line">                ipMap.put(VISIT_COUNT_KEY, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">                ipMap.put(VISIT_TIME_KEY, now);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"当前IP: &#123;&#125; 请求次数超过限制"</span>, remoteIp);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// IP访问次数 + 1</span></span><br><span class="line">            visitCount++;</span><br><span class="line">            <span class="comment">// 更新访问次数</span></span><br><span class="line">            ipMap.put(VISIT_COUNT_KEY, visitCount);</span><br><span class="line">            <span class="comment">// 更新访问时间</span></span><br><span class="line">            ipMap.put(VISIT_TIME_KEY, now);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>使用的是servlet-context 全局变量作为存储，依赖web的服务器空间大小，当短信号码过量会造成服务器可访问内存不够，可以考虑用redis 等中间件去存储</li>
<li>LRUMap：使用最少使用内容作为缓存的设计，存储业务需要判断的手机号等</li>
<li>静态方法意味着会出现并发的问题，整个工具类是线程不安全的。</li>
</ol>
</blockquote>
<h3 id="短信发送校验工具类："><a href="#短信发送校验工具类：" class="headerlink" title="短信发送校验工具类："></a>短信发送校验工具类：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送校验工具类</span></span><br><span class="line"><span class="comment"> * map 存储的 key 为手机号码-业务</span></span><br><span class="line"><span class="comment"> * value  为 发送对象等其他信息</span></span><br><span class="line"><span class="comment"> * 包含</span></span><br><span class="line"><span class="comment"> * 1. 图形验证码（不开放不做校验）</span></span><br><span class="line"><span class="comment"> * 2. 图形验证码有效时间</span></span><br><span class="line"><span class="comment"> * 3. 【手机号-业务】 key-name 的配置</span></span><br><span class="line"><span class="comment"> * 4. 【手机号-业务-锁定时间】 key-date</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> lazytimes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/09/02 10:21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckSendMailHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信验证码配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="string">"phoneCode"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 60 秒内不允许重复请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE_REQUEST_TIME = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 60 秒 内 图形验证码有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPTCHA_REQUEST_TIME = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户模块手机号的限制时间 24 小时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE_REQUEST_WAIT_TIME = <span class="number">60</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机访问限制初始化的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHONE_REQUEST_INIT_SIZE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求上下文的map key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTEXT_MAP = <span class="string">"CONTEXT_MAP"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号-业务模块名称的格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PHONE_MOUDULE_FORMAT = <span class="string">"%s-%s"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号-业务模块-请求key 的格式标注用户当前模块的请求 定时器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PHONE_MOUDULE_TIMER_FORMAT = <span class="string">"%s-%s-timer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信验证码模块的通用格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_MODULE_TEMPLATE = <span class="string">"sms.modules.%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号-业务-图形验证码 模块名称的格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CAPTCHA_MOUDULE_FORMAT = <span class="string">"%s-%s-captcha"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号-业务模块-图形验证码-请求key 的格式标注用户当前模块的请求 图形验证码 每个手机号对应业务一份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CAPTCHA_MOUDULE_TIMER_FORMAT = <span class="string">"%s-%s-captcha-timer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务模块名称参数Key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PHONE_MOUDULE_FLAG = <span class="string">"phoneModule"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图形验证码key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CAPCHACODE = <span class="string">"capchaCode"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 最后发送时间key</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    private static final String LAST_SEND_TIME = "lastSendTime";</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图形验证码开关</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> CAPTCHA_ENABLE = Setter.getBoolean(<span class="string">"captcha.enable"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为当前的用户手机号码绑定 图形验证码</span></span><br><span class="line"><span class="comment">     * 图形验证码用于短信接口请求使用，超过一定时间，图形验证码失效</span></span><br><span class="line"><span class="comment">     * 【手机号-业务-图形验证码】：key</span></span><br><span class="line"><span class="comment">     * 【手机号-业务-图形验证码-超时时间】:key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneCode 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code      图形验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request   请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addCapcha</span><span class="params">(String phoneCode, String code, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CAPTCHA_ENABLE) &#123;</span><br><span class="line">            logger.info(<span class="string">"请开启图形验证码校验之后，再配合本工具类方法使用！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; attribute = initServletContextMap(servletContext);</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 获取请求的模块名称 同时检查是否有配置模块</span></span><br><span class="line">        String phoneMouduleFlag = checkExistsAndGetModule(request);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(phoneMouduleFlag)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 手机号 -业务名称</span></span><br><span class="line">        String modulePhone = String.format(PHONE_MOUDULE_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 手机号- 业务名称 - 图形验证码</span></span><br><span class="line">        String capchaModule = String.format(CAPTCHA_MOUDULE_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 手机号 - 业务名称 -图形验证码 - 定时</span></span><br><span class="line">        String capchaModuleTimer = String.format(CAPTCHA_MOUDULE_TIMER_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="keyword">if</span> (!attribute.containsKey(modulePhone)) &#123;</span><br><span class="line">            HashMap&lt;String, Object&gt; stringObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            stringObjectHashMap.put(capchaModule, code);</span><br><span class="line">            <span class="comment">// 图片的有效期</span></span><br><span class="line">            stringObjectHashMap.put(capchaModuleTimer, now);</span><br><span class="line">            attribute.put(modulePhone, stringObjectHashMap);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; stringObjectMap = attribute.get(modulePhone);</span><br><span class="line">            <span class="comment">// 更新验证码以及有效期</span></span><br><span class="line">            stringObjectMap.put(capchaModule, code);</span><br><span class="line">            <span class="comment">// 图片的有效期</span></span><br><span class="line">            stringObjectMap.put(capchaModuleTimer, now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号限制发送处理</span></span><br><span class="line"><span class="comment">     * 1. 增加对于用户请求短信接口的限制，60秒访问一次</span></span><br><span class="line"><span class="comment">     * 2. 增加图形验证码和用户的手机号绑定匹配</span></span><br><span class="line"><span class="comment">     * 1. 图形校验可以灵活开放和关闭</span></span><br><span class="line"><span class="comment">     * 3. 【手机号-业务】的key配置，短信接口当中需要对于用户的请求做限制</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result    封装了返回的状态和信息的 result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request   请求request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneCode 手机号码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkContextMap</span><span class="params">(Map&lt;String, Object&gt; result, HttpServletRequest request, String phoneCode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前模块配置Map集合</span></span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; attribute = initServletContextMap(servletContext);</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 获取请求的模块名称</span></span><br><span class="line">        String phoneMouduleFlag = checkExistsAndGetModule(request);</span><br><span class="line">        <span class="keyword">if</span> (phoneMouduleFlag == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_9.getCode());</span><br><span class="line">            result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_9.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  当前短信业务模块【手机号-业务】</span></span><br><span class="line">        String modulePhone = String.format(PHONE_MOUDULE_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 当前模块【手机号-业务-请求限制时间】</span></span><br><span class="line">        String modulePhoneTimer = String.format(PHONE_MOUDULE_TIMER_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 当前模块每个用户每天最多请求次数</span></span><br><span class="line">        <span class="keyword">int</span> moduleCount = Setter.getInt(String.format(SMS_MODULE_TEMPLATE, phoneMouduleFlag));</span><br><span class="line">        <span class="keyword">if</span> (!attribute.containsKey(modulePhone)) &#123;</span><br><span class="line">            <span class="comment">// 需要自行初始化</span></span><br><span class="line">            HashMap&lt;String, Object&gt; stringObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">// 初始化短信接口调用次数</span></span><br><span class="line">            stringObjectHashMap.put(modulePhone, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">            <span class="comment">// 初始化短信接口调用时间</span></span><br><span class="line">            stringObjectHashMap.put(modulePhoneTimer, now);</span><br><span class="line">            attribute.put(modulePhone, stringObjectHashMap);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; objectMap = attribute.get(modulePhone);</span><br><span class="line">            <span class="comment">// 开启图形验证码校验才做处理</span></span><br><span class="line">            <span class="keyword">if</span> (CAPTCHA_ENABLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!checkCatpchaCode(result, request, phoneCode, now, phoneMouduleFlag, objectMap)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取当前【手机号+业务】的对应 访问次数，以及最后的访问时间</span></span><br><span class="line">            Object count = objectMap.get(modulePhone);</span><br><span class="line">            Object timer = objectMap.get(modulePhoneTimer);</span><br><span class="line">            <span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">if</span> (Objects.isNull(count) || Objects.isNull(timer)) &#123;</span><br><span class="line">                objectMap.put(modulePhone, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">                objectMap.put(modulePhoneTimer, now);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Integer integer = Integer.valueOf(objectMap.get(modulePhone).toString());</span><br><span class="line">            Date time = (Date) timer;</span><br><span class="line">            <span class="comment">// 检查当前短信+业务是否在60秒内访问</span></span><br><span class="line">            <span class="keyword">if</span>(!checkLastGetTime(result, now, time))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果长时间未访问，重置</span></span><br><span class="line">            <span class="keyword">if</span> ((now.getTime() - time.getTime()) &gt; PHONE_REQUEST_WAIT_TIME) &#123;</span><br><span class="line">                <span class="comment">//  刷新时间</span></span><br><span class="line">                objectMap.put(modulePhone, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">                objectMap.put(modulePhoneTimer, now);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//   当前模块超过了请求限制</span></span><br><span class="line">            <span class="keyword">if</span> (integer &gt; moduleCount) &#123;</span><br><span class="line">                <span class="comment">// 超过了请求时间限制，解封</span></span><br><span class="line">                <span class="keyword">if</span> (now.getTime() - time.getTime() &gt; PHONE_REQUEST_WAIT_TIME) &#123;</span><br><span class="line">                    <span class="comment">//  刷新时间</span></span><br><span class="line">                    objectMap.put(modulePhone, PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">                    objectMap.put(modulePhoneTimer, now);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_10.getCode());</span><br><span class="line">                result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_10.getName());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模块请求次数 + 1</span></span><br><span class="line">            objectMap.put(modulePhone, integer + PHONE_REQUEST_INIT_SIZE);</span><br><span class="line">            <span class="comment">// 刷新时间</span></span><br><span class="line">            objectMap.put(modulePhoneTimer, now);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验图形验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result           返回处理结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request          请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneCode        手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> now              当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phoneMouduleFlag 手机号 - 业务模块 标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectMap        servletContext 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkCatpchaCode</span><span class="params">(Map&lt;String, Object&gt; result, HttpServletRequest request, String phoneCode, Date now, String phoneMouduleFlag, Map&lt;String, Object&gt; objectMap)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 手机号- 业务名称 - 图形验证码</span></span><br><span class="line">        String capchaModule = String.format(CAPTCHA_MOUDULE_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 手机号 - 业务名称 -图形验证码 - 定时</span></span><br><span class="line">        String capchaModuleTimer = String.format(CAPTCHA_MOUDULE_TIMER_FORMAT, phoneCode, phoneMouduleFlag);</span><br><span class="line">        <span class="comment">// 图形验证码超过60秒失效</span></span><br><span class="line">        Date captchaCodeValidPeriod = (Date) objectMap.get(capchaModuleTimer);</span><br><span class="line">        <span class="comment">// 获取请求参数的验证码</span></span><br><span class="line">        String requestCaptchaCode = RequestHelper.getString(CAPCHACODE, request);</span><br><span class="line">        <span class="comment">// 拿到map中的图形验证码</span></span><br><span class="line">        Object requestCode = objectMap.get(capchaModule);</span><br><span class="line">        <span class="comment">// 是否存在图形验证码的参数，同时比对是否和请求参数一致</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(requestCaptchaCode) || Objects.isNull(requestCode)) &#123;</span><br><span class="line">            result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_8.getCode());</span><br><span class="line">            result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_8.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果超时或者图形验证码不匹配，需要重新请求图形验证码</span></span><br><span class="line">        <span class="keyword">if</span> (!Objects.equals(requestCaptchaCode, requestCode.toString()) || (now.getTime() - captchaCodeValidPeriod.getTime() &gt; (CAPTCHA_REQUEST_TIME))) &#123;</span><br><span class="line">            result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_8.getCode());</span><br><span class="line">            result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_8.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 清空用户的图形验证码</span></span><br><span class="line">            objectMap.put(capchaModule, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查最后的访问时间是否在指定时间内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result    返回对象结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> now       当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkLastGetTime</span><span class="params">(Map&lt;String, Object&gt; result, Date now, Date lastSend)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 60 秒内不允许再次发送</span></span><br><span class="line">        <span class="keyword">if</span> ((now.getTime() - lastSend.getTime()) &lt;= PHONE_REQUEST_TIME) &#123;</span><br><span class="line">            result.put(<span class="string">"result"</span>, SmsRequestStatusEnum.RESULT_STATUS_7.getCode());</span><br><span class="line">            result.put(<span class="string">"msg"</span>, SmsRequestStatusEnum.RESULT_STATUS_7.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化全局上下文的Map容器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContext 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 初始化之后的map参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Map&lt;String, Object&gt;&gt; initServletContextMap(ServletContext servletContext) &#123;</span><br><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; attribute = (Map&lt;String, Map&lt;String, Object&gt;&gt;) servletContext.getAttribute(CONTEXT_MAP);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(attribute)) &#123;</span><br><span class="line">            attribute = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            servletContext.setAttribute(CONTEXT_MAP, attribute);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> attribute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查请求参数中是否存在业务模块配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">checkExistsAndGetModule</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String phoneMouduleFlag = RequestHelper.getString(PHONE_MOUDULE_FLAG, request);</span><br><span class="line">        String moduleNo = Setter.getString(String.format(SMS_MODULE_TEMPLATE, phoneMouduleFlag));</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(moduleNo)) &#123;</span><br><span class="line">            logger.info(<span class="string">"未找到对应的短信模块，请在xml配置短信模块名称，并在请求参数中加入 phoneModule: 对应模块名称之后再进行请求"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> phoneMouduleFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>使用手机号-业务模块。先获取是否存在对应的模块，然后进行校验</li>
<li>图形验证码的方法需要开启推行验证码的情况下，配合使用</li>
<li>HashMap的线程是不安全的，可以考虑使用ConcurrentHashMap</li>
</ol>
</blockquote>
<h3 id="图形验证码的配置："><a href="#图形验证码的配置：" class="headerlink" title="图形验证码的配置："></a>图形验证码的配置：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- =================================================================== --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 核心：图形验证码的通用配置 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- =================================================================== --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">captcha</span> <span class="attr">description</span>=<span class="string">"图形验证码的通用配置"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">enable</span> <span class="attr">description</span>=<span class="string">"是否开放图形验证码"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">length</span> <span class="attr">description</span>=<span class="string">"设置字符长度"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 验证码图片的宽度 默认 160 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">width</span> <span class="attr">description</span>=<span class="string">"设置动画宽度"</span> <span class="attr">value</span>=<span class="string">"160"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 验证码图片的高度 默认 50 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">height</span> <span class="attr">description</span>=<span class="string">"设置动画宽度"</span> <span class="attr">value</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">captcha</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="短信验证码的配置："><a href="#短信验证码的配置：" class="headerlink" title="短信验证码的配置："></a>短信验证码的配置：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- =================================================================== --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--系统发送短信配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- =================================================================== --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sms</span> <span class="attr">description</span>=<span class="string">"webService短信机服务配置"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">isopen</span> <span class="attr">description</span>=<span class="string">"是否开启短信发送"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 模块配置： 需要 name 模块名称，用于短信校验 和 value 表示每天最多的请求次数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 注册模块 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">registered</span> <span class="attr">description</span>=<span class="string">"注册模块"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 信箱请求短信验证码 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">mailbox</span> <span class="attr">description</span>=<span class="string">"信箱模块"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ip-size</span> <span class="attr">description</span>=<span class="string">"ip检测的限制次数"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">phoneMoudleCheck-enable</span> <span class="attr">description</span>=<span class="string">"手机号-业务模块校验是否开启"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ip-enable</span> <span class="attr">description</span>=<span class="string">"IP检测开关"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sms</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol>
<li>工具类基于配置进行开关配置</li>
<li>按照手机号+业务模块，划分同一手机号在不同的业务模块进行校验拦截</li>
<li>图形验证码可以配合短信接口使用，但是目前来看耦合还是有点严重</li>
</ol>
<h1 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h1><p>本人学艺不精，代码写的比较烂，这篇文章算是给自己留坑以后填。</p>
<p>如果看文章费劲头，专门另写一篇说说独立使用。</p>
<p>小小工具类，仅供参考</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>短信验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hibernate JSP 303 整合到SSM项目</title>
    <url>/2020/07/26/note5/</url>
    <content><![CDATA[<h1 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h1><ol>
<li>在项目中加入注解校验</li>
<li>可以控制错误的操作</li>
<li>对于参数错误进行全局日志记录，方便后续查看</li>
</ol>
<a id="more"></a>

<h1 id="使用Hibernate-JSP-303-整合到项目"><a href="#使用Hibernate-JSP-303-整合到项目" class="headerlink" title="使用Hibernate JSP 303 整合到项目"></a>使用Hibernate JSP 303 整合到项目</h1><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZDNmYmViNDZmYjlhMDZiMzE3YjNjNDg=" title="https://juejin.im/post/5d3fbeb46fb9a06b317b3c48">https://juejin.im/post/5d3fbeb46fb9a06b317b3c48<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80OTU4OTg0NQ==" title="https://zhuanlan.zhihu.com/p/49589845">https://zhuanlan.zhihu.com/p/49589845<i class="fa fa-external-link"></i></span></p>
<h2 id="ValidataUtils"><a href="#ValidataUtils" class="headerlink" title="ValidataUtils"></a>ValidataUtils</h2><p>此工具类配置可以大大减少配置<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hqemdnL3VzdWFsbHlfdXRpbC9ibG9iL21hc3Rlci9zcHJpbmctdmFsaWRhdGUtZGVtby92YWxpZGF0b3IvVmFsaWRhdG9yVXRpbHMuamF2YQ==" title="https://github.com/hjzgg/usually_util/blob/master/spring-validate-demo/validator/ValidatorUtils.java">https://github.com/hjzgg/usually_util/blob/master/spring-validate-demo/validator/ValidatorUtils.java<i class="fa fa-external-link"></i></span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Validator validator() &#123;</span><br><span class="line">    return new LocalValidatorFactoryBean();</span><br><span class="line">&#125;</span><br><span class="line">@Component</span><br><span class="line">public class ValidatorUtils implements ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        ValidatorUtils.validator &#x3D; (Validator) applicationContext.getBean(&quot;validator&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Validator validator;</span><br><span class="line"></span><br><span class="line">    public static Optional&lt;String&gt; validateResultProcess(Object obj)  &#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;Object&gt;&gt; results &#x3D; validator.validate(obj);</span><br><span class="line">        if (CollectionUtils.isEmpty(results)) &#123;</span><br><span class="line">            return Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line"></span><br><span class="line">        for (Iterator&lt;ConstraintViolation&lt;Object&gt;&gt; iterator &#x3D; results.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">            sb.append(iterator.next().getMessage());</span><br><span class="line">            if (iterator.hasNext()) &#123;</span><br><span class="line">                sb.append(&quot; ,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return Optional.of(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义校验器"><a href="#自定义校验器" class="headerlink" title="自定义校验器"></a>自定义校验器</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8xNzQwNjQuaHRt" title="https://www.jb51.net/article/174064.htm">https://www.jb51.net/article/174064.htm<i class="fa fa-external-link"></i></span></p>
<h2 id="自定义校验规则："><a href="#自定义校验规则：" class="headerlink" title="自定义校验规则："></a>自定义校验规则：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zb25nd2VsbDEwMjQuZ2l0aHViLmlvLzIwMTgvMDgvMDIvSlNSMzAzLw==" title="https://songwell1024.github.io/2018/08/02/JSR303/">https://songwell1024.github.io/2018/08/02/JSR303/<i class="fa fa-external-link"></i></span></p>
<h2 id="解决思路："><a href="#解决思路：" class="headerlink" title="解决思路："></a>解决思路：</h2><h3 id="第一种：使用-Valid-加上-BindResult"><a href="#第一种：使用-Valid-加上-BindResult" class="headerlink" title="第一种：使用@Valid 加上 BindResult"></a>第一种：使用<code>@Valid</code> 加上 <code>BindResult</code></h3><p>注意事项： <code>@valid</code> 加入的DTO后面必须跟上 <code>BindResult</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@valid&#96; 加入的DTO后面必须跟上 &#96;BindResult&#96;&#96;@valid&#96; 加入的DTO后面必须跟上 &#96;BindResult</span><br></pre></td></tr></table></figure>

<p>，如果不按此规则，将会由Spring的 <code>bindException</code> 直接抛出异常</p>
<h3 id="第二种：使用切面的方式统一处理异常"><a href="#第二种：使用切面的方式统一处理异常" class="headerlink" title="第二种：使用切面的方式统一处理异常"></a>第二种：使用切面的方式统一处理异常</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class ControllerValidatorInterceptor &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;**</span><br><span class="line">    * 设置 around 环绕通知切面</span><br><span class="line">    *&#x2F;</span><br><span class="line">    @Around(&quot;execution(* com.aerexu.web.*.*(..)) &amp;&amp; args(..,bindingResult)&quot;)</span><br><span class="line">    public Object doAround(ProceedingJoinPoint pjp, BindingResult bindingResult) throws Throwable &#123;</span><br><span class="line">        Object retVal;</span><br><span class="line">        if (bindingResult.hasErrors()) &#123;</span><br><span class="line">            retVal &#x3D; doErrorHandle();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            retVal &#x3D; pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        return retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实用bindResult-到最佳实践"><a href="#实用bindResult-到最佳实践" class="headerlink" title="实用bindResult 到最佳实践"></a>实用bindResult 到最佳实践</h2><p><span class="exturl" data-url="aHR0cHM6Ly92aW1za3kuY29tL3poLXR3L2V4YW1wbGVzL2RldGFpbC9qYXZhLWNsYXNzLW9yZy5zcHJpbmdmcmFtZXdvcmsudmFsaWRhdGlvbi5CaW5kaW5nUmVzdWx0Lmh0bWw=" title="https://vimsky.com/zh-tw/examples/detail/java-class-org.springframework.validation.BindingResult.html">https://vimsky.com/zh-tw/examples/detail/java-class-org.springframework.validation.BindingResult.html<i class="fa fa-external-link"></i></span></p>
<p>真的写的十分好，这里分享出来</p>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Null  被注释的元素必须为null</span><br><span class="line">@NotNull  被注释的元素不能为null</span><br><span class="line">@AssertTrue  被注释的元素必须为true</span><br><span class="line">@AssertFalse  被注释的元素必须为false</span><br><span class="line">@Min(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值</span><br><span class="line">@Max(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值</span><br><span class="line">@DecimalMin(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值</span><br><span class="line">@DecimalMax(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值</span><br><span class="line">@Size(max,min)  被注释的元素的大小必须在指定的范围内。</span><br><span class="line">@Digits(integer,fraction)  被注释的元素必须是一个数字，其值必须在可接受的范围内</span><br><span class="line">@Past  被注释的元素必须是一个过去的日期</span><br><span class="line">@Future  被注释的元素必须是一个将来的日期</span><br><span class="line">@Pattern(value) 被注释的元素必须符合指定的正则表达式。</span><br><span class="line">@Email 被注释的元素必须是电子邮件地址</span><br><span class="line">@Length 被注释的字符串的大小必须在指定的范围内</span><br><span class="line">@NotEmpty  被注释的字符串必须非空</span><br><span class="line">@Range  被注释的元素必须在合适的范围内</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>无</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Go语言+IDEA+mysql 逆向生成dao 和 domain 的方法</title>
    <url>/2020/10/27/goidea/</url>
    <content><![CDATA[<h1 id="参考地址："><a href="#参考地址：" class="headerlink" title="参考地址："></a>参考地址：</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ2FvbWFuaXRvL3AvMTA2ODIyNjAuaHRtbA==" title="https://www.cnblogs.com/gaomanito/p/10682260.html">https://www.cnblogs.com/gaomanito/p/10682260.html<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>

<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="第一步：安装idea-自行百度"><a href="#第一步：安装idea-自行百度" class="headerlink" title="第一步：安装idea:自行百度"></a>第一步：安装idea:自行百度</h2><h2 id="第二步：Idea配置mysql-连接"><a href="#第二步：Idea配置mysql-连接" class="headerlink" title="第二步：Idea配置mysql 连接"></a>第二步：Idea配置mysql 连接</h2><ul>
<li>View -&gt; Tool Windows -&gt; DataSource 出现数据连接页面</li>
<li>点击 <strong>+</strong> 号，出现数据库连接设置，<ul>
<li>name: 连接名称</li>
<li>comments: 备注</li>
<li>host:本地或者内网ip</li>
<li>user:用户名</li>
<li>password：密码</li>
<li>Database：连接数据库名称</li>
<li>url: jdbc连接<ul>
<li>注意此处如果是mysql 5.5 以上 的版本需要加入如下参数</li>
<li><strong>serverTimezone=UTC</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第三步：使用groovy逆向生成model-dao-daoxml-三种类型的文件"><a href="#第三步：使用groovy逆向生成model-dao-daoxml-三种类型的文件" class="headerlink" title="第三步：使用groovy逆向生成model, dao, daoxml 三种类型的文件"></a>第三步：使用groovy逆向生成model, dao, daoxml 三种类型的文件</h2><ul>
<li>右击连接：选中<code>Scripted Extendsions</code> </li>
<li>选择<code>Go to Scripts Directory</code> 调转到go 语言的模板地址</li>
<li>如果需要扩展则只需要在该文件夹内加入对应的模板即可</li>
</ul>
<h2 id="第四步：几个默认的模板"><a href="#第四步：几个默认的模板" class="headerlink" title="第四步：几个默认的模板"></a>第四步：几个默认的模板</h2><h3 id="Generate-MyPOJOs-groovy文件（生成实体类）："><a href="#Generate-MyPOJOs-groovy文件（生成实体类）：" class="headerlink" title="Generate MyPOJOs.groovy文件（生成实体类）："></a>Generate MyPOJOs.groovy文件（生成实体类）：</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.intellij.database.model.DasTable</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.model.ObjectKind</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.Case</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.DasUtil</span><br><span class="line"><span class="keyword">import</span> java.io.*</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Available context bindings:</span></span><br><span class="line"><span class="comment"> *   SELECTION   Iterable&lt;DasObject&gt;</span></span><br><span class="line"><span class="comment"> *   PROJECT     project</span></span><br><span class="line"><span class="comment"> *   FILES       files helper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">packageName = <span class="string">""</span></span><br><span class="line">typeMapping = [</span><br><span class="line">        (~/(?i)tinyint|smallint|mediumint/)      : <span class="string">"Integer"</span>,</span><br><span class="line">        (~/(?i)<span class="keyword">int</span>/)                             : <span class="string">"Long"</span>,</span><br><span class="line">        (~/(?i)<span class="keyword">bool</span>|bit/)                        : <span class="string">"Boolean"</span>,</span><br><span class="line">        (~/(?i)float|double|decimal|<span class="built_in">real</span>/)       : <span class="string">"Double"</span>,</span><br><span class="line">        (~/(?i)datetime|timestamp|date|time/)    : <span class="string">"Date"</span>,</span><br><span class="line">        (~/(?i)blob|binary|bfile|clob|raw|image/): <span class="string">"InputStream"</span>,</span><br><span class="line">        (~/(?i)/)                                : <span class="string">"String"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FILES.chooseDirectoryAndSave(<span class="string">"Choose directory"</span>, <span class="string">"Choose where to store generated files"</span>) &#123; dir -&gt;</span><br><span class="line">    SELECTION.filter &#123; it instanceof DasTable &amp;&amp; it.getKind() == ObjectKind.TABLE &#125;.each &#123; generate(it, dir) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(table, dir) &#123;</span><br><span class="line">    <span class="comment">//def className = javaClassName(table.getName(), true)</span></span><br><span class="line">    def className = javaName(table.getName(), <span class="literal">true</span>)</span><br><span class="line">    def fields = calcFields(table)</span><br><span class="line">    packageName = getPackageName(dir)</span><br><span class="line">    PrintWriter printWriter = <span class="built_in">new</span> PrintWriter(<span class="built_in">new</span> OutputStreamWriter(<span class="built_in">new</span> FileOutputStream(<span class="built_in">new</span> File(dir, className + <span class="string">".java"</span>)), <span class="string">"UTF-8"</span>))</span><br><span class="line">    printWriter.withPrintWriter &#123;out -&gt; generate(out, className, fields,table)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    new File(dir, className + ".java").withPrintWriter &#123; out -&gt; generate(out, className, fields,table) &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取包所在文件夹路径</span></span><br><span class="line">def getPackageName(dir) &#123;</span><br><span class="line">    <span class="keyword">return</span> dir.toString().replaceAll(<span class="string">"\\\\"</span>, <span class="string">"."</span>).replaceAll(<span class="string">"/"</span>, <span class="string">"."</span>).replaceAll(<span class="string">"^.*src(\\.main\\.java\\.)?"</span>, <span class="string">""</span>) + <span class="string">";"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(out, className, fields,table) &#123;</span><br><span class="line">    def tableName = table.getName()</span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"package $packageName"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import javax.persistence.Column;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import javax.persistence.Entity;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import javax.persistence.Table;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import java.io.Serializable;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import lombok.Data;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import lombok.AllArgsConstructor;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import lombok.Builder;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import lombok.NoArgsConstructor;"</span></span><br><span class="line"></span><br><span class="line">    Set types = <span class="built_in">new</span> HashSet()</span><br><span class="line"></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        types.add(it.<span class="keyword">type</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (types.contains(<span class="string">"Date"</span>)) &#123;</span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"import java.util.Date;"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (types.contains(<span class="string">"InputStream"</span>)) &#123;</span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"import java.io.InputStream;"</span></span><br><span class="line">    &#125;</span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"/**\n"</span> +</span><br><span class="line">            <span class="string">" * @Description  \n"</span> +</span><br><span class="line">            <span class="string">" * @Author  GX\n"</span> +</span><br><span class="line">            <span class="string">" * @Date "</span>+ <span class="built_in">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(<span class="built_in">new</span> Date()) + <span class="string">" \n"</span> +</span><br><span class="line">            <span class="string">" */"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Data"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Entity"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@AllArgsConstructor"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Builder"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@NoArgsConstructor"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Table ( name =\""</span>+table.getName() +<span class="string">"\" )"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"public class $className  implements Serializable &#123;"</span></span><br><span class="line">    out.<span class="built_in">println</span> genSerialID()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断自增</span></span><br><span class="line">    <span class="keyword">if</span> ((tableName + <span class="string">"_id"</span>).equalsIgnoreCase(fields[<span class="number">0</span>].colum) || <span class="string">"id"</span>.equalsIgnoreCase(fields[<span class="number">0</span>].colum)) &#123;</span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"\t@Id"</span></span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"\t@GeneratedValue(generator = \"idGenerator\")"</span></span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"\t@GenericGenerator(name = \"idGenerator\", strategy = ChiticCoreConstant.ID_GENERATOR_COMMON)"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">        <span class="comment">// 输出注释</span></span><br><span class="line">        <span class="keyword">if</span> (isNotEmpty(it.commoent)) &#123;</span><br><span class="line">            out.<span class="built_in">println</span> <span class="string">"\t/**"</span></span><br><span class="line">            out.<span class="built_in">println</span> <span class="string">"\t * $&#123;it.commoent.toString()&#125;"</span></span><br><span class="line">            out.<span class="built_in">println</span> <span class="string">"\t */"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (it.annos != <span class="string">""</span>) out.<span class="built_in">println</span> <span class="string">"   $&#123;it.annos.replace("</span>[@Id]<span class="string">", "</span><span class="string">")&#125;"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出成员变量</span></span><br><span class="line">        out.<span class="built_in">println</span> <span class="string">"\tprivate $&#123;it.type&#125; $&#123;it.name&#125;;"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出get/set方法</span></span><br><span class="line"><span class="comment">//    fields.each() &#123;</span></span><br><span class="line"><span class="comment">//        out.println ""</span></span><br><span class="line"><span class="comment">//        out.println "\tpublic $&#123;it.type&#125; get$&#123;it.name.capitalize()&#125;() &#123;"</span></span><br><span class="line"><span class="comment">//        out.println "\t\treturn this.$&#123;it.name&#125;;"</span></span><br><span class="line"><span class="comment">//        out.println "\t&#125;"</span></span><br><span class="line"><span class="comment">//        out.println ""</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        out.println "\tpublic void set$&#123;it.name.capitalize()&#125;($&#123;it.type&#125; $&#123;it.name&#125;) &#123;"</span></span><br><span class="line"><span class="comment">//        out.println "\t\tthis.$&#123;it.name&#125; = $&#123;it.name&#125;;"</span></span><br><span class="line"><span class="comment">//        out.println "\t&#125;"</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def calcFields(table) &#123;</span><br><span class="line">    DasUtil.getColumns(table).reduce([]) &#123; fields, col -&gt;</span><br><span class="line">        def spec = Case.LOWER.apply(col.getDataType().getSpecification())</span><br><span class="line"></span><br><span class="line">        def typeStr = typeMapping.find &#123; p, t -&gt; p.matcher(spec).find() &#125;.value</span><br><span class="line">        def comm =[</span><br><span class="line">                colName : col.getName(),</span><br><span class="line">                name :  javaName(col.getName(), <span class="literal">false</span>),</span><br><span class="line">                <span class="keyword">type</span> : typeStr,</span><br><span class="line">                commoent: col.getComment(),</span><br><span class="line">                annos: <span class="string">"\t@Column(name = \""</span>+col.getName()+<span class="string">"\" )"</span>]</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"id"</span>.equals(Case.LOWER.apply(col.getName())))</span><br><span class="line">            comm.annos +=[<span class="string">"@Id"</span>]</span><br><span class="line">        fields += [comm]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理类名（这里是因为我的表都是以t_命名的，所以需要处理去掉生成类名时的开头的T，</span></span><br><span class="line"><span class="comment">// 如果你不需要那么请查找用到了 javaClassName这个方法的地方修改为 javaName 即可）</span></span><br><span class="line">def javaClassName(str, capitalize) &#123;</span><br><span class="line">    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/, <span class="string">"_"</span>)</span><br><span class="line">    <span class="comment">// 去除开头的T  http://developer.51cto.com/art/200906/129168.htm</span></span><br><span class="line">    s = s[<span class="number">1.</span>.s.size() - <span class="number">1</span>]</span><br><span class="line">    capitalize || s.length() == <span class="number">1</span>? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def javaName(str, capitalize) &#123;</span><br><span class="line"><span class="comment">//    def s = str.split(/(?&lt;=[^\p&#123;IsLetter&#125;])/).collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span></span><br><span class="line"><span class="comment">//            .join("").replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;]/, "_")</span></span><br><span class="line"><span class="comment">//    capitalize || s.length() == 1? s : Case.LOWER.apply(s[0]) + s[1..-1]</span></span><br><span class="line">    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/, <span class="string">"_"</span>)</span><br><span class="line">    capitalize || s.length() == <span class="number">1</span>? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def isNotEmpty(content) &#123;</span><br><span class="line">    <span class="keyword">return</span> content != null &amp;&amp; content.toString().trim().length() &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static String changeStyle(String str, boolean toCamel)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!str || str.size() &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(toCamel)&#123;</span><br><span class="line">        String r = str.toLowerCase().split(<span class="string">'_'</span>).collect&#123;cc -&gt; Case.LOWER.apply(cc).capitalize()&#125;.join(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span> r[<span class="number">0</span>].toLowerCase() + r[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        str = str[<span class="number">0</span>].toLowerCase() + str[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> str.collect&#123;cc -&gt; ((char)cc).isUpperCase() ? <span class="string">'_'</span> + cc.toLowerCase() : cc&#125;.join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static String genSerialID()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\tprivate static final long serialVersionUID =  "</span>+Math.abs(<span class="built_in">new</span> Random().nextLong())+<span class="string">"L;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Generate-Dao-groovy文件（生成dao）："><a href="#Generate-Dao-groovy文件（生成dao）：" class="headerlink" title="Generate Dao.groovy文件（生成dao）："></a>Generate Dao.groovy文件（生成dao）：</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.intellij.database.model.DasTable</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.Case</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.DasUtil</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Available context bindings:</span></span><br><span class="line"><span class="comment"> *   SELECTION   Iterable&lt;DasObject&gt;</span></span><br><span class="line"><span class="comment"> *   PROJECT     project</span></span><br><span class="line"><span class="comment"> *   FILES       files helper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">packageName = <span class="string">"**;"</span> <span class="comment">// 需手动配置 生成的 dao 所在包位置</span></span><br><span class="line"></span><br><span class="line">FILES.chooseDirectoryAndSave(<span class="string">"Choose directory"</span>, <span class="string">"Choose where to store generated files"</span>) &#123; dir -&gt;</span><br><span class="line">    SELECTION.filter &#123; it instanceof DasTable &#125;.each &#123; generate(it, dir) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(table, dir) &#123;</span><br><span class="line">    def baseName = javaName(table.getName(), <span class="literal">true</span>)</span><br><span class="line">    <span class="built_in">new</span> File(dir, baseName + <span class="string">"Mapper.java"</span>).withPrintWriter &#123; out -&gt; generateInterface(out, baseName) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generateInterface(out, baseName) &#123;</span><br><span class="line">    def date = <span class="built_in">new</span> Date().format(<span class="string">"yyyy/MM/dd"</span>)</span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"package $packageName"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import cn.xx.entity.$&#123;baseName&#125;Entity;"</span> <span class="comment">// 需手动配置</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"import org.springframework.stereotype.Repository;"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"/**"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">" * Created on $date."</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">" *"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">" * @author GX"</span> <span class="comment">// 可自定义</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">" */"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"@Repository"</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"public interface $&#123;baseName&#125;Dao extends BaseDao&lt;$&#123;baseName&#125;Entity&gt; &#123;"</span> <span class="comment">// 可自定义</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">""</span></span><br><span class="line">    out.<span class="built_in">println</span> <span class="string">"&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def javaName(str, capitalize) &#123;</span><br><span class="line">    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/, <span class="string">"_"</span>)</span><br><span class="line">    name = capitalize || s.length() == <span class="number">1</span> ? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Generate-DaoXml-groovy文件（生成dao-xml）："><a href="#Generate-DaoXml-groovy文件（生成dao-xml）：" class="headerlink" title="Generate DaoXml.groovy文件（生成dao.xml）："></a>Generate DaoXml.groovy文件（生成dao.xml）：</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.intellij.database.model.DasTable</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.Case</span><br><span class="line"><span class="keyword">import</span> com.intellij.database.util.DasUtil</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Available context bindings:</span></span><br><span class="line"><span class="comment"> *   SELECTION   Iterable&lt;DasObject&gt;</span></span><br><span class="line"><span class="comment"> *   PROJECT     project</span></span><br><span class="line"><span class="comment"> *   FILES       files helper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// entity(dto)、mapper(dao) 与数据库表的对应关系在这里手动指明,idea Database 窗口里只能选下列配置了的 mapper</span></span><br><span class="line"><span class="comment">// tableName(key) : [mapper(dao),entity(dto)]</span></span><br><span class="line">typeMapping = [</span><br><span class="line">        (~/(?i)<span class="keyword">int</span>/)                      : <span class="string">"INTEGER"</span>,</span><br><span class="line">        (~/(?i)float|double|decimal|<span class="built_in">real</span>/): <span class="string">"DOUBLE"</span>,</span><br><span class="line">        (~/(?i)datetime|timestamp/)       : <span class="string">"TIMESTAMP"</span>,</span><br><span class="line">        (~/(?i)date/)                     : <span class="string">"TIMESTAMP"</span>,</span><br><span class="line">        (~/(?i)time/)                     : <span class="string">"TIMESTAMP"</span>,</span><br><span class="line">        (~/(?i)/)                         : <span class="string">"VARCHAR"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">basePackage = <span class="string">"com.chitic.bank.mapping"</span> <span class="comment">// 包名需手动填写</span></span><br><span class="line"></span><br><span class="line">FILES.chooseDirectoryAndSave(<span class="string">"Choose directory"</span>, <span class="string">"Choose where to store generated files"</span>) &#123; dir -&gt;</span><br><span class="line">    SELECTION.filter &#123; it instanceof DasTable &#125;.each &#123; generate(it, dir) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(table, dir) &#123;</span><br><span class="line">    def baseName = mapperName(table.getName(), <span class="literal">true</span>)</span><br><span class="line">    def fields = calcFields(table)</span><br><span class="line">    <span class="built_in">new</span> File(dir, baseName + <span class="string">"Mapper.xml"</span>).withPrintWriter &#123; out -&gt; generate(table, out, baseName, fields) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def generate(table, out, baseName, fields) &#123;</span><br><span class="line">    def baseResultMap = <span class="string">'BaseResultMap'</span></span><br><span class="line">    def base_Column_List = <span class="string">'Base_Column_List'</span></span><br><span class="line">    def date = <span class="built_in">new</span> Date().format(<span class="string">"yyyy/MM/dd"</span>)</span><br><span class="line">    def tableName = table.getName()</span><br><span class="line"></span><br><span class="line">    def dao = basePackage + <span class="string">".dao.$&#123;baseName&#125;Mapper"</span></span><br><span class="line">    def to = basePackage + <span class="string">".to.$&#123;baseName&#125;TO"</span></span><br><span class="line"></span><br><span class="line">    out.<span class="built_in">println</span> mappingsStart(dao)</span><br><span class="line">    out.<span class="built_in">println</span> resultMap(baseResultMap, to, fields)</span><br><span class="line">    out.<span class="built_in">println</span> sql(fields, base_Column_List)</span><br><span class="line">    out.<span class="built_in">println</span> selectById(tableName, fields, baseResultMap, base_Column_List)</span><br><span class="line">    out.<span class="built_in">println</span> deleteById(tableName, fields)</span><br><span class="line">    out.<span class="built_in">println</span> <span class="built_in">delete</span>(tableName, fields, to)</span><br><span class="line">    out.<span class="built_in">println</span> insert(tableName, fields, to)</span><br><span class="line">    out.<span class="built_in">println</span> update(tableName, fields, to)</span><br><span class="line">    out.<span class="built_in">println</span> selectList(tableName, fields, to, base_Column_List, baseResultMap)</span><br><span class="line">    out.<span class="built_in">println</span> mappingsEnd()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static def resultMap(baseResultMap, to, fields) &#123;</span><br><span class="line"></span><br><span class="line">    def inner = <span class="string">''</span></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        inner += <span class="string">'\t\t&lt;result column="'</span> + it.sqlFieldName + <span class="string">'" jdbcType="'</span> + it.<span class="keyword">type</span> + <span class="string">'" property="'</span> + it.name + <span class="string">'"/&gt;\n'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'\t&lt;resultMap id="'</span><span class="string">''</span> + baseResultMap + <span class="string">''</span><span class="string">'" type="'</span><span class="string">''</span> + to + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        &lt;id column="id" jdbcType="INTEGER" property="id"/&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span> + inner + <span class="string">''</span><span class="string">'\t&lt;/resultMap&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def calcFields(table) &#123;</span><br><span class="line">    DasUtil.getColumns(table).reduce([]) &#123; fields, col -&gt;</span><br><span class="line">        def spec = Case.LOWER.apply(col.getDataType().getSpecification())</span><br><span class="line">        def typeStr = typeMapping.find &#123; p, t -&gt; p.matcher(spec).find() &#125;.value</span><br><span class="line">        fields += [[</span><br><span class="line">                           comment     : col.getComment(),</span><br><span class="line">                           name        : mapperName(col.getName(), <span class="literal">false</span>),</span><br><span class="line">                           sqlFieldName: col.getName(),</span><br><span class="line">                           <span class="keyword">type</span>        : typeStr,</span><br><span class="line">                           annos       : <span class="string">""</span>]]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def mapperName(str, capitalize) &#123;</span><br><span class="line">    def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)</span><br><span class="line">            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;</span><br><span class="line">            .join(<span class="string">""</span>)</span><br><span class="line">            .replaceAll(/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/, <span class="string">"_"</span>)</span><br><span class="line">    name = capitalize || s.length() == <span class="number">1</span> ? s : Case.LOWER.apply(s[<span class="number">0</span>]) + s[<span class="number">1.</span>.<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ mappings</span></span><br><span class="line">static def mappingsStart(mapper) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="string">&lt;mapper namespace="'</span><span class="string">''</span> + mapper + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ mappings</span></span><br><span class="line">static def mappingsEnd() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'&lt;/mapper&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ selectById</span></span><br><span class="line">static def selectById(tableName, fields, baseResultMap, base_Column_List) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;select id="selectById" parameterType="java.lang.Integer" resultMap="'</span><span class="string">''</span> + baseResultMap + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        select</span></span><br><span class="line"><span class="string">        &lt;include refid="'</span><span class="string">''</span> + base_Column_List + <span class="string">''</span><span class="string">'"/&gt;</span></span><br><span class="line"><span class="string">        from '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        where id = #&#123;id&#125;</span></span><br><span class="line"><span class="string">    &lt;/select&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ insert</span></span><br><span class="line">static def insert(tableName, fields, parameterType) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;insert id="insert" parameterType="'</span><span class="string">''</span> + parameterType + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        insert into '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;trim prefix="(" suffix=")" suffixOverrides=","&gt;</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span> + testNotNullStr(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;/trim&gt;</span></span><br><span class="line"><span class="string">        &lt;trim prefix="values (" suffix=")" suffixOverrides=","&gt;</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span> + testNotNullStrSet(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;/trim&gt;</span></span><br><span class="line"><span class="string">    &lt;/insert&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ update</span></span><br><span class="line">static def update(tableName, fields, parameterType) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;update id="update" parameterType="'</span><span class="string">''</span> + parameterType + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        update '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;set&gt;</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span> + testNotNullStrWhere(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;/set&gt;</span></span><br><span class="line"><span class="string">        where id = #&#123;id&#125;</span></span><br><span class="line"><span class="string">    &lt;/update&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ deleteById</span></span><br><span class="line">static def deleteById(tableName, fields) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;delete id="deleteById" parameterType="java.lang.Integer"&gt;</span></span><br><span class="line"><span class="string">        delete</span></span><br><span class="line"><span class="string">        from '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        where id = #&#123;id&#125;</span></span><br><span class="line"><span class="string">    &lt;/delete&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ delete</span></span><br><span class="line">static def <span class="built_in">delete</span>(tableName, fields, parameterType) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;delete id="delete" parameterType="'</span><span class="string">''</span> + parameterType + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        delete from '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        where 1 = 1</span></span><br><span class="line"><span class="string">        '</span><span class="string">''</span> + testNotNullStrWhere(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;/delete&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ selectList</span></span><br><span class="line">static def selectList(tableName, fields, parameterType, base_Column_List, baseResultMap) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    &lt;select id="selectList" parameterType="'</span><span class="string">''</span> + parameterType + <span class="string">''</span><span class="string">'" resultMap="'</span><span class="string">''</span> + baseResultMap + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        select</span></span><br><span class="line"><span class="string">        &lt;include refid="'</span><span class="string">''</span> + base_Column_List + <span class="string">''</span><span class="string">'"/&gt;</span></span><br><span class="line"><span class="string">                from '</span><span class="string">''</span> + tableName + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        where 1 = 1</span></span><br><span class="line"><span class="string">        '</span><span class="string">''</span> + testNotNullStrWhere(fields) + <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        order by id desc</span></span><br><span class="line"><span class="string">    &lt;/select&gt;'</span><span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------ sql</span></span><br><span class="line">static def sql(fields, base_Column_List) &#123;</span><br><span class="line">    def str = <span class="string">''</span><span class="string">'\t&lt;sql id="'</span><span class="string">''</span> + base_Column_List + <span class="string">''</span><span class="string">'"&gt;</span></span><br><span class="line"><span class="string">        @inner@</span></span><br><span class="line"><span class="string">    &lt;/sql&gt; '</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line">    def inner = <span class="string">''</span></span><br><span class="line">    fields.each() &#123;</span><br><span class="line">        inner += (<span class="string">'\t\t'</span> + it.sqlFieldName + <span class="string">',\n'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="string">"@inner@"</span>, inner.substring(<span class="number">0</span>, inner.length() - <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static def testNotNullStrWhere(fields) &#123;</span><br><span class="line">    def inner = <span class="string">''</span></span><br><span class="line">    fields.each &#123;</span><br><span class="line">        inner += <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;if test="'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">' != null"&gt;</span></span><br><span class="line"><span class="string">            and '</span><span class="string">''</span> + it.sqlFieldName + <span class="string">''</span><span class="string">' = #&#123;'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">'&#125;</span></span><br><span class="line"><span class="string">        &lt;/if&gt;\n'</span><span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static def testNotNullStrSet(fields) &#123;</span><br><span class="line">    def inner = <span class="string">''</span></span><br><span class="line">    fields.each &#123;</span><br><span class="line">        inner += <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;if test="'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">' != null"&gt;</span></span><br><span class="line"><span class="string">            #&#123;'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">'&#125;,</span></span><br><span class="line"><span class="string">        &lt;/if&gt;\n'</span><span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static def testNotNullStr(fields) &#123;</span><br><span class="line">    def inner1 = <span class="string">''</span></span><br><span class="line">    fields.each &#123;</span><br><span class="line">        inner1 += <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &lt;if test = "'</span><span class="string">''</span> + it.name + <span class="string">''</span><span class="string">' != null" &gt;</span></span><br><span class="line"><span class="string">        \t'</span><span class="string">''</span> + it.sqlFieldName + <span class="string">''</span><span class="string">',</span></span><br><span class="line"><span class="string">        &lt;/if&gt;\n'</span><span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>如何访问jar包下面的资源文件</title>
    <url>/2020/10/22/jar/</url>
    <content><![CDATA[<h1 id="如何访问jar包下面的资源文件"><a href="#如何访问jar包下面的资源文件" class="headerlink" title="如何访问jar包下面的资源文件"></a>如何访问jar包下面的资源文件</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有些时候，我们需要通用一些功能页面，比如maven中公用的core的jar包内需要增加一些通用的功能，现在总结一下自己从中学到的一些东西</p>
<a id="more"></a>

<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3czMDI5NzQyMTUvYXJ0aWNsZS9kZXRhaWxzLzQ5ODE2Mzg1" title="https://blog.csdn.net/w302974215/article/details/49816385">https://blog.csdn.net/w302974215/article/details/49816385<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC96aGFveXVuMTk4NS9ibG9nLzQ3OTIzOD9mcm9tPW1haWwtbm90aWZ5" title="https://my.oschina.net/zhaoyun1985/blog/479238?from=mail-notify">https://my.oschina.net/zhaoyun1985/blog/479238?from=mail-notify<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iYnMuY3Nkbi5uZXQvdG9waWNzLzM4MDIyMzUzOS8=" title="https://bbs.csdn.net/topics/380223539/">https://bbs.csdn.net/topics/380223539/<i class="fa fa-external-link"></i></span></p>
<h2 id="起步："><a href="#起步：" class="headerlink" title="起步："></a>起步：</h2><ul>
<li>创建一个springboot 项目</li>
<li>在springboot resources 下面创建一个 META-INF 文件</li>
<li>再创建一个resources 的内容，可以同步到reosurces下面</li>
</ul>
<h3 id="目录工程结构"><a href="#目录工程结构" class="headerlink" title="目录工程结构"></a>目录工程结构</h3><ul>
<li>resources<ul>
<li>META-INF<ul>
<li>resources<ul>
<li>WEB-INF</li>
<li>js</li>
</ul>
</li>
<li>jsp</li>
<li>jsp</li>
<li>jsp</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>当文件被打包为jar的之后</p>
<p>将会可以依照上下文进行访问</p>
<blockquote>
<p>注意最终jar包是生成在 <code>lib</code>包下面</p>
</blockquote>
<h2 id="Spring-Boot-默认到访问规则"><a href="#Spring-Boot-默认到访问规则" class="headerlink" title="Spring Boot 默认到访问规则"></a>Spring Boot 默认到访问规则</h2><ul>
<li>“classpath:/META-INF/resources/“, </li>
<li>“classpath:/resources/“,</li>
<li>“classpath:/static/“, </li>
<li>“classpath:/public/“ </li>
</ul>
<p>在静态资源文件夹中有几个文件名是默认的。<br>index：欢迎页<br>favicon.ico：顶端图标文件<br>只要将相关的文件放入目录中，我们输入路径后即可访问。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>jar</tag>
      </tags>
  </entry>
  <entry>
    <title>如何导出表结构（navicat）</title>
    <url>/2020/08/29/note18/</url>
    <content><![CDATA[<h1 id="如何导出表结构（navicat）"><a href="#如何导出表结构（navicat）" class="headerlink" title="如何导出表结构（navicat）"></a>如何导出表结构（navicat）</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>我需要将表复制到 markdow 或者 word里面的时候</p>
<a id="more"></a>

<h2 id="具体使用方法："><a href="#具体使用方法：" class="headerlink" title="具体使用方法："></a>具体使用方法：</h2><ol>
<li>复制sql 复制到 navicat的查询里面</li>
<li>需要设置数据库的名称：<code>table_schema</code></li>
<li>需要设置导出的表名：<code>table_name</code></li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	COLUMN_NAME 列名,</span><br><span class="line">	COLUMN_TYPE 数据类型,</span><br><span class="line">	DATA_TYPE 字段类型,</span><br><span class="line">	CHARACTER_MAXIMUM_LENGTH 长度,</span><br><span class="line">	IS_NULLABLE 是否为空,</span><br><span class="line">	COLUMN_DEFAULT 默认值,</span><br><span class="line">	COLUMN_COMMENT 备注 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	INFORMATION_SCHEMA.COLUMNS </span><br><span class="line">	<span class="keyword">WHERE</span><span class="comment">-- developerclub为数据库名称，到时候只需要修改成你要导出表结构的数据库即可</span></span><br><span class="line">	table_schema = <span class="string">'galaxy_education'</span> </span><br><span class="line">	<span class="keyword">AND</span> <span class="comment">-- article为表名，到时候换成你要导出的表的名称</span></span><br><span class="line"><span class="comment">-- 如果不写的话，默认会查询出所有表中的数据，这样可能就分不清到底哪些字段是哪张表中的了，所以还是建议写上要导出的名名称</span></span><br><span class="line">	table_name = <span class="string">'表名称'</span></span><br></pre></td></tr></table></figure>

<p>table_name = ‘表名称’</p>
<h1 id="怎么样导出数据库所有的表结构和详细信息呢"><a href="#怎么样导出数据库所有的表结构和详细信息呢" class="headerlink" title="怎么样导出数据库所有的表结构和详细信息呢?"></a>怎么样导出数据库所有的表结构和详细信息呢?</h1><p>博客地址：<br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NhaTQ1NDY5MjU5MC9hcnRpY2xlL2RldGFpbHMvODI3OTk2Mzg=" title="https://blog.csdn.net/cai454692590/article/details/82799638">https://blog.csdn.net/cai454692590/article/details/82799638<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTGVlWW9uZ3plL2FyY2hpdmUvMjAxMi8wNy8xOS8yNTk5MzM4Lmh0bWw=" title="https://www.cnblogs.com/LeeYongze/archive/2012/07/19/2599338.html">https://www.cnblogs.com/LeeYongze/archive/2012/07/19/2599338.html<i class="fa fa-external-link"></i></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">     表名       = <span class="keyword">Case</span> <span class="keyword">When</span> A.colorder=<span class="number">1</span> <span class="keyword">Then</span> D.name <span class="keyword">Else</span> <span class="string">''</span> <span class="keyword">End</span>,</span><br><span class="line">     表说明     = <span class="keyword">Case</span> <span class="keyword">When</span> A.colorder=<span class="number">1</span> <span class="keyword">Then</span> <span class="keyword">isnull</span>(F.value,<span class="string">''</span>) <span class="keyword">Else</span> <span class="string">''</span> <span class="keyword">End</span>,</span><br><span class="line">     字段序号   = A.colorder,</span><br><span class="line">     字段名     = A.name,</span><br><span class="line">     字段说明   = <span class="keyword">isnull</span>(G.[<span class="keyword">value</span>],<span class="string">''</span>),</span><br><span class="line">     标识       = <span class="keyword">Case</span> <span class="keyword">When</span> COLUMNPROPERTY( A.id,A.name,<span class="string">'IsIdentity'</span>)=<span class="number">1</span> <span class="keyword">Then</span> <span class="string">'√'</span><span class="keyword">Else</span> <span class="string">''</span> <span class="keyword">End</span>,</span><br><span class="line">     主键       = <span class="keyword">Case</span> <span class="keyword">When</span> <span class="keyword">exists</span>(<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> sysobjects <span class="keyword">Where</span> xtype=<span class="string">'PK'</span> <span class="keyword">and</span> parent_obj=A.id <span class="keyword">and</span> <span class="keyword">name</span> <span class="keyword">in</span> (</span><br><span class="line">                      <span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> sysindexes <span class="keyword">WHERE</span> indid <span class="keyword">in</span>( <span class="keyword">SELECT</span> indid <span class="keyword">FROM</span> sysindexkeys <span class="keyword">WHERE</span> <span class="keyword">id</span> = A.id <span class="keyword">AND</span> colid=A.colid))) <span class="keyword">then</span> <span class="string">'√'</span> <span class="keyword">else</span> <span class="string">''</span> <span class="keyword">end</span>,</span><br><span class="line">     类型       = B.name,</span><br><span class="line">     占用字节数 = A.Length,</span><br><span class="line">     长度       = COLUMNPROPERTY(A.id,A.name,<span class="string">'PRECISION'</span>),</span><br><span class="line">     小数位数   = <span class="keyword">isnull</span>(COLUMNPROPERTY(A.id,A.name,<span class="string">'Scale'</span>),<span class="number">0</span>),</span><br><span class="line">     允许空     = <span class="keyword">Case</span> <span class="keyword">When</span> A.isnullable=<span class="number">1</span> <span class="keyword">Then</span> <span class="string">'√'</span><span class="keyword">Else</span> <span class="string">''</span> <span class="keyword">End</span>,</span><br><span class="line">     默认值     = <span class="keyword">isnull</span>(E.Text,<span class="string">''</span>)</span><br><span class="line"> <span class="keyword">FROM</span></span><br><span class="line">     syscolumns A</span><br><span class="line"> <span class="keyword">Left</span> <span class="keyword">Join</span></span><br><span class="line">     systypes B</span><br><span class="line"> <span class="keyword">On</span></span><br><span class="line">     A.xusertype=B.xusertype</span><br><span class="line"> <span class="keyword">Inner</span> <span class="keyword">Join</span></span><br><span class="line">     sysobjects D</span><br><span class="line"> <span class="keyword">On</span></span><br><span class="line">     A.id=D.id  <span class="keyword">and</span> D.xtype=<span class="string">'U'</span> <span class="keyword">and</span>  D.name&lt;&gt;<span class="string">'dtproperties'</span></span><br><span class="line"> <span class="keyword">Left</span> <span class="keyword">Join</span></span><br><span class="line">     syscomments E</span><br><span class="line"> <span class="keyword">on</span></span><br><span class="line">     A.cdefault=E.id</span><br><span class="line"> <span class="keyword">Left</span> <span class="keyword">Join</span></span><br><span class="line"> sys.extended_properties  G</span><br><span class="line"> <span class="keyword">on</span></span><br><span class="line">     A.id=G.major_id <span class="keyword">and</span> A.colid=G.minor_id</span><br><span class="line"> <span class="keyword">Left</span> <span class="keyword">Join</span></span><br><span class="line"></span><br><span class="line"> sys.extended_properties F</span><br><span class="line"> <span class="keyword">On</span></span><br><span class="line">     D.id=F.major_id <span class="keyword">and</span> F.minor_id=<span class="number">0</span></span><br><span class="line">     <span class="comment">--where d.name='OrderInfo'    --如果只查询指定表,加上此条件</span></span><br><span class="line"> <span class="keyword">Order</span> <span class="keyword">By</span></span><br><span class="line">     A.id,A.colorder</span><br></pre></td></tr></table></figure>

<h1 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h1><p>以mysql为例，根据sql的内容。</p>
<p>根据示例的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	COLUMN_NAME 列名,</span><br><span class="line">	COLUMN_TYPE 数据类型,</span><br><span class="line">	DATA_TYPE 字段类型,</span><br><span class="line">	CHARACTER_MAXIMUM_LENGTH 长度,</span><br><span class="line">	IS_NULLABLE 是否为空,</span><br><span class="line">	COLUMN_DEFAULT 默认值,</span><br><span class="line">	COLUMN_COMMENT 备注 </span><br><span class="line">FROM</span><br><span class="line">	INFORMATION_SCHEMA.COLUMNS </span><br><span class="line">	WHERE-- developerclub为数据库名称，到时候只需要修改成你要导出表结构的数据库即可</span><br><span class="line">	table_schema &#x3D; &#39;hotel&#39; </span><br><span class="line">	AND -- article为表名，到时候换成你要导出的表的名称</span><br><span class="line">-- 如果不写的话，默认会查询出所有表中的数据，这样可能就分不清到底哪些字段是哪张表中的了，所以还是建议写上要导出的名名称</span><br><span class="line">	table_name &#x3D; &#39;orders&#39;</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200829215314.png" alt=""></p>
<p>点击<code>导出向导</code></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200829215354.png" alt=""></p>
<p>选择需要导出的内容，根据所需导出，即可，我这里选择导出<code>excel</code></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200829215901.png" alt=""></p>
<p>我们可以将导出的内容贴到md 里面</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>数据类型</th>
<th>字段类型</th>
<th>长度</th>
<th>是否为空</th>
<th>默认值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>int(11)</td>
<td>int</td>
<td></td>
<td>NO</td>
<td></td>
<td></td>
</tr>
<tr>
<td>table_id</td>
<td>int(11)</td>
<td>int</td>
<td></td>
<td>YES</td>
<td></td>
<td></td>
</tr>
<tr>
<td>orderDate</td>
<td>datetime</td>
<td>datetime</td>
<td></td>
<td>YES</td>
<td></td>
<td></td>
</tr>
<tr>
<td>totalPrice</td>
<td>double</td>
<td>double</td>
<td></td>
<td>YES</td>
<td></td>
<td></td>
</tr>
<tr>
<td>orderStatus</td>
<td>int(11)</td>
<td>int</td>
<td></td>
<td>YES</td>
<td>0</td>
<td></td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>导出数据的踩坑记录</title>
    <url>/2020/07/26/note11/</url>
    <content><![CDATA[<h1 id="情感分析的导出"><a href="#情感分析的导出" class="headerlink" title="情感分析的导出"></a>情感分析的导出</h1><ol>
<li>将数据通过excel的形式导入到sqlsever</li>
<li>查询整个数据表，查找是否已经处理，如果已经处理，跳过，否则，执行情感分析</li>
<li>使用jsp Update 数据的状态，更新一条将标识位调整</li>
<li>每隔一定的时间进行处理</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String sql &#x3D; &quot;select id,new_name,old_name from m_test where flag &#x3D; 0&quot;;</span><br><span class="line">    ObjectManager objectManager &#x3D; new ObjectManager();</span><br><span class="line">    List&lt;IDataSet&gt; dataList &#x3D; objectManager.list(sql);</span><br><span class="line">    if (dataList.isEmpty()) &#123;</span><br><span class="line">        out.print(&quot;开始执行统计分析程序，没有需要分析的数据！&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(&quot;开始执行统计分析程序，需要分析：&quot; + dataList.size() + &quot;条&quot;);</span><br><span class="line"></span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    for (IDataSet data : dataList) &#123;</span><br><span class="line">        String new_name &#x3D; data.getString(&quot;new_name&quot;);</span><br><span class="line">        String old_name &#x3D; data.getString(&quot;old_name&quot;);</span><br><span class="line">        SentimentAnalysis new_name_result &#x3D; null;</span><br><span class="line">        SentimentAnalysis old_name_result &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            new_name_result &#x3D; NlpApi.sentimentAnalysisByText(new_name);</span><br><span class="line">            old_name_result &#x3D; NlpApi.sentimentAnalysisByText(old_name);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.out.println(&quot;调用分析接口出错！&quot; + e.getMessage());</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String new_sentimentname &#x3D; &quot;&quot;;</span><br><span class="line">        String new_confide &#x3D; &quot;&quot;;</span><br><span class="line">        String new_negative &#x3D; &quot;&quot;;</span><br><span class="line">        String new_positive &#x3D; &quot;&quot;;</span><br><span class="line">        String old_sentimentname &#x3D; &quot;&quot;;</span><br><span class="line">        String old_confide &#x3D; &quot;&quot;;</span><br><span class="line">        String old_negative &#x3D; &quot;&quot;;</span><br><span class="line">        String old_positive &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        if(null !&#x3D; new_name_result)&#123;</span><br><span class="line">            new_sentimentname &#x3D; new_name_result.getSentimentName();</span><br><span class="line">            new_confide &#x3D; String.valueOf(new_name_result.getConfidence());</span><br><span class="line">            new_negative &#x3D; String.valueOf(new_name_result.getNegativeProb());</span><br><span class="line">            new_positive &#x3D; String.valueOf(new_name_result.getPositiveProb());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(null !&#x3D; old_name_result)&#123;</span><br><span class="line">            old_sentimentname &#x3D; old_name_result.getSentimentName();</span><br><span class="line">            old_confide &#x3D; String.valueOf(old_name_result.getConfidence());</span><br><span class="line">            old_negative &#x3D; String.valueOf(old_name_result.getNegativeProb());</span><br><span class="line">            old_positive &#x3D; String.valueOf(old_name_result.getPositiveProb());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String updateSql &#x3D; &quot;update m_test set new_confide &#x3D; ? , new_negative &#x3D; ? , new_positive &#x3D; ?, new_anaresult &#x3D; ?,old_confide &#x3D; ? , old_negative &#x3D; ? , old_positive &#x3D; ?, old_anaresult &#x3D; ? , flag &#x3D; 1 where id &#x3D; ?&quot;;</span><br><span class="line"></span><br><span class="line">        objectManager.update(updateSql, new Object[]&#123;new_sentimentname, new_confide, new_negative, new_positive, old_sentimentname, old_confide, old_negative, old_positive, data.getInt(&quot;id&quot;)&#125;);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out.print(&quot;系统执行完毕，执行成功&quot; + i + &quot;条&quot;);</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>情感分析</category>
      </categories>
      <tags>
        <tag>情感分析</tag>
      </tags>
  </entry>
  <entry>
    <title>一点鸡汤</title>
    <url>/2020/07/26/jitang/</url>
    <content><![CDATA[<h1 id="网上查看"><a href="#网上查看" class="headerlink" title="网上查看"></a>网上查看</h1><p>Java学习这一部分其实也算是今天的重点，这一部分用来回答很多群里的朋友所问过的问题，那就是我你是如何学习Java的，能不能给点建议？今天我是打算来点干货，因此咱们就不说一些学习方法和技巧了，直接来谈每个阶段要学习的内容甚至是一些书籍。这一部分的内容，同样适用于一些希望转行到Java的同学。</p>
<a id="more"></a>

<p>在大家看之前，我要先声明两点。1、由于我本人是Java后端开发出身，因此所推荐的学习内容是Java Web和Java后端开发的路线，非Java Web和Java后端开发的同学请适当参考其学习思想即可，切勿照搬。2、下面对于【第一部分】的推荐内容，目的是让你尽快成为一个可以参加工作的Java开发者，更适用于处于待业状态，准备转行Java的同学。</p>
<p>如果你是在校学生，务必要在学好基础（比如计算机系统、算法、编译原理等等）的前提下，再考虑去进行下面的学习。第一部分：对于尚未做过Java工作的同学，包括一些在校生以及刚准备转行Java的同学。</p>
<p>一、Java基础首先去找一个Java的基础教程学一下，这里推荐慕课，菜鸟，学习Java基础的时候，应该尽量多动手，很多时候，你想当然的事情，等你写出来运行一下，你就会发现不是这么回事儿，不信你就试试。学完以上内容以后，你应该对Java有一个基本的了解了，你可以用Java语言写出一些简单的程序，并且你用的是最简单的编辑器，比如记事本。这个时候，不要急于进入下一部分，留下几天好好写一些程序，尽可能熟悉这些基础内容。</p>
<p>二、Web开发等你写上几天程序以后，你往往会比较迷茫，因为你写的东西似乎看起来毫无用处，比如实现一个简单的计算器，读取一个文件等。这个时候你就应该去学着写一些让你觉得有意思的东西了，所以你应该学习更多的知识。这些内容主要是Web开发相关的内容，包括HTML/CSS/JS（前端页面）、Servlet/JSP（J2EE）以及Mysql（数据库）相关的知识。它们的学习顺序应该是从前到后，因此最先学习的应该是HTML/CSS/JS（前端页面），这部分内容你可以去上面的那个runoob网站上找。</p>
<p>你可以试着自己写一些页面，当然，你可以尽你最大的努力让它变得最漂亮。这部分内容对于后端Java来说，理论上不是特别重要，但至少要达到可以自己写出一些简单页面的水平。接下来，你需要学习的是Servlet/JSP（J2EE）部分，这部分是Java后端开发必须非常精通的部分，因此这部分是这三部分中最需要花精力的，而且这个时候，你要学会使用开发工具，而不能再使用记事本了，可以选择eclipse。当你下载安装好eclipse以后，请视频中的教程一步一步去学习，一定要多动手。关于Servlet/Jsp部分视频的选择，业界比较认可马士兵的视频，因此推荐给大家。</p>
<p>当然了，我本人并没有看过他的视频，所以不好说的太绝对，如果大家自己有更好的选择，可以坚持自己的，不要被我干扰。原本我也是打算出教学视频的，但是由于时间问题，还是决定放弃了。最后一步，你需要学会使用数据库，mysql是个不错的入门选择，而且Java领域里主流的关系型数据库就是mysql。这部分一般在你学习Servlet/Jsp的时候，就会接触到的，其中的JDBC部分就是数据库相关的部分。你不仅要学会使用JDBC操作数据库，还要学会使用数据库客户端工具，比如navicat，sqlyog，二选一即可。</p>
<p>三、开发框架当你学会以上内容以后，这个时候你还不足以参加工作，你还需要继续深造。公司里为了提高开发的效率，会使用一些Java Web框架，因此你还需要学习一些开发框架。目前比较主流的是SSM框架，即spring、springmvc、mybatis。你需要学会这三个框架的搭建，并用它们做出一个简单的增删改查的Web项目。你可以不理解那些配置都是什么含义，以及为什么要这么做，这些留着后面你去了解。</p>
<p>但你一定要可以快速的利用它们三个搭建出一个Web框架，你可以记录下你第一次搭建的过程，相信我，你一定会用到的。还要提一句的是，你在搭建SSM的过程中，可能会经常接触到一个叫maven的工具。这个工具也是你以后工作当中几乎是必须要使用的工具，所以你在搭建SSM的过程中，也可以顺便了解一下maven的知识。在你目前这个阶段，你只需要在网络上了解一下maven基本的使用方法即可，一些高端的用法随着你工作经验的增加，会逐渐接触到的。</p>
<p>关于学习SSM框架的地址给大家推荐一个，这里面有视频，大家可以去观看。四、找工作当你完成开发框架的学习以后，你就该找工作了，在校的找实习，毕业的找全职。与此同时，在找工作的同时，你不应该停下你的学习，准确的说，是你在以后都不能停下学习。上面这些内容你只是囫囵吞枣的学会了使用，你可以逐步尝试着去了解更多的东西，网络是你最重要的老师。</p>
<p>第二部分：对于参加工作一年以内的同学。恭喜你，这个时候，你已经拥有了一份Java的工作。这个阶段是你成长极快的阶段，而且你可能会经常加班。但是加班不代表你就可以松懈了，永远记得我说的那句话，从你入行那一刻起，你就要不停的学习。在这一年里，你至少需要看完《Java编程思想》这本书。这本书的内容是帮助你对于Java有一个更加深入的了解，是Java基础的升级版。这本书很厚，当初看这本书，我花了整整三个月。正常速度的话，应该可以在半年左右看完。我这里不要求过高，只要你在一年以内把这本书看完即可。当然了，我所说的看完，是充分吸收，而不是读一遍就完事了，因此有些内容你可能会看不止一遍。总而言之，这个阶段的核心学习思想就是，在工作中实践，并且更加深入的了解Java基础。</p>
<p>第二部分：对于参加工作1年到2年的同学。这部分时间段的同学，已经对Java有了一个更加深入的了解。但是对于面向对象的体会可能还不够深刻，编程的时候还停留在完成功能的层次，很少会去考虑设计的问题。于是这个时候，设计模式就来了。我当时看的是《大话设计模式》这本书，并且写了完整版的设计模式博客。因此，我要求大家，最多在你工作一年的时候，必须开始写博客，而设计模式就是你博客的开端。</p>
<p>请记住，我所提的基本都是最低要求，因此不要有任何松懈的心理，否则五年后，你不要去羡慕别人高于你的工资，也不要去羡慕别人进入了某公司。这一年，你必须对于设计模式了如指掌，《大话设计模式》可以作为你的开端。此外，设计模式并不是你这一年唯一的任务，你还需要看一些关于代码编写优化的书。比如《重构 改善既有代码的设计》，《effective java》。总而言之，这个阶段，你的核心任务就是提高你的代码能力，要能写出一手优雅的代码。</p>
<p>第三部分：对于参加工作2年到3年的同学有的同学在这个时候觉得自己已经很牛逼了，于是忍不住开始慢慢松懈。请记住，你还嫩的多。这个阶段，有一本书是你必须看的，它叫做《深入理解Java虚拟机》。这本书绝对是Java开发者最重要的书，没有之一。在我眼里，这本书的重要性还要高于《Java编程思想》。这本书的内容是帮助你全面的了解Java虚拟机，在这个阶段，你一定已经知道Java是运行在JVM之上的。所以，对于JVM，你没有任何理由不了解它。</p>
<p>另外，在过去2年的工作当中，你肯定或多或少接触过并发。这个时候，你应该去更加深入的了解并发相关的知识，而这部分内容，我比较推荐《Java并发编程实战》这本书。只要你把这本书啃下来了，并发的部分基本已经了解了十之六七。与此同时，这个阶段你要做的事情还远不止如此。这个时候，你应该对于你所使用的框架应该有了更深入的了解，对于Java的类库也有了更深入的了解。</p>
<p>因此，你需要去看一些JDK中的类的源码，也包括你所使用的框架的源码。这些源码能看懂的前提是，你必须对设计模式非常了解。否则的话，你看源码的过程中，永远会有这样那样的疑问，这段代码为什么要这么写？为什么要定义这个接口，它看起来好像很多余？由此也可以看出，这些学习的过程是环环相扣的，如果你任何一个阶段拉下来了，那么你就真的跟不上了，或者说是一步慢步步慢。而且我很负责的告诉你，我在这个阶段的时候，所学习的东西远多于这里所罗列出来的。</p>
<p>因此千万不要觉得你已经学的很多了，我所说的这些都只是最低要求，不光是我，很多人在这个时间段所学习的内容都远超本文的范围。如果你不能跟上节奏的话，若干年后，如果不是程序猿市场还不错的话，你很可能不仅仅是工资比别人低，公司没别人好，而是根本就找不到工作。总而言之，这个阶段，你需要做的是深入了解Java底层和Java类库（比如并发那本书就是Java并发包java.concurrent的内容），也就是JVM和JDK的相关内容。而且还要更深入的去了解你所使用的框架，方式比较推荐看源码或者看官方文档。另外，还有一种学习的方式，在2年这个阶段，也应该启用了，那就是造轮子。不要听信那套“不要重复造轮子”的论调，那是公司为了节省时间成本编造出来的。重复造轮子或许对别人没有价值，因为你造的轮子可能早就有了，而且一般情况下你造出来的轮子还没有现存的好。</p>
<p>但是对别人没有价值，不代表对你自己没有价值。一个造轮子的过程，是一个从无到有的过程。这个过程可以对你进行系统的锻炼，它不仅考察你的编码能力，还考察你的框架设计能力，你需要让你的轮子拥有足够好的扩展性、健壮性。而且在造轮子的过程中，你会遇到各种各样的难题，这些难题往往又是你学习的契机。当你把轮子造好的时候，你一定会发现，其实你自己收获了很多。所以，这个阶段，除了上面提到的了解JVM、JDK和框架源码以外，也请你根据别人优秀的源码，去造一个任何你能够想象出来的轮子。</p>
<p>第四部分：参加工作3年到4年的同学这个阶段的同学，提升已经是很难了，而且这个阶段的学习往往会比较多样化。因为在前3年的过程中，你肯定或多或少接触过一些其它的技术，比如大数据、分布式缓存、分布式消息服务、分布式计算、软负载均衡等等。这些技术，你能精通任何一项，都将是你未来面试时巨大的优势，因此如果你对某一项技术感兴趣的话，</p>
<p>这个时候可以深入去研究一下。这项技术不一定是你工作所用到的，但一定是相关的。而且在研究一门新技术时，切忌朝三暮四。有的同学今天去整整大数据，搞搞Hadoop、hbase一类的东西。过不了一段时间，就觉得没意思，又去研究分布式缓存，比如redis。然后又过不了一段时间，又去研究分布式计算，比如整整Mapreduce或者storm。结果到最后，搞得自己好像什么都会一样，在简历上大言不惭的写上大数据、分布式缓存、分布式计算都了解，其实任何一个都只是浮于表面。到时候面试官随便一问，就把你给识破了。</p>
<p>一定要记住，作为一个程序猿，平日里所接触的技术可能会很多，但是想要让一门技术成为你的优势，那么一定是你对这门技术的了解强过绝大多数人才行。因此在这个阶段，你就不能再简单的去学习前3年的内容了，虽然前面的学习如果还不够深入的话依旧要继续，但这个时候你应该更多的考虑建立你的优势，也可以称为差异性。差异性相信不难理解，就是让你自己变得与众不同。你前面三年的学习足够你成为一名基本合格的Java开发者，但你离成为一名优秀的Java开发者还有很大的距离。</p>
<p>所谓优秀，即能别人所不能。而你前三年所学习的内容，是很多做过几年的Java开发都能够掌握的。那么为了让自己有差异性，你就需要另辟蹊径，找一个方向深入研究下去，以期在将来，你能够成为这个领域的专家，比如分布式计算领域的专家，大数据领域的专家，并发领域的专家等等。此外，你除了建立你的差异性之外，还要去弥补你基础上的不足，直到现在，我都没有提及基础知识。原因是基础是很枯燥无味的，学的太早不仅容易懵逼，而且懵逼的同时还容易产生心理阴影，以至于以后再不想去研究这些基础。但基础又是你深入研究一些领域时所必须掌握的，比如你去研究分布式计算，你不懂算法你玩个毛毛？比如你去做分布式缓存，你对计算机系统的内存不了解，你如何去做缓存？</p>
<p>如果你的基础本来就非常强，那么恭喜你，相信你在之前的工作中已经充分体会到了这些基础对你的帮助。但我相信大部分人的基础都很薄弱，哪怕是科班毕业的人，很多人也不敢说自己当初的基础学的多么强大，比如算法、计算机系统原理、编译原理这些。但是每个人时间都是有限的，而且这些基础的书籍每一本读下来，没个一年半载的，还真拿不下来，因此还是要有所抉择的。虽然艺多不压身，但问题是艺多是有代价的，是需要你付出时间和精力的，而我个人更赞成在同等代价的情况下获取最大的收获。</p>
<p>首先，我比较推崇的基础书籍有三本，分别是《深入理解计算机系统》，《tcp/ip详解 卷一、二、三》，《数据结构与算法》。其中TCP/IP有三本书，但我们这里把这三本看成是一本大书。这三本分别适合三种人，《深入理解计算机系统》比较适合一直从事Java Web开发和APP后端开发工作的人群。《tcp/ip详解 卷一、二、三》比较适合做网络编程的人群，比如你使用netty去开发的话，那么就要对TCP/IP有更深入的了解。而《数据结构与算法》这本书，则比较适合做计算研究工作的人，比如刚才提到的分布式计算。另外，我要强调的是，这里所说的适合，并不是其它两本对你就没有用。比如你做Java Web和APP后端开发，《tcp/ip详解 卷一、二、三》这本书对你的作用也是很大的。这里只是分出个主次关系而已，你要是时间足够的话，能把三本都精读那当然最好不过了。</p>
<p>但如果时间有限的话，那么就先挑对你帮助最大的书去读。理论上来讲，这一年你能把这三本其中一本精读下来，就已经非常厉害了。有了基础，有了前面的工作经验，你就可以去开拓属于你的领域了。在这一年里，一定要规划好自己的领域，建立好自己的优势，制造出差异性。如果你对自己的领域不够清晰的话，随着你工作的时间日益增多，你接触的技术会越来越多，这个时候，你很容易被淹死在技术的海洋里，看似接触的技术越来越多，会用的也越来越多，但你毫无优势。有的同学可能会问，“我，我也不知道我的领域是什么啊？怎么办呢？”对于这种人，我只想说，“卧槽，这还问我？要不干脆我替你学习得了，好不好？”</p>
<p>第五部分：参加工作4年到5年的同学经过前面一年的历练，相信你在自己所钻研的领域已经有了自己一定的见解，这个时候，技术上你应该已经遇到瓶颈了。这个时候不要着急提高自己的技术，已经是时候提高你的影响力了，你可以尝试去一些知名的公司去提高你的背景，你可以发表一些文章去影响更多的人。当然，你也可以去Github创建一个属于你的开源项目，去打造自己的产品。</p>
<p>这次的开源项目不同于之前的造轮子，你这个时候是真的要去尽量尝试造出来真正对别人有价值的轮子。技术学到这个阶段，很容易遇到瓶颈，而且往往达到一定程度后，你再深入下去的收效就真的微乎其微了，除非你是专门搞学术研究的。然而很可惜，大部分程序猿做不到这一步，那是科学家做的事情。这个时候提高影响力不仅仅是因为技术上容易遇到瓶颈，更多的是影响力可以给你创造更多的机会。程序猿在某种程度上和明星很像，一个好的电视剧和电影就可以成就一批明星，程序猿有的时候也是，一个好的项目就可以成就一群程序猿。比如国内几个脍炙人口的项目，像淘宝、支付宝、QQ、百度、微信等等。这每一个项目，都成就了一批程序猿。我敢说，这里面任何一个项目，如果你是它的核心开发，光是这样一个Title，就已经是你非常大的优势。更何况还不止如此，Title说到底也是个名头，更重要的是，这种项目在做的时候，对你的历练一定也是非常给力的。</p>
<p>而你如果想要参与这样的项目，除了靠运气之外，影响力也是很重要的一个手段。比如你在分布式计算领域有一定的影响力，那么如果有什么好的关于分布式计算的项目，对方就很可能会邀请你。就算人家不邀请你，你自己主动去面试的时候，对方如果知道你在这个领域的影响力，也肯定会起到很大的作用，而这个作用，甚至可能会超过你现在的技术能力。所以，在这个阶段，你最大的任务是提高自己的影响力，为自己未来的十年工作生涯那一天做准备。如果你能够靠你的影响力和以前积累的技术，参与到一个伟大的项目当中，那么你后面的五年也就有着落了。当然了，我现在满打满算，做程序猿也就4年半不到，因此关于4年到5年这一部分，我的见解不一定是对的，就算是对的，也不一定是适合任何人的。</p>
<p>所以，希望大家自己有的判断力，去决定到底该如何度过这一年。结语本文到此就基本结束了，整篇文章很长，但其实主要就说了两部分内容，一个是社招面试的准备，一个是Java生涯的学习。关于这两部分，我已经给出了自己的见解，但是还是那句话，每个人吸收知识的时候，都要有抽取精华，去除糟粕的能力。我所说的，可能有些是对的，有些是错的，有些是适合你的，有些是不太适合你的，你要自己能够判断。其实你在生活和工作当中也是一样的，你身边的人形形色色，有的人你喜欢，有的人你很讨厌。但其实你喜欢的人也有缺点，你讨厌的人也有优点。你要学会从你讨厌的人身上学会他的优点，千万不要一棒子打死，这只会让你失去很多学习成长的机会。好了，说了这么多了，就到此为止吧，希望本文可以帮助到作为程序猿或即将成为程序猿的你。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>心得体会</category>
      </categories>
      <tags>
        <tag>鸡汤</tag>
      </tags>
  </entry>
  <entry>
    <title>小技巧：Typera如何设置高亮和自定义快捷键？</title>
    <url>/2020/07/26/note8/</url>
    <content><![CDATA[<h1 id="Markdown-如何给文字加上高亮效果？"><a href="#Markdown-如何给文字加上高亮效果？" class="headerlink" title="Markdown 如何给文字加上高亮效果？"></a>Markdown 如何给文字加上高亮效果？</h1><h2 id="前置工作："><a href="#前置工作：" class="headerlink" title="前置工作："></a>前置工作：</h2><ol>
<li>最新版本的typera</li>
<li>NotePad++ （包括 sublime、atom 都可，但是不建议使用记事本，后面会说明原因）</li>
</ol>
<a id="more"></a>

<h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><p>其实官方目前已经有了案例（包括mac os X系统）</p>
<p>这里分享一下地址：如下</p>
<p><span class="exturl" data-url="aHR0cDovL3N1cHBvcnQudHlwb3JhLmlvL1Nob3J0Y3V0LUtleXMvI2NoYW5nZS1zaG9ydGN1dC1rZXlz" title="http://support.typora.io/Shortcut-Keys/#change-shortcut-keys">http://support.typora.io/Shortcut-Keys/#change-shortcut-keys<i class="fa fa-external-link"></i></span></p>
<p>如果看不懂英文可以下载谷歌浏览器翻译查看</p>
<h2 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h2><h3 id="第一步：随便打开一个-md后缀的文件"><a href="#第一步：随便打开一个-md后缀的文件" class="headerlink" title="第一步：随便打开一个.md后缀的文件"></a>第一步：随便打开一个.md后缀的文件</h3><p>我们可以打开typera的软件或者打开一个md 文件用typera 打开方式即可</p>
<h3 id="第二步：选择文件-打开偏好设置"><a href="#第二步：选择文件-打开偏好设置" class="headerlink" title="第二步：选择文件,打开偏好设置"></a>第二步：选择文件,打开偏好设置</h3><p>在打开的偏好设置里面，我们需要勾选<strong>高亮</strong>选项</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200519224209.png?ynotemdtimestamp=1595748679079" alt="img"></p>
<h3 id="第三步：点击下方的高级设置，打开一个名为conf-user-json的文件"><a href="#第三步：点击下方的高级设置，打开一个名为conf-user-json的文件" class="headerlink" title="第三步：点击下方的高级设置，打开一个名为conf.user.json的文件"></a>第三步：点击下方的高级设置，打开一个名为<code>conf.user.json</code>的文件</h3><p>下面我截取了部分配置，只要参考设置快捷键即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Custom key binding, which will override the default ones.</span><br><span class="line">  &quot;keyBinding&quot;: &#123;</span><br><span class="line">    &#x2F;&#x2F; for example: </span><br><span class="line">    &#x2F;&#x2F;&quot;Always on Top&quot;: &quot;Ctrl+Shift+P&quot;,</span><br><span class="line">    &#x2F;&#x2F; 设置高亮快捷键</span><br><span class="line">	&quot;Highlight&quot;: &quot;Ctrl+Shift+H&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="第四步：注意：需要重新启动typera才能生效"><a href="#第四步：注意：需要重新启动typera才能生效" class="headerlink" title="第四步：注意：需要重新启动typera才能生效"></a>第四步：注意：需要重新启动typera才能生效</h3><p>我们按下Ctrl+Shift+H就可以实现文字高亮了，是不是特别方便</p>
<p>重启typera之后，我们可以体验高亮功能了，高亮功能还是十分有用的，不仅在文字里面高亮，在目录里面也有对应到展示，非常直观方便，让我们抓住重点</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200519224657.png?ynotemdtimestamp=1595748679079" alt="img"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title>模仿游戏-观后感</title>
    <url>/2020/10/07/note28/</url>
    <content><![CDATA[<h1 id="模仿游戏-观后感"><a href="#模仿游戏-观后感" class="headerlink" title="模仿游戏-观后感"></a>模仿游戏-观后感</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    在某次看技术文章的时候，从评论里面看到了这部电影，去搜了一下，发现可能真的是一部比较冷门的电影，看完之后，顿时感觉发现了宝藏，更进一步的讲，对于每一位从事技术行业，或者从事结果性工作的职业工作者，或者涉及单纯的普通人，都推荐好好品味这一部电影。</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>二战期间，盟军苦于德国的秘密系统”英格玛“无法破译，政府召集了一批民间数学家、逻辑学家进行秘密破解工作，图灵（本尼迪克特·康伯巴奇 Benedict Cumberbatch 饰）就是其中之一。计划刚开始图灵遭到了以休（马修·古迪 Matthew Goode）为首的组员和领导的排斥，幸好军情处部长孟席斯（马克·斯特朗 Mark Strong 饰）帮助他立项研究破译密码的机器，而图灵则变成了负责人，招收了新的成员琼（凯拉·奈特莉 Keira Knightley）开始了艰难的工作。琼很快就迷上了图灵，由于她的帮助所有组员空前的团结，并于两年后成功破解德军的密码。图灵一度与琼订婚，但实际上他隐瞒了一个秘密，因为这个秘密他也遭受了非人的待遇……<br>　　本片改编自安德鲁·霍奇斯编著的《艾伦·图灵传》，上映后获得了第87届奥斯卡最佳改编剧本奖。 <span class="exturl" data-url="aHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tL2hlbHAvbW92aWUjdDAtcXM=" title="https://movie.douban.com/help/movie#t0-qs">©豆瓣<i class="fa fa-external-link"></i></span></p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><ol>
<li>不论多么伟大的人物，人们永远看见他们想看见的：荣耀、辉煌，但是即使是绝世天才，也永远看不到他们背后的努力和奋斗。</li>
<li>天才和疯子可能真的是有一线之差。</li>
<li>一个成功的背后可能只是猜测，甚至只是源于相信的力量。</li>
<li>固执的坚守自己的想法可能比想象中要难上太多。</li>
<li>在某些情况下，不认为自己孤独的人，可能才是世界上最孤独的人</li>
<li>人和机器的区别到底是什么，正如模仿游戏的标题，人可以做出选择，但是机器却不可以。</li>
</ol>
<h2 id="推荐度"><a href="#推荐度" class="headerlink" title="推荐度"></a>推荐度</h2><p>4 星</p>
<h2 id="说说收获"><a href="#说说收获" class="headerlink" title="说说收获"></a>说说收获</h2><ol>
<li>虽然我是恐同的人，但是看了电影之后，我有了些许的改观</li>
<li>人们往往只看中结果，却无人会去关注其中的过程和艰辛</li>
<li>非凡的人终究会被世人铭记，只是时间的早晚而已</li>
<li>要造就非凡的事业，需要非凡的努力，当然，在此之前，需要一颗非凡的头脑</li>
<li>拥有一个真正理解并且支持你的朋友，可能是世界上除开父母之外，最值得珍惜的财富。</li>
<li>或许每一个技术人员，都是孤独并且可悲的人，但是从来不自知。</li>
</ol>
<h2 id="精句"><a href="#精句" class="headerlink" title="精句"></a>精句</h2><ol>
<li>人类惧怕和自己不一样的东西，所以制定了这样那样的规定。</li>
<li>有时候，正是那些人们认为的无用之人，成就了无人所成之事。</li>
<li>喜欢暴力吗？因为它让人感觉不错。人们发现暴力带来深深的满足感，但除去这些满足感，暴力行为会变得非常空洞。</li>
<li>你需要我大于我需要你。</li>
<li>撒谎最煎熬的时候就是明知道别人在等你撒谎的时候。如果别人在等着你撒谎。你不能只是给他们制造一个谎言。</li>
<li>不懂你的人为你的成就喝彩，懂你的人为你的付出心疼。</li>
</ol>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>希望世界上的所有程序员，都好好的过好这灿烂的人生，除开编程之外，多出去看看瞧一瞧，挣再多的钱，也抵不过进一次医院，祝愿每一位工作者能去寻找并且实现自己的美好梦想。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>拥有一台surface pro3 是怎样的体验</title>
    <url>/2020/10/07/note30/</url>
    <content><![CDATA[<h1 id="拥有一台surface-pro3-是怎样的体验"><a href="#拥有一台surface-pro3-是怎样的体验" class="headerlink" title="拥有一台surface pro3 是怎样的体验"></a>拥有一台surface pro3 是怎样的体验</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/SharedScreenshot.jpg" alt=""></p>
<h2 id="为什么要买surface-pro"><a href="#为什么要买surface-pro" class="headerlink" title="为什么要买surface pro"></a>为什么要买surface pro</h2><ol>
<li>个人还是感觉ipad适合拿来看电影，不适合做其他事情</li>
<li>不得不说微软的广告有点牛，看了就让人想买</li>
<li>这个板子的屏幕是一个三星的2K屏，实际使用观感确实不错，不论看电影还是看代码都是十分方便的。</li>
<li>笔记记录使用，个人是重度的windows使用</li>
<li>一个galgame的玩家怎么能没有一块windows的移动板子呢，不要太爽</li>
<li>之前买过一个东芝wta-8的windows板子，比较卡，算是捡漏失败</li>
</ol>
<h2 id="值不值得买？"><a href="#值不值得买？" class="headerlink" title="值不值得买？"></a>值不值得买？</h2><p>surfacepro3的屏幕非常脆，一摔基本算是拜拜了，所以个人使用非常的小心</p>
<p>不值得买一手，但是二手还是值得买来体验的一下的</p>
<p>如果你有经常出差的需求，买一个来文档做做文档记录还是不错的</p>
<p><font color='red'>千万不要买surface pro4，一堆问题</font></p>
<h2 id="先说说结论"><a href="#先说说结论" class="headerlink" title="先说说结论"></a>先说说结论</h2><ol>
<li>windows的平板体验真心非常糟糕，并且一定需要配合键鼠使用</li>
<li>作为轻办公使用，体验不错，谢谢word啥的还可以</li>
<li>最低配置玩lol没啥问题，还行</li>
<li>个人买来作为记笔记使用，比如可以在网上看视频的时候，在surface上面记笔记，这样就不需要频繁的切换到电子笔记上面进行笔记的输入，挺方便的</li>
<li>surface其实不算便携，但是总体上来说还是满足了自己的期望需求</li>
<li>作为笔记本不太行，但是作为一个便携的windows电脑，还是有一定的价值在的</li>
</ol>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>作为一个闲鱼的初级垃圾佬，surface 当然不值得买一手，当然得买二手货了，下面放出我的配置</p>
<p>个人的配置surfacepro4 8G内存 + 256G固态硬盘 闲鱼面交 1500 拿下，无磕碰，无维修。不算捡漏，算是安全上垒</p>
<h2 id="为什么不选择ipad"><a href="#为什么不选择ipad" class="headerlink" title="为什么不选择ipad"></a>为什么不选择ipad</h2><ol>
<li>Ipad 的生产力在ipad pro，但是价格有点承受不起</li>
<li>windows重度使用用户</li>
<li>在选择苹果的生态之前，需要有一台Iphone，当然，我也没有</li>
<li>个人的所有笔记和资料基本都保存在window的相关软件，同时也是简化学习成本（mac学习成本本身不是很高，后续考虑mbp）</li>
</ol>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这或许是我买的最后一块平板，以后可能考虑购买mbp，入苹果的生态圈</p>
<p>在闲鱼一年的时间，捡了几个还算不错的东西，这里分享一下</p>
<ol>
<li>kindle os2 1100 （天猫首发版本，卖家送了一堆原装配置和盒子，算是赚了）</li>
<li>surface pro 4</li>
<li>switch 日版 普通 1500带箱说</li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>surface</tag>
      </tags>
  </entry>
  <entry>
    <title>整理一下个人收集到的一些好网站（持续收集）</title>
    <url>/2020/07/26/note25/</url>
    <content><![CDATA[<h1 id="解决日常工作问题网站"><a href="#解决日常工作问题网站" class="headerlink" title="解决日常工作问题网站"></a>解决日常工作问题网站</h1><h2 id="前端问题"><a href="#前端问题" class="headerlink" title="前端问题"></a>前端问题</h2><h3 id="thinbug"><a href="#thinbug" class="headerlink" title="thinbug"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cudGhpbmJ1Zy5jb20v" title="https://www.thinbug.com/">thinbug<i class="fa fa-external-link"></i></span></h3><blockquote>
<p>一个前端技术问题的收集网站</p>
<p>推荐原因：</p>
<ol>
<li>没有广告，页面简洁</li>
<li>问题以及回答的质量都很不错</li>
<li>针对工作的一些细节问题很实用</li>
</ol>
<p>缺点：</p>
<ol>
<li>搜索不是很友善</li>
<li>过于简单，以至于不知道怎么发文章。。。。</li>
</ol>
</blockquote>
<h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><h3 id="算法网"><a href="#算法网" class="headerlink" title="算法网"></a><span class="exturl" data-url="aHR0cDovL2RkcnYuY24v" title="http://ddrv.cn/">算法网<i class="fa fa-external-link"></i></span></h3><blockquote>
<p>推荐原因：</p>
<ol>
<li>干货多</li>
</ol>
<p>缺点：</p>
<ol>
<li>作者也要恰饭，微信公众号可以理解</li>
</ol>
</blockquote>
<h3 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8=" title="https://www.google.com/">谷歌<i class="fa fa-external-link"></i></span></h3><blockquote>
<p>推荐原因：</p>
<ol>
<li>比某度真好了不止一个度</li>
<li>各方面无可挑剔，没有之一</li>
</ol>
<p>缺点：</p>
<ol>
<li>国内需要科学上网</li>
</ol>
</blockquote>
<h1 id="优秀博客"><a href="#优秀博客" class="headerlink" title="优秀博客"></a>优秀博客</h1><h2 id="猎人杂货铺"><a href="#猎人杂货铺" class="headerlink" title="猎人杂货铺"></a><span class="exturl" data-url="aHR0cHM6Ly9odW50ZXJ4Lnh5ei8=" title="https://hunterx.xyz/">猎人杂货铺<i class="fa fa-external-link"></i></span></h2><blockquote>
<p>推荐原因：</p>
<ol>
<li>有些东西写的真的很不错</li>
<li>十分钦佩每一位敢于创业的人</li>
</ol>
<p>缺点：</p>
<ol>
<li>人都要恰饭，有点广告很正常</li>
</ol>
</blockquote>
<h2 id="遇见西门"><a href="#遇见西门" class="headerlink" title="遇见西门"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2ltb245Ni5vbmxpbmUv" title="https://www.simon96.online/">遇见西门<i class="fa fa-external-link"></i></span></h2><blockquote>
<p>推荐原因：</p>
<ol>
<li>写得东西比较实用</li>
<li>页面非常简单，但是非常实用</li>
</ol>
<p>缺点：</p>
<ol>
<li>产量比较低</li>
</ol>
</blockquote>
<h2 id="年轻"><a href="#年轻" class="headerlink" title="年轻"></a><span class="exturl" data-url="aHR0cDovL3d3dy50aG9tYXN5b3VuZy5jbi8=" title="http://www.thomasyoung.cn/">年轻<i class="fa fa-external-link"></i></span></h2><blockquote>
<p>推荐原因：</p>
<ol>
<li>写得东西比较实用</li>
<li>页面非常简单，但是非常实用</li>
</ol>
<p>缺点：</p>
<ol>
<li>加载网站较慢，原因未知</li>
</ol>
</blockquote>
<h2 id="嘟嘟"><a href="#嘟嘟" class="headerlink" title="嘟嘟"></a><span class="exturl" data-url="aHR0cDovL3RlbmdqLnRvcC8=" title="http://tengj.top/">嘟嘟<i class="fa fa-external-link"></i></span></h2><blockquote>
<p>推荐原因：</p>
<ol>
<li>也是干货比较多，特点是在书籍整理这一块针对花了心血</li>
<li>做的副业不错，目前自己也入了，现在的想法是做着玩</li>
<li>一些工具推荐个人觉得很受用</li>
</ol>
<p>缺点：</p>
<ol>
<li>说实话页面个人感觉花哨了些</li>
</ol>
</blockquote>
<h2 id="周记杂货铺"><a href="#周记杂货铺" class="headerlink" title="周记杂货铺"></a><span class="exturl" data-url="aHR0cHM6Ly96aG91Y2hhbmdqdS5jb20v" title="https://zhouchangju.com/">周记杂货铺<i class="fa fa-external-link"></i></span></h2><blockquote>
<p>推荐原因：</p>
<ol>
<li>东西写的很多也很好，并且产量也很高</li>
<li>虽然偏向于前端，但是很多东西对于后端到我来说也很有启发</li>
<li>特别感谢vis,js的一些问题解答对我的开发帮助良多</li>
</ol>
<p>缺点：</p>
<ol>
<li>后悔没早点知道，哈哈哈</li>
</ol>
</blockquote>
<h2 id="时鹏亮的blog"><a href="#时鹏亮的blog" class="headerlink" title="时鹏亮的blog"></a><span class="exturl" data-url="aHR0cHM6Ly9zaGlwZW5nbGlhbmcuY29tLw==" title="https://shipengliang.com/">时鹏亮的blog<i class="fa fa-external-link"></i></span></h2><blockquote>
<p>推荐原因：</p>
<ol>
<li>原本是来找资源到，意外发现也是技术人HHHHH</li>
<li>个人比较喜欢界面风格</li>
<li>东西比较基础实用</li>
</ol>
<p>缺点：</p>
<ol>
<li>存在广告</li>
<li>干活不多</li>
</ol>
</blockquote>
<h2 id="一个学习的日常"><a href="#一个学习的日常" class="headerlink" title="一个学习的日常"></a><span class="exturl" data-url="aHR0cDovL3d3dy54aWhvb3RlY2guY29tLw==" title="http://www.xihootech.com/">一个学习的日常<i class="fa fa-external-link"></i></span></h2><blockquote>
<p>推荐原因：</p>
<ol>
<li>里面很多“鸡汤”挺值得思考到</li>
<li>到目前个人认为个人品牌做得最好到一个博客，很有个人特色</li>
<li>一个十分有特色的博客</li>
</ol>
<p>缺点：</p>
<ol>
<li>样式排版个人不是十分喜欢，内容有点点臃肿</li>
<li>部分分享资源存在收费行为，不过可以理解</li>
</ol>
</blockquote>
<h2 id="公众号-后端进阶（目前博客已关闭）"><a href="#公众号-后端进阶（目前博客已关闭）" class="headerlink" title="公众号[后端进阶（目前博客已关闭）]"></a><span class="exturl" data-url="aHR0cHM6Ly9vYmpjb2RpbmcuY29tLw==" title="https://objcoding.com/">公众号[后端进阶（目前博客已关闭）]<i class="fa fa-external-link"></i></span></h2><blockquote>
<p>推荐原因：</p>
<ol>
<li>博客的内容写得都非常到清晰</li>
<li>着重先实战后讲原理</li>
<li>少数能认真看完一篇长文章的博客</li>
</ol>
<p>缺点：</p>
<ol>
<li>更新不是很频繁</li>
</ol>
</blockquote>
<h2 id="Mark-Needham"><a href="#Mark-Needham" class="headerlink" title="Mark Needham"></a><span class="exturl" data-url="aHR0cHM6Ly9tYXJraG5lZWRoYW0uY29tL2Jsb2cv" title="https://markhneedham.com/blog/">Mark Needham<i class="fa fa-external-link"></i></span></h2><blockquote>
<p>推荐原因：</p>
<ol>
<li>外国博客，需要自备翻译</li>
<li>推荐的东西比较实用</li>
</ol>
<p>缺点：</p>
<ol>
<li>需要翻译，英文好当我没说</li>
</ol>
</blockquote>
<h1 id="电影资源网站"><a href="#电影资源网站" class="headerlink" title="电影资源网站"></a>电影资源网站</h1><h2 id="人人电影网"><a href="#人人电影网" class="headerlink" title="人人电影网"></a><span class="exturl" data-url="aHR0cDovL3d3dy5yZW5yZW5kaWFueWluZ3dhbmcuY24v" title="http://www.renrendianyingwang.cn/">人人电影网<i class="fa fa-external-link"></i></span></h2><blockquote>
<p> 推荐原因：</p>
<ol>
<li><p>免费的电影资源分享</p>
</li>
<li><p>没有恶心的套路，有就是有，没有就是没有</p>
<p>缺点：</p>
</li>
<li><p>还是存在许多电影找不到的情况</p>
</li>
</ol>
</blockquote>
<h2 id="80S手机电影"><a href="#80S手机电影" class="headerlink" title="80S手机电影"></a><strong><span class="exturl" data-url="aHR0cDovL3d3dy55ODBzLmNvbS8=" title="http://www.y80s.com/">80S手机电影<i class="fa fa-external-link"></i></span></strong></h2><p>百度直接所有80s即可</p>
<blockquote>
<p>推荐原因：</p>
<ol>
<li>大部分的电影还是可以看得</li>
<li>比较适合手机党看电影，资源都是比较小的</li>
</ol>
<p>缺点：</p>
<ol>
<li>受制于版权很多电影还是不能看</li>
</ol>
</blockquote>
<p>百度直接所有80s即可</p>
<h1 id="音乐网站："><a href="#音乐网站：" class="headerlink" title="音乐网站："></a>音乐网站：</h1><h2 id="魔迷士博客"><a href="#魔迷士博客" class="headerlink" title="魔迷士博客"></a><a href="https://www.momishi.com/" target="_blank" rel="noopener"><strong>魔迷士博客</strong></a></h2><blockquote>
<p>推荐原因：</p>
<ol>
<li>十块钱的代工费用，我觉得很值</li>
<li>里面有自己喜欢的歌手一整套专辑，非常6</li>
<li>音乐多为无损音质</li>
</ol>
<p>缺点：</p>
<ol>
<li>部分音乐可能没有</li>
<li>不稳定，毕竟是个人网站</li>
</ol>
</blockquote>
<h1 id="剪辑"><a href="#剪辑" class="headerlink" title="剪辑"></a>剪辑</h1><h2 id="gfxcamp"><a href="#gfxcamp" class="headerlink" title="gfxcamp"></a><span class="exturl" data-url="aHR0cDovL3d3dy5nZnhjYW1wLmNvbS8=" title="http://www.gfxcamp.com/">gfxcamp<i class="fa fa-external-link"></i></span></h2><blockquote>
<p>推荐原因：</p>
<ol>
<li>部分素材免费</li>
<li>作为入门学习够用，但是如果需要更高级的素材不适合</li>
</ol>
<p>缺点：</p>
<ol>
<li>免费的东西作用个人感觉不是很大</li>
<li>建议挂梯子</li>
<li>英文教程较多，可以买来当英语听力资料（笑）</li>
</ol>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title>百度编辑器的那些坑</title>
    <url>/2020/10/11/note32/</url>
    <content><![CDATA[<h1 id="百度编辑器的那些坑："><a href="#百度编辑器的那些坑：" class="headerlink" title="百度编辑器的那些坑："></a>百度编辑器的那些坑：</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>最近在处理公司的旧后台浏览器兼容问题，要求更换<code>ewebeditor</code> 编辑器，更换为ueditor 编辑器，并且要求 IE9/IE8/IE10/IE11/Micro Edge/Google/360 编辑器各项兼容，听说百度的编辑器兼容至IE6，以为简单的换个编辑器的我，在上面折腾了不少时间，本文针对具体问题进行处理，可能读者遇不到我这样的问题，事前说明：<strong>仅供参考</strong>、<strong>仅供参考</strong>、<strong>仅供参考</strong></p>
<a id="more"></a>

<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><ol>
<li>百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患  - IE问题</li>
<li>百度编辑器<code>Ctril + v</code>粘贴图片功能在IE上面不触发任何效果的问题</li>
<li>特殊符号传输后台的转义问题，以及将数据库的html读取之后，由于双引号导致的截取页面报错问题</li>
<li>针对 <code>iframe</code>这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式</li>
</ol>
<h2 id="百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患-IE问题"><a href="#百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患-IE问题" class="headerlink" title="百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患  - IE问题"></a>百度编辑器粘贴图片的时候，会出现暴露内网IP的隐患  - IE问题</h2><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>使用粘贴图片就会出现如下的问题，在查看源代码的时候，出现了如图所示的暴露源代码的问题，出现问题原因不明:</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011120300.png" alt=""></p>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><ol>
<li>非常简单，只需要关闭<code>查看源代码</code>的按钮就行，完美解决</li>
<li>如果一定要保留，在不知道如何处理的情况下，并且急需交差的时候，可以这么干（当时情况是第二天就得交差，由于一直找不到问题点，加班到晚上10想出来的办法）</li>
</ol>
<h3 id="障眼法："><a href="#障眼法：" class="headerlink" title="障眼法："></a>障眼法：</h3><p>先直接上代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击源代码按钮对于编辑器的内容进行敏感href信息处理 2019.9.24</span></span><br><span class="line">   $(<span class="string">'body'</span>).delegate(<span class="string">".edui-button-wrap"</span>,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> editTxt = $(<span class="string">'.edui-editor-iframeholder'</span>).find(<span class="string">'textarea'</span>)</span><br><span class="line">       <span class="keyword">if</span>(editTxt.length)&#123;</span><br><span class="line">           <span class="keyword">var</span> content = UE.getEditor(<span class="string">'ueditor'</span>).getContent();</span><br><span class="line">           <span class="keyword">var</span> aE = $(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>);</span><br><span class="line">           aE.html(content)</span><br><span class="line">           <span class="comment">// alert(aE)</span></span><br><span class="line">           aE.find(<span class="string">'p.filedata'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">var</span> newA = $(<span class="keyword">this</span>).find(<span class="string">'a'</span>)</span><br><span class="line">               <span class="comment">// alert(newA.attr('href'))</span></span><br><span class="line">               <span class="keyword">if</span>(newA.attr(<span class="string">'href'</span>).indexOf(<span class="string">"http://"</span>)&gt;=<span class="number">0</span> || newA.attr(<span class="string">'href'</span>).indexOf(<span class="string">"https://"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                   <span class="keyword">var</span> arr = newA.attr(<span class="string">'href'</span>).split(<span class="string">'/'</span>)</span><br><span class="line">                   <span class="keyword">var</span> newTxt = <span class="string">''</span></span><br><span class="line">                   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">3</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">                       newTxt +=<span class="string">'/'</span>+arr[i]</span><br><span class="line">                   &#125;</span><br><span class="line">                   newA.attr(<span class="string">'href'</span>,newTxt)</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="comment">// alert(content);</span></span><br><span class="line">           <span class="comment">// 获取转义之后的字符</span></span><br><span class="line">           <span class="keyword">var</span> formatTxt = toTxt(aE.html());</span><br><span class="line">           <span class="comment">// formatTxt = appendBrToPAlfter(formatTxt);</span></span><br><span class="line">           editTxt.html(formatTxt);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*正则表达式 替换括号,尖括号等*/</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">toTxt</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> RexStr = <span class="regexp">/\&lt;|\&gt;|\"|\'|\&amp;/g</span></span><br><span class="line">       str = str.replace(RexStr, <span class="function"><span class="keyword">function</span>(<span class="params">MatchStr</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">switch</span> (MatchStr) &#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"&lt;"</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;lt;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"&gt;"</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;gt;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"\""</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;quot;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"'"</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;#39;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">"&amp;"</span>:</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"&amp;amp;"</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>绑定一个失去焦点的事件，在读取源代码的时候，对于内容进行截断</li>
<li>重新为href 赋值，保证连接无内网地址</li>
<li>去除掉内容里面的特殊标签，</li>
<li>重新为富文本框赋值</li>
</ol>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol>
<li>比较搞笑的解决方式，但是当领导掐着你脖子的时候，解决问题永远是第一位。至少这种方式上线之后，没有反馈出现过问题，各个版本的浏览器都是兼容的，算是逃过一劫</li>
<li>个人建议富文本编辑器有空多去玩玩查看源代码的功能，有时候编辑器的默认设置可能会坑了你，比如百度编辑器默认会加上 p 标签。。。。</li>
</ol>
<h2 id="特殊符号传输后台的转义问题，以及读取数据的问题"><a href="#特殊符号传输后台的转义问题，以及读取数据的问题" class="headerlink" title="特殊符号传输后台的转义问题，以及读取数据的问题"></a>特殊符号传输后台的转义问题，以及读取数据的问题</h2><h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><h2 id="针对-iframe这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式"><a href="#针对-iframe这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式" class="headerlink" title="针对 iframe这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式"></a>针对 <code>iframe</code>这种嵌套框架，在保存的之后，拿不到编辑器内容的兼容处理方式</h2><h3 id="问题复现："><a href="#问题复现：" class="headerlink" title="问题复现："></a>问题复现：</h3><p>​    由于旧后台是使用iframe进行拼接旧后台系统，在保存的时候，表单无法拿到富文本编辑框的内容，并且在读取的时候，会导致一些样式代码被截断导致内容显示不全的问题。</p>
<p>​    我们都知道富文本在数据库存储的一般都是html原文，一般的系统都会对一些 &lt; &gt; \ $ % 这种字符进行转义处理或者拦截。所以我们直接用js传原生文本肯定是不行的，需要进过如下的处理：</p>
<p>存储的时候：</p>
<ol>
<li>转移特殊符号，替换原文本</li>
<li>拦截器拦截检测是否有特殊文本，进行二次转义</li>
<li>存储之前，将转义字符变为原始 &lt; &gt; 等标签，替换内容</li>
<li>将富文本存储到数据库，完成</li>
</ol>
<p>读取的时候：</p>
<ol>
<li>读取数据库的内容</li>
<li>回显内容到富文本编辑器（这一步其实会遇到非常多的奇怪问题，请看下文）</li>
</ol>
<p>​    至于保存的时候，这里的实际情况是，旧版本的ewebeditor，在父iframe也就是表单的父页面使用了一个<code>textarea</code> 标签来保存具体的内容，导致即使我在<code>iframe</code>操作之后，依然会出现问题。</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011124205.png" alt=""></p>
<h3 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h3><p>也是直接上代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ue = UE.getEditor(<span class="string">'ueditor'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化内容</span></span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          ue.setContent($(<span class="string">'#'</span>+QueryStringByName(<span class="string">'id'</span>), parent.document).val())</span><br><span class="line">      &#125;,<span class="number">500</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绑定失去焦点事件</span></span><br><span class="line">  ue.addListener(<span class="string">'blur'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">editor</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> content = UE.getEditor(<span class="string">'ueditor'</span>).getContent();</span><br><span class="line">      <span class="keyword">var</span> aE = $(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>);</span><br><span class="line"></span><br><span class="line">      aE.html(content)</span><br><span class="line">      aE.find(<span class="string">'p.filedata'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> newA = $(<span class="keyword">this</span>).find(<span class="string">'a'</span>)</span><br><span class="line">          <span class="keyword">if</span>(newA.attr(<span class="string">'href'</span>).indexOf(<span class="string">"http://"</span>)&gt;=<span class="number">0</span> || newA.attr(<span class="string">'href'</span>).indexOf(<span class="string">"https://"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> arr = newA.attr(<span class="string">'href'</span>).split(<span class="string">'/'</span>)</span><br><span class="line">              <span class="keyword">var</span> newTxt = <span class="string">''</span></span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">3</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">                  newTxt +=<span class="string">'/'</span>+arr[i]</span><br><span class="line">              &#125;</span><br><span class="line">              newA.attr(<span class="string">'href'</span>,newTxt)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">      content = toTxt(aE.html());</span><br><span class="line">      <span class="comment">//alert(content);</span></span><br><span class="line">      $(<span class="string">'#'</span>+QueryStringByName(<span class="string">'id'</span>), parent.document).html(content)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取search参数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">QueryStringByName</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result=<span class="built_in">window</span>.location.search.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[\?\&amp;]"</span> + name + <span class="string">"=([^\&amp;]+)"</span>, <span class="string">"i"</span>));</span><br><span class="line">      <span class="keyword">if</span>(result==<span class="literal">null</span> || result.length&lt;<span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>在初始化的时候，跑去父窗口拿到数据的文本内容，做了一点点的延时加载。</li>
<li>使用<code>blur</code> 事件做 <code>textarea</code> 和 富文本编辑器的双向同步</li>
<li>同样需要处理内网地址暴露的问题，需要截取内网地址</li>
<li>对于特殊标签转义</li>
</ol>
<h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><ol>
<li>富文本暂存区域，最好选隐藏域的 <code>textarea</code>，使用value 值会出现双引号截取的问题 </li>
<li>小心转义带来的各种问题，一定要记得何时数据会被转义，同时什么阶段的数据内容是什么形式</li>
<li>关注富文本编辑器本身干的一些”<code>杂活</code>“</li>
</ol>
<h2 id="处理百度编辑器粘贴在IE失效的问题（目前未找到解决方案）"><a href="#处理百度编辑器粘贴在IE失效的问题（目前未找到解决方案）" class="headerlink" title="处理百度编辑器粘贴在IE失效的问题（目前未找到解决方案）"></a>处理百度编辑器粘贴在IE失效的问题（目前未找到解决方案）</h2><h3 id="问题复现：-1"><a href="#问题复现：-1" class="headerlink" title="问题复现："></a>问题复现：</h3><p>这也是我要说的重点问题，目前我依然没有找到解决办法，下面的内容都是我的个人尝试，希望找到有过处理经验的人或者有其他方式的办法，有偿感谢！！</p>
<p>第一个问题：在IE当中，使用<code>ctrl + V</code> 是没有任何反应和效果的，而在谷歌的浏览器下面，</p>
<p>第二个问题：在IE中, 复制粘贴word内容无法粘贴图片</p>
<h3 id="无法解决的办法："><a href="#无法解决的办法：" class="headerlink" title="无法解决的办法："></a>无法解决的办法：</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc29uZ3N1L3AvMTE5MTU0NzAuaHRtbA==" title="https://www.cnblogs.com/songsu/p/11915470.html">https://www.cnblogs.com/songsu/p/11915470.html<i class="fa fa-external-link"></i></span> </p>
<p>遇事不决找谷歌，谷歌出了一篇这种文章，试下</p>
<p>大概在<code>ueditor.all.js</code>文件的23881行左右</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bindEvents:&#123;</span><br><span class="line">            <span class="comment">//插入粘贴板的图片，拖放插入图片</span></span><br><span class="line">            <span class="string">'ready'</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">window</span>.FormData &amp;&amp; <span class="built_in">window</span>.FileReader) &#123;</span><br><span class="line">                    domUtils.on(me.body, <span class="string">'paste drop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                        <span class="comment">//判断剪贴板的内容是否包含文本</span></span><br><span class="line">                        <span class="comment">//首先解释一下为什么要判断文本是不是为空</span></span><br><span class="line">                        <span class="comment">//在ctrl+c word中的文字或者图片之后会返回1种(image/png)或者4种type(text/plain,text/html,text/rtf,image/png)类型的对象</span></span><br><span class="line">                        <span class="comment">//为了兼容4种格式的情况，做了如下的判断</span></span><br><span class="line">                        <span class="comment">//如下代码：e.originalEvent.clipboardData.items获得剪贴板的内容</span></span><br><span class="line">                        <span class="comment">//当粘贴了文本之后text是不为空的，同时也会返回当前文本的图片类型</span></span><br><span class="line">                        <span class="comment">//如果有文字的话不做任何的处理，如果只粘贴图片的话文本一定是空的，包括复制的桌面图片或者截图的图片</span></span><br><span class="line">                        <span class="comment">// var text = e.originalEvent.clipboardData.getData("text");</span></span><br><span class="line">                        <span class="comment">// if(text == "")&#123;</span></span><br><span class="line">                        <span class="comment">//     var items=e.originalEvent.clipboardData.items;</span></span><br><span class="line">                        <span class="comment">//     for (var i = 0, len = items.length; i &lt; len; i++) &#123;</span></span><br><span class="line">                        <span class="comment">//         var item = items[i];</span></span><br><span class="line">                        <span class="comment">//         if ( item.kind == 'file' &amp;&amp; item.type.indexOf('image/') !== -1 ) &#123;</span></span><br><span class="line">                        <span class="comment">//             var blob = item.getAsFile();</span></span><br><span class="line">                        <span class="comment">//             getBase64(blob, function( base64 ) &#123;</span></span><br><span class="line">                        <span class="comment">//                 //sendAndInsertImage(base64,me); 上传到服务器</span></span><br><span class="line">                        <span class="comment">//                 setBase64Image(base64,me);</span></span><br><span class="line">                        <span class="comment">//             &#125;);</span></span><br><span class="line">                        <span class="comment">//             //阻止默认事件, 避免重复添加;</span></span><br><span class="line">                        <span class="comment">//             e.originalEvent.preventDefault();</span></span><br><span class="line">                        <span class="comment">//         &#125;;</span></span><br><span class="line">                        <span class="comment">//     &#125;</span></span><br><span class="line">                        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//TODO 粘贴图片的根本问题点 20201010</span></span><br><span class="line">                        <span class="keyword">var</span> hasImg = <span class="literal">false</span>,</span><br><span class="line">                            items;</span><br><span class="line">                        <span class="comment">//获取粘贴板文件列表或者拖放文件列表</span></span><br><span class="line">                        items = e.type == <span class="string">'paste'</span> ? getPasteImage(e):getDropImage(e);</span><br><span class="line">                        <span class="keyword">if</span>(items)&#123;</span><br><span class="line">                            <span class="keyword">var</span> len = items.length,</span><br><span class="line">                                file;</span><br><span class="line">                            <span class="keyword">while</span> (len--)&#123;</span><br><span class="line">                                file = items[len];</span><br><span class="line">                                <span class="keyword">if</span>(file.getAsFile) file = file.getAsFile();</span><br><span class="line">                                <span class="keyword">if</span>(file &amp;&amp; file.size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                    sendAndInsertFile(file, me);</span><br><span class="line">                                    hasImg = <span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            hasImg &amp;&amp; e.preventDefault();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">//取消拖放图片时出现的文字光标位置提示</span></span><br><span class="line">                    domUtils.on(me.body, <span class="string">'dragover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(e.dataTransfer.types[<span class="number">0</span>] == <span class="string">'Files'</span>) &#123;</span><br><span class="line">                            e.preventDefault();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//设置loading的样式</span></span><br><span class="line">                    utils.cssRule(<span class="string">'loading'</span>,</span><br><span class="line">                        <span class="string">'.loadingclass&#123;display:inline-block;cursor:default;background: url(\''</span></span><br><span class="line">                            + <span class="keyword">this</span>.options.themePath</span><br><span class="line">                            + <span class="keyword">this</span>.options.theme +<span class="string">'/images/loading.gif\') no-repeat center center transparent;border:1px solid #cccccc;margin-left:1px;height: 22px;width: 22px;&#125;\n'</span> +</span><br><span class="line">                            <span class="string">'.loaderrorclass&#123;display:inline-block;cursor:default;background: url(\''</span></span><br><span class="line">                            + <span class="keyword">this</span>.options.themePath</span><br><span class="line">                            + <span class="keyword">this</span>.options.theme +<span class="string">'/images/loaderror.png\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;'</span> +</span><br><span class="line">                            <span class="string">'&#125;'</span>,</span><br><span class="line">                        <span class="keyword">this</span>.document);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>针对内容进行的处理操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPasteImage</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">return</span> e.clipboardData &amp;&amp; e.clipboardData.items &amp;&amp; e.clipboardData.items.length == <span class="number">1</span> &amp;&amp; <span class="regexp">/^image\//</span>.test(e.clipboardData.items[<span class="number">0</span>].type) ? e.clipboardData.items:<span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">getDropImage</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  e.dataTransfer &amp;&amp; e.dataTransfer.files ? e.dataTransfer.files:<span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//TODO 执行插入图片的操作 20201010</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">setBase64Image</span>(<span class="params">base64, editor</span>) </span>&#123;</span><br><span class="line">       editor.execCommand(<span class="string">'insertimage'</span>, &#123;</span><br><span class="line">           src: base64,</span><br><span class="line">           _src: base64</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//TODO 获得base64 20201010</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">getBase64</span>(<span class="params">blob, callback</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> a = <span class="keyword">new</span> FileReader();</span><br><span class="line">       a.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">           callback(e.target.result);</span><br><span class="line">       &#125;;</span><br><span class="line">       a.readAsDataURL(blob);</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>

<p>博客的方式是读取二进制流为Blob,然后调用原始的上传接口进行兼容，然而，我在直接套用之后，连谷歌的粘贴也失效了<strong>（坑爹！）</strong></p>
<p>不用怀疑，肯定是：<code>getPasteImage()</code>中没有拿到想要的结果，所以我直接<code>alert</code>打印想要的内容，看下什么内容</p>
<p>加入代码<code>console.log(e.clipboardData)</code>看下IE什么效果（注意要使用高版本IE）</p>
<blockquote>
<p> 记得在测试之前，在粘贴板粘贴带图片内容的word内容，或者截个图粘贴到IE的富文本编辑框</p>
</blockquote>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011132122.png" alt=""></p>
<p>不出所料，没有内容，我们直接打印 e 事件对象，看看有没有想要的内容</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011132536.png" alt=""></p>
<p>错了，使用console：</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011133204.png" alt=""></p>
<p>说实话，看不懂，凭感觉这里的<code>dataTransfer</code>没有内容，基本上是找不到如何获取粘贴板数据的点</p>
<p>所以个人判断是IE浏览器本身就对这种粘贴操作没有进行兼容或者处理（万恶的IE浏览器）</p>
<p>至此，我知道自己的能力不足，无法解决这个问题，所以跑去问前端了，然后前端百度一圈下来，和我说：”要不换个编辑器？”</p>
<p>我没有死心，继续搜索</p>
<h3 id="其他方式："><a href="#其他方式：" class="headerlink" title="其他方式："></a>其他方式：</h3><p>其实有其他的组织或者公司已经对于这种word的上传问题进行了解决</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L215Zm15Zm15Zm15Zi9hcnRpY2xlL2RldGFpbHMvMTgzOTkzMjk=" title="https://blog.csdn.net/myfmyfmyfmyf/article/details/18399329">ueditor文本编辑器支持ctrl+v图片文字样式<i class="fa fa-external-link"></i></span></p>
<p>总结：</p>
<ol>
<li>思路不错，但是基本属于闭门造车，并且还要安装一个exe的Active控件，无法解决问题</li>
<li>自己重写一个Active控件兼容处理</li>
</ol>
<p><span class="exturl" data-url="aHR0cDovL2Jsb2cubmNtZW0uY29tL3dvcmRwcmVzcy8yMDE5LzA4LzA3LyVFNSVBRiU4QyVFNiU5NiU4NyVFNiU5QyVBQyVFNyVCQyU5NiVFOCVCRSU5MSVFNSU5OSVBOCVFNyVCMiU5OCVFOCVCNCVCNHdvcmQlRTUlODYlODUlRTUlQUUlQjkv" title="http://blog.ncmem.com/wordpress/2019/08/07/%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%B2%98%E8%B4%B4word%E5%86%85%E5%AE%B9/">富文本编辑器粘贴word内容<i class="fa fa-external-link"></i></span></p>
<p>总结：</p>
<ol>
<li>其他公司二次开发，商用版本</li>
<li>个人版本要300多一年，比较麻烦</li>
<li>也是基于word的上传开发了插件，并且需要安装word上传的控件</li>
<li>感兴趣可以下载看下，localhost 和 “127.0.0.1” 可以正常上传和使用</li>
</ol>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWFuZ3poaS9wLzM1NzY1MjcuaHRtbA==" title="https://www.cnblogs.com/yangzhi/p/3576527.html">UEditor单独图片上传组件！适用IE,Chrome,firefox.<i class="fa fa-external-link"></i></span></p>
<p>总结：</p>
<ol>
<li>不是一码事，针对上传操作做了一些兼容和优化而已，无法解决粘贴的问题</li>
</ol>
<p>官方Github:<br>问题描述：从word中复制的图片粘贴到UEditor中以后不能正常显示，work图片转存的按钮也不可用。</p>
<p>解决方案：参看 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZleC10ZWFtL3VlZGl0b3IvaXNzdWVzLzI4ODM=" title="https://github.com/fex-team/ueditor/issues/2883">ISSUE<i class="fa fa-external-link"></i></span></p>
<p>总结：</p>
<ol>
<li>虽然官方的ISSUE 有人提过了，但是我访问404 啊。。。。</li>
<li>现在已经邮箱打扰，不知道给不给我这个菜鸟回复。。。。</li>
</ol>
<p>经过上面的尝试之后，发现还是没有特别好的解决方式，于是反馈给上级，不让问题留在自己手里。。。。。</p>
<p>连官方那边都找不到办法，有点万念俱灰，于是把问题往上抛了，八成需要换编辑器，又有的忙了。。。。</p>
<h2 id="分享："><a href="#分享：" class="headerlink" title="分享："></a>分享：</h2><p>说了这么多，其实我最想说的是，解决问题建议各位一定要留下文档记录，哪怕是如何解决的也好。</p>
<p>我是一个后端的开发人员，但是却被安排到前端去处理前端的兼容性问题，其实当时顶着非常大的压力的，客户催得紧，经理也天天问我进度，辛好公司有一位干过全栈的大神在，我的许多奇葩的样式错乱和按钮点击问题都是找他帮忙解决的，我对IE的各种奇怪现象其实挺恶心的，最后还是拖累同事陪我加班到十点解决上面的暴露内网的问题。在解决之后，我说了这么一句话：“我这辈子都不想碰到IE了”，但是那位全栈的同事却和我说：“怕什么，我连IE6的兼容性都搞过，不是照样搞好，这些问题解决之后，这就是属于你的经验，你不断积累经验，才能比别人更多优势”，这对我今年的工作态度产生了很多的工作影响，我不在思考为了工作而工作，而是思考为了自己而工作，希望我的话对大家有帮助。</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201011125214.png" alt=""></p>
<h1 id="最后总结："><a href="#最后总结：" class="headerlink" title="最后总结："></a>最后总结：</h1><p>就以我这个老掉牙的系统来说，目前百度的编辑器兼容和支持是最好的，实在不想再换别的浏览器，或者说换之前再挣扎一下，所以写下。</p>
<p>欢迎各位前端大神指教，帮助一下我这个后端临时抽来解决前端问题的人QAQ</p>
<p>如果有好的解决方式，欢迎拍砖</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>百度编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构和算法的一个留坑</title>
    <url>/2020/10/27/study/</url>
    <content><![CDATA[<h1 id="1-数据结构与算法入门"><a href="#1-数据结构与算法入门" class="headerlink" title="1. 数据结构与算法入门"></a>1. 数据结构与算法入门</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早之前做的笔记了，做一个备忘</p>
<a id="more"></a>

<h2 id="1-1-经典算法问题："><a href="#1-1-经典算法问题：" class="headerlink" title="1.1 经典算法问题："></a>1.1 经典算法问题：</h2><ol>
<li>汉诺塔</li>
<li>八皇后问题</li>
<li>马踏棋盘</li>
</ol>
<h2 id="1-2-字符串匹配"><a href="#1-2-字符串匹配" class="headerlink" title="1.2 字符串匹配"></a>1.2 字符串匹配</h2><h3 id="1-2-1-暴力匹配"><a href="#1-2-1-暴力匹配" class="headerlink" title="1.2.1 暴力匹配"></a>1.2.1 暴力匹配</h3><h3 id="1-2-2-KMP算法"><a href="#1-2-2-KMP算法" class="headerlink" title="1.2.2 KMP算法"></a>1.2.2 KMP算法</h3><h2 id="1-3-数据结构和算法重要性"><a href="#1-3-数据结构和算法重要性" class="headerlink" title="1.3 数据结构和算法重要性"></a>1.3 数据结构和算法重要性</h2><ol>
<li>算法是程序灵魂</li>
<li>内存计算框架</li>
</ol>
<h2 id="1-4-数据结构与算法关系"><a href="#1-4-数据结构与算法关系" class="headerlink" title="1.4 数据结构与算法关系"></a>1.4 数据结构与算法关系</h2><h1 id="2-实际算法问题："><a href="#2-实际算法问题：" class="headerlink" title="2. 实际算法问题："></a>2. 实际算法问题：</h1><h2 id="2-1-str-replaceAll-str"><a href="#2-1-str-replaceAll-str" class="headerlink" title="2.1 str.replaceAll( str )"></a>2.1 str.replaceAll( str )</h2><h3 id="2-1-1-问题："><a href="#2-1-1-问题：" class="headerlink" title="2.1.1 问题："></a>2.1.1 问题：</h3><p>试写出单链表表示的字符串类以及字符串结点类的定义，并且依次实现它的构造函数，以及计算串的长度，串赋值，判断两串相等，求子串，两串连接，求子串在串中位置等七个成员函数</p>
<h2 id="2-2-其他几个问题："><a href="#2-2-其他几个问题：" class="headerlink" title="2.2 其他几个问题："></a>2.2 其他几个问题：</h2><ol>
<li>丢手帕问题</li>
<li>磁盘问题</li>
<li>公交车</li>
<li>画图</li>
<li>球和篮子</li>
<li>扔石头</li>
<li>修路问题，最小路径</li>
<li>最短路径问题</li>
<li>汉诺塔</li>
<li>八皇后</li>
</ol>
<h2 id="2-3-线性结构与非线性结构"><a href="#2-3-线性结构与非线性结构" class="headerlink" title="2.3 线性结构与非线性结构"></a>2.3 线性结构与非线性结构</h2><ol>
<li>数据与元素一对一的线性关系</li>
<li>顺序存储，元素都是连续的</li>
<li>链式存储，元素是不连续的</li>
<li>数组，队列，链表和栈</li>
</ol>
<h3 id="2-3-1-非线性结构"><a href="#2-3-1-非线性结构" class="headerlink" title="2.3.1 非线性结构"></a>2.3.1 非线性结构</h3><p>二维数组，多维数组，广义表，树结构，图结构</p>
<h1 id="3-稀疏数组和队列"><a href="#3-稀疏数组和队列" class="headerlink" title="3. 稀疏数组和队列"></a>3. 稀疏数组和队列</h1><h2 id="3-1-稀疏数组的处理方法："><a href="#3-1-稀疏数组的处理方法：" class="headerlink" title="3.1 稀疏数组的处理方法："></a>3.1 稀疏数组的处理方法：</h2><ol>
<li>记录数组一共几行几列，有多少个不同的值</li>
<li>把具有不同值的元素的行列记录在一个小规模数组</li>
</ol>
<h3 id="3-1-1-二维数组转稀疏数组的方法"><a href="#3-1-1-二维数组转稀疏数组的方法" class="headerlink" title="3.1.1 二维数组转稀疏数组的方法"></a>3.1.1 二维数组转稀疏数组的方法</h3><ol>
<li>遍历原始二维数组，保留有效个数</li>
<li>根据sum创建稀疏数组spareArr int[sum+1][3]</li>
<li>二维数组的有效数据存入到稀疏数组</li>
</ol>
<h2 id="3-2-稀疏数组转二维数组："><a href="#3-2-稀疏数组转二维数组：" class="headerlink" title="3.2 稀疏数组转二维数组："></a>3.2 稀疏数组转二维数组：</h2><ol>
<li>先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，</li>
<li>读取稀疏数组的后几行数据，并赋值给原始的二维数组</li>
</ol>
<h1 id="4-稀疏数组的Java代码实现"><a href="#4-稀疏数组的Java代码实现" class="headerlink" title="4. 稀疏数组的Java代码实现"></a>4. 稀疏数组的Java代码实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 稀疏数组</span></span><br><span class="line"><span class="comment"> * 1. 需要将二维数组转为稀疏数组存储</span></span><br><span class="line"><span class="comment"> * 2. 稀疏数组进行保存（文件读写）</span></span><br><span class="line"><span class="comment"> * 3. 读取文件恢复稀疏数组（文件读写）</span></span><br><span class="line"><span class="comment"> * 4. 将稀疏数组转回二维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: SpareceArray</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> structAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 稀疏数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/19 14:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpareceArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用稀疏数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] twoArrayConvertSparecArray = twoArrayConvertSparecArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 稀疏数组如何转为二维住</span></span><br><span class="line">        SparecArrayConverttwoArray(twoArrayConvertSparecArray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 稀疏数组转为二维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SparecArrayConverttwoArray</span><span class="params">(<span class="keyword">int</span>[][] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 根据第一行数据还原出二维数组的行与列</span></span><br><span class="line">        <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[array[<span class="number">0</span>][<span class="number">0</span>]][array[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            result[array[i][<span class="number">0</span>]][array[i][<span class="number">1</span>]] = array[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printArray(array);</span><br><span class="line">        printArray(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 稀疏数组转为二维数组的办法</span></span><br><span class="line"><span class="comment">     * 1. 创建二维数组，并且加入数据</span></span><br><span class="line"><span class="comment">     * 2.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] twoArrayConvertSparecArray() &#123;</span><br><span class="line">        <span class="comment">// 将二维数组转为稀疏数组 初始化为 11 11</span></span><br><span class="line">        <span class="keyword">int</span>[][] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">// 在二维数组放两个子</span></span><br><span class="line">        array[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">        array[<span class="number">3</span>][<span class="number">7</span>] = <span class="number">11</span>;</span><br><span class="line">        array[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">11</span>;</span><br><span class="line">        printArray(array);</span><br><span class="line">        <span class="comment">// 计算有几个有效数据</span></span><br><span class="line">        <span class="comment">// 存储有几个有效数据</span></span><br><span class="line">        <span class="keyword">int</span> sumCount = <span class="number">0</span>;</span><br><span class="line">        sumCount = calcuArrSize(array, sumCount);</span><br><span class="line">        <span class="comment">// 创建稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] spareceArray = <span class="keyword">new</span> <span class="keyword">int</span>[sumCount+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一行为 个数 棋盘的行 棋盘的列</span></span><br><span class="line">        spareceArray[<span class="number">0</span>][<span class="number">0</span>] = array.length;</span><br><span class="line">        spareceArray[<span class="number">0</span>][<span class="number">1</span>] = array[<span class="number">0</span>].length;</span><br><span class="line">        spareceArray[<span class="number">0</span>][<span class="number">2</span>] = sumCount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 稀疏数组存储数据</span></span><br><span class="line">        <span class="comment">//count 用于记录是第几个非0数据</span></span><br><span class="line">        <span class="keyword">int</span> noZeroCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    noZeroCount++;</span><br><span class="line">                    <span class="comment">// 存储第几行 第几列 值为多少</span></span><br><span class="line">                    spareceArray[noZeroCount][<span class="number">0</span>] = i;</span><br><span class="line">                    spareceArray[noZeroCount][<span class="number">1</span>] = j;</span><br><span class="line">                    spareceArray[noZeroCount][<span class="number">2</span>] = array[i][j];</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> spareceArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算有效数据的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 原有的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sumCount 计算个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calcuArrSize</span><span class="params">(<span class="keyword">int</span>[][] array, <span class="keyword">int</span> sumCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sumCount++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sumCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印数组的快捷方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[][] array)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"-----------------我是分割线-----------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                System.out.print(array[i][j] + <span class="string">"\t"</span> );</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.err.println(<span class="string">"-----------------我是分割线-----------------"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-队列："><a href="#5-队列：" class="headerlink" title="5. 队列："></a>5. 队列：</h1><h2 id="5-1-数组模拟队列"><a href="#5-1-数组模拟队列" class="headerlink" title="5.1 数组模拟队列"></a>5.1 数组模拟队列</h2><h3 id="5-1-1-思路分析：addQueue"><a href="#5-1-1-思路分析：addQueue" class="headerlink" title="5.1.1 思路分析：addQueue"></a>5.1.1 思路分析：addQueue</h3><ol>
<li>将尾指针 rear + 1 ， 表示入队。当 rear == front 表示空队列</li>
<li>如果rear 等于队列 maxSize - 1， 表示队列满，否则可以增加元素</li>
</ol>
<h3 id="5-1-2-思路分析：removeQueue"><a href="#5-1-2-思路分析：removeQueue" class="headerlink" title="5.1.2 思路分析：removeQueue"></a>5.1.2 思路分析：removeQueue</h3><ol>
<li>将队头指针进行出队操作</li>
<li>每次移除都需要队头指针 +1</li>
<li>将队列后面的数据向前拷贝</li>
</ol>
<h2 id="5-2-JAVA代码实现数组底层的队列"><a href="#5-2-JAVA代码实现数组底层的队列" class="headerlink" title="5.2 JAVA代码实现数组底层的队列"></a>5.2 JAVA代码实现数组底层的队列</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.rowset.serial.SerialArray;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用数组实现队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: MyQueue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> structAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 使用数组实现队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队头指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列不能小于或者等于 0"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意此处为什么是-1 ：因为队列的头部不应该执行队伍的第一个元素，因为此时是出于队列的头部，并没有数据</span></span><br><span class="line">        rear = front = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.arr = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">this</span>.maxSize = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队操作：</span></span><br><span class="line"><span class="comment">     * 1. 队伍头部的元素删除即，使 return arr[front]</span></span><br><span class="line"><span class="comment">     * 2. 将队伍后面的元素向前拷贝</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列为空，不能移除"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rear; i++) &#123;</span><br><span class="line">            arr[i - <span class="number">1</span>] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        arr[--rear] = 0;</span></span><br><span class="line">        <span class="keyword">return</span> arr[++front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾+1 入队操作</span></span><br><span class="line"><span class="comment">     * 需要判断队列是否为空并且是否不满</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否为空或者是否已经满了</span></span><br><span class="line">        <span class="keyword">boolean</span> empty = isFull();</span><br><span class="line">        <span class="keyword">if</span> (!empty) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列已满，无法添加"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[++rear] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否可以加入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear != maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(Arrays.toString(<span class="keyword">this</span>.arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyQueue myQueue = <span class="keyword">new</span> MyQueue(<span class="number">3</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">2</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">5</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">6</span>);</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        <span class="comment">// 这里出现问题，因为队头和队尾都指向队列的尾部，会出现无法添加和无法删除掉问题</span></span><br><span class="line">        myQueue.addQueue(<span class="number">6</span>);</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line"></span><br><span class="line">        myQueue.showQueue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-2-1-数组队列的弊端"><a href="#5-2-1-数组队列的弊端" class="headerlink" title="5.2.1 数组队列的弊端"></a>5.2.1 数组队列的弊端</h3><ul>
<li>队头和队尾都执行队列的尾部时候，无法添加也无法删除<ul>
<li>数组只能使用一次</li>
</ul>
</li>
<li>数组复用性不好</li>
</ul>
<h2 id="5-3-数组实现循环队列"><a href="#5-3-数组实现循环队列" class="headerlink" title="5.3  数组实现循环队列"></a>5.3  数组实现循环队列</h2><h3 id="5-3-1-如何判定队列已经满了"><a href="#5-3-1-如何判定队列已经满了" class="headerlink" title="5.3.1 如何判定队列已经满了"></a>5.3.1 如何判定队列已经满了</h3><p>算法</p>
<blockquote>
<p>( rear + 1 ) % maxSize == front</p>
</blockquote>
<h3 id="5-3-2-如何判定队列是空的"><a href="#5-3-2-如何判定队列是空的" class="headerlink" title="5.3.2 如何判定队列是空的"></a>5.3.2 如何判定队列是空的</h3><p><font color='red'><strong>rear == front</strong></font></p>
<h3 id="5-3-3-如何判定有效个数"><a href="#5-3-3-如何判定有效个数" class="headerlink" title="5.3.3 如何判定有效个数"></a>5.3.3 如何判定有效个数</h3><blockquote>
<p>举例：</p>
<p>maxSize = 7</p>
<p>front = 5</p>
<p>rear =  5 </p>
<p>maxSize + (rear+1) - front % maxSize</p>
</blockquote>
<h2 id="5-3-4-使用数组实现循环队列的方式2"><a href="#5-3-4-使用数组实现循环队列的方式2" class="headerlink" title="5.3.4 使用数组实现循环队列的方式2"></a>5.3.4 使用数组实现循环队列的方式2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用数组实现队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: MyQueue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> structAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 使用数组实现队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/23 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队头指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列不能小于或者等于 0"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意此处为什么是-1 ：因为队列的头部不应该执行队伍的第一个元素，因为此时是出于队列的头部，并没有数据</span></span><br><span class="line">        rear = front = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.arr = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">this</span>.maxSize = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队操作：</span></span><br><span class="line"><span class="comment">     * 1. 队伍头部的元素删除即，使 return arr[front]</span></span><br><span class="line"><span class="comment">     * 2. 将队伍后面的元素向前拷贝</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列为空，不能移除"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        for (int i = 1; i &lt; rear; i++) &#123;</span></span><br><span class="line"><span class="comment">//            arr[i - 1] = arr[i];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        arr[--rear] = 0;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr[++front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队尾+1 入队操作</span></span><br><span class="line"><span class="comment">     * 需要判断队列是否为空并且是否不满</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否为空或者是否已经满了</span></span><br><span class="line">        <span class="keyword">boolean</span> empty = isFull();</span><br><span class="line">        <span class="keyword">if</span> (empty) &#123;</span><br><span class="line">            System.err.println(<span class="string">"队列已满，无法添加"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[rear] = val;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否可以加入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return rear != maxSize - 1;</span></span><br><span class="line">        <span class="comment">// 这是最新的一种判定方式： rear =</span></span><br><span class="line">        <span class="keyword">return</span> (rear  + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"队列为空，不能遍历"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; front + size(); i++) &#123;</span><br><span class="line">            System.err.print(arr[i % maxSize] + <span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.err.println(Arrays.toString(this.arr));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + maxSize - front) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyQueue myQueue = <span class="keyword">new</span> MyQueue(<span class="number">8</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">2</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">55</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">35</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">25</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">65</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">85</span>);</span><br><span class="line">        myQueue.addQueue(<span class="number">75</span>);</span><br><span class="line"><span class="comment">//        myQueue.addQueue(6);</span></span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        myQueue.removeQueue();</span><br><span class="line">        <span class="comment">// 这里出现问题，因为队头和队尾都指向队列的尾部，会出现无法添加和无法删除掉问题</span></span><br><span class="line"><span class="comment">//        myQueue.addQueue(6);</span></span><br><span class="line"><span class="comment">//        myQueue.removeQueue();</span></span><br><span class="line"></span><br><span class="line">        myQueue.showQueue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-链表"><a href="#6-链表" class="headerlink" title="6. 链表"></a>6. 链表</h1><h2 id="6-1-使用自制的链表处理"><a href="#6-1-使用自制的链表处理" class="headerlink" title="6.1 使用自制的链表处理"></a>6.1 使用自制的链表处理</h2><h3 id="6-1-1-使用java代码实现链表"><a href="#6-1-1-使用java代码实现链表" class="headerlink" title="6.1.1 使用java代码实现链表"></a>6.1.1 使用java代码实现链表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单链表实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxudong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: SpareceArray</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> structAlgorithms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 单链表实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/19 14:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingelQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HeroNode heroNode1 = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">"111"</span>, <span class="string">"111"</span>);</span><br><span class="line">        HeroNode heroNode2 = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">"222"</span>, <span class="string">"222"</span>);</span><br><span class="line">        HeroNode heroNode3 = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">"333"</span>, <span class="string">"333"</span>);</span><br><span class="line">        HeroNode heroNode4 = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">"444"</span>, <span class="string">"444"</span>);</span><br><span class="line">        SingelLinkedList singelLinkedList = <span class="keyword">new</span> SingelLinkedList();</span><br><span class="line">        singelLinkedList.add(heroNode1);</span><br><span class="line">        singelLinkedList.add(heroNode2);</span><br><span class="line">        singelLinkedList.add(heroNode3);</span><br><span class="line">        singelLinkedList.add(heroNode4);</span><br><span class="line">        singelLinkedList.list();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingelLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在插入的使用最新的方式：</span></span><br><span class="line"><span class="comment">     * 根据id编号进行排序</span></span><br><span class="line"><span class="comment">     * 1.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 由于头结点不能动，需要使用</span></span><br><span class="line">        HeroNode heroNode = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(heroNode.getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            heroNode = heroNode.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        heroNode.setNext(node);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HeroNode heroNode = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(heroNode.getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.err.println(heroNode);</span><br><span class="line">            heroNode = heroNode.getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造函数的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> HeroNode next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化构造函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> no</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nickName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no, String name, String nickName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickName</span><span class="params">(String nickName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(HeroNode next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HeroNode&#123;"</span> +</span><br><span class="line">                <span class="string">"no="</span> + no +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", nickName='"</span> + nickName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", next="</span> + next +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-1-2-使用排序的方式插入链表改进上述链表"><a href="#6-1-2-使用排序的方式插入链表改进上述链表" class="headerlink" title="6.1.2 使用排序的方式插入链表改进上述链表"></a>6.1.2 使用排序的方式插入链表改进上述链表</h3><ol>
<li>这里使用了查找的方式，判断是否相等，遍历的时候使用头指针的下一个节点进行遍历操作</li>
<li>插入节点使用被插入的节点的下一个节点指向当前遍历节点的下一个节点，当前循环节点指向指向当前被插入的节点</li>
<li>如果节点相等，给出提示</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在插入的使用最新的方式：</span></span><br><span class="line"><span class="comment">     * 使用id编号进行排序，在查找的时候使用id进行排序查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(HeroNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 由于头结点不能动，需要使用</span></span><br><span class="line">        HeroNode heroNode = head;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(heroNode.getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 寻找编号大于被插入节点的节点，因为只能找被插入的节点的上一个节点</span></span><br><span class="line">            <span class="keyword">if</span>(heroNode.getNext().getNo() &gt; node.getNo())&#123;</span><br><span class="line">                <span class="comment">// 获取原来数据的下一个节点一个节点</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(heroNode.getNext().getNo() == node.getNo())&#123;</span><br><span class="line">                <span class="comment">//说明希望添加的heroNode的编号已然存在</span></span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            heroNode = heroNode.getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            System.err.println(<span class="string">"被插入的节点已经存在"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node.setNext(heroNode.getNext());</span><br><span class="line">            heroNode.setNext(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-1-3-删除节点有多少种情况"><a href="#6-1-3-删除节点有多少种情况" class="headerlink" title="6.1.3 删除节点有多少种情况"></a>6.1.3 删除节点有多少种情况</h3><ol>
<li><p>如果删除的是头节点</p>
</li>
<li><p>如果是中间的节点，需要将被删除的上一个节点执行被删除节点的下一个节点</p>
</li>
<li><p>如果在尾部，删除尾部节点</p>
</li>
</ol>
<h3 id="6-1-4-删除的第一种方式实现办法"><a href="#6-1-4-删除的第一种方式实现办法" class="headerlink" title="6.1.4 删除的第一种方式实现办法"></a>6.1.4 删除的第一种方式实现办法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除方式，</span></span><br><span class="line"><span class="comment">     * 第一种方式： 使用编号删除对应的节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> no 节点编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">// 如果是头节点指向节点，需要变更头节点指向节点再删除节点</span></span><br><span class="line">        <span class="keyword">if</span> (temp.getNext().getNo() == no) &#123;</span><br><span class="line">            <span class="comment">// 指向下一个节点的下一个节点</span></span><br><span class="line">            head.setNext(head.getNext().getNext());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否找到了节点</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.getNext().getNo() == no) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到节点进行替换</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            temp.setNext(temp.getNext().getNext());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.err.println(<span class="string">"没有找到对应编号的英雄"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-1-5-删除的第二种方式分析："><a href="#6-1-5-删除的第二种方式分析：" class="headerlink" title="6.1.5 删除的第二种方式分析："></a>6.1.5 删除的第二种方式分析：</h3><ol>
<li><p>删除根据第几个来删除，必须我想删除第一个节点</p>
<ol>
<li>第一个节点对应了头节点，需要对于头指针指向进行后移</li>
</ol>
</li>
<li><p>其余根据no编号删除雷同,只需要编号判断改为第几个判断即可</p>
</li>
</ol>
<h2 id="6-2-关于链表的面试题（重点）"><a href="#6-2-关于链表的面试题（重点）" class="headerlink" title="6.2 关于链表的面试题（重点）"></a>6.2 关于链表的面试题（重点）</h2><ol>
<li><p>单链表当中有效节点的个数</p>
</li>
<li><p>获取倒数第n个节点的节点</p>
</li>
<li><p>反转链表</p>
<ol>
<li>定义一个节点：反转用的头</li>
<li>从头到尾遍历原来链表，每遍历一个节点，就取出，放到新的链表前面</li>
<li>将旧链表的下一个节点指向逆序链表的下一个节点</li>
</ol>
</li>
<li><p>从尾部到头部逆序打印链表</p>
<ol>
<li>第一种方法：显逆序，逆序之后打印节点（不可取）</li>
<li>使用栈实现：将所有的节点加入栈当中，然后使用栈进行打印</li>
</ol>
</li>
</ol>
<h3 id="6-2-1-节点个数的实现"><a href="#6-2-1-节点个数的实现" class="headerlink" title="6.2.1 节点个数的实现"></a>6.2.1 节点个数的实现</h3><p>较为简单，遍历统计遍历几次即可</p>
<h3 id="6-2-2-倒数第N个节点"><a href="#6-2-2-倒数第N个节点" class="headerlink" title="6.2.2 倒数第N个节点"></a>6.2.2 倒数第N个节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取倒数第index个节点的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">getLastIndexHeroNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取链表的总个数</span></span><br><span class="line">        <span class="keyword">int</span> count = count();</span><br><span class="line">        <span class="keyword">if</span>(index &lt;= <span class="number">0</span> || index &gt; count)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode temp = head.getNext();</span><br><span class="line">        <span class="comment">// 2. 根据size - index , 循环获取倒数第 index 节点</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> size = count-index;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == size) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 遍历拿到数据，返回结果</span></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-3-反转链表"><a href="#6-2-3-反转链表" class="headerlink" title="6.2.3 反转链表"></a>6.2.3 反转链表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转节点</span></span><br><span class="line"><span class="comment">     * 1. 定义一个反转节点的head</span></span><br><span class="line"><span class="comment">     * 2. 遍历原来的链表，使用类似入栈的方式，将每个节点接入到反转节点的指向节点，被接入节点指向原来的节点</span></span><br><span class="line"><span class="comment">     * 3. 反转节点完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.getNext() == <span class="keyword">null</span> || head.getNext().getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"无需反转"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode reverseHead = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">        HeroNode temp = head.getNext();</span><br><span class="line">        HeroNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 让当前节点接到新链表的下一个节点</span></span><br><span class="line">            next = temp.getNext();</span><br><span class="line">            temp.setNext(reverseHead.getNext());</span><br><span class="line">            reverseHead.setNext(temp);</span><br><span class="line">            temp = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用反转节点替换原来的节点</span></span><br><span class="line">        head.setNext(reverseHead.getNext());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-4-反序打印链表"><a href="#6-2-4-反序打印链表" class="headerlink" title="6.2.4 反序打印链表"></a>6.2.4 反序打印链表</h3><ol>
<li>需要使用到栈这种结构，将节点压进栈当中，然后从栈中取数据进行遍历</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序打印链表里面的内容</span></span><br><span class="line"><span class="comment">     * 使用的栈结构进行存放数据，然后使用栈进行输出操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reversePrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.err.println();</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.getNext() == <span class="keyword">null</span> || head.getNext().getNext() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"无需反转打印"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode hero = head.getNext();</span><br><span class="line">        Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (hero != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(hero);</span><br><span class="line">            hero = hero.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(stack.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-5-合并两个链表"><a href="#6-2-5-合并两个链表" class="headerlink" title="6.2.5 合并两个链表"></a>6.2.5 合并两个链表</h3><ol>
<li>遍历两个链表，先将第一个链表进行插入，然后根据第二个链表进行相同的插入操作s</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并两个链表，合并之后依然有序</span></span><br><span class="line"><span class="comment">     * 1. 计算两个链表的个数</span></span><br><span class="line"><span class="comment">     * 2. 循环总数，判断两个节点的当前节点更大，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingelLinkedList <span class="title">mergeList</span><span class="params">(SingelLinkedList list1, SingelLinkedList list2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="keyword">null</span> &amp;&amp; list2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line">        SingelLinkedList result = <span class="keyword">new</span> SingelLinkedList();</span><br><span class="line">        HeroNode next1 = list1.getHead();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (next1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            HeroNode next = next1.getNext();</span><br><span class="line">            SingelLinkedList.addByOrder(result, next1);</span><br><span class="line">            next1 = next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode next2 = list2.getHead().getNext();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            HeroNode next = next2.getNext();</span><br><span class="line">            SingelLinkedList.addByOrder(result, next2);</span><br><span class="line">            next2 = next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-3-分析双向链表的遍历，添加、删除的操作思路"><a href="#6-3-分析双向链表的遍历，添加、删除的操作思路" class="headerlink" title="6.3 分析双向链表的遍历，添加、删除的操作思路"></a>6.3 分析双向链表的遍历，添加、删除的操作思路</h2><ol>
<li>遍历方和单链表一样只是可以朝前，可以向后</li>
<li>添加<ol>
<li>默认添加到双向链表的最后</li>
<li>先找到双向链表的最后这个节点</li>
<li>temp.next = new heronode</li>
<li>newheronode.pre = temp</li>
</ol>
</li>
<li>删除<ol>
<li>因为是双向的，可以自我删除</li>
<li>找到要删除的这个节点，temp</li>
<li>temp.next.pre = temp.pre</li>
<li>temp.pre.next = temp.next</li>
</ol>
</li>
<li>修改<ol>
<li>不需要太大变动，和原来的链表类似</li>
</ol>
</li>
</ol>
<h2 id="6-4-循环链表（约瑟夫问题）"><a href="#6-4-循环链表（约瑟夫问题）" class="headerlink" title="6.4 循环链表（约瑟夫问题）"></a>6.4 循环链表（约瑟夫问题）</h2><h3 id="6-4-1-什么是循环链表"><a href="#6-4-1-什么是循环链表" class="headerlink" title="6.4.1 什么是循环链表"></a>6.4.1 什么是循环链表</h3><p>无论是加入还是删除节点，最后一个节点要么指向自己，要么指向链表的头节点，形成环状的一个链表</p>
<h3 id="6-4-2-构建一个环形链表的思路"><a href="#6-4-2-构建一个环形链表的思路" class="headerlink" title="6.4.2 构建一个环形链表的思路"></a>6.4.2 构建一个环形链表的思路</h3><ol>
<li>先创建一个节点，first 指向改节点， 并且形成环形</li>
<li>后面当我们每创建一个新的节点，就把该节点，加入到已有的环形链表当中即可</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环形链表的添加和原来的添加代码有所不同</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"size的值不正确"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CircularNode cur = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size; i++) &#123;</span><br><span class="line">            CircularNode newcur = <span class="keyword">new</span> CircularNode(i, <span class="string">"小孩"</span>+i, <span class="string">"小孩昵称"</span>+i);</span><br><span class="line">            <span class="comment">// 如果是第一个节点，则需要特殊处理</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// 第一个节点复制给first节点</span></span><br><span class="line">                first = newcur;</span><br><span class="line">                first.setNext(first);</span><br><span class="line">                <span class="comment">// 将当前操作指针指向第一个节点</span></span><br><span class="line">                cur = first;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur.setNext(newcur);</span><br><span class="line">                newcur.setNext(first);</span><br><span class="line">                cur = newcur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-4-3-遍历环形链表"><a href="#6-4-3-遍历环形链表" class="headerlink" title="6.4.3 遍历环形链表"></a>6.4.3 遍历环形链表</h3><ol>
<li>先让一个辅助指针 curBoy ， 指向first</li>
<li>通过while循环，遍历环形链表，当curBoy.next  == first 结束</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(first == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.err.println(<span class="string">"循环链表为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CircularNode circularQueue = first;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.err.println(circularQueue);</span><br><span class="line">            <span class="keyword">if</span>(circularQueue.getNext() == first)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            circularQueue = circularQueue.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-4-4-模拟约瑟夫问题的实现（重点）"><a href="#6-4-4-模拟约瑟夫问题的实现（重点）" class="headerlink" title="6.4.4 模拟约瑟夫问题的实现（重点）"></a>6.4.4 模拟约瑟夫问题的实现（重点）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> begin 从第几个小孩开始数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> countNum 数几个小孩</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 表示最初有多少小孩在圈中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> countNum, <span class="keyword">int</span> nums)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 先对数据进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span> || begin &lt; <span class="number">1</span> || countNum &gt; nums) &#123;</span><br><span class="line">            System.out.println(<span class="string">"参数输入有误， 请重新输入"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建辅助指针，指向环形链表的最后一个元素</span></span><br><span class="line">        CircularNode helper = first;</span><br><span class="line">        <span class="keyword">while</span>(helper.getNext() != first)&#123;</span><br><span class="line">            helper = helper.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//小孩报数前，先让 first 和  helper 移动 k - 1次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; begin; i++) &#123;</span><br><span class="line">            first = first.getNext();</span><br><span class="line">            helper = helper.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当小孩报数时，让first 和 helper 指针同时 的移动  m  - 1 次, 然后出圈</span></span><br><span class="line">        <span class="comment">// 这里是一个循环操作，知道圈中只有一个节点</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(helper == first) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//让 first 和 helper 指针同时 的移动 countNum - 1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countNum - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                first = first.getNext();</span><br><span class="line">                helper = helper.getNext();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这时first指向的节点，就是要出圈的小孩节点\</span></span><br><span class="line">            System.out.printf(<span class="string">"小孩%d出圈\n"</span>, first.getNo());</span><br><span class="line">            first = first.getNext();</span><br><span class="line">            helper.setNext(first);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"最后留在圈中的小孩编号%d \n"</span>, first.getNo());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-栈"><a href="#7-栈" class="headerlink" title="7. 栈"></a>7. 栈</h1><h2 id="7-1-如何实现一个栈结构"><a href="#7-1-如何实现一个栈结构" class="headerlink" title="7.1 如何实现一个栈结构"></a>7.1 如何实现一个栈结构</h2><ol>
<li><p>使用一个top 初始化为 -1 表示栈定， 压入数据 为 push + 1</p>
</li>
<li><p>使用 top – 表示出栈</p>
</li>
<li><p>由于栈帧只能从一个方向操作，则需要对于栈帧进行一下判断是否为空或者已满</p>
</li>
</ol>
<h2 id="7-2-使用栈模拟一个表达式计算（重点）"><a href="#7-2-使用栈模拟一个表达式计算（重点）" class="headerlink" title="7.2 使用栈模拟一个表达式计算（重点）"></a>7.2 使用栈模拟一个表达式计算（重点）</h2><ol>
<li>首先：使用一个索引扫描整个表达式，用于往两个栈中添加数据</li>
<li>如果是数字，则直接加入到数栈当中</li>
<li>如果是操作符，则分为以下两种情况<ol>
<li>如果是加法和减法，则直接加入到栈顶</li>
<li>如果是乘法或者除法，则压如下一个表达式索引值</li>
</ol>
</li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>显示器怎么选？</title>
    <url>/2020/08/22/note16/</url>
    <content><![CDATA[<h1 id="一图流："><a href="#一图流：" class="headerlink" title="一图流："></a>一图流：</h1><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200822204710.png?ynotemdtimestamp=1598060052847" alt="img"></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200822204751.png?ynotemdtimestamp=1598060052847" alt="img"></p>
<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>选显示器要注意以下几点：</p>
<ol>
<li>自己的需求：看电影？办公？打游戏</li>
<li>尺寸大小</li>
<li>性价比</li>
</ol>
<h2 id="屏幕厂商的排行"><a href="#屏幕厂商的排行" class="headerlink" title="屏幕厂商的排行"></a>屏幕厂商的排行</h2><p>一线：三星、LG、夏普、友达</p>
<p>二线：京东方、</p>
<p>二点五线：奇美（原因是屏幕普遍偏黄，偏暖）</p>
<h1 id="电脑尺寸："><a href="#电脑尺寸：" class="headerlink" title="电脑尺寸："></a>电脑尺寸：</h1><h2 id="1M-以下的桌子"><a href="#1M-以下的桌子" class="headerlink" title="1M 以下的桌子"></a>1M 以下的桌子</h2><ol>
<li>15、16、17 寸</li>
<li>最好不要超过27寸</li>
</ol>
<h2 id="1M以上的桌子（1-2M-0-6）"><a href="#1M以上的桌子（1-2M-0-6）" class="headerlink" title="1M以上的桌子（1.2M - *0.6）"></a>1M以上的桌子（1.2M - *0.6）</h2><ol>
<li>27 寸</li>
<li>29寸</li>
</ol>
<h2 id="1-4M-0-8m"><a href="#1-4M-0-8m" class="headerlink" title="1.4M * 0.8m"></a>1.4M * 0.8m</h2><p>32 寸以上</p>
<h1 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h1><h2 id="NTSC"><a href="#NTSC" class="headerlink" title="NTSC:"></a>NTSC:</h2><p>是一种美国的电视的标准，一般认为72%的NTSC就可以认为是高色准的屏幕，而设计类专业也最好以这一标准为参考</p>
<p>低色域：45%</p>
<p>高色域：72%</p>
<h2 id="sRGB"><a href="#sRGB" class="headerlink" title="sRGB:"></a>sRGB:</h2><p>微软联合HP、三菱、爱普生等厂商联合开发的sRGB(<em>standard Red GreenBlue</em>)通用色彩标准，受微软强大用户群体的影响力的威慑，绝大多数的数码图像采集设备厂<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/llYbpg70=" title="https://baike.baidu.com/item/商都">商都<i class="fa fa-external-link"></i></span>已经全线支持sRGB标准</p>
<p>标准值：越接近100%说明色彩管理越好，而更高的则认为色域更好</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200822205047.png?ynotemdtimestamp=1598060052847" alt="img"></p>
<h2 id="色差："><a href="#色差：" class="headerlink" title="色差："></a>色差：</h2><p>使用deltaE =&gt; △E</p>
<p>△E&gt; 大于6：人眼可辨的色差</p>
<p>△E &gt; 6 and △E &lt; 3 ：经过专业训练的人员可以辨别</p>
<p>△E &lt; 3 ：肉眼以及专业训练基本看不出色差的屏幕</p>
<p>专业设计</p>
<p>△E &lt; 1 :基本无法分辨</p>
<h1 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h1><p>1920*1080 =&gt; 24 寸</p>
<h1 id="刷新率"><a href="#刷新率" class="headerlink" title="刷新率"></a>刷新率</h1><p>计算方式：1秒可以刷新多少次</p>
<blockquote>
<p>例如：</p>
<p>60HZ 代表一秒可以显示60张图片</p>
<p>144HZ 代表一秒可以显示144张图片</p>
<p>越高的刷新率对于FPS游戏有很大的影响</p>
</blockquote>
<h2 id="灰阶响应时间："><a href="#灰阶响应时间：" class="headerlink" title="灰阶响应时间："></a>灰阶响应时间：</h2><p>简单概括：红绿蓝三原色切换的时间</p>
<p>响应时间：这个表现的事灰阶的响应时间</p>
<h1 id="面板类型："><a href="#面板类型：" class="headerlink" title="面板类型："></a>面板类型：</h1><h2 id="TN"><a href="#TN" class="headerlink" title="TN:"></a>TN:</h2><p>TN屏作为旧时代的产物本来应该淘汰了，但是由于电竞行业的兴起，又重回市场</p>
<p>优点：</p>
<ol>
<li>价格便宜</li>
<li>延迟低（可以达到最低的1 ms）</li>
</ol>
<p>缺点：</p>
<ol>
<li>可视角度低</li>
<li>色差大，色彩表现不佳</li>
</ol>
<h2 id="IPS："><a href="#IPS：" class="headerlink" title="IPS："></a>IPS：</h2><p>优点：</p>
<ol>
<li>可视角度大</li>
<li>色彩表现基VA和TN屏幕之间</li>
<li>目前主流屏幕</li>
</ol>
<p>缺点：</p>
<ol>
<li>屏幕漏光，不可避免</li>
</ol>
<h2 id="VA："><a href="#VA：" class="headerlink" title="VA："></a>VA：</h2><p>优点：</p>
<ol>
<li>色彩表现比IPS更好</li>
<li>多为曲面屏</li>
</ol>
<p>缺点：</p>
<ol>
<li>响应低</li>
<li>基本为三星屏幕</li>
</ol>
<h2 id="PLS："><a href="#PLS：" class="headerlink" title="PLS："></a>PLS：</h2><p>整体类似IPS</p>
<h1 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h1><h2 id="Free-sync"><a href="#Free-sync" class="headerlink" title="Free-sync"></a>Free-sync</h2><p>AMD研发</p>
<p>FreeSync<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/mmL7npLrlmagvMzYyNzIy" title="https://baike.baidu.com/item/显示器/362722">显示器<i class="fa fa-external-link"></i></span>是指自身搭载FreeSync技术的显示设备，此类显示器特点在于能够解决画面撕裂以及卡顿等问题</p>
<h2 id="G-sync"><a href="#G-sync" class="headerlink" title="G-sync:"></a>G-sync:</h2><p>英特尔研发</p>
<blockquote>
<p>两者都只有在<strong>DP</strong>接口下面才会有作用</p>
</blockquote>
<h1 id="参考视频优选"><a href="#参考视频优选" class="headerlink" title="参考视频优选"></a>参考视频优选</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWI0NDExOTc4TS8/c3BtX2lkX2Zyb209dHJpZ2dlcl9yZWxvYWQ=" title="https://www.bilibili.com/video/BV1b4411978M/?spm_id_from=trigger_reload">https://www.bilibili.com/video/BV1b4411978M/?spm_id_from=trigger_reload<i class="fa fa-external-link"></i></span></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>无</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝牙应该怎么选？</title>
    <url>/2020/08/22/note13/</url>
    <content><![CDATA[<h1 id="先说说总结"><a href="#先说说总结" class="headerlink" title="先说说总结"></a>先说说总结</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWY0NDExTTdSMQ==" title="https://www.bilibili.com/video/BV1f4411M7R1">https://www.bilibili.com/video/BV1f4411M7R1<i class="fa fa-external-link"></i></span> 文章的最终来源</p>
<ol>
<li>蓝牙 5.0 的耳机连接更加稳定、范围更大、更省电</li>
<li>一般情况下使用SBC或者AAC的编码足够<ol>
<li>华为的部分机型格式：HWA</li>
<li>索尼的格式：LDAC</li>
<li>高通的特殊格式：aptX</li>
</ol>
</li>
<li>蓝牙耳机不可能没有延迟，只能尽量减小、</li>
</ol>
<a id="more"></a>

<h1 id="为什么要买蓝牙耳机？"><a href="#为什么要买蓝牙耳机？" class="headerlink" title="为什么要买蓝牙耳机？"></a>为什么要买蓝牙耳机？</h1><ol>
<li>个人需求是出门的时候使用，因为方便听歌，</li>
<li>坐地铁的时候很方便</li>
<li>不是经常戴耳机的人</li>
<li>对音质有极度追求不建议用蓝牙耳机</li>
</ol>
<h1 id="蓝牙是如何音频到蓝牙耳机的？"><a href="#蓝牙是如何音频到蓝牙耳机的？" class="headerlink" title="蓝牙是如何音频到蓝牙耳机的？"></a>蓝牙是如何音频到蓝牙耳机的？</h1><ol>
<li>声源：音频芯片把声音编码为可供蓝牙传输的格式</li>
<li>蓝牙之间通信，将音频内容传到蓝牙耳机</li>
<li>蓝牙耳机：使用音频芯片翻译为音频信号</li>
<li>发出声音</li>
</ol>
<h1 id="影响蓝牙耳机使用体验的几个点："><a href="#影响蓝牙耳机使用体验的几个点：" class="headerlink" title="影响蓝牙耳机使用体验的几个点："></a>影响蓝牙耳机使用体验的几个点：</h1><ol>
<li>首先是手机的蓝牙协议支持<ol>
<li>4.1（目前已经被废弃）</li>
<li>4.2 </li>
<li>5.0 （推荐买带有5.0协议的手机）</li>
</ol>
</li>
<li>蓝牙音频的编码格式<ol>
<li>SBC<ol>
<li>有损音质</li>
<li>高延迟</li>
<li>码率低</li>
</ol>
</li>
<li>AAC<ol>
<li>延迟比SBC更低</li>
<li>码率更高</li>
<li>延迟一般</li>
</ol>
</li>
<li>aptX<ol>
<li>aptX<ol>
<li>无损</li>
</ol>
</li>
<li>aptX HD<ol>
<li>无损</li>
<li>延迟小于130</li>
<li>码率：576</li>
</ol>
</li>
<li>aptX 低延迟<ol>
<li>420 码率</li>
<li>延迟40MS</li>
<li>吴顺</li>
</ol>
</li>
</ol>
</li>
<li>LDAC<ol>
<li>无损音乐的无损输出</li>
</ol>
</li>
<li>HWA<ol>
<li>和索尼不相上下</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h1><p>蓝牙耳机个人认为只要够用就行，你是怎么选择的呢</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机程序的构造和解释-笔记(一)</title>
    <url>/2020/10/07/note29/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么要学计算机程序的构造与解释"><a href="#为什么要学计算机程序的构造与解释" class="headerlink" title="为什么要学计算机程序的构造与解释"></a>为什么要学计算机程序的构造与解释</h2><p><span class="exturl" data-url="aHR0cDovL2Jsb2cuemhhb2ppZS5tZS8yMDA5LzA3L3JlY29tbWVuZGVkLXJlYWRpbmctMi1zaWNwLmh0bWw=" title="http://blog.zhaojie.me/2009/07/recommended-reading-2-sicp.html">http://blog.zhaojie.me/2009/07/recommended-reading-2-sicp.html<i class="fa fa-external-link"></i></span> 很老的一个帖子上的推荐</p>
<ul>
<li>了解任何东西，思想最重要</li>
<li>抽象的思维，如何从简单到复杂</li>
<li>用不同的角度去考虑用咒语来实现功能</li>
<li>学习任何语言思想最重要的是思想本身，而scheme由于语言天生的自由性，可以极大的发挥程序员的思想空间</li>
<li>学习思考问题的方式，以及解题思路</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wZTYzNjVmNGJiMDM/dXRtX2NhbXBhaWduPXNoYWtlc3BlYXJl" title="https://www.jianshu.com/p/0e6365f4bb03?utm_campaign=shakespeare">https://www.jianshu.com/p/0e6365f4bb03?utm_campaign=shakespeare<i class="fa fa-external-link"></i></span> 简书上面做的一个回答</p>
<a id="more"></a>

<h2 id="一些感谢："><a href="#一些感谢：" class="headerlink" title="一些感谢："></a>一些感谢：</h2><ol>
<li>文科生学这个表表示虽然痛苦，但是会努力一步一步的学习</li>
<li>写出来是监督自己产出，这门语言非常深奥和困难，借助视频和书籍慢慢啃</li>
<li>一定要深入的理解黑盒抽象的思维，解题的思路大于题目本身的意义</li>
<li>持续更新，用文章输出来勉励和督促自己。</li>
</ol>
<h1 id="第一节课-上课笔记"><a href="#第一节课-上课笔记" class="headerlink" title="第一节课 上课笔记"></a>第一节课 上课笔记</h1><h2 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h2><ol>
<li>y^2 = x &amp;&amp; y&gt;= 0</li>
<li>亚历山大的连续平方根</li>
<li>知道规则不等于可以运用规则</li>
<li>复杂度控制<ol>
<li>黑盒抽象</li>
<li>猜测-&gt;验证结果</li>
</ol>
</li>
<li>寻找函数的不动点<ol>
<li>输入</li>
<li>输出</li>
</ol>
</li>
<li>线性组合的基本方法</li>
<li>构建大型程序<ol>
<li>流</li>
<li>OOP</li>
</ol>
</li>
</ol>
<h2 id="黑盒抽象"><a href="#黑盒抽象" class="headerlink" title="黑盒抽象"></a>黑盒抽象</h2><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926145204.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<h2 id="元语言抽象"><a href="#元语言抽象" class="headerlink" title="元语言抽象"></a>元语言抽象</h2><ol>
<li>数据抽象：如何组合程序的基本元素，构造更复杂的结构</li>
<li>过程抽象：如何将复杂的结构抽象出高层组件，提供更高维度的组合型</li>
<li>模块化，通过高抽象层次的组织方法，提高系统的模块性</li>
</ol>
<h2 id="约定接口"><a href="#约定接口" class="headerlink" title="约定接口"></a>约定接口</h2><ol>
<li>对应计算机的输入与输出</li>
<li>使用黑盒不需要知道内部结构，只需要知道约定俗称的接口的功能</li>
</ol>
<h2 id="在进行正式SCIP学习之前，需要安装环境"><a href="#在进行正式SCIP学习之前，需要安装环境" class="headerlink" title="在进行正式SCIP学习之前，需要安装环境"></a>在进行正式SCIP学习之前，需要安装环境</h2><h3 id="1-下载-DrRacket"><a href="#1-下载-DrRacket" class="headerlink" title="1. 下载 DrRacket"></a>1. 下载 DrRacket</h3><p>直接访问：<span class="exturl" data-url="aHR0cHM6Ly9yYWNrZXQtbGFuZy5vcmcv" title="https://racket-lang.org/">https://racket-lang.org/<i class="fa fa-external-link"></i></span></p>
<p>找到自己对应的内容下载页面</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926152047.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p>下载完安装包之后，就可以进行安装操作了</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154022.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<p>注意不要安装在C盘，一般习惯是直接切换一个盘符，直接安装到D盘即可</p>
<p>安装好之后，你在桌面上可能找不到你要的东西，所以请查看一下你的开始菜单（MAC不了解，这里只能说明windows的地址，抱歉）</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154221.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<h3 id="3-DrRacket"><a href="#3-DrRacket" class="headerlink" title="3. DrRacket"></a>3. DrRacket</h3><p>这个界面怎么说呢，如果你用过C语言的编辑器（没错就是老掉牙的那个），其实感觉还行，但是如果经常使用中文的菜单可能不习惯</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154557.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<p>没关系，在HELP里面，可以切换：</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154650.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<h3 id="4-安装-SICP-Package"><a href="#4-安装-SICP-Package" class="headerlink" title="4. 安装 SICP Package"></a>4. 安装 SICP Package</h3><ol>
<li>选择<code>File</code> -&gt; <code>Package Manger</code></li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926154758.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<ol>
<li>在标红的地方，输入<code>sicp</code></li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200929214408.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<ol>
<li>下载比较建议挂个梯子下载，需要访问github进行安装包的下载</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155047.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<ol>
<li>安装成功之后，大概类似这种界面</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155154.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<h3 id="5-测试-SICP-package-安装成功与否"><a href="#5-测试-SICP-package-安装成功与否" class="headerlink" title="5. 测试 SICP package 安装成功与否"></a>5. 测试 SICP package 安装成功与否</h3><ol>
<li>首先在顶部输入<code>#lang sicp</code>然后<code>run</code>一下，如果看到下面的语言切换了，说明成功了。</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155408.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<ol>
<li>接着输入如下的方法：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#lang sicp</span><br><span class="line">(define (increase x) (+ x 1))</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926155727.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<ol>
<li>文件夹管理的包：<code>files-viewer</code>，类似插件，安装方式如下：</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926160110.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<h2 id="Sicp简单了解"><a href="#Sicp简单了解" class="headerlink" title="Sicp简单了解"></a>Sicp简单了解</h2><h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(+ 3  8)</span><br><span class="line">(* 3 (+ 7 19.5))</span><br><span class="line">(+ (+ 5 4) (* 6 (- 9 4)))</span><br></pre></td></tr></table></figure>

<ol>
<li>3 + 8 的和</li>
<li>3 * (7 + 19.5)</li>
</ol>
<h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>组织函数：</p>
<p>最简单的组织一个定义方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(define (square x) (* x x))</span><br></pre></td></tr></table></figure>

<p>使用lambda表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(define square (lambda (x) (* x x)) )</span><br></pre></td></tr></table></figure>

<p>定义的组织函数本身也可以作为内容的一部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(define (sq x) (* x x))</span><br><span class="line">  (define (sum x y) (* (sq x) (sq y)))</span><br></pre></td></tr></table></figure>

<p>这样设计的好处：</p>
<ol>
<li>可以让程序员灵活的搭配组织简单的程序形成复杂的程序</li>
<li>没有语言的约束，只有基本的语法规则</li>
</ol>
<p>坏处：</p>
<ol>
<li>你无法知道哪些是定义，哪些是引用</li>
<li>程序的可读性较差</li>
</ol>
<h4 id="条件语句："><a href="#条件语句：" class="headerlink" title="条件语句："></a>条件语句：</h4><h5 id="cond：可以理解为switch-p1-p2-p3-p4-p5-p6"><a href="#cond：可以理解为switch-p1-p2-p3-p4-p5-p6" class="headerlink" title="cond：可以理解为switch ( (p1 p2) (p3 p4) (p5 p6) )"></a>cond：可以理解为switch ( (p1 p2) (p3 p4) (p5 p6) )</h5><p>如果没有唯一的一个cond 的值，则cond 会没有定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cond (&lt;p1&gt; &lt;e1&gt;)</span><br><span class="line"></span><br><span class="line">    (&lt;p2&gt; &lt;e2&gt;)</span><br><span class="line"></span><br><span class="line">             .......</span><br><span class="line"></span><br><span class="line">            (&lt;pn&gt; &lt;en&gt;))</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">(cond (&lt;p1&gt; &lt;e1&gt;)</span><br><span class="line"></span><br><span class="line">    (&lt;p2&gt; &lt;e2&gt;)</span><br><span class="line"></span><br><span class="line">             .......</span><br><span class="line"></span><br><span class="line">            (else &lt;en&gt;))</span><br></pre></td></tr></table></figure>

<p>应用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(define (sq3 y)</span><br><span class="line">  ((cond ((&gt; y 0) y)</span><br><span class="line">  ((&#x3D; y 0) 0)</span><br><span class="line">  ((&lt; y 0) (- y)))))</span><br></pre></td></tr></table></figure>

<p>另一种写法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(define (sq5 k)</span><br><span class="line">  (cond ((&lt; k 0) (- k))</span><br><span class="line">  (else k)))</span><br></pre></td></tr></table></figure>

<h5 id="if：是一种语法糖"><a href="#if：是一种语法糖" class="headerlink" title="if：是一种语法糖:"></a>if：是一种语法糖:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(define (zz x)</span><br><span class="line">  (if (&gt; x 0)</span><br><span class="line">      (-1)</span><br><span class="line">      x))</span><br></pre></td></tr></table></figure>

<ol>
<li>把自己的作为结果，带入到函数当中求值返回</li>
</ol>
<h5 id="and-…"><a href="#and-…" class="headerlink" title="(and  ….. )"></a>(and <e1> ….. <e2>)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(define (test t) </span><br><span class="line">  (and  (&gt; t 5) (&lt; t 1)))</span><br></pre></td></tr></table></figure>

<h5 id="or-…"><a href="#or-…" class="headerlink" title="(or ….. )"></a>(or<e1> ….. <e2>)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(define (test t) </span><br><span class="line">  (or (&gt; t 5) (&lt; t 1)))</span><br></pre></td></tr></table></figure>

<h5 id="not-…"><a href="#not-…" class="headerlink" title="(not ….. )"></a>(not<e1> ….. <e2>)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(define (test t) </span><br><span class="line">  (not (&gt; t 5) (&lt; t 1)))</span><br></pre></td></tr></table></figure>

<h3 id="什么是正则序求值，什么是应用序求值"><a href="#什么是正则序求值，什么是应用序求值" class="headerlink" title="什么是正则序求值，什么是应用序求值"></a>什么是正则序求值，什么是应用序求值</h3><p>结论：Lisp使用的是应用序求值</p>
<p>正则序求值：使用过程组合，层层的代换展开运算，最后完全展开运算完成的这个过程就叫做正则序求值（可以理解为懒加载，在只有实际使用到参数的时候，才会带入参数运算）</p>
<p>应用序求值：应用序求值，先对每一个形式参数带入实际的值进行实际的运算操作，直到返回最终结果</p>
<p>为什么Lisp使用应用序求值？</p>
<ol>
<li>减少没有必要的计算，比如说正则序列求值，需要将一步完成的计算继续拆分为更多步骤</li>
<li>正则的结果不一定完全正确（特殊案例）</li>
</ol>
<h3 id="课后练习："><a href="#课后练习：" class="headerlink" title="课后练习："></a>课后练习：</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20200926164058.png?ynotemdtimestamp=1601964191688" alt="img"></p>
<h3 id="非常好的一个问题："><a href="#非常好的一个问题：" class="headerlink" title="非常好的一个问题："></a>非常好的一个问题：</h3><p>在定义的时候，如下面所示的括号有无的区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(define (d) (* 5 5))</span><br><span class="line">(define d (* 5 5)) </span><br><span class="line">&gt; 输入 a &#x3D; 5</span><br><span class="line">结果 25</span><br><span class="line">&gt; 输入 d &#x3D; 5</span><br><span class="line">结果 25</span><br><span class="line">两者内部的细节区别：</span><br><span class="line">(define (d) (* 5 5)) -&gt; 运行的是一个复合公式</span><br><span class="line">(define d (* 5 5))  -&gt; 函数的结果</span><br></pre></td></tr></table></figure>

<h3 id="课后练习-1-2"><a href="#课后练习-1-2" class="headerlink" title="课后练习 1.2"></a>课后练习 1.2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&#x2F; (+ 5 4 (-2 (-3 (+ 6 (&#x2F; 4 5))))) (* 3 (- 6 2) (- 2 7)))</span><br></pre></td></tr></table></figure>

<p>解决思路：其实挺简单的，画树就行</p>
<h3 id="课后练习-1-3"><a href="#课后练习-1-3" class="headerlink" title="课后练习 1.3"></a>课后练习 1.3</h3><p>题目：求较大两数的两树之和？</p>
<p>分析：</p>
<p>使用双层if判断</p>
<p>拆分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(define (maxVal3 x y z)</span><br><span class="line">  (if (&gt; x y)</span><br><span class="line">      (if (&gt; y z) (* x y)</span><br><span class="line">          (* x z))</span><br><span class="line">      (* z y)))</span><br></pre></td></tr></table></figure>

<h3 id="课后练习-1-4"><a href="#课后练习-1-4" class="headerlink" title="课后练习 1.4"></a>课后练习 1.4</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(define (a-plus-abs-b a b) ((if (&gt; b 0) + -) a b))</span><br></pre></td></tr></table></figure>

<ol>
<li>if (b &gt; 0)<ol>
<li>+ a b</li>
</ol>
</li>
<li>if(b &lt; 0)<ol>
<li>- a b</li>
</ol>
</li>
</ol>
<h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><blockquote>
<p><strong>可知，由于(define (p) (p))， 如果出现了对（p）求值的情况， 就会陷入循环 scheme中的解释器本身就是应用序的，函数的求值会先对每一个参数进行求值， 　　　 然后把参数的值代入函数，若对(test 0 (p))使用应用序,那么（p）就会被求值， 　　 进入死循环中。而正则序是“完全展开而后规约”，在展开之后，由if条件判断，然后 　　 对0求值，由于（p）不会进行求值，最终函数可以正确返回0值。 （Guile中测试此程序确会进入死循环。）</strong></p>
<p>PS：这一段网上摘录的答案还不是很了解，还没有进行实际的验证</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>-Scheme</category>
      </categories>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>终于把百度编辑器的一个坑填了</title>
    <url>/2020/10/13/note33/</url>
    <content><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>上文说道，我被百度编辑器上了套，今天，说下我的个人进展，因为我把截图粘贴的功能兼容到IE了，算是给自己的鼓励。</p>
<a id="more"></a>

<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>其实还挺简单的，内容如下：</p>
<p>在<code>ueditor.all.js</code>当中，输入<code>domUtils.on(me.body, &#39;paste drop&#39;, function(e){</code>可以看到类似粘贴板处理的代码</p>
<p>我对里面的内容进行了如下的处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(isIE())&#123;</span><br><span class="line">    var text &#x3D; window.clipboardData.getData(&#39;Text&#39;);</span><br><span class="line">    if(text &#x3D;&#x3D; null)&#123;</span><br><span class="line">        var items&#x3D;clipboardData.files;</span><br><span class="line">        for (var i &#x3D; 0, len &#x3D; items.length; i &lt; len; i++) &#123;</span><br><span class="line">            var item &#x3D; items[i];</span><br><span class="line">            if ( item.type.indexOf(&#39;image&#x2F;&#39;) !&#x3D;&#x3D; -1 ) &#123;</span><br><span class="line">                &#x2F;&#x2F;上传到服务器</span><br><span class="line">                sendAndInsertFile(item,me); </span><br><span class="line">                &#x2F;&#x2F;阻止默认事件, 避免重复添加;</span><br><span class="line">                e.preventDefault();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    var hasImg &#x3D; false,</span><br><span class="line">        items;</span><br><span class="line">    &#x2F;&#x2F;获取粘贴板文件列表或者拖放文件列表</span><br><span class="line">    items &#x3D; e.type &#x3D;&#x3D; &#39;paste&#39; ? getPasteImage(e):getDropImage(e);</span><br><span class="line">    if(items)&#123;</span><br><span class="line">        var len &#x3D; items.length,</span><br><span class="line">            file;</span><br><span class="line">        while (len--)&#123;</span><br><span class="line">            file &#x3D; items[len];</span><br><span class="line">            if(file.getAsFile) file &#x3D; file.getAsFile();</span><br><span class="line">            if(file &amp;&amp; file.size &gt; 0) &#123;</span><br><span class="line">                sendAndInsertFile(file, me);</span><br><span class="line">                hasImg &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        hasImg &amp;&amp; e.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>判断是否为IE，是IE特殊处理</li>
<li>使用IE特定的获取粘贴板的内容</li>
<li>获取到文件内容，调用百度编辑器的上传方法，将粘贴板的内容上传到服务器。</li>
</ol>
<h2 id="关于word粘贴内容到富文本编辑框"><a href="#关于word粘贴内容到富文本编辑框" class="headerlink" title="关于word粘贴内容到富文本编辑框"></a>关于word粘贴内容到富文本编辑框</h2><p>今天大部分时间都在纠结这玩意，后续考虑自己二次开发插件做二次处理，明天果断和前端配合试下效果。</p>
<p>今天还是了解到不少内容的：</p>
<ol>
<li>了解了一下Base64 的内容</li>
<li>js如何处理 copy 、paste 时间，以及通过事件监听处理<code>copy</code>、<code>paste</code></li>
<li>IE和谷歌的对于剪贴板内容的不同处理方式</li>
<li>了解了一下插件的二次开发</li>
</ol>
<h1 id="如何给百度编辑器进行插件的二次开发"><a href="#如何给百度编辑器进行插件的二次开发" class="headerlink" title="如何给百度编辑器进行插件的二次开发"></a>如何给百度编辑器进行插件的二次开发</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dpaWNtcy9hcnRpY2xlL2RldGFpbHMvNDY0MTI1ODU=" title="https://blog.csdn.net/wiicms/article/details/46412585">https://blog.csdn.net/wiicms/article/details/46412585<i class="fa fa-external-link"></i></span> 百度ueditor编辑器插件开发之对话框-移动微模板插件</p>
<p>直接复制里面的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; TODO 为百度编辑器开发一个新插件</span><br><span class="line">    UE.registerUI(&#39;dialog&#39;,function(editor,uiName)&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建dialog</span><br><span class="line">    var dialog &#x3D; new UE.ui.Dialog(&#123;</span><br><span class="line">        &#x2F;&#x2F;指定弹出层中页面的路径，这里只能支持页面,因为跟addCustomizeDialog.js相同目录，所以无需加路径</span><br><span class="line">        iframeUrl:editor.ui.UEDITOR_HOME_URL+&quot;p&#x2F;uet.html&quot;,</span><br><span class="line">        &#x2F;&#x2F;需要指定当前的编辑器实例</span><br><span class="line">        editor:ue,</span><br><span class="line">        &#x2F;&#x2F;指定dialog的名字</span><br><span class="line">        name:uiName,</span><br><span class="line">        &#x2F;&#x2F;dialog的标题</span><br><span class="line">        title:&quot;微信模板&quot;,</span><br><span class="line">        &#x2F;&#x2F;指定dialog的外围样式</span><br><span class="line">        cssRules:&quot;width:540px;height:400px;&quot;,</span><br><span class="line">        &#x2F;&#x2F;如果给出了buttons就代表dialog有确定和取消</span><br><span class="line">        buttons:[</span><br><span class="line">            &#123;</span><br><span class="line">                className:&#39;edui-okbutton&#39;,</span><br><span class="line">                label:&#39;确定&#39;,</span><br><span class="line">                onclick:function () &#123;</span><br><span class="line">                    dialog.close(true);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                className:&#39;edui-cancelbutton&#39;,</span><br><span class="line">                label:&#39;取消&#39;,</span><br><span class="line">                onclick:function () &#123;</span><br><span class="line">                    dialog.close(false);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]&#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;参考addCustomizeButton.js</span><br><span class="line">        var btn &#x3D; new UE.ui.Button(&#123;</span><br><span class="line">            name:&#39;dialogbutton&#39; + uiName,</span><br><span class="line">            title:&#39;dialogbutton&#39; + uiName,</span><br><span class="line">            &#x2F;&#x2F;需要添加的额外样式，指定icon图标，这里默认使用一个重复的icon</span><br><span class="line">            cssRules :&#39;background-position: -500px 0;&#39;,</span><br><span class="line">            onclick:function () &#123;</span><br><span class="line">                &#x2F;&#x2F;渲染dialog</span><br><span class="line">                dialog.render();</span><br><span class="line">                dialog.open();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return btn;</span><br><span class="line">    &#125;&#x2F;*index 指定添加到工具栏上的那个位置，默认时追加到最后,editorId 指定这个UI是那个编辑器实例上的，默认是页面上所有的编辑器都会添加这个按钮*&#x2F;);</span><br><span class="line">    &#x2F;&#x2F;TODO 为百度编辑器开发一个新插件</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cDovL2ZleC5iYWlkdS5jb20vdWVkaXRvci8jZGV2LWRldmVsb3Blcg==" title="http://fex.baidu.com/ueditor/#dev-developer">http://fex.baidu.com/ueditor/#dev-developer<i class="fa fa-external-link"></i></span> 官方文档解答如何开发二次插件</p>
<h1 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h1><p>工作之余随手写下，前端知识UP，回家继续学习去咯。</p>
<p>来，我们随手从QQ复制一个别人发的图片，贴到百度编辑器，好，内网地址又暴露了（卒）。。。。。</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/jiuhe/20201012203818.png?ynotemdtimestamp=1602599291444" alt="img"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>使用开源插件读取word内容：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VpY2VibHVlL2FydGljbGUvZGV0YWlscy84OTUxOTI5Nw==" title="https://blog.csdn.net/eiceblue/article/details/89519297">https://blog.csdn.net/eiceblue/article/details/89519297<i class="fa fa-external-link"></i></span></p>
<p>java 使用POI操作word获取样式：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTI5ODExL2FydGljbGUvZGV0YWlscy8xMDI1NzA3MjY=" title="https://blog.csdn.net/qq_41129811/article/details/102570726">https://blog.csdn.net/qq_41129811/article/details/102570726<i class="fa fa-external-link"></i></span></p>
<blockquote>
<p>可以学习一下poi 是如何获取到样式和内容的</p>
</blockquote>
<p>js中使用Clipboard API获取剪贴板内容：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FpcWlhbi9hcnRpY2xlL2RldGFpbHMvMTAwOTI5MTQzP3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19hZ2dwYWdlX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMmFsbGZpcnN0X3JhbmtfdjJ+cmFua192MjUtMS0xMDA5MjkxNDMubm9uZWNhc2UmYW1wO3V0bV90ZXJtPWll" title="https://blog.csdn.net/haoaiqian/article/details/100929143?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2allfirst_rank_v2~rank_v25-1-100929143.nonecase&amp;utm_term=ie">https://blog.csdn.net/haoaiqian/article/details/100929143?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2allfirst_rank_v2~rank_v25-1-100929143.nonecase&amp;utm_term=ie<i class="fa fa-external-link"></i></span></p>
<p>获取剪贴板数据：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0ZXllXzQ4NjUvYXJ0aWNsZS9kZXRhaWxzLzgyMjAwOTg2" title="https://blog.csdn.net/iteye_4865/article/details/82200986">https://blog.csdn.net/iteye_4865/article/details/82200986<i class="fa fa-external-link"></i></span></p>
<p>js 文本框监听粘贴事件，获取粘贴板上的图片数据：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1eWFuZ2JpbjAxL2FydGljbGUvZGV0YWlscy82OTUyNTc3Ng==" title="https://blog.csdn.net/luyangbin01/article/details/69525776">https://blog.csdn.net/luyangbin01/article/details/69525776<i class="fa fa-external-link"></i></span></p>
<p>js处理剪贴板的内容：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxNDExMzg5L2FydGljbGUvZGV0YWlscy81MzAwNzY3NT91dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfYWdncGFnZV9zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJhbGxmaXJzdF9yYW5rX3YyfnJhbmtfdjI1LTMtNTMwMDc2NzUubm9uZWNhc2UmYW1wO3V0bV90ZXJtPWll" title="https://blog.csdn.net/qq_31411389/article/details/53007675?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2allfirst_rank_v2~rank_v25-3-53007675.nonecase&amp;utm_term=ie">https://blog.csdn.net/qq_31411389/article/details/53007675?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2allfirst_rank_v2~rank_v25-3-53007675.nonecase&amp;utm_term=ie<i class="fa fa-external-link"></i></span></p>
<p>富文本编辑器实现从word中复制图片(外挂)：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaGVsbG9qYXZhLmNvbS9hLzkyMzU2Lmh0bWw=" title="https://www.hellojava.com/a/92356.html">https://www.hellojava.com/a/92356.html<i class="fa fa-external-link"></i></span></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>百度编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>简单分析Java的HashMap.entrySet()的实现</title>
    <url>/2020/08/29/note19/</url>
    <content><![CDATA[<h1 id="简单分析Java的HashMap-entrySet-的实现"><a href="#简单分析Java的HashMap-entrySet-的实现" class="headerlink" title="简单分析Java的HashMap.entrySet()的实现"></a>简单分析Java的HashMap.entrySet()的实现</h1><p>转载自：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zMDgwNzc3OS9hcnRpY2xlL2RldGFpbHMvOTk1NjYwMTY=" title="https://blog.csdn.net/weixin_30807779/article/details/99566016">https://blog.csdn.net/weixin_30807779/article/details/99566016<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>

<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>map通过Entry 实现一个 &lt;K,V&gt; 的存储，通过key 的哈希值确定哈希表的数组下标，通过下标找到桶位之后，通过遍历找到相对应的Value</p>
<p>map是用来存储key-value类型数据的，一个&lt;k, v&gt;对在Map的接口定义中被定义为Entry，HashMap内部实现了<code>Entry</code>接口。HashMap内部维护一个<code>Entry</code>数组。</p>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><code>transient Entry[] table;</code> </p>
<p>注意关键字：<code>transient</code> 该关键字，对于此属性是不能进行序列化的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Entry[] table</span><br><span class="line">    +---+</span><br><span class="line">    | 0 | -&gt; entry_0_0 -&gt; entry_0_1 -&gt; null</span><br><span class="line">    +---+</span><br><span class="line">    | 1 | -&gt; null</span><br><span class="line">    +---+</span><br><span class="line">    |   |</span><br><span class="line"></span><br><span class="line">     ...</span><br><span class="line"></span><br><span class="line">    |n-1| -&gt; entry_n-1_0 -&gt; null</span><br><span class="line">    +---+</span><br></pre></td></tr></table></figure>

<p>使用map 的 entrySet() 方法，就可以获得一个<code>EntryIterator</code>类型的实例，该实例调用 <code>nextEntry()</code>方法，来获取迭代器的下一个元素。<code>EntryIterator</code>类型是泛型<code>HashIterator&lt;T&gt;</code>的一个子类，这个类的内容很简单，唯一的代码是在<code>next()</code>函数中调用了<code>HashIterator</code>的<code>nextEntry()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap</span><br><span class="line">    |- table &lt;------------------------------------\</span><br><span class="line">    \+ entrySet()                                 |iterates</span><br><span class="line">        |              HashMap.HashIterator&lt;T&gt;    |</span><br><span class="line">        |returns                ^       \- nextEntry()</span><br><span class="line">        V                       -                 ^</span><br><span class="line">HashMap.EntrySet                |                 |</span><br><span class="line">    \- iterator()               |extends          |</span><br><span class="line">            |                   |                 |</span><br><span class="line">            |  instantiats      |                 |calls</span><br><span class="line">            \----------&gt; HashMap.EntryIterator    |</span><br><span class="line">                                        \- next() /</span><br></pre></td></tr></table></figure>

<p><code>entrySet()</code>方法返回的是一个特殊的Set，定义为HashMap的内部私有类 <code>EntryIterator</code> ,它继承自 <code>HashIterator</code> </p>
<p><code>HashIterator</code>通过遍历<code>table</code>数组，实现对HashMap的遍历。内部维护几个变量：<code>index</code>记录当前在<code>table</code>数组中的下标，<code>current</code>用来记录当前在<code>table[index]</code>这个链表中的位置，<code>next</code>指向current的下一个元素。<code>nextEntry()</code>的完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    Entry&lt;K,V&gt; e = next;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Entry[] t = table;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">            ;</span><br><span class="line">    &#125;</span><br><span class="line">    current = e;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从调用链路可以看出， entrySet() 最后得到的其实是一个关于 map 的一个<code>视图</code>，当他在迭代的时候，其实就是相当于对于map的元素进行查找，不会创建任何额外的空间。</p>
<p>同时，<code>entrySet</code> 本身也是迭代器的思想，在多线程的环境下其实是线程不安全的，这点需要注意</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote>
<p>为什么要对于table 进行非串行化？</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hc2svNjI1NDI/c3BtPWEyYzZoLjEzMTU5NzM2" title="https://developer.aliyun.com/ask/62542?spm=a2c6h.13159736">Java中HashMap关键字transient的疑惑<i class="fa fa-external-link"></i></span></p>
<p>怎么理解? 看一下HashMap.get()/put()知道, 读写Map是根据Object.hashcode()来确定从哪个bucket读/写. 而Object.hashcode()是native方法, 不同的JVM里可能是不一样的.</p>
<p>打个比方说, 向HashMap存一个entry, key为 字符串”STRING”, 在第一个java程序里, “STRING”的hashcode()为1, 存入第1号bucket; 在第二个java程序里, “STRING”的hashcode()有可能就是2, 存入第2号bucket. 如果用默认的串行化(Entry[] table不用transient), 那么这个HashMap从第一个java程序里通过串行化导入第二个java程序后, 其内存分布是一样的. 这就不对了. HashMap现在的readObject和writeObject是把内容 输出/输入, 把HashMap重新生成出来.</p>
</blockquote>
<blockquote>
<p>关于JDK官方吧Entry 换为了Node 的讨论</p>
<ol>
<li>为什么要换为Node</li>
<li>更换之后和原来的设计有什么区别</li>
</ol>
<p>回答：JDK1.8 改动： 在<code>java1.8</code>中,<code>Entry</code>被<code>Node</code>替代(换了一个马甲)。</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>集合</category>
      </categories>
      <tags>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title>我还是输给了免费富文本编辑器</title>
    <url>/2020/10/13/note34/</url>
    <content><![CDATA[<h1 id="前因后果"><a href="#前因后果" class="headerlink" title="前因后果"></a>前因后果</h1><h2 id="说说我做的一些努力"><a href="#说说我做的一些努力" class="headerlink" title="说说我做的一些努力"></a>说说我做的一些努力</h2><ol>
<li>考虑给百度编辑器开发的一个二次插件，等下会进行说明如何使用改源码的方式开发二次插件</li>
<li>后端增加接口，接受word文档，转为html返回前台，前台再根据html内容对于富文本编辑框继续赋值和一些处理</li>
</ol>
<a id="more"></a>

<p>然而，理想很美好，现实很骨感：</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013130729.png?ynotemdtimestamp=1602599291444" alt="img"></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013130809.png?ynotemdtimestamp=1602599291444" alt="img"></p>
<ol>
<li>无法达到100%还原，word里面转译html会存在各种问题</li>
<li>有存在无法解析和翻译的部分</li>
<li>客户不会买账！（<strong>核心原因</strong>）</li>
</ol>
<h2 id="如何解决word转译到富文本编辑的问题"><a href="#如何解决word转译到富文本编辑的问题" class="headerlink" title="如何解决word转译到富文本编辑的问题"></a>如何解决word转译到富文本编辑的问题</h2><p>这两天搜索了几乎所有的富文本编辑器（国内用的比较多的）似乎都没有解决这个问题。</p>
<p><strong>然后几乎所有的带word导入粘贴的，几乎都是商业收费软件（还很贵）</strong></p>
<p>无奈之下，BOSS决定掏钱升级<code>ewebeditor</code>并且怪为什么没有提早说百度编辑器实现不了。（经理&amp;我：？？？）</p>
<p>所以最后结果就是：<strong>我瞎忙活了几天</strong>（内心一万个草泥马）。</p>
<p>既然知道了结果为什么还要写这篇文章，我其实很不甘心，一个方案被否决，我决定记录一下这个也许可行的数据方案。</p>
<h2 id="JAVA-amp-百度编辑器实现word粘贴（非完美）"><a href="#JAVA-amp-百度编辑器实现word粘贴（非完美）" class="headerlink" title="JAVA&amp;百度编辑器实现word粘贴（非完美）"></a>JAVA&amp;百度编辑器实现word粘贴（非完美）</h2><p>不扯那么多，直接上菜：</p>
<h3 id="1-前端为百度编辑器自定义一个上传word的功能"><a href="#1-前端为百度编辑器自定义一个上传word的功能" class="headerlink" title="1. 前端为百度编辑器自定义一个上传word的功能"></a>1. 前端为百度编辑器自定义一个上传word的功能</h3><p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013132152.png?ynotemdtimestamp=1602599291444" alt="img"></p>
<ol>
<li>搜索一下：<code>UE.commands[&quot;setbordervisible&quot;] = {</code></li>
</ol>
<p>在它的下面加入如下的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UE.commands[&quot;getword&quot;] &#x3D; &#123;</span><br><span class="line">    execCommand: function (Name) &#123;</span><br><span class="line">        if (window.FileReader) &#123;   </span><br><span class="line">            var inputObj&#x3D;document.createElement(&#39;input&#39;)</span><br><span class="line">            inputObj.setAttribute(&#39;id&#39;,&#39;my_inputObj&#39;);</span><br><span class="line">            inputObj.setAttribute(&#39;type&#39;,&#39;file&#39;);</span><br><span class="line">            &#x2F;&#x2F;              inputObj.setAttribute(&#39;accept&#39;,&#39;application&#x2F;msword&#39;);</span><br><span class="line">            inputObj.setAttribute(&quot;style&quot;,&#39;visibility:hidden&#39;);</span><br><span class="line">            document.body.appendChild(inputObj);</span><br><span class="line"></span><br><span class="line">            inputObj.onchange &#x3D; function()&#123;</span><br><span class="line">                &#x2F;&#x2F;拿取上传的文档</span><br><span class="line">                var fileData &#x3D; inputObj.files[0]</span><br><span class="line"></span><br><span class="line">                if(fileData.type.indexOf(&#39;word&#39;)&gt;-1)&#123;</span><br><span class="line">                    if(fileData.size&gt;1048576)&#123;  &#x2F;&#x2F;控制在1M以内</span><br><span class="line">                        alert(&#39;您上传的文件大于1MB,请上传1MB以内的word文件&#39;)</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;  </span><br><span class="line">                    console.log(fileData)</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(&#39;请选择一个word文件&#39;)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            inputObj.click();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>增加一个命令叫做：<code>getword</code></p>
</li>
<li><p>模拟一个<code>input file</code>，并且模拟一次点击文件上传</p>
</li>
<li><p>如果上传了具体文件，触发<code>onchange</code>，并且进行word的各种判断</p>
</li>
<li><p>然后将文件的内容传到后台的接口（具体怎么做根据自己的语言来处理）</p>
</li>
<li><p>加入自定义的命令：<code>getword</code></p>
</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013132817.png?ynotemdtimestamp=1602599291444" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;为工具栏添加按钮，以下都是统一的按钮触发命令，所以写在一起</span><br><span class="line">    var btnCmds &#x3D; [&#39;undo&#39;, &#39;redo&#39;, &#39;formatmatch&#39;,</span><br><span class="line">        &#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;fontborder&#39;, &#39;touppercase&#39;, &#39;tolowercase&#39;,</span><br><span class="line">        &#39;strikethrough&#39;, &#39;subscript&#39;, &#39;superscript&#39;, &#39;source&#39;, &#39;indent&#39;, &#39;outdent&#39;,</span><br><span class="line">        &#39;blockquote&#39;, &#39;pasteplain&#39;, &#39;pagebreak&#39;,</span><br><span class="line">        &#39;selectall&#39;, &#39;print&#39;,&#39;horizontal&#39;, &#39;removeformat&#39;, &#39;time&#39;, &#39;date&#39;, &#39;unlink&#39;,</span><br><span class="line">        &#39;insertparagraphbeforetable&#39;, &#39;insertrow&#39;, &#39;insertcol&#39;, &#39;mergeright&#39;, &#39;mergedown&#39;, &#39;deleterow&#39;,</span><br><span class="line">        &#39;deletecol&#39;, &#39;splittorows&#39;, &#39;splittocols&#39;, &#39;splittocells&#39;, &#39;mergecells&#39;, &#39;deletetable&#39;, &#39;drafts&#39;,&#39;getword&#39;];</span><br></pre></td></tr></table></figure>

<p>注意到最后一个<code>getword</code>了么，这就是刚刚加进去的</p>
<ol>
<li>在<code>Lang/zh-cn/zh-cn.js</code>文件当中，增加按钮说明，直接照着截图加就行</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013133049.png?ynotemdtimestamp=1602599291444" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">,&#39;getword&#39;:&#39;获取word&#39;</span><br></pre></td></tr></table></figure>

<p>为了防止图裂，还是写一下，搜一下``scrawl：’涂鸦’`，基本可以找到大概的位置</p>
<ol>
<li>修改<code>ueditor.config.js</code>文件，增加新的按钮</li>
</ol>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201013133410.png?ynotemdtimestamp=1602599291444" alt="img"></p>
<p>在<code>help</code>的后面加一个<code>getword</code>就好了，注意以下json格式，<strong>逗号</strong>不能少</p>
<ol>
<li>增加样式，修改<code>Themes/default/ueditor.css</code>，直接在最底下增加</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.edui-default .edui-toolbar .edui-for-getword .edui-icon &#123;</span><br><span class="line">    background-image: url(..&#x2F;images&#x2F;wordT1.png);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    width: 20px !important;</span><br><span class="line">    background-size: 18px;</span><br><span class="line">    background-position: center;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tip：wordT1.png 是一个word的小图标，这里就<strong>不提供了</strong></p>
<p>才怪：Themes/default/images/wordT1.png</p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/wordT1.png?ynotemdtimestamp=1602599291444" alt="word图标下载"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvd29yZFQxLnBuZw==" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/wordT1.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/wordT1.png<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>上面这一套做完之后，基本上在百度编辑器里面会多出一个图标，接下来需要后端开发接口，对接这个插件的行为和操作</p>
<h3 id="2-后端为word文件做转化为html的操作，然后将html原文返回给前端"><a href="#2-后端为word文件做转化为html的操作，然后将html原文返回给前端" class="headerlink" title="2. 后端为word文件做转化为html的操作，然后将html原文返回给前端"></a>2. 后端为word文件做转化为html的操作，然后将html原文返回给前端</h3><p>做这个接口要特别的小心，需要防止接口被滥用，拖垮服务器资源，因为转化和图片存储的代价还是不小的，需要控制可以转化的大小</p>
<p>前文也说了，老板都出钱升级了，我还玩你个鬼的百度编辑器，溜了溜了，用<code>ewebeidor</code>，下面是网上搜下来的一个word转html的工具方法，需要<code>apach-poi</code>的支持，我用的是<code>3.12</code>版本，具体的内容看自己。</p>
<blockquote>
<p>注意以下：docx 和 doc 在poi里面是需要用不同的对象进行操作的，后续自己也会补一补这一块的内容</p>
<p>poi 还是挺强的，很牛逼，把巨硬的那一套治的服服帖帖</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.apache.poi.hwpf.HWPFDocument;</span><br><span class="line">import org.apache.poi.hwpf.converter.PicturesManager;</span><br><span class="line">import org.apache.poi.hwpf.converter.WordToHtmlConverter;</span><br><span class="line">import org.apache.poi.hwpf.extractor.WordExtractor;</span><br><span class="line">import org.apache.poi.hwpf.model.PAPX;</span><br><span class="line">import org.apache.poi.hwpf.usermodel.Picture;</span><br><span class="line">import org.apache.poi.hwpf.usermodel.PictureType;</span><br><span class="line">import org.apache.poi.xwpf.usermodel.XWPFDocument;</span><br><span class="line">import org.apache.poi.xwpf.usermodel.XWPFNumbering;</span><br><span class="line">import org.apache.poi.xwpf.usermodel.XWPFParagraph;</span><br><span class="line">import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTNumbering;</span><br><span class="line">import org.w3c.dom.Document;</span><br><span class="line"></span><br><span class="line">import javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line">import javax.xml.transform.OutputKeys;</span><br><span class="line">import javax.xml.transform.Transformer;</span><br><span class="line">import javax.xml.transform.TransformerFactory;</span><br><span class="line">import javax.xml.transform.dom.DOMSource;</span><br><span class="line">import javax.xml.transform.stream.StreamResult;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据poi写的word帮助类</span><br><span class="line"> * @Date 2020&#x2F;10&#x2F;12 18:26</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class WordHelper &#123;</span><br><span class="line"></span><br><span class="line">    public static void parseDocx2Html() throws Throwable &#123;</span><br><span class="line">        final String path &#x3D; &quot;D:\\zxd\\mark\\罗湖兼容性\\20201012word导出必备\\&quot;;</span><br><span class="line">        final String file &#x3D; &quot;4403080004_深圳盐田政府在线_20200927_11064.doc&quot;;</span><br><span class="line">        InputStream input &#x3D; new FileInputStream(path + file);</span><br><span class="line">        String suffix &#x3D; file.substring(file.indexOf(&quot;.&quot;)+1);&#x2F;&#x2F; &#x2F;&#x2F;截取文件格式名</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;实例化WordToHtmlConverter，为图片等资源文件做准备</span><br><span class="line">        WordToHtmlConverter wordToHtmlConverter &#x3D; new WordToHtmlConverter(</span><br><span class="line">                DocumentBuilderFactory.newInstance().newDocumentBuilder()</span><br><span class="line">                        .newDocument());</span><br><span class="line">        wordToHtmlConverter.setPicturesManager(new PicturesManager() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String savePicture(byte[] content, PictureType pictureType,</span><br><span class="line">                                      String suggestedName, float widthInches, float heightInches) &#123;</span><br><span class="line">                return suggestedName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        if (&quot;doc&quot;.equals(suffix.toLowerCase())) &#123;</span><br><span class="line">            &#x2F;&#x2F; docx</span><br><span class="line">            HWPFDocument wordDocument &#x3D; new HWPFDocument(input);</span><br><span class="line">            wordToHtmlConverter.processDocument(wordDocument);</span><br><span class="line">            &#x2F;&#x2F;处理图片，会在同目录下生成 image&#x2F;media&#x2F; 路径并保存图片</span><br><span class="line">            List pics &#x3D; wordDocument.getPicturesTable().getAllPictures();</span><br><span class="line">            if (pics !&#x3D; null) &#123;</span><br><span class="line">                for (int i &#x3D; 0; i &lt; pics.size(); i++) &#123;</span><br><span class="line">                    Picture pic &#x3D; (Picture) pics.get(i);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        pic.writeImageContent(new FileOutputStream(path</span><br><span class="line">                                + pic.suggestFullFileName()));</span><br><span class="line">                    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 转换</span><br><span class="line">        Document htmlDocument &#x3D; wordToHtmlConverter.getDocument();</span><br><span class="line">        ByteArrayOutputStream outStream &#x3D; new ByteArrayOutputStream();</span><br><span class="line">        DOMSource domSource &#x3D; new DOMSource(htmlDocument);</span><br><span class="line">        StreamResult streamResult &#x3D; new StreamResult(outStream);</span><br><span class="line">        TransformerFactory tf &#x3D; TransformerFactory.newInstance();</span><br><span class="line">        Transformer serializer &#x3D; tf.newTransformer();</span><br><span class="line">        serializer.setOutputProperty(OutputKeys.ENCODING, &quot;utf-8&quot;);&#x2F;&#x2F;编码格式</span><br><span class="line">        serializer.setOutputProperty(OutputKeys.INDENT, &quot;yes&quot;);&#x2F;&#x2F;是否用空白分割</span><br><span class="line">        serializer.setOutputProperty(OutputKeys.METHOD, &quot;html&quot;);&#x2F;&#x2F;输出类型</span><br><span class="line">        serializer.transform(domSource, streamResult);</span><br><span class="line">        outStream.close();</span><br><span class="line">        String content &#x3D; new String(outStream.toByteArray());</span><br><span class="line">        System.err.println(content);</span><br><span class="line">        FileUtils.writeStringToFile(new File(path, &quot;interface.html&quot;), content,</span><br><span class="line">                &quot;utf-8&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Throwable &#123;</span><br><span class="line">        WordHelper.parseDocx2Html();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>滚回去继续升级<code>ewebeditor</code>了，擦公司的前辈居然有人做了一个一键排版和文章重排，直接动了源代码，<strong>有时间研究一下</strong>，果然老系统出神仙。</p>
<blockquote>
<p>PS：老系统代码里面老板的名字在上面，老板是大公司程序员出身，挺好。</p>
</blockquote>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>永远不要小看任何细节的点，看似平平无奇的功能，其实真正考虑要实现的时候。</p>
<p>一个简单的复制粘贴其实也并不简单。word的复制和原样粘贴要实现其实不太容易。</p>
<p>那么这种word转译的exe插件，他们是怎么做到的，我现在产生了无限的思考……</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>百度编辑器</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次CORS踩坑记录</title>
    <url>/2020/07/26/note3/</url>
    <content><![CDATA[<h1 id="记一次CORS踩坑记录"><a href="#记一次CORS踩坑记录" class="headerlink" title="记一次CORS踩坑记录"></a>记一次CORS踩坑记录</h1><p>今天远程工作的内容是实现CORS的跨域访问，本来特别简单的问题，却因为Spring的封装“坑”的有点惨。下面记录下整个过程</p>
<a id="more"></a>

<h2 id="踩坑原因"><a href="#踩坑原因" class="headerlink" title="踩坑原因"></a>踩坑原因</h2><ol>
<li>如果存在<code>web.xml</code> 配置，访问的时候会忽略掉其他的任何i形式的配置，只生效<code>xml</code>配置</li>
<li>项目中配置允许post跨域无效，只能get跨域访问，原因未知</li>
</ol>
<h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><ol>
<li>在请求当中加入<code>@crossxxx</code>注解，发现无效</li>
<li>将请求改为具体的<code>RequestMethod.GET</code> 或者<code>POST</code></li>
</ol>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p>网上的博客有许多的参考解决方案 <span class="exturl" data-url="aHR0cDovL3d3dy50aG9tYXN5b3VuZy5jbi9mb250ZW5kLzIwMTcvMDQvMDEvYWpheC1zZXNzaW9uLw==" title="http://www.thomasyoung.cn/fontend/2017/04/01/ajax-session/">http://www.thomasyoung.cn/fontend/2017/04/01/ajax-session/<i class="fa fa-external-link"></i></span> 个人博客，多了参数的介绍</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMjQ2OTcxMw==" title="https://segmentfault.com/a/1190000012469713">https://segmentfault.com/a/1190000012469713<i class="fa fa-external-link"></i></span> segament一个博客，写得非常棒</p>
<p>其他资料：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1vb2MuY29tL3FhZGV0YWlsLzMwMjMzMw==" title="https://www.imooc.com/qadetail/302333">https://www.imooc.com/qadetail/302333<i class="fa fa-external-link"></i></span> <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mMzg0MGM4YzAyYmE=" title="https://www.jianshu.com/p/f3840c8c02ba">https://www.jianshu.com/p/f3840c8c02ba<i class="fa fa-external-link"></i></span> 简书介绍CORS</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvdWppbmxvbmcxL2FydGljbGUvZGV0YWlscy84MDM1NzgxOQ==" title="https://blog.csdn.net/doujinlong1/article/details/80357819">https://blog.csdn.net/doujinlong1/article/details/80357819<i class="fa fa-external-link"></i></span> 【业务知识——Logger日志打印规范】<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZG9pdDg3OTEvcC84OTQ3MDI0Lmh0bWw=" title="https://www.cnblogs.com/doit8791/p/8947024.html">https://www.cnblogs.com/doit8791/p/8947024.html<i class="fa fa-external-link"></i></span> 【聊聊日志打印规范问题】 研发的同时抽时间看下</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>使用原生的配置代替spring 的整合配置 最佳答案：<span class="exturl" data-url="aHR0cDovL3d3dy50aG9tYXN5b3VuZy5jbi9mb250ZW5kLzIwMTcvMDQvMDEvYWpheC1zZXNzaW9u" title="http://www.thomasyoung.cn/fontend/2017/04/01/ajax-session">http://www.thomasyoung.cn/fontend/2017/04/01/ajax-session<i class="fa fa-external-link"></i></span></p>
<h2 id="更改之后的配置"><a href="#更改之后的配置" class="headerlink" title="更改之后的配置"></a>更改之后的配置</h2><ol>
<li>使用<code>pom.xml</code>加入新的依赖，使用Cors的原生支持</li>
<li>在<code>web.xml</code>当中增加如下配置</li>
<li>配置的更详细介绍在上面提到的博客当中，这里不多赘述</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跨域配置:参考 http:&#x2F;&#x2F;www.thomasyoung.cn&#x2F;fontend&#x2F;2017&#x2F;04&#x2F;01&#x2F;ajax-session&#x2F;--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;!-- 原生Cors过滤器配置 --&gt;</span><br><span class="line">        &lt;filter-name&gt;CorsFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;com.thetransactioncompany.cors.CORSFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--</span><br><span class="line">		非跨域请求是否可以通过此过滤器，默认为true；如果设置为false，则只有跨域的请求被允许</span><br><span class="line">          --&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;cors.allowGenericHttpRequests&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;true&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line"></span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;cors.allowOrigin&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;http:&#x2F;&#x2F;192.168.92.190:8080,http:&#x2F;&#x2F;192.168.92.145:8080,&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        是否允许来自allowOrigin的子域名的请求，默认不允许；子域名的概念大家应该清楚，www.example.com是example.com的子域名</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;cors.allowSubdomains&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;false&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">        &lt;!-- cors.allowed.methods --&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;cors.supportedMethods&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;GET,POST,HEAD,OPTIONS,PUT&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">        &lt;!-- cors.allowed.headers --&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;cors.supportedHeaders&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line"></span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;cors.exposedHeaders&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;!--这里可以添加一些自己的暴露Headers   --&gt;</span><br><span class="line">            &lt;param-value&gt;Access-Control-Allow-Origin,Access-Control-Allow-Credentials&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">        &lt;!-- 对应 cors.support.credentials --&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;cors.supportsCredentials&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;true&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">        &lt;!-- cors.preflight.maxage 最大缓存时间 --&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;cors.maxAge&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;10&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;&#x2F;filter&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;CorsFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure>

<h2 id="IE8-IE9-解决拒绝访问的问题"><a href="#IE8-IE9-解决拒绝访问的问题" class="headerlink" title="IE8/IE9 解决拒绝访问的问题"></a>IE8/IE9 解决拒绝访问的问题</h2><h3 id="第一种：引入js文件"><a href="#第一种：引入js文件" class="headerlink" title="第一种：引入js文件"></a>第一种：引入js文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery-ajaxtransport-xdomainrequest&#x2F;1.0.3&#x2F;jquery.xdomainrequest.min.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="第二种：Jquery开启跨域模式"><a href="#第二种：Jquery开启跨域模式" class="headerlink" title="第二种：Jquery开启跨域模式"></a>第二种：Jquery开启跨域模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery.support.cors &#x3D; true</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>cors</tag>
      </tags>
  </entry>
  <entry>
    <title>雪花算法代码</title>
    <url>/2020/10/27/code/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从github上面摘录的一个雪花算法的实现，可以作为学习参考</p>
<h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myapp.cunpleuserapp.util;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Twitter_Snowflake&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span></span><br><span class="line"><span class="comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 加起来刚好64位，为一个Long型。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowflakeIdWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Fields===========================================</span></span><br><span class="line">    <span class="comment">/** 开始时间截 (2015-01-01) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> twepoch = <span class="number">1420041600000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 机器id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据标识id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 支持的最大数据标识id，结果是31 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 序列在id中占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 机器ID向左移12位 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据标识id向左移17位(12+5) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 时间截向左移22位(5+5+12) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 工作机器ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据中心ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 毫秒内序列(0~4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 上次生成ID的时间截 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Constructors=====================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerId 工作ID (0~31)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datacenterId 数据中心ID (0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowflakeIdWorker</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"worker Id can't be greater than %d or less than 0"</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"datacenter Id can't be greater than %d or less than 0"</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Methods==========================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SnowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    String.format(<span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//时间戳改变，毫秒内序列重置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上次生成ID的时间截</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="comment">//</span></span><br><span class="line">                | (datacenterId &lt;&lt; datacenterIdShift) <span class="comment">//</span></span><br><span class="line">                | (workerId &lt;&lt; workerIdShift) <span class="comment">//</span></span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Test=============================================</span></span><br><span class="line">    <span class="comment">/** 测试 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SnowflakeIdWorker idWorker = <span class="keyword">new</span> SnowflakeIdWorker(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> id = idWorker.nextId();</span><br><span class="line">            System.out.println(Long.toBinaryString(id));</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>雪花算法</tag>
      </tags>
  </entry>
  <entry>
    <title>面试规划</title>
    <url>/2020/10/20/note35/</url>
    <content><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>待在一个小公司天天做CRUD，习惯了安逸，这不是什么好事，一出来找工作看到招聘要求感觉自己凉了半截。但是都知道面试是一个成本很高的事情，所以端正心态，重新开始。</p>
<p>总结起来就是一个字：<strong>真特么累</strong></p>
<p>不过有什么办法呢，我是对待所有的事情都抱持着学习的态度，所以把面试本身也作为技术来学了，不得不说，把个人简历写好的重要性，是直接决定你能不能找到工作的关键。</p>
<p>最后就是说一句，非常推荐在职找工作，没有顾虑，可以放下心来好好准备面试，没有硬实力千万不要裸辞。</p>
<a id="more"></a>

<h2 id="开局一张图："><a href="#开局一张图：" class="headerlink" title="开局一张图："></a>开局一张图：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbGF6eVRpbWVzL2ltYWdlUmVwb3NpdHkvcmF3L21hc3Rlci9pbWcvMjAyMDEwMjAxOTQ5NTQucG5n" title="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201020194954.png">https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201020194954.png<i class="fa fa-external-link"></i></span></p>
<p><img src="https://gitee.com/lazyTimes/imageReposity/raw/master/img/20201020200217.png" alt=""></p>
<h1 id="修改自己的简历："><a href="#修改自己的简历：" class="headerlink" title="修改自己的简历："></a>修改自己的简历：</h1><h2 id="项目："><a href="#项目：" class="headerlink" title="项目："></a>项目：</h2><h3 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h3><p>简要的写清楚你的项目是干啥的，突出亮点和成就</p>
<h3 id="职责："><a href="#职责：" class="headerlink" title="职责："></a>职责：</h3><p>简要写，主要写一下你在当前岗位主要担任的事情。<strong>精简</strong></p>
<p>其实这部分是大部分人简历都这样写的，这样拉不开差距</p>
<h2 id="涉及技术："><a href="#涉及技术：" class="headerlink" title="涉及技术："></a>涉及技术：</h2><ol>
<li>突出你的技术亮点，以及用技术解决了什么难题。注意是解决了什么难题，别人不会关注你的业务</li>
<li>你是如何看待项目问题的，你是如何从解决问题当中学到东西的</li>
<li>突出技术难题以及解决办法，这样有利于让下家判断你是否可以接受新工作</li>
</ol>
<h3 id="项目收获："><a href="#项目收获：" class="headerlink" title="项目收获："></a>项目收获：</h3><ol>
<li>项目给你的成长有什么帮助</li>
<li>突出特点，以及他的成就</li>
<li>你是如何看待这个项目的？</li>
</ol>
<h2 id="个人评价："><a href="#个人评价：" class="headerlink" title="个人评价："></a>个人评价：</h2><p>可以随意写一写。自由发挥，当然不要发挥过头</p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>面试心态真的很重要，特别是投的简历石沉大海，这时候你需要不断的反思简历应该怎么写，目前还在不断的找工作，希望自己能换份好工作把，肚子里没啥货，实在不行只能回炉重造了…..</p>
<p>另外说一下：上次百度编辑器换了之后，升级的<code>ewebeditor</code> 不能用差点没把我送走，后续发篇文章讲下处理，比源码更难理解的是加密过的源码，不知道能不能抗住。</p>
<h2 id="技术岗位的建议（摘抄）"><a href="#技术岗位的建议（摘抄）" class="headerlink" title="技术岗位的建议（摘抄）"></a>技术岗位的建议（摘抄）</h2><p>这些算是我作为过来⼈对于应届毕业⽣和刚⼯作不久的同学的⼀些⼩⼩建议吧。<br>（1）⼀定要紧跟技术前进的脚步，尤其是⼤数据相关的技术，在技术更迭的时候⼀定要学习熟悉新技<br>术，看源码，哪怕⾃⼰在⼯作中⽤不到也⼀定要学。因为这是你下⼀份⼯作的敲⻔砖。<br>我作为⼀个⽼兵，在上⼀家公司⼯作4年，公司没有spark和flink的业务场景，我也没有逼迫⾃⼰学习这<br>些新技术。<br>结果现在⾯试碰壁，其实⼤部分原因就是⼈家⽤的主流技术就是这些，你不会你就被淘汰。<br>（2）不要给⾃⼰设置舒适区，这个就是说，⼀个公司待久了不要懒惰，不能荒废⾃⼰，始终要保持清<br>醒的头脑和进取⼼，不断学习，不断完善⾃⼰的技术，架构设计能⼒，项⽬管理能⼒，交付能⼒等。<br>⼀定要及时从项⽬中总结经验和不⾜，最好落实到⽇记本中，最后通过不断思考，形成⾃⼰的做事⽅法<br>论。<br>（3）对⾃⼰的职业⽣涯要有⼀个规划，以后要做哪⼀块⼀定要有⾃⼰的想法，确定了就要从这个⽅向<br>完善⾃⼰，多学多练。<br>⽬前⼤数据这⼀块，有数据中台架构的公司不是很多，除了算法岗外，⼤多数⼈在团队中都是1专多能<br>的⻆⾊，今天⼲⼲ETL，明天搞数仓，后天⼜给BI出数据，可能⼜搞调度系统、报表系统、标签系统、<br>反作弊平台等平台。<br>没有⼈会专⼀做某⼀块，但是⾃⼰⼀定要想好哪⼀块是⾃⼰以后要⾛的⽅向，那么这⼀个⽅向确定了就<br>要深⼊的学习这⼀块的知识，多看源码，多做练习，如果接触到具体项⽬，要在项⽬中沉淀⾃⼰，最后<br>形成⾃⼰的知识体系。<br>（4）做事情要有担当，不要根据OKR给⾃⼰设置界限，有能⼒有空闲多做⼀定要多做，这也是别⼈认<br>可你的最佳途径之⼀。互联⽹圈⼦很⼩，⼤家认可你，以后去⼤⼚，换个好⼯作，也许就更容易。</p>
<h1 id="2020-10-15-面试"><a href="#2020-10-15-面试" class="headerlink" title="2020-10-15 面试"></a>2020-10-15 面试</h1><h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><ol>
<li>进去交一份简历</li>
<li>在办公室等待一分钟左右</li>
<li>面试官进入<ol>
<li>直接问自己做的第一个项目</li>
<li>项目主要是干什么的</li>
<li>解决了什么问题</li>
<li>在项目当中遇到了什么难题</li>
<li>自己有没有从其他的项目中找到解决方案</li>
<li>有没有其他同类型的产品</li>
<li>第二个项目，主要做什么</li>
<li>你为什么要从上一家离职？<ol>
<li>重复性劳动</li>
<li>想要一个更好的平台</li>
<li>学新技术（后悔说出口）</li>
<li>考虑你是否有稳定性</li>
</ol>
</li>
<li>说说自己公司的情况<ol>
<li>业务简单</li>
<li>基本以旧项目为主</li>
<li>没有什么新需求</li>
<li>要求稳定</li>
</ol>
</li>
<li>结果<ol>
<li>个人发展和公司发展不符</li>
<li>走人</li>
<li>回家</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h2><ol>
<li><p>小公司，30人左右。环境还不错，每个人工位还是有的</p>
</li>
<li><p>面试之前，调查清楚公司，了解一下公司需要什么人才，你再去回答，感觉自己太过紧张说错了很多话</p>
</li>
<li><p>20分钟基本可以从简历和问答判断你是否符合标准，如果20分钟结束对话，基本是PASS</p>
</li>
<li><p>学会欲擒故纵，不要立马说出自己的想法。我就是吃了亏，暴露想法被PASS</p>
</li>
<li><p>面试前脑子中模拟一下被问到各种问题的回答策略，比如一下几个问题</p>
<ol>
<li>为什么要从驴上下来</li>
<li>为什么要找我这匹马</li>
<li>什么时候到我这匹马上来</li>
</ol>
</li>
<li><p>没有面试经验，感觉自己说项目不是很熟练，还要多加练习</p>
</li>
<li><p>性格过于耿直，有时候要隐藏自己想法</p>
</li>
<li><p>没有技术的面试，以聊项目为主，应该定位为运维，要求不高，但是会一直询问细节，判断是否真的做过项目</p>
</li>
<li><p>明天还有一家面试，加油</p>
</li>
</ol>
<h1 id="2020-10-16-面试"><a href="#2020-10-16-面试" class="headerlink" title="2020-10-16 面试"></a>2020-10-16 面试</h1><h2 id="1-jvm加载一个类的过程？双亲委派模型是什么？"><a href="#1-jvm加载一个类的过程？双亲委派模型是什么？" class="headerlink" title="1. jvm加载一个类的过程？双亲委派模型是什么？"></a>1. jvm加载一个类的过程？双亲委派模型是什么？</h2><h2 id="2-eureka和zookeeper是什么？他们有什么区别？"><a href="#2-eureka和zookeeper是什么？他们有什么区别？" class="headerlink" title="2. eureka和zookeeper是什么？他们有什么区别？"></a>2. eureka和zookeeper是什么？他们有什么区别？</h2><h2 id="3-虚拟机的几个区？分别有什么作用？"><a href="#3-虚拟机的几个区？分别有什么作用？" class="headerlink" title="3. 虚拟机的几个区？分别有什么作用？"></a>3. 虚拟机的几个区？分别有什么作用？</h2><h2 id="4-什么是锁？都有哪些锁？他们的作用？"><a href="#4-什么是锁？都有哪些锁？他们的作用？" class="headerlink" title="4. 什么是锁？都有哪些锁？他们的作用？"></a>4. 什么是锁？都有哪些锁？他们的作用？</h2><h2 id="5-NIO-BIO-AIO的区别"><a href="#5-NIO-BIO-AIO的区别" class="headerlink" title="5. NIO/BIO/AIO的区别"></a>5. NIO/BIO/AIO的区别</h2><h2 id="6-死锁是什么？什么时候会发生死锁？"><a href="#6-死锁是什么？什么时候会发生死锁？" class="headerlink" title="6. 死锁是什么？什么时候会发生死锁？"></a>6. 死锁是什么？什么时候会发生死锁？</h2><h2 id="7-update查询的问题（sql题目）？"><a href="#7-update查询的问题（sql题目）？" class="headerlink" title="7. update查询的问题（sql题目）？"></a>7. update查询的问题（sql题目）？</h2><h2 id="8-hashMap和HashTable的区别？"><a href="#8-hashMap和HashTable的区别？" class="headerlink" title="8. hashMap和HashTable的区别？"></a>8. hashMap和HashTable的区别？</h2><h2 id="9-TreeMap是如何实现的？他有什么特点"><a href="#9-TreeMap是如何实现的？他有什么特点" class="headerlink" title="9. TreeMap是如何实现的？他有什么特点"></a>9. TreeMap是如何实现的？他有什么特点</h2><h2 id="10-线程有几个状态？如何实现线程？"><a href="#10-线程有几个状态？如何实现线程？" class="headerlink" title="10. 线程有几个状态？如何实现线程？"></a>10. 线程有几个状态？如何实现线程？</h2><h2 id="11-String-a-“str”-和-String-a-new-String-“aa”-有什么区别？能否解释一下？"><a href="#11-String-a-“str”-和-String-a-new-String-“aa”-有什么区别？能否解释一下？" class="headerlink" title="11. String a = “str” 和 String a = new String(“aa”) 有什么区别？能否解释一下？"></a>11. String a = “str” 和 String a = new String(“aa”) 有什么区别？能否解释一下？</h2><h2 id="12-mysql在什么时候会索引失效，常见的sql优化方式？"><a href="#12-mysql在什么时候会索引失效，常见的sql优化方式？" class="headerlink" title="12. mysql在什么时候会索引失效，常见的sql优化方式？"></a>12. mysql在什么时候会索引失效，常见的sql优化方式？</h2><h2 id="13-常用的设计模式有几种？列举一下？"><a href="#13-常用的设计模式有几种？列举一下？" class="headerlink" title="13. 常用的设计模式有几种？列举一下？"></a>13. 常用的设计模式有几种？列举一下？</h2><h2 id="14-mysql的存储原理是什么？为什么使用B-Tree-作为底层？"><a href="#14-mysql的存储原理是什么？为什么使用B-Tree-作为底层？" class="headerlink" title="14. mysql的存储原理是什么？为什么使用B+Tree 作为底层？"></a>14. mysql的存储原理是什么？为什么使用B+Tree 作为底层？</h2><h2 id="15-mysql事务的等级，以及他是如何支持事务的"><a href="#15-mysql事务的等级，以及他是如何支持事务的" class="headerlink" title="15. mysql事务的等级，以及他是如何支持事务的"></a>15. mysql事务的等级，以及他是如何支持事务的</h2><h2 id="其他问题："><a href="#其他问题：" class="headerlink" title="其他问题："></a>其他问题：</h2><ol>
<li>设计一个秒杀系统，多线程抢占下单，当数量为1的时候，如何防止 变为 -1</li>
<li>jar 包如何切换环境，切换配置运行，如何敲命令？</li>
<li>“ABCDE”如何转为<code>List&lt;String&gt;</code>集合？</li>
<li>什么是正排索引，什么是倒序索引？什么是倒排索引</li>
<li>如果给”ABCDE”转成的集合，计算出现个数，有几种方法?</li>
<li>布隆过滤器用过吗，他有什么特点？</li>
<li>如果一个文件大小是100M，现在服务器限制只能传30M上限的文件，你要怎么做？</li>
<li>stream 常用的方法，你都用过哪些</li>
<li>一个<code>mapping</code> 在springMVC里面的流程</li>
<li>mybatis 里面常用的一些xml标签</li>
<li>mq：简历没写，没问</li>
<li>redis：简历没写，没问</li>
<li>用过分布式系统么？多线程的理解</li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>简历</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch6.2.4 踩坑</title>
    <url>/2020/07/26/note9/</url>
    <content><![CDATA[<h1 id="Elasticsearch-踩坑-6-2-4-版本"><a href="#Elasticsearch-踩坑-6-2-4-版本" class="headerlink" title="Elasticsearch 踩坑 - 6.2.4 版本"></a>Elasticsearch 踩坑 - 6.2.4 版本</h1><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><h2 id="自定义评分器"><a href="#自定义评分器" class="headerlink" title="自定义评分器"></a>自定义评分器</h2><p><strong>可以根据自己的规则去调整搜索结果的评分，修改权重</strong></p>
<ol>
<li>需要根据用户标签以及网站标签，收集用户最关注的标签内容，进行标签标记</li>
<li>收集数据生成可视化报告</li>
<li>关键字查询，基于用户的网站标签内容建设</li>
<li>形成综合信息关联库。以核心用户标签和核心业务标签为参考，对重点资源进行归纳合并，形成重点主题资源关联关系对应表。</li>
<li>设计一个标签关联模块，可以由运维进行标签关联的配置,即给用户分配权重</li>
</ol>
<a id="more"></a>

<h2 id="智能推荐："><a href="#智能推荐：" class="headerlink" title="智能推荐："></a>智能推荐：</h2><p>搜索优化查询</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="#elasticsearch-踩坑-624-版本">Elasticsearch 踩坑 - 6.2.4 版本</a></li>
<li>目标<ul>
<li><a href="#自定义评分器">自定义评分器</a></li>
<li><a href="#智能推荐">智能推荐：</a></li>
</ul>
</li>
<li><a href="#目录">目录</a></li>
<li>官方改变1<ul>
<li><a href="#restful请求需要加入header">RestFul请求需要加入Header</a></li>
</ul>
</li>
<li>官方改变2：<ul>
<li><a href="#分词器-n元语法ngram">分词器 N元语法ngram</a></li>
</ul>
</li>
<li>\1. 基本使用<ul>
<li><a href="#11-创建索引">1.1 创建索引</a></li>
<li><a href="#12-查看索引信息">1.2 查看索引信息:</a></li>
<li>1.3 创建类型<ul>
<li><a href="#132-指定id的方式">1.3.2 指定id的方式：</a></li>
<li><a href="#131-不指定id的方式">1.3.1 不指定id的方式</a></li>
</ul>
</li>
<li><a href="#14-创建一个文档">1.4 创建一个文档</a></li>
</ul>
</li>
<li>\2. 基础搜索<ul>
<li>2.1 使用query 进行搜索<ul>
<li><a href="#原始方式">原始方式</a></li>
<li>kibana方式<ul>
<li><a href="#211-如果只想查找一个字段可以使用term">2.1.1 如果只想查找一个字段，可以使用term</a></li>
</ul>
</li>
</ul>
</li>
<li>2.2 过滤器<ul>
<li><a href="#221-es6以下">2.2.1 ES6以下：</a></li>
<li><a href="#222-es6及以上">2.2.2 ES6及以上：</a></li>
</ul>
</li>
<li>2.3 应用聚集<ul>
<li><a href="#231-es6以下">2.3.1 ES6以下：</a></li>
<li><a href="#232-es6及以上">2.3.2 ES6及以上：</a></li>
</ul>
</li>
<li><a href="#24-通过id获取文档">2.4 通过Id获取文档</a></li>
</ul>
</li>
<li>\3. elasticsearch配置<ul>
<li><a href="#31-指定集群名称">3.1 指定集群名称：</a></li>
<li><a href="#32-指定详细的日志记录">3.2 指定详细的日志记录</a></li>
<li>3.3 调整虚拟机大小<ul>
<li><a href="#331-linux-使用如下命令">3.3.1 linux 使用如下命令：</a></li>
<li><a href="#332-使用elasticsearchyml修改启动堆内存大小">3.3.2 使用elasticsearch.yml修改启动堆内存大小</a></li>
<li><a href="#333-使用修改binelasticsearchinsh-修改">3.3.3 使用修改bin/elasticsearch.in.sh 修改</a></li>
</ul>
</li>
<li>3.4 集群中加入节点<ul>
<li><a href="#341-查看节点状态">3.4.1 查看节点状态</a></li>
</ul>
</li>
</ul>
</li>
<li>\4. 映射_mapping<ul>
<li>4.1 检索和自定义映射<ul>
<li><a href="#411-获取目前的映射">4.1.1 获取目前的映射</a></li>
<li><a href="#412-获取自动生成的映射">4.1.2 获取自动生成的映射</a></li>
<li>4.1.3 定义新的映射<ul>
<li><a href="#es6以下版本">es6以下版本</a></li>
<li><a href="#es6以上版本">es6以上版本</a></li>
</ul>
</li>
<li><a href="#414-改变现有字段类型的方法">4.1.4 改变现有字段类型的方法：</a></li>
</ul>
</li>
<li>4.2 用于定义文档字段的核心类型<ul>
<li><a href="#421-定义映射当中的index选项">4.2.1 定义映射当中的index选项</a></li>
<li><a href="#422-如何创建嵌套类型">4.2.2 如何创建嵌套类型：</a></li>
<li><a href="#423-定义多字段和数组类型">4.2.3 定义多字段和数组类型</a></li>
</ul>
</li>
<li>4.3 使用预定义字段<ul>
<li><a href="#431-控制如何存储和搜索文档">4.3.1 控制如何存储和搜索文档</a></li>
</ul>
</li>
<li>4.4 更新现有文档<ul>
<li><a href="#441-文档更新包含如下步骤">4.4.1 文档更新包含如下步骤：</a></li>
</ul>
</li>
<li>4.5 删除文档<ul>
<li><a href="#451-删除文档的方式">4.5.1 删除文档的方式</a></li>
<li><a href="#452-删除文档">4.5.2 删除文档</a></li>
<li><a href="#453-删除单个文档">4.5.3 删除单个文档</a></li>
<li><a href="#454-删除映射类型和删除查询匹配的文档">4.5.4 删除映射类型和删除查询匹配的文档</a></li>
<li><a href="#455-删除索引">4.5.5 删除索引</a></li>
<li><a href="#456-关闭和开发索引">4.5.6 关闭和开发索引</a></li>
</ul>
</li>
</ul>
</li>
<li>\5. 版本控制<ul>
<li>5.1 乐观锁<ul>
<li><a href="#511-内部版本控制">5.1.1 内部版本控制</a></li>
<li><a href="#512-外部版本控制">5.1.2 外部版本控制</a></li>
</ul>
</li>
<li><a href="#52-自动重试">5.2 自动重试</a></li>
</ul>
</li>
<li>\6. 搜索与高级搜索分析<ul>
<li><a href="#61-搜索请求的基本模块">6.1 搜索请求的基本模块</a></li>
<li>6.2 基于url的搜索请求<ul>
<li><a href="#621-基于from-和szize的参数来实现结果分页">6.2.1 基于from 和szize的参数来实现结果分页</a></li>
<li><a href="#622-改变结果的顺序">6.2.2 改变结果的顺序</a></li>
<li><a href="#623-搜索结果当中限制_source-字段">6.2.3 搜索结果当中限制_source 字段</a></li>
<li><a href="#624-匹配查询">6.2.4 匹配查询</a></li>
</ul>
</li>
<li>6.3 基于请求主体的搜索请求<ul>
<li><a href="#631-使用from-和-size参数结果分页">6.3.1 使用from 和 size，参数结果分页</a></li>
<li>6.3.2 过滤返回_source 内容<ul>
<li><a href="#在source字段当中返回通配符">在source字段当中返回通配符</a></li>
<li><a href="#通过include以及exclude-过滤返回_source的内容">通过include以及exclude 过滤返回_source的内容</a></li>
</ul>
</li>
<li><a href="#633-基于结果的排序">6.3.3 基于结果的排序</a></li>
</ul>
</li>
<li>6.4 实践中的基础模块<ul>
<li><a href="#641-理解回复的内容">6.4.1 理解回复的内容</a></li>
</ul>
</li>
<li>6.5 查询和过滤器DSL （重点）<ul>
<li>6.5.1 match 查询和term过滤器<ul>
<li><a href="#过滤器和查询器有什么不同">过滤器和查询器有什么不同：</a></li>
<li><a href="#es6以下-以及旧版本使用的方式">es6以下 以及旧版本使用的方式</a></li>
<li><a href="#font-colorred这里需要注意下面使用的是es6以及以上版本font">这里需要注意下面使用的是es6以及以上版本</a></li>
</ul>
</li>
</ul>
</li>
<li>6.6 常用的基础查询和过滤器<ul>
<li><a href="#661-match_all-的使用场景">6.6.1 match_all 的使用场景</a></li>
<li>6.6.2 query_string 查询<ul>
<li><a href="#使用query_string-进行复杂的查询">使用query_string 进行复杂的查询</a></li>
</ul>
</li>
<li>6.6.3 term 查询和 term过滤器<ul>
<li><a href="#使用term-过滤器的得分和term查询器的得分对比">使用term 过滤器的得分，和term查询器的得分对比</a></li>
</ul>
</li>
<li><a href="#664-terms-查询">6.6.4 terms 查询</a></li>
<li>6.5.5 match查询和 term过滤器<ul>
<li><a href="#布尔查询行为">布尔查询行为</a></li>
<li>词组（phrase ）查询的方式<ul>
<li><a href="#es5版本以及以下的语法">es5版本以及以下的语法：</a></li>
<li><a href="#es6以及以上要使用以下语法">es6以及以上要使用以下语法</a></li>
</ul>
</li>
</ul>
</li>
<li>6.5.6 phrase_prefix 查询<ul>
<li><a href="#es5x-版本以及以下的语法">es5.x 版本以及以下的语法：</a></li>
<li><a href="#es6x-需要改成如下写法">es6.x 需要改成如下写法</a></li>
<li><a href="#使用multi_match-匹配多个字段">使用multi_match 匹配多个字段</a></li>
</ul>
</li>
</ul>
</li>
<li>6.7 组合查询和复合查询<ul>
<li><a href="#671-bool查询">6.7.1 bool查询</a></li>
<li><a href="#672-bool-的过滤器">6.7.2 bool 的过滤器</a></li>
</ul>
</li>
<li>6.8 超越match 和 过滤器的查询<ul>
<li>6.8.1 range 查询和过滤器<ul>
<li><a href="#模拟数据">模拟数据</a></li>
<li><a href="#现在需要查找出-11-年到-16年的数据">现在需要查找出 11 年到 16年的数据</a></li>
</ul>
</li>
<li>6.8.2 prefix 查询和过滤器<ul>
<li><a href="#在过滤器当中使用">在过滤器当中使用</a></li>
</ul>
</li>
<li><a href="#683-wildcard-查询">6.8.3 wildcard 查询</a></li>
</ul>
</li>
<li>6.9 使用过滤器查询字段的存在性<ul>
<li><a href="#691-exists-过滤器">6.9.1 exists 过滤器</a></li>
<li>6.9.2 missing 过滤器（6.x以上版本已经删除）<ul>
<li><a href="#作为测试先插入一条增加一个字段的数据">作为测试,先插入一条增加一个字段的数据</a></li>
<li><a href="#接下来查找字段里没有的值这样写是错误的没有正确写法6x">接下来，查找字段里没有的值,这样写是错误的，没有正确写法（6.x）</a></li>
</ul>
</li>
<li>6.9.3 将任何查询转为过滤器<ul>
<li><a href="#缓存过滤器">缓存过滤器</a></li>
</ul>
</li>
<li><a href="#694-为任务选择最好的查询">6.9.4 为任务选择最好的查询</a></li>
</ul>
</li>
</ul>
</li>
<li>\7. 分析数据<ul>
<li>7.1 什么是分析数据<ul>
<li><a href="#711-字符过滤">7.1.1 字符过滤</a></li>
<li><a href="#712-切分为分词">7.1.2 切分为分词</a></li>
<li><a href="#713-分词过滤器">7.1.3 分词过滤器</a></li>
<li><a href="#714-分词索引">7.1.4 分词索引</a></li>
</ul>
</li>
<li>7.2 为文档使用分析器<ul>
<li>7.2.1 创建索引的过程中，添加定制分析器<ul>
<li><a href="#旧版本的使用方式">旧版本的使用方式</a></li>
<li><a href="#网上的案例">网上的案例：</a></li>
<li><a href="#将书上的案例改为6x支持的形式格式如下">将书上的案例改为6.x支持的形式，格式如下:</a></li>
</ul>
</li>
<li><a href="#722-使用elasticsearchyml-的配置文件进行配置">7.2.2 使用elasticsearch.yml 的配置文件进行配置</a></li>
<li>7.2.3 在映射中指定某个字段的分析器<ul>
<li><a href="#书本的方式已经不适用于6x版本了根据官方文档的内容要进行如下定义">书本的方式已经不适用于6.x版本了，根据官方文档的内容要进行如下定义</a></li>
</ul>
</li>
</ul>
</li>
<li>7.3 使用API来分析文本<ul>
<li><a href="#731-使用_analyzer-内置api来进行分析分析器解析步骤">7.3.1 使用_analyzer 内置API来进行分析分析器解析步骤</a></li>
<li><a href="#732-分析中指定自定义分析器">7.3.2 分析中指定自定义分析器</a></li>
<li>7.3.3 使用组合即时创建分析器<ul>
<li><a href="#使用curl方式">使用curl方式</a></li>
<li><a href="#使用kibana方式">使用kibana方式</a></li>
</ul>
</li>
<li><a href="#734-使用基于某个字段的映射分析">7.3.4 使用基于某个字段的映射分析</a></li>
<li><a href="#735-使用词条向量api来学习索引词条">7.3.5 使用词条向量API来学习索引词条</a></li>
</ul>
</li>
<li>7.4 分析器/分词器和分词过滤器<ul>
<li><a href="#740-分析器的概览">7.4.0 分析器的概览</a></li>
<li>7.4.1 内置分析器<ul>
<li><a href="#标准分析器">标准分析器</a></li>
<li><a href="#简单分析器"><strong>简单分析器</strong></a></li>
<li><a href="#空白分析器"><strong>空白分析器</strong></a></li>
<li><a href="#停止分析器"><strong>停止分析器</strong></a></li>
<li><a href="#关键字分析器"><strong>关键字分析器</strong></a></li>
<li><a href="#模式分析器"><strong>模式分析器</strong></a></li>
<li><a href="#语言分析器"><strong>语言分析器</strong></a></li>
<li><a href="#指纹分析器"><strong>指纹分析器</strong></a></li>
<li><a href="#雪球分析器">雪球分析器</a></li>
</ul>
</li>
<li>7.4.2 分词器<ul>
<li><a href="#标准分词器"><strong>标准分词器</strong></a></li>
<li><a href="#字母分词器"><strong>字母分词器</strong></a></li>
<li><a href="#小写分词器"><strong>小写分词器</strong></a></li>
<li><a href="#空格分词器"><strong>空格分词器</strong></a></li>
<li><a href="#uax-url电子邮件令牌生成器">UAX URL电子邮件令牌生成器</a></li>
<li><a href="#经典分词器">经典分词器</a></li>
<li><a href="#泰语分词器">泰语分词器</a></li>
</ul>
</li>
<li>7.4.3 分词过滤器<ul>
<li><a href="#标准分词过滤器">标准分词过滤器</a></li>
<li><a href="#ascii-folding-token-filterascii折叠过滤器">ASCII Folding Token Filter（ASCII折叠过滤器）</a></li>
<li><a href="#flatten-graph-token-filter图形分词过滤器">Flatten Graph Token Filter（图形分词过滤器）</a></li>
<li><a href="#length-token-filter长度分词过滤器">Length Token Filter（长度分词过滤器）</a></li>
<li><a href="#lowercase-token-filter小写分词过滤器">Lowercase token filter（小写分词过滤器）</a></li>
<li><a href="#uppercase-token-filter大写分词过滤器">Uppercase Token Filter（大写分词过滤器）</a></li>
<li><a href="#ngram-token-filtern元语法过滤器">NGram Token Filter（N元语法过滤器）</a></li>
<li><a href="#edge-ngram-token-filter侧边n元语法过滤器">Edge NGram Token Filter（侧边N元语法过滤器）</a></li>
</ul>
</li>
<li>7.4.4 N元语法的使用场景以及使用案例<ul>
<li><a href="#使用案例">使用案例:</a></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS82LjQvYW5hbHlzaXMtc2hpbmdsZS10b2tlbmZpbHRlci5odG1s" title="https://www.elastic.co/guide/en/elasticsearch/reference/6.4/analysis-shingle-tokenfilter.html">Shingle Token Filter<i class="fa fa-external-link"></i></span>（滑动窗口分词过滤器）</li>
</ul>
</li>
</ul>
</li>
<li>7.5 提取词干<ul>
<li>7.5.1 算分提取词干<ul>
<li><a href="#选取kstem-作为案例测试">选取kstem 作为案例测试</a></li>
</ul>
</li>
<li><a href="#752-使用字典提取词干">7.5.2 使用字典提取词干</a></li>
</ul>
</li>
</ul>
</li>
<li>\8. 使用相关性进行搜索<ul>
<li>8.1 es 的打分机制<ul>
<li><a href="#811-文档是如何运作的">8.1.1 文档是如何运作的：</a></li>
<li><a href="#812-词频">8.1.2 词频</a></li>
<li><a href="#813-逆文档词频">8.1.3 逆文档词频</a></li>
<li><a href="#814-lucene-评分公式">8.1.4 Lucene 评分公式</a></li>
</ul>
</li>
<li>8.2 其他打分方式<ul>
<li><a href="#如何指定索引的打分方式">如何指定索引的打分方式？</a></li>
</ul>
</li>
<li><a href="#83-索引期间boosting">8.3 索引期间Boosting</a></li>
<li>8.4 查询期间的Boosting<ul>
<li><a href="#841-跨越多个字段的查询">8.4.1 跨越多个字段的查询</a></li>
<li><a href="#842-使用multi_match-查询指定整个boost">8.4.2 使用multi_match 查询，指定整个Boost</a></li>
<li><a href="#843-使用特殊符号对于name-进行boost">8.4.3 使用特殊符号^对于name 进行boost</a></li>
<li><a href="#844-query_string-中对于针对单个的词条进行boost">8.4.4 query_string 中对于针对单个的词条进行boost</a></li>
</ul>
</li>
<li>8.5 使用”解释(explain)”来理解文档评分<ul>
<li><a href="#851-解释一篇文档不匹配的原因">8.5.1 解释一篇文档不匹配的原因</a></li>
</ul>
</li>
<li>8.6 使用查询再打分来减小评分操作影响<ul>
<li><a href="#861-官方文档介绍-62版本">8.6.1 官方文档介绍 6.2版本</a></li>
<li><a href="#862-使用rescore-特性对于匹配文档子集再评分">8.6.2 使用rescore 特性，对于匹配文档子集再评分</a></li>
</ul>
</li>
<li>8.7 function_score 来定制得分<ul>
<li><a href="#871-function_score-的基本结构">8.7.1 function_score 的基本结构</a></li>
<li>8.7.2 weight 函数<ul>
<li><a href="#可以指定多个weight函数">可以指定多个weight函数</a></li>
</ul>
</li>
<li><a href="#873-合并得分">8.7.3 合并得分</a></li>
<li><a href="#874-field_value_factor-函数">8.7.4 field_value_factor 函数</a></li>
<li><a href="#875-在function_score-查询中使用field_value_factor">8.7.5 在function_score 查询中使用field_value_factor</a></li>
</ul>
</li>
<li>8.8 painless脚本(5.0后go语言脚本支持已删除)<ul>
<li><a href="#875-random_score-函数">8.7.5 random_score 函数</a></li>
<li>8.7.6 衰减函数<ul>
<li><a href="#官方文档">官方文档</a></li>
<li><a href="#配置选项">配置选项</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#89-使用脚本排序">8.9 使用脚本排序</a></li>
</ul>
</li>
<li>\9. Elasticsearch REST API 的学习使用<ul>
<li><a href="#90-api官网">9.0 API官网</a></li>
<li>9.1 REST 低级 Api<ul>
<li><a href="#911-起步">9.1.1 起步</a></li>
<li><a href="#912-初始化">9.1.2 初始化</a></li>
<li><a href="#913-执行请求">9.1.3 执行请求</a></li>
<li><a href="#914-接受响应体的处理">9.1.4 接受响应体的处理</a></li>
</ul>
</li>
<li>9.2 REST 高级 API<ul>
<li><a href="#921-机器翻译介绍">9.2.1 机器翻译介绍</a></li>
<li><a href="#922-兼容性">9.2.2 </a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWMvZWxhc3RpY3NlYXJjaC9lZGl0LzYuMi9kb2NzL2phdmEtcmVzdC9oaWdoLWxldmVsL2dldHRpbmctc3RhcnRlZC5hc2NpaWRvYw==" title="https://github.com/elastic/elasticsearch/edit/6.2/docs/java-rest/high-level/getting-started.asciidoc">兼容性<i class="fa fa-external-link"></i></span></li>
<li><a href="#923-起步">9.2.3 起步</a></li>
<li><a href="#924-创建一个rest-连接">9.2.4 创建一个rest 连接</a></li>
<li>9.2.5 【6.2.4】版本 支持的相关API （重点）<ul>
<li><a href="#创建索引">创建索引</a></li>
<li><a href="#删除索引">删除索引</a></li>
<li><a href="#开放索引">开放索引</a></li>
<li><a href="#关闭索引">关闭索引</a></li>
</ul>
</li>
<li>9.2.6 索引本身的API<ul>
<li><a href="#直接根据索引创建一个文档需要如下参数">直接根据索引创建一个文档需要如下参数</a></li>
<li><a href="#提供文档来源的多种方式">提供文档来源的多种方式</a></li>
<li><a href="#可选参数">可选参数</a></li>
<li><a href="#获取响应内容">获取响应内容</a></li>
<li><a href="#根据上述内容整合">根据上述内容整合</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>\10. Elasticsearch JAVA API 的学习使用<ul>
<li>10.1 起步：<ul>
<li><a href="#1011-maven-依赖">10.1.1 Maven 依赖</a></li>
</ul>
</li>
</ul>
</li>
<li>\11. Es painless 脚本插件使用（Elasticsearch script plugin）<ul>
<li>11.1 前置条件：windows安装gradle<ul>
<li><a href="#1111-官方下载地址">11.1.1 官方下载地址</a></li>
<li><a href="#1112-将gradle放入合适位置将gradle加入path环境变量">11.1.2 将gradle放入合适位置，将gradle加入path环境变量</a></li>
<li><a href="#1113-配置阿里云的镜像">11.1.3 配置阿里云的镜像</a></li>
</ul>
</li>
</ul>
</li>
<li>N kibana 学习es的所有内容<ul>
<li><a href="#20191014">2019.10.14</a></li>
<li><a href="#20191015">2019.10.15</a></li>
</ul>
</li>
</ul>
<h1 id="官方改变1"><a href="#官方改变1" class="headerlink" title="官方改变1"></a>官方改变1</h1><h2 id="RestFul请求需要加入Header"><a href="#RestFul请求需要加入Header" class="headerlink" title="RestFul请求需要加入Header"></a>RestFul请求需要加入Header</h2><blockquote>
<p>-H “Content-Type: application/json”</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; -XPUT &#39;localhost:9200&#x2F;get-together&#x2F;group&#x2F;1?pretty&#39; -d &#39;&#123;&quot;name&quot;:&quot;elastice denver&quot;,&quot;organizer&quot;:&quot;Lee&quot;&#125;&#39;</span><br></pre></td></tr></table></figure>

<h1 id="官方改变2："><a href="#官方改变2：" class="headerlink" title="官方改变2："></a>官方改变2：</h1><h2 id="分词器-N元语法ngram"><a href="#分词器-N元语法ngram" class="headerlink" title="分词器 N元语法ngram"></a>分词器 N元语法ngram</h2><p>分词器 N元语法ngram 由于在实际使用发生过巨大差异事故，在6.2.4 提示是被弃用的，但是后面社区提议在实际需求中使用发现没有效果，与开发交流过后，官方在7.0之后将弃用删除，继续使用ngram</p>
<blockquote>
<p>所以在这个6.2.4 版本中使用ngram 分词器 的参数 min_gram 和 max_gram 无法作用于N元语法</p>
</blockquote>
<h1 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h1><h2 id="1-1-创建索引"><a href="#1-1-创建索引" class="headerlink" title="1.1 创建索引"></a>1.1 创建索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;lib&#x2F;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  &quot;settings&quot;:&#123;</span><br><span class="line"></span><br><span class="line">      &quot;index&quot;:&#123;</span><br><span class="line"></span><br><span class="line">        &quot;number_of_shards&quot;: 5,</span><br><span class="line"></span><br><span class="line">        &quot;number_of_replicas&quot;: 1</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-查看索引信息"><a href="#1-2-查看索引信息" class="headerlink" title="1.2 查看索引信息:"></a>1.2 查看索引信息:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_settings</span><br><span class="line">curl -XGET &#39;192.168.92.180:9200&#x2F;lib&#x2F;_settings?pretty&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;lib&quot; : &#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;index&quot; : &#123;</span><br><span class="line">        &quot;creation_date&quot; : &quot;1570895449310&quot;,</span><br><span class="line">        &quot;number_of_shards&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot; : &quot;KF8Kfs3SSBKPhZX4pX5iVw&quot;,</span><br><span class="line">        &quot;version&quot; : &#123;</span><br><span class="line">          &quot;created&quot; : &quot;6020499&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot; : &quot;lib&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET _all&#x2F;_settings</span><br><span class="line">curl -XGET &#39;192.168.92.180:9200&#x2F;_all&#x2F;_settings?pretty&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;new-index&quot; : &#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;index&quot; : &#123;</span><br><span class="line">        &quot;creation_date&quot; : &quot;1570877785070&quot;,</span><br><span class="line">        &quot;number_of_shards&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot; : &quot;0HE2lh_gS96UPRCIWMqaZA&quot;,</span><br><span class="line">        &quot;version&quot; : &#123;</span><br><span class="line">          &quot;created&quot; : &quot;6020499&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot; : &quot;new-index&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;get-together&quot; : &#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;index&quot; : &#123;</span><br><span class="line">        &quot;creation_date&quot; : &quot;1570878100116&quot;,</span><br><span class="line">        &quot;number_of_shards&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot; : &quot;t1a2Kwx-QvCjF-pSuTGntQ&quot;,</span><br><span class="line">        &quot;version&quot; : &#123;</span><br><span class="line">          &quot;created&quot; : &quot;6020499&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot; : &quot;get-together&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;lib&quot; : &#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;index&quot; : &#123;</span><br><span class="line">        &quot;creation_date&quot; : &quot;1570895449310&quot;,</span><br><span class="line">        &quot;number_of_shards&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot; : &quot;KF8Kfs3SSBKPhZX4pX5iVw&quot;,</span><br><span class="line">        &quot;version&quot; : &#123;</span><br><span class="line">          &quot;created&quot; : &quot;6020499&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot; : &quot;lib&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-3-创建类型"><a href="#1-3-创建类型" class="headerlink" title="1.3 创建类型"></a>1.3 创建类型</h2><h3 id="1-3-2-指定id的方式："><a href="#1-3-2-指定id的方式：" class="headerlink" title="1.3.2 指定id的方式："></a>1.3.2 指定id的方式：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;lib&#x2F;user&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;first_name&quot;: &quot;book&quot;,</span><br><span class="line">  &quot;last_name&quot;: &quot;lin lin&quot;,</span><br><span class="line">  &quot;age&quot;: 20,</span><br><span class="line">  &quot;birthday&quot;: &quot;2019-4-28&quot;,</span><br><span class="line">  &quot;interesting&quot;: [</span><br><span class="line">    &quot;football&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-1-不指定id的方式"><a href="#1-3-1-不指定id的方式" class="headerlink" title="1.3.1 不指定id的方式"></a>1.3.1 不指定id的方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;user&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot;: &quot;book&quot;,</span><br><span class="line">  &quot;last_name&quot;: &quot;lin lin&quot;,</span><br><span class="line">  &quot;age&quot;: 20,</span><br><span class="line">  &quot;birthday&quot;: &quot;20191122&quot;,</span><br><span class="line">  &quot;interesting&quot;: [ &quot;football&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;user&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot; :  &quot;Douglas&quot;,</span><br><span class="line">    &quot;last_name&quot; :   &quot;Fir&quot;,</span><br><span class="line">    &quot;age&quot; :         23,</span><br><span class="line">    &quot;about&quot;:        &quot;I like to build cabinets&quot;,</span><br><span class="line">    &quot;interests&quot;:  [ &quot;forestry&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-创建一个文档"><a href="#1-4-创建一个文档" class="headerlink" title="1.4 创建一个文档"></a>1.4 创建一个文档</h2><p>当使用curl 的时候， 他看上去是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; -XPUT &#39;192.168.92.180:9200&#x2F;lib&#x2F;user&#x2F;1&#39; -d \</span><br><span class="line">&gt; &#39;&#123;</span><br><span class="line">&gt; &quot;first_name&quot;:&quot;Jane&quot;,</span><br><span class="line">&gt; &quot;last_name&quot;:&quot;Smith&quot;,</span><br><span class="line">&gt; &quot;age&quot;:32,</span><br><span class="line">&gt; &quot;about&quot;:&quot;I like to collect rock albums&quot;,</span><br><span class="line">&gt; &quot;interests&quot;: [&quot;music&quot;]</span><br><span class="line">&gt; &#125;&#39;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">	&quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">	&quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">	&quot;_version&quot;: 1,</span><br><span class="line">	&quot;result&quot;: &quot;created&quot;,</span><br><span class="line">	&quot;_shards&quot;: &#123;</span><br><span class="line">		&quot;total&quot;: 2,</span><br><span class="line">		&quot;successful&quot;: 1,</span><br><span class="line">		&quot;failed&quot;: 0</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;_seq_no&quot;: 0,</span><br><span class="line">	&quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-基础搜索"><a href="#2-基础搜索" class="headerlink" title="2. 基础搜索"></a>2. 基础搜索</h1><h2 id="2-1-使用query-进行搜索"><a href="#2-1-使用query-进行搜索" class="headerlink" title="2.1 使用query 进行搜索"></a>2.1 使用query 进行搜索</h2><h3 id="原始方式"><a href="#原始方式" class="headerlink" title="原始方式"></a>原始方式</h3><p>curl -H “Content-Type: application/json”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; -XGET &#39;119.23.219.183:9200&#x2F;lib&#x2F;user&#x2F;_search?pretty&#39; -d &#39;&#123;&quot;query&quot;:&#123;“defualt”: &quot;field_name&quot;, &quot;query_string&quot;: &#123;&quot;query&quot;: &quot;jone&quot;&#125;&#125;&#125;&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 11,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 5,</span><br><span class="line">    &quot;successful&quot; : 5,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;max_score&quot; : 0.2876821,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.2876821,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;first_name&quot; : &quot;Jone&quot;,</span><br><span class="line">          &quot;last_name&quot; : &quot;pig&quot;,</span><br><span class="line">          &quot;age&quot; : 11,</span><br><span class="line">          &quot;birthday&quot; : &quot;2019-11-18&quot;,</span><br><span class="line">          &quot;interesting&quot; : [</span><br><span class="line">            &quot;basketball&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="kibana方式"><a href="#kibana方式" class="headerlink" title="kibana方式"></a>kibana方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?pretty </span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      “defualt”: &quot;field_name&quot;</span><br><span class="line">      &quot;query&quot;: &quot;jone&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-1-如果只想查找一个字段，可以使用term"><a href="#2-1-1-如果只想查找一个字段，可以使用term" class="headerlink" title="2.1.1 如果只想查找一个字段，可以使用term"></a>2.1.1 如果只想查找一个字段，可以使用term</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?pretty </span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &quot;jone&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-过滤器"><a href="#2-2-过滤器" class="headerlink" title="2.2 过滤器"></a>2.2 过滤器</h2><h3 id="2-2-1-ES6以下："><a href="#2-2-1-ES6以下：" class="headerlink" title="2.2.1 ES6以下："></a>2.2.1 ES6以下：</h3><p>旧版本使用如下方式 <strong>es6版本以下</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;filtered&quot;:&#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;:&#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;jone&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-ES6及以上："><a href="#2-2-2-ES6及以上：" class="headerlink" title="2.2.2 ES6及以上："></a>2.2.2 ES6及以上：</h3><p>新版本的过滤器要使用如下方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;jone&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-应用聚集"><a href="#2-3-应用聚集" class="headerlink" title="2.3 应用聚集"></a>2.3 应用聚集</h2><h3 id="2-3-1-ES6以下："><a href="#2-3-1-ES6以下：" class="headerlink" title="2.3.1 ES6以下："></a>2.3.1 ES6以下：</h3><p>旧版本使用如下方式 <strong>es6版本以下</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">	&quot;aggregations&quot;:&#123;</span><br><span class="line">		&quot;organizers&quot;:&#123;</span><br><span class="line">			&quot;terms&quot;: &#123; &quot;field&quot; : &quot;organizer&quot; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-ES6及以上："><a href="#2-3-2-ES6及以上：" class="headerlink" title="2.3.2 ES6及以上："></a>2.3.2 ES6及以上：</h3><p>需求是根据年龄进行划分聚合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0, </span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    </span><br><span class="line">    &quot;organizers&quot;:&#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;age&quot;,</span><br><span class="line">        &quot;size&quot;: 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（1）size</strong>：查询条数，这里设置为0，因为不关心搜索到的结果，只关心聚合结果，提供效率；</p>
<p><strong>（2）aggs</strong>：声明这是一个聚合查询，是aggregations的缩写；</p>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 47,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 3,</span><br><span class="line">    &quot;max_score&quot;: 0,</span><br><span class="line">    &quot;hits&quot;: []</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;organizers&quot;: &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">      &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 11,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 20,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 23,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-通过Id获取文档"><a href="#2-4-通过Id获取文档" class="headerlink" title="2.4 通过Id获取文档"></a>2.4 通过Id获取文档</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;1</span><br></pre></td></tr></table></figure>

<h1 id="3-elasticsearch配置"><a href="#3-elasticsearch配置" class="headerlink" title="3. elasticsearch配置"></a>3. elasticsearch配置</h1><h2 id="3-1-指定集群名称："><a href="#3-1-指定集群名称：" class="headerlink" title="3.1 指定集群名称："></a>3.1 指定集群名称：</h2><p>在<strong>elasticsearch.yml</strong> 文件当中指定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cluster.name: xxxx</span><br></pre></td></tr></table></figure>

<h2 id="3-2-指定详细的日志记录"><a href="#3-2-指定详细的日志记录" class="headerlink" title="3.2 指定详细的日志记录"></a>3.2 指定详细的日志记录</h2><ol>
<li><p>主要日志</p>
<p>基础的日志</p>
</li>
<li><p>慢搜索日志</p>
<p>多于半秒的查询都会被记录（默认）</p>
</li>
<li><p>慢索引日志</p>
<p>多于半秒的查询都会被记录（默认）</p>
</li>
</ol>
<p>在<strong>elasticsearch.yml</strong> 文件当中指定,查看所有的日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rootLogger: TRACE, console, file</span><br></pre></td></tr></table></figure>

<h2 id="3-3-调整虚拟机大小"><a href="#3-3-调整虚拟机大小" class="headerlink" title="3.3 调整虚拟机大小"></a>3.3 调整虚拟机大小</h2><h3 id="3-3-1-linux-使用如下命令："><a href="#3-3-1-linux-使用如下命令：" class="headerlink" title="3.3.1 linux 使用如下命令："></a>3.3.1 linux 使用如下命令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ES_HEAP_SIZE&#x3D;500m bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-使用elasticsearch-yml修改启动堆内存大小"><a href="#3-3-2-使用elasticsearch-yml修改启动堆内存大小" class="headerlink" title="3.3.2 使用elasticsearch.yml修改启动堆内存大小"></a>3.3.2 使用elasticsearch.yml修改启动堆内存大小</h3><h3 id="3-3-3-使用修改bin-elasticsearch-in-sh-修改"><a href="#3-3-3-使用修改bin-elasticsearch-in-sh-修改" class="headerlink" title="3.3.3 使用修改bin/elasticsearch.in.sh 修改"></a>3.3.3 使用修改bin/elasticsearch.in.sh 修改</h3><p>#!/bin/sh 后面加入ES_HEAP_SIZE=500m</p>
<h2 id="3-4-集群中加入节点"><a href="#3-4-集群中加入节点" class="headerlink" title="3.4 集群中加入节点"></a>3.4 集群中加入节点</h2><h3 id="3-4-1-查看节点状态"><a href="#3-4-1-查看节点状态" class="headerlink" title="3.4.1 查看节点状态"></a>3.4.1 查看节点状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _cat&#x2F;shards?v</span><br></pre></td></tr></table></figure>

<h1 id="4-映射-mapping"><a href="#4-映射-mapping" class="headerlink" title="4. 映射_mapping"></a>4. 映射_mapping</h1><p>使用映射来定义文档：</p>
<p>注意同一个索引存在多个类型，所有映射也可以多个类型</p>
<p>但是多个类型可能存在文档里面相同名称的字段</p>
<h2 id="4-1-检索和自定义映射"><a href="#4-1-检索和自定义映射" class="headerlink" title="4.1 检索和自定义映射"></a>4.1 检索和自定义映射</h2><h3 id="4-1-1-获取目前的映射"><a href="#4-1-1-获取目前的映射" class="headerlink" title="4.1.1 获取目前的映射"></a>4.1.1 获取目前的映射</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_mapping?pretty</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;lib&quot;: &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;user&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;about&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;age&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;long&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;birthday&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;date&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;first_name&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;interesting&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;interests&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;last_name&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-1-2-获取自动生成的映射"><a href="#4-1-2-获取自动生成的映射" class="headerlink" title="4.1.2 获取自动生成的映射"></a>4.1.2 获取自动生成的映射</h3><p>使用下面的实例：</p>
<p>第一步：创建一个新索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;get-together&#x2F;new-event&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;late night with elastic&quot;,</span><br><span class="line">  &quot;date&quot;:&quot;2013-10-25T19:00&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步： 获取当前映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;get-together&#x2F;_mapping&#x2F;new-event?pretty</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;get-together&quot;: &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;new-event&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;date&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;date&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;name&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-1-3-定义新的映射"><a href="#4-1-3-定义新的映射" class="headerlink" title="4.1.3 定义新的映射"></a>4.1.3 定义新的映射</h3><h4 id="es6以下版本"><a href="#es6以下版本" class="headerlink" title="es6以下版本"></a>es6以下版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;get-together&#x2F;_mapping&#x2F;new-event</span><br><span class="line">&#123;</span><br><span class="line">  &quot;new-event&quot;:&#123;</span><br><span class="line">    &quot;properties&quot;:&#123;</span><br><span class="line">      &quot;host&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;string&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="es6以上版本"><a href="#es6以上版本" class="headerlink" title="es6以上版本"></a>es6以上版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;get-together&#x2F;_mapping&#x2F;new-event</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;host&quot;:&#123;</span><br><span class="line">      &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时获取映射会发现新增了一个映射内容</p>
<h3 id="4-1-4-改变现有字段类型的方法："><a href="#4-1-4-改变现有字段类型的方法：" class="headerlink" title="4.1.4 改变现有字段类型的方法："></a>4.1.4 改变现有字段类型的方法：</h3><ol>
<li>删除 new-evenets 类型的所有数据</li>
<li>设置新的映射类型以及字段类型</li>
<li>再次索引所有数据</li>
</ol>
<h2 id="4-2-用于定义文档字段的核心类型"><a href="#4-2-用于定义文档字段的核心类型" class="headerlink" title="4.2 用于定义文档字段的核心类型"></a>4.2 用于定义文档字段的核心类型</h2><h3 id="4-2-1-定义映射当中的index选项"><a href="#4-2-1-定义映射当中的index选项" class="headerlink" title="4.2.1 定义映射当中的index选项"></a>4.2.1 定义映射当中的index选项</h3><ol>
<li>anaLyzed(默认) 将大写转为小写，字符串分解为单词</li>
<li>not_analyzed 分析过程略过，变成单独的词条索引</li>
<li>no 索引略过，没有词条产生<ol>
<li>节省存储空间，无须在该字段搜索的时候使用</li>
</ol>
</li>
</ol>
<h3 id="4-2-2-如何创建嵌套类型："><a href="#4-2-2-如何创建嵌套类型：" class="headerlink" title="4.2.2 如何创建嵌套类型："></a>4.2.2 如何创建嵌套类型：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;get-together&#x2F;_mapping&#x2F;new-event</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;text&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;user&quot;:&#123;</span><br><span class="line">      &quot;type&quot;: &quot;nested&quot;,</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;myname&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;text&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-3-定义多字段和数组类型"><a href="#4-2-3-定义多字段和数组类型" class="headerlink" title="4.2.3 定义多字段和数组类型"></a>4.2.3 定义多字段和数组类型</h3><h2 id="4-3-使用预定义字段"><a href="#4-3-使用预定义字段" class="headerlink" title="4.3 使用预定义字段"></a>4.3 使用预定义字段</h2><h3 id="4-3-1-控制如何存储和搜索文档"><a href="#4-3-1-控制如何存储和搜索文档" class="headerlink" title="4.3.1 控制如何存储和搜索文档"></a>4.3.1 控制如何存储和搜索文档</h3><ol>
<li><p>_source 存储原有内容</p>
<ol>
<li>按照原有格式存储原有文档</li>
<li>enable可以设置true,false</li>
<li>返回某些特定字段在url指定使用fields=xxx,如果需要多个字段用逗号隔开</li>
<li>使用”store”: “yes” 存储特定的字段</li>
</ol>
</li>
<li><p>_all 索引一切</p>
<ol>
<li>不指定字段名称默认是_all查找</li>
<li>默认隐藏属性为”<strong>include_in_all</strong>“ ， 可以设置为false不被包含</li>
</ol>
</li>
<li><p>_uid 识别文档</p>
<ol>
<li>_type和_id的结合体</li>
<li>es内部使用_uid 来确定唯一文档的身份</li>
</ol>
</li>
<li><p>_index 在文档中存储索引名称</p>
<ol>
<li>默认情况下是关闭的</li>
<li>如果需要了解其内容，需要实现使用put 请求将enabled 设置为true</li>
</ol>
</li>
<li><p>_update 更新现有文档</p>
<ol>
<li>默认使用go语言进行脚本的更新操作</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;user&#x2F;1&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;first_name&quot;:&quot;sss&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>upsert 创建不存在的文档（注意此时5不存在）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;user&#x2F;5&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;age&quot;:5</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;upsert&quot;: &#123;</span><br><span class="line">    &quot;myname&quot;: &quot;elastic&quot;,</span><br><span class="line">    &quot;age&quot;: 4</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>_open 以及 _close 分别表示开放索引和关闭索引</p>
</li>
</ol>
<h2 id="4-4-更新现有文档"><a href="#4-4-更新现有文档" class="headerlink" title="4.4 更新现有文档"></a>4.4 更新现有文档</h2><h3 id="4-4-1-文档更新包含如下步骤："><a href="#4-4-1-文档更新包含如下步骤：" class="headerlink" title="4.4.1 文档更新包含如下步骤："></a>4.4.1 文档更新包含如下步骤：</h3><ol>
<li>检索文档</li>
<li>处理文档</li>
<li>重新索引文档</li>
<li>先前文档被删除</li>
<li>完成</li>
</ol>
<h2 id="4-5-删除文档"><a href="#4-5-删除文档" class="headerlink" title="4.5 删除文档"></a>4.5 删除文档</h2><h3 id="4-5-1-删除文档的方式"><a href="#4-5-1-删除文档的方式" class="headerlink" title="4.5.1 删除文档的方式"></a>4.5.1 删除文档的方式</h3><ol>
<li>删除单个文档或者一组文档<ol>
<li>标记为删除</li>
<li>延迟用异步方式排出</li>
</ol>
</li>
<li>删除整个索引（删除多组文档的特例）<ol>
<li>移除和索引所有相关的文件</li>
<li>效率高</li>
</ol>
</li>
<li>关闭索引<ol>
<li>不允许读写操作，数据也不进内存</li>
<li>但是索引还是在磁盘内</li>
<li>可以再次打开关闭的索引</li>
</ol>
</li>
</ol>
<h3 id="4-5-2-删除文档"><a href="#4-5-2-删除文档" class="headerlink" title="4.5.2 删除文档"></a>4.5.2 删除文档</h3><ol>
<li>通过id删除单个文档</li>
<li>单个请求删除多个文档<ol>
<li>比单独删除效率高</li>
</ol>
</li>
<li>删除映射类型，包括其中文档</li>
<li>删除匹配某个查询的所有文档</li>
</ol>
<h3 id="4-5-3-删除单个文档"><a href="#4-5-3-删除单个文档" class="headerlink" title="4.5.3 删除单个文档"></a>4.5.3 删除单个文档</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#x2F;lib&#x2F;user&#x2F;5</span><br></pre></td></tr></table></figure>

<p>为了防止外部的并发更新与删除的操作：</p>
<p>es在一段时间内保留这篇文档的版本，拒绝比删除文档更低的更新操作</p>
<p>默认时间为60秒</p>
<p>yml或者索引配置的 <strong>index.gc_deletes</strong> 设置保留时间</p>
<h3 id="4-5-4-删除映射类型和删除查询匹配的文档"><a href="#4-5-4-删除映射类型和删除查询匹配的文档" class="headerlink" title="4.5.4 删除映射类型和删除查询匹配的文档"></a>4.5.4 删除映射类型和删除查询匹配的文档</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#x2F;get-together&#x2F;_query?q&#x3D;elasticsearch</span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ol>
<li>类型名称只是文档的另一个字段</li>
<li>索引的所有文档，无论属于哪个映射类型，都存在同一个分片</li>
<li><strong>针对删除类型和删除完整索引两者的性能进行比较的时候，删除类型比删除索引要更长的时间和更多的资源</strong></li>
</ol>
<h3 id="4-5-5-删除索引"><a href="#4-5-5-删除索引" class="headerlink" title="4.5.5 删除索引"></a>4.5.5 删除索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#x2F;myindex[,xxx,xx] 删除一个或者多个索引</span><br><span class="line">DELETE &#x2F;_all 删除所有的索引</span><br></pre></td></tr></table></figure>

<blockquote>
<p>_all 删除所有文档是否过于危险？</p>
<p>elasticsearch.yml 文件中</p>
<p>action.destructive_requires_name: true</p>
<p>预防这种情况发生， 可以<strong>拒绝</strong>delete _all 操作</p>
<p>以及索引名称当中的<strong>通配符</strong></p>
</blockquote>
<p>注意这里的删除也是标记删除：在分段与合并中进行合并之后才会真实删除操作</p>
<blockquote>
<p>分段与合并是什么？</p>
<ol>
<li>一个分段是建立索引的时候创建的一块Lucene 索引</li>
<li>当es在分片上查询的时候，Luncene需要查询所有的分段</li>
<li>合并文档意味着分段的合并以及I/O和CPU读写操作（合并操作是异步进行的）</li>
<li>索引操作会产生许多小分段，需要定期进行合并</li>
</ol>
</blockquote>
<h3 id="4-5-6-关闭和开发索引"><a href="#4-5-6-关闭和开发索引" class="headerlink" title="4.5.6 关闭和开发索引"></a>4.5.6 关闭和开发索引</h3><p>使用POST 加上 _open 以及 _close 对于索引进行开放和关闭</p>
<ol>
<li>一旦索引被关闭，内存唯一痕迹是元数据，如名字以及分片的位置</li>
<li>如果条件允许，关闭索引比删除索引要好</li>
</ol>
<h1 id="5-版本控制"><a href="#5-版本控制" class="headerlink" title="5. 版本控制"></a>5. 版本控制</h1><h2 id="5-1-乐观锁"><a href="#5-1-乐观锁" class="headerlink" title="5.1 乐观锁"></a>5.1 乐观锁</h2><h3 id="5-1-1-内部版本控制"><a href="#5-1-1-内部版本控制" class="headerlink" title="5.1.1 内部版本控制"></a>5.1.1 内部版本控制</h3><p>PUT /lib/user/4?version=3</p>
<h3 id="5-1-2-外部版本控制"><a href="#5-1-2-外部版本控制" class="headerlink" title="5.1.2 外部版本控制"></a>5.1.2 外部版本控制</h3><p>version_type=external + 版本号</p>
<h2 id="5-2-自动重试"><a href="#5-2-自动重试" class="headerlink" title="5.2 自动重试"></a>5.2 自动重试</h2><p>retry_on_conflict=3(版本号) 自动重试</p>
<h1 id="6-搜索与高级搜索分析"><a href="#6-搜索与高级搜索分析" class="headerlink" title="6. 搜索与高级搜索分析"></a>6. 搜索与高级搜索分析</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl &#39;&#x2F;_search&#39;</span><br><span class="line">curl &#39;&#x2F;xxx&#x2F;_search&#39; 指定索引</span><br><span class="line">curl &#39;&#x2F;xxx&#x2F;xxx&#x2F;_search&#39; 搜索类型</span><br><span class="line">curl &#39;&#x2F;_all&#x2F;xxx&#x2F;_search&#39; 所有索引中搜索时事件类型</span><br><span class="line">curl &#39;&#x2F;*&#x2F;xxx&#x2F;_search&#39; 通配符搜索所有</span><br><span class="line">curl &#39;&#x2F;xxxx,xxxx&#x2F;xxx,xxxx&#x2F;_search&#39; 多个类型搜索</span><br><span class="line">curl &#39;&#x2F;+get-toge*,-get-together&#x2F;_search&#39; 搜索以get-toge 开头的索引，但是不包括get-together</span><br></pre></td></tr></table></figure>

<h2 id="6-1-搜索请求的基本模块"><a href="#6-1-搜索请求的基本模块" class="headerlink" title="6.1 搜索请求的基本模块"></a>6.1 搜索请求的基本模块</h2><ol>
<li>query：搜索请求最重要的部分，配置了基于评分返回最佳的文档</li>
<li>size：代表返回文档数量</li>
<li>from：和size一起使用，用于分页操作（注意：为了知道第二页的10项结果，必须先知道计算前20的结果，也就是说，<strong>越往后的翻页搜索代价越大</strong>）</li>
<li>_source：指定字段如何返回</li>
<li>sort：默认排序基于文档得分</li>
</ol>
<h2 id="6-2-基于url的搜索请求"><a href="#6-2-基于url的搜索请求" class="headerlink" title="6.2 基于url的搜索请求"></a>6.2 基于url的搜索请求</h2><h3 id="6-2-1-基于from-和szize的参数来实现结果分页"><a href="#6-2-1-基于from-和szize的参数来实现结果分页" class="headerlink" title="6.2.1 基于from 和szize的参数来实现结果分页"></a>6.2.1 基于from 和szize的参数来实现结果分页</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?from&#x3D;2&amp;size&#x3D;2</span><br></pre></td></tr></table></figure>

<p>from=2 表示从第三条开始</p>
<p>size=2 表示读取2条记录</p>
<h3 id="6-2-2-改变结果的顺序"><a href="#6-2-2-改变结果的顺序" class="headerlink" title="6.2.2 改变结果的顺序"></a>6.2.2 改变结果的顺序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search?sort&#x3D;age:_id</span><br></pre></td></tr></table></figure>

<h3 id="6-2-3-搜索结果当中限制-source-字段"><a href="#6-2-3-搜索结果当中限制-source-字段" class="headerlink" title="6.2.3 搜索结果当中限制_source 字段"></a>6.2.3 搜索结果当中限制_source 字段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search?sort&#x3D;age:_id&amp;_source&#x3D;first_name,age</span><br></pre></td></tr></table></figure>

<h3 id="6-2-4-匹配查询"><a href="#6-2-4-匹配查询" class="headerlink" title="6.2.4 匹配查询"></a>6.2.4 匹配查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search?sort&#x3D;age:_id&amp;_source&#x3D;first_name,age</span><br></pre></td></tr></table></figure>

<h2 id="6-3-基于请求主体的搜索请求"><a href="#6-3-基于请求主体的搜索请求" class="headerlink" title="6.3 基于请求主体的搜索请求"></a>6.3 基于请求主体的搜索请求</h2><h3 id="6-3-1-使用from-和-size，参数结果分页"><a href="#6-3-1-使用from-和-size，参数结果分页" class="headerlink" title="6.3.1 使用from 和 size，参数结果分页"></a>6.3.1 使用from 和 size，参数结果分页</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;from&quot;: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-2-过滤返回-source-内容"><a href="#6-3-2-过滤返回-source-内容" class="headerlink" title="6.3.2 过滤返回_source 内容"></a>6.3.2 过滤返回_source 内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;first_name&quot;, &quot;age&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在source字段当中返回通配符"><a href="#在source字段当中返回通配符" class="headerlink" title="在source字段当中返回通配符"></a>在source字段当中返回通配符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;*_name&quot;, &quot;a*&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是数组，可以指定: _source: [“name.*”, “address.*”]</p>
<h4 id="通过include以及exclude-过滤返回-source的内容"><a href="#通过include以及exclude-过滤返回-source的内容" class="headerlink" title="通过include以及exclude 过滤返回_source的内容"></a>通过include以及exclude 过滤返回_source的内容</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;includes&quot;: [&quot;*_name&quot;, &quot;age&quot;],</span><br><span class="line">    &quot;excludes&quot;: [&quot;first_name&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>include: 包含匹配</p>
<p>excludes: 排除</p>
<h3 id="6-3-3-基于结果的排序"><a href="#6-3-3-基于结果的排序" class="headerlink" title="6.3.3 基于结果的排序"></a>6.3.3 基于结果的排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    &quot;_score&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 12,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 15,</span><br><span class="line">    &quot;max_score&quot;: null,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;BrimyW0B5sayAd6P9LGl&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;CbimyW0B5sayAd6P-LHO&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;D7imyW0B5sayAd6P_LH0&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;ELimyW0B5sayAd6P_bGM&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;BbimyW0B5sayAd6P57Hs&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;B7imyW0B5sayAd6P9rG3&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;EbimyW0B5sayAd6P_rEo&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;CLimyW0B5sayAd6P97Hz&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;CrimyW0B5sayAd6P-bGO&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          32,</span><br><span class="line">          1</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-实践中的基础模块"><a href="#6-4-实践中的基础模块" class="headerlink" title="6.4 实践中的基础模块"></a>6.4 实践中的基础模块</h2><p>结合上面的几个点，总结出了下面一个查询内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;_source&quot;: [&quot;*_name&quot;, &quot;age&quot;],</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;:&quot;desc&quot;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-4-1-理解回复的内容"><a href="#6-4-1-理解回复的内容" class="headerlink" title="6.4.1 理解回复的内容"></a>6.4.1 理解回复的内容</h3><p>注意点： 如果没有存储文档的_source 和 fields, 无法从es 获取数值</p>
<h2 id="6-5-查询和过滤器DSL-（重点）"><a href="#6-5-查询和过滤器DSL-（重点）" class="headerlink" title="6.5 查询和过滤器DSL （重点）"></a>6.5 查询和过滤器DSL （重点）</h2><h3 id="6-5-1-match-查询和term过滤器"><a href="#6-5-1-match-查询和term过滤器" class="headerlink" title="6.5.1 match 查询和term过滤器"></a>6.5.1 match 查询和term过滤器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &quot;Jane&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：此处 <strong>jane</strong> 是否大写对于查询结果没有影响</p>
<h4 id="过滤器和查询器有什么不同："><a href="#过滤器和查询器有什么不同：" class="headerlink" title="过滤器和查询器有什么不同："></a>过滤器和查询器有什么不同：</h4><p>查询器：为特定的词条计算得分</p>
<p>过滤器：</p>
<ol>
<li>“文档是否匹配这个查询” 返回简单的是或者否</li>
<li>限制了需要计算得分的文档数量</li>
<li>根据过滤器的种类，可以再“位集合”中缓存结果</li>
<li>允许手动指定一个过滤器是否应该被缓存</li>
</ol>
<blockquote>
<p>基于如上原因，过滤器会比查询器要快上很多，并且查询结果可以被缓存</p>
</blockquote>
<h4 id="es6以下-以及旧版本使用的方式"><a href="#es6以下-以及旧版本使用的方式" class="headerlink" title="es6以下 以及旧版本使用的方式"></a>es6以下 以及旧版本使用的方式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;filtedred&quot;:&#123; -- 表示指定一个附上过滤器的查询</span><br><span class="line">            &quot;query&quot;:&#123; -- 指定查询器</span><br><span class="line">                &quot;match&quot;: &quot;xxx&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;filter&quot;:&#123; -- 指定过滤器</span><br><span class="line">                &quot;term&quot;:&#123;</span><br><span class="line">                    ....</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>仅做了解即可，新版更为简单易用</p>
<h4 id="这里需要注意下面使用的是es6以及以上版本"><a href="#这里需要注意下面使用的是es6以及以上版本" class="headerlink" title="这里需要注意下面使用的是es6以及以上版本"></a>这里需要注意下面使用的是es6以及以上版本</h4><blockquote>
<p>es6 之后使用</p>
<p>bool:{</p>
<p>must 表示匹配操作</p>
<p>可以执行match 操作</p>
<p>filter:</p>
<p>对于结果进行过滤,</p>
<p>这要比在全部搜索中去匹配要快的多</p>
<p>}</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;about&quot;: &quot;hide&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ], </span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;wang&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 16,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;max_score&quot;: 1.2039728,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;E7joyW0B5sayAd6PEbFA&quot;,</span><br><span class="line">        &quot;_score&quot;: 1.2039728,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;wang&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;laji&quot;,</span><br><span class="line">          &quot;age&quot;: 333,</span><br><span class="line">          &quot;about&quot;: &quot;I hide to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;basket&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-6-常用的基础查询和过滤器"><a href="#6-6-常用的基础查询和过滤器" class="headerlink" title="6.6 常用的基础查询和过滤器"></a>6.6 常用的基础查询和过滤器</h2><h3 id="6-6-1-match-all-的使用场景"><a href="#6-6-1-match-all-的使用场景" class="headerlink" title="6.6.1 match_all 的使用场景"></a>6.6.1 match_all 的使用场景</h3><ol>
<li>希望使用过滤器的时候</li>
<li>希望返回被搜索的索引和类型的全部文档</li>
</ol>
<h3 id="6-6-2-query-string-查询"><a href="#6-6-2-query-string-查询" class="headerlink" title="6.6.2 query_string 查询"></a>6.6.2 query_string 查询</h3><blockquote>
<p>注意事项:</p>
<p>AND 必须大写， 即查询条件的连接符， 否则系统会当做查询字符串的内容进行识别</p>
<p>查询条件连接符两边必须加上一个空格区分</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search?q&#x3D;wang</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;default_field&quot;: &quot;first_name&quot;,</span><br><span class="line">      &quot;query&quot;: &quot;first_name:wang AND age:333&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用query-string-进行复杂的查询"><a href="#使用query-string-进行复杂的查询" class="headerlink" title="使用query_string 进行复杂的查询"></a>使用query_string 进行复杂的查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; tags:search OR tags:lucene&#125; AND create_on:[1999-01-01 TO 2011-01-01]</span><br></pre></td></tr></table></figure>

<p>这是一个示例查询</p>
<p>下面为个人实验案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;default_field&quot;: &quot;first_name&quot;,</span><br><span class="line">      &quot;query&quot;: &quot;first_name:wang OR first_name:jane AND age:[0 TO 999]&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于query_string 过于强大：建议的替代方案为使用 term, terms, match 或者 multi_match</p>
<p>允许你在一个或者多个文档搜索</p>
<p>或者使用 simple_query_string</p>
<p>使用 +、-、AND 和 OR 更容易使用的查询语法</p>
</blockquote>
<h3 id="6-6-3-term-查询和-term过滤器"><a href="#6-6-3-term-查询和-term过滤器" class="headerlink" title="6.6.3 term 查询和 term过滤器"></a>6.6.3 term 查询和 term过滤器</h3><ol>
<li>最简单的几个可执行查询之一</li>
<li>指定需要搜索的词条和字段</li>
<li>了解term(词条)查询</li>
</ol>
<blockquote>
<p>注意：被搜索的词条没有经过分析，文档的词条要经过精确匹配才能作为结果返回</p>
</blockquote>
<h4 id="使用term-过滤器的得分，和term查询器的得分对比"><a href="#使用term-过滤器的得分，和term查询器的得分对比" class="headerlink" title="使用term 过滤器的得分，和term查询器的得分对比"></a>使用term 过滤器的得分，和term查询器的得分对比</h4><p>使用过滤器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;_id&quot;: 1</span><br><span class="line">        &#125;        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 10,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;max_score&quot;: 0,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: 0,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot;: 32,</span><br><span class="line">          &quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用查询器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;first_name&quot;: &quot;wang&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 9,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;max_score&quot;: 1.2039728,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;E7joyW0B5sayAd6PEbFA&quot;,</span><br><span class="line">        &quot;_score&quot;: 1.2039728,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;wang&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;laji&quot;,</span><br><span class="line">          &quot;age&quot;: 333,</span><br><span class="line">          &quot;about&quot;: &quot;I hide to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;basket&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-6-4-terms-查询"><a href="#6-6-4-terms-查询" class="headerlink" title="6.6.4 terms 查询"></a>6.6.4 terms 查询</h3><p>使用多词条查询搜索多个词条</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: [</span><br><span class="line">        &quot;i&quot;,</span><br><span class="line">        &quot;hide&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以强制规定每篇文档中匹配词条的最小数量</p>
<p>mininum_should_match 参数</p>
<blockquote>
<p>注意：在新的版本当中只有过滤器才能制定该参数</p>
</blockquote>
<h3 id="6-5-5-match查询和-term过滤器"><a href="#6-5-5-match查询和-term过滤器" class="headerlink" title="6.5.5 match查询和 term过滤器"></a>6.5.5 match查询和 term过滤器</h3><p>match查询可以有多重行为方式，最常见就是<strong>布尔(bool)\</strong>和*<em>词组(phrase)*</em></p>
<h4 id="布尔查询行为"><a href="#布尔查询行为" class="headerlink" title="布尔查询行为"></a>布尔查询行为</h4><p>默认情况match查询使用布尔行为和OR操作符号， 如 “es den” 默认是”es OR den”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;Jane wang&quot;,</span><br><span class="line">        &quot;operator&quot;: &quot;or&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>match 查询的第二个重要行为是作为phrase 查询</strong></p>
<h4 id="词组（phrase-）查询的方式"><a href="#词组（phrase-）查询的方式" class="headerlink" title="词组（phrase ）查询的方式"></a>词组（phrase ）查询的方式</h4><blockquote>
<p>在6.x已经不支持在math里面使用type， 可以修改为以下语法：</p>
</blockquote>
<p>可以设置slop 用来实现自动提示中的跨单词匹配的功能</p>
<h5 id="es5版本以及以下的语法："><a href="#es5版本以及以下的语法：" class="headerlink" title="es5版本以及以下的语法："></a>es5版本以及以下的语法：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;phrase&quot;,</span><br><span class="line">        &quot;query&quot;: &quot;hide&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会出现如下报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &#123;</span><br><span class="line">    &quot;root_cause&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;parsing_exception&quot;,</span><br><span class="line">        &quot;reason&quot;: &quot;[match] query does not support [type]&quot;,</span><br><span class="line">        &quot;line&quot;: 5,</span><br><span class="line">        &quot;col&quot;: 17</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot;: &quot;parsing_exception&quot;,</span><br><span class="line">    &quot;reason&quot;: &quot;[match] query does not support [type]&quot;,</span><br><span class="line">    &quot;line&quot;: 5,</span><br><span class="line">    &quot;col&quot;: 17</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="es6以及以上要使用以下语法"><a href="#es6以及以上要使用以下语法" class="headerlink" title="es6以及以上要使用以下语法"></a>es6以及以上要使用以下语法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;to rock&quot;,</span><br><span class="line">        &quot;slop&quot;:1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：slop 为0 代表中间不进行跳行匹配,默认为0</p>
<h3 id="6-5-6-phrase-prefix-查询"><a href="#6-5-6-phrase-prefix-查询" class="headerlink" title="6.5.6 phrase_prefix 查询"></a>6.5.6 phrase_prefix 查询</h3><p>依据词组的最后一个词条进行前缀匹配</p>
<p>对于搜索框自动完成来说，是一个十分重要的功能</p>
<blockquote>
<p>注意：这种方式最好设置 max_expansions 设置最大的前缀扩展数量</p>
</blockquote>
<h4 id="es5-x-版本以及以下的语法："><a href="#es5-x-版本以及以下的语法：" class="headerlink" title="es5.x 版本以及以下的语法："></a>es5.x 版本以及以下的语法：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;phrase_prefix&quot;,</span><br><span class="line">        &quot;query&quot;: &quot;hide&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="es6-x-需要改成如下写法"><a href="#es6-x-需要改成如下写法" class="headerlink" title="es6.x 需要改成如下写法"></a>es6.x 需要改成如下写法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase_prefix&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;wa&quot;,</span><br><span class="line">        &quot;max_expansions&quot;: 5</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 24,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;max_score&quot;: 1.2039728,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;lib&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;E7joyW0B5sayAd6PEbFA&quot;,</span><br><span class="line">        &quot;_score&quot;: 1.2039728,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;wang&quot;,</span><br><span class="line">          &quot;last_name&quot;: &quot;laji&quot;,</span><br><span class="line">          &quot;age&quot;: 333,</span><br><span class="line">          &quot;about&quot;: &quot;I hide to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot;: [</span><br><span class="line">            &quot;basket&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bool查询和phrase 查询 对于接受用户输入是很好的选择</p>
<h4 id="使用multi-match-匹配多个字段"><a href="#使用multi-match-匹配多个字段" class="headerlink" title="使用multi_match 匹配多个字段"></a>使用multi_match 匹配多个字段</h4><p>和match 多个字段有细微的区别：</p>
<p>允许搜索多个字段中的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;wang smith&quot;,</span><br><span class="line">        &quot;fields&quot;: [&quot;first_name&quot;, &quot;last_name&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>multi_match 也可以转化为 phrase(词组) 查询 或者 phrase_prefix 查询</strong></p>
<p>match 查询是核心的查询类型</p>
<h2 id="6-7-组合查询和复合查询"><a href="#6-7-组合查询和复合查询" class="headerlink" title="6.7 组合查询和复合查询"></a>6.7 组合查询和复合查询</h2><h3 id="6-7-1-bool查询"><a href="#6-7-1-bool查询" class="headerlink" title="6.7.1 bool查询"></a>6.7.1 bool查询</h3><p>有以下类别：</p>
<ol>
<li>必须(must)</li>
<li>应该(should)</li>
<li>不能(must_not)</li>
</ol>
<ul>
<li>如果指定了bool查询的部分是must匹配， 只有匹配上结果才能返回</li>
<li>如果指定了bool查询的部分是should匹配， 只有匹配上<strong>指定数量子句</strong>的文档才会被返回</li>
<li>如果没有must匹配，至少要匹配一个should子句才能返回</li>
<li>must_not 子句会使得文档被移除结果集合</li>
</ul>
<p>下面使用一个综合的例子进行试验</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match_phrase&quot;:  &#123;</span><br><span class="line">            &quot;about&quot;: &#123;</span><br><span class="line">              &quot;query&quot;: &quot;i to&quot;,</span><br><span class="line">              &quot;slop&quot;: 1</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;first_name&quot;: &#123;</span><br><span class="line">              &quot;value&quot;: &quot;wang&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;query_string&quot;: &#123;</span><br><span class="line">            &quot;default_field&quot;: &quot;age&quot;,</span><br><span class="line">            &quot;query&quot;: &quot;first_name:jane&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;minimum_should_match&quot;: 1 --指定至少shold子句匹配数，满足才能返回结果</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-7-2-bool-的过滤器"><a href="#6-7-2-bool-的过滤器" class="headerlink" title="6.7.2 bool 的过滤器"></a>6.7.2 bool 的过滤器</h3><p>ES6 经过调整，已经将bool的查询器移除，只做过滤功能</p>
<p>es存在如下写法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query</span><br><span class="line">	filtered:</span><br><span class="line">        filter:</span><br><span class="line">            bool:</span><br><span class="line">                must:</span><br><span class="line">                should:</span><br><span class="line">                must_not:</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<p>mininum_should_match 默认有一些隐藏特性</p>
<p>如果指定了must 子句</p>
<p><strong>默认值就会变为0</strong>,</p>
<p>如果没有Must子句</p>
<p><strong>默认就是1</strong></p>
</blockquote>
<h2 id="6-8-超越match-和-过滤器的查询"><a href="#6-8-超越match-和-过滤器的查询" class="headerlink" title="6.8 超越match 和 过滤器的查询"></a>6.8 超越match 和 过滤器的查询</h2><h3 id="6-8-1-range-查询和过滤器"><a href="#6-8-1-range-查询和过滤器" class="headerlink" title="6.8.1 range 查询和过滤器"></a>6.8.1 range 查询和过滤器</h3><h4 id="模拟数据"><a href="#模拟数据" class="headerlink" title="模拟数据"></a>模拟数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;5</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;CHENLONG_looo&quot;,</span><br><span class="line">  &quot;age&quot;: 66,</span><br><span class="line">  &quot;birthday&quot;: &quot;2016-10-10&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;5</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;CHENLONG&quot;,</span><br><span class="line">  &quot;age&quot;: 15,</span><br><span class="line">  &quot;birthday&quot;: &quot;2011-02-14&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">  &quot;age&quot;: 5,</span><br><span class="line">  &quot;birthday&quot;: &quot;2019-05-04&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="现在需要查找出-11-年到-16年的数据"><a href="#现在需要查找出-11-年到-16年的数据" class="headerlink" title="现在需要查找出 11 年到 16年的数据"></a>现在需要查找出 11 年到 16年的数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;birthday&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: &quot;2011-06-11&quot;,</span><br><span class="line">        &quot;lte&quot;: &quot;2020-01-01&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 29,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;max_score&quot;: 1,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;myindex&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;CHENLONG_looo&quot;,</span><br><span class="line">          &quot;age&quot;: 66,</span><br><span class="line">          &quot;birthday&quot;: &quot;2016-10-10&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;myindex&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">          &quot;age&quot;: 55,</span><br><span class="line">          &quot;birthday&quot;: &quot;2019-05-04&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>range支持字符串的范围匹配，如 “li” 到 “e” 之间的分组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: &quot;li&quot;,</span><br><span class="line">        &quot;lte&quot;: &quot;o&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>range 应该用于过滤而不是查询</p>
<h3 id="6-8-2-prefix-查询和过滤器"><a href="#6-8-2-prefix-查询和过滤器" class="headerlink" title="6.8.2 prefix 查询和过滤器"></a>6.8.2 prefix 查询和过滤器</h3><p>prefix 查询和过滤器允许给定的前缀来搜索词条,<strong>这里的前缀在搜索之前没有经过分析</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;li&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>匹配 li 开头的词条</p>
<h4 id="在过滤器当中使用"><a href="#在过滤器当中使用" class="headerlink" title="在过滤器当中使用"></a>在过滤器当中使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;li&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意过滤器会跳过得分计算，所以效率要高于查询</p>
<blockquote>
<p>注意： 由于搜索前缀不会被分析，所以大小写是进行区分的</p>
<p>原因：es分析文档和查询的方式引起的</p>
</blockquote>
<h3 id="6-8-3-wildcard-查询"><a href="#6-8-3-wildcard-查询" class="headerlink" title="6.8.3 wildcard 查询"></a>6.8.3 wildcard 查询</h3><p>正则表达式的搜索方式：</p>
<p>更像是 shell 通配符 globbing 的工作方式：</p>
<p>ls *foo?ar</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;wildcard&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;lix?ao*&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要注意的是：这种正则匹配并不像match 那样轻量级</p>
<p>如果需要用于系统，要进行数据分析以及测试</p>
<h2 id="6-9-使用过滤器查询字段的存在性"><a href="#6-9-使用过滤器查询字段的存在性" class="headerlink" title="6.9 使用过滤器查询字段的存在性"></a>6.9 使用过滤器查询字段的存在性</h2><h3 id="6-9-1-exists-过滤器"><a href="#6-9-1-exists-过滤器" class="headerlink" title="6.9.1 exists 过滤器"></a>6.9.1 exists 过滤器</h3><p>只查找那些特定字段有值的文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;exists&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;name&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-9-2-missing-过滤器（6-x以上版本已经删除）"><a href="#6-9-2-missing-过滤器（6-x以上版本已经删除）" class="headerlink" title="6.9.2 missing 过滤器（6.x以上版本已经删除）"></a>6.9.2 missing 过滤器（6.x以上版本已经删除）</h3><p>可以搜索字段里没有的值，或者映射的时候默认指定的默认值的文档（映射里的 null_value）</p>
<h4 id="作为测试-先插入一条增加一个字段的数据"><a href="#作为测试-先插入一条增加一个字段的数据" class="headerlink" title="作为测试,先插入一条增加一个字段的数据"></a>作为测试,先插入一条增加一个字段的数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">  &quot;age&quot;: 5,</span><br><span class="line">  &quot;birthday&quot;: &quot;2019-05-04&quot;,</span><br><span class="line">  &quot;test_field&quot;: &quot;zzzzzz&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接下来，查找字段里没有的值-这样写是错误的，没有正确写法（6-x）"><a href="#接下来，查找字段里没有的值-这样写是错误的，没有正确写法（6-x）" class="headerlink" title="接下来，查找字段里没有的值,这样写是错误的，没有正确写法（6.x）"></a>接下来，查找字段里没有的值,这样写是错误的，没有正确写法（6.x）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;missing&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;test_field&quot;,</span><br><span class="line">          &quot;existence&quot;: true,</span><br><span class="line">          &quot;null_value&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-9-3-将任何查询转为过滤器"><a href="#6-9-3-将任何查询转为过滤器" class="headerlink" title="6.9.3 将任何查询转为过滤器"></a>6.9.3 将任何查询转为过滤器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;query_string&quot;: &#123;</span><br><span class="line">            &quot;default_field&quot;: &quot;name&quot;,</span><br><span class="line">            &quot;query&quot;: &quot;che*&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="缓存过滤器"><a href="#缓存过滤器" class="headerlink" title="缓存过滤器"></a>缓存过滤器</h4><p>加入 _cache: true 配置</p>
<h3 id="6-9-4-为任务选择最好的查询"><a href="#6-9-4-为任务选择最好的查询" class="headerlink" title="6.9.4 为任务选择最好的查询"></a>6.9.4 为任务选择最好的查询</h3><h1 id="7-分析数据"><a href="#7-分析数据" class="headerlink" title="7. 分析数据"></a>7. 分析数据</h1><h2 id="7-1-什么是分析数据"><a href="#7-1-什么是分析数据" class="headerlink" title="7.1 什么是分析数据"></a>7.1 什么是分析数据</h2><ol>
<li>字符过滤：使用字符过滤器转变字符</li>
<li>文本切分为分词：将文本切分为单个或者多个分词</li>
<li>分词过滤：使用分词过滤器转变为每个分词</li>
<li>分词索引：将这些分词存储到索引中</li>
</ol>
<h3 id="7-1-1-字符过滤"><a href="#7-1-1-字符过滤" class="headerlink" title="7.1.1 字符过滤"></a>7.1.1 字符过滤</h3><p>主要是排除一些HTML标签以及特殊符号转为可以搜索是是别的词条</p>
<h3 id="7-1-2-切分为分词"><a href="#7-1-2-切分为分词" class="headerlink" title="7.1.2 切分为分词"></a>7.1.2 切分为分词</h3><p>标准分词器：根据空格，换行，破折号进行划分单词</p>
<h3 id="7-1-3-分词过滤器"><a href="#7-1-3-分词过滤器" class="headerlink" title="7.1.3 分词过滤器"></a>7.1.3 分词过滤器</h3><p>最有用和最常用的是<strong>小写分词过滤器</strong>（外国）</p>
<p>中国建议使用 ik 中文分词器</p>
<p>书本的分词过滤为下：</p>
<ol>
<li>分词转小写</li>
<li>删除”停用词”</li>
<li>同义词添加</li>
</ol>
<h3 id="7-1-4-分词索引"><a href="#7-1-4-分词索引" class="headerlink" title="7.1.4 分词索引"></a>7.1.4 分词索引</h3><p>经过分词过滤器过滤之后，将发送到Lucene进行文档索引。最终组成倒排索引</p>
<p>所有不同部分，组成一个分析器</p>
<blockquote>
<p>搜索时候的分析：</p>
<p>如果搜索没有达到预期效果，牢记一条</p>
<p><strong>分析方式和预想的不一致</strong></p>
</blockquote>
<h2 id="7-2-为文档使用分析器"><a href="#7-2-为文档使用分析器" class="headerlink" title="7.2 为文档使用分析器"></a>7.2 为文档使用分析器</h2><p>以下两种方式指定字段使用的分析器</p>
<ul>
<li>创建索引的时候，为特定索引进行设置</li>
<li>es配置文件中，配置全局分析器</li>
</ul>
<h3 id="7-2-1-创建索引的过程中，添加定制分析器"><a href="#7-2-1-创建索引的过程中，添加定制分析器" class="headerlink" title="7.2.1 创建索引的过程中，添加定制分析器"></a>7.2.1 创建索引的过程中，添加定制分析器</h3><p>参考：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzeXcxMjYvYXJ0aWNsZS9kZXRhaWxzLzcxMDgwMjg1" title="https://blog.csdn.net/wsyw126/article/details/71080285">https://blog.csdn.net/wsyw126/article/details/71080285<i class="fa fa-external-link"></i></span></p>
<h4 id="旧版本的使用方式"><a href="#旧版本的使用方式" class="headerlink" title="旧版本的使用方式"></a>旧版本的使用方式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;mymyindex&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;:&#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 2,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1,</span><br><span class="line">    &quot;index&quot;: &#123;</span><br><span class="line">      &quot;analysis&quot;: &#123;</span><br><span class="line">        &quot;myCustomAnalyzer&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;: &quot;myCustomTokenizer&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;myCustomFilter1&quot;, &quot;myCustomFilter2&quot;],</span><br><span class="line">          &quot;char_filter&quot;: [&quot;myCustomCharFilter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tokenizer&quot;: &#123;</span><br><span class="line">      &quot;myCustomTokenizer&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;letter&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;filter&quot;: &#123;</span><br><span class="line">      &quot;myCustomFilter1&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;lowercase&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;myCustomFilter2&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;kstem&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;char_filter&quot;:&#123;</span><br><span class="line">      &quot;myCustomCharFilter&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;mapping&quot;,</span><br><span class="line">        &quot;mappings&quot;: [&quot;ph&#x3D;&gt;f&quot;, &quot;u&#x3D;&gt;you&quot;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;:&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="网上的案例："><a href="#网上的案例：" class="headerlink" title="网上的案例："></a>网上的案例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;analysis&quot;: &#123;</span><br><span class="line">            &quot;char_filter&quot;: &#123;</span><br><span class="line">                &quot;&amp;_to_and&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:       &quot;mapping&quot;,</span><br><span class="line">                    &quot;mappings&quot;: [ &quot;&amp; &#x3D;&gt; and &quot;]</span><br><span class="line">            &#125;&#125;,</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;my_stopwords&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:       &quot;stop&quot;,</span><br><span class="line">                    &quot;stopwords&quot;: [ &quot;the&quot;, &quot;a&quot; ]</span><br><span class="line">            &#125;&#125;,</span><br><span class="line">            &quot;analyzer&quot;: &#123;</span><br><span class="line">                &quot;my_analyzer&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:         &quot;custom&quot;,</span><br><span class="line">                    &quot;char_filter&quot;:  [ &quot;html_strip&quot;, &quot;&amp;_to_and&quot; ],</span><br><span class="line">                    &quot;tokenizer&quot;:    &quot;standard&quot;,</span><br><span class="line">                    &quot;filter&quot;:       [ &quot;lowercase&quot;, &quot;my_stopwords&quot; ]</span><br><span class="line">            &#125;&#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的网上案例使用 _settings 查看结果是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;my_index&quot;: &#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;index&quot;: &#123;</span><br><span class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</span><br><span class="line">        &quot;provided_name&quot;: &quot;my_index&quot;,</span><br><span class="line">        &quot;creation_date&quot;: &quot;1571079347660&quot;,</span><br><span class="line">        &quot;analysis&quot;: &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;my_stopwords&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;stop&quot;,</span><br><span class="line">              &quot;stopwords&quot;: [</span><br><span class="line">                &quot;the&quot;,</span><br><span class="line">                &quot;a&quot;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;analyzer&quot;: &#123;</span><br><span class="line">            &quot;my_analyzer&quot;: &#123;</span><br><span class="line">              &quot;filter&quot;: [</span><br><span class="line">                &quot;lowercase&quot;,</span><br><span class="line">                &quot;my_stopwords&quot;</span><br><span class="line">              ],</span><br><span class="line">              &quot;char_filter&quot;: [</span><br><span class="line">                &quot;html_strip&quot;,</span><br><span class="line">                &quot;&amp;_to_and&quot;</span><br><span class="line">              ],</span><br><span class="line">              &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">              &quot;tokenizer&quot;: &quot;standard&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;char_filter&quot;: &#123;</span><br><span class="line">            &quot;&amp;_to_and&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;mapping&quot;,</span><br><span class="line">              &quot;mappings&quot;: [</span><br><span class="line">                &quot;&amp; &#x3D;&gt; and &quot;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot;: &quot;gYyxkcIRRWqLtWhjMd24CQ&quot;,</span><br><span class="line">        &quot;version&quot;: &#123;</span><br><span class="line">          &quot;created&quot;: &quot;6020499&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="将书上的案例改为6-x支持的形式，格式如下"><a href="#将书上的案例改为6-x支持的形式，格式如下" class="headerlink" title="将书上的案例改为6.x支持的形式，格式如下:"></a>将书上的案例改为6.x支持的形式，格式如下:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;mymyindex&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">	&quot;settings&quot;: &#123;</span><br><span class="line">		&quot;number_of_shards&quot;: 2,</span><br><span class="line">		&quot;number_of_replicas&quot;: 1,</span><br><span class="line">		&quot;analysis&quot;: &#123;</span><br><span class="line">			&quot;myCustomAnalyzer&quot;: &#123;</span><br><span class="line">				&quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">				&quot;tokenizer&quot;: &quot;myCustomTokenizer&quot;,</span><br><span class="line">				&quot;filter&quot;: [&quot;myCustomFilter1&quot;, &quot;myCustomFilter2&quot;],</span><br><span class="line">				&quot;char_filter&quot;: [&quot;myCustomCharFilter&quot;]</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;tokenizer&quot;: &#123;</span><br><span class="line">				&quot;myCustomTokenizer&quot;: &#123;</span><br><span class="line">					&quot;type&quot;: &quot;letter&quot;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;filter&quot;: &#123;</span><br><span class="line">				&quot;myCustomFilter1&quot;: &#123;</span><br><span class="line">					&quot;type&quot;: &quot;lowercase&quot;</span><br><span class="line">				&#125;,</span><br><span class="line">				&quot;myCustomFilter2&quot;: &#123;</span><br><span class="line">					&quot;type&quot;: &quot;kstem&quot;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			&quot;char_filter&quot;: &#123;</span><br><span class="line">				&quot;myCustomCharFilter&quot;: &#123;</span><br><span class="line">					&quot;type&quot;: &quot;mapping&quot;,</span><br><span class="line">					&quot;mappings&quot;: [&quot;ph&#x3D;&gt;f&quot;, &quot;u&#x3D;&gt;you&quot;]</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;mappings&quot;: &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-2-使用elasticsearch-yml-的配置文件进行配置"><a href="#7-2-2-使用elasticsearch-yml-的配置文件进行配置" class="headerlink" title="7.2.2 使用elasticsearch.yml 的配置文件进行配置"></a>7.2.2 使用elasticsearch.yml 的配置文件进行配置</h3><p>目前没有理解如何配置，需要到官方文档去摸索</p>
<h3 id="7-2-3-在映射中指定某个字段的分析器"><a href="#7-2-3-在映射中指定某个字段的分析器" class="headerlink" title="7.2.3 在映射中指定某个字段的分析器"></a>7.2.3 在映射中指定某个字段的分析器</h3><h4 id="书本的方式已经不适用于6-x版本了，根据官方文档的内容要进行如下定义"><a href="#书本的方式已经不适用于6-x版本了，根据官方文档的内容要进行如下定义" class="headerlink" title="书本的方式已经不适用于6.x版本了，根据官方文档的内容要进行如下定义"></a>书本的方式已经不适用于6.x版本了，根据官方文档的内容要进行如下定义</h4><p>注意下文有使用到该索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;mymyindex</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;std_folded&quot;: &#123; </span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [</span><br><span class="line">            &quot;lowercase&quot;,</span><br><span class="line">            &quot;asciifolding&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_doc&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;my_text&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;std_folded&quot; </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-3-使用API来分析文本"><a href="#7-3-使用API来分析文本" class="headerlink" title="7.3 使用API来分析文本"></a>7.3 使用API来分析文本</h2><h3 id="7-3-1-使用-analyzer-内置API来进行分析分析器解析步骤"><a href="#7-3-1-使用-analyzer-内置API来进行分析分析器解析步骤" class="headerlink" title="7.3.1 使用_analyzer 内置API来进行分析分析器解析步骤"></a>7.3.1 使用_analyzer 内置API来进行分析分析器解析步骤</h3><p>下面是官方的测试用例：使用的官方内置的 <strong>standard（标准）</strong>分析器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST &quot;192.168.92.180:9200&#x2F;_analyze?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog\u0027s bone.&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;the&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 3,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;2&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 4,</span><br><span class="line">      &quot;end_offset&quot; : 5,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;NUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;quick&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 6,</span><br><span class="line">      &quot;end_offset&quot; : 11,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;brown&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 12,</span><br><span class="line">      &quot;end_offset&quot; : 17,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;foxes&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 18,</span><br><span class="line">      &quot;end_offset&quot; : 23,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;jumped&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 24,</span><br><span class="line">      &quot;end_offset&quot; : 30,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 5</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;over&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 31,</span><br><span class="line">      &quot;end_offset&quot; : 35,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 6</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;the&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 36,</span><br><span class="line">      &quot;end_offset&quot; : 39,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 7</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;lazy&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 40,</span><br><span class="line">      &quot;end_offset&quot; : 44,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 8</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;dog&#39;s&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 45,</span><br><span class="line">      &quot;end_offset&quot; : 50,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 9</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;bone&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 51,</span><br><span class="line">      &quot;end_offset&quot; : 55,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 10</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>POST my_index/_analyze?analyzer=standard 注意：传参数这样使用时 错误的</p>
<p>需要使用如下方式</p>
<p>POST my_index/_analyze { “analyzer”: “standard”, “text”: “The 2 QUICK Brown-Foxes jumped over the lazy dog’s bone.” }</p>
</blockquote>
<h3 id="7-3-2-分析中指定自定义分析器"><a href="#7-3-2-分析中指定自定义分析器" class="headerlink" title="7.3.2 分析中指定自定义分析器"></a>7.3.2 分析中指定自定义分析器</h3><p>这里在建立索引的时候用到了上面官方改动案例的索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;mymyindex&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;std_folded&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;this is test word I AM LAZY BOY&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-3-使用组合即时创建分析器"><a href="#7-3-3-使用组合即时创建分析器" class="headerlink" title="7.3.3 使用组合即时创建分析器"></a>7.3.3 使用组合即时创建分析器</h3><h4 id="使用curl方式"><a href="#使用curl方式" class="headerlink" title="使用curl方式"></a>使用curl方式</h4><p>6.x 语法有变，必须放在大括号里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST &quot;192.168.92.180:9200&#x2F;_analyze?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog\u0027s bone.&quot;,</span><br><span class="line"></span><br><span class="line"> &quot;filter&quot;: [&quot;lowercase&quot;, &quot;reverse&quot;],</span><br><span class="line"></span><br><span class="line">&quot;tokenizer&quot;: &quot;whitespace&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure>

<p>此时会发现结果以倒序的方式进行分析</p>
<h4 id="使用kibana方式"><a href="#使用kibana方式" class="headerlink" title="使用kibana方式"></a>使用kibana方式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;my_index&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;whitespace&quot;, </span><br><span class="line">  &quot;filter&quot;: [</span><br><span class="line">    &quot;reverse&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog\u0027s bone.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大同小异，如果结果没有反转，可能是解析的过程中有其他干扰因素</p>
<h3 id="7-3-4-使用基于某个字段的映射分析"><a href="#7-3-4-使用基于某个字段的映射分析" class="headerlink" title="7.3.4 使用基于某个字段的映射分析"></a>7.3.4 使用基于某个字段的映射分析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;mymyindex&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;whitespace&quot;, </span><br><span class="line">  &quot;filter&quot;: [</span><br><span class="line">    &quot;reverse&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog\u0027s bone.&quot;,</span><br><span class="line">  &quot;field&quot;: &quot;my_text&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前提条件是必须是存在索引的字段才能进行映射分析</p>
<h3 id="7-3-5-使用词条向量API来学习索引词条"><a href="#7-3-5-使用词条向量API来学习索引词条" class="headerlink" title="7.3.5 使用词条向量API来学习索引词条"></a>7.3.5 使用词条向量API来学习索引词条</h3><p>使用_termvector 的端点来获取词条的更多信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;get-together&#x2F;group&#x2F;3q8nz20BXNiyabSjyH-c&#x2F;_termvectors</span><br></pre></td></tr></table></figure>

<p>虽然可以使用，但是内容已经被官方改动，无法查看词条索引</p>
<h2 id="7-4-分析器-分词器和分词过滤器"><a href="#7-4-分析器-分词器和分词过滤器" class="headerlink" title="7.4 分析器/分词器和分词过滤器"></a>7.4 分析器/分词器和分词过滤器</h2><h3 id="7-4-0-分析器的概览"><a href="#7-4-0-分析器的概览" class="headerlink" title="7.4.0 分析器的概览"></a>7.4.0 分析器的概览</h3><ul>
<li>输入文本</li>
<li>分析器<ul>
<li>字符过滤器</li>
<li>分词器</li>
<li>分词过滤器</li>
</ul>
</li>
<li>输出分词</li>
</ul>
<h3 id="7-4-1-内置分析器"><a href="#7-4-1-内置分析器" class="headerlink" title="7.4.1 内置分析器"></a>7.4.1 内置分析器</h3><p><strong>Standard Analyzer</strong></p>
<p>The <code>standard</code> analyzer divides text into terms on word boundaries, as defined by the Unicode Text Segmentation algorithm. It removes most punctuation, lowercases terms, and supports removing stop words.</p>
<p><strong>Simple Analyzer</strong></p>
<p>The <code>simple</code> analyzer divides text into terms whenever it encounters a character which is not a letter. It lowercases all terms.</p>
<p><strong>Whitespace Analyzer</strong></p>
<p>The <code>whitespace</code> analyzer divides text into terms whenever it encounters any whitespace character. It does not lowercase terms.</p>
<p><strong>Stop Analyzer</strong></p>
<p>The <code>stop</code> analyzer is like the <code>simple</code> analyzer, but also supports removal of stop words.</p>
<p><strong>Keyword Analyzer</strong></p>
<p>The <code>keyword</code> analyzer is a “noop” analyzer that accepts whatever text it is given and outputs the exact same text as a single term.</p>
<p><strong>Pattern Analyzer</strong></p>
<p>The <code>pattern</code> analyzer uses a regular expression to split the text into terms. It supports lower-casing and stop words.</p>
<p><strong>Language Analyzers</strong></p>
<p>Elasticsearch provides many language-specific analyzers like <code>english</code> or <code>french</code>.</p>
<p><strong>Fingerprint Analyzer</strong></p>
<p>The <code>fingerprint</code> analyzer is a specialist analyzer which creates a fingerprint which can be used for duplicate detection.</p>
<p><strong>谷歌翻译之后</strong></p>
<h4 id="标准分析器"><a href="#标准分析器" class="headerlink" title="标准分析器"></a>标准分析器</h4><p>“标准”分析器根据Unicode文本分段算法的定义，将文本划分为单词边界上的各个术语。它删除大多数标点符号，小写术语，并支持删除停用词。</p>
<h4 id="简单分析器"><a href="#简单分析器" class="headerlink" title="简单分析器"></a><strong>简单分析器</strong></h4><p>“简单”分析器在遇到非字母字符时会将文本划分为多个词。它小写所有术语。</p>
<p>只使用小写转化为分词器，注意不适用于亚洲的语言，在欧美这种单词划分的语言适用</p>
<h4 id="空白分析器"><a href="#空白分析器" class="headerlink" title="空白分析器"></a><strong>空白分析器</strong></h4><p>每当遇到任何空白字符时，“空白”分析器都会将文本划分为多个词。它不小写。</p>
<h4 id="停止分析器"><a href="#停止分析器" class="headerlink" title="停止分析器"></a><strong>停止分析器</strong></h4><p>“停止”分析器类似于“简单”分析器，但也支持删除停用词。</p>
<h4 id="关键字分析器"><a href="#关键字分析器" class="headerlink" title="关键字分析器"></a><strong>关键字分析器</strong></h4><p>“关键字”分析器是一个“空”分析器，它接受给出的任何文本，并输出与单个术语完全相同的文本。</p>
<h4 id="模式分析器"><a href="#模式分析器" class="headerlink" title="模式分析器"></a><strong>模式分析器</strong></h4><p>“模式”分析器使用正则表达式将文本分割为多个词。它支持小写字母和停用词。</p>
<h4 id="语言分析器"><a href="#语言分析器" class="headerlink" title="语言分析器"></a><strong>语言分析器</strong></h4><p>Elasticsearch提供了许多特定于语言的分析器，例如“ english”或“ french”。</p>
<h4 id="指纹分析器"><a href="#指纹分析器" class="headerlink" title="指纹分析器"></a><strong>指纹分析器</strong></h4><p>“指纹”分析仪是一种专业分析仪，可创建可用于重复检测的指纹。</p>
<h4 id="雪球分析器"><a href="#雪球分析器" class="headerlink" title="雪球分析器"></a>雪球分析器</h4><p>除了使用标准分词器和标准分词过滤器，也使用了小写分词过滤器以及停用词过滤器，还使用雪球词干进行词干提取</p>
<h3 id="7-4-2-分词器"><a href="#7-4-2-分词器" class="headerlink" title="7.4.2 分词器"></a>7.4.2 分词器</h3><p><strong>Standard Tokenizer</strong></p>
<p>The <code>standard</code> tokenizer divides text into terms on word boundaries, as defined by the Unicode Text Segmentation algorithm. It removes most punctuation symbols. It is the best choice for most languages.</p>
<p><strong>Letter Tokenizer</strong></p>
<p>The <code>letter</code> tokenizer divides text into terms whenever it encounters a character which is not a letter.</p>
<p><strong>Lowercase Tokenizer</strong></p>
<p>The <code>lowercase</code> tokenizer, like the <code>letter</code> tokenizer, divides text into terms whenever it encounters a character which is not a letter, but it also lowercases all terms.</p>
<p><strong>Whitespace Tokenizer</strong></p>
<p>The <code>whitespace</code> tokenizer divides text into terms whenever it encounters any whitespace character.</p>
<p><strong>UAX URL Email Tokenizer</strong></p>
<p>The <code>uax_url_email</code> tokenizer is like the <code>standard</code> tokenizer except that it recognises URLs and email addresses as single tokens.</p>
<p><strong>Classic Tokenizer</strong></p>
<p>The <code>classic</code> tokenizer is a grammar based tokenizer for the English Language.</p>
<p><strong>Thai Tokenizer</strong></p>
<p>The <code>thai</code> tokenizer segments Thai text into words.</p>
<p><strong>谷歌翻译之后</strong></p>
<h4 id="标准分词器"><a href="#标准分词器" class="headerlink" title="标准分词器"></a><strong>标准分词器</strong></h4><p>标准分词器将文本划分为单词边界上的术语，这由Unicode文本分段算法定义。 它删除大多数标点符号。 这是大多数语言的最佳选择。 注意标点符号回进行过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;I have, photos&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<table>
<thead>
<tr>
<th><code>max_token_length</code></th>
<th>The maximum token length. If a token is seen that exceeds this length then it is split at <code>max_token_length</code> intervals. Defaults to <code>255</code>.</th>
</tr>
</thead>
<tbody><tr>
<td>最大分词数</td>
<td>允许设置最大分次数，如果分词长度超过最大分词数，将会进行切割作为下一个分词。默认为255</td>
</tr>
</tbody></table>
<h4 id="字母分词器"><a href="#字母分词器" class="headerlink" title="字母分词器"></a><strong>字母分词器</strong></h4><p>字母分词器在遇到非字母字符时会将文本分为多个术语</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;letter&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ The, QUICK, Brown, Foxes, jumped, over, the, lazy, dog, s, bone ]</span><br></pre></td></tr></table></figure>

<p>该<code>letter</code>分词器是不可配置</p>
<h4 id="小写分词器"><a href="#小写分词器" class="headerlink" title="小写分词器"></a><strong>小写分词器</strong></h4><p>小写分词器与字母分词器一样，在遇到非字母的字符时，会将文本分为多个词，但所有词都小写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;lowercase&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该<code>letter</code>分词器是不可配置</p>
<h4 id="空格分词器"><a href="#空格分词器" class="headerlink" title="空格分词器"></a><strong>空格分词器</strong></h4><p>每当遇到任何空白字符时，空白令牌生成器都会将文本划分为多个术语。(但是不会对大小写进行转化，只判断空白字符)</p>
<p>配置：</p>
<table>
<thead>
<tr>
<th><code>max_token_length</code></th>
<th>The maximum token length. If a token is seen that exceeds this length then it is split at <code>max_token_length</code> intervals. Defaults to <code>255</code>.</th>
</tr>
</thead>
<tbody><tr>
<td>最大分词数</td>
<td>允许设置最大分次数，如果分词长度超过最大分词数，将会进行切割作为下一个分词。默认为255</td>
</tr>
</tbody></table>
<h4 id="UAX-URL电子邮件令牌生成器"><a href="#UAX-URL电子邮件令牌生成器" class="headerlink" title="UAX URL电子邮件令牌生成器"></a>UAX URL电子邮件令牌生成器</h4><p><strong>uax_url_email</strong> 分词器类似于标准令牌生成器，不同之处在于它将URL和电子邮件地址识别为单个分词。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;uax_url_email&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;Email me at john.smith@global-international.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意分词出来的email类型为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;token&quot;: &quot;john.smith@global-international.com&quot;,</span><br><span class="line">    &quot;start_offset&quot;: 12,</span><br><span class="line">    &quot;end_offset&quot;: 47,</span><br><span class="line">    &quot;type&quot;: &quot;&lt;EMAIL&gt;&quot;,</span><br><span class="line">    &quot;position&quot;: 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置</p>
<table>
<thead>
<tr>
<th><code>max_token_length</code></th>
<th>The maximum token length. If a token is seen that exceeds this length then it is split at <code>max_token_length</code> intervals. Defaults to <code>255</code>.</th>
</tr>
</thead>
<tbody><tr>
<td>最大分词数</td>
<td>允许设置最大分次数，如果分词长度超过最大分词数，将会进行切割作为下一个分词。默认为255</td>
</tr>
</tbody></table>
<h4 id="经典分词器"><a href="#经典分词器" class="headerlink" title="经典分词器"></a>经典分词器</h4><p>经典的分词器是用于英语的基于语法的分词器。</p>
<blockquote>
<p>可以说是为英语而生的分词器. 这个分词器对于英文的首字符缩写、 公司名字、 email 、 大部分网站域名.都能很好的解决。 但是, 对于除了英语之外的其他语言，都不是很好使。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;classic&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone.&quot;</span><br><span class="line">&#125;</span><br><span class="line">[ The, 2, QUICK, Brown, Foxes, jumped, over, the, lazy, dog&#39;s, bone ]</span><br></pre></td></tr></table></figure>

<p>下面是官方文档谷歌翻译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该&#96;classic&#96;标记生成器是一种基于语法标记生成器是好的英语语言文档。该令牌生成器具有试探法，可对首字母缩写词，公司名称，电子邮件地址和互联网主机名进行特殊处理。但是，这些规则并不总是有效，并且分词器不适用于英语以外的大多数其他语言：</span><br><span class="line"></span><br><span class="line">- 它最多将标点符号拆分为单词，删除标点符号。但是，不带空格的点被认为是令牌的一部分。</span><br><span class="line">- 除非令牌中没有数字，否则它将使用连字符对单词进行拆分，在这种情况下，整个令牌将被解释为产品编号，并且不会拆分。</span><br><span class="line">- 它将电子邮件地址和互联网主机名识别为一个令牌。</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<table>
<thead>
<tr>
<th><code>max_token_length</code></th>
<th>The maximum token length. If a token is seen that exceeds this length then it is split at <code>max_token_length</code> intervals. Defaults to <code>255</code>.</th>
</tr>
</thead>
<tbody><tr>
<td>最大分词数</td>
<td>允许设置最大分次数，如果分词长度超过最大分词数，将会进行切割作为下一个分词。默认为255</td>
</tr>
</tbody></table>
<h4 id="泰语分词器"><a href="#泰语分词器" class="headerlink" title="泰语分词器"></a>泰语分词器</h4><p>泰语分词器将泰语文本分成单词。</p>
<h3 id="7-4-3-分词过滤器"><a href="#7-4-3-分词过滤器" class="headerlink" title="7.4.3 分词过滤器"></a>7.4.3 分词过滤器</h3><p>官方定义了大概20多种分词过滤，涵盖内容较多，以官方6.2.4文档为准</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS82LjQvYW5hbHlzaXMtdG9rZW5maWx0ZXJzLmh0bWw=" title="https://www.elastic.co/guide/en/elasticsearch/reference/6.4/analysis-tokenfilters.html">https://www.elastic.co/guide/en/elasticsearch/reference/6.4/analysis-tokenfilters.html<i class="fa fa-external-link"></i></span></p>
<h4 id="标准分词过滤器"><a href="#标准分词过滤器" class="headerlink" title="标准分词过滤器"></a>标准分词过滤器</h4><p>不要以为有多牛逼，其实什么事情都没有干。在以后的版本中有可能扩展功能。只是单纯占位符</p>
<h4 id="ASCII-Folding-Token-Filter（ASCII折叠过滤器）"><a href="#ASCII-Folding-Token-Filter（ASCII折叠过滤器）" class="headerlink" title="ASCII Folding Token Filter（ASCII折叠过滤器）"></a>ASCII Folding Token Filter（ASCII折叠过滤器）</h4><p>官网翻译介绍：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类型为asciifolding的分词过滤器，用于将前127个ASCII字符（“基本拉丁” Unicode块）中不存在的字母，数字和符号Unicode字符转换为等效的ASCII字符。 例：</span><br><span class="line">PUT &#x2F;asciifold_example</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">        &quot;analysis&quot; : &#123;</span><br><span class="line">            &quot;analyzer&quot; : &#123;</span><br><span class="line">                &quot;default&quot; : &#123;</span><br><span class="line">                    &quot;tokenizer&quot; : &quot;standard&quot;,</span><br><span class="line">                    &quot;filter&quot; : [&quot;standard&quot;, &quot;asciifolding&quot;]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>允许进行如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;asciifold_example</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">        &quot;analysis&quot; : &#123;</span><br><span class="line">            &quot;analyzer&quot; : &#123;</span><br><span class="line">                &quot;default&quot; : &#123;</span><br><span class="line">                    &quot;tokenizer&quot; : &quot;standard&quot;,</span><br><span class="line">                    &quot;filter&quot; : [&quot;standard&quot;, &quot;my_ascii_folding&quot;]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;filter&quot; : &#123;</span><br><span class="line">                &quot;my_ascii_folding&quot; : &#123;</span><br><span class="line">                    &quot;type&quot; : &quot;asciifolding&quot;,</span><br><span class="line">                    &quot;preserve_original&quot; : true --默认为false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>翻译版</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preserve_original： 接受默认值为false的preserve_original设置，但如果为true，则将保留原始令牌并发出折叠后的令牌</span><br></pre></td></tr></table></figure>

<h4 id="Flatten-Graph-Token-Filter（图形分词过滤器）"><a href="#Flatten-Graph-Token-Filter（图形分词过滤器）" class="headerlink" title="Flatten Graph Token Filter（图形分词过滤器）"></a>Flatten Graph Token Filter（图形分词过滤器）</h4><blockquote>
<p>注意：此功能在Lucene中被标记为实验性的</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flatten_graph令牌过滤器接受任意图形令牌流，例如“同义词图形令牌过滤器”生成的图形令牌流，并将其展平为适合索引的单个线性令牌链。</span><br><span class="line"></span><br><span class="line">这是一个有损耗的过程，因为单独的边路径相互挤压，但是在索引过程中使用图形令牌流时是必需的，因为Lucene索引当前无法表示图形。 因此，最好仅在搜索时应用图形分析器，因为这样可以保留完整的图形结构并为接近查询提供正确的匹配项。</span><br><span class="line"></span><br><span class="line">有关此主题及其复杂性的更多信息，请阅读Lucene的TokenStreams实际上是图博客文章。</span><br></pre></td></tr></table></figure>

<h4 id="Length-Token-Filter（长度分词过滤器）"><a href="#Length-Token-Filter（长度分词过滤器）" class="headerlink" title="Length Token Filter（长度分词过滤器）"></a>Length Token Filter（长度分词过滤器）</h4><p>将超出最短和最长限制范围的单词过滤掉，如min=2，max=8，不在此范围的单词都会进行过滤</p>
<p>配置项如下</p>
<table>
<thead>
<tr>
<th><code>min</code></th>
<th>The minimum number. Defaults to <code>0</code>.</th>
</tr>
</thead>
<tbody><tr>
<td><strong>max</strong></td>
<td><strong>The maximum number. Defaults to <code>Integer.MAX_VALUE</code>, which is <code>2^31-1</code> or 2147483647.</strong></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;length-filter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;myfilter&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;length&quot;,</span><br><span class="line">          &quot;max&quot;: 8,</span><br><span class="line">          &quot;min&quot;: 2</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, </span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;defulat&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;standard&quot;, &quot;myfilter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;acknowledged&quot;: true,</span><br><span class="line">  &quot;shards_acknowledged&quot;: true,</span><br><span class="line">  &quot;index&quot;: &quot;length-filter&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Lowercase-token-filter（小写分词过滤器）"><a href="#Lowercase-token-filter（小写分词过滤器）" class="headerlink" title="Lowercase token filter（小写分词过滤器）"></a>Lowercase token filter（小写分词过滤器）</h4><p>可以讲任何经过的分词变成小写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;lowercase_example</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;standard_lowercase_example&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;lowercase&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;greek_lowercase_example&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;greek_lowercase&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;greek_lowercase&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;lowercase&quot;,</span><br><span class="line">          &quot;language&quot;: &quot;greek&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Uppercase-Token-Filter（大写分词过滤器）"><a href="#Uppercase-Token-Filter（大写分词过滤器）" class="headerlink" title="Uppercase Token Filter（大写分词过滤器）"></a>Uppercase Token Filter（大写分词过滤器）</h4><p>讲所有经过的分词转大写</p>
<h4 id="NGram-Token-Filter（N元语法过滤器）"><a href="#NGram-Token-Filter（N元语法过滤器）" class="headerlink" title="NGram Token Filter（N元语法过滤器）"></a>NGram Token Filter（N元语法过滤器）</h4><table>
<thead>
<tr>
<th>Setting</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>min_gram</code></td>
<td>Defaults to <code>1</code>.</td>
</tr>
<tr>
<td><code>max_gram</code></td>
<td>Defaults to <code>2</code>.</td>
</tr>
</tbody></table>
<p>索引级别设置index.max_ngram_diff控制max_gram和min_gram之间的最大允许差异。</p>
<p>N元语法过滤器即：</p>
<p>控制被切分单词的数量</p>
<p>举例：</p>
<blockquote>
<ol>
<li><strong>1-grams</strong>:一元语法过滤器</li>
</ol>
<p>以：＂spaghetti＂为例：</p>
<p>ｓ　ｐ　ａ　ｇ　ｈ　ｅ　ｔ　ｔ　ｉ</p>
<ol>
<li><p>二元语法过滤器</p>
<p>将会拆分为: sp，pa，ag，gh，he，et，tt，ti</p>
</li>
<li><p>三元语法过滤器</p>
<p>将会拆分为：spa，pag，agh，ghe，het，ett，tti</p>
</li>
</ol>
</blockquote>
<h4 id="Edge-NGram-Token-Filter（侧边N元语法过滤器）"><a href="#Edge-NGram-Token-Filter（侧边N元语法过滤器）" class="headerlink" title="Edge NGram Token Filter（侧边N元语法过滤器）"></a>Edge NGram Token Filter（侧边N元语法过滤器）</h4><table>
<thead>
<tr>
<th>Setting</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>min_gram</code></td>
<td>Defaults to <code>1</code>.</td>
</tr>
<tr>
<td><code>max_gram</code></td>
<td>Defaults to <code>2</code>.</td>
</tr>
<tr>
<td><code>side</code></td>
<td>deprecated. Either <code>front</code> or <code>back</code>. Defaults to <code>front</code>.</td>
</tr>
</tbody></table>
<p>为N元语法的变体：</p>
<p>仅仅从边缘构建N元语法</p>
<p>如:min = 2 ,max = 6</p>
<p>“spaghetti” 将会切分为： sp spa spag spagh spaghe</p>
<h3 id="7-4-4-N元语法的使用场景以及使用案例"><a href="#7-4-4-N元语法的使用场景以及使用案例" class="headerlink" title="7.4.4 N元语法的使用场景以及使用案例"></a>7.4.4 N元语法的使用场景以及使用案例</h3><p>N元语法过滤器主要是可以用于处理因为的错误单词拼写，将单词进行切分组合，匹配相同的部分，这能保证即使错误的书写依然可以进行正确的匹配，但是中文的拼写修改有待进一步学习</p>
<p>当不知道是什么语言的时候，N元语法是一种很好的文本分析方式：</p>
<p>可以分析单词之间没有空格的单词！！！</p>
<p>指定依然靠min和max这两个重要参数</p>
<h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例:"></a>使用案例:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;n-gram-filter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;myfilter&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;ngram&quot;,</span><br><span class="line">          &quot;min_gram&quot;: 2,</span><br><span class="line">          &quot;max_gram&quot;: 6</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, </span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;defulat&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;standard&quot;, &quot;myfilter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：会出现一个报错提示官方已经弃用这两个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Deprecation: Deprecated big difference between max_gram and min_gram in NGram Tokenizer,expected difference must be less than or equal to: [1]</span><br></pre></td></tr></table></figure>

<p>有关该问题的社区讨论</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kaXNjdXNzLmVsYXN0aWMuY28vdC9kZXByZWNhdGlvbi1kZXByZWNhdGVkLWJpZy1kaWZmZXJlbmNlLWJldHdlZW4tbWF4LWdyYW0tYW5kLW1pbi1ncmFtLWluLW5ncmFtLzEyMjk2OQ==" title="https://discuss.elastic.co/t/deprecation-deprecated-big-difference-between-max-gram-and-min-gram-in-ngram/122969">https://discuss.elastic.co/t/deprecation-deprecated-big-difference-between-max-gram-and-min-gram-in-ngram/122969<i class="fa fa-external-link"></i></span></p>
<h4 id="Shingle-Token-Filter（滑动窗口分词过滤器）"><a href="#Shingle-Token-Filter（滑动窗口分词过滤器）" class="headerlink" title="Shingle Token Filter（滑动窗口分词过滤器）"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS82LjQvYW5hbHlzaXMtc2hpbmdsZS10b2tlbmZpbHRlci5odG1s" title="https://www.elastic.co/guide/en/elasticsearch/reference/6.4/analysis-shingle-tokenfilter.html">Shingle Token Filter<i class="fa fa-external-link"></i></span>（滑动窗口分词过滤器）</h4><h2 id="7-5-提取词干"><a href="#7-5-提取词干" class="headerlink" title="7.5 提取词干"></a>7.5 提取词干</h2><h3 id="7-5-1-算分提取词干"><a href="#7-5-1-算分提取词干" class="headerlink" title="7.5.1 算分提取词干"></a>7.5.1 算分提取词干</h3><p>es提供三种算法词干：</p>
<ol>
<li>snowball 过滤器</li>
<li>porter stem 过滤器</li>
<li>kstem 过滤器</li>
</ol>
<h4 id="选取kstem-作为案例测试"><a href="#选取kstem-作为案例测试" class="headerlink" title="选取kstem 作为案例测试"></a>选取kstem 作为案例测试</h4><h3 id="7-5-2-使用字典提取词干"><a href="#7-5-2-使用字典提取词干" class="headerlink" title="7.5.2 使用字典提取词干"></a>7.5.2 使用字典提取词干</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#x2F;kstem-filter</span><br><span class="line"></span><br><span class="line">PUT &#x2F;kstem-filter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;myfilter&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;kstem&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, </span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;defulat&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;lowercase&quot;, &quot;myfilter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET kstem-filter&#x2F;_settings</span><br></pre></td></tr></table></figure>

<h1 id="8-使用相关性进行搜索"><a href="#8-使用相关性进行搜索" class="headerlink" title="8. 使用相关性进行搜索"></a>8. 使用相关性进行搜索</h1><h2 id="8-1-es-的打分机制"><a href="#8-1-es-的打分机制" class="headerlink" title="8.1 es 的打分机制"></a>8.1 es 的打分机制</h2><h3 id="8-1-1-文档是如何运作的："><a href="#8-1-1-文档是如何运作的：" class="headerlink" title="8.1.1 文档是如何运作的："></a>8.1.1 文档是如何运作的：</h3><p>默认使用的是<strong>词频-逆文档</strong>（TF-IDF）词频</p>
<p>TF：词频</p>
<p>IDF：逆文档频率</p>
<h3 id="8-1-2-词频"><a href="#8-1-2-词频" class="headerlink" title="8.1.2 词频"></a>8.1.2 词频</h3><p>词条在文本当中出现的次数</p>
<h3 id="8-1-3-逆文档词频"><a href="#8-1-3-逆文档词频" class="headerlink" title="8.1.3 逆文档词频"></a>8.1.3 逆文档词频</h3><p>如果一个分词在索引的不同文档中出现的次数越多， 就越<strong>不重要</strong></p>
<blockquote>
<ul>
<li>文档频率的逆源自得分乘以 1/DF , DF是文档频率。意味着越高频率得分就会越低</li>
<li>逆文档频率只关心“是否”</li>
</ul>
</blockquote>
<h3 id="8-1-4-Lucene-评分公式"><a href="#8-1-4-Lucene-评分公式" class="headerlink" title="8.1.4 Lucene 评分公式"></a>8.1.4 Lucene 评分公式</h3><ul>
<li>词频</li>
<li>逆文档频率</li>
<li>调和因子<ul>
<li>搜索过多少文档以及发现多少词条</li>
</ul>
</li>
<li>查询标准化<ul>
<li>试图让不同的查询结果具有可比性</li>
</ul>
</li>
</ul>
<h2 id="8-2-其他打分方式"><a href="#8-2-其他打分方式" class="headerlink" title="8.2 其他打分方式"></a>8.2 其他打分方式</h2><ul>
<li>Okapi BM25</li>
<li>随机性分歧，DFR相似度</li>
<li>基于信息，IB相似度</li>
<li>LM Dirichlet 相似度</li>
<li>LM Jelinek Mercer 相似度</li>
</ul>
<h3 id="如何指定索引的打分方式？"><a href="#如何指定索引的打分方式？" class="headerlink" title="如何指定索引的打分方式？"></a>如何指定索引的打分方式？</h3><ul>
<li><p>修改字段映射的similarity 参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;take_score</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 2,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;mytype&quot;:&#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;title&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;similarity&quot;: &quot;defualt&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">PUT &#x2F;like</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;get-together&quot;:&#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;tilte&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;similarity&quot;: &quot;BM25&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在settings 中扩展，为某个索引设置打分算法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;dislike</span><br><span class="line">&#123;</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">    &quot;similarity&quot;: &#123;</span><br><span class="line">      &quot;my_custom&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;BM25&quot;,</span><br><span class="line">        &quot;k1&quot;: 1.2,</span><br><span class="line">        &quot;b&quot;: 0.75,</span><br><span class="line">        &quot;discount_overlaps&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET &#x2F;dislike&#x2F;_settings</span><br></pre></td></tr></table></figure>

<blockquote>
<p>重要改变：6.0以后官方已不提倡使用TF-IDF，因为该评分方式已经不适用与当今时代的实际需要，官方推荐使用BM25，并且建议7.0 以后的版本移除TF-IDF算法的所有内容，所以TF-IDF这种打分机制只做了解即可</p>
</blockquote>
</li>
</ul>
<h2 id="8-3-索引期间Boosting"><a href="#8-3-索引期间Boosting" class="headerlink" title="8.3 索引期间Boosting"></a>8.3 索引期间Boosting</h2><p>不推荐在创建索引的时候使用Boosting, 而是在查询的时候,原因如下</p>
<ul>
<li>缺少灵活性</li>
<li>以低精度的数值在Lucene 的内部索引结构当中，只有一个字节存储，可能丢失精度</li>
<li>boost 是运用于一个词条，配上多个词条，就意味着多次的boost， 进一步增加权重</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;my-gettogether</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;groups&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;name&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;boost&quot;: 2.0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET &#x2F;my-gettogether&#x2F;_mapping</span><br></pre></td></tr></table></figure>

<h2 id="8-4-查询期间的Boosting"><a href="#8-4-查询期间的Boosting" class="headerlink" title="8.4 查询期间的Boosting"></a>8.4 查询期间的Boosting</h2><ul>
<li>match、multi_match、simple_query_string、query_string</li>
<li>funcation_score (更为精确)</li>
</ul>
<p>使用match 查询进行boosting</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;about&quot;: &#123;</span><br><span class="line">              &quot;query&quot;: &quot;i hide&quot;,</span><br><span class="line">              &quot;boost&quot;: 2.5</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;last_name&quot;: &#123;</span><br><span class="line">              &quot;query&quot;: &quot;Simith&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个match 将会比第二个match 查询有更大的影响力</p>
<h3 id="8-4-1-跨越多个字段的查询"><a href="#8-4-1-跨越多个字段的查询" class="headerlink" title="8.4.1 跨越多个字段的查询"></a>8.4.1 跨越多个字段的查询</h3><h3 id="8-4-2-使用multi-match-查询，指定整个Boost"><a href="#8-4-2-使用multi-match-查询，指定整个Boost" class="headerlink" title="8.4.2 使用multi_match 查询，指定整个Boost"></a>8.4.2 使用multi_match 查询，指定整个Boost</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;smit wang&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;first_name&quot;, &quot;last_name&quot;],</span><br><span class="line">      &quot;boost&quot;: 2.5</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-4-3-使用特殊符号-对于name-进行boost"><a href="#8-4-3-使用特殊符号-对于name-进行boost" class="headerlink" title="8.4.3 使用特殊符号^对于name 进行boost"></a>8.4.3 使用特殊符号^对于name 进行boost</h3><p>使用3倍boost 修改某个字段查询的Boost</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;long&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;name^3&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-4-4-query-string-中对于针对单个的词条进行boost"><a href="#8-4-4-query-string-中对于针对单个的词条进行boost" class="headerlink" title="8.4.4 query_string 中对于针对单个的词条进行boost"></a>8.4.4 query_string 中对于针对单个的词条进行boost</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;lixiao* OR *long^3&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个字段被boost 4 倍，并不是意味着得分会乘以4，所以得分不是按照严格的乘法</p>
<h2 id="8-5-使用”解释-explain-”来理解文档评分"><a href="#8-5-使用”解释-explain-”来理解文档评分" class="headerlink" title="8.5 使用”解释(explain)”来理解文档评分"></a>8.5 使用”解释(explain)”来理解文档评分</h2><ul>
<li>请求体 expliane = true 告诉es 运行解释操作</li>
<li>Url指定_explain</li>
</ul>
<p>下面为请求体重设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;lixiao* OR *long^3&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;explain&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果，内容较为庞大，不过应该不是很难懂</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 58,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 3,</span><br><span class="line">    &quot;max_score&quot;: 4,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot;: &quot;[myindex][2]&quot;,</span><br><span class="line">        &quot;_node&quot;: &quot;Q58S9K26RxqIiVA-UQNrgg&quot;,</span><br><span class="line">        &quot;_index&quot;: &quot;myindex&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;Fbggy20B5sayAd6PVrE2&quot;,</span><br><span class="line">        &quot;_score&quot;: 4,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">          &quot;age&quot;: 5,</span><br><span class="line">          &quot;birthday&quot;: &quot;2019-05-04&quot;,</span><br><span class="line">          &quot;test_field&quot;: &quot;zzzzzz&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot;: &#123;</span><br><span class="line">          &quot;value&quot;: 4, # 最后得分</span><br><span class="line">          &quot;description&quot;: &quot;sum of:&quot;,</span><br><span class="line">          &quot;details&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot;: 1,</span><br><span class="line">              &quot;description&quot;: &quot;max of:&quot;,</span><br><span class="line">              &quot;details&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 1,</span><br><span class="line">                  &quot;description&quot;: &quot;name:lixiao*&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 1,</span><br><span class="line">                  &quot;description&quot;: &quot;name.keyword:lixiao*&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot;: 3,</span><br><span class="line">              &quot;description&quot;: &quot;max of:&quot;,</span><br><span class="line">              &quot;details&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 3,</span><br><span class="line">                  &quot;description&quot;: &quot;name:*long^3.0&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 3,</span><br><span class="line">                  &quot;description&quot;: &quot;name.keyword:*long^3.0&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot;: &quot;[myindex][3]&quot;,</span><br><span class="line">        &quot;_node&quot;: &quot;Q58S9K26RxqIiVA-UQNrgg&quot;,</span><br><span class="line">        &quot;_index&quot;: &quot;myindex&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: 4,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">          &quot;age&quot;: 55,</span><br><span class="line">          &quot;birthday&quot;: &quot;2019-05-04&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot;: &#123;</span><br><span class="line">          &quot;value&quot;: 4,</span><br><span class="line">          &quot;description&quot;: &quot;sum of:&quot;,</span><br><span class="line">          &quot;details&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot;: 1,</span><br><span class="line">              &quot;description&quot;: &quot;max of:&quot;,</span><br><span class="line">              &quot;details&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 1,</span><br><span class="line">                  &quot;description&quot;: &quot;name:lixiao*&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 1,</span><br><span class="line">                  &quot;description&quot;: &quot;name.keyword:lixiao*&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot;: 3,</span><br><span class="line">              &quot;description&quot;: &quot;max of:&quot;,</span><br><span class="line">              &quot;details&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 3,</span><br><span class="line">                  &quot;description&quot;: &quot;name:*long^3.0&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 3,</span><br><span class="line">                  &quot;description&quot;: &quot;name.keyword:*long^3.0&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot;: &quot;[myindex][3]&quot;,</span><br><span class="line">        &quot;_node&quot;: &quot;Q58S9K26RxqIiVA-UQNrgg&quot;,</span><br><span class="line">        &quot;_index&quot;: &quot;myindex&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;test&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;FLjrym0B5sayAd6PrrGN&quot;,</span><br><span class="line">        &quot;_score&quot;: 3,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;CHENLONG&quot;,</span><br><span class="line">          &quot;age&quot;: 15,</span><br><span class="line">          &quot;birthday&quot;: &quot;2011-02-14&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot;: &#123;</span><br><span class="line">          &quot;value&quot;: 3,</span><br><span class="line">          &quot;description&quot;: &quot;sum of:&quot;,</span><br><span class="line">          &quot;details&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot;: 3,</span><br><span class="line">              &quot;description&quot;: &quot;max of:&quot;,</span><br><span class="line">              &quot;details&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot;: 3,</span><br><span class="line">                  &quot;description&quot;: &quot;name:*long^3.0&quot;,</span><br><span class="line">                  &quot;details&quot;: []</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从改结果中我们其实可以了解到：</p>
<p>es 官方的分析内容表示官方其实已经将原有的TF-IDF(词频-逆文档频率)进行移除</p>
<p>现在默认使用的是BM25</p>
<p>并无法进行yml配置操作</p>
</blockquote>
<h3 id="8-5-1-解释一篇文档不匹配的原因"><a href="#8-5-1-解释一篇文档不匹配的原因" class="headerlink" title="8.5.1 解释一篇文档不匹配的原因"></a>8.5.1 解释一篇文档不匹配的原因</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;5&#x2F;_explain</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;xiaolong&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-6-使用查询再打分来减小评分操作影响"><a href="#8-6-使用查询再打分来减小评分操作影响" class="headerlink" title="8.6 使用查询再打分来减小评分操作影响"></a>8.6 使用查询再打分来减小评分操作影响</h2><h3 id="8-6-1-官方文档介绍-6-2版本"><a href="#8-6-1-官方文档介绍-6-2版本" class="headerlink" title="8.6.1 官方文档介绍 6.2版本"></a>8.6.1 官方文档介绍 6.2版本</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS82LjIvc2VhcmNoLXJlcXVlc3QtcmVzY29yZS5odG1s" title="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-request-rescore.html">https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-request-rescore.html<i class="fa fa-external-link"></i></span></p>
<ul>
<li>使用脚本评分</li>
<li>进行phrase 查询，搜索一段距离内的单词，使用很大的slop值</li>
</ul>
<p>使用es的再打分特性，计算返回结果集合的第二轮计算得分</p>
<h3 id="8-6-2-使用rescore-特性，对于匹配文档子集再评分"><a href="#8-6-2-使用rescore-特性，对于匹配文档子集再评分" class="headerlink" title="8.6.2 使用rescore 特性，对于匹配文档子集再评分"></a>8.6.2 使用rescore 特性，对于匹配文档子集再评分</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;lixiao* OR *long^3&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;rescore&quot;: &#123;</span><br><span class="line">    &quot;window_size&quot;: 20,</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">      &quot;rescore_query&quot;: &#123;</span><br><span class="line">        &quot;match_phrase&quot;:&#123;</span><br><span class="line">          &quot;name&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &quot;li&quot;,</span><br><span class="line">            &quot;slop&quot;: 5</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;query_weight&quot;: 0.8,</span><br><span class="line">      &quot;rescore_query_weight&quot;: 1.3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>query_weight：初始查询得分权重</p>
<p>rescore_query_weight：再评分查询得分权重</p>
<h2 id="8-7-function-score-来定制得分"><a href="#8-7-function-score-来定制得分" class="headerlink" title="8.7 function_score 来定制得分"></a>8.7 function_score 来定制得分</h2><h3 id="8-7-1-function-score-的基本结构"><a href="#8-7-1-function-score-的基本结构" class="headerlink" title="8.7.1 function_score 的基本结构"></a>8.7.1 function_score 的基本结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        </span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-7-2-weight-函数"><a href="#8-7-2-weight-函数" class="headerlink" title="8.7.2 weight 函数"></a>8.7.2 weight 函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_phrase&quot;: &#123;</span><br><span class="line">          &quot;name&quot;:&#123;</span><br><span class="line">            &quot;query&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">            &quot;slop&quot;: 5</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;weight&quot;: 3</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;term&quot;: &#123;</span><br><span class="line">              &quot;age&quot;: 5</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大致意识是将过滤出age =5 的文档将权重加3倍</p>
<h4 id="可以指定多个weight函数"><a href="#可以指定多个weight函数" class="headerlink" title="可以指定多个weight函数"></a>可以指定多个weight函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_phrase&quot;: &#123;</span><br><span class="line">          &quot;name&quot;:&#123;</span><br><span class="line">            &quot;query&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">            &quot;slop&quot;: 5</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;weight&quot;: 1.5,</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;term&quot;: &#123;</span><br><span class="line">              &quot;age&quot;: 5</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;weight&quot;: 1.8,</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;term&quot;: &#123;</span><br><span class="line">              &quot;test_field&quot;: &quot;zzzzzz&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-7-3-合并得分"><a href="#8-7-3-合并得分" class="headerlink" title="8.7.3 合并得分"></a>8.7.3 合并得分</h3><p>得分合并的两种因素：</p>
<ul>
<li>从每个单独的函数而来的分数如何合并，score_mode</li>
<li>从函数而来的得分如何同原始查询得分合并，boost_mode</li>
</ul>
<p>第一个因素称为score_mode 参数， 处理不同函数得分如何合并</p>
<p>可以设置的参数如下</p>
<ul>
<li>multiply</li>
<li>sum</li>
<li>avg</li>
<li>first</li>
<li>max</li>
<li>min</li>
</ul>
<p>默认是得分相乘 multiply</p>
<p>如果设置为first,则会优先选择第一个匹配的Boost因子</p>
<p>第二种得分合并设置，称为boost_mode。控制原始查询的得分和函数得分如何合并</p>
<p>可以设置的参数如下:</p>
<ul>
<li>sum</li>
<li>avg</li>
<li>max</li>
<li>min</li>
<li>replayce</li>
</ul>
<p>默认为初始查询得分和函数得分相乘</p>
<p>设置为replace 则原有的查询被函数得分替换</p>
<h3 id="8-7-4-field-value-factor-函数"><a href="#8-7-4-field-value-factor-函数" class="headerlink" title="8.7.4 field_value_factor 函数"></a>8.7.4 field_value_factor 函数</h3><p>该函数将包含数值的字段的名称作为输入，选择性的乘以常熟，然后进行数学运算</p>
<h3 id="8-7-5-在function-score-查询中使用field-value-factor"><a href="#8-7-5-在function-score-查询中使用field-value-factor" class="headerlink" title="8.7.5 在function_score 查询中使用field_value_factor"></a>8.7.5 在function_score 查询中使用field_value_factor</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;field_value_factor&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;age&quot;,</span><br><span class="line">            &quot;factor&quot;: 1.2, </span><br><span class="line">            &quot;modifier&quot;: &quot;ln&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>modifier 可选参数：</p>
<ul>
<li>none (默认)</li>
<li>log</li>
<li>log1p</li>
<li>log2p</li>
<li>ln1p</li>
<li>ln2p</li>
<li>square</li>
<li>sqrt</li>
<li>reciprocal</li>
<li>ln</li>
</ul>
<h2 id="8-8-painless脚本-5-0后go语言脚本支持已删除"><a href="#8-8-painless脚本-5-0后go语言脚本支持已删除" class="headerlink" title="8.8 painless脚本(5.0后go语言脚本支持已删除)"></a>8.8 painless脚本(5.0后go语言脚本支持已删除)</h2><p>使用一个脚本进行评分</p>
<p>5.0 之后已经将go语言等脚本移除，使用Lucene官方指定的脚本语言 painless 类js语言</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;script_score&quot;: &#123;</span><br><span class="line">            &quot;script&quot;: &#123;</span><br><span class="line">              &quot;lang&quot;: &quot;painless&quot;, </span><br><span class="line">              &quot;params&quot;: &#123;</span><br><span class="line">                &quot;mytest&quot;:555</span><br><span class="line">              &#125;, </span><br><span class="line">              &quot;source&quot;: &quot;&quot;&quot;</span><br><span class="line">                int total &#x3D; 0;</span><br><span class="line">                for (int i &#x3D; 0; i &lt; doc[&#39;age&#39;].length; ++i) &#123;</span><br><span class="line">                  total +&#x3D; doc[&#39;age&#39;][i] + params.mytest;</span><br><span class="line">                &#125;</span><br><span class="line">                return total;</span><br><span class="line">              &quot;&quot;&quot;</span><br><span class="line">              </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要引用params的值，需要使用params.xxx进行脚本的常量引用</p>
<h3 id="8-7-5-random-score-函数"><a href="#8-7-5-random-score-函数" class="headerlink" title="8.7.5 random_score 函数"></a>8.7.5 random_score 函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;lixiaolong&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;random_score&quot;: &#123;</span><br><span class="line">            &quot;seed&quot;: 1234,</span><br><span class="line">            &quot;field&quot;: &quot;age&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>It was possible to set a seed without setting a field, but this has been deprecated as this requires loading fielddata on the <code>_id</code> field which consumes a lot of memory.</p>
</blockquote>
<p>注意需要指定field 对于文档字段的排序</p>
<p>否则会报一个必要参数提示</p>
<h3 id="8-7-6-衰减函数"><a href="#8-7-6-衰减函数" class="headerlink" title="8.7.6 衰减函数"></a>8.7.6 衰减函数</h3><ul>
<li>linear</li>
<li>gauss</li>
<li>exp</li>
</ul>
<h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS82LjIvcXVlcnktZHNsLWZ1bmN0aW9uLXNjb3JlLXF1ZXJ5Lmh0bWwjZnVuY3Rpb24tZGVjYXk=" title="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/query-dsl-function-score-query.html#function-decay">https://www.elastic.co/guide/en/elasticsearch/reference/6.2/query-dsl-function-score-query.html#function-decay<i class="fa fa-external-link"></i></span></p>
<p>官方配置案例如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;function_score&quot;: &#123;</span><br><span class="line">            &quot;gauss&quot;: &#123;</span><br><span class="line">                &quot;date&quot;: &#123;</span><br><span class="line">                      &quot;origin&quot;: &quot;2013-09-17&quot;, </span><br><span class="line">                      &quot;scale&quot;: &quot;10d&quot;,</span><br><span class="line">                      &quot;offset&quot;: &quot;5d&quot;, </span><br><span class="line">                      &quot;decay&quot; : 0.5 </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h4><ul>
<li>origin：曲线原点，表示期望值。地理距离，日期或者数值型</li>
<li>offset：分数开始衰减的位置</li>
<li>scale 和 decay ：字段值为scale的时候，分数减少到指定的decay</li>
</ul>
<p>根据上面分析，从5天开始，到第10天的时候，衰减到原分数的0.5</p>
<h2 id="8-9-使用脚本排序"><a href="#8-9-使用脚本排序" class="headerlink" title="8.9 使用脚本排序"></a>8.9 使用脚本排序</h2><h1 id="9-Elasticsearch-REST-API-的学习使用"><a href="#9-Elasticsearch-REST-API-的学习使用" class="headerlink" title="9. Elasticsearch REST API 的学习使用"></a>9. Elasticsearch REST API 的学习使用</h1><h2 id="9-0-API官网"><a href="#9-0-API官网" class="headerlink" title="9.0 API官网"></a>9.0 API官网</h2><p>rest 低级 api：<span class="exturl" data-url="aHR0cHM6Ly9hcnRpZmFjdHMuZWxhc3RpYy5jby9qYXZhZG9jL29yZy9lbGFzdGljc2VhcmNoL2NsaWVudC9lbGFzdGljc2VhcmNoLXJlc3QtY2xpZW50LzYuMi40L29yZy9lbGFzdGljc2VhcmNoL2NsaWVudC9wYWNrYWdlLXN1bW1hcnkuaHRtbA==" title="https://artifacts.elastic.co/javadoc/org/elasticsearch/client/elasticsearch-rest-client/6.2.4/org/elasticsearch/client/package-summary.html">https://artifacts.elastic.co/javadoc/org/elasticsearch/client/elasticsearch-rest-client/6.2.4/org/elasticsearch/client/package-summary.html<i class="fa fa-external-link"></i></span></p>
<p>rest 高级 api：<span class="exturl" data-url="aHR0cHM6Ly9hcnRpZmFjdHMuZWxhc3RpYy5jby9qYXZhZG9jL29yZy9lbGFzdGljc2VhcmNoL2NsaWVudC9lbGFzdGljc2VhcmNoLXJlc3QtaGlnaC1sZXZlbC1jbGllbnQvNi4yLjQvaW5kZXguaHRtbA==" title="https://artifacts.elastic.co/javadoc/org/elasticsearch/client/elasticsearch-rest-high-level-client/6.2.4/index.html">https://artifacts.elastic.co/javadoc/org/elasticsearch/client/elasticsearch-rest-high-level-client/6.2.4/index.html<i class="fa fa-external-link"></i></span></p>
<h2 id="9-1-REST-低级-Api"><a href="#9-1-REST-低级-Api" class="headerlink" title="9.1 REST 低级 Api"></a>9.1 REST 低级 Api</h2><p>低级客户端的功能包括：</p>
<ul>
<li>最小依赖</li>
<li>跨所有可用节点进行负载平衡</li>
<li>发生节点故障并根据特定响应代码进行故障转移</li>
<li>失败的连接惩罚（是否重试失败的节点取决于失败的连续次数；失败尝试次数越多，客户端在再次尝试该相同节点之前将等待的时间越长）</li>
<li>持续的联系</li>
<li>跟踪记录请求和响应</li>
<li>可选的自动<span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL2NsaWVudC9qYXZhLXJlc3QvNi4yL3NuaWZmZXIuaHRtbA==" title="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.2/sniffer.html">发现群集节点<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="9-1-1-起步"><a href="#9-1-1-起步" class="headerlink" title="9.1.1 起步"></a>9.1.1 起步</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch-rest-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.2.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-1-2-初始化"><a href="#9-1-2-初始化" class="headerlink" title="9.1.2 初始化"></a>9.1.2 初始化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以通过相应的RestClientBuilder类（通过RestClient＃builder（HttpHost ...）静态方法创建）来构建RestClient实例。 唯一必需的参数是客户端将与之通信的一个或多个主机，以HttpHost的实例形式提供，如下所示：</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        RestClientBuilder restClientBuilder &#x3D; RestClient.builder(</span><br><span class="line">                new HttpHost(&quot;192.168.92.180&quot;, 9200, &quot;http&quot;));</span><br><span class="line">        &#x2F;&#x2F; 设置最大超时时间</span><br><span class="line">        restClientBuilder.setMaxRetryTimeoutMillis(10000);</span><br><span class="line">        &#x2F;&#x2F; 监听失效</span><br><span class="line">        restClientBuilder.setFailureListener(new RestClient.FailureListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(HttpHost host) &#123;</span><br><span class="line">                System.err.println(&quot;连接失效&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; 设置连接的回调内容</span><br><span class="line">        restClientBuilder.setRequestConfigCallback(new RestClientBuilder.RequestConfigCallback() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder builder) &#123;</span><br><span class="line">                System.err.println(&quot;sss&quot;);</span><br><span class="line">                System.err.println(&quot;sss&quot;);</span><br><span class="line">                System.err.println(&quot;sssf&quot;);</span><br><span class="line">                &#x2F;&#x2F; socket套接字连接超时时间</span><br><span class="line">                return builder.setSocketTimeout(10000);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; 设置回调的代理客户端</span><br><span class="line">        restClientBuilder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) &#123;</span><br><span class="line">                return httpClientBuilder.setProxy(new HttpHost(&quot;proxy&quot;, 9000, &quot;http&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        RestClient restClient &#x3D; restClientBuilder.build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>RestClient 是线程安全的</li>
<li>可以再建造器里面设置连接最大超时时间，默认为30秒</li>
<li>可以设置代理客户端</li>
<li>可以设置socket套接字超时时间</li>
</ul>
<h3 id="9-1-3-执行请求"><a href="#9-1-3-执行请求" class="headerlink" title="9.1.3 执行请求"></a>9.1.3 执行请求</h3><p>一旦<code>RestClient</code>被创建，请求可以通过调用可用的一个被发送<code>performRequest</code>或<code>performRequestAsync</code>方法的变体。这些<code>performRequest</code>方法是同步的，并且<code>Response</code>直接返回，这意味着客户端将阻塞并等待返回响应。该<code>performRequestAsync</code>变种返回<code>void</code>并接受额外的 <code>ResponseListener</code>作为参数来代替，这意味着它们是异步执行的。请求完成或失败时，将通知提供的侦听器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        RestClientBuilder restClientBuilder &#x3D; RestClient.builder(</span><br><span class="line">                new HttpHost(&quot;192.168.92.180&quot;, 9200, &quot;http&quot;));</span><br><span class="line">        RestClient restClient &#x3D; restClientBuilder.build();</span><br><span class="line">        &#x2F;&#x2F; 1. 发送一个普通的get请求</span><br><span class="line">&#x2F;&#x2F;        Map&lt;String, String&gt; params &#x3D; Collections.singletonMap(&quot;pretty&quot;, &quot;true&quot;);</span><br><span class="line">&#x2F;&#x2F;        Response response &#x3D; restClient.performRequest(&quot;GET&quot;, &quot;&#x2F;&quot;, params);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 2. 发送一个带参数的请求，并创建一个文档</span><br><span class="line">        Map&lt;Object, Object&gt; singletonMap &#x3D; Collections.emptyMap();</span><br><span class="line">        &#x2F;&#x2F; 请求url参数</span><br><span class="line">        Map&lt;String, String&gt; params &#x3D; Collections.singletonMap(&quot;pretty&quot;, &quot;true&quot;);</span><br><span class="line">        String jsonString &#x3D; &quot;&#123;&quot; +</span><br><span class="line">                &quot;\&quot;user\&quot;:\&quot;kimchy\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;postDate\&quot;:\&quot;2013-01-30\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;message\&quot;:\&quot;trying out Elasticsearch\&quot;&quot; +</span><br><span class="line">                &quot;&#125;&quot;;</span><br><span class="line">        &#x2F;&#x2F; 构建http请求体</span><br><span class="line">        HttpEntity entity &#x3D; new NStringEntity(jsonString, ContentType.APPLICATION_JSON);</span><br><span class="line">        &#x2F;&#x2F; 创建一个文档</span><br><span class="line">&#x2F;&#x2F;        Response response &#x3D; restClient.performRequest(&quot;PUT&quot;, &quot;&#x2F;posts&#x2F;doc&#x2F;1&quot;, params, entity);</span><br><span class="line">        &#x2F;&#x2F; 3. 创建一个_search 请求， 并且指定缓冲区的大小</span><br><span class="line">        HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory heapBufferedResponseConsumerFactory</span><br><span class="line">                &#x3D; new HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory(30 * 1024 * 1024);</span><br><span class="line">        &#x2F;&#x2F; 创建一个响应监听器</span><br><span class="line">        ResponseListener responseListener &#x3D; new ResponseListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onSuccess(Response response) &#123;</span><br><span class="line">                System.err.println(&quot;响应成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Exception e) &#123;</span><br><span class="line">                System.err.println(&quot;响应失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        restClient.performRequestAsync(&quot;GET&quot;, &quot;&#x2F;posts&#x2F;_search&quot;, params, null, heapBufferedResponseConsumerFactory, responseListener);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：为HttpEntity指定的ContentType很重要，因为它将用于设置Content-Type标头，以便Elasticsearch可以正确解析内容。</p>
</blockquote>
<h3 id="9-1-4-接受响应体的处理"><a href="#9-1-4-接受响应体的处理" class="headerlink" title="9.1.4 接受响应体的处理"></a>9.1.4 接受响应体的处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Response response &#x3D; restClient.performRequest(&quot;PUT&quot;, &quot;&#x2F;posts&#x2F;doc&#x2F;1&quot;, params, entity);</span><br><span class="line">RequestLine requestLine &#x3D; response.getRequestLine();</span><br><span class="line">HttpHost host &#x3D; response.getHost();</span><br><span class="line">int statusCode &#x3D; response.getStatusLine().getStatusCode();</span><br><span class="line">Header[] headers &#x3D; response.getHeaders();</span><br><span class="line">String responseBody &#x3D; EntityUtils.toString(response.getEntity());</span><br><span class="line"></span><br><span class="line">System.err.println(requestLine.getUri());</span><br><span class="line">System.err.println(responseBody);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于返回404状态代码的HEAD请求，不会引发ResponseException，因为这是预期的HEAD响应，它仅表示未找到资源。 除非ignore参数包含404，否则所有其他HTTP方法（例如GET）都将引发404响应的ResponseException。ignore是一个特殊的客户端参数，不会发送到Elasticsearch，并且包含逗号分隔的错误状态代码列表。 它允许控制是否将某些错误状态代码视为预期的响应而不是异常。 例如，这对于使用get api很有用，因为当缺少文档时它可以返回404，在这种情况下，响应主体将不包含错误，而是通常的get api响应，只是没有找到未找到的文档。</p>
</blockquote>
<h2 id="9-2-REST-高级-API"><a href="#9-2-REST-高级-API" class="headerlink" title="9.2 REST 高级 API"></a>9.2 REST 高级 API</h2><h3 id="9-2-1-机器翻译介绍"><a href="#9-2-1-机器翻译介绍" class="headerlink" title="9.2.1 机器翻译介绍"></a>9.2.1 机器翻译介绍</h3><p>Java高级REST客户端在Java高级REST客户端之上工作。它的主要目的是公开API特定的方法，这些方法接受请求对象作为参数并返回响应对象，以便请求编组和响应解编组由客户端本身处理。</p>
<p>每个API可以同步或异步调用。同步方法返回一个响应对象，而名称以<code>async</code>后缀结尾的异步方法则需要一个侦听器参数，一旦收到响应或错误，该参数将被通知（在低级客户端管理的线程池上）。</p>
<p>Java高级REST客户端取决于Elasticsearch核心项目。它接受与相同的请求参数，<code>TransportClient</code>并返回相同的响应对象。</p>
<h3 id="9-2-2-兼容性"><a href="#9-2-2-兼容性" class="headerlink" title="9.2.2 兼容性"></a>9.2.2 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWMvZWxhc3RpY3NlYXJjaC9lZGl0LzYuMi9kb2NzL2phdmEtcmVzdC9oaWdoLWxldmVsL2dldHRpbmctc3RhcnRlZC5hc2NpaWRvYw==" title="https://github.com/elastic/elasticsearch/edit/6.2/docs/java-rest/high-level/getting-started.asciidoc">兼容性<i class="fa fa-external-link"></i></span></h3><p>Java高级REST客户端需要Java 1.8，并依赖于Elasticsearch核心项目。客户端版本与为其开发客户端的Elasticsearch版本相同。它接受与相同的请求参数，<code>TransportClient</code> 并返回相同的响应对象。 如果需要将应用程序从其迁移到新的REST客户端，请参阅《<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.2/java-rest-high-level-migration.html" target="_blank" rel="noopener"><em>迁移指南》</em></a><code>TransportClient</code>。</p>
<p>确保高级客户端能够与在相同主要版本和较大或相等的次要版本上运行的任何Elasticsearch节点进行通信。它不需要与与其通信的Elasticsearch节点处于相同的次要版本，因为它是前向兼容的，这意味着它支持与比其开发的版本更高的Elasticsearch通信。</p>
<p>6.0客户端可以与任何6.x Elasticsearch节点进行通信，而6.1客户端可以与6.1、6.2和任何更高版本的6.x版本进行通信，但是与先前的Elasticsearch节点进行通信时可能会出现不兼容问题如果6.1客户端支持6.0节点不知道的某些API的新请求正文字段，则版本介于6.1和6.0之间。</p>
<p>建议将Elasticsearch群集升级到新的主要版本时升级High Level Client，因为REST API的重大更改可能会导致意外结果，具体取决于请求所命中的节点，并且新添加的API仅受支持。客户端的较新版本。一旦集群中的所有节点都已升级到新的主要版本，客户端应始终最后更新。</p>
<h3 id="9-2-3-起步"><a href="#9-2-3-起步" class="headerlink" title="9.2.3 起步"></a>9.2.3 起步</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.2.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>org.elasticsearch.client:elasticsearch-rest-client</li>
<li>org.elasticsearch:elasticsearch</li>
</ul>
<h3 id="9-2-4-创建一个rest-连接"><a href="#9-2-4-创建一个rest-连接" class="headerlink" title="9.2.4 创建一个rest 连接"></a>9.2.4 创建一个rest 连接</h3><h3 id="9-2-5-【6-2-4】版本-支持的相关API-（重点）"><a href="#9-2-5-【6-2-4】版本-支持的相关API-（重点）" class="headerlink" title="9.2.5 【6.2.4】版本 支持的相关API （重点）"></a>9.2.5 【6.2.4】版本 支持的相关API （重点）</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 创建索引</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void createIndex(RestHighLevelClient client) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 1. 创建索引请求，并且指定索引名称</span><br><span class="line">        CreateIndexRequest indexRequest &#x3D; new CreateIndexRequest(&quot;twitter&quot;);</span><br><span class="line">        &#x2F;&#x2F; 2. 设置索引的 settings 注意和es原生方式不同需要加index.</span><br><span class="line">        indexRequest.settings(Settings.builder()</span><br><span class="line">            .put(&quot;index.number_of_shards&quot;, 3)</span><br><span class="line">            .put(&quot;index.number_of_shards&quot;, 2));</span><br><span class="line">        &#x2F;&#x2F; 3. 设置mappings 映射。由于5.0升级需要加上 header请求类型</span><br><span class="line">        indexRequest.mapping(&quot;tweet&quot;,</span><br><span class="line">                &quot;  &#123;\n&quot; +</span><br><span class="line">                        &quot;    \&quot;tweet\&quot;: &#123;\n&quot; +</span><br><span class="line">                        &quot;      \&quot;properties\&quot;: &#123;\n&quot; +</span><br><span class="line">                        &quot;        \&quot;message\&quot;: &#123;\n&quot; +</span><br><span class="line">                        &quot;          \&quot;type\&quot;: \&quot;text\&quot;\n&quot; +</span><br><span class="line">                        &quot;        &#125;\n&quot; +</span><br><span class="line">                        &quot;      &#125;\n&quot; +</span><br><span class="line">                        &quot;    &#125;\n&quot; +</span><br><span class="line">                        &quot;  &#125;&quot;,</span><br><span class="line">                XContentType.JSON);</span><br><span class="line">        &#x2F;&#x2F; 4. 指定索引的别名</span><br><span class="line">        indexRequest.alias(</span><br><span class="line">                new Alias(&quot;twitter_alias&quot;)</span><br><span class="line">        );</span><br><span class="line">        &#x2F;&#x2F; 5. 可选参数提供</span><br><span class="line">        &#x2F;&#x2F; TODO: 这两个参数作用目前不太明确</span><br><span class="line">        indexRequest.timeout(TimeValue.timeValueMinutes(2));</span><br><span class="line">        indexRequest.timeout(&quot;2m&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 5.1连接到主节点的超时时间</span><br><span class="line">        indexRequest.masterNodeTimeout(TimeValue.timeValueMinutes(1));</span><br><span class="line">        indexRequest.masterNodeTimeout(&quot;1m&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 5.2 在创建索引API返回响应之前，要等待的活动碎片副本数</span><br><span class="line">        indexRequest.waitForActiveShards(2);</span><br><span class="line">        indexRequest.waitForActiveShards(ActiveShardCount.DEFAULT);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 6. 同步执行的方式</span><br><span class="line">        CreateIndexResponse createIndexResponse &#x3D; client.indices().create(indexRequest);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 7. 异步执行方式</span><br><span class="line">        &#x2F;&#x2F; 由于异步方式不能立刻返回结果，所以需要监听器去监听异步请求结果</span><br><span class="line">&#x2F;&#x2F;        ActionListener&lt;CreateIndexResponse&gt; listener &#x3D; new ActionListener&lt;CreateIndexResponse&gt;() &#123;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void onResponse(CreateIndexResponse createIndexResponse) &#123;</span><br><span class="line">&#x2F;&#x2F;                System.err.println(&quot;返回结果&quot;);</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void onFailure(Exception e) &#123;</span><br><span class="line">&#x2F;&#x2F;                System.err.println(&quot;出现异常&quot;);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;        &#125;;</span><br><span class="line">&#x2F;&#x2F;        client.indices().createAsync(indexRequest, listener);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 8. 处理返回结果</span><br><span class="line">        boolean acknowledged &#x3D; createIndexResponse.isAcknowledged();</span><br><span class="line">        boolean shardsAcknowledged &#x3D; createIndexResponse.isShardsAcknowledged();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 删除索引</span><br><span class="line">     * @param client</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void deleteIndex(RestHighLevelClient client) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建删除索引的对象</span><br><span class="line">        DeleteIndexRequest deleteIndexRequest &#x3D; new DeleteIndexRequest(&quot;twitter&quot;);</span><br><span class="line">        &#x2F;&#x2F; 2. TODO: 这两个参数作用目前不太明确</span><br><span class="line">        deleteIndexRequest.timeout(TimeValue.timeValueMinutes(2));</span><br><span class="line">        deleteIndexRequest.timeout(&quot;2m&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 2.1 连接到主节点的超时时间</span><br><span class="line">        deleteIndexRequest.masterNodeTimeout(TimeValue.timeValueMinutes(1));</span><br><span class="line">        deleteIndexRequest.masterNodeTimeout(&quot;1m&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 3. 设置IndicesOptions可以控制如何解决不可用的索引以及如何扩展通配符表达式</span><br><span class="line">        &#x2F;&#x2F; 3.1 IndicesOptions.lenientExpandOpen()</span><br><span class="line">        &#x2F;&#x2F; 索引选项将忽略不可用的索引，仅将通配符扩展为打开的索引，并不允许通配符表达式解析任何索引（不返回错误）</span><br><span class="line">        deleteIndexRequest.indicesOptions(IndicesOptions.lenientExpandOpen());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 4.1 同步方式</span><br><span class="line">        DeleteIndexResponse delete &#x3D; client.indices().delete(deleteIndexRequest);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 4.2 异步方式</span><br><span class="line">&#x2F;&#x2F;        client.indices().deleteAsync(deleteIndexRequest, new ActionListener&lt;DeleteIndexResponse&gt;()&#123;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void onResponse(DeleteIndexResponse deleteIndexResponse) &#123;</span><br><span class="line">&#x2F;&#x2F;                System.err.println(&quot;返回结果&quot;);</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void onFailure(Exception e) &#123;</span><br><span class="line">&#x2F;&#x2F;                System.err.println(&quot;出现异常&quot;);</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;        &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 5. 如果删除的时候没有索引会发生什么？</span><br><span class="line">        &#x2F;&#x2F; 请根据如下代码进行处理</span><br><span class="line">&#x2F;&#x2F;        try &#123;</span><br><span class="line">&#x2F;&#x2F;            DeleteIndexRequest request &#x3D; new DeleteIndexRequest(&quot;does_not_exist&quot;);</span><br><span class="line">&#x2F;&#x2F;            client.indices().delete(request);</span><br><span class="line">&#x2F;&#x2F;        &#125; catch (ElasticsearchException exception) &#123;</span><br><span class="line">&#x2F;&#x2F;            if (exception.status() &#x3D;&#x3D; RestStatus.NOT_FOUND) &#123;</span><br><span class="line">&#x2F;&#x2F;              &#x2F;&#x2F;处理异常</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="开放索引"><a href="#开放索引" class="headerlink" title="开放索引"></a>开放索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 开放索引</span><br><span class="line">     * @param client</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static void openIndex(RestHighLevelClient client) throws Exception&#123;</span><br><span class="line">        &#x2F;&#x2F; 1. 创建一个开放索引的请求</span><br><span class="line">        OpenIndexRequest openIndexRequest &#x3D; new OpenIndexRequest(&quot;myindex&quot;);</span><br><span class="line">        &#x2F;&#x2F; 2. 等待所有节点确认索引的超时被打开</span><br><span class="line">        openIndexRequest.timeout(TimeValue.timeValueMinutes(2));</span><br><span class="line">        &#x2F;&#x2F; 3. 设置请求开放索引处理策略</span><br><span class="line">        &#x2F;&#x2F; 要求每个指定索引都存在的索引选项，仅将通配符扩展为打开的索引，并且不允许通配符表达式解析任何索引（不返回错误）。</span><br><span class="line">        openIndexRequest.indicesOptions(IndicesOptions.strictExpandOpen());</span><br><span class="line">        &#x2F;&#x2F; 4. 设置开放索引API返回响应之前要等待的活动分片副本数</span><br><span class="line">        openIndexRequest.waitForActiveShards(2);</span><br><span class="line">        &#x2F;&#x2F; 4.1 ActiveShardCount 存在多个选下那个</span><br><span class="line">        openIndexRequest.waitForActiveShards(ActiveShardCount.ONE);</span><br><span class="line">        &#x2F;&#x2F; 5. 同步方式</span><br><span class="line">        OpenIndexResponse openIndexResponse &#x3D; client.indices().open(openIndexRequest);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 6. 异步方式</span><br><span class="line">        &#x2F;&#x2F; 由于异步方式不能立刻返回结果，所以需要监听器去监听异步请求结果</span><br><span class="line">&#x2F;&#x2F;        ActionListener&lt;OpenIndexResponse&gt; listener &#x3D; new ActionListener&lt;OpenIndexResponse&gt;() &#123;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void onResponse(CreateIndexResponse createIndexResponse) &#123;</span><br><span class="line">&#x2F;&#x2F;                System.err.println(&quot;返回结果&quot;);</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void onFailure(Exception e) &#123;</span><br><span class="line">&#x2F;&#x2F;                System.err.println(&quot;出现异常&quot;);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;        &#125;;</span><br><span class="line">&#x2F;&#x2F;        client.indices().openAsync(openIndexRequest, listener);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 7. 分片是否正常响应</span><br><span class="line">        openIndexResponse.isShardsAcknowledged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="关闭索引"><a href="#关闭索引" class="headerlink" title="关闭索引"></a>关闭索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * 关闭索引</span><br><span class="line">   * @param client</span><br><span class="line">   *&#x2F;</span><br><span class="line">  private static void closeIndex(RestHighLevelClient client) throws Exception&#123;</span><br><span class="line">      &#x2F;&#x2F; 1. 创建一个关闭索引的对象</span><br><span class="line">      CloseIndexRequest closeIndexRequest &#x3D; new CloseIndexRequest(&quot;myindex&quot;);</span><br><span class="line">      &#x2F;&#x2F; 2. 基本设置： 大同小异，不多啰嗦了</span><br><span class="line">      closeIndexRequest.timeout(TimeValue.timeValueMinutes(2));</span><br><span class="line">      closeIndexRequest.timeout(&quot;2m&quot;);</span><br><span class="line">      closeIndexRequest.masterNodeTimeout(TimeValue.timeValueMinutes(1));</span><br><span class="line">      closeIndexRequest.masterNodeTimeout(&quot;1m&quot;);</span><br><span class="line">      closeIndexRequest.indicesOptions(IndicesOptions.lenientExpandOpen());</span><br><span class="line">      &#x2F;&#x2F; 3. 同步方式</span><br><span class="line">      CloseIndexResponse closeIndexResponse &#x3D; client.indices().close(closeIndexRequest);</span><br><span class="line">      &#x2F;&#x2F; 4. 异步方式</span><br><span class="line">      client.indices().closeAsync(closeIndexRequest, new ActionListener&lt;CloseIndexResponse&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void onResponse(CloseIndexResponse closeIndexResponse) &#123;</span><br><span class="line">              &#x2F;&#x2F; ....</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onFailure(Exception e) &#123;</span><br><span class="line">              &#x2F;&#x2F; ....</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      boolean acknowledged &#x3D; closeIndexResponse.isAcknowledged();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-6-索引本身的API"><a href="#9-2-6-索引本身的API" class="headerlink" title="9.2.6 索引本身的API"></a>9.2.6 索引本身的API</h3><h4 id="直接根据索引创建一个文档需要如下参数"><a href="#直接根据索引创建一个文档需要如下参数" class="headerlink" title="直接根据索引创建一个文档需要如下参数"></a>直接根据索引创建一个文档需要如下参数</h4><ol>
<li>索引名称</li>
<li>索引类型</li>
<li>文档id</li>
<li>文档数据：提供一个json数据</li>
</ol>
<h4 id="提供文档来源的多种方式"><a href="#提供文档来源的多种方式" class="headerlink" title="提供文档来源的多种方式"></a>提供文档来源的多种方式</h4><p>可以使用不同的方式来创建文档源数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; jsonMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">jsonMap.put(&quot;user&quot;, &quot;kimchy&quot;);</span><br><span class="line">jsonMap.put(&quot;postData&quot;, new Date());</span><br><span class="line">jsonMap.put(&quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br><span class="line">&#x2F;&#x2F; 5. 使用map创建</span><br><span class="line">indexRequest.source(indexRequest, jsonMap);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 6. es 官方开发了 XContentBuilder 来构建_source 的请求json</span><br><span class="line">XContentBuilder xContentBuilder &#x3D; XContentFactory.jsonBuilder();</span><br><span class="line">xContentBuilder.startObject();</span><br><span class="line">&#123;</span><br><span class="line">    xContentBuilder.field(&quot;user&quot;, &quot;kimchy&quot;);</span><br><span class="line">    xContentBuilder.field(&quot;postDate&quot;, new Date());</span><br><span class="line">    xContentBuilder.field(&quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br><span class="line">&#125;</span><br><span class="line">xContentBuilder.endObject();</span><br><span class="line">IndexRequest source &#x3D; indexRequest.source(xContentBuilder);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 7. 也可以在_soucre 的时候直接传入键值对数据</span><br><span class="line">indexRequest.source(&quot;user&quot;, &quot;kimchy&quot;,</span><br><span class="line">                    &quot;postDate&quot;, new Date(),</span><br><span class="line">                    &quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><p>设置路由</p>
<p>设置parent 值</p>
<p>设置分片处理的超时时间</p>
<p>将策略刷新为WriteRequest.RefreshPolicy实例</p>
<p>设置初始版本号</p>
<p>设置版本类型?</p>
<p>提供类型形式修改操作类型，以及以字符串形式提供的操作类型：可以创建或更新（默认）</p>
<p>索引文档之前要执行的管道流的名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 8. 可选参数</span><br><span class="line">&#x2F;&#x2F; 8.1 设置路由</span><br><span class="line">indexRequest.routing(&quot;routing&quot;);</span><br><span class="line">&#x2F;&#x2F; 8.2 设置父索引</span><br><span class="line">indexRequest.parent(&quot;parent&quot;);</span><br><span class="line">&#x2F;&#x2F; 8.3 设置分片处理的超时时间</span><br><span class="line">indexRequest.timeout(TimeValue.timeValueSeconds(1));</span><br><span class="line">indexRequest.timeout(&quot;1s&quot;);</span><br><span class="line">&#x2F;&#x2F; 8.4 设置刷新策略</span><br><span class="line">indexRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);</span><br><span class="line">indexRequest.setRefreshPolicy(&quot;wait_for&quot;);</span><br><span class="line">&#x2F;&#x2F; 8.5 设置版本号</span><br><span class="line">indexRequest.version(2);</span><br><span class="line">&#x2F;&#x2F; 8.6 设置版本类型</span><br><span class="line">indexRequest.versionType(VersionType.EXTERNAL);</span><br><span class="line">&#x2F;&#x2F; 8.7 提供类型形式修改操作类型，以及以字符串形式提供的操作类型：可以创建或更新（默认）</span><br><span class="line">indexRequest.opType(DocWriteRequest.OpType.CREATE);</span><br><span class="line">indexRequest.opType(&quot;create&quot;);</span><br><span class="line">&#x2F;&#x2F; 8.8 索引文档之前要执行的管道流的名称</span><br><span class="line">indexRequest.setPipeline(&quot;pipeline&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="获取响应内容"><a href="#获取响应内容" class="headerlink" title="获取响应内容"></a>获取响应内容</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 11. 处理响应体内容</span><br><span class="line">indexResponse.getIndex();</span><br><span class="line">indexResponse.getId();</span><br><span class="line">indexResponse.getType();</span><br><span class="line">indexResponse.getVersion();</span><br><span class="line">if (indexResponse.getResult() &#x3D;&#x3D; DocWriteResponse.Result.CREATED) &#123;</span><br><span class="line">    &#x2F;&#x2F; 如果是创建</span><br><span class="line"></span><br><span class="line">&#125; else if (indexResponse.getResult() &#x3D;&#x3D; DocWriteResponse.Result.UPDATED) &#123;</span><br><span class="line">    &#x2F;&#x2F; 如果是修改</span><br><span class="line">&#125;</span><br><span class="line">ReplicationResponse.ShardInfo shardInfo &#x3D; indexResponse.getShardInfo();</span><br><span class="line">if (shardInfo.getTotal() !&#x3D; shardInfo.getSuccessful()) &#123;</span><br><span class="line">    &#x2F;&#x2F; 如果存在失败分片（即返回部分信息）如何处理</span><br><span class="line">&#125;</span><br><span class="line">if (shardInfo.getFailed() &gt; 0) &#123;</span><br><span class="line">    for (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取失败原因</span><br><span class="line">        String reason &#x3D; failure.reason();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="根据上述内容整合"><a href="#根据上述内容整合" class="headerlink" title="根据上述内容整合"></a>根据上述内容整合</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 根据索引创建一个索引文档</span><br><span class="line">     * @param client</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void createIndexDocumentByIndex(RestHighLevelClient client) throws Exception&#123;</span><br><span class="line">        &#x2F;&#x2F; 1. 创建 索引请求</span><br><span class="line">        IndexRequest indexRequest &#x3D; new IndexRequest(</span><br><span class="line">                &quot;posts&quot;,</span><br><span class="line">                &quot;doc&quot;,</span><br><span class="line">                &quot;1&quot;);</span><br><span class="line">        &#x2F;&#x2F; 2. _source 元数据</span><br><span class="line">        String jsonString &#x3D; &quot;&#123;&quot; +</span><br><span class="line">                &quot;\&quot;user\&quot;:\&quot;kimchy\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;postDate\&quot;:\&quot;2013-01-30\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;message\&quot;:\&quot;trying out Elasticsearch\&quot;&quot; +</span><br><span class="line">                &quot;&#125;&quot;;</span><br><span class="line">        &#x2F;&#x2F; 3. 设置元数据</span><br><span class="line">        indexRequest.source(indexRequest, jsonString);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 4. 提供另外一种方式</span><br><span class="line">        Map&lt;String, Object&gt; jsonMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        jsonMap.put(&quot;user&quot;, &quot;kimchy&quot;);</span><br><span class="line">        jsonMap.put(&quot;postData&quot;, new Date());</span><br><span class="line">        jsonMap.put(&quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br><span class="line">        &#x2F;&#x2F; 5. 使用map创建</span><br><span class="line">        indexRequest.source(indexRequest, jsonMap);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 6. es 官方开发了 XContentBuilder 来构建_source 的请求json</span><br><span class="line">        XContentBuilder xContentBuilder &#x3D; XContentFactory.jsonBuilder();</span><br><span class="line">        xContentBuilder.startObject();</span><br><span class="line">        &#123;</span><br><span class="line">            xContentBuilder.field(&quot;user&quot;, &quot;kimchy&quot;);</span><br><span class="line">            xContentBuilder.field(&quot;postDate&quot;, new Date());</span><br><span class="line">            xContentBuilder.field(&quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        xContentBuilder.endObject();</span><br><span class="line">        IndexRequest source &#x3D; indexRequest.source(xContentBuilder);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 7. 也可以在_soucre 的时候直接传入键值对数据</span><br><span class="line">        indexRequest.source(&quot;user&quot;, &quot;kimchy&quot;,</span><br><span class="line">                        &quot;postDate&quot;, new Date(),</span><br><span class="line">                        &quot;message&quot;, &quot;trying out Elasticsearch&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 8. 可选参数</span><br><span class="line">        &#x2F;&#x2F; 8.1 设置路由</span><br><span class="line">        indexRequest.routing(&quot;routing&quot;);</span><br><span class="line">        &#x2F;&#x2F; 8.2 设置父索引</span><br><span class="line">        indexRequest.parent(&quot;parent&quot;);</span><br><span class="line">        &#x2F;&#x2F; 8.3 设置分片处理的超时时间</span><br><span class="line">        indexRequest.timeout(TimeValue.timeValueSeconds(1));</span><br><span class="line">        indexRequest.timeout(&quot;1s&quot;);</span><br><span class="line">        &#x2F;&#x2F; 8.4 设置刷新策略</span><br><span class="line">        indexRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);</span><br><span class="line">        indexRequest.setRefreshPolicy(&quot;wait_for&quot;);</span><br><span class="line">        &#x2F;&#x2F; 8.5 设置版本号</span><br><span class="line">        indexRequest.version(2);</span><br><span class="line">        &#x2F;&#x2F; 8.6 设置版本类型</span><br><span class="line">        indexRequest.versionType(VersionType.EXTERNAL);</span><br><span class="line">        &#x2F;&#x2F; 8.7 提供类型形式修改操作类型，以及以字符串形式提供的操作类型：可以创建或更新（默认）</span><br><span class="line">        indexRequest.opType(DocWriteRequest.OpType.CREATE);</span><br><span class="line">        indexRequest.opType(&quot;create&quot;);</span><br><span class="line">        &#x2F;&#x2F; 8.8 索引文档之前要执行的管道流的名称</span><br><span class="line">        indexRequest.setPipeline(&quot;pipeline&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 9. 同步方式</span><br><span class="line">        IndexResponse indexResponse &#x3D; client.index(indexRequest);</span><br><span class="line">        &#x2F;&#x2F; 10. 异步方式</span><br><span class="line">        client.indexAsync(indexRequest, new ActionListener&lt;IndexResponse&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(IndexResponse indexResponse) &#123;</span><br><span class="line">                &#x2F;&#x2F; ...</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Exception e) &#123;</span><br><span class="line">                &#x2F;&#x2F; ....</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 11. 处理响应体内容</span><br><span class="line">        indexResponse.getIndex();</span><br><span class="line">        indexResponse.getId();</span><br><span class="line">        indexResponse.getType();</span><br><span class="line">        indexResponse.getVersion();</span><br><span class="line">        if (indexResponse.getResult() &#x3D;&#x3D; DocWriteResponse.Result.CREATED) &#123;</span><br><span class="line">            &#x2F;&#x2F; 如果是创建</span><br><span class="line"></span><br><span class="line">        &#125; else if (indexResponse.getResult() &#x3D;&#x3D; DocWriteResponse.Result.UPDATED) &#123;</span><br><span class="line">            &#x2F;&#x2F; 如果是修改</span><br><span class="line">        &#125;</span><br><span class="line">        ReplicationResponse.ShardInfo shardInfo &#x3D; indexResponse.getShardInfo();</span><br><span class="line">        if (shardInfo.getTotal() !&#x3D; shardInfo.getSuccessful()) &#123;</span><br><span class="line">            &#x2F;&#x2F; 如果存在失败分片（即返回部分信息）如何处理</span><br><span class="line">        &#125;</span><br><span class="line">        if (shardInfo.getFailed() &gt; 0) &#123;</span><br><span class="line">            for (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) &#123;</span><br><span class="line">                &#x2F;&#x2F; 获取失败原因</span><br><span class="line">                String reason &#x3D; failure.reason();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-Elasticsearch-JAVA-API-的学习使用"><a href="#10-Elasticsearch-JAVA-API-的学习使用" class="headerlink" title="10. Elasticsearch JAVA API 的学习使用"></a>10. Elasticsearch JAVA API 的学习使用</h1><h2 id="10-1-起步："><a href="#10-1-起步：" class="headerlink" title="10.1 起步："></a>10.1 起步：</h2><h3 id="10-1-1-Maven-依赖"><a href="#10-1-1-Maven-依赖" class="headerlink" title="10.1.1 Maven 依赖"></a>10.1.1 Maven 依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;transport&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.2.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h1 id="11-Es-painless-脚本插件使用（Elasticsearch-script-plugin）"><a href="#11-Es-painless-脚本插件使用（Elasticsearch-script-plugin）" class="headerlink" title="11. Es painless 脚本插件使用（Elasticsearch script plugin）"></a>11. Es painless 脚本插件使用（Elasticsearch script plugin）</h1><p>如果需要使用原生java语言实现自定义评分，需要实现官方提供的一个scriptEngine接口，官方在git上面给出了一个案例</p>
<h2 id="11-1-前置条件：windows安装gradle"><a href="#11-1-前置条件：windows安装gradle" class="headerlink" title="11.1 前置条件：windows安装gradle"></a>11.1 前置条件：windows安装gradle</h2><p>官方推荐用gradle 来构建插件的Jar包，为了怕出现麻烦，直接按照官方给的要求来，这里先列出一下gradle的基本安装步骤</p>
<h3 id="11-1-1-官方下载地址"><a href="#11-1-1-官方下载地址" class="headerlink" title="11.1.1 官方下载地址"></a>11.1.1 官方下载地址</h3><p><span class="exturl" data-url="aHR0cHM6Ly9zZXJ2aWNlcy5ncmFkbGUub3JnL2Rpc3RyaWJ1dGlvbnMv" title="https://services.gradle.org/distributions/">https://services.gradle.org/distributions/<i class="fa fa-external-link"></i></span></p>
<p>下载 <strong>gradle-5.6.3-all.zip</strong> 包，注意别下错了</p>
<h3 id="11-1-2-将gradle放入合适位置，将gradle加入path环境变量"><a href="#11-1-2-将gradle放入合适位置，将gradle加入path环境变量" class="headerlink" title="11.1.2 将gradle放入合适位置，将gradle加入path环境变量"></a>11.1.2 将gradle放入合适位置，将gradle加入path环境变量</h3><h3 id="11-1-3-配置阿里云的镜像"><a href="#11-1-3-配置阿里云的镜像" class="headerlink" title="11.1.3 配置阿里云的镜像"></a>11.1.3 配置阿里云的镜像</h3><h1 id="N-kibana-学习es的所有内容"><a href="#N-kibana-学习es的所有内容" class="headerlink" title="N kibana 学习es的所有内容"></a>N kibana 学习es的所有内容</h1><h2 id="2019-10-14"><a href="#2019-10-14" class="headerlink" title="2019.10.14"></a>2019.10.14</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT &#x2F;lib&#x2F;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  &quot;settings&quot;:&#123;</span><br><span class="line"></span><br><span class="line">  &quot;index&quot;:&#123;</span><br><span class="line">  </span><br><span class="line">    &quot;number_of_shards&quot;: 5,</span><br><span class="line">    </span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET _all&#x2F;_settings</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;user&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot; :  &quot;wang&quot;,</span><br><span class="line">    &quot;last_name&quot; :   &quot;laji&quot;,</span><br><span class="line">    &quot;age&quot; :         333,</span><br><span class="line">    &quot;about&quot; :       &quot;I hide to collect rock albums&quot;,</span><br><span class="line">    &quot;interests&quot;:  [ &quot;basket&quot; ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET &#x2F;+get-toge*,-get-together&#x2F;_search</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?from&#x3D;2&amp;size&#x3D;2</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search?sort&#x3D;age:_id&amp;_source&#x3D;first_name,age</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?q&#x3D;first_name:ne</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;from&quot;: 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;*_name&quot;, &quot;a*&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;includes&quot;: [&quot;*_name&quot;, &quot;age&quot;],</span><br><span class="line">    &quot;excludes&quot;: [&quot;first_name&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    &quot;_score&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;_source&quot;: [&quot;*_name&quot;, &quot;age&quot;],</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;:&quot;desc&quot;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &quot;Jane&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;about&quot;: &quot;hide&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ], </span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;wang&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search?q&#x3D;wang</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;default_field&quot;: &quot;first_name&quot;,</span><br><span class="line">      &quot;query&quot;: &quot;first_name:wang OR first_name:jane AND age:[0 TO  999]&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;_id&quot;: 1</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: [</span><br><span class="line">        &quot;i&quot;,</span><br><span class="line">        &quot;hide&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;Jane wang&quot;,</span><br><span class="line">        &quot;operator&quot;: &quot;or&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;phrase_prefix&quot;,</span><br><span class="line">        &quot;query&quot;: &quot;hide&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;to rock&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase_prefix&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;wa&quot;,</span><br><span class="line">        &quot;max_expansions&quot;: 5</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;wang smith&quot;,</span><br><span class="line">        &quot;fields&quot;: [&quot;first_name&quot;, &quot;last_name&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match_phrase&quot;:  &#123;</span><br><span class="line">            &quot;about&quot;: &#123;</span><br><span class="line">              &quot;query&quot;: &quot;i to&quot;,</span><br><span class="line">              &quot;slop&quot;: 1</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;first_name&quot;: &#123;</span><br><span class="line">              &quot;value&quot;: &quot;wang&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;query_string&quot;: &#123;</span><br><span class="line">            &quot;default_field&quot;: &quot;age&quot;,</span><br><span class="line">            &quot;query&quot;: &quot;first_name:jane&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;minimum_should_match&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">  &quot;age&quot;: 5,</span><br><span class="line">  &quot;birthday&quot;: &quot;2019-05-04&quot;,</span><br><span class="line">  &quot;test_field&quot;: &quot;zzzzzz&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: &quot;li&quot;,</span><br><span class="line">        &quot;lte&quot;: &quot;o&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;Li&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;wildcard&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;lix?ao*&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;exists&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;name&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;missing&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;test_field&quot;,</span><br><span class="line">          &quot;existence&quot;: true,</span><br><span class="line">          &quot;null_value&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;query_string&quot;: &#123;</span><br><span class="line">            &quot;default_field&quot;: &quot;name&quot;,</span><br><span class="line">            &quot;query&quot;: &quot;che*&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST &#x2F;mymyindex&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="2019-10-15"><a href="#2019-10-15" class="headerlink" title="2019.10.15"></a>2019.10.15</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT &#x2F;lib&#x2F;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  &quot;settings&quot;:&#123;</span><br><span class="line"></span><br><span class="line">  &quot;index&quot;:&#123;</span><br><span class="line">  </span><br><span class="line">    &quot;number_of_shards&quot;: 5,</span><br><span class="line">    </span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET _all&#x2F;_settings</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;user&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot; :  &quot;wang&quot;,</span><br><span class="line">    &quot;last_name&quot; :   &quot;laji&quot;,</span><br><span class="line">    &quot;age&quot; :         333,</span><br><span class="line">    &quot;about&quot; :       &quot;I hide to collect rock albums&quot;,</span><br><span class="line">    &quot;interests&quot;:  [ &quot;basket&quot; ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET &#x2F;+get-toge*,-get-together&#x2F;_search</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?from&#x3D;2&amp;size&#x3D;2</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search?sort&#x3D;age:_id&amp;_source&#x3D;first_name,age</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search?q&#x3D;first_name:ne</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;from&quot;: 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;*_name&quot;, &quot;a*&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;includes&quot;: [&quot;*_name&quot;, &quot;age&quot;],</span><br><span class="line">    &quot;excludes&quot;: [&quot;first_name&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    &quot;_score&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;_source&quot;: [&quot;*_name&quot;, &quot;age&quot;],</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;:&quot;desc&quot;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &quot;Jane&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;about&quot;: &quot;hide&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ], </span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;first_name&quot;: &quot;wang&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search?q&#x3D;wang</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;default_field&quot;: &quot;first_name&quot;,</span><br><span class="line">      &quot;query&quot;: &quot;first_name:wang OR first_name:jane AND age:[0 TO  999]&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;_id&quot;: 1</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: [</span><br><span class="line">        &quot;i&quot;,</span><br><span class="line">        &quot;hide&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;Jane wang&quot;,</span><br><span class="line">        &quot;operator&quot;: &quot;or&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;phrase_prefix&quot;,</span><br><span class="line">        &quot;query&quot;: &quot;hide&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;to rock&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase_prefix&quot;: &#123;</span><br><span class="line">      &quot;first_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;wa&quot;,</span><br><span class="line">        &quot;max_expansions&quot;: 5</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;wang smith&quot;,</span><br><span class="line">        &quot;fields&quot;: [&quot;first_name&quot;, &quot;last_name&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match_phrase&quot;:  &#123;</span><br><span class="line">            &quot;about&quot;: &#123;</span><br><span class="line">              &quot;query&quot;: &quot;i to&quot;,</span><br><span class="line">              &quot;slop&quot;: 1</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;first_name&quot;: &#123;</span><br><span class="line">              &quot;value&quot;: &quot;wang&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;query_string&quot;: &#123;</span><br><span class="line">            &quot;default_field&quot;: &quot;age&quot;,</span><br><span class="line">            &quot;query&quot;: &quot;first_name:jane&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;minimum_should_match&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;myindex&#x2F;test&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;lixiaolong&quot;,</span><br><span class="line">  &quot;age&quot;: 5,</span><br><span class="line">  &quot;birthday&quot;: &quot;2019-05-04&quot;,</span><br><span class="line">  &quot;test_field&quot;: &quot;zzzzzz&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: &quot;li&quot;,</span><br><span class="line">        &quot;lte&quot;: &quot;o&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;Li&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;wildcard&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;lix?ao*&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;exists&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;name&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;missing&quot;: &#123;</span><br><span class="line">          &quot;field&quot;: &quot;test_field&quot;,</span><br><span class="line">          &quot;existence&quot;: true,</span><br><span class="line">          &quot;null_value&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;myindex&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;query_string&quot;: &#123;</span><br><span class="line">            &quot;default_field&quot;: &quot;name&quot;,</span><br><span class="line">            &quot;query&quot;: &quot;che*&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DELETE &#x2F;mymyindex&#x2F; </span><br><span class="line"></span><br><span class="line">PUT &#x2F;mymyindex</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;std_folded&quot;: &#123; </span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [</span><br><span class="line">            &quot;lowercase&quot;,</span><br><span class="line">            &quot;asciifolding&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_doc&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;my_text&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;std_folded&quot; </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;mymyindex&#x2F;_mapping</span><br><span class="line"></span><br><span class="line">POST &#x2F;mymyindex&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;whitespace&quot;, </span><br><span class="line">  &quot;filter&quot;: [</span><br><span class="line">    &quot;reverse&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog\u0027s bone.&quot;,</span><br><span class="line">  &quot;field&quot;: &quot;my_text&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;get-together&#x2F;group&#x2F;3q8nz20BXNiyabSjyH-c&#x2F;_termvectors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT &#x2F;my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;analysis&quot;: &#123;</span><br><span class="line">            &quot;char_filter&quot;: &#123;</span><br><span class="line">                &quot;&amp;_to_and&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:       &quot;mapping&quot;,</span><br><span class="line">                    &quot;mappings&quot;: [ &quot;&amp; &#x3D;&gt; and &quot;]</span><br><span class="line">            &#125;&#125;,</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;my_stopwords&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:       &quot;stop&quot;,</span><br><span class="line">                    &quot;stopwords&quot;: [ &quot;the&quot;, &quot;a&quot; ]</span><br><span class="line">            &#125;&#125;,</span><br><span class="line">            &quot;analyzer&quot;: &#123;</span><br><span class="line">                &quot;my_analyzer&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:         &quot;custom&quot;,</span><br><span class="line">                    &quot;char_filter&quot;:  [ &quot;html_strip&quot;, &quot;&amp;_to_and&quot; ],</span><br><span class="line">                    &quot;tokenizer&quot;:    &quot;standard&quot;,</span><br><span class="line">                    &quot;filter&quot;:       [ &quot;lowercase&quot;, &quot;my_stopwords&quot; ]</span><br><span class="line">            &#125;&#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> GET &#x2F;my_index&#x2F;_mapping</span><br><span class="line"> GET &#x2F;mymyindex&#x2F;_mapping</span><br><span class="line"> </span><br><span class="line">POST &#x2F;lib&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;I have, photos&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST &#x2F;lib&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;letter&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;lowercase&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;whitespace&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;whitespace&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;uax_url_email&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;Email me at john.smith@global-international.com&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT &#x2F;asciifold_example</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">        &quot;analysis&quot; : &#123;</span><br><span class="line">            &quot;analyzer&quot; : &#123;</span><br><span class="line">                &quot;default&quot; : &#123;</span><br><span class="line">                    &quot;tokenizer&quot; : &quot;standard&quot;,</span><br><span class="line">                    &quot;filter&quot; : [&quot;standard&quot;, &quot;asciifolding&quot;]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DELETE &#x2F;kstem-filter</span><br><span class="line"></span><br><span class="line">PUT &#x2F;kstem-filter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;myfilter&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;kstem&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, </span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;defulat&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;lowercase&quot;, &quot;myfilter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET kstem-filter&#x2F;_settings</span><br><span class="line">POST &#x2F;kstem-filter&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;standard&quot;, </span><br><span class="line">  &quot;text&quot;: &quot;Austrian&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;n-gram-filter&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;ilikebeijingjingbei&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot; synonyms&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;Email me at john.smith@global-international.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>LINUX鸟哥的私房菜</title>
    <url>/2020/07/26/unix1/</url>
    <content><![CDATA[<h1 id="LINUX鸟哥的私房菜笔记："><a href="#LINUX鸟哥的私房菜笔记：" class="headerlink" title="LINUX鸟哥的私房菜笔记："></a>LINUX鸟哥的私房菜笔记：</h1><h2 id="第一章：计算机概论"><a href="#第一章：计算机概论" class="headerlink" title="第一章：计算机概论"></a>第一章：计算机概论</h2><ul>
<li>CPU<ul>
<li>基本结构<ul>
<li>控制单元</li>
<li>存储单元</li>
<li>内存</li>
<li>输入单元</li>
<li>输出单元</li>
</ul>
</li>
<li>内存</li>
<li>指令集<ul>
<li>精简指令集 RISC<ul>
<li>SPARC</li>
<li>PowerPC</li>
<li>Cell</li>
</ul>
</li>
<li>复杂指令集 CISC<ul>
<li>AMD</li>
<li>Inter</li>
<li>VIA</li>
<li>X86 的起源</li>
</ul>
</li>
</ul>
</li>
<li>Bit： CPU一次读取的最大量</li>
</ul>
</li>
<li>人体和电脑设备的比喻</li>
<li>电脑分类<ul>
<li>超级计算机</li>
<li>大型计算机</li>
<li>迷你计算机</li>
<li>工作站</li>
</ul>
</li>
<li>电脑常用的计量单位<ul>
<li>Mbit</li>
<li>Ghz</li>
</ul>
</li>
<li>CPU的工作频率：外频与倍频<ul>
<li>外频：CPU与外部组件数据传输的速度</li>
<li>倍频：CPU内部加速工作性能的倍数</li>
<li>超频</li>
</ul>
</li>
<li>内存<ul>
<li>多通道设计</li>
<li>DDR</li>
<li>DRAM 和 SRAM</li>
<li>二级缓存：CPU内部的内存缓存</li>
<li>ROM<ul>
<li>BIOS</li>
<li>现在已写入到闪存或者硬件中</li>
<li>固件</li>
</ul>
</li>
</ul>
</li>
<li>显卡<ul>
<li>主要的连接接口<ul>
<li>D-Sub</li>
<li>DVI</li>
<li>HDMI</li>
<li>DisplayPort</li>
</ul>
</li>
</ul>
</li>
<li>硬盘：<ul>
<li>组成：<ul>
<li>碟片</li>
<li>磁头</li>
<li>主轴马达</li>
<li>机器手臂</li>
</ul>
</li>
<li>最小单元：扇区</li>
<li>传输接口：<ul>
<li>SATA</li>
<li>USB</li>
<li>SAS</li>
</ul>
</li>
<li>固态硬盘</li>
</ul>
</li>
<li>使用须知</li>
<li>扩展接口</li>
<li>主板<ul>
<li>设备IO地址和IRQ中断请求</li>
<li>连接外置设备</li>
</ul>
</li>
<li>主机电源</li>
<li>数据的表示方式<ul>
<li>数字系统</li>
<li>字符编码系统</li>
<li>操作系统<ul>
<li>概念<ul>
<li>只管理硬件资源</li>
<li>内核参考硬件写成</li>
<li>应用程序参考操作系统</li>
</ul>
</li>
<li>内核功能<ul>
<li>系统调用</li>
<li>进程管理</li>
<li>内存管理</li>
<li>文件系统管理</li>
<li>设备驱动</li>
</ul>
</li>
<li>注意点：</li>
</ul>
</li>
<li>重点回顾<ul>
<li>计算机定义</li>
<li>计算机五大单元</li>
<li>CPU的作用</li>
<li>CPU频率，外频和倍频，以及超频</li>
<li>新CPU的主要变化</li>
<li>CPU处理数据</li>
<li>内存分类<ul>
<li>动态随机存取内存</li>
<li>静态随机存取内存</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="第二章：Linux起源"><a href="#第二章：Linux起源" class="headerlink" title="第二章：Linux起源"></a>第二章：Linux起源</h2><ul>
<li>Unix的发展背景</li>
<li>GNU计划，开放源代码</li>
<li>Minix 的发展</li>
<li>Linux的雏形<ul>
<li>Minix不满足要求</li>
<li>学到的东西<ul>
<li>基础知识和技能</li>
<li>一点成功之后，勇于挑战</li>
<li>把“玩具”发扬光大</li>
</ul>
</li>
</ul>
</li>
<li>虚拟团队对于LInux的改进</li>
<li>Linux版本<ul>
<li>主次版本为奇数：开发中</li>
<li>主次版本为偶数：稳定版本</li>
<li>主线版本：长期维护<ul>
<li>判断是否为长期版本的办法<ul>
<li><code>uname -r</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Linux发行版</li>
<li>Linux应用<ul>
<li>云端应用</li>
<li>虚拟化</li>
</ul>
</li>
<li>从头学习Linux<ul>
<li>选择一本好用的工具书<ul>
<li>推荐的网络书： NETMAN</li>
</ul>
</li>
<li>发生问题怎么处理</li>
<li>FAQ：<ul>
<li>/usr/share/doc</li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy50bGRwLm9yZw==" title="http://www.tldp.org">http://www.tldp.org<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li>必要掌握点：<ul>
<li>计算机概论与硬件相关知识</li>
<li>从Linux安装和命令学起</li>
<li>Linux操作系统的基本技能</li>
<li>学会VI编辑器</li>
<li>Shell与脚本学习</li>
<li>一定要会软件管理<ul>
<li>Tarball</li>
<li>RPM</li>
<li>DPKG</li>
<li>YUM</li>
<li>APT</li>
</ul>
</li>
<li>网络基础学习</li>
<li>网站搭建</li>
</ul>
</li>
<li>网络的书推荐<ul>
<li><span class="exturl" data-url="aHR0cDovL0h0dHA6Ly9saW51eC52YmlyZC5vcmc=" title="http://Http://linux.vbird.org">Http://linux.vbird.org<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li>实践大于一切</li>
<li>习惯：<ul>
<li>有系统的设计文件目录</li>
<li>养成做记录的习惯</li>
<li>作为用户人迁就机器，作为开发，机器迁就人</li>
<li>会“偷”，“偷”了会改，改了会变，变则通</li>
</ul>
</li>
<li>兴趣</li>
<li>成就感</li>
<li>建立兴趣</li>
<li>协助回答问题</li>
<li>参与讨论</li>
<li>不同环境，解决办法很多，只要行得通就是好办法</li>
</ul>
</li>
</ul>
<h3 id="简答题："><a href="#简答题：" class="headerlink" title="简答题："></a>简答题：</h3><ol>
<li>你再主机上安装了一块网卡，但是开机之后，系统却无法使用，网卡是好的，可能哪里出问题，如何解决？</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;www.nowcoder.com&#x2F;questionTerminal&#x2F;1dc7f18e85e04269b1a355b32692c8ba?orderByHotValue&#x3D;1&amp;page&#x3D;1&amp;onlyReference&#x3D;false</span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line">网卡是否启动，是否配置了开机自启。可以修改 &#x2F;etc&#x2F;sysconf&#x2F;network-sripts&#x2F;ifcfg-ethX，其中X是网卡号，</span><br><span class="line">DEVICE&#x3D;eth0                              #网卡对应的设备别名</span><br><span class="line">BOOTPROTO&#x3D;static                    #网卡获得ip地址的方式（默认为dhcp，表示自动获取）</span><br><span class="line">HWADDR&#x3D;00:07:E9:05:E8:B4    #网卡MAC地址（物理地址）</span><br><span class="line">IPADDR&#x3D;192.168.100.100          #IP地址</span><br><span class="line">NETMASK&#x3D;255.255.255.0          #子网掩码 </span><br><span class="line">ONBOOT&#x3D;yes                              #系统启动时是否激活此设备</span><br></pre></td></tr></table></figure>

<p>2.一个操作系统至少可以完整控制整个硬件，请问操作系统要控制哪些单元</p>
<blockquote>
<p>（1）运算单元，用来执行当前指令所规定的算术运算和逻辑运算，具有定点和浮点运算功能；（2）控制单元，指挥微处理器执行指令操作的功能； （3）寄存器组，用来暂存操作数，中间结果和处理结果，它构成了微处理器内部的小型存贮空间，其容量大小影响到微处理器的效率； （4）总线接口单元，提供微处理器与周围其它硬件的接口，有效地将微处理器的地址、数据和控制等信息通过总线和各相关部件接通； （5）输入/<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29tL3M/d2Q96L6T5Ye65o6l5Y+jJnRuPVNFX1BjWmhpZGFvbndoY19uZ3BhZ21qeiZyc3ZfZGw9Z2hfcGNfemhpZGFv" title="https://www.baidu.com/s?wd=输出接口&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">输出接口<i class="fa fa-external-link"></i></span>单元。</p>
</blockquote>
<ol>
<li>window上的游戏能不能到Linux去玩</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不能，操作系统不一样</span><br></pre></td></tr></table></figure>

<ol>
<li>Unix 是谁写出来的？ GNU 计划是谁发起的？</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GNU 是 GNU is Not Unix 的简写，是个无穷循环！ 另外，这个计划是由自由软件基金会 (Free Software Foundation, FSF) 所支</span><br><span class="line">持的！ 两者都是由 Stallman 先生所发起的！</span><br></pre></td></tr></table></figure>

<ol>
<li>何谓多人 ( Multi-user ) 多任务 ( Multitask )？</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Multiuser 指的是 Linux 允许多人同时连上主机之外，每个用户皆有其各人的使用环境，并且可以同时使用系统的资源！</span><br><span class="line">Multitask 指的是多任务环境，在 Linux 系统下， CPU 与其他例如网络资源可以同时进行多项工作， Linux 最大的特色之一</span><br><span class="line">即在于其多任务时，资源分配较为平均</span><br></pre></td></tr></table></figure>

<ol>
<li>Linux 本身仅是一个核心与相关的核心工具而已，不过，他已经可以驱动所有的硬件， 所以，可以算是一 个很阳春的操作系统了。经过其他应用程序的开发之后，被整合成为 Linux distribitions。请问众多的 distributions 之间，有何异同？</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">相同：(1)同样使用 http:&#x2F;&#x2F;www.kernel.org 所释出的核心； (2)支持同样的标准，如 FHS、LSB 等； (3)使用几乎相同的自由软</span><br><span class="line">件 (例如 GNU 里面的 gcc&#x2F;glibc&#x2F;vi&#x2F;apache&#x2F;bind&#x2F;sendmail... )； (4)几乎相同的操作接口 (例如均使用 bash&#x2F;KDE&#x2F;GNOME 等等)。</span><br><span class="line">不同：使用的 kernel 与各软件的版本可能会不同；各开发商加入的应用工具不同，使用的套件管理模式不同(dpkg 与 RPM)</span><br></pre></td></tr></table></figure>

<ol>
<li>什么是 POSIX ?为何说 Linux 使用 POSIX 对于发展有很好的影响？</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POSIX 是一种标准规范，主要针对在 Unix 操作系统上面跑的程序来进行规范。 若你的操作系统符合 POSIX ，则符合 POSIX</span><br><span class="line">的程序就可以在你的操作系统上面运作。 Linux 由于支持 POSIX ，因此很多 Unix 上的程序可以直接在 Linux 上运作， 因</span><br><span class="line">此程序的移植相当简易！也让大家容易转换平台，提升 Linux 的使用率。</span><br></pre></td></tr></table></figure>

<h2 id="第三章：主观规划与磁盘分区"><a href="#第三章：主观规划与磁盘分区" class="headerlink" title="第三章：主观规划与磁盘分区"></a>第三章：主观规划与磁盘分区</h2><ul>
<li>Linux和硬件的搭配<ul>
<li>认识计算机硬件<ul>
<li>注意硬件的性价比</li>
<li>注意电费</li>
</ul>
</li>
<li>选择Linux搭配的主机<ul>
<li>CPU<ul>
<li>i3最低要求</li>
</ul>
</li>
<li>内存<ul>
<li>越大越好</li>
</ul>
</li>
<li>硬盘：<ul>
<li>通常：20G</li>
<li>高级：磁盘阵列</li>
</ul>
</li>
<li>显卡<ul>
<li>32M</li>
</ul>
</li>
<li>网卡：<ul>
<li>网络IO频繁要选好网卡</li>
</ul>
</li>
</ul>
</li>
<li>各硬件设备在Linux的文件名</li>
</ul>
</li>
<li>磁盘分区<ul>
<li>磁盘连接方式和设备文件名的关系<ul>
<li>正常：/dev/sd[a-p]</li>
<li>虚拟化环境：/dev/vd[a-p]</li>
<li>决定关系：Linux的检测磁盘顺序</li>
</ul>
</li>
</ul>
</li>
<li>分区几点：<ul>
<li>MBR</li>
<li><h2 id="四个主分区和一个扩展分区"><a href="#四个主分区和一个扩展分区" class="headerlink" title="四个主分区和一个扩展分区"></a>四个主分区和一个扩展分区</h2></li>
<li>MBR 与 GPT 磁盘分区表<ul>
<li>MBR<ul>
<li>512字节大小<ul>
<li>主引导记录：引导程序的地方，446字节</li>
<li>分区表：记录整个硬盘分区状态，64字节<ul>
<li>最多只能有四组记录</li>
<li>记录该区开始和结束柱面号码</li>
<li>注意点<ul>
<li>所谓分区仅仅是对于64字节的分区表设置</li>
<li>磁盘默认只能写入四组分区信息</li>
<li>主要分区和扩展分区</li>
<li>最小单位为柱面</li>
</ul>
</li>
<li>写入磁盘必须参考分区表才能操作</li>
</ul>
</li>
</ul>
</li>
<li>数据安全性</li>
<li>系统性能</li>
</ul>
</li>
<li>GPT<ul>
<li>出现原因<ul>
<li>MBR无法操作2.2T以上磁盘</li>
<li>MBR只有一个区块，破会后无法恢复</li>
<li>MBR存放引导程序只有446字节，无法存储较多程序代码</li>
</ul>
</li>
<li>分区<ul>
<li>34个LBA区块记录分区</li>
<li>LBA0（MBR兼容区块）<ul>
<li>存放引导信息</li>
</ul>
</li>
<li>LBA1 （GPT表头记录）<ul>
<li>分区表的本身位置和大小</li>
<li><strong>后面34个备份GPT分区</strong></li>
</ul>
</li>
<li>LBA2-33(实际分区信息记录)<ul>
<li>4 * 32 =128 组</li>
<li>【2^64 * 512 = 2^63 * 1K字节 = 2^33 * TB = 8ZB】 1ZB = 2^30TB</li>
</ul>
</li>
<li>现在的内核使用特殊方式没有所谓的主分区，扩展分区和逻辑分区</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>启动程序BIOS和UEFI启动检测程序<ul>
<li>BIOS<ul>
<li>系统启动的第一个程序</li>
<li>直接写在硬件上的一个程序</li>
<li>启动过程：<ul>
<li>BIOS:启动固件，认识第一个可启动设备</li>
<li>MBR：第一个可启动的设备第一个扇区的主引导记录块，内部引导代码</li>
<li>启动引导程序（boot loader）：可读内核文件的软件</li>
<li>内核文件，开始启动系统</li>
</ul>
</li>
<li>Boot Loader 作用<ul>
<li>提供不同选项，多重引导</li>
<li>加载内核文件</li>
<li>启动管理功能转交给其他引导程序<ul>
<li><strong>启动引导程序可以装在分个分区的启动扇区</strong></li>
</ul>
</li>
</ul>
</li>
<li>多重引导<ul>
<li>每个分区都有自己启动扇区</li>
<li>第一以及第二扇区</li>
<li>实际可启动的内核文件放到各个分区</li>
<li>功能：认识自己分区的可启动内核文件，其他引导程序</li>
<li>直接或者间接管理权给另一个启动引导管理程序</li>
</ul>
</li>
</ul>
</li>
<li>UEFI 搭配GPT启动流程<ul>
<li>某些时刻可能需要关闭UEFI 的 secure boot 功能</li>
<li>双系统清务必先安装windows</li>
</ul>
</li>
</ul>
</li>
<li>Linux 安装模式分区选择（极其重要）<ul>
<li>目录树结构<ul>
<li>根目录</li>
</ul>
</li>
<li>文件系统与目录树挂载<ul>
<li>什么是挂载？<ul>
<li>利用目录成为进入点，磁盘分区放置到目录下面</li>
<li>进入该目录就可以读取该分区</li>
</ul>
</li>
<li>判断文件在哪个分区<ul>
<li>哪个“进入点”先被查到，被查到的就是进入点</li>
</ul>
</li>
</ul>
</li>
<li>规划磁盘分区<ul>
<li>自定义安装<ul>
<li>初学： “/” 以及 “swap” 分区即可</li>
<li>预备一个备用的剩余磁盘容量</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>安装Linux之前的规划<ul>
<li>选择适当发行版<ul>
<li>镜像站</li>
</ul>
</li>
</ul>
</li>
<li>主机服务和硬件的关系<ul>
<li>window和Linux共存</li>
<li>NAT</li>
<li>SAMBA</li>
<li>Mail</li>
<li>Web</li>
<li>DHCP</li>
<li>FTP</li>
</ul>
</li>
<li>主机硬盘规划<ul>
<li>主机硬件出问题，文件能否安全保存</li>
<li>最简单分区办法<ul>
<li>如上的新人办法</li>
<li>很不靠谱</li>
</ul>
</li>
<li>稍微麻烦一些<ul>
<li>比较符合读写容量大而且读写频繁的场景分区办法<ul>
<li>/boot</li>
<li>/</li>
<li>/home</li>
<li>/var</li>
<li>swap</li>
</ul>
</li>
<li>注意服务种类</li>
</ul>
</li>
</ul>
</li>
<li>两个案例<ul>
<li>家用小型Linux服务器，IP共享和文件共享中心</li>
<li>Linux的PC集群</li>
</ul>
</li>
</ul>
<p>第三章：安装CenterOs7</p>
<p>本章基本全靠实操，务必多操作几遍</p>
<ul>
<li>练习规划<ul>
<li>配置<ul>
<li>CPU： I5以上</li>
<li>内存：最少提供1.2G以上内存</li>
<li>硬盘：40GB Virtio 接口</li>
<li>网卡：Bridge 桥接对外网卡</li>
<li>显卡：60MB左右显存</li>
<li>其他<ul>
<li>键盘</li>
<li>鼠标</li>
<li>屏幕</li>
</ul>
</li>
</ul>
</li>
<li>磁盘分区参考<ul>
<li>强制使用GPT模式</li>
<li>BIOS boot 2MB</li>
<li>/boot</li>
<li>/</li>
<li>/home</li>
<li>swap</li>
</ul>
</li>
<li>启动引导程序</li>
<li>选择软件</li>
<li>检查</li>
</ul>
</li>
<li>开始安装CenterOs7<ul>
<li>步骤：<ul>
<li>调整BIOS</li>
<li>选择安装模式</li>
<li>选择语言</li>
<li>软件选择</li>
<li>磁盘分区</li>
<li>启动引导程序</li>
<li>安装后的首次设置</li>
</ul>
</li>
<li>调整BIOS和虚拟机创建流程<ul>
<li><code>dd if=centeros7.iso of=/dev/sdc</code></li>
<li>光盘错误处理<ul>
<li>硬件不支持</li>
<li>光盘跳盘</li>
<li>光盘有问题</li>
</ul>
</li>
</ul>
</li>
<li>安装模式启动<ul>
<li>正常安装</li>
<li>测试后再安装</li>
<li>除错模式<ul>
<li>图形化界面安装</li>
<li>恢复系统</li>
<li>运行内存测试程序</li>
<li>本地磁盘启动，不使用光盘</li>
</ul>
</li>
</ul>
</li>
<li>如何GPT强制执行（关键）<ul>
<li>正常安装CENTERos 7</li>
<li>按下Tab键</li>
<li>输入参数，自行百度</li>
</ul>
</li>
</ul>
</li>
<li>安装过程<ul>
<li>不记录，请看书</li>
</ul>
</li>
<li>其他功能：<ul>
<li>RAM测试，安装笔记本的内核参数<ul>
<li>内存压力测试：memtest86</li>
</ul>
</li>
<li>安装笔记本电脑的参数<ul>
<li>去掉笔记本的一些配置影响<ul>
<li>正常安装centeros 7</li>
<li><code>nofb apm=off acpi=off pci=noacpi</code></li>
<li>nofb 取消缓存检测</li>
</ul>
</li>
</ul>
</li>
<li>多重引导安装和管理（可选）</li>
<li>安装规划</li>
</ul>
</li>
</ul>
<h2 id="第四章：首次登陆和在线求助"><a href="#第四章：首次登陆和在线求助" class="headerlink" title="第四章：首次登陆和在线求助"></a>第四章：首次登陆和在线求助</h2><ul>
<li>基础命令操作<ul>
<li>date : 时间<ul>
<li><code>date +%y/%m/%d</code></li>
<li><code>date +%H/%m</code></li>
</ul>
</li>
<li>cal：日历<ul>
<li>cal 年份</li>
<li>cal 月份 年份</li>
<li>cal 13 2015 错误结果</li>
</ul>
</li>
<li>bc：计算器</li>
</ul>
</li>
<li>重要热键<ul>
<li>Tab</li>
<li>Ctrl-c</li>
<li>Ctrl-d<ul>
<li>相当于 exit</li>
</ul>
</li>
<li>CenterOS7 补全功能有可能补全命令<ul>
<li>Bash-completion</li>
</ul>
</li>
<li>Shift + PageUp 或者 PageDown<ul>
<li>相当于翻页</li>
</ul>
</li>
</ul>
</li>
<li>Linux 在线求助 man page 和 info page<ul>
<li>g 开头命令</li>
<li>man 的组成<ul>
<li>name</li>
<li>synopsis</li>
<li>description</li>
<li>options</li>
<li>command</li>
<li>files</li>
<li>see also</li>
<li>example</li>
</ul>
</li>
<li>看帮助文档技巧<ul>
<li>查看Name部分</li>
<li>详细看下Description</li>
<li>如果熟悉命令，直接看options</li>
<li>see also 查看相关使用</li>
<li>列举有关的file 部分</li>
</ul>
</li>
<li>查看命令<ul>
<li>空格：下翻</li>
<li>page down 下翻</li>
<li>page up 向上</li>
<li>Home 第一页</li>
<li>end 最后一页</li>
<li>/string 向下查找</li>
<li>?string 向上查找</li>
<li>n,N 继续查询</li>
<li>q 结束</li>
</ul>
</li>
<li>man的位置<ul>
<li><code>/usr/share/man</code></li>
<li><code>/etc/man_db.conf</code></li>
</ul>
</li>
<li>info<ul>
<li>网页显示</li>
<li>默认位置<ul>
<li>/usr/share/info</li>
</ul>
</li>
<li>内容<ul>
<li>File</li>
<li>Node</li>
<li>Next</li>
<li>Up</li>
<li>Prev</li>
</ul>
</li>
</ul>
</li>
<li>其他有用的文件<ul>
<li>/usr/share/doc<ul>
<li>例子：<ul>
<li>/usr/share/doc/grub2-tools-20.2</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>nano<ul>
<li>简单文本编译器</li>
</ul>
</li>
<li>正确的关机办法<ul>
<li>正确使用<ul>
<li>shutdown<ul>
<li>/sbin/shutdown [-krhc] [时间] [警告信息]</li>
</ul>
</li>
<li>reboot</li>
</ul>
</li>
<li>常用<ul>
<li>shutdown</li>
</ul>
</li>
<li>重启<ul>
<li>rebbot</li>
<li>halt poweroff</li>
</ul>
</li>
<li>查看状况<ul>
<li>who</li>
</ul>
</li>
<li>同步写入磁盘<ul>
<li>sync</li>
</ul>
</li>
<li>systemctl 重要命令</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><ol>
<li>终端信息如何来的，/etc/issue 文件当中</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果</span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br><span class="line">2.</span><br></pre></td></tr></table></figure>

<p>\r 代表内核</p>
<p>\m 硬件等级</p>
<ol>
<li>man issue 查找文件的个数</li>
</ol>
<h2 id="第五章：文件权限和目录"><a href="#第五章：文件权限和目录" class="headerlink" title="第五章：文件权限和目录"></a>第五章：文件权限和目录</h2><ul>
<li>linux 用户记录和用户身份的文件<ul>
<li>记录 <code>/etc/passwd</code></li>
<li><code>/etc/shadow</code></li>
</ul>
</li>
<li>linux 文件属性<ul>
<li>drwx——- 5 root root 4096 May 29 16:08<ul>
<li>第一个栏目代表文件类型和权限</li>
<li>第一个字符代表是如下<ul>
<li>文件</li>
<li>目录</li>
<li>连接</li>
<li>b 设备文件</li>
<li>c 串行端口设备</li>
</ul>
</li>
<li>接下来设置<ul>
<li>r 读取</li>
<li>w 写</li>
<li>x 运行</li>
</ul>
</li>
<li>第一组是自己的权限</li>
<li>第二组是同用户组的权限</li>
<li>第三组为别人的权限</li>
</ul>
</li>
<li>第二个大足 5 代表多少个文件名连接到此节点</li>
<li>第三个代表当前目录或者文件的所有者</li>
<li>第四个代表所在用户组</li>
<li>第五个代表文件大小</li>
<li>地浏览创建日期或者最近修改日期</li>
</ul>
</li>
<li>修改文件属性和权限<ul>
<li>三个常用命令<ul>
<li>chgrp<ul>
<li>修改所属组</li>
<li><code>chgrp users init-ss.cfg</code></li>
</ul>
</li>
<li>chown<ul>
<li><code>chown [-R] 账号:用户组</code></li>
</ul>
</li>
<li>chmod<ul>
<li><code>chmod xyz 文件或者目录</code></li>
<li><code>chmod</code> u=rwx,go=rx 文件或者目录</li>
<li><code>chmod a-x 文件名或者目录</code></li>
</ul>
</li>
</ul>
</li>
<li>权限的延伸意义<ul>
<li>r<ul>
<li>可以ls</li>
</ul>
</li>
<li>w<ul>
<li>建立目录和文件</li>
<li>删除已有文件或目录</li>
<li>更名</li>
<li>移动位置</li>
</ul>
</li>
<li>x<ul>
<li>目录的x代表能否成为工作目录</li>
</ul>
</li>
<li>总结<ul>
<li>分配权限至少需要 rx 的权限</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>文件种类和扩展名<ul>
<li>常规文件<ul>
<li>纯文本</li>
<li>二进制</li>
<li>数据文件<ul>
<li>用户登录记录在 /var/log/wtmp</li>
</ul>
</li>
</ul>
</li>
<li>目录</li>
<li>链接</li>
<li>设备和设备文件<ul>
<li>区块设备</li>
<li>字符设备</li>
</ul>
</li>
<li>数据接口<ul>
<li>/run 或者 /tmp</li>
</ul>
</li>
<li>FIFO 数据传输文件<ul>
<li>解决并发读写的问题</li>
</ul>
</li>
</ul>
</li>
<li>Linux文件扩展名</li>
<li>文件名字长度限制<ul>
<li>单一文件目录最大为255字节<ul>
<li>128个汉字左右</li>
</ul>
</li>
<li>避免特殊字符</li>
</ul>
</li>
<li>FHS 目录配置<ul>
<li>可分享和不可分享</li>
<li>不变和可变动</li>
<li>规范<ul>
<li>/ : 和系统有关</li>
<li>/usr : 软件的安装和执行有关</li>
<li>/var ： 系统运行过程有关</li>
</ul>
</li>
<li>规范要求的目录<ul>
<li>/<ul>
<li>/bin<ul>
<li>单人维护下依然可以使用的命令</li>
</ul>
</li>
<li>/boot<ul>
<li>内核常用文件</li>
</ul>
</li>
<li>/dev<ul>
<li>设备</li>
</ul>
</li>
<li>/etc<ul>
<li>不要放可执行文件</li>
<li>系统的主要配置文件</li>
</ul>
</li>
<li>/lib<ul>
<li>库函数</li>
</ul>
</li>
<li>/media<ul>
<li>媒体设备</li>
</ul>
</li>
<li>/mnt<ul>
<li>挂载外部硬盘</li>
</ul>
</li>
<li>/opt<ul>
<li>第三方软件</li>
<li>个人公司的标准</li>
</ul>
</li>
<li>/run<ul>
<li>新版可以用内存模拟</li>
</ul>
</li>
<li>/sbin<ul>
<li>只有root 操作的命令</li>
</ul>
</li>
<li>/srv<ul>
<li>service</li>
<li>网络服务</li>
</ul>
</li>
<li>/tmp<ul>
<li>临时文件</li>
</ul>
</li>
<li>/usr<ul>
<li>/usr/bin<ul>
<li>一般用户能使用的命令</li>
</ul>
</li>
<li>/usr/lib<ul>
<li>/lib基本相同的功能</li>
</ul>
</li>
<li>/usr/local<ul>
<li>系统管理员建议安装目录</li>
</ul>
</li>
<li>/usr/sbin<ul>
<li>非系统正常运行需要的命令</li>
</ul>
</li>
<li>/usr/share<ul>
<li><strong>只读</strong>数据文件</li>
</ul>
</li>
<li>/usr/games</li>
<li>/usr/include<ul>
<li>c,c++</li>
</ul>
</li>
<li>/usr/libexec<ul>
<li>不被常用的执行文件或者脚本</li>
</ul>
</li>
<li>/usr/lib<qual>/</li>
<li>usr/src<ul>
<li>源代码建议位置</li>
</ul>
</li>
</ul>
</li>
<li>/var<ul>
<li>/var/cache<ul>
<li>程序本身的缓存</li>
</ul>
</li>
<li>/var/lib</li>
<li>/var/lock</li>
<li>/var/log</li>
<li>/var/mail</li>
<li>/var/run</li>
<li>/var/spool</li>
</ul>
</li>
<li>/home<ul>
<li>用户家目录</li>
<li>~：表示目前用户家目录</li>
<li>~xxx（用户名）：谁的家目录</li>
</ul>
</li>
<li>/root<ul>
<li>系统管理员的家</li>
</ul>
</li>
<li>/lost+found<ul>
<li>标准的ext 文件系统的目录</li>
</ul>
</li>
<li>/proc<ul>
<li>虚拟文件系统</li>
</ul>
</li>
<li>/sys<ul>
<li>虚拟文件系统</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>早期系统必备五个目录挂载点<ul>
<li>/etc /dev /lib /sbin /bin</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h3><p>早期的 Unix 系统文件名最多允许 14 个字符，而新的 Unix 与 Linux 系统中，文件名最多可以容许几个 字符？</p>
<ul>
<li><p>当一个一般文件权限为 -rwxrwxrwx 则表示这个文件的意义为？</p>
</li>
<li><p>我需要将一个文件的权限改为 -rwxr-xr– 请问该如何下达指令？</p>
</li>
<li><p>若我需要更改一个文件的拥有者与群组，该用什么指令？ chown, chgrp</p>
</li>
<li><p>请问底下的目录与主要放置什么数据： /etc/, /boot, /usr/bin, /bin, /usr/sbin, /sbin, /dev, /var/ log, /run</p>
<p>/etc/：几乎系统的所有配置文件案均在此，尤其 passwd,shadow /boot：开机配置文件，也是预设摆放核心 vmlinuz 的地方 /usr/bin, /bin：一般执行档摆放的地方 /usr/sbin, /sbin：系统管理员常用指令集 /dev：摆放所有系统装置文件的目录 /var/log：摆放系统注册表文件的地方 /run：CentOS 7 以后才有，将经常变动的项目(每次开机都不同，如程序的 PID)移动到内存暂存，所以 /run 并不占实 际磁盘容量</p>
</li>
<li><p>若一个文件的档名开头为『 . 』，例如 .bashrc 这个文件，代表什么？另外，如何显示出这个文件名与他的 相关属性？</p>
<p>有『 . 』为开头的为隐藏档，需要使用 ls -a 这个 -a 的选项才能显示出隐藏文件的内容，而使用 ls -al 才能显示出属性。</p>
</li>
</ul>
<h2 id="第六章-Linux文件与目录管理"><a href="#第六章-Linux文件与目录管理" class="headerlink" title="第六章 Linux文件与目录管理"></a>第六章 Linux文件与目录管理</h2><ul>
<li>目录和路径</li>
<li>相对路径和绝对路径</li>
<li>目录相关操作<ul>
<li>. 代表当前</li>
<li>..</li>
<li>- 前一个工作目录</li>
<li>~account 代表账号对应的家目录</li>
</ul>
</li>
<li>cd</li>
<li>pwd</li>
<li>mkdir</li>
<li>rmdir</li>
<li>执行路径的变量（$PATH）<ul>
<li>为什么我可以在任何地方执行 ls</li>
<li><code>echo $PATH</code></li>
<li>PATH=”${PATH}:/root” 添加环境变量</li>
<li>不要用 “.” 作为环境变量</li>
<li>可以做的事<ul>
<li>不同身份用户默认PATH不一样</li>
<li>PATH可以修改</li>
<li>使用绝对或者相对指定某个文件的文件名来执行，比PATH准确 ** 因为环境变量的命令存在重名优先级的问题</li>
<li>本目录不要放到环境变量</li>
</ul>
</li>
</ul>
</li>
<li>ls<ul>
<li><code>ls --full-time ~</code></li>
</ul>
</li>
<li>cp rm mv<ul>
<li>cp<ul>
<li>cp 源文件 目标文件<ul>
<li><strong>-a 相当于 -dr—preserve=all 保留指定的属性（默认值：mode，ownership，timestamps）（如果可能）传统属性：上下文，链接，xattr，所有</strong></li>
<li>-d 与–no-dereference –preserve = links相同。源文件为链接，则复制文件属性而非文件</li>
<li>-f 如果无法打开现有目标文件，将其删除，然后重试（此选项为 当同时使用-n选项时，将被忽略）</li>
<li><strong>-i 覆盖前提示（覆盖先前的-n选项）</strong></li>
<li><strong>-p 连同文件的属性一起复制，而非默认（备份常用）</strong></li>
<li>-r 递归复制</li>
<li>-s 复制为链接形式</li>
<li>-t 根据时间排序</li>
</ul>
</li>
<li>注意需要多文件复制，最后一个一定是目录</li>
<li>执行cp前的思考<ul>
<li>是否需要保留完整源文件信息</li>
<li>源文件是否为符号链接</li>
<li>源文件是否是特殊文件</li>
<li>源文件是否为目录！</li>
</ul>
</li>
</ul>
</li>
<li>rm<ul>
<li>rm 文件或者目录</li>
<li>超级危险的命令</li>
</ul>
</li>
<li>mv<ul>
<li>mv source des<ul>
<li>-f 强制</li>
<li>-i 询问</li>
<li>-u 只有新文件才能更新</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>获取路径的文件名和目录名称<ul>
<li>basename</li>
<li>dirname</li>
</ul>
</li>
<li>文件内容的读取<ul>
<li>cat 第一行开始</li>
</ul>
</li>
<li>tac 最后一行开始<ul>
<li>nl 显示行号</li>
</ul>
</li>
<li>more 一页一页<ul>
<li>less 和More差不多，但是可以往前翻页</li>
</ul>
</li>
<li>head 只看前几行<ul>
<li>tail 只看后几行</li>
</ul>
</li>
<li>od 以二进制读取<ul>
<li>直接查看内容<ul>
<li>cat<ul>
<li>-A 列出一些空白字符不是空白而已</li>
<li>空格和制表符分别代表如下<ul>
<li>制表符: ^I</li>
</ul>
</li>
</ul>
</li>
<li>-b 列出行号<ul>
<li>-n 空白行也有行号</li>
</ul>
</li>
<li>-E 结尾换行符显示<ul>
<li>-v 特殊字符显示</li>
</ul>
</li>
<li>tac<ul>
<li>反向显示</li>
</ul>
</li>
<li>nl<ul>
<li>-b 指定行号的格式</li>
<li>-b a 是否空行都有行号<ul>
<li>-b t 如果有空行，空行不显示</li>
</ul>
</li>
</ul>
</li>
<li>-n 列出行号的方法<ul>
<li>-n ln 左对齐</li>
<li>-n rn 右对齐<ul>
<li>-n rz 自己栏位的最右方显示</li>
</ul>
</li>
</ul>
</li>
<li>-w 行号栏位占用字符数<ul>
<li><code>nl -b a -n rz /etc/issue</code></li>
<li><code>nl -b a -n rz -w 3 /etc/issue</code></li>
</ul>
</li>
<li>more<ul>
<li>空格 下一页</li>
<li>/字符串</li>
<li>:f 立刻显示文件名和显示行数</li>
<li>q</li>
<li>b 回翻</li>
</ul>
</li>
<li>less<ul>
<li>page up 前翻</li>
<li>page down 后翻</li>
<li>N 反向重复前一个查找</li>
<li>g 前进到这个数据前一行</li>
<li>G 前进到这个数据最后一行</li>
</ul>
</li>
<li>q 离开</li>
</ul>
</li>
<li>head<ul>
<li>-n 显示几行</li>
<li>tail<ul>
<li>取后面几行</li>
</ul>
</li>
<li>-n 行数</li>
</ul>
</li>
<li>如何去除10到20行的数据<ul>
<li><code>head -n 20 /etc/man_db.conf | tail -n 10</code></li>
<li><code>cat -n /etc/man_db.conf | head -n 20 | tail -n 10</code></li>
<li>od 非纯文本文件</li>
<li>a 默认字符<ul>
<li>c ascii</li>
</ul>
</li>
<li>d 十进制<ul>
<li>f 浮点数</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>修改文件或者创建新文件<ul>
<li>修改时间 mtime<ul>
<li>内容修改的时候：如增加或者删除字符</li>
<li>状态时间 ctime<ul>
<li>状态被改变：如权限被改了</li>
</ul>
</li>
<li>读取时间 atime<ul>
<li>只要被读取</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>ls 默认为 m time<ul>
<li>touch 命令</li>
<li>-a 仅自定义access time<ul>
<li>-c 修改文件的时间，不存在不建立新文件</li>
<li>-d 后面可以接预定义的日期而不用目前的时间，</li>
<li>-m 仅修改mtime</li>
<li>-t 后面接预定义时间 [YYYYMMDDhhmm]</li>
<li>案例<ul>
<li><code>date ; ll --time=atime .; ll --time=ctime .; ll --time=mtime .</code></li>
</ul>
</li>
</ul>
</li>
<li>常用情况<ul>
<li>建立空文件</li>
<li>某个日期改成目前（mtime, atime）</li>
</ul>
</li>
<li>文件和目录隐藏权限<ul>
<li>新增文件和目录之后，默认的权限是什么？<ul>
<li>umask<ul>
<li>-S 使用字符表示权限</li>
<li>指的是需要减掉的权限<ul>
<li>如0 就是所有权限都不要减掉</li>
</ul>
</li>
<li><code>umask 002</code></li>
<li>umask 在搭建文件服务器的作用很大</li>
</ul>
</li>
</ul>
</li>
<li>文件隐藏属性<ul>
<li>注意必须在 ext 2 3 4 的系统上完全生效</li>
<li>chattr [+-=] 文件和目录<ul>
<li>+ 增加一个特殊参数</li>
<li>- 删除特殊参数</li>
<li>= 直接设置</li>
<li>A 设置这个属性的时候。atime 不会改动、避免过度读写磁盘</li>
<li>S 非同步写磁盘，修改文件会同步写入磁盘</li>
<li>a 设置之后只能增加数据,不能删除和修改，只有root有权限</li>
<li>c 默认对文件压缩存储</li>
<li>d 阻止dump程序dump文件</li>
<li><strong>i 让文件不能删除，改名，设置连接也无法写入或者新增， 只有root有权限</strong></li>
<li>s 如果设置s，文件被删除，完全从磁盘删除</li>
<li>u 相反，被删除了，内容还在磁盘，用于文件恢复</li>
</ul>
</li>
<li>注意点：<ul>
<li>a 和 i 比较常用</li>
<li>xfs 文件系统仅仅支持 AadiS</li>
</ul>
</li>
<li>lsattr [-adR] 文件或者目录<ul>
<li>-a 隐藏文件也显示</li>
<li>-d 如果是目录，仅仅列出目录</li>
<li>-R 子目录一起列出来</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>文件特殊权限<ul>
<li>SUID<ul>
<li>只对二进制文件有效</li>
<li>执行者对于该程序具有x可执行权限</li>
<li>仅在执行过程中有效</li>
<li>执行者具有拥有者的权限</li>
<li>处理密码这种机密文件只能让root修改，但是又要让用户可以修改自己密码的时候这种情况的处理方式</li>
<li>案例<ul>
<li>/etc/bin/passwd</li>
<li>用户对于passwd 有执行权限，所以是执行者</li>
<li>passwd 拥有者是root</li>
<li>用户执行passwd的时候，会得到root权限</li>
<li>由于有暂时的root权限，所以可以修改密码，但是只能修改自己的那部分</li>
</ul>
</li>
<li><strong>只能是二进制文件，只能是二进制文件，只能是二进制文件</strong></li>
</ul>
</li>
<li>SGID<ul>
<li>ls -l /usr/bin/local</li>
<li>文件的情况<ul>
<li>对于二进制有用</li>
<li>程序执行者对于程序来说是 x权限</li>
<li>执行者在执行过程中获得用户组的支持</li>
</ul>
</li>
<li>目录的情况<ul>
<li>r和x权限，可以进入此目录</li>
<li>此目录的有效用户组，会变成改目录的用户组</li>
<li>如果在此目录新建文件，该文件的用户组会和此目录的用户组相同</li>
</ul>
</li>
<li>举例<ul>
<li><code>sudo ls -l /usr/bin/locate /var/lib/mlocate/mlocate.db</code></li>
</ul>
</li>
</ul>
</li>
<li>SBIT<ul>
<li>用户对于此目录具有w,x权限的时候，具有写入的权限</li>
<li>该目录新建文件的时候，仅有自己和root有权利删除该文件</li>
</ul>
</li>
<li>后面的章节再来回顾,请看16章</li>
</ul>
</li>
<li>观察文件类型 file 命令<ul>
<li>案例 <code>file /etc/bin/passwd</code></li>
</ul>
</li>
</ul>
</li>
<li>文件的查找<ul>
<li>which<ul>
<li>-a 将所有由PATH 环境变量可以找到的列出来</li>
<li>注意是以 PATH为环境变量起点的</li>
</ul>
</li>
<li>find<ul>
<li>能不用就不用</li>
</ul>
</li>
<li>whereis<ul>
<li>-l 列出会去查看的几个主要目录</li>
<li>-b 只看二进制文件</li>
<li>-m 只查找说明文件Manual 路径的文件( man 记录的)</li>
<li>-s 执照源文件</li>
<li>-u 查找不在上述文件的三个文件</li>
<li>案例<ul>
<li>找出 ifconfig 文件名</li>
<li>执照出和passwd有关的说明文件</li>
</ul>
</li>
</ul>
</li>
<li><strong>locate</strong> / updatedb<ul>
<li>-I 忽略大小写</li>
<li>-c 不输出文件名，只输出数量</li>
<li>-l 输出几行，五行就是 -l 5</li>
<li>-S 输出locate 使用的数据库信息</li>
<li>-r 正则方式</li>
<li>案例<ul>
<li>找出系统中和passwd 相关的所有文件名，只需要5个</li>
<li>列出locate查询使用的信息和列出数据的数量</li>
</ul>
</li>
<li>注意点<ul>
<li>新文件有可能找不到，因为数据库一般是一天更新一次</li>
<li>更新方法：updatedb</li>
</ul>
</li>
<li>原理<ul>
<li>按照 /var/lib/mlocate 数据库近路，找出关键词的文件名</li>
</ul>
</li>
<li></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h3><p>情境模拟题一：假设系统中有两个账号，分别是 alex 与 arod ，这两个人除了自己群组之外还共同支持一个名为 project 的群组。假设这两个用户需要共同拥有 /srv/ahome/ 目录的开发权，且该目录不许其他人进入查阅。 请问 该目录的权限设定应为何？请先以传统权限说明，再以 SGID 的功能解析。  目标：了解到为何项目开发时，目录最好需要设定 SGID 的权限！  前提：多个账号支持同一群组，且共同拥有目录的使用权！  需求：需要使用 root 的身份来进行 chmod, chgrp 等帮用户设定好他们的开发环境才行！ 这也是管理员的 重要任务之一！</p>
<h3 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h3><p>什么是绝对路径与相对路径 绝对路径的写法为由 / 开始写，至于相对路径则不由 / 开始写！此外，相对路径为相对于目前工作目录的路径！  如何更改一个目录的名称？例如由 /home/test 变为 /home/test2 mv /home/test /home/test2  PATH 这个环境变量的意义？ 这个是用来指定执行文件执行的时候，指令搜寻的目录路径。  umask 有什么用处与优点？ umask 可以拿掉一些权限，因此，适当的定义 umask 有助于系统的安全， 因为他可以用来建立默认的目录或文件的权限。  当一个使用者的 umask 分别为 033 与 044 他所建立的文件与目录的权限为何？ 在 umask 为 033 时，则预设是拿掉 group 与 other 的 w(2)x(1) 权限，因此权限就成为『文件 -rw-r–r– ， 目录 drwxr–r– 』 而当 umask 044 时，则拿掉 r 的属性，因此就成为『文件 -rw–w–w-，目录 drwx-wx-wx』  什么是 SUID ？ 当一个指令具有 SUID 的功能时，则： o SUID 权限仅对二进制程序(binary program)有效； o 执行者对于该程序需要具有 x 的可执行权限； o 本权限仅在执行该程序的过程中有效 (run-time)； o 执行者将具有该程序拥有者 (owner) 的权限。  当我要查询 /usr/bin/passwd 这个文件的一些属性时(1)传统权限；(2)文件类型与(3)文件的隐藏属性，可以使 用什么指令来查询？ ls -al file lsattr  尝试用 find 找出目前 linux 系统中，所有具有 SUID 的文件有哪些？ find / -perm +4000 -print  找出 /etc 底下，文件大小介于 50K 到 60K 之间的文件，并且将权限完整的列出 (ls -l)： find /etc -size +50k -a -size -60k -exec ls -l {} ; 注意到 -a ，那个 -a 是 and 的意思，为符合两者才算成功  找出 /etc 底下，文件容量大于 50K 且文件所属人不是 root 的档名，且将权限完整的列出 (ls -l)； find /etc -size +50k -a ! -user root -exec ls -ld {} ; find /etc -size +50k -a ! -user root -type f -exec ls -l {} ; 上面两式均可！注意到 ! ，那个 ! 代表的是反向选择，亦即『不是后面的项目』之意！  找出 /etc 底下，容量大于 1500K 以及容量等于 0 的文件： find /etc -size +1500k -o -size 0 相对于 -a ，那个 -o 就是或 (or) 的意思啰！</p>
<h2 id="第七章-Linux-磁盘和文件系统的管理"><a href="#第七章-Linux-磁盘和文件系统的管理" class="headerlink" title="第七章 Linux 磁盘和文件系统的管理"></a>第七章 Linux 磁盘和文件系统的管理</h2><ul>
<li><p>磁盘组成和分区复习</p>
<ul>
<li>请看第一章对于磁盘的记录</li>
<li>GPT和MBR分区</li>
<li>磁盘组成</li>
</ul>
</li>
<li><p>文件系统的特性</p>
<ul>
<li>Linux正统文件系统为ext2<ul>
<li>windows 不支持 ext2 文件系统</li>
</ul>
</li>
<li>通常一个可挂载的数据为一个文件系统而不是分区<ul>
<li>通常将文件权限和文件属性放在不同的区块<ul>
<li>权限和属性放到inode</li>
<li>实际数据放到数据区块</li>
</ul>
</li>
<li>每个inode都有编号<ul>
<li>超级区块<ul>
<li>文件系统的整体信息，inode 数据区块的总量，使用量，剩余量，文件系统的格式和相关信息</li>
</ul>
</li>
<li>inode 记录文件的属性，一个文件占用一个inode, 记录文件的数据所在区块号码</li>
<li>数据区块：实际记录的文件内容，文件过大会占用多个区块</li>
</ul>
</li>
<li>这种方式是<strong>索引式文件系统</strong></li>
<li>ext2 的限制<ul>
<li>区块的大小和数量格式化之后不能修改</li>
<li>每个区块最多防止一个文件的数据</li>
<li>承上，如果文件大于区块，占用多个区块</li>
<li>承上，反之，剩余空间会被浪费</li>
</ul>
</li>
</ul>
</li>
<li>inode table<ul>
<li>inode 记录如下<ul>
<li>读写属性</li>
<li>拥有者和用户组</li>
<li>文件大小</li>
<li>建立或者状态改变的时间 ctime</li>
<li>最后一次读取时间</li>
<li>最后修改时间</li>
<li>定义文件的标识</li>
<li>文件真正的内容指向</li>
</ul>
</li>
<li>特点<ul>
<li>每个inode 大小固定128B （ext4 到了 256B）</li>
<li>文件占用一个 inode</li>
<li>建立文件数量和inode数量有关</li>
<li>读取文件需要先找到inode, 分析Inode 记录的权限和用户是否符合，符合才可以读取</li>
</ul>
</li>
<li>1KB的块最大单一文件限制为16GB是如何计算的？<ul>
<li>12个直接、一个间接、一个三间接</li>
<li>12个直接指向 12 * 1 K = 12 K</li>
<li>间接 256*1K = 256K</li>
<li>1的大小可以存256条记录</li>
<li>双间接<ul>
<li>256<em>256</em> 1K = 256*2K</li>
</ul>
</li>
<li>三间接<ul>
<li>256 * 256 * 256</li>
</ul>
</li>
<li>总额，三者相加 = 12 + 256 +256 * 256 + 256 * 256 * 256 = 16GB</li>
</ul>
</li>
</ul>
</li>
<li>超级区块<ul>
<li>主要信息<ul>
<li>数据区块 和 inode 总量</li>
<li>未使用和已经使用的inode 数量</li>
<li>数据区块的inode 大小</li>
<li>文件系统的挂载时间、最近一次的写入数据时间、最近一次检验磁盘时间、文件系统的信息</li>
<li>一个有效数值、如果此文件已经被挂载，有效为0，否则为1</li>
</ul>
</li>
<li>区块对照表</li>
<li>inode 对照表</li>
<li>dump2fs</li>
</ul>
</li>
</ul>
</li>
<li><p>和目录树的关系</p>
<ul>
<li>读取一个文件路径的底层步骤</li>
<li>例子<ul>
<li>读取/etc/passwd 的流程如下<ul>
<li>/ 的 inode</li>
<li>/ 的区块</li>
<li>etc/ 的 inode</li>
<li>etc/ 的区块</li>
<li>passwd 的 inode</li>
<li>passwd 的 区块</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>ext 文件的存取和日志式文件系统功能</p>
<ul>
<li>新增文件系统操作<ul>
<li>确定是否有w和x权限</li>
<li>根据inode 对照表找到对应的inode号码，新文件写入</li>
<li>根据区块对照表找到没有使用的区块代码，将实际的数据写入区块，更新inode的区块数据</li>
<li>将刚刚写入的inode 与区块数据同步更新inode对照表和区块对照表，并更新超级区块的内容</li>
<li>同步操作</li>
</ul>
</li>
<li>日志式文件系统<ul>
<li>预备：写入一个文件的时候，需要日志记录区块记录某个文件要写入的信息</li>
<li>实际写入：开始写入文件权限和数据，更新Metadata 的数据</li>
<li>结束：完成数据和metadata的更新，在日志记录区块记录</li>
</ul>
</li>
</ul>
</li>
<li><p>Linux文件系统的执行</p>
<ul>
<li>异步处理<ul>
<li>没被修改的数据设置为clear</li>
<li>被修改后，设置为脏数据</li>
<li>此时操作还在进行，没有写入磁盘</li>
</ul>
</li>
<li>文件系统贺内存的关系<ul>
<li>系统会常用文件数据放到内存缓冲区，加速读写</li>
<li>Linuxd物理内存最后都会用光，这才是正常 情况</li>
<li>手动sync 强制内存脏数据回写磁盘</li>
<li>正常关机，会主动sync回写磁盘</li>
<li>不正常关机，需要重启之后磁盘校验，甚至文件系统的损坏</li>
</ul>
</li>
</ul>
</li>
<li><p>挂载点的意义</p>
<ul>
<li>传统文件系统：<ul>
<li>ext2</li>
<li>minix</li>
<li>fat</li>
<li>iso9660</li>
</ul>
</li>
<li>日志式文件系统<ul>
<li>ext3</li>
<li>ext4</li>
<li>reiserFs</li>
<li>windows ntfs</li>
<li>ibm jfs</li>
<li>sgi xfs</li>
<li>zfs</li>
</ul>
</li>
<li>网络文件系统<ul>
<li>nfs</li>
<li>smbfs</li>
</ul>
</li>
<li>查询<ul>
<li><code>ls -l /lib/moudules/$(uname -r)/kernel/fs</code></li>
<li><code>cat /proc/filesystems</code></li>
</ul>
</li>
<li>linux VFS</li>
</ul>
</li>
<li><p>XFS 文件系统</p>
<ul>
<li><p>ext的问题</p>
<ul>
<li>支持面最广，格式化最慢</li>
</ul>
</li>
<li><p>数据区</p>
<ul>
<li>inode 容量可以调整</li>
<li>实际最高可使用区块为4K</li>
<li>inode 可以再 256b - 2MB</li>
</ul>
</li>
<li><p>文件系统活动登录区</p>
</li>
<li><p>实时运行区</p>
</li>
<li><p>查看命令</p>
<ul>
<li><p>```<br>xfs_info 挂载点|设备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">      - &#96;xfs_info &#x2F;dev&#x2F;vda2&#96;</span><br><span class="line">      - &#96;df -T &#x2F;boot&#96;</span><br><span class="line"></span><br><span class="line">- 文件系统的简单操作</span><br><span class="line"></span><br><span class="line">  - 磁盘和目录的容量</span><br><span class="line"></span><br><span class="line">    - df</span><br><span class="line"></span><br><span class="line">      - 列出文件系统的整体磁盘使用量</span><br><span class="line"></span><br><span class="line">      - 参数</span><br><span class="line"></span><br><span class="line">        - -a 列出所有文件系统</span><br><span class="line">        - -k kbyte 显示文件系统容量</span><br><span class="line">        - -m mbbyte 显示文件系统容量</span><br><span class="line">        - **-h 以人们较容易阅读的Gbyte,mbyte,kbyte 等格式自行显示**</span><br><span class="line">        - -H 以 M&#x3D;1000K 替换 M&#x3D;1024K进位方式</span><br><span class="line">        - -T 连同磁盘分区文件系统名称也列出</span><br><span class="line">        - **-i 不用磁盘容量，inode 数量显示**</span><br><span class="line"></span><br><span class="line">      - 格式</span><br><span class="line"></span><br><span class="line">        - Filesystem: 文件系统是哪个硬盘分区</span><br><span class="line">        - 1K-blocks：说明下面的数字是1KB</span><br><span class="line">        - Used：使用掉的</span><br><span class="line">        - Available：剩下的磁盘大小</span><br><span class="line">        - Use%：使用率，如果大于90%注意一下</span><br><span class="line">        - mounted on：磁盘的挂载目录</span><br><span class="line"></span><br><span class="line">      - 案例</span><br><span class="line"></span><br><span class="line">        -</span><br></pre></td></tr></table></figure>
<pre><code>df -aT
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 列出系统内所有特殊文件以及名称都列出来</span><br><span class="line"></span><br><span class="line">-</span><br></pre></td></tr></table></figure>
df -h
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">          - 易读方式读取</span><br><span class="line"></span><br><span class="line">    - du</span><br><span class="line"></span><br><span class="line">      - 查看文件系统的磁盘使用量（常用在查看目录所占用磁盘空间）</span><br><span class="line">      - 参数</span><br><span class="line">        - -a 列出所有的文件和目录容量，因为默认仅仅是统计目录下面的文件量</span><br><span class="line">        - -h 易读的方式显示</span><br><span class="line">        - -s 仅仅李处总量，列出各个的目录占用量</span><br><span class="line">        - -S 不包含子目录下面的总计，与-s有点差别</span><br><span class="line">        - -k kb 列出</span><br><span class="line">        - -m mb列出</span><br><span class="line">      - 案例</span><br><span class="line">        - &#96;du&#96;</span><br><span class="line">        - &#96;du -sm &#x2F;*&#96;</span><br><span class="line"></span><br><span class="line">- 硬链接和符号链接</span><br><span class="line"></span><br><span class="line">  - 回顾</span><br><span class="line">    - 每个文件占用一个inode</span><br><span class="line">    - 读取文件必须要inode号码</span><br><span class="line">  - 硬链接知识某个目录增加一个文件名链接到Inode的关联记录</span><br><span class="line">  - 任何一个Inode硬链接删除，都不会影响另一个文档</span><br><span class="line">  - 缺点：</span><br><span class="line">    - 不能链接目录</span><br><span class="line">      - 为什么？</span><br><span class="line">    - 不能跨文件系统</span><br><span class="line">      - 为什么？</span><br><span class="line">  - 符号链接</span><br><span class="line">    - 特点</span><br><span class="line">      - 相当于windows 快捷方式，但是改变这个快捷方式的内容会直接影响源文档的内容</span><br><span class="line">      - 相当于文件引用的完全拷贝</span><br><span class="line">      - 如果源文件删除，引用会找不到内容</span><br><span class="line">    - 符号链接的容量计算</span><br><span class="line">      - 根据引用对象文件名字长度来确定</span><br><span class="line">    - Ln 默认使用硬链接</span><br><span class="line">    - 参数</span><br><span class="line">      - ln</span><br><span class="line">        - -s 符号链接，如果建立必须此参数</span><br><span class="line">        - -f 如果文件存在，删除后建立</span><br><span class="line"></span><br><span class="line">- 磁盘的格式化、分区、校验、挂载</span><br><span class="line"></span><br><span class="line">  - 新增磁盘的做法</span><br><span class="line"></span><br><span class="line">    - 对磁盘划分，建立可用分区</span><br><span class="line">    - 对于磁盘进行格式化，建立分区可用文件系统</span><br><span class="line">    - 仔细一点，则对于文件系统校验，</span><br><span class="line">    - Linux 上需要建立挂载点，挂载上来</span><br><span class="line"></span><br><span class="line">  - 如何知道自己的系统的文件系统</span><br><span class="line"></span><br><span class="line">    - lsblk device</span><br><span class="line"></span><br><span class="line">    - 选项与参数： -d ：仅列出磁盘本身，并不会列出该磁盘的分区数据 -f ：同时列出该磁盘内的文件系统名称 -i ：使用 ASCII 的线段输出，不要使用复杂的编码 (再某些环境下很有用) -m ：同时输出该装置在 &#x2F;dev 底下的权限数据 (rwx 的数据) -p ：列出该装置的完整文件名！而不是仅列出最后的名字而已。 -t ：列出该磁盘装置的详细数据，包括磁盘队列机制、预读写的数据量大小等</span><br><span class="line"></span><br><span class="line">    - 显示列解读</span><br><span class="line"></span><br><span class="line">       NAME：就是装置的文件名啰！会省略 &#x2F;dev 等前导目录！  MAJ:MIN：其实核心认识的装置都是透过这两个代码来熟悉的！分别是主要：次要装置代码！  RM：是否为可卸除装置 (removable device)，如光盘、USB 磁盘等等  SIZE：当然就是容量啰！  RO：是否为只读装置的意思  TYPE：是磁盘 (disk)、分区槽 (partition) 还是只读存储器 (rom) 等输出  MOUTPOINT：就是前一章谈到的挂载点</span><br><span class="line"></span><br><span class="line">    - 案例</span><br><span class="line"></span><br><span class="line">      - &#96;lsblk -ip &#x2F;dev&#x2F;vda&#96;</span><br><span class="line"></span><br><span class="line">  - blkid 列出设备的 UUID等参数</span><br><span class="line"></span><br><span class="line">  - parted 列出磁盘的 分区 表类型与 分区</span><br><span class="line"></span><br><span class="line">    - &#96;parted &#x2F;dev&#x2F;vda print&#96;</span><br><span class="line"></span><br><span class="line">    -</span><br></pre></td></tr></table></figure></code></pre><p>Model: Virtio Block Device (virtblk)<br>Disk /dev/vda: 42.9GB<br>Sector size (logical/physical): 512B/512B<br>Partition Table: msdos<br>Disk Flags: </p>
<p>Number  Start   End     Size    Type     File system  标志<br> 1      1049kB  42.9GB  42.9GB  primary  ext4         启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 磁盘分区：gdisk &#x2F; fdisk</span><br><span class="line"></span><br><span class="line">  - MBR 分区表请使用 fdisk 分区， GPT 分区表请 使用 gdisk 分区！</span><br><span class="line"></span><br><span class="line">  - gdisk</span><br><span class="line"></span><br><span class="line">    - gdisk 设备名称</span><br><span class="line"></span><br><span class="line">    - 显示参数</span><br><span class="line"></span><br><span class="line">       Number：分区槽编号，1 号指的是 &#x2F;dev&#x2F;vda1 这样计算。  Start (sector)：每一个分区槽的开始扇区号码位置  End (sector)：每一个分区的结束扇区号码位置，与 start 之间可以算出分区槽的总容量  Size：就是分区槽的容量了  Code：在分区槽内的可能的文件系统类型。Linux 为 8300，swap 为 8200。不过这个项目只是一个提示而 已，不见得真的代表此分区槽内的文件系统喔！  Name：文件系统的名称等等。</span><br><span class="line"></span><br><span class="line">  - 注意不要加数字</span><br><span class="line"></span><br><span class="line">  - gdisk 新增分区</span><br><span class="line"></span><br><span class="line">    - &#96;cat &#x2F;proc&#x2F;partitions&#96;</span><br><span class="line"></span><br><span class="line">  - partprobe 更新 linux 内核的分区表信息</span><br><span class="line"></span><br><span class="line">    - partprobe -s 需要root权限</span><br><span class="line">    - 查看内核分区记录</span><br><span class="line">      - &#96;cat &#x2F;proc&#x2F;partitions&#96;</span><br><span class="line"></span><br><span class="line">  - 用gdisk 删除一个分区</span><br><span class="line"></span><br><span class="line">- fdisk</span><br><span class="line"></span><br><span class="line">  - &#96;fdisk &#x2F;dev&#x2F;vda&#96;</span><br></pre></td></tr></table></figure>
<p>a toggle a bootable flag<br>b edit bsd disklabel<br>c toggle the dos compatibility flag<br>d delete a partition &lt;==删除一个 partition<br>l list known partition types<br>m print this menu<br>n add a new partition &lt;==新增一个 partition<br>o create a new empty DOS partition table<br>p print the partition table &lt;==在屏幕上显示分区表<br>q quit without saving changes &lt;==不储存离开 fdisk 程序<br>s create a new empty Sun disklabel<br>t change a partition’s system id<br>u change display/entry units<br>v verify the partition table<br>w write table to disk and exit &lt;==将刚刚的动作写入分区表<br>x extra functionality (experts only)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 磁盘格式化</span><br><span class="line"></span><br><span class="line">  - xfs 文件系统 Mkfs.xfs</span><br><span class="line"></span><br><span class="line">    - &#96;mkfs.xfs [ - b bsize] [ - d parms] [- i parms] [ [ - l parms] [ - L label] [ - f] \ [ [- - r parms] 装置名称&#96;</span><br><span class="line">    - 参数</span><br></pre></td></tr></table></figure>
<p>选项与参数：<br>关于单位：底下只要谈到『数值』时，没有加单位则为 bytes 值，可以用 k,m,g,t,p (小写)等来解释<br>比较特殊的是 s 这个单位，它指的是 sector 的『个数』喔！</p>
</li>
<li><p>b ：后面接的是 block 容量，可由 512 到 64k，不过最大容量限制为 Linux 的 4k 喔！</p>
</li>
<li><p>d ：后面接的是重要的 data section 的相关参数值，主要的值有：<br>agcount=数值 ：设定需要几个储存群组的意思(AG)，通常与 CPU 有关<br>agsize=数值 ：每个 AG 设定为多少容量的意思，通常 agcount/agsize 只选一个设定即可<br>file ：指的是『格式化的装置是个文件而不是个装置』的意思！(例如虚拟磁盘)<br>size=数值 ：data section 的容量，亦即你可以不将全部的装置容量用完的意思<br>su=数值 ：当有 RAID 时，那个 stripe 数值的意思，与底下的 sw 搭配使用<br>sw=数值 ：当有 RAID 时，用于储存数据的磁盘数量(须扣除备份碟与备用碟)<br>sunit=数值 ：与 su 相当，不过单位使用的是『几个 sector(512bytes 大小)』的意思<br>swidth=数值 ：就是 su*sw 的数值，但是以『几个 sector(512bytes 大小)』来设定</p>
</li>
<li><p>f ：如果装置内已经有文件系统，则需要使用这个 -f 来强制格式化才行！</p>
</li>
<li><p>i ：与 inode 有较相关的设定，主要的设定值有：<br>size=数值 ：最小是 256bytes 最大是 2k，一般保留 256 就足够使用了！<br>internal=[0|1]：log 装置是否为内建？预设为 1 内建，如果要用外部装置，使用底下设定<br>logdev=device ：log 装置为后面接的那个装置上头的意思，需设定 internal=0 才可！<br>size=数值 ：指定这块登录区的容量，通常最小得要有 512 个 block，大约 2M 以上才行！</p>
</li>
<li><p>L ：后面接这个文件系统的标头名称 Label name 的意思！</p>
</li>
<li><p>r ：指定 realtime section 的相关设定值，常见的有：<br>extsize=数值 ：就是那个重要的 extent 数值，一般不须设定，但有 RAID 时，<br>最好设定与 swidth 的数值相同较佳！最小为 4K 最大为 1G 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 其他</span><br></pre></td></tr></table></figure>
<p>范例：找出你系统的 CPU 数，并据以设定你的 agcount 数值<br>[root@study ~]#  grep  ‘processor’ /proc/cpuinfo<br>processor : 0<br>processor : 1</p>
<h1 id="所以就是有两颗-CPU-的意思，那就来设定设定我们的-xfs-文件系统格式化参数吧！！"><a href="#所以就是有两颗-CPU-的意思，那就来设定设定我们的-xfs-文件系统格式化参数吧！！" class="headerlink" title="所以就是有两颗 CPU 的意思，那就来设定设定我们的 xfs 文件系统格式化参数吧！！"></a>所以就是有两颗 CPU 的意思，那就来设定设定我们的 xfs 文件系统格式化参数吧！！</h1><p>[root@study ~]#  mkfs.xfs - - f - - d agcount=2 /dev/vda4<br>meta-data=/dev/vda4 isize=256 agcount=2, agsize=131072 blks<br>= sectsz=512 attr=2, projid32bit=1<br>= crc=0 finobt=0<br>…..(底下省略)…..</p>
<h1 id="可以跟前一个范例对照看看，可以发现-agcount-变成-2-了喔！"><a href="#可以跟前一个范例对照看看，可以发现-agcount-变成-2-了喔！" class="headerlink" title="可以跟前一个范例对照看看，可以发现 agcount 变成 2 了喔！"></a>可以跟前一个范例对照看看，可以发现 agcount 变成 2 了喔！</h1><h1 id="此外，因为已经格式化过一次，因此-mkfs-xfs-可能会出现不给你格式化的警告！因此需要使用-f"><a href="#此外，因为已经格式化过一次，因此-mkfs-xfs-可能会出现不给你格式化的警告！因此需要使用-f" class="headerlink" title="此外，因为已经格式化过一次，因此 mkfs.xfs 可能会出现不给你格式化的警告！因此需要使用 -f"></a>此外，因为已经格式化过一次，因此 mkfs.xfs 可能会出现不给你格式化的警告！因此需要使用 -f</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - ext4 文件系统mkfs.ext4</span><br><span class="line"></span><br><span class="line">    - &#96;mkfs.ext4 [- - b size] [- - L label] 装 置名&#96;</span><br><span class="line"></span><br><span class="line">    选项与参数： -b ：设定 block 的大小，有 1K, 2K, 4K 的容量， -L ：后面接这个装置的标头名称</span><br><span class="line"></span><br><span class="line">  - 其他文件系统 mkfs</span><br><span class="line"></span><br><span class="line">- 文件系统检验</span><br><span class="line"></span><br><span class="line">  - &#96;xfs_repair&#96; 处理 XFS 文件系统</span><br><span class="line"></span><br><span class="line">    - &#96;xfs_repair [ - fnd] 装 置名&#96;</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
</li>
<li><p>f ：后面的装置其实是个文件而不是实体装置</p>
</li>
<li><p>n ：单纯检查并不修改文件系统的任何数据 (检查而已)</p>
</li>
<li><p>d ：通常用在单人维护模式底下，针对根目录 (/) 进行检查与修复的动作！很危险！不要随便使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 案例</span><br></pre></td></tr></table></figure>
<p>xfs_repair /dev/vda4</p>
<p>范例：检查一下系统原本就有的 /dev/centos/home 文件系统<br>[root@study ~]#  xfs_repair /dev/centos/home</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- fsck.ext4 处理 EXT4 文件系统</span><br></pre></td></tr></table></figure>
<p>fsck.ext4 [ - pf] [ - b superblock]  装 置名 称</p>
</li>
</ul>
<p>选项与参数：<br>-p ：当文件系统在修复时，若有需要回复 y 的动作时，自动回复 y 来继续进行修复动作。<br>-f ：强制检查！一般来说，如果 fsck 没有发现任何 unclean 的旗标，不会主动进入<br>细部检查的，如果您想要强制 fsck 进入细部检查，就得加上 -f 旗标啰！<br>-D ：针对文件系统下的目录进行优化配置。<br>-b ：后面接 superblock 的位置！一般来说这个选项用不到。但是如果你的 superblock 因故损毁时，<br>透过这个参数即可利用文件系统内备份的 superblock 来尝试救援。一般来说，superblock 备份在：<br>1K block 放在 8193, 2K block 放在 16384, 4K block 放在 32768</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 只有在极度严重的问题才使用这些命令</span><br><span class="line"></span><br><span class="line">- 文件系统挂载与卸除</span><br><span class="line"></span><br><span class="line">- 前提</span><br><span class="line"></span><br><span class="line">  - 单一文件系统不应该被重复挂载在不同的挂载点(目录)中；</span><br><span class="line">  - 单一目录不应该重复挂载多个文件系统；</span><br><span class="line">  - 要作为挂载点的目录，理论上应该都是空目录才是。</span><br><span class="line"></span><br><span class="line">- 挂载方式</span><br><span class="line"></span><br><span class="line">  - 案例</span><br></pre></td></tr></table></figure>
<p>[root@study ~]#  mount - -a a<br>[root@study ~]#  mount [- - l]<br>[root@study ~]#  mount [- - t  文件系 统 ] LABEL=’’ 挂 载点<br>[root@study ~]#  mount [- - t  文件系 统 ] UUID=’’ 挂 载点 # 鸟哥近期建议用这种方式喔！<br>[root@study ~]#  mount [- - t  文件系 统 ]  装 置文件名 挂 载点<br>选项与参数：<br>-a ：依照配置文件 /etc/fstab 的数据将所有未挂载的磁盘都挂载上来<br>-l ：单纯的输入 mount 会显示目前挂载的信息。加上 -l 可增列 Label 名称！<br>-t ：可以加上文件系统种类来指定欲挂载的类型。常见的 Linux 支持类型有：xfs, ext3, ext4,<br>reiserfs, vfat, iso9660(光盘格式), nfs, cifs, smbfs (后三种为网络文件系统类型)<br>-n ：在默认的情况下，系统会将实际挂载的情况实时写入 /etc/mtab 中，以利其他程序的运作。<br>但在某些情况下(例如单人维护模式)为了避免问题会刻意不写入。此时就得要使用 -n 选项。<br>-o ：后面可以接一些挂载时额外加上的参数！比方说账号、密码、读写权限等：<br>async, sync: 此文件系统是否使用同步写入 (sync) 或异步 (async) 的<br>内存机制，请参考文件系统运作方式。预设为 async。<br>atime,noatime: 是否修订文件的读取时间(atime)。为了效能，某些时刻可使用 noatime<br>ro, rw: 挂载文件系统成为只读(ro) 或可擦写(rw)<br>auto, noauto: 允许此 filesystem 被以 mount -a 自动挂载(auto)<br>dev, nodev: 是否允许此 filesystem 上，可建立装置文件？ dev 为可允许<br>suid, nosuid: 是否允许此 filesystem 含有 suid/sgid 的文件格式？<br>exec, noexec: 是否允许此 filesystem 上拥有可执行 binary 文件？<br>user, nouser: 是否允许此 filesystem 让任何使用者执行 mount ？一般来说，<br>mount 仅有 root 可以进行，但下达 user 参数，则可让<br>一般 user 也能够对此 partition 进行 mount 。<br>defaults: 默认值为：rw, suid, dev, exec, auto, nouser, and async<br>remount: 重新挂载，这在系统出错，或重新更新参数时，很有用！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - &#x2F;etc&#x2F;filesystems：系统指定的测试挂载文件系统类型的优先级；</span><br><span class="line">  - &#x2F;proc&#x2F;filesystems：Linux 系统已经加载的文件系统类型</span><br><span class="line"></span><br><span class="line">- 我们 Linux 支持的文件系统之驱动程序都写在如下的目录中</span><br><span class="line"></span><br><span class="line">  - &#96;&#x2F;lib&#x2F;modules&#x2F;$(uname -r)&#x2F;kernel&#x2F;fs&#x2F;&#96;</span><br><span class="line"></span><br><span class="line">- 挂载 xfs&#x2F;ext4&#x2F;vfat</span><br><span class="line"></span><br><span class="line">  - 范例</span><br></pre></td></tr></table></figure>
<p>范例：找出 /dev/vda4 的 UUID 后，用该 UUID 来挂载文件系统到 /data/xfs 内<br>[root@study ~]#  blkid /dev/vda4<br>/dev/vda4: UUID=”e0a6af55-26e7-4cb7-a515-826a8bd29e90” TYPE=”xfs”</p>
<p>[root@study ~]#  mount UUID=”e0a6af55- - 26e7- - 4cb7- - a515- - 826a8bd29e90” /data/xfs<br>mount: mount point /data/xfs does not exist # 非正规目录！所以手动建立它！<br>[root@study ~]#  mkdir - - p /data/xfs<br>[root@study ~]#  mount UUID=”e0a6af55- - 26e7- - 4cb7- - a515- - 826a8bd29e90” /data/xfs<br>[root@study ~]#  df /data/xfs<br>Filesystem 1K-blocks Used Available Use% Mounted on<br>/dev/vda4 1038336 32864 1005472 4% /data/xfs</p>
<h1 id="顺利挂载，且容量约为-1G-左右没问题！"><a href="#顺利挂载，且容量约为-1G-左右没问题！" class="headerlink" title="顺利挂载，且容量约为 1G 左右没问题！"></a>顺利挂载，且容量约为 1G 左右没问题！</h1><p>范例：使用相同的方式，将 /dev/vda5 挂载于 /data/ext4<br>[root@study ~]#  blkid /dev/vda5<br>/dev/vda5: UUID=”899b755b-1da4-4d1d-9b1c-f762adb798e1” TYPE=”ext4”<br>[root@study ~]#  mkdir /data/ext4<br>[root@study ~]#  mount UUID=”899b755b- - 1da4- - 4d1d- - 9b1c- - f762adb798e1” /data/ext4<br>[root@study ~]# </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 挂载 cd 或者 dvd</span><br></pre></td></tr></table></figure>
<p>范例：将你用来安装 Linux 的 CentOS 原版光盘拿出来挂载到 /data/cdrom！<br>[root@study ~]#  blkid<br>…..(前面省略)…..<br>/dev/sr0: UUID=”2015-04-01-00-21-36-00” LABEL=”CentOS 7 x86_64” TYPE=”iso9660” PTTYPE=”dos”<br>[root@study ~]#  mkdir /data/cdrom<br>[root@study ~]#  mount /dev/sr0 /data/cdrom<br>mount: /dev/sr0 is write-protected, mounting read-only<br>[root@study ~]#  df /data/cdrom<br>Filesystem 1K-blocks Used Available Use% Mounted on<br>/dev/sr0 7413478 7413478 0 100% /data/cdrom</p>
<h1 id="怎么会使用掉-100-呢？是啊！因为是-DVD-啊！所以无法再写入了啊！"><a href="#怎么会使用掉-100-呢？是啊！因为是-DVD-啊！所以无法再写入了啊！" class="headerlink" title="怎么会使用掉 100% 呢？是啊！因为是 DVD 啊！所以无法再写入了啊！"></a>怎么会使用掉 100% 呢？是啊！因为是 DVD 啊！所以无法再写入了啊！</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 挂载 vfat 中文随身碟 (USB</span><br><span class="line"></span><br><span class="line">  - 案例</span><br><span class="line">  - 注意：不能够是 NTFS 的文件系统</span><br></pre></td></tr></table></figure>
<p>范例：找出你的随身碟装置的 UUID，并挂载到 /data/usb 目录中<br>[root@study ~]#  blkid<br>/dev/sda1: UUID=”35BC-6D6B” TYPE=”vfat”<br>[root@study ~]#  mkdir /data/usb<br>[root@study ~]# mount - - o codepage=950,iocharset=utf8 UUID=”35BC- - 6D6B” /data/usb<br>[root@study ~]#  # mount - - o codepage=950,iocharset=big5 UUID=”35BC- - 6D6B” /data/usb<br>[root@study ~]#  df /data/usb<br>Filesystem 1K-blocks Used Available Use% Mounted on<br>/dev/sda1 2092344 4 2092340 1% /data/usb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 重新挂载根目录与挂载不特定目录</span><br><span class="line"></span><br><span class="line">  - 案例</span><br></pre></td></tr></table></figure>
<p>  范例：将 / 重新挂载，并加入参数为 rw 与 auto<br>  [root@study ~]# mount - - o remount,rw,auto /</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  范例：将 /var 这个目录暂时挂载到 /data/var 底下：<br>  [root@study ~]#  mkdir /data/var<br>  [root@study ~]#  mount  – bind /var /data/var<br>  [root@study ~]#  ls - - lid /var  /data/var<br>  16777346 drwxr-xr-x. 22 root root 4096 Jun 15 23:43 /data/var<br>  16777346 drwxr-xr-x. 22 root root 4096 Jun 15 23:43 /var</p>
<h1 id="内容完全一模一样啊！因为挂载目录的缘故！"><a href="#内容完全一模一样啊！因为挂载目录的缘故！" class="headerlink" title="内容完全一模一样啊！因为挂载目录的缘故！"></a>内容完全一模一样啊！因为挂载目录的缘故！</h1><p>  [root@study ~]#  mount | grep var</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- umount ( 将装置 文件 卸除)</span><br><span class="line"></span><br><span class="line">  - 案例</span><br></pre></td></tr></table></figure>
<p>[root@study ~]#  umount [- - fn]  装 置文件名或挂 载点<br>选项与参数：<br>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；<br>-l ：立刻卸除文件系统，比 -f 还强！<br>-n ：不更新 /etc/mtab 情况下卸除。<br>就是直接将已挂载的文件系统给他卸除即是！卸除之后，可以使用 df 或 mount 看看是否还存在目<br>录树中？ 卸除的方式，可以下达装置文件名或挂载点，均可接受啦！底下的范例做看看吧！<br>范例：将本章之前自行挂载的文件系统全部卸除：<br>[root@study ~]#  mount<br>…..(前面省略)…..<br>/dev/vda4 on /data/xfs type xfs (rw,relatime,seclabel,attr2,inode64,logbsize=256k,sunit=512,..)<br>/dev/vda5 on /data/ext4 type ext4 (rw,relatime,seclabel,data=ordered)<br>/dev/sr0 on /data/cdrom type iso9660 (ro,relatime)<br>/dev/sda1 on /data/usb type vfat (rw,relatime,fmask=0022,dmask=0022,codepage=950,iocharset=…)<br>/dev/mapper/centos-root on /data/var type xfs (rw,relatime,seclabel,attr2,inode64,noquota)</p>
<h1 id="先找一下已经挂载的文件系统，如上所示，特殊字体即为刚刚挂载的装置啰！"><a href="#先找一下已经挂载的文件系统，如上所示，特殊字体即为刚刚挂载的装置啰！" class="headerlink" title="先找一下已经挂载的文件系统，如上所示，特殊字体即为刚刚挂载的装置啰！"></a>先找一下已经挂载的文件系统，如上所示，特殊字体即为刚刚挂载的装置啰！</h1><h1 id="基本上，卸除后面接装置或挂载点都可以！不过最后一个-centos-root-由于有其他挂载，"><a href="#基本上，卸除后面接装置或挂载点都可以！不过最后一个-centos-root-由于有其他挂载，" class="headerlink" title="基本上，卸除后面接装置或挂载点都可以！不过最后一个 centos-root 由于有其他挂载，"></a>基本上，卸除后面接装置或挂载点都可以！不过最后一个 centos-root 由于有其他挂载，</h1><h1 id="因此，该项目一定要使用挂载点来卸除才行！"><a href="#因此，该项目一定要使用挂载点来卸除才行！" class="headerlink" title="因此，该项目一定要使用挂载点来卸除才行！"></a>因此，该项目一定要使用挂载点来卸除才行！</h1><p>[root@study ~]#  umount /dev/vda4 &lt;==用装置文件名来卸除<br>[root@study ~]#  umount /data/ext4 &lt;==用挂载点来卸除<br>[root@study ~]#  umount /data/cdrom &lt;==因为挂载点比较好记忆！<br>[root@study ~]#  umount /data/usb<br>[root@study ~]#  umount /data/var &lt;==一定要用挂载点！因为装置有被其他方式挂载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 磁盘 文件系统参数自定义</span><br><span class="line"></span><br><span class="line">  - mknod</span><br><span class="line"></span><br><span class="line">    - 就是透过文件的 major 与 minor 数值来替代的</span><br><span class="line">    - 手动处理装置文件案例</span><br></pre></td></tr></table></figure>
<p>[root@study ~]#  mknod  装 置文件名 [bcp] [Major] [Minor]<br>选项与参数：<br>装置种类：<br>b ：设定装置名称成为一个周边储存设备文件，例如磁盘等；<br>c ：设定装置名称成为一个周边输入设备文件，例如鼠标/键盘等；<br>p ：设定装置名称成为一个 FIFO 文件；<br>Major ：主要装置代码；<br>Minor ：次要装置代码；<br>范例：由上述的介绍我们知道 /dev/vda10 装置代码 252, 10，请建立并查阅此装置<br>[root@study ~]#  mknod /dev/vda10 b 252 10<br>[root@study ~]#  ll /dev/vda10<br>brw-r–r–. 1 root root 252, 10 Jun 24 23:40 /dev/vda10</p>
<h1 id="上面那个-252-与-10-是有意义的，不要随意设定啊！"><a href="#上面那个-252-与-10-是有意义的，不要随意设定啊！" class="headerlink" title="上面那个 252 与 10 是有意义的，不要随意设定啊！"></a>上面那个 252 与 10 是有意义的，不要随意设定啊！</h1><p>范例：建立一个 FIFO 文件，档名为 /tmp/testpipe<br>[root@study ~]#  mknod /tmp/testpipe p<br>[root@study ~]#  ll /tmp/testpipe<br>prw-r–r–. 1 root root 0 Jun 24 23:44 /tmp/testpipe</p>
<h1 id="注意啊！这个文件可不是一般文件，不可以随便就放在这里！"><a href="#注意啊！这个文件可不是一般文件，不可以随便就放在这里！" class="headerlink" title="注意啊！这个文件可不是一般文件，不可以随便就放在这里！"></a>注意啊！这个文件可不是一般文件，不可以随便就放在这里！</h1><h1 id="测试完毕之后请删除这个文件吧！看一下这个文件的类型！是-p-喔！"><a href="#测试完毕之后请删除这个文件吧！看一下这个文件的类型！是-p-喔！" class="headerlink" title="测试完毕之后请删除这个文件吧！看一下这个文件的类型！是 p 喔！^_^"></a>测试完毕之后请删除这个文件吧！看一下这个文件的类型！是 p 喔！^_^</h1><p>[root@study ~]#  rm /dev/vda10 /tmp/testpipe<br>rm: remove block special file ‘/dev/vda10’ ? y y<br>rm: remove fifo ‘/tmp/testpipe’ ? y y</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- xfs_admin 修改 XFS 文件系统的 UUID 与 Label name</span><br><span class="line"></span><br><span class="line">  - 案例</span><br></pre></td></tr></table></figure>
<p>  xfs_admin [-lu] [-L label] [-U uuid] 设备文件<br>  选项与参数：<br>  -l ：列出这个装置的 label name<br>  -u ：列出这个装置的 UUID<br>  -L ：设定这个装置的 Label name<br>  -U ：设定这个装置的 UUID 喔！</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- tune2fs 修改 ext4 的 label name 与 UUID</span><br></pre></td></tr></table></figure>
<p>  [root@study ~]#  tune2fs [- - l] [- - L Label] [- - U uuid]  装 置文件名<br>  选项与参数：<br>  -l ：类似 dumpe2fs -h 的功能～将 superblock 内的数据读出来～<br>  -L ：修改 LABEL name<br>  -U ：修改 UUID 啰！<br>  范例：列出 /dev/vda5 的 label name 之后，将它改成 vbird_ext4<br>  [root@study ~]#  dumpe2fs - - h /dev/vda5 | grep name<br>  dumpe2fs 1.42.9 (28-Dec-2013)</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 设定开机挂载</span><br><span class="line"></span><br><span class="line">  - 系统挂载的一些限制</span><br><span class="line"></span><br><span class="line">    - 根目录 &#x2F; 是必须挂载的﹐而且一定要先于其它 mount point 被挂载进来。</span><br><span class="line">    - 其它 mount point 必须为已建立的目录﹐可任意指定﹐但一定要遵守必须的系统目录架构原则 (FHS)</span><br><span class="line">    - 所有 mount point 在同一时间之内﹐只能挂载一次。</span><br><span class="line">    - 所有 partition 在同一时间之内﹐只能挂载一次。</span><br><span class="line">    - 如若进行卸除﹐您必须先将工作目录移到 mount point(及其子目录) 之外</span><br><span class="line"></span><br><span class="line">  - 查看</span><br><span class="line"></span><br><span class="line">    - &#96;cat &#x2F;etc&#x2F;fstab&#96;</span><br><span class="line">    - 描述信息如下:</span><br></pre></td></tr></table></figure>
<p>  [装置/UUID 等] [挂载点] [文件系统] [文件系统参数] [dump] [fsck]</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">      - 解释</span><br><span class="line">        - 第一栏：磁盘装置文件名&#x2F;UUID&#x2F;LABEL name：</span><br><span class="line">          - 文件系统或磁盘的装置文件名，如 &#x2F;dev&#x2F;vda2 等</span><br><span class="line">          - 文件系统的 UUID 名称，如 UUID&#x3D;xxx</span><br><span class="line">          - 文件系统的 LABEL 名称，例如 LABEL&#x3D;xxx</span><br><span class="line">        - 第二栏：挂载点 (mount point)：：</span><br><span class="line">        - 第三栏：磁盘分区槽的文件系统：</span><br><span class="line">        - 第四栏：文件系统参数：</span><br><span class="line">        - 第五栏：能否被 dump 备份指令作用：</span><br><span class="line">        - 第六栏：是否以 fsck 检验扇区：</span><br><span class="line"></span><br><span class="line">- 特殊装置 loop 挂载</span><br><span class="line"></span><br><span class="line">  - 挂载光盘&#x2F;DVD 映象文件</span><br><span class="line">  - 大型文件的格式化</span><br><span class="line">  - 挂载</span><br><span class="line"></span><br><span class="line">- 内存置换空间(swap)</span><br><span class="line"></span><br><span class="line">  - 使用实体 分区置 槽建置 swap</span><br><span class="line">    - 基本步骤</span><br><span class="line">      1. 分区：先使用 gdisk 在你的磁盘中分区出一个分区槽给系统作为 swap 。由于 Linux 的 gdisk 预设会将分 区槽的 ID 设定为 Linux 的文件系统，所以你可能还得要设定一下 system ID 就是了。</span><br><span class="line">      2. 格式化：利用建立 swap 格式的『mkswap 装置文件名』就能够格式化该分区槽成为 swap 格式啰</span><br><span class="line">      3. 使用：最后将该 swap 装置启动，方法为：『swapon 装置文件名』。</span><br><span class="line">      4. 观察：最终透过 free 与 swapon -s 这个指令来观察一下内存的用量吧！</span><br><span class="line"></span><br><span class="line">- 使用 文件置 建置 swap</span><br><span class="line"></span><br><span class="line">  - 透过一个案例学习</span><br><span class="line">    1. 使用 dd 这个指令来新增一个 128MB 的文件在 &#x2F;tmp 底下：</span><br><span class="line">    2. 使用 mkswap 将 &#x2F;tmp&#x2F;swap 这个文件格式化为 swap 的文件格式</span><br><span class="line">    3. 使用 swapon 来将 &#x2F;tmp&#x2F;swap 启动啰！</span><br><span class="line">    4. 使用 swapoff 关掉 swap file，并设定自动启用</span><br><span class="line"></span><br><span class="line">- 文件系统的特殊观察与操作</span><br><span class="line"></span><br><span class="line">  - 磁盘空间之浪费问题</span><br><span class="line">  - 利用 GNU 的 parted 进行 分区 行为(Optional)</span><br><span class="line">  - **parted 可以直接在一行指令列就完成分区，是一个非常好用的指令！它常用的语法如下：**</span><br></pre></td></tr></table></figure>
<p>[root@study ~]#  parted [ 装 置 ] [ 指令 [ [ 参数 ]]<br>选项与参数：<br>指令功能：<br>新增分区：mkpart [primary|logical|extended] [ext4|vfat|xfs] 开始 结束<br>显示分区：print<br>删除分区：rm [partition]<br>范例一：以 parted 列出目前本机的分区表资料<br>[root@study ~]#  parted /dev/vda  print<br>Model: Virtio Block Device (virtblk) &lt;==磁盘接口与型号<br>Disk /dev/vda: 42.9GB &lt;==磁盘文件名与容量<br>Sector size (logical/physical): 512B/512B &lt;==每个扇区的大小<br>Partition Table: gpt &lt;==是 GPT 还是 MBR 分区<br>Disk Flags: pmbr_boot<br>Number Start End Size File system Name Flags<br>1 1049kB 3146kB 2097kB bios_grub<br>2 3146kB 1077MB 1074MB xfs<br>3 1077MB 33.3GB 32.2GB lvm<br>4 33.3GB 34.4GB 1074MB xfs Linux filesystem<br>5 34.4GB 35.4GB 1074MB ext4 Microsoft basic data<br>6 35.4GB 36.0GB 537MB linux-swap(v1) Linux swap<br>[ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 显示参数的意义</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>Number：这个就是分区槽的号码啦！举例来说，1 号代表的是 /dev/vda1 的意思；</li>
<li>Start：分区的起始位置在这颗磁盘的多少 MB 处？有趣吧！他以容量作为单位喔！</li>
<li>End：此分区的结束位置在这颗磁盘的多少 MB 处？</li>
<li>Size：由上述两者的分析，得到这个分区槽有多少容量；</li>
<li>File system：分析可能的文件系统类型为何的意思！</li>
<li>Name：就如同 gdisk 的 System ID 之意。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 案例</span><br><span class="line">    - 使用parted 将 mbr 分区表改成 gpt</span><br><span class="line">      - 非常危险，无法还原</span><br><span class="line"></span><br><span class="line">## 第八章 文件和文件系统的压缩</span><br><span class="line"></span><br><span class="line">- 压缩文件的用途和技术</span><br><span class="line"></span><br><span class="line">- Linux 常见的压缩命令</span><br><span class="line"></span><br><span class="line">  - gzip ， zcat 、zmore、zless、zgrep</span><br><span class="line"></span><br><span class="line">    - 语法</span><br><span class="line"></span><br><span class="line">      - &#96;gzip [-cdtv] 文件名&#96;</span><br><span class="line">      - &#96;zcat 文件名.gz&#96;</span><br></pre></td></tr></table></figure>
 选项与参数：<br> -c ：将压缩的数据输出到屏幕上，可透过数据流重导向来处理；<br> -d ：解压缩的参数；<br> -t ：可以用来检验一个压缩文件的一致性～看看文件有无错误；<br> -v ：可以显示出原文件/压缩文件案的压缩比等信息；<br> -# ：# 为数字的意思，代表压缩等级，-1 最快，但是压缩比最差、-9 最慢，但是压缩比最好！预设是 -6 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - &#96;egrep&#96; 查找</span><br><span class="line"></span><br><span class="line">  - bzip2, bzcat&#x2F;bzmore&#x2F;bzless&#x2F;bzgrep</span><br><span class="line"></span><br><span class="line">  - 对于gzip 的升级</span><br><span class="line"></span><br><span class="line">  - 优点</span><br><span class="line"></span><br><span class="line">    - 比gzip 压缩率更好</span><br><span class="line"></span><br><span class="line">  - 缺点</span><br><span class="line"></span><br><span class="line">    - 时间要更久</span><br><span class="line"></span><br><span class="line">  - xz, xzcat&#x2F;xzmore&#x2F;xzless&#x2F;xzgrep</span><br><span class="line"></span><br><span class="line">    - 优点</span><br><span class="line">      - 比bzip2 压缩率还要好</span><br><span class="line">    - 缺点</span><br><span class="line">      - 很慢</span><br><span class="line"></span><br><span class="line">- 打包命令（常用）</span><br><span class="line"></span><br><span class="line">  - 选项和参数</span><br></pre></td></tr></table></figure>
选项与参数：</li>
</ol>
<p>-c ：建立打包文件，可搭配 -v 来察看过程中被打包的档名(filename)<br>-t ：察看打包文件的内容含有哪些档名，重点在察看『档名』就是了；<br>-x ：解打包或解压缩的功能，可以搭配 -C (大写) 在特定目录解开<br>特别留意的是， -c, -t, -x 不可同时出现在一串指令列中。<br>-z ：透过 gzip 的支持进行压缩/解压缩：此时档名最好为 *.tar.gz<br>-j ：透过 bzip2 的支持进行压缩/解压缩：此时档名最好为 *.tar.bz2<br>-J ：透过 xz 的支持进行压缩/解压缩：此时档名最好为 *.tar.xz<br>特别留意， -z, -j, -J 不可以同时出现在一串指令列中<br>-v ：在压缩/解压缩的过程中，将正在处理的文件名显示出来！<br>-f filename：-f 后面要立刻接要被处理的档名！建议 -f 单独写一个选项啰！(比较不会忘记)<br>-C 目录 ：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。<br>其他后续练习会使用到的选项介绍：<br>-p(小写) ：保留备份数据的原本权限与属性，常用于备份(-c)重要的配置文件<br>-P(大写) ：保留绝对路径，亦即允许备份数据中含有根目录存在之意；<br>–exclude=FILE：在压缩的过程中，不要将 FILE 打包！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 常用如下命令</span><br><span class="line"></span><br><span class="line">  - 压缩&#96;tar -jcv -f filename.tar.bz2 文件或者目录名称&#96;</span><br><span class="line">  - 查询 &#96;tar -jtv filename.tar.bz2&#96;</span><br><span class="line">  - 解压缩 &#96;tar -jxv -f filename.tar.bz2 要解压的地方&#96;</span><br><span class="line"></span><br><span class="line">- 案例</span><br><span class="line"></span><br><span class="line">  - 压缩 &#x2F;etc 下面的文件，查看优点特殊的地方</span><br><span class="line">  - 为什么要去掉 &#x2F; 根目录路径？</span><br><span class="line">  - 如果要tar 里面加上这个根路径，要怎么做？</span><br><span class="line">  - 备份数据解压缩，并且到特定的目录下面</span><br><span class="line">    - 如何指定要解开的目录</span><br><span class="line"></span><br><span class="line">- 只解开单一文件的办法</span><br><span class="line"></span><br><span class="line">  - 先查找文档名称</span><br><span class="line">    - &#96;tar - - jtv - - f &#x2F;root&#x2F;etc.tar.bz2 | grep &#39;shadow&#39;&#96;</span><br><span class="line"></span><br><span class="line">- 打包某目录，但不含该目录下的某些 文件</span><br><span class="line"></span><br><span class="line">  - --exclude 参数用法</span><br><span class="line"></span><br><span class="line">- 仅备份比某个时刻还要新的 文件</span><br><span class="line"></span><br><span class="line">  - 先使用搜索找到对应的文件</span><br><span class="line">  - &#96;tar -jcv -f &#x2F;root&#x2F;etc.newer.then.passwd.tar.bz2 --newer-mtime&#x3D;&quot;2015&#x2F;06&#x2F;07&quot; &#x2F;etc&#x2F;*&#96;</span><br><span class="line"></span><br><span class="line">- 利用管道一遍打包一遍备份</span><br><span class="line"></span><br><span class="line">  -</span><br></pre></td></tr></table></figure>
<pre><code>tar -cvf - /etc | tar -xvf -
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">      - 注意 - 代表输入和输出</span><br><span class="line"></span><br><span class="line">  - 例题：系统备份的案例</span><br><span class="line"></span><br><span class="line">    - 结合上面所学。使用过滤方式备份数据</span><br><span class="line"></span><br><span class="line">  - 解压缩后的 SELinux</span><br><span class="line"></span><br><span class="line">    - 可能影响系统配置</span><br><span class="line"></span><br><span class="line">- XFS 文件系统的备份与还原</span><br><span class="line"></span><br><span class="line">  - 使用备份命令 xfs_dump</span><br><span class="line"></span><br><span class="line">    - 备份行为可以累积，类似SVN的手法，新建备份只新增差异文件</span><br><span class="line">    - 限制</span><br><span class="line">      - 文件系统必须挂载</span><br><span class="line">      - xfsdump 必须使用 root 的权限才能操作 (涉及文件系统的关系)</span><br><span class="line">      - xfsdump 只能备份 XFS 文件系统啊！</span><br><span class="line">      - xfsdump 备份下来的数据 (文件或储存媒体) 只能让 xfsrestore 解析</span><br><span class="line">      - xfsdump 是透过文件系统的 **UUID** 来分辨各个备份档的，因此不能备份两个具有相同 UUID 的文件系统 喔！</span><br><span class="line">      - **xfsdump 预设仅支持文件系统的备份，并不支持特定目录的备份**</span><br><span class="line"></span><br><span class="line">  - 使用方法</span><br><span class="line"></span><br><span class="line">    - &#96;xfsdump [- - L S_label] [- - M M_label] [- - l #] [- - f 备 份 档 ] 待 备 份 资&#96;</span><br><span class="line">    - 选项和参数</span><br></pre></td></tr></table></figure></code></pre><p>  选项与参数：<br>  -L ：xfsdump 会纪录每次备份的 session 标头，这里可以填写针对此文件系统的简易说明<br>  -M ：xfsdump 可以纪录储存媒体的标头，这里可以填写此媒体的简易说明<br>  -l ：是 L 的小写，就是指定等级～有 0~9 共 10 个等级喔！ (预设为 0，即完整备份)<br>  -f ：有点类似 tar 啦！后面接产生的文件，亦可接例如 /dev/st0 装置文件名或其他一般文件档名等<br>  -I ：从 /var/lib/xfsdump/inventory 列出目前备份的信息状态</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - 案例</span><br><span class="line">    - 累积备份</span><br><span class="line"></span><br><span class="line">- XFS 文件系统还原 xfsrestore</span><br><span class="line"></span><br><span class="line">  - 占位，等安装对应系统再来</span><br><span class="line"></span><br><span class="line">- 用 xfsrestore 观察 xfsdump</span><br><span class="line"></span><br><span class="line">  - 简单复原 level 0 的文件系统</span><br><span class="line">  - 复原累积备份资料</span><br><span class="line">  - 仅还原部分 文件的 的 xfsrestore 互动模式</span><br><span class="line"></span><br><span class="line">- 光盘写入工具</span><br><span class="line"></span><br><span class="line">  - 了解即可</span><br><span class="line"></span><br><span class="line">- 其他常见的压缩和备份工具</span><br><span class="line"></span><br><span class="line">  - dd</span><br><span class="line"></span><br><span class="line">    - 作用</span><br><span class="line">      - dd 可以读取磁盘装置的内容，然后将整个装置备份成一个文件呢</span><br><span class="line">    - 使用方法</span><br><span class="line">      - &#96;dd if&#x3D;&quot;input_file&quot; of&#x3D;&quot;output_file&quot; bs&#x3D;&quot;block_size&quot; count&#x3D;&quot;number&quot;&#96;</span><br><span class="line">    - 选项和参数</span><br></pre></td></tr></table></figure>
<p>  选项与参数：<br>  if ：就是 input file 啰～也可以是装置喔！<br>  of ：就是 output file 喔～也可以是装置；<br>  bs ：规划的一个 block 的大小，若未指定则预设是 512 bytes(一个 sector 的大小)<br>  count：多少个 bs 的意思。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 案例</span><br><span class="line">  - 范例一：将 &#x2F;etc&#x2F;passwd 备份到 &#x2F;tmp&#x2F;passwd.back 当中</span><br><span class="line">    - &#96;dd if&#x3D;&#x2F;etc&#x2F;passwd of&#x3D;&#x2F;tmp&#x2F;passwd.back&#96;</span><br><span class="line">  - 范例二：将刚刚刻录的光驱的内容，再次的备份下来成为映像挡</span><br><span class="line">  - 范例三：假设你的 USB 是 &#x2F;dev&#x2F;sda 好了，请将刚刚范例二的 image 刻录到 USB 磁盘中</span><br><span class="line">  - 范例四：将你的 &#x2F;boot 整个文件系统透过 dd 备份下来</span><br><span class="line">- 例题：</span><br></pre></td></tr></table></figure>
<p>  你想要将你的 /dev/vda2 进行完整的复制到另一个 partition 上，请使用你的系统上面未分区完毕的容量再建立一<br>  个与 /dev/vda2 差不多大小的分区槽 (只能比 /dev/vda2 大，不能比他小！)，然后将之进行完整的复制 (包括需<br>  要复制 boot sector 的区块)。<br>  答：<br>  因为我们的 /dev/sda 也是个测试的 USB 磁盘，可以随意恶搞！我们刚刚也才测试过将光盘映像文件给它复制进<br>  去而已。 现在，请你分区 /dev/sda1 出来，然后将 /dev/vda2 完整的拷贝进去 /dev/sda1 吧！</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - 注意点</span><br><span class="line">      - 需要注意dd 连同 uuid 一起复制，如果要复制两块完全相同的硬盘，需要重新定义一下 uuid</span><br><span class="line"></span><br><span class="line">- cpio</span><br><span class="line"></span><br><span class="line">  - 作用</span><br><span class="line">    - cpio 可以备份任何东西，包括装置设备文件</span><br><span class="line">    - 暂时只记住语法即可</span><br><span class="line">  - 缺点</span><br><span class="line">    - 不会主动去找文件，需要find 找到文件才能备份</span><br><span class="line">  - 语法</span><br></pre></td></tr></table></figure>
<p>[root@study ~]#  cpio - - ovcB &gt; [file|device] &lt;==备份<br>[root@study ~]#  cpio - - ivcdu &lt; [file|device] &lt;==还原<br>[root@study ~]#  cpio - - ivct &lt; [file|device] &lt;==察看<br>备份会使用到的选项与参数：<br>-o ：将数据 copy 输出到文件或装置上<br>-B ：让预设的 Blocks 可以增加至 5120 bytes ，预设是 512 bytes ！<br>这样的好处是可以让大文件的储存速度加快(请参考 i-nodes 的观念)<br>还原会使用到的选项与参数：<br>-i ：将数据自文件或装置 copy 出来系统当中<br>-d ：自动建立目录！使用 cpio 所备份的数据内容不见得会在同一层目录中，因此我们<br>必须要让 cpio 在还原时可以建立新目录，此时就得要 -d 选项的帮助！<br>-u ：自动的将较新的文件覆盖较旧的文件！<br>-t ：需配合 -i 选项，可用在”察看”以 cpio 建立的文件或装置的内容<br>一些可共享的选项与参数：<br>-v ：让储存的过程中文件名可以在屏幕上显示<br>-c ：一种较新的 portable format 方式储存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 练习题</span><br><span class="line"></span><br><span class="line">- 情境模拟题一：请将本章练习过程中产生的不必要的文件删除，以保持系统容量不要被恶搞！</span><br><span class="line"></span><br><span class="line">- 情境模拟题二：你想要逐时备份 &#x2F;home 这个目录内的数据，又担心每次备份的信息太多， 因此想要使用 xfsdump 的方式来逐一备份数据到 &#x2F;backups 这个目录下。该如何处理？ o 目标：了解到 xfsdump 以及各个不同 level 的作用； o 前提：被备份的资料为单一 partition ，亦即本例中的 &#x2F;home 实际处理的方法其实还挺简单的！我们可以这样做看看：</span><br><span class="line"></span><br><span class="line">- 情境模拟三：假设过了一段时间后，妳的 &#x2F;home 变的怪怪的，妳想要将该 filesystem 以刚刚的备份数据还 原， 此时该如何处理呢？妳可以这样做的：</span><br><span class="line"></span><br><span class="line">  ​	由于 &#x2F;home 这个 partition 是用户只要有登入就会使用，因此你应该无法卸除这个东西！因此，你必 须要注销所有一般用户， 然后在 tty2 直接以 root 登入系统，不要使用一般账号来登入后 su 转成 root ！ 这样才有办法卸除 &#x2F;home 喔！</span><br><span class="line"></span><br><span class="line">## 第九章 Vim编辑器</span><br><span class="line"></span><br><span class="line">- vi 和 vim</span><br><span class="line"></span><br><span class="line">- 为什么要学习vi 和vim</span><br><span class="line"></span><br><span class="line">  - 内置命令会使用</span><br><span class="line">  - unix 基本都会自带</span><br><span class="line">  - 方便简单</span><br><span class="line">  - 功能强大</span><br><span class="line"></span><br><span class="line">- vi使用方法</span><br><span class="line"></span><br><span class="line">  - 三种模式</span><br><span class="line">    - 一般命令模式</span><br><span class="line">      - </span><br><span class="line">    - 编辑模式</span><br><span class="line">    - 命令行模式</span><br><span class="line"></span><br><span class="line">- 注意</span><br><span class="line"></span><br><span class="line">  - 一般指令模式可与编辑模式及指令列模式切换， 但编辑模式与指令列 模式之间不可互相切换喔</span><br><span class="line"></span><br><span class="line">- 简单案例</span><br><span class="line"></span><br><span class="line">  - 使用『 vi filename 』进入一般指令模式</span><br><span class="line">  - 使用 i 进入编辑模式</span><br><span class="line">  - 使用esc 退出到一般命令模式</span><br><span class="line">  - &#96;:wq&#96; 进行保存</span><br><span class="line"></span><br><span class="line">- 常用操作</span><br><span class="line"></span><br><span class="line">  - 一般模式</span><br><span class="line"></span><br><span class="line">    - hjkl 可以进行上下左右的移动</span><br><span class="line">    - &#96;ctrl + f&#96; 和&#96;ctrl + b&#96; 上下移动一页</span><br><span class="line">    - &#x2F; 查找 继续按下n继续查找</span><br><span class="line">    - 0 或者 home</span><br><span class="line">    - $ 或者 end</span><br><span class="line">    - gg 跳到第一行</span><br><span class="line">    - n(数字) enter 光标下移 N 行</span><br><span class="line">    - :n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</span><br><span class="line">      - n1 与 n2 为数字。在第 n1 与 n2 列之间寻找 word1 这个字符串，并将该字符串取代 为 word2 ！举例来说，在 100 到 200 列之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</span><br><span class="line">    - :1,$s&#x2F;word1&#x2F;word2&#x2F;gc</span><br><span class="line">      - 从第一列到最后一列寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显 示提示字符给用户确认 (confirm) 是否需要取代！(常用)</span><br><span class="line">    - :1,$s&#x2F;word1&#x2F;word2&#x2F;g</span><br><span class="line">      - 从第一列到最后一列寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</span><br><span class="line">    - x 退出但是不改变时间</span><br><span class="line">    - dd 删除一行</span><br><span class="line">    - yy 复制一行</span><br><span class="line">    - nyy 复制多行 如3yy</span><br><span class="line">    - u 恢复前一个操作</span><br><span class="line">    - ctrl + r 重做上一个动作</span><br><span class="line">    - . 重复上一个动作</span><br><span class="line"></span><br><span class="line">  - 编辑模式</span><br><span class="line"></span><br><span class="line">    - i I 插入模式</span><br><span class="line">      - i 为『从目前光标所在处插入』</span><br><span class="line">      - I 为『在目前所在列的第一个非空格符处开始插入】</span><br><span class="line">    - a 和 A</span><br><span class="line">      - a 为『从目前光标所在的下一个字符处开始插入』</span><br><span class="line">      - A 为『从光标所在列的最后一个字符处开始插入』</span><br><span class="line">    - o 和 O</span><br><span class="line">    - r 和 R</span><br><span class="line"></span><br><span class="line">  - 命令模式</span><br><span class="line"></span><br><span class="line">    - w</span><br><span class="line">    - q</span><br><span class="line">    - !</span><br><span class="line"></span><br><span class="line">  - 实际案例</span><br></pre></td></tr></table></figure>
<ol>
<li><p>请在 /tmp 这个目录下建立一个名为 vitest 的目录；</p>
</li>
<li><p>进入 vitest 这个目录当中；</p>
</li>
<li><p>将 /etc/man_db.conf 复制到本目录底下(或由上述的连结下载 man_db.conf 文件)；</p>
</li>
<li><p>使用 vi 开启本目录下的 man_db.conf 这个文件；</p>
</li>
<li><p>在 vi 中设定一下行号；</p>
</li>
<li><p>移动到第 43 列，向右移动 59 个字符，请问你看到的小括号内是哪个文字？</p>
</li>
<li><p>移动到第一列，并且向下搜寻一下『 gzip 』这个字符串，请问他在第几列？</p>
</li>
<li><p>接着下来，我要将 29 到 41 列之间的『小写 man 字符串』改为『大写 MAN 字符串』，并且一个一个挑<br>选是否需要修改，如何下达指令？如果在挑选过程中一直按『y』， 结果会在最后一列出现改变了几个 man<br>呢？</p>
</li>
<li><p>修改完之后，突然反悔了，要全部复原，有哪些方法？</p>
</li>
<li><p>我要复制 66 到 71 这 6 列的内容(含有 MANDB_MAP)，并且贴到最后一列之后；</p>
</li>
<li><p>113 到 128 列之间的开头为 # 符号的批注数据我不要了，要如何删除？</p>
</li>
<li><p>将这个文件另存成一个 man.test.config 的檔名；</p>
</li>
<li><p>去到第 25 列，并且删除 15 个字符，结果出现的第一个单字是什么？</p>
</li>
<li><p>在第一列新增一列，该列内容输入『I am a student…』；</p>
</li>
<li><p>储存后离开吧！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - vim 缓存处理办法</span><br><span class="line"></span><br><span class="line">    - 问题</span><br><span class="line">      - 问题一：可能有其他人或程序同时在编辑这个文件：</span><br><span class="line">      - 问题二：在前一个 vim 的环境中，可能因为某些不知名原因导致 vim 中断 (crashed)：</span><br><span class="line"></span><br><span class="line">- vim 的额外功能</span><br><span class="line"></span><br><span class="line">- 可视区块</span><br><span class="line"></span><br><span class="line">  - v 开始反白</span><br><span class="line">  - V 行反白</span><br><span class="line">  - y 反白复制</span><br><span class="line">  - d 反白删除</span><br><span class="line"></span><br><span class="line">- 多文件编辑</span><br><span class="line"></span><br><span class="line">  - :n 编辑下一个文件</span><br><span class="line">  - :N 编辑上一个文件</span><br><span class="line">  - :files 列出目前这个vim 开启的所有文件</span><br><span class="line">  - 案例</span><br><span class="line">    - 多文件编辑</span><br><span class="line"></span><br><span class="line">- 多窗口功能</span><br><span class="line"></span><br><span class="line">  - :sp &#123;filename&#125;</span><br><span class="line">    - 存在文件名对比文件，</span><br><span class="line">    - 否则新建一个窗口用于对比</span><br><span class="line">  - 利用 ctrl + w + 上 或者 ctrl + w + 下 来切换窗口</span><br><span class="line"></span><br><span class="line">- vim 关键词补全</span><br><span class="line"></span><br><span class="line">  - 快捷键使用</span><br><span class="line">    - [ctrl]+x -&gt; [ctrl]+n 透过目前正在编辑的这个『文件的内容文字』作为关键词，予以补齐</span><br><span class="line">    - [ctrl]+x -&gt; [ctrl]+f 以当前目录内的『文件名』作为关键词，予以补齐</span><br><span class="line">    - [ctrl]+x -&gt; [ctrl]+o 以扩展名作为语法补充，以 vim 内建的关键词，予以补齐</span><br><span class="line"></span><br><span class="line">- vim 环境设定与记录： ~&#x2F;.vimrc, ~&#x2F;.viminfo</span><br><span class="line"></span><br><span class="line">- vim 常用图</span><br><span class="line"></span><br><span class="line">  - 查看图片</span><br><span class="line"></span><br><span class="line">- 其他vim 注意事项</span><br><span class="line"></span><br><span class="line">  - 中文乱码</span><br><span class="line">  - dos 和 linux 换行</span><br><span class="line">    - dos2nnix</span><br><span class="line">    - unix2dos</span><br><span class="line"></span><br><span class="line">- 语系编码转换</span><br><span class="line"></span><br><span class="line">  - &#96;iconv -f big5 -t utf8 vi.big5 -o vi.utf8&#96;</span><br><span class="line">  - &#96;iconv -f utf8 -t big5 vi utf8 | \&#96;</span><br><span class="line"></span><br><span class="line">### 练习题</span><br><span class="line"></span><br><span class="line">- 在第七章的情境模拟题二的第五点，编写 &#x2F;etc&#x2F;fstab 时，当时使用 nano 这个指令， 请尝试使用 vim 去编 辑 &#x2F;etc&#x2F;fstab ，并且将第七章新增的那一列的 defatuls 改成 default ，会出现什么状态？ 离开前请务必要 修订成原本正确的信息。此外，如果将该列批注 (最前面加 #)，你会发现字体颜色也有变化喔！</span><br><span class="line">- 尝试在你的系统中，你惯常使用的那个账号的家目录下，将本章介绍的 vimrc 内容进行一些常用设定，包 括： o 设定搜寻高亮度反白 o 设定语法检验启动 o 设定默认启动行号显示 o 设定有两行状态栏 (一行状态+一行指令列) :set laststatus&#x3D;2</span><br><span class="line"></span><br><span class="line">### 简答题</span><br><span class="line"></span><br><span class="line"># 第十章 认识 BASH 这个 Shell</span><br><span class="line"></span><br><span class="line">- 简单认识shell</span><br><span class="line"></span><br><span class="line">  - 什么是shell?</span><br><span class="line">    - 广义：就是指可以调动内核和硬件打交道的一个壳程序</span><br><span class="line">    - 狭义：通过内核指挥硬件工作的命令程序</span><br><span class="line">  - 为什么要学习shell？</span><br><span class="line">    - 防止突发情况</span><br><span class="line">    - 个人提升</span><br><span class="line">    - 公司要求</span><br><span class="line">    - 某些特殊情况只能使用shell去解决</span><br><span class="line">  - 不学习shell会怎么样</span><br><span class="line">    - 使用 x windows</span><br><span class="line">    - 使用第三方应用程序</span><br><span class="line">  - 如何学习shell</span><br><span class="line">    - 多敲</span><br><span class="line">    - 多练</span><br><span class="line">    - 多模拟场景</span><br><span class="line">      - 定期清理过期日志</span><br><span class="line">      - 开启启动某些应用程序</span><br><span class="line">      - 磁盘预警</span><br><span class="line"></span><br><span class="line">- 系统合法的shell 和 &#x2F;etc&#x2F;shells 功能</span><br><span class="line"></span><br><span class="line">  - cshell 和 bshell (bash)</span><br><span class="line">  - 检查&#x2F;etc&#x2F;shell 可以得到系统可使用的shell</span><br><span class="line">    - &#x2F;bin&#x2F;sh</span><br><span class="line">    - &#x2F;bin&#x2F;bash 默认</span><br><span class="line">    - &#x2F;bin&#x2F;tcsh</span><br><span class="line">    - &#x2F;bin&#x2F;csh</span><br><span class="line"></span><br><span class="line">- bash的功能</span><br><span class="line"></span><br><span class="line">  - history 历史功能</span><br><span class="line">    - 记录的位置：家目录的 .bash_history</span><br><span class="line">      - 注意：按照登陆来记录，记录上次登陆的命令，本次的被存在缓存</span><br><span class="line">  - 补全功能</span><br><span class="line">    - 确定命令正确</span><br><span class="line">  - 命令别名</span><br><span class="line">    - alias</span><br><span class="line">      - 简单用：&#96;alias lm &#x3D;&#39;ls -al&#39;&#96;</span><br><span class="line">  - 通配符</span><br><span class="line"></span><br><span class="line">- 判断命令是否为 Bash shell 内置 ： &#96;type&#96;</span><br><span class="line"></span><br><span class="line">  - &#96;man bash&#96;</span><br><span class="line">  - type 基本使用</span><br><span class="line">    - &#96;type -t umask&#96;</span><br><span class="line">  - 命令快捷键：常用</span><br><span class="line">    - ctrl + u 和 ctrl + k</span><br><span class="line">    - ctrl + a 和 ctrl + e</span><br><span class="line"></span><br><span class="line">- shell 基本内容学习</span><br><span class="line"></span><br><span class="line">  - 变量定义</span><br><span class="line">    - echo 和 unset</span><br><span class="line">      - 案例:</span><br><span class="line">        - &#96;echo $HOME&#96;</span><br><span class="line">        - 设置：变量 &#96;echo $&#123;myname&#125;&#96;</span><br><span class="line">      - 特殊点</span><br><span class="line">        - echo 默认变量为“空”</span><br><span class="line">    - 设置规则</span><br><span class="line">      - 双引号和单引号的区别</span><br><span class="line">    - 案例</span><br><span class="line">      - 如何进入到内核的目录模块</span><br><span class="line">        - &#96;cd &#x2F;lib&#x2F;moudules&#x2F;$(name -r)&#x2F;kernel&#96;</span><br><span class="line">  - 变量取消</span><br><span class="line">    - unset name</span><br><span class="line"></span><br><span class="line">- 环境变量设置</span><br><span class="line"></span><br><span class="line">  - env 查看环境变量</span><br><span class="line"></span><br><span class="line">  - declare 定义变量的另一种方式，声明变量</span><br><span class="line"></span><br><span class="line">    - declare -i number&#x3D;$RANDOM*10&#x2F;32768 ; echo $number</span><br><span class="line">      - 随机生成一个数字</span><br><span class="line"></span><br><span class="line">  - set 观察和设置自定义变量</span><br><span class="line"></span><br><span class="line">  - PS1 提示字符</span><br><span class="line"></span><br><span class="line">    - 有许多的定义，具体可以查看对应的百度内容</span><br><span class="line"></span><br><span class="line">    - https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_34208467&#x2F;article&#x2F;details&#x2F;81019467</span><br><span class="line"></span><br><span class="line">    - 参数意义</span><br></pre></td></tr></table></figure>
<p>  \d ：可显示出『星期 月 日』的日期格式，如：”Mon Feb 2”<br>  \H ：完整的主机名。举例来说，鸟哥的练习机为『study.centos.vbird』<br>  \h ：仅取主机名在第一个小数点之前的名字，如鸟哥主机则为『study』后面省略<br>  \t ：显示时间，为 24 小时格式的『HH:MM:SS』<br>  \T ：显示时间，为 12 小时格式的『HH:MM:SS』<br>  \A ：显示时间，为 24 小时格式的『HH:MM』<br>  @ ：显示时间，为 12 小时格式的『am/pm』样式<br>  \u ：目前使用者的账号名称，如『dmtsai』；<br>  \v ：BASH 的版本信息，如鸟哥的测试主机版本为 4.2.46(1)-release，仅取『4.2』显示<br>  \w ：完整的工作目录名称，由根目录写起的目录名称。但家目录会以 ~ 取代；<br>  \W ：利用 basename 函数取得工作目录名称，所以仅会列出最后一个目录名。<br>  # ：下达的第几个指令。<br>  $ ：提示字符，如果是 root 时，提示字符为 # ，否则就是 $ 啰～</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- $</span><br><span class="line"></span><br><span class="line">  - 查看PID :&#96;&#96;</span><br><span class="line"></span><br><span class="line">- ?</span><br><span class="line"></span><br><span class="line">  - 代表着上一个命令的返回值</span><br><span class="line">  - 如何理解？</span><br><span class="line">    - 一般命令执行之后会有一个0和非0的值，如果是0代表执行成功</span><br><span class="line">    - 非0则代表失败</span><br><span class="line"></span><br><span class="line">- export 自定义环境变量</span><br><span class="line"></span><br><span class="line">  - env 和 set有什么区别？</span><br><span class="line">    - env 是父进程环境变量</span><br><span class="line">    - set 可以是子进程变量</span><br><span class="line">    - **子进程仅仅继承父进程的环境变量，不继承自定义变量**</span><br><span class="line">  - 使用export 可以让自定义变量变成环境变量</span><br><span class="line"></span><br><span class="line">- declare 环境变量转自定义变量</span><br><span class="line"></span><br><span class="line">- 语系变量</span><br><span class="line"></span><br><span class="line">  - locale -a 查看系统支持的所有语言</span><br><span class="line"></span><br><span class="line">- 变量有效范围</span><br><span class="line"></span><br><span class="line">  - 变量键盘读取和数组声明：read 、array、declare</span><br><span class="line">  - read</span><br><span class="line">    - 作用</span><br><span class="line">      - 等待键盘输入</span><br><span class="line">    - 参数</span><br><span class="line">      - -p 提示字符</span><br><span class="line">      - -t 等待秒数</span><br><span class="line">  - declare ， typeset</span><br><span class="line">    - 作用</span><br><span class="line">      - 声明变量类型</span><br><span class="line">        - -a 定义数组类型</span><br><span class="line">        - -i 定义整数类型</span><br><span class="line">        - -e export 相同</span><br><span class="line">        - -r readonly类型</span><br><span class="line">    - 注意：</span><br><span class="line">      - 默认字符串类型</span><br><span class="line">      - 默认最多为整型运算</span><br><span class="line"></span><br><span class="line">- 和文件系统程序有关的限制关系：ulimit</span><br><span class="line"></span><br><span class="line">  - 作用</span><br><span class="line">    - 限制开启文件数量，可使用CPU时间</span><br><span class="line">    - 可使用内存总量</span><br><span class="line">  - **参数和语法：**</span><br></pre></td></tr></table></figure>
<p>选项与参数：<br>-H ：hard limit ，严格的设定，必定不能超过这个设定的数值；<br>-S ：soft limit ，警告的设定，可以超过这个设定值，但是若超过则有警告讯息。<br>在设定上，通常 soft 会比 hard 小，举例来说，soft 可设定为 80 而 hard<br>设定为 100，那么你可以使用到 90 (因为没有超过 100)，但介于 80~100 之间时，<br>系统会有警告讯息通知你！<br>-a ：后面不接任何选项与参数，可列出所有的限制额度；<br>-c ：当某些程序发生错误时，系统可能会将该程序在内存中的信息写成文件(除错用)，<br>这种文件就被称为核心文件(core file)。此为限制每个核心文件的最大容量。<br>-f ：此 shell 可以建立的最大文件容量(一般可能设定为 2GB)单位为 Kbytes<br>-d ：程序可使用的最大断裂内存(segment)容量；<br>-l ：可用于锁定 (lock) 的内存量<br>-t ：可使用的最大 CPU 时间 (单位为秒)<br>-u ：单一用户可以使用的最大程序(process)数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 如何恢复？</span><br><span class="line">    - 注销再登陆</span><br><span class="line"></span><br><span class="line">- 变量的删除、取代和替换</span><br><span class="line"></span><br><span class="line">  - 变量删除替换</span><br><span class="line"></span><br><span class="line">    - 案例：</span><br></pre></td></tr></table></figure>
<p>${variable#/*local/bin:} }<br>上面的特殊字体部分是关键词！用在这种删除模式所必须存在的</p>
<p>${ variable#/*local/bin:}<br>这就是原本的变量名称，以上面范例二来说，这里就填写 path 这个『变量名称』啦！</p>
<p>${variable# #/*local/bin:}</p>
<h1 id="号的作用"><a href="#号的作用" class="headerlink" title="号的作用"></a>号的作用</h1><p>这是重点！代表『从变量内容的最前面开始向右删除』，<br>且仅删除最短的那个</p>
<p>${variable# /*local/bin:}<br>代表要被删除的部分，由于 # 代表由前面开始删除，所以这里便由开始的 / 写起。<br>需要注意的是，我们还可以透过通配符 * 来取代 0 到无穷多个任意字符<br>以上面范例二的结果来看， path 这个变量被删除的内容如下所示：<br>/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 简单理解</span><br></pre></td></tr></table></figure>
<p>${variable# #/*local/bin:}</p>
<h1 id="号的作用-1"><a href="#号的作用-1" class="headerlink" title="号的作用"></a>号的作用</h1><p>这是重点！代表『从变量内容的最前面开始向右删除』，<br>且仅删除最短的那个 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - \# 和 ## 代表如下</span><br><span class="line">    - \# 符合替换字符的【最短的】哪一个</span><br><span class="line">    - \## 符合替换字符最长的哪一个</span><br><span class="line">  - 如何从后面向前面删除内容</span><br><span class="line">    - % 和 %%</span><br><span class="line"></span><br><span class="line">- 替换</span><br><span class="line"></span><br><span class="line">  - 案例</span><br></pre></td></tr></table></figure>
<p>范例六：将 path 的变量内容内的 sbin 取代成大写 SBIN：<br>[dmtsai@study ~]$  echo ${path/sbin/SBIN}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 变量测试和内容替换</span><br><span class="line"></span><br><span class="line">  - 案例</span><br></pre></td></tr></table></figure>
<p>范例一：测试一下是否存在 username 这个变量，若不存在则给予 username 内容为 root<br>[dmtsai@study ~]$  echo ${username}<br>&lt;==由于出现空白，所以 username 可能不存在，也可能是空字符串<br>[dmtsai@study ~]$  username=${username-root}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 关键点在于 - 号码</span><br><span class="line">  - 后面接变量不存在的替换字符</span><br><span class="line">  - 如果是空字符串也想替换要怎么做</span><br><span class="line">    - :- 前面加上 : 冒号即可</span><br><span class="line"></span><br><span class="line">- 提示变量不存在 ?</span><br><span class="line"></span><br><span class="line">  - 案例</span><br></pre></td></tr></table></figure>
<p>测试：若 str 不存在时，则 var 的测试结果直接显示 “无此变量”<br>[dmtsai@study ~]$  unset str; var=${str? 无 此 变数} }<br>-bash: str: 无此变量 &lt;==因为 str 不存在，所以输出错误讯息</p>
<pre><code></code></pre></li>
</ol>
</li>
<li><p>命名别名和历史命令</p>
<ul>
<li>alias 和 unalias</li>
<li>history<ul>
<li>自行man 查询使用方式</li>
</ul>
</li>
</ul>
</li>
<li><p>bash shell 的操作环境</p>
<ul>
<li>路径和命令的查找顺序（面试终点）<ul>
<li>根据绝对和相对路径查找的命令</li>
<li>由于alias 查找出来的命令</li>
<li>bash 内置的 命令来执行</li>
<li>根据$PATH 环境变量来查找</li>
</ul>
</li>
</ul>
</li>
<li><p>登陆的欢迎信息</p>
<ul>
<li><code>cat /etc/issue</code></li>
<li>cat /etc/issue.net 用于ssh等远程登陆使用的欢迎信息</li>
<li>cat /etc/motd 用于所有登陆用户想要知道的某些信息</li>
</ul>
</li>
<li><p>bash 的环境配置文件</p>
<ul>
<li>login 和 non-login shell<ul>
<li>login shell 取得bash 的时候需要的完整登陆流程</li>
<li>non-login shell: 取得bash 的方法不需要重复登陆的操作</li>
</ul>
</li>
<li>为什么需要最先了解这两个东西<ul>
<li><strong>因为不同的登陆形式获取的shell配置不一样</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>login shell读取的内容</p>
<ul>
<li>/etc/profile 系统整体配置，很脆弱，一旦奔溃恢复比较麻烦<ul>
<li>/etc/profile 的主要内容<ul>
<li>PATH</li>
<li>MAIL</li>
<li>USER</li>
<li>HOSTNAME</li>
<li>HISTSIZE</li>
<li>umask</li>
<li>调用外部文件<ul>
<li>/etc/profile.d/*.sh</li>
<li>/etc/locale.conf</li>
<li>/usr/share/bash-completion/completions/*</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>~/.bash_profile 或者 ~/.bash_login 或者 ~/.profile 用户个人的配置文件</li>
</ul>
</li>
<li><p>读取配置文件的命令 source</p>
<ul>
<li>作用<ul>
<li>当案例需要多个变量环境的时候，很方便的切换变量环境</li>
<li>安装某些软件的时候快速改变环境变量测试是否设置正确</li>
</ul>
</li>
<li>注意点：<ul>
<li>/etc/bashrc (red hat 系统特有)<ul>
<li>作用<ul>
<li>根据不同的UID 设置umask</li>
<li>根据不同UID 设置提示字符</li>
<li>调用 /etc/profile.d/*.sh</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>终端环境设置 stty 、 set</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9saW51eC5kaWUubmV0L21hbi8xL3N0dHk=" title="https://linux.die.net/man/1/stty">https://linux.die.net/man/1/stty<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29tcHV0ZXJob3BlLmNvbS91bml4L3VzdHR5Lmh0bQ==" title="https://www.computerhope.com/unix/ustty.htm">https://www.computerhope.com/unix/ustty.htm<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
